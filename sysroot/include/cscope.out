cscope 15 /usr/android/android-ndk-r10b/platforms/android-9/arch-arm/usr/include               0001752806
	@EGL/egl.h

30 #i‚de‡
__egl_h_


31 
	#__egl_h_


	)

36 
	~<EGL/egÕœtf‹m.h
>

38 #ifde‡
__˝lu•lus


44 
	tEGLBoﬁón
;

45 
	tEGLíum
;

46 *
	tEGLC⁄fig
;

47 *
	tEGLC⁄ãxt
;

48 *
	tEGLDi•œy
;

49 *
	tEGLSurÁ˚
;

50 *
	tEGLClõ¡Buf„r
;

53 
	#EGL_VERSION_1_0
 1

	)

54 
	#EGL_VERSION_1_1
 1

	)

55 
	#EGL_VERSION_1_2
 1

	)

56 
	#EGL_VERSION_1_3
 1

	)

57 
	#EGL_VERSION_1_4
 1

	)

64 
	#EGL_FALSE
 0

	)

65 
	#EGL_TRUE
 1

	)

68 
	#EGL_DEFAULT_DISPLAY
 ((
EGLN©iveDi•œyTy≥
)0)

	)

69 
	#EGL_NO_CONTEXT
 ((
EGLC⁄ãxt
)0)

	)

70 
	#EGL_NO_DISPLAY
 ((
EGLDi•œy
)0)

	)

71 
	#EGL_NO_SURFACE
 ((
EGLSurÁ˚
)0)

	)

74 
	#EGL_DONT_CARE
 ((
EGLöt
)-1)

	)

77 
	#EGL_SUCCESS
 0x3000

	)

78 
	#EGL_NOT_INITIALIZED
 0x3001

	)

79 
	#EGL_BAD_ACCESS
 0x3002

	)

80 
	#EGL_BAD_ALLOC
 0x3003

	)

81 
	#EGL_BAD_ATTRIBUTE
 0x3004

	)

82 
	#EGL_BAD_CONFIG
 0x3005

	)

83 
	#EGL_BAD_CONTEXT
 0x3006

	)

84 
	#EGL_BAD_CURRENT_SURFACE
 0x3007

	)

85 
	#EGL_BAD_DISPLAY
 0x3008

	)

86 
	#EGL_BAD_MATCH
 0x3009

	)

87 
	#EGL_BAD_NATIVE_PIXMAP
 0x300A

	)

88 
	#EGL_BAD_NATIVE_WINDOW
 0x300B

	)

89 
	#EGL_BAD_PARAMETER
 0x300C

	)

90 
	#EGL_BAD_SURFACE
 0x300D

	)

91 
	#EGL_CONTEXT_LOST
 0x300E

	)

96 
	#EGL_BUFFER_SIZE
 0x3020

	)

97 
	#EGL_ALPHA_SIZE
 0x3021

	)

98 
	#EGL_BLUE_SIZE
 0x3022

	)

99 
	#EGL_GREEN_SIZE
 0x3023

	)

100 
	#EGL_RED_SIZE
 0x3024

	)

101 
	#EGL_DEPTH_SIZE
 0x3025

	)

102 
	#EGL_STENCIL_SIZE
 0x3026

	)

103 
	#EGL_CONFIG_CAVEAT
 0x3027

	)

104 
	#EGL_CONFIG_ID
 0x3028

	)

105 
	#EGL_LEVEL
 0x3029

	)

106 
	#EGL_MAX_PBUFFER_HEIGHT
 0x302A

	)

107 
	#EGL_MAX_PBUFFER_PIXELS
 0x302B

	)

108 
	#EGL_MAX_PBUFFER_WIDTH
 0x302C

	)

109 
	#EGL_NATIVE_RENDERABLE
 0x302D

	)

110 
	#EGL_NATIVE_VISUAL_ID
 0x302E

	)

111 
	#EGL_NATIVE_VISUAL_TYPE
 0x302F

	)

112 
	#EGL_SAMPLES
 0x3031

	)

113 
	#EGL_SAMPLE_BUFFERS
 0x3032

	)

114 
	#EGL_SURFACE_TYPE
 0x3033

	)

115 
	#EGL_TRANSPARENT_TYPE
 0x3034

	)

116 
	#EGL_TRANSPARENT_BLUE_VALUE
 0x3035

	)

117 
	#EGL_TRANSPARENT_GREEN_VALUE
 0x3036

	)

118 
	#EGL_TRANSPARENT_RED_VALUE
 0x3037

	)

119 
	#EGL_NONE
 0x3038

	)

120 
	#EGL_BIND_TO_TEXTURE_RGB
 0x3039

	)

121 
	#EGL_BIND_TO_TEXTURE_RGBA
 0x303A

	)

122 
	#EGL_MIN_SWAP_INTERVAL
 0x303B

	)

123 
	#EGL_MAX_SWAP_INTERVAL
 0x303C

	)

124 
	#EGL_LUMINANCE_SIZE
 0x303D

	)

125 
	#EGL_ALPHA_MASK_SIZE
 0x303E

	)

126 
	#EGL_COLOR_BUFFER_TYPE
 0x303F

	)

127 
	#EGL_RENDERABLE_TYPE
 0x3040

	)

128 
	#EGL_MATCH_NATIVE_PIXMAP
 0x3041

	)

129 
	#EGL_CONFORMANT
 0x3042

	)

134 
	#EGL_SLOW_CONFIG
 0x3050

	)

135 
	#EGL_NON_CONFORMANT_CONFIG
 0x3051

	)

136 
	#EGL_TRANSPARENT_RGB
 0x3052

	)

137 
	#EGL_RGB_BUFFER
 0x308E

	)

138 
	#EGL_LUMINANCE_BUFFER
 0x308F

	)

141 
	#EGL_NO_TEXTURE
 0x305C

	)

142 
	#EGL_TEXTURE_RGB
 0x305D

	)

143 
	#EGL_TEXTURE_RGBA
 0x305E

	)

144 
	#EGL_TEXTURE_2D
 0x305F

	)

147 
	#EGL_PBUFFER_BIT
 0x0001

	)

148 
	#EGL_PIXMAP_BIT
 0x0002

	)

149 
	#EGL_WINDOW_BIT
 0x0004

	)

150 
	#EGL_VG_COLORSPACE_LINEAR_BIT
 0x0020

	)

151 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT
 0x0040

	)

152 
	#EGL_MULTISAMPLE_RESOLVE_BOX_BIT
 0x0200

	)

153 
	#EGL_SWAP_BEHAVIOR_PRESERVED_BIT
 0x0400

	)

155 
	#EGL_OPENGL_ES_BIT
 0x0001

	)

156 
	#EGL_OPENVG_BIT
 0x0002

	)

157 
	#EGL_OPENGL_ES2_BIT
 0x0004

	)

158 
	#EGL_OPENGL_BIT
 0x0008

	)

161 
	#EGL_VENDOR
 0x3053

	)

162 
	#EGL_VERSION
 0x3054

	)

163 
	#EGL_EXTENSIONS
 0x3055

	)

164 
	#EGL_CLIENT_APIS
 0x308D

	)

167 
	#EGL_HEIGHT
 0x3056

	)

168 
	#EGL_WIDTH
 0x3057

	)

169 
	#EGL_LARGEST_PBUFFER
 0x3058

	)

170 
	#EGL_TEXTURE_FORMAT
 0x3080

	)

171 
	#EGL_TEXTURE_TARGET
 0x3081

	)

172 
	#EGL_MIPMAP_TEXTURE
 0x3082

	)

173 
	#EGL_MIPMAP_LEVEL
 0x3083

	)

174 
	#EGL_RENDER_BUFFER
 0x3086

	)

175 
	#EGL_VG_COLORSPACE
 0x3087

	)

176 
	#EGL_VG_ALPHA_FORMAT
 0x3088

	)

177 
	#EGL_HORIZONTAL_RESOLUTION
 0x3090

	)

178 
	#EGL_VERTICAL_RESOLUTION
 0x3091

	)

179 
	#EGL_PIXEL_ASPECT_RATIO
 0x3092

	)

180 
	#EGL_SWAP_BEHAVIOR
 0x3093

	)

181 
	#EGL_MULTISAMPLE_RESOLVE
 0x3099

	)

184 
	#EGL_BACK_BUFFER
 0x3084

	)

185 
	#EGL_SINGLE_BUFFER
 0x3085

	)

188 
	#EGL_VG_COLORSPACE_sRGB
 0x3089

	)

189 
	#EGL_VG_COLORSPACE_LINEAR
 0x308A

	)

192 
	#EGL_VG_ALPHA_FORMAT_NONPRE
 0x308B

	)

193 
	#EGL_VG_ALPHA_FORMAT_PRE
 0x308C

	)

198 
	#EGL_DISPLAY_SCALING
 10000

	)

201 
	#EGL_UNKNOWN
 ((
EGLöt
)-1)

	)

204 
	#EGL_BUFFER_PRESERVED
 0x3094

	)

205 
	#EGL_BUFFER_DESTROYED
 0x3095

	)

208 
	#EGL_OPENVG_IMAGE
 0x3096

	)

211 
	#EGL_CONTEXT_CLIENT_TYPE
 0x3097

	)

214 
	#EGL_CONTEXT_CLIENT_VERSION
 0x3098

	)

217 
	#EGL_MULTISAMPLE_RESOLVE_DEFAULT
 0x309A

	)

218 
	#EGL_MULTISAMPLE_RESOLVE_BOX
 0x309B

	)

221 
	#EGL_OPENGL_ES_API
 0x30A0

	)

222 
	#EGL_OPENVG_API
 0x30A1

	)

223 
	#EGL_OPENGL_API
 0x30A2

	)

226 
	#EGL_DRAW
 0x3059

	)

227 
	#EGL_READ
 0x305A

	)

230 
	#EGL_CORE_NATIVE_ENGINE
 0x305B

	)

233 
	#EGL_COLORSPACE
 
EGL_VG_COLORSPACE


	)

234 
	#EGL_ALPHA_FORMAT
 
EGL_VG_ALPHA_FORMAT


	)

235 
	#EGL_COLORSPACE_sRGB
 
EGL_VG_COLORSPACE_sRGB


	)

236 
	#EGL_COLORSPACE_LINEAR
 
EGL_VG_COLORSPACE_LINEAR


	)

237 
	#EGL_ALPHA_FORMAT_NONPRE
 
EGL_VG_ALPHA_FORMAT_NONPRE


	)

238 
	#EGL_ALPHA_FORMAT_PRE
 
EGL_VG_ALPHA_FORMAT_PRE


	)

249 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglGëEº‹
();

251 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëDi•œy
(
EGLN©iveDi•œyTy≥
 
di•œy_id
);

252 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglInôülize
(
EGLDi•œy
 
dpy
, 
EGLöt
 *
maj‹
, EGLöà*
mö‹
);

253 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglTîmö©e
(
EGLDi•œy
 
dpy
);

255 
EGLAPI
 c⁄° * 
EGLAPIENTRY
 
eglQuîySåög
(
EGLDi•œy
 
dpy
, 
EGLöt
 
«me
);

257 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëC⁄figs
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 *
c⁄figs
,

258 
EGLöt
 
c⁄fig_size
, EGLöà*
num_c⁄fig
);

259 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglChoo£C⁄fig
(
EGLDi•œy
 
dpy
, c⁄° 
EGLöt
 *
©åib_li°
,

260 
EGLC⁄fig
 *
c⁄figs
, 
EGLöt
 
c⁄fig_size
,

261 
EGLöt
 *
num_c⁄fig
);

262 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëC⁄figAârib
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

263 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

265 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©eWödowSurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

266 
EGLN©iveWödowTy≥
 
wö
,

267 c⁄° 
EGLöt
 *
©åib_li°
);

268 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePbuf„rSurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

269 c⁄° 
EGLöt
 *
©åib_li°
);

270 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePixm≠SurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

271 
EGLN©ivePixm≠Ty≥
 
pixm≠
,

272 c⁄° 
EGLöt
 *
©åib_li°
);

273 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°roySurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

274 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

275 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

277 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglBödAPI
(
EGLíum
 
≠i
);

278 
EGLAPI
 
EGLíum
 
EGLAPIENTRY
 
eglQuîyAPI
();

280 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôClõ¡
();

282 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglRñó£Thªad
();

284 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePbuf„rFromClõ¡Buf„r
(

285 
EGLDi•œy
 
dpy
, 
EGLíum
 
bu·y≥
, 
EGLClõ¡Buf„r
 
buf„r
,

286 
EGLC⁄fig
 
c⁄fig
, c⁄° 
EGLöt
 *
©åib_li°
);

288 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSurÁ˚Aârib
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

289 
EGLöt
 
©åibuã
, EGLöà
vÆue
);

290 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglBödTexImage
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

291 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglRñó£TexImage
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

294 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠I¡îvÆ
(
EGLDi•œy
 
dpy
, 
EGLöt
 
öãrvÆ
);

297 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
eglCª©eC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

298 
EGLC⁄ãxt
 
sh¨e_c⁄ãxt
,

299 c⁄° 
EGLöt
 *
©åib_li°
);

300 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°royC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
);

301 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglMakeCuºít
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
døw
,

302 
EGLSurÁ˚
 
ªad
, 
EGLC⁄ãxt
 
˘x
);

304 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
eglGëCuºítC⁄ãxt
();

305 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglGëCuºítSurÁ˚
(
EGLöt
 
ªaddøw
);

306 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëCuºítDi•œy
();

307 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
,

308 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

310 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôGL
();

311 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôN©ive
(
EGLöt
 
ígöe
);

312 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠Buf„rs
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

313 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglC›yBuf„rs
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

314 
EGLN©ivePixm≠Ty≥
 
èrgë
);

319 (*
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
)();

322 
EGLAPI
 
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
 
EGLAPIENTRY


323 
eglGëProcAddªss
(c⁄° *
¥o˙ame
);

325 #ifde‡
__˝lu•lus


	@EGL/eglext.h

1 #i‚de‡
__egÀxt_h_


2 
	#__egÀxt_h_


	)

4 #ifde‡
__˝lu•lus


31 
	~<EGL/egl.h
>

38 
	#EGL_EGLEXT_VERSION
 5

	)

40 #i‚de‡
EGL_KHR_c⁄fig_©åibs


41 
	#EGL_KHR_c⁄fig_©åibs
 1

	)

42 
	#EGL_CONFORMANT_KHR
 0x3042

	)

43 
	#EGL_VG_COLORSPACE_LINEAR_BIT_KHR
 0x0020

	)

44 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR
 0x0040

	)

47 #i‚de‡
EGL_KHR_lock_surÁ˚


48 
	#EGL_KHR_lock_surÁ˚
 1

	)

49 
	#EGL_READ_SURFACE_BIT_KHR
 0x0001

	)

50 
	#EGL_WRITE_SURFACE_BIT_KHR
 0x0002

	)

51 
	#EGL_LOCK_SURFACE_BIT_KHR
 0x0080

	)

52 
	#EGL_OPTIMAL_FORMAT_BIT_KHR
 0x0100

	)

53 
	#EGL_MATCH_FORMAT_KHR
 0x3043

	)

54 
	#EGL_FORMAT_RGB_565_EXACT_KHR
 0x30C0

	)

55 
	#EGL_FORMAT_RGB_565_KHR
 0x30C1

	)

56 
	#EGL_FORMAT_RGBA_8888_EXACT_KHR
 0x30C2

	)

57 
	#EGL_FORMAT_RGBA_8888_KHR
 0x30C3

	)

58 
	#EGL_MAP_PRESERVE_PIXELS_KHR
 0x30C4

	)

59 
	#EGL_LOCK_USAGE_HINT_KHR
 0x30C5

	)

60 
	#EGL_BITMAP_POINTER_KHR
 0x30C6

	)

61 
	#EGL_BITMAP_PITCH_KHR
 0x30C7

	)

62 
	#EGL_BITMAP_ORIGIN_KHR
 0x30C8

	)

63 
	#EGL_BITMAP_PIXEL_RED_OFFSET_KHR
 0x30C9

	)

64 
	#EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR
 0x30CA

	)

65 
	#EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR
 0x30CB

	)

66 
	#EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR
 0x30CC

	)

67 
	#EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR
 0x30CD

	)

68 
	#EGL_LOWER_LEFT_KHR
 0x30CE

	)

69 
	#EGL_UPPER_LEFT_KHR
 0x30CF

	)

70 #ifde‡
EGL_EGLEXT_PROTOTYPES


71 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglLockSurÁ˚KHR
 (
EGLDi•œy
 
di•œy
, 
EGLSurÁ˚
 
surÁ˚
, c⁄° 
EGLöt
 *
©åib_li°
);

72 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglU∆ockSurÁ˚KHR
 (
EGLDi•œy
 
di•œy
, 
EGLSurÁ˚
 
surÁ˚
);

74 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLLOCKSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdi•œy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

75 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLUNLOCKSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdi•œy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
);

78 #i‚de‡
EGL_KHR_image


79 
	#EGL_KHR_image
 1

	)

80 
	#EGL_NATIVE_PIXMAP_KHR
 0x30B0

	)

81 *
	tEGLImageKHR
;

82 
	#EGL_NO_IMAGE_KHR
 ((
EGLImageKHR
)0)

	)

83 #ifde‡
EGL_EGLEXT_PROTOTYPES


84 
EGLAPI
 
EGLImageKHR
 
EGLAPIENTRY
 
eglCª©eImageKHR
 (
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
, 
EGLíum
 
èrgë
, 
EGLClõ¡Buf„r
 
buf„r
, c⁄° 
EGLöt
 *
©åib_li°
);

85 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°royImageKHR
 (
EGLDi•œy
 
dpy
, 
EGLImageKHR
 
image
);

87 
EGLImageKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEIMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLC⁄ãxt
 
	t˘x
, 
	tEGLíum
 
	tèrgë
, 
	tEGLClõ¡Buf„r
 
	tbuf„r
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

88 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYIMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLImageKHR
 
	timage
);

91 #i‚de‡
EGL_KHR_vg_∑ª¡_image


92 
	#EGL_KHR_vg_∑ª¡_image
 1

	)

93 
	#EGL_VG_PARENT_IMAGE_KHR
 0x30BA

	)

96 #i‚de‡
EGL_KHR_gl_ãxtuª_2D_image


97 
	#EGL_KHR_gl_ãxtuª_2D_image
 1

	)

98 
	#EGL_GL_TEXTURE_2D_KHR
 0x30B1

	)

99 
	#EGL_GL_TEXTURE_LEVEL_KHR
 0x30BC

	)

102 #i‚de‡
EGL_KHR_gl_ãxtuª_cubem≠_image


103 
	#EGL_KHR_gl_ãxtuª_cubem≠_image
 1

	)

104 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR
 0x30B3

	)

105 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR
 0x30B4

	)

106 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR
 0x30B5

	)

107 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR
 0x30B6

	)

108 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR
 0x30B7

	)

109 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR
 0x30B8

	)

112 #i‚de‡
EGL_KHR_gl_ãxtuª_3D_image


113 
	#EGL_KHR_gl_ãxtuª_3D_image
 1

	)

114 
	#EGL_GL_TEXTURE_3D_KHR
 0x30B2

	)

115 
	#EGL_GL_TEXTURE_ZOFFSET_KHR
 0x30BD

	)

118 #i‚de‡
EGL_KHR_gl_ªndîbuf„r_image


119 
	#EGL_KHR_gl_ªndîbuf„r_image
 1

	)

120 
	#EGL_GL_RENDERBUFFER_KHR
 0x30B9

	)

123 #i‚de‡
EGL_KHR_ªußbÀ_sync


124 
	#EGL_KHR_ªußbÀ_sync
 1

	)

126 * 
	tEGLSyncKHR
;

127 
khr⁄os_utime_«no£c⁄ds_t
 
	tEGLTimeKHR
;

129 
	#EGL_SYNC_STATUS_KHR
 0x30F1

	)

130 
	#EGL_SIGNALED_KHR
 0x30F2

	)

131 
	#EGL_UNSIGNALED_KHR
 0x30F3

	)

132 
	#EGL_TIMEOUT_EXPIRED_KHR
 0x30F5

	)

133 
	#EGL_CONDITION_SATISFIED_KHR
 0x30F6

	)

134 
	#EGL_SYNC_TYPE_KHR
 0x30F7

	)

135 
	#EGL_SYNC_REUSABLE_KHR
 0x30FA

	)

136 
	#EGL_SYNC_FLUSH_COMMANDS_BIT_KHR
 0x0001

	)

137 
	#EGL_FOREVER_KHR
 0xFFFFFFFFFFFFFFFFuŒ

	)

138 
	#EGL_NO_SYNC_KHR
 ((
EGLSyncKHR
)0)

	)

139 #ifde‡
EGL_EGLEXT_PROTOTYPES


140 
EGLAPI
 
EGLSyncKHR
 
EGLAPIENTRY
 
eglCª©eSyncKHR
(
EGLDi•œy
 
dpy
, 
EGLíum
 
ty≥
, c⁄° 
EGLöt
 *
©åib_li°
);

141 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°roySyncKHR
(
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
);

142 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglClõ¡WaôSyncKHR
(
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
, EGLöà
Êags
, 
EGLTimeKHR
 
timeout
);

143 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSig«lSyncKHR
(
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
, 
EGLíum
 
mode
);

144 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëSyncAâribKHR
(
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
, 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

146 
EGLSyncKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATESYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLíum
 
	tty≥
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

147 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYSYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
);

148 
EGLöt
 (
	tEGLAPIENTRYP
 
	tPFNEGLCLIENTWAITSYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
, 
	tEGLöt
 
	tÊags
, 
	tEGLTimeKHR
 
	ttimeout
);

149 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSIGNALSYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
, 
	tEGLíum
 
	tmode
);

150 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSYNCATTRIBKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
, 
	tEGLöt
 
	t©åibuã
, EGLöà*
	tvÆue
);

153 #i‚de‡
EGL_KHR_image_ba£


154 
	#EGL_KHR_image_ba£
 1

	)

156 
	#EGL_IMAGE_PRESERVED_KHR
 0x30D2

	)

159 #i‚de‡
EGL_KHR_image_pixm≠


160 
	#EGL_KHR_image_pixm≠
 1

	)

164 #i‚de‡
EGL_IMG_c⁄ãxt_¥i‹ôy


165 
	#EGL_IMG_c⁄ãxt_¥i‹ôy
 1

	)

166 
	#EGL_CONTEXT_PRIORITY_LEVEL_IMG
 0x3100

	)

167 
	#EGL_CONTEXT_PRIORITY_HIGH_IMG
 0x3101

	)

168 
	#EGL_CONTEXT_PRIORITY_MEDIUM_IMG
 0x3102

	)

169 
	#EGL_CONTEXT_PRIORITY_LOW_IMG
 0x3103

	)

172 #i‚de‡
EGL_NV_covîage_ßm∂e


173 
	#EGL_NV_covîage_ßm∂e
 1

	)

174 
	#EGL_COVERAGE_BUFFERS_NV
 0x30E0

	)

175 
	#EGL_COVERAGE_SAMPLES_NV
 0x30E1

	)

178 #i‚de‡
EGL_NV_dïth_n⁄löór


179 
	#EGL_NV_dïth_n⁄löór
 1

	)

180 
	#EGL_DEPTH_ENCODING_NV
 0x30E2

	)

181 
	#EGL_DEPTH_ENCODING_NONE_NV
 0

	)

182 
	#EGL_DEPTH_ENCODING_NONLINEAR_NV
 0x30E3

	)

185 #i‚de‡
EGL_NV_sync


186 
	#EGL_NV_sync
 1

	)

187 
	#EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV
 0x30E6

	)

188 
	#EGL_SYNC_STATUS_NV
 0x30E7

	)

189 
	#EGL_SIGNALED_NV
 0x30E8

	)

190 
	#EGL_UNSIGNALED_NV
 0x30E9

	)

191 
	#EGL_SYNC_FLUSH_COMMANDS_BIT_NV
 0x0001

	)

192 
	#EGL_FOREVER_NV
 0xFFFFFFFFFFFFFFFFuŒ

	)

193 
	#EGL_ALREADY_SIGNALED_NV
 0x30EA

	)

194 
	#EGL_TIMEOUT_EXPIRED_NV
 0x30EB

	)

195 
	#EGL_CONDITION_SATISFIED_NV
 0x30EC

	)

196 
	#EGL_SYNC_TYPE_NV
 0x30ED

	)

197 
	#EGL_SYNC_CONDITION_NV
 0x30EE

	)

198 
	#EGL_SYNC_FENCE_NV
 0x30EF

	)

199 
	#EGL_NO_SYNC_NV
 ((
EGLSyncNV
)0)

	)

200 * 
	tEGLSyncNV
;

201 
	tEGLTimeNV
;

202 #ifde‡
EGL_EGLEXT_PROTOTYPES


203 
EGLSyncNV
 
eglCª©eFí˚SyncNV
 (
EGLDi•œy
 
dpy
, 
EGLíum
 
c⁄dôi⁄
, c⁄° 
EGLöt
 *
©åib_li°
);

204 
EGLBoﬁón
 
eglDe°roySyncNV
 (
EGLSyncNV
 
sync
);

205 
EGLBoﬁón
 
eglFí˚NV
 (
EGLSyncNV
 
sync
);

206 
EGLöt
 
eglClõ¡WaôSyncNV
 (
EGLSyncNV
 
sync
, EGLöà
Êags
, 
EGLTimeNV
 
timeout
);

207 
EGLBoﬁón
 
eglSig«lSyncNV
 (
EGLSyncNV
 
sync
, 
EGLíum
 
mode
);

208 
EGLBoﬁón
 
eglGëSyncAâribNV
 (
EGLSyncNV
 
sync
, 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

210 
EGLSyncNV
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEFENCESYNCNVPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLíum
 
	tc⁄dôi⁄
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

211 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYSYNCNVPROC
Ë(
	tEGLSyncNV
 
	tsync
);

212 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLFENCENVPROC
Ë(
	tEGLSyncNV
 
	tsync
);

213 
EGLöt
 (
	tEGLAPIENTRYP
 
	tPFNEGLCLIENTWAITSYNCNVPROC
Ë(
	tEGLSyncNV
 
	tsync
, 
	tEGLöt
 
	tÊags
, 
	tEGLTimeNV
 
	ttimeout
);

214 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSIGNALSYNCNVPROC
Ë(
	tEGLSyncNV
 
	tsync
, 
	tEGLíum
 
	tmode
);

215 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSYNCATTRIBNVPROC
Ë(
	tEGLSyncNV
 
	tsync
, 
	tEGLöt
 
	t©åibuã
, EGLöà*
	tvÆue
);

218 #i‚de‡
EGL_KHR_„n˚_sync


219 
	#EGL_KHR_„n˚_sync
 1

	)

221 
	#EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR
 0x30F0

	)

222 
	#EGL_SYNC_CONDITION_KHR
 0x30F8

	)

223 
	#EGL_SYNC_FENCE_KHR
 0x30F9

	)

226 #i‚de‡
EGL_ANDROID_image_«tive_buf„r


227 
	#EGL_ANDROID_image_«tive_buf„r
 1

	)

228 
AN©iveWödowBuf„r
;

229 
	#EGL_NATIVE_BUFFER_ANDROID
 0x3140

	)

232 #i‚de‡
EGL_ANDROID_sw≠_ª˘™gÀ


233 
	#EGL_ANDROID_sw≠_ª˘™gÀ
 1

	)

234 #ifde‡
EGL_EGLEXT_PROTOTYPES


235 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSëSw≠Re˘™gÀANDROID
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
døw
, 
EGLöt
 
À·
, EGLöà
t›
, EGLöà
width
, EGLöà
height
);

237 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSETSWAPRECTANGLEANDROIDPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tdøw
, 
	tEGLöt
 
	tÀ·
, EGLöà
	tt›
, EGLöà
	twidth
, EGLöà
	theight
);

240 #i‚de‡
EGL_ANDROID_ªc‹dabÀ


241 
	#EGL_ANDROID_ªc‹dabÀ
 1

	)

242 
	#EGL_RECORDABLE_ANDROID
 0x3142

	)

247 #i‚de‡
EGL_NV_sy°em_time


248 
	#EGL_NV_sy°em_time
 1

	)

249 
khr⁄os_öt64_t
 
	tEGLöt64NV
;

250 
khr⁄os_uöt64_t
 
	tEGLuöt64NV
;

251 #ifde‡
EGL_EGLEXT_PROTOTYPES


252 
EGLAPI
 
EGLuöt64NV
 
EGLAPIENTRY
 
eglGëSy°emTimeFªquícyNV
();

253 
EGLAPI
 
EGLuöt64NV
 
EGLAPIENTRY
 
eglGëSy°emTimeNV
();

255 
EGLuöt64NV
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSYSTEMTIMEFREQUENCYNVPROC
)();

256 
EGLuöt64NV
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSYSTEMTIMENVPROC
)();

259 #ifde‡
__˝lu•lus


	@EGL/eglplatform.h

1 #i‚de‡
__egÕœtf‹m_h_


2 
	#__egÕœtf‹m_h_


	)

37 
	~<KHR/khΩœtf‹m.h
>

49 #i‚de‡
EGLAPI


50 
	#EGLAPI
 
KHRONOS_APICALL


	)

53 #i‚de‡
EGLAPIENTRY


54 
	#EGLAPIENTRY
 
KHRONOS_APIENTRY


	)

56 
	#EGLAPIENTRYP
 
EGLAPIENTRY
*

	)

65 #i‡
deföed
(
_WIN32
Ë|| deföed(
__VC32__
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

66 #i‚de‡
WIN32_LEAN_AND_MEAN


67 
	#WIN32_LEAN_AND_MEAN
 1

	)

69 
	~<wödows.h
>

71 
HDC
 
	tEGLN©iveDi•œyTy≥
;

72 
HBITMAP
 
	tEGLN©ivePixm≠Ty≥
;

73 
HWND
 
	tEGLN©iveWödowTy≥
;

75 #ñi‡
deföed
(
__WINSCW__
Ë|| deföed(
__SYMBIAN32__
)

77 
	tEGLN©iveDi•œyTy≥
;

78 *
	tEGLN©iveWödowTy≥
;

79 *
	tEGLN©ivePixm≠Ty≥
;

81 #ñi‡
deföed
(
__ANDROID__
Ë|| deföed(
ANDROID
)

83 
	~<™droid/«tive_wödow.h
>

85 
	gegl_«tive_pixm≠_t
;

87 
AN©iveWödow
* 
	tEGLN©iveWödowTy≥
;

88 
egl_«tive_pixm≠_t
* 
	tEGLN©ivePixm≠Ty≥
;

89 * 
	tEGLN©iveDi•œyTy≥
;

91 #ñi‡
deföed
(
__unix__
)

94 
	~<X11/Xlib.h
>

95 
	~<X11/Xutû.h
>

97 
Di•œy
 *
	tEGLN©iveDi•œyTy≥
;

98 
Pixm≠
 
	tEGLN©ivePixm≠Ty≥
;

99 
Wödow
 
	tEGLN©iveWödowTy≥
;

106 
EGLN©iveDi•œyTy≥
 
	tN©iveDi•œyTy≥
;

107 
EGLN©ivePixm≠Ty≥
 
	tN©ivePixm≠Ty≥
;

108 
EGLN©iveWödowTy≥
 
	tN©iveWödowTy≥
;

118 
khr⁄os_öt32_t
 
	tEGLöt
;

	@GLES/gl.h

1 #i‚de‡
__gl_h_


2 
	#__gl_h_


	)

6 
	~<GLES/gÕœtf‹m.h
>

8 #ifde‡
__˝lu•lus


17 
	tGLvoid
;

18 
	tGLch¨
;

19 
	tGLíum
;

20 
	tGLboﬁón
;

21 
	tGLbôfõld
;

22 
khr⁄os_öt8_t
 
	tGLbyã
;

23 
	tGLsh‹t
;

24 
	tGLöt
;

25 
	tGLsizei
;

26 
khr⁄os_uöt8_t
 
	tGLubyã
;

27 
	tGLush‹t
;

28 
	tGLuöt
;

29 
khr⁄os_Êﬂt_t
 
	tGLÊﬂt
;

30 
khr⁄os_Êﬂt_t
 
	tGL˛ampf
;

31 
khr⁄os_öt32_t
 
	tGLfixed
;

32 
khr⁄os_öt32_t
 
	tGL˛ampx
;

34 
khr⁄os_öçå_t
 
	tGLöçå
;

35 
khr⁄os_ssize_t
 
	tGLsizeùå
;

41 
	#GL_VERSION_ES_CM_1_0
 1

	)

42 
	#GL_VERSION_ES_CL_1_0
 1

	)

43 
	#GL_VERSION_ES_CM_1_1
 1

	)

44 
	#GL_VERSION_ES_CL_1_1
 1

	)

47 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

48 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

49 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

52 
	#GL_FALSE
 0

	)

53 
	#GL_TRUE
 1

	)

56 
	#GL_POINTS
 0x0000

	)

57 
	#GL_LINES
 0x0001

	)

58 
	#GL_LINE_LOOP
 0x0002

	)

59 
	#GL_LINE_STRIP
 0x0003

	)

60 
	#GL_TRIANGLES
 0x0004

	)

61 
	#GL_TRIANGLE_STRIP
 0x0005

	)

62 
	#GL_TRIANGLE_FAN
 0x0006

	)

65 
	#GL_NEVER
 0x0200

	)

66 
	#GL_LESS
 0x0201

	)

67 
	#GL_EQUAL
 0x0202

	)

68 
	#GL_LEQUAL
 0x0203

	)

69 
	#GL_GREATER
 0x0204

	)

70 
	#GL_NOTEQUAL
 0x0205

	)

71 
	#GL_GEQUAL
 0x0206

	)

72 
	#GL_ALWAYS
 0x0207

	)

75 
	#GL_ZERO
 0

	)

76 
	#GL_ONE
 1

	)

77 
	#GL_SRC_COLOR
 0x0300

	)

78 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

79 
	#GL_SRC_ALPHA
 0x0302

	)

80 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

81 
	#GL_DST_ALPHA
 0x0304

	)

82 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

87 
	#GL_DST_COLOR
 0x0306

	)

88 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

89 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

96 
	#GL_CLIP_PLANE0
 0x3000

	)

97 
	#GL_CLIP_PLANE1
 0x3001

	)

98 
	#GL_CLIP_PLANE2
 0x3002

	)

99 
	#GL_CLIP_PLANE3
 0x3003

	)

100 
	#GL_CLIP_PLANE4
 0x3004

	)

101 
	#GL_CLIP_PLANE5
 0x3005

	)

115 
	#GL_FRONT
 0x0404

	)

116 
	#GL_BACK
 0x0405

	)

117 
	#GL_FRONT_AND_BACK
 0x0408

	)

130 
	#GL_FOG
 0x0B60

	)

131 
	#GL_LIGHTING
 0x0B50

	)

132 
	#GL_TEXTURE_2D
 0x0DE1

	)

133 
	#GL_CULL_FACE
 0x0B44

	)

134 
	#GL_ALPHA_TEST
 0x0BC0

	)

135 
	#GL_BLEND
 0x0BE2

	)

136 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

137 
	#GL_DITHER
 0x0BD0

	)

138 
	#GL_STENCIL_TEST
 0x0B90

	)

139 
	#GL_DEPTH_TEST
 0x0B71

	)

148 
	#GL_POINT_SMOOTH
 0x0B10

	)

149 
	#GL_LINE_SMOOTH
 0x0B20

	)

150 
	#GL_SCISSOR_TEST
 0x0C11

	)

151 
	#GL_COLOR_MATERIAL
 0x0B57

	)

152 
	#GL_NORMALIZE
 0x0BA1

	)

153 
	#GL_RESCALE_NORMAL
 0x803A

	)

154 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

155 
	#GL_VERTEX_ARRAY
 0x8074

	)

156 
	#GL_NORMAL_ARRAY
 0x8075

	)

157 
	#GL_COLOR_ARRAY
 0x8076

	)

158 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

159 
	#GL_MULTISAMPLE
 0x809D

	)

160 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

161 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

162 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

165 
	#GL_NO_ERROR
 0

	)

166 
	#GL_INVALID_ENUM
 0x0500

	)

167 
	#GL_INVALID_VALUE
 0x0501

	)

168 
	#GL_INVALID_OPERATION
 0x0502

	)

169 
	#GL_STACK_OVERFLOW
 0x0503

	)

170 
	#GL_STACK_UNDERFLOW
 0x0504

	)

171 
	#GL_OUT_OF_MEMORY
 0x0505

	)

175 
	#GL_EXP
 0x0800

	)

176 
	#GL_EXP2
 0x0801

	)

179 
	#GL_FOG_DENSITY
 0x0B62

	)

180 
	#GL_FOG_START
 0x0B63

	)

181 
	#GL_FOG_END
 0x0B64

	)

182 
	#GL_FOG_MODE
 0x0B65

	)

183 
	#GL_FOG_COLOR
 0x0B66

	)

186 
	#GL_CW
 0x0900

	)

187 
	#GL_CCW
 0x0901

	)

190 
	#GL_CURRENT_COLOR
 0x0B00

	)

191 
	#GL_CURRENT_NORMAL
 0x0B02

	)

192 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

193 
	#GL_POINT_SIZE
 0x0B11

	)

194 
	#GL_POINT_SIZE_MIN
 0x8126

	)

195 
	#GL_POINT_SIZE_MAX
 0x8127

	)

196 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

197 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

198 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

199 
	#GL_LINE_WIDTH
 0x0B21

	)

200 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

201 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

202 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

203 
	#GL_CULL_FACE_MODE
 0x0B45

	)

204 
	#GL_FRONT_FACE
 0x0B46

	)

205 
	#GL_SHADE_MODEL
 0x0B54

	)

206 
	#GL_DEPTH_RANGE
 0x0B70

	)

207 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

208 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

209 
	#GL_DEPTH_FUNC
 0x0B74

	)

210 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

211 
	#GL_STENCIL_FUNC
 0x0B92

	)

212 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

213 
	#GL_STENCIL_FAIL
 0x0B94

	)

214 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

215 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

216 
	#GL_STENCIL_REF
 0x0B97

	)

217 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

218 
	#GL_MATRIX_MODE
 0x0BA0

	)

219 
	#GL_VIEWPORT
 0x0BA2

	)

220 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

221 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

222 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

223 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

224 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

225 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

226 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

227 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

228 
	#GL_BLEND_DST
 0x0BE0

	)

229 
	#GL_BLEND_SRC
 0x0BE1

	)

230 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

231 
	#GL_SCISSOR_BOX
 0x0C10

	)

232 
	#GL_SCISSOR_TEST
 0x0C11

	)

233 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

234 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

235 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

236 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

237 
	#GL_MAX_LIGHTS
 0x0D31

	)

238 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

239 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

240 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

241 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

242 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

243 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

244 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

245 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

246 
	#GL_RED_BITS
 0x0D52

	)

247 
	#GL_GREEN_BITS
 0x0D53

	)

248 
	#GL_BLUE_BITS
 0x0D54

	)

249 
	#GL_ALPHA_BITS
 0x0D55

	)

250 
	#GL_DEPTH_BITS
 0x0D56

	)

251 
	#GL_STENCIL_BITS
 0x0D57

	)

252 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

253 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

254 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

255 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

256 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

257 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

258 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

259 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

260 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

261 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

262 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

263 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

264 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

265 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

266 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

267 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

268 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

269 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

270 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

271 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

272 
	#GL_SAMPLES
 0x80A9

	)

273 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

274 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

282 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

283 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

286 
	#GL_DONT_CARE
 0x1100

	)

287 
	#GL_FASTEST
 0x1101

	)

288 
	#GL_NICEST
 0x1102

	)

291 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

292 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

293 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

294 
	#GL_FOG_HINT
 0x0C54

	)

295 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

298 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

299 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

302 
	#GL_AMBIENT
 0x1200

	)

303 
	#GL_DIFFUSE
 0x1201

	)

304 
	#GL_SPECULAR
 0x1202

	)

305 
	#GL_POSITION
 0x1203

	)

306 
	#GL_SPOT_DIRECTION
 0x1204

	)

307 
	#GL_SPOT_EXPONENT
 0x1205

	)

308 
	#GL_SPOT_CUTOFF
 0x1206

	)

309 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

310 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

311 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

314 
	#GL_BYTE
 0x1400

	)

315 
	#GL_UNSIGNED_BYTE
 0x1401

	)

316 
	#GL_SHORT
 0x1402

	)

317 
	#GL_UNSIGNED_SHORT
 0x1403

	)

318 
	#GL_FLOAT
 0x1406

	)

319 
	#GL_FIXED
 0x140C

	)

322 
	#GL_CLEAR
 0x1500

	)

323 
	#GL_AND
 0x1501

	)

324 
	#GL_AND_REVERSE
 0x1502

	)

325 
	#GL_COPY
 0x1503

	)

326 
	#GL_AND_INVERTED
 0x1504

	)

327 
	#GL_NOOP
 0x1505

	)

328 
	#GL_XOR
 0x1506

	)

329 
	#GL_OR
 0x1507

	)

330 
	#GL_NOR
 0x1508

	)

331 
	#GL_EQUIV
 0x1509

	)

332 
	#GL_INVERT
 0x150A

	)

333 
	#GL_OR_REVERSE
 0x150B

	)

334 
	#GL_COPY_INVERTED
 0x150C

	)

335 
	#GL_OR_INVERTED
 0x150D

	)

336 
	#GL_NAND
 0x150E

	)

337 
	#GL_SET
 0x150F

	)

343 
	#GL_EMISSION
 0x1600

	)

344 
	#GL_SHININESS
 0x1601

	)

345 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

351 
	#GL_MODELVIEW
 0x1700

	)

352 
	#GL_PROJECTION
 0x1701

	)

353 
	#GL_TEXTURE
 0x1702

	)

362 
	#GL_ALPHA
 0x1906

	)

363 
	#GL_RGB
 0x1907

	)

364 
	#GL_RGBA
 0x1908

	)

365 
	#GL_LUMINANCE
 0x1909

	)

366 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

369 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

370 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

374 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

375 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

376 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

379 
	#GL_FLAT
 0x1D00

	)

380 
	#GL_SMOOTH
 0x1D01

	)

394 
	#GL_KEEP
 0x1E00

	)

395 
	#GL_REPLACE
 0x1E01

	)

396 
	#GL_INCR
 0x1E02

	)

397 
	#GL_DECR
 0x1E03

	)

401 
	#GL_VENDOR
 0x1F00

	)

402 
	#GL_RENDERER
 0x1F01

	)

403 
	#GL_VERSION
 0x1F02

	)

404 
	#GL_EXTENSIONS
 0x1F03

	)

413 
	#GL_MODULATE
 0x2100

	)

414 
	#GL_DECAL
 0x2101

	)

416 
	#GL_ADD
 0x0104

	)

420 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

421 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

424 
	#GL_TEXTURE_ENV
 0x2300

	)

427 
	#GL_NEAREST
 0x2600

	)

428 
	#GL_LINEAR
 0x2601

	)

433 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

434 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

435 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

436 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

439 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

440 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

441 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

442 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

443 
	#GL_GENERATE_MIPMAP
 0x8191

	)

449 
	#GL_TEXTURE0
 0x84C0

	)

450 
	#GL_TEXTURE1
 0x84C1

	)

451 
	#GL_TEXTURE2
 0x84C2

	)

452 
	#GL_TEXTURE3
 0x84C3

	)

453 
	#GL_TEXTURE4
 0x84C4

	)

454 
	#GL_TEXTURE5
 0x84C5

	)

455 
	#GL_TEXTURE6
 0x84C6

	)

456 
	#GL_TEXTURE7
 0x84C7

	)

457 
	#GL_TEXTURE8
 0x84C8

	)

458 
	#GL_TEXTURE9
 0x84C9

	)

459 
	#GL_TEXTURE10
 0x84CA

	)

460 
	#GL_TEXTURE11
 0x84CB

	)

461 
	#GL_TEXTURE12
 0x84CC

	)

462 
	#GL_TEXTURE13
 0x84CD

	)

463 
	#GL_TEXTURE14
 0x84CE

	)

464 
	#GL_TEXTURE15
 0x84CF

	)

465 
	#GL_TEXTURE16
 0x84D0

	)

466 
	#GL_TEXTURE17
 0x84D1

	)

467 
	#GL_TEXTURE18
 0x84D2

	)

468 
	#GL_TEXTURE19
 0x84D3

	)

469 
	#GL_TEXTURE20
 0x84D4

	)

470 
	#GL_TEXTURE21
 0x84D5

	)

471 
	#GL_TEXTURE22
 0x84D6

	)

472 
	#GL_TEXTURE23
 0x84D7

	)

473 
	#GL_TEXTURE24
 0x84D8

	)

474 
	#GL_TEXTURE25
 0x84D9

	)

475 
	#GL_TEXTURE26
 0x84DA

	)

476 
	#GL_TEXTURE27
 0x84DB

	)

477 
	#GL_TEXTURE28
 0x84DC

	)

478 
	#GL_TEXTURE29
 0x84DD

	)

479 
	#GL_TEXTURE30
 0x84DE

	)

480 
	#GL_TEXTURE31
 0x84DF

	)

481 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

482 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

485 
	#GL_REPEAT
 0x2901

	)

486 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

495 
	#GL_LIGHT0
 0x4000

	)

496 
	#GL_LIGHT1
 0x4001

	)

497 
	#GL_LIGHT2
 0x4002

	)

498 
	#GL_LIGHT3
 0x4003

	)

499 
	#GL_LIGHT4
 0x4004

	)

500 
	#GL_LIGHT5
 0x4005

	)

501 
	#GL_LIGHT6
 0x4006

	)

502 
	#GL_LIGHT7
 0x4007

	)

505 
	#GL_ARRAY_BUFFER
 0x8892

	)

506 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

508 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

509 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

510 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

511 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

512 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

513 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

515 
	#GL_STATIC_DRAW
 0x88E4

	)

516 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

518 
	#GL_BUFFER_SIZE
 0x8764

	)

519 
	#GL_BUFFER_USAGE
 0x8765

	)

522 
	#GL_SUBTRACT
 0x84E7

	)

523 
	#GL_COMBINE
 0x8570

	)

524 
	#GL_COMBINE_RGB
 0x8571

	)

525 
	#GL_COMBINE_ALPHA
 0x8572

	)

526 
	#GL_RGB_SCALE
 0x8573

	)

527 
	#GL_ADD_SIGNED
 0x8574

	)

528 
	#GL_INTERPOLATE
 0x8575

	)

529 
	#GL_CONSTANT
 0x8576

	)

530 
	#GL_PRIMARY_COLOR
 0x8577

	)

531 
	#GL_PREVIOUS
 0x8578

	)

532 
	#GL_OPERAND0_RGB
 0x8590

	)

533 
	#GL_OPERAND1_RGB
 0x8591

	)

534 
	#GL_OPERAND2_RGB
 0x8592

	)

535 
	#GL_OPERAND0_ALPHA
 0x8598

	)

536 
	#GL_OPERAND1_ALPHA
 0x8599

	)

537 
	#GL_OPERAND2_ALPHA
 0x859A

	)

539 
	#GL_ALPHA_SCALE
 0x0D1C

	)

541 
	#GL_SRC0_RGB
 0x8580

	)

542 
	#GL_SRC1_RGB
 0x8581

	)

543 
	#GL_SRC2_RGB
 0x8582

	)

544 
	#GL_SRC0_ALPHA
 0x8588

	)

545 
	#GL_SRC1_ALPHA
 0x8589

	)

546 
	#GL_SRC2_ALPHA
 0x858A

	)

548 
	#GL_DOT3_RGB
 0x86AE

	)

549 
	#GL_DOT3_RGBA
 0x86AF

	)

556 #i‚de‡
GL_OES_ªad_f‹m©


557 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

558 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

562 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


563 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

564 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

565 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

566 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

567 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

568 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

569 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

570 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

571 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

572 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

576 #i‚de‡
GL_OES_poöt_size_¨øy


577 
	#GL_POINT_SIZE_ARRAY_OES
 0x8B9C

	)

578 
	#GL_POINT_SIZE_ARRAY_TYPE_OES
 0x898A

	)

579 
	#GL_POINT_SIZE_ARRAY_STRIDE_OES
 0x898B

	)

580 
	#GL_POINT_SIZE_ARRAY_POINTER_OES
 0x898C

	)

581 
	#GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES
 0x8B9F

	)

585 #i‚de‡
GL_OES_poöt_•rôe


586 
	#GL_POINT_SPRITE_OES
 0x8861

	)

587 
	#GL_COORD_REPLACE_OES
 0x8862

	)

593 
GL_API
 
GL_APIENTRY
 
glAÕhaFunc
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

594 
GL_API
 
GL_APIENTRY
 
glCÀ¨Cﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

595 
GL_API
 
GL_APIENTRY
 
glCÀ¨Dïthf
 (
GL˛ampf
 
dïth
);

596 
GL_API
 
GL_APIENTRY
 
glClùPœ√f
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

597 
GL_API
 
GL_APIENTRY
 
glCﬁ‹4f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

598 
GL_API
 
GL_APIENTRY
 
glDïthR™gef
 (
GL˛ampf
 
zNór
, GL˛amp‡
zF¨
);

599 
GL_API
 
GL_APIENTRY
 
glFogf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

600 
GL_API
 
GL_APIENTRY
 
glFogfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

601 
GL_API
 
GL_APIENTRY
 
glFru°umf
 (
GLÊﬂt
 
À·
, GLÊﬂà
right
, GLÊﬂà
bŸtom
, GLÊﬂà
t›
, GLÊﬂà
zNór
, GLÊﬂà
zF¨
);

602 
GL_API
 
GL_APIENTRY
 
glGëClùPœ√f
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
eqn
[4]);

603 
GL_API
 
GL_APIENTRY
 
glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

604 
GL_API
 
GL_APIENTRY
 
glGëLightfv
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

605 
GL_API
 
GL_APIENTRY
 
glGëM©îülfv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

606 
GL_API
 
GL_APIENTRY
 
glGëTexEnvfv
 (
GLíum
 
ív
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

607 
GL_API
 
GL_APIENTRY
 
glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

608 
GL_API
 
GL_APIENTRY
 
glLightModñf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

609 
GL_API
 
GL_APIENTRY
 
glLightModñfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

610 
GL_API
 
GL_APIENTRY
 
glLightf
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

611 
GL_API
 
GL_APIENTRY
 
glLightfv
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

612 
GL_API
 
GL_APIENTRY
 
glLöeWidth
 (
GLÊﬂt
 
width
);

613 
GL_API
 
GL_APIENTRY
 
glLﬂdM©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

614 
GL_API
 
GL_APIENTRY
 
glM©îülf
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

615 
GL_API
 
GL_APIENTRY
 
glM©îülfv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

616 
GL_API
 
GL_APIENTRY
 
glMu…M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

617 
GL_API
 
GL_APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

618 
GL_API
 
GL_APIENTRY
 
glN‹mÆ3f
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

619 
GL_API
 
GL_APIENTRY
 
glOπhof
 (
GLÊﬂt
 
À·
, GLÊﬂà
right
, GLÊﬂà
bŸtom
, GLÊﬂà
t›
, GLÊﬂà
zNór
, GLÊﬂà
zF¨
);

620 
GL_API
 
GL_APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

621 
GL_API
 
GL_APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

622 
GL_API
 
GL_APIENTRY
 
glPoötSize
 (
GLÊﬂt
 
size
);

623 
GL_API
 
GL_APIENTRY
 
glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

624 
GL_API
 
GL_APIENTRY
 
glRŸ©ef
 (
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

625 
GL_API
 
GL_APIENTRY
 
glSˇÀf
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

626 
GL_API
 
GL_APIENTRY
 
glTexEnvf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

627 
GL_API
 
GL_APIENTRY
 
glTexEnvfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

628 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

629 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

630 
GL_API
 
GL_APIENTRY
 
glTøn¶©ef
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

633 
GL_API
 
GL_APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

634 
GL_API
 
GL_APIENTRY
 
glAÕhaFuncx
 (
GLíum
 
func
, 
GL˛ampx
 
ªf
);

635 
GL_API
 
GL_APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

636 
GL_API
 
GL_APIENTRY
 
glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

637 
GL_API
 
GL_APIENTRY
 
glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

638 
GL_API
 
GL_APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
, GLíum 
ußge
);

639 
GL_API
 
GL_APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
);

640 
GL_API
 
GL_APIENTRY
 
glCÀ¨
 (
GLbôfõld
 
mask
);

641 
GL_API
 
GL_APIENTRY
 
glCÀ¨Cﬁ‹x
 (
GL˛ampx
 
ªd
, GL˛ampx 
gªí
, GL˛ampx 
blue
, GL˛ampx 
Æpha
);

642 
GL_API
 
GL_APIENTRY
 
glCÀ¨Dïthx
 (
GL˛ampx
 
dïth
);

643 
GL_API
 
GL_APIENTRY
 
glCÀ¨Sãncû
 (
GLöt
 
s
);

644 
GL_API
 
GL_APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

645 
GL_API
 
GL_APIENTRY
 
glClùPœ√x
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

646 
GL_API
 
GL_APIENTRY
 
glCﬁ‹4ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
, GLubyã 
Æpha
);

647 
GL_API
 
GL_APIENTRY
 
glCﬁ‹4x
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

648 
GL_API
 
GL_APIENTRY
 
glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

649 
GL_API
 
GL_APIENTRY
 
glCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

650 
GL_API
 
GL_APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

651 
GL_API
 
GL_APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

652 
GL_API
 
GL_APIENTRY
 
glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

653 
GL_API
 
GL_APIENTRY
 
glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

654 
GL_API
 
GL_APIENTRY
 
glCuŒFa˚
 (
GLíum
 
mode
);

655 
GL_API
 
GL_APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

656 
GL_API
 
GL_APIENTRY
 
glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

657 
GL_API
 
GL_APIENTRY
 
glDïthFunc
 (
GLíum
 
func
);

658 
GL_API
 
GL_APIENTRY
 
glDïthMask
 (
GLboﬁón
 
Êag
);

659 
GL_API
 
GL_APIENTRY
 
glDïthR™gex
 (
GL˛ampx
 
zNór
, GL˛ampx 
zF¨
);

660 
GL_API
 
GL_APIENTRY
 
glDißbÀ
 (
GLíum
 
ˇp
);

661 
GL_API
 
GL_APIENTRY
 
glDißbÀClõ¡Sèã
 (
GLíum
 
¨øy
);

662 
GL_API
 
GL_APIENTRY
 
glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

663 
GL_API
 
GL_APIENTRY
 
glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

664 
GL_API
 
GL_APIENTRY
 
glE«bÀ
 (
GLíum
 
ˇp
);

665 
GL_API
 
GL_APIENTRY
 
glE«bÀClõ¡Sèã
 (
GLíum
 
¨øy
);

666 
GL_API
 
GL_APIENTRY
 
glFöish
 ();

667 
GL_API
 
GL_APIENTRY
 
glFlush
 ();

668 
GL_API
 
GL_APIENTRY
 
glFogx
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

669 
GL_API
 
GL_APIENTRY
 
glFogxv
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

670 
GL_API
 
GL_APIENTRY
 
glFr⁄tFa˚
 (
GLíum
 
mode
);

671 
GL_API
 
GL_APIENTRY
 
glFru°umx
 (
GLfixed
 
À·
, GLfixed 
right
, GLfixed 
bŸtom
, GLfixed 
t›
, GLfixed 
zNór
, GLfixed 
zF¨
);

672 
GL_API
 
GL_APIENTRY
 
glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
);

673 
GL_API
 
GL_APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

674 
GL_API
 
GL_APIENTRY
 
glGëClùPœ√x
 (
GLíum
 
≤ame
, 
GLfixed
 
eqn
[4]);

675 
GL_API
 
GL_APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

676 
GL_API
 
GL_APIENTRY
 
glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

677 
GL_API
 
GLíum
 
GL_APIENTRY
 
glGëEº‹
 ();

678 
GL_API
 
GL_APIENTRY
 
glGëFixedv
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

679 
GL_API
 
GL_APIENTRY
 
glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

680 
GL_API
 
GL_APIENTRY
 
glGëLightxv
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

681 
GL_API
 
GL_APIENTRY
 
glGëM©îülxv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

682 
GL_API
 
GL_APIENTRY
 
glGëPoöãrv
 (
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
);

683 
GL_API
 c⁄° 
GLubyã
 * 
GL_APIENTRY
 
glGëSåög
 (
GLíum
 
«me
);

684 
GL_API
 
GL_APIENTRY
 
glGëTexEnviv
 (
GLíum
 
ív
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

685 
GL_API
 
GL_APIENTRY
 
glGëTexEnvxv
 (
GLíum
 
ív
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

686 
GL_API
 
GL_APIENTRY
 
glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

687 
GL_API
 
GL_APIENTRY
 
glGëTexP¨amëîxv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

688 
GL_API
 
GL_APIENTRY
 
glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

689 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

690 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
glIsE«bÀd
 (
GLíum
 
ˇp
);

691 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
glIsTextuª
 (
GLuöt
 
ãxtuª
);

692 
GL_API
 
GL_APIENTRY
 
glLightModñx
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

693 
GL_API
 
GL_APIENTRY
 
glLightModñxv
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

694 
GL_API
 
GL_APIENTRY
 
glLightx
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

695 
GL_API
 
GL_APIENTRY
 
glLightxv
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

696 
GL_API
 
GL_APIENTRY
 
glLöeWidthx
 (
GLfixed
 
width
);

697 
GL_API
 
GL_APIENTRY
 
glLﬂdIdítôy
 ();

698 
GL_API
 
GL_APIENTRY
 
glLﬂdM©rixx
 (c⁄° 
GLfixed
 *
m
);

699 
GL_API
 
GL_APIENTRY
 
glLogicOp
 (
GLíum
 
›code
);

700 
GL_API
 
GL_APIENTRY
 
glM©îülx
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

701 
GL_API
 
GL_APIENTRY
 
glM©îülxv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

702 
GL_API
 
GL_APIENTRY
 
glM©rixMode
 (
GLíum
 
mode
);

703 
GL_API
 
GL_APIENTRY
 
glMu…M©rixx
 (c⁄° 
GLfixed
 *
m
);

704 
GL_API
 
GL_APIENTRY
 
glMu…iTexCo‹d4x
 (
GLíum
 
èrgë
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

705 
GL_API
 
GL_APIENTRY
 
glN‹mÆ3x
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

706 
GL_API
 
GL_APIENTRY
 
glN‹mÆPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

707 
GL_API
 
GL_APIENTRY
 
glOπhox
 (
GLfixed
 
À·
, GLfixed 
right
, GLfixed 
bŸtom
, GLfixed 
t›
, GLfixed 
zNór
, GLfixed 
zF¨
);

708 
GL_API
 
GL_APIENTRY
 
glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

709 
GL_API
 
GL_APIENTRY
 
glPoötP¨amëîx
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

710 
GL_API
 
GL_APIENTRY
 
glPoötP¨amëîxv
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

711 
GL_API
 
GL_APIENTRY
 
glPoötSizex
 (
GLfixed
 
size
);

712 
GL_API
 
GL_APIENTRY
 
glPﬁyg⁄Off£tx
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

713 
GL_API
 
GL_APIENTRY
 
glP›M©rix
 ();

714 
GL_API
 
GL_APIENTRY
 
glPushM©rix
 ();

715 
GL_API
 
GL_APIENTRY
 
glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

716 
GL_API
 
GL_APIENTRY
 
glRŸ©ex
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

717 
GL_API
 
GL_APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

718 
GL_API
 
GL_APIENTRY
 
glSam∂eCovîagex
 (
GL˛ampx
 
vÆue
, 
GLboﬁón
 
övît
);

719 
GL_API
 
GL_APIENTRY
 
glSˇÀx
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

720 
GL_API
 
GL_APIENTRY
 
glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

721 
GL_API
 
GL_APIENTRY
 
glShadeModñ
 (
GLíum
 
mode
);

722 
GL_API
 
GL_APIENTRY
 
glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

723 
GL_API
 
GL_APIENTRY
 
glSãncûMask
 (
GLuöt
 
mask
);

724 
GL_API
 
GL_APIENTRY
 
glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

725 
GL_API
 
GL_APIENTRY
 
glTexCo‹dPoöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

726 
GL_API
 
GL_APIENTRY
 
glTexEnvi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

727 
GL_API
 
GL_APIENTRY
 
glTexEnvx
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

728 
GL_API
 
GL_APIENTRY
 
glTexEnviv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

729 
GL_API
 
GL_APIENTRY
 
glTexEnvxv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

730 
GL_API
 
GL_APIENTRY
 
glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

731 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

732 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîx
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

733 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

734 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîxv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

735 
GL_API
 
GL_APIENTRY
 
glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

736 
GL_API
 
GL_APIENTRY
 
glTøn¶©ex
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

737 
GL_API
 
GL_APIENTRY
 
glVîãxPoöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

738 
GL_API
 
GL_APIENTRY
 
glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

745 #i‚de‡
GL_OES_ªad_f‹m©


746 
	#GL_OES_ªad_f‹m©
 1

	)

750 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


751 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

755 #i‚de‡
GL_OES_poöt_size_¨øy


756 
	#GL_OES_poöt_size_¨øy
 1

	)

757 
GL_API
 
GL_APIENTRY
 
glPoötSizePoöãrOES
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

761 #i‚de‡
GL_OES_poöt_•rôe


762 
	#GL_OES_poöt_•rôe
 1

	)

765 #ifde‡
__˝lu•lus


	@GLES/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_


	)

6 
	~<GLES/gl.h
>

8 #ifde‡
__˝lu•lus


17 #i‚de‡
GL_APIENTRYP


18 
	#GL_APIENTRYP
 
GL_APIENTRY
*

	)

26 #i‚de‡
GL_OES_bÀnd_equ©i⁄_£∑øã


28 
	#GL_BLEND_EQUATION_RGB_OES
 0x8009

	)

29 
	#GL_BLEND_EQUATION_ALPHA_OES
 0x883D

	)

33 #i‚de‡
GL_OES_bÀnd_func_£∑øã


34 
	#GL_BLEND_DST_RGB_OES
 0x80C8

	)

35 
	#GL_BLEND_SRC_RGB_OES
 0x80C9

	)

36 
	#GL_BLEND_DST_ALPHA_OES
 0x80CA

	)

37 
	#GL_BLEND_SRC_ALPHA_OES
 0x80CB

	)

41 #i‚de‡
GL_OES_bÀnd_subåa˘


42 
	#GL_BLEND_EQUATION_OES
 0x8009

	)

43 
	#GL_FUNC_ADD_OES
 0x8006

	)

44 
	#GL_FUNC_SUBTRACT_OES
 0x800A

	)

45 
	#GL_FUNC_REVERSE_SUBTRACT_OES
 0x800B

	)

49 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


50 
	#GL_ETC1_RGB8_OES
 0x8D64

	)

54 #i‚de‡
GL_OES_dïth24


55 
	#GL_DEPTH_COMPONENT24_OES
 0x81A6

	)

59 #i‚de‡
GL_OES_dïth32


60 
	#GL_DEPTH_COMPONENT32_OES
 0x81A7

	)

64 #i‚de‡
GL_OES_døw_ãxtuª


65 
	#GL_TEXTURE_CROP_RECT_OES
 0x8B9D

	)

69 #i‚de‡
GL_OES_EGL_image


70 * 
	tGLeglImageOES
;

74 #i‚de‡
GL_OES_ñemít_ödex_uöt


75 
	#GL_UNSIGNED_INT
 0x1405

	)

79 #i‚de‡
GL_OES_fixed_poöt


80 
	#GL_FIXED_OES
 0x140C

	)

84 #i‚de‡
GL_OES_‰amebuf„r_obje˘


85 
	#GL_NONE_OES
 0

	)

86 
	#GL_FRAMEBUFFER_OES
 0x8D40

	)

87 
	#GL_RENDERBUFFER_OES
 0x8D41

	)

88 
	#GL_RGBA4_OES
 0x8056

	)

89 
	#GL_RGB5_A1_OES
 0x8057

	)

90 
	#GL_RGB565_OES
 0x8D62

	)

91 
	#GL_DEPTH_COMPONENT16_OES
 0x81A5

	)

92 
	#GL_RENDERBUFFER_WIDTH_OES
 0x8D42

	)

93 
	#GL_RENDERBUFFER_HEIGHT_OES
 0x8D43

	)

94 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_OES
 0x8D44

	)

95 
	#GL_RENDERBUFFER_RED_SIZE_OES
 0x8D50

	)

96 
	#GL_RENDERBUFFER_GREEN_SIZE_OES
 0x8D51

	)

97 
	#GL_RENDERBUFFER_BLUE_SIZE_OES
 0x8D52

	)

98 
	#GL_RENDERBUFFER_ALPHA_SIZE_OES
 0x8D53

	)

99 
	#GL_RENDERBUFFER_DEPTH_SIZE_OES
 0x8D54

	)

100 
	#GL_RENDERBUFFER_STENCIL_SIZE_OES
 0x8D55

	)

101 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES
 0x8CD0

	)

102 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES
 0x8CD1

	)

103 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES
 0x8CD2

	)

104 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES
 0x8CD3

	)

105 
	#GL_COLOR_ATTACHMENT0_OES
 0x8CE0

	)

106 
	#GL_DEPTH_ATTACHMENT_OES
 0x8D00

	)

107 
	#GL_STENCIL_ATTACHMENT_OES
 0x8D20

	)

108 
	#GL_FRAMEBUFFER_COMPLETE_OES
 0x8CD5

	)

109 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES
 0x8CD6

	)

110 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES
 0x8CD7

	)

111 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES
 0x8CD9

	)

112 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES
 0x8CDA

	)

113 
	#GL_FRAMEBUFFER_UNSUPPORTED_OES
 0x8CDD

	)

114 
	#GL_FRAMEBUFFER_BINDING_OES
 0x8CA6

	)

115 
	#GL_RENDERBUFFER_BINDING_OES
 0x8CA7

	)

116 
	#GL_MAX_RENDERBUFFER_SIZE_OES
 0x84E8

	)

117 
	#GL_INVALID_FRAMEBUFFER_OPERATION_OES
 0x0506

	)

121 #i‚de‡
GL_OES_m≠buf„r


122 
	#GL_WRITE_ONLY_OES
 0x88B9

	)

123 
	#GL_BUFFER_ACCESS_OES
 0x88BB

	)

124 
	#GL_BUFFER_MAPPED_OES
 0x88BC

	)

125 
	#GL_BUFFER_MAP_POINTER_OES
 0x88BD

	)

129 #i‚de‡
GL_OES_m©rix_gë


130 
	#GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES
 0x898D

	)

131 
	#GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES
 0x898E

	)

132 
	#GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES
 0x898F

	)

136 #i‚de‡
GL_OES_m©rix_∑Àâe


137 
	#GL_MAX_VERTEX_UNITS_OES
 0x86A4

	)

138 
	#GL_MAX_PALETTE_MATRICES_OES
 0x8842

	)

139 
	#GL_MATRIX_PALETTE_OES
 0x8840

	)

140 
	#GL_MATRIX_INDEX_ARRAY_OES
 0x8844

	)

141 
	#GL_WEIGHT_ARRAY_OES
 0x86AD

	)

142 
	#GL_CURRENT_PALETTE_MATRIX_OES
 0x8843

	)

143 
	#GL_MATRIX_INDEX_ARRAY_SIZE_OES
 0x8846

	)

144 
	#GL_MATRIX_INDEX_ARRAY_TYPE_OES
 0x8847

	)

145 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_OES
 0x8848

	)

146 
	#GL_MATRIX_INDEX_ARRAY_POINTER_OES
 0x8849

	)

147 
	#GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES
 0x8B9E

	)

148 
	#GL_WEIGHT_ARRAY_SIZE_OES
 0x86AB

	)

149 
	#GL_WEIGHT_ARRAY_TYPE_OES
 0x86A9

	)

150 
	#GL_WEIGHT_ARRAY_STRIDE_OES
 0x86AA

	)

151 
	#GL_WEIGHT_ARRAY_POINTER_OES
 0x86AC

	)

152 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_OES
 0x889E

	)

156 #i‚de‡
GL_OES_∑cked_dïth_°ícû


157 
	#GL_DEPTH_STENCIL_OES
 0x84F9

	)

158 
	#GL_UNSIGNED_INT_24_8_OES
 0x84FA

	)

159 
	#GL_DEPTH24_STENCIL8_OES
 0x88F0

	)

163 #i‚de‡
GL_OES_rgb8_rgba8


164 
	#GL_RGB8_OES
 0x8051

	)

165 
	#GL_RGBA8_OES
 0x8058

	)

169 #i‚de‡
GL_OES_°ícû1


170 
	#GL_STENCIL_INDEX1_OES
 0x8D46

	)

174 #i‚de‡
GL_OES_°ícû4


175 
	#GL_STENCIL_INDEX4_OES
 0x8D47

	)

179 #i‚de‡
GL_OES_°ícû8


180 
	#GL_STENCIL_INDEX8_OES
 0x8D48

	)

184 #i‚de‡
GL_OES_°ícû_wøp


185 
	#GL_INCR_WRAP_OES
 0x8507

	)

186 
	#GL_DECR_WRAP_OES
 0x8508

	)

190 #i‚de‡
GL_OES_ãxtuª_cube_m≠


191 
	#GL_NORMAL_MAP_OES
 0x8511

	)

192 
	#GL_REFLECTION_MAP_OES
 0x8512

	)

193 
	#GL_TEXTURE_CUBE_MAP_OES
 0x8513

	)

194 
	#GL_TEXTURE_BINDING_CUBE_MAP_OES
 0x8514

	)

195 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES
 0x8515

	)

196 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES
 0x8516

	)

197 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES
 0x8517

	)

198 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES
 0x8518

	)

199 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES
 0x8519

	)

200 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES
 0x851A

	)

201 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES
 0x851C

	)

202 
	#GL_TEXTURE_GEN_MODE_OES
 0x2500

	)

203 
	#GL_TEXTURE_GEN_STR_OES
 0x8D60

	)

207 #i‚de‡
GL_OES_ãxtuª_múr‹ed_ª≥©


208 
	#GL_MIRRORED_REPEAT_OES
 0x8370

	)

212 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


213 
	#GL_VERTEX_ARRAY_BINDING_OES
 0x85B5

	)

217 #i‚de‡
GL_OES_EGL_image_exã∫Æ


218 
	#GL_TEXTURE_EXTERNAL_OES
 0x8D65

	)

219 
	#GL_SAMPLER_EXTERNAL_OES
 0x8D66

	)

220 
	#GL_TEXTURE_BINDING_EXTERNAL_OES
 0x8D67

	)

221 
	#GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES
 0x8D68

	)

229 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


230 
	#GL_3DC_X_AMD
 0x87F9

	)

231 
	#GL_3DC_XY_AMD
 0x87FA

	)

235 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


236 
	#GL_ATC_RGB_AMD
 0x8C92

	)

237 
	#GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
 0x8C93

	)

238 
	#GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD
 0x87EE

	)

253 #i‚de‡
GL_EXT_bÀnd_mömax


254 
	#GL_MIN_EXT
 0x8007

	)

255 
	#GL_MAX_EXT
 0x8008

	)

259 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


260 
	#GL_COLOR_EXT
 0x1800

	)

261 
	#GL_DEPTH_EXT
 0x1801

	)

262 
	#GL_STENCIL_EXT
 0x1802

	)

269 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


270 
	#GL_BGRA_EXT
 0x80E1

	)

271 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
 0x8365

	)

272 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
 0x8366

	)

276 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


277 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

278 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

282 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


283 
	#GL_BGRA_EXT
 0x80E1

	)

287 #i‚de‡
GL_EXT_ãxtuª_lod_büs


288 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

289 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

290 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

298 #i‚de‡
GL_IMG_ªad_f‹m©


299 
	#GL_BGRA_IMG
 0x80E1

	)

300 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG
 0x8365

	)

304 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


305 
	#GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
 0x8C00

	)

306 
	#GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
 0x8C01

	)

307 
	#GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
 0x8C02

	)

308 
	#GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
 0x8C03

	)

312 #i‚de‡
GL_IMG_ãxtuª_ív_íh™˚d_fixed_fun˘i⁄


313 
	#GL_MODULATE_COLOR_IMG
 0x8C04

	)

314 
	#GL_RECIP_ADD_SIGNED_ALPHA_IMG
 0x8C05

	)

315 
	#GL_TEXTURE_ALPHA_MODULATE_IMG
 0x8C06

	)

316 
	#GL_FACTOR_ALPHA_MODULATE_IMG
 0x8C07

	)

317 
	#GL_FRAGMENT_ALPHA_MODULATE_IMG
 0x8C08

	)

318 
	#GL_ADD_BLEND_IMG
 0x8C09

	)

319 
	#GL_DOT3_RGBA_IMG
 0x86AF

	)

323 #i‚de‡
GL_IMG_u£r_˛ù_∂™e


324 
	#GL_CLIP_PLANE0_IMG
 0x3000

	)

325 
	#GL_CLIP_PLANE1_IMG
 0x3001

	)

326 
	#GL_CLIP_PLANE2_IMG
 0x3002

	)

327 
	#GL_CLIP_PLANE3_IMG
 0x3003

	)

328 
	#GL_CLIP_PLANE4_IMG
 0x3004

	)

329 
	#GL_CLIP_PLANE5_IMG
 0x3005

	)

330 
	#GL_MAX_CLIP_PLANES_IMG
 0x0D32

	)

334 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


335 
	#GL_RENDERBUFFER_SAMPLES_IMG
 0x9133

	)

336 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG
 0x9134

	)

337 
	#GL_MAX_SAMPLES_IMG
 0x9135

	)

338 
	#GL_TEXTURE_SAMPLES_IMG
 0x9136

	)

346 #i‚de‡
GL_NV_„n˚


347 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

348 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

349 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

360 #i‚de‡
GL_QCOM_exãnded_gë


361 
	#GL_TEXTURE_WIDTH_QCOM
 0x8BD2

	)

362 
	#GL_TEXTURE_HEIGHT_QCOM
 0x8BD3

	)

363 
	#GL_TEXTURE_DEPTH_QCOM
 0x8BD4

	)

364 
	#GL_TEXTURE_INTERNAL_FORMAT_QCOM
 0x8BD5

	)

365 
	#GL_TEXTURE_FORMAT_QCOM
 0x8BD6

	)

366 
	#GL_TEXTURE_TYPE_QCOM
 0x8BD7

	)

367 
	#GL_TEXTURE_IMAGE_VALID_QCOM
 0x8BD8

	)

368 
	#GL_TEXTURE_NUM_LEVELS_QCOM
 0x8BD9

	)

369 
	#GL_TEXTURE_TARGET_QCOM
 0x8BDA

	)

370 
	#GL_TEXTURE_OBJECT_VALID_QCOM
 0x8BDB

	)

371 
	#GL_STATE_RESTORE
 0x8BDC

	)

378 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


379 
	#GL_PERFMON_GLOBAL_MODE_QCOM
 0x8FA0

	)

383 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


384 
	#GL_WRITEONLY_RENDERING_QCOM
 0x8823

	)

388 #i‚de‡
GL_QCOM_tûed_ªndîög


389 
	#GL_COLOR_BUFFER_BIT0_QCOM
 0x00000001

	)

390 
	#GL_COLOR_BUFFER_BIT1_QCOM
 0x00000002

	)

391 
	#GL_COLOR_BUFFER_BIT2_QCOM
 0x00000004

	)

392 
	#GL_COLOR_BUFFER_BIT3_QCOM
 0x00000008

	)

393 
	#GL_COLOR_BUFFER_BIT4_QCOM
 0x00000010

	)

394 
	#GL_COLOR_BUFFER_BIT5_QCOM
 0x00000020

	)

395 
	#GL_COLOR_BUFFER_BIT6_QCOM
 0x00000040

	)

396 
	#GL_COLOR_BUFFER_BIT7_QCOM
 0x00000080

	)

397 
	#GL_DEPTH_BUFFER_BIT0_QCOM
 0x00000100

	)

398 
	#GL_DEPTH_BUFFER_BIT1_QCOM
 0x00000200

	)

399 
	#GL_DEPTH_BUFFER_BIT2_QCOM
 0x00000400

	)

400 
	#GL_DEPTH_BUFFER_BIT3_QCOM
 0x00000800

	)

401 
	#GL_DEPTH_BUFFER_BIT4_QCOM
 0x00001000

	)

402 
	#GL_DEPTH_BUFFER_BIT5_QCOM
 0x00002000

	)

403 
	#GL_DEPTH_BUFFER_BIT6_QCOM
 0x00004000

	)

404 
	#GL_DEPTH_BUFFER_BIT7_QCOM
 0x00008000

	)

405 
	#GL_STENCIL_BUFFER_BIT0_QCOM
 0x00010000

	)

406 
	#GL_STENCIL_BUFFER_BIT1_QCOM
 0x00020000

	)

407 
	#GL_STENCIL_BUFFER_BIT2_QCOM
 0x00040000

	)

408 
	#GL_STENCIL_BUFFER_BIT3_QCOM
 0x00080000

	)

409 
	#GL_STENCIL_BUFFER_BIT4_QCOM
 0x00100000

	)

410 
	#GL_STENCIL_BUFFER_BIT5_QCOM
 0x00200000

	)

411 
	#GL_STENCIL_BUFFER_BIT6_QCOM
 0x00400000

	)

412 
	#GL_STENCIL_BUFFER_BIT7_QCOM
 0x00800000

	)

413 
	#GL_MULTISAMPLE_BUFFER_BIT0_QCOM
 0x01000000

	)

414 
	#GL_MULTISAMPLE_BUFFER_BIT1_QCOM
 0x02000000

	)

415 
	#GL_MULTISAMPLE_BUFFER_BIT2_QCOM
 0x04000000

	)

416 
	#GL_MULTISAMPLE_BUFFER_BIT3_QCOM
 0x08000000

	)

417 
	#GL_MULTISAMPLE_BUFFER_BIT4_QCOM
 0x10000000

	)

418 
	#GL_MULTISAMPLE_BUFFER_BIT5_QCOM
 0x20000000

	)

419 
	#GL_MULTISAMPLE_BUFFER_BIT6_QCOM
 0x40000000

	)

420 
	#GL_MULTISAMPLE_BUFFER_BIT7_QCOM
 0x80000000

	)

432 #i‚de‡
GL_OES_bÀnd_equ©i⁄_£∑øã


433 
	#GL_OES_bÀnd_equ©i⁄_£∑øã
 1

	)

434 #ifde‡
GL_GLEXT_PROTOTYPES


435 
GL_API
 
GL_APIENTRY
 
glBÀndEqu©i⁄Sï¨©eOES
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

437 (
	tGL_APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEOESPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

441 #i‚de‡
GL_OES_bÀnd_func_£∑øã


442 
	#GL_OES_bÀnd_func_£∑øã
 1

	)

443 #ifde‡
GL_GLEXT_PROTOTYPES


444 
GL_API
 
GL_APIENTRY
 
	`glBÀndFuncSï¨©eOES
 (
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

446 (
	tGL_APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEOESPROC
Ë(
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

450 #i‚de‡
GL_OES_bÀnd_subåa˘


451 
	#GL_OES_bÀnd_subåa˘
 1

	)

452 #ifde‡
GL_GLEXT_PROTOTYPES


453 
GL_API
 
GL_APIENTRY
 
	`glBÀndEqu©i⁄OES
 (
GLíum
 
mode
);

455 (
	tGL_APIENTRYP
 
	tPFNGLBLENDEQUATIONOESPROC
Ë(
	tGLíum
 
	tmode
);

459 #i‚de‡
GL_OES_byã_co‹dö©es


460 
	#GL_OES_byã_co‹dö©es
 1

	)

464 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


465 
	#GL_OES_com¥es£d_ETC1_RGB8_ãxtuª
 1

	)

469 #i‚de‡
GL_OES_dïth24


470 
	#GL_OES_dïth24
 1

	)

474 #i‚de‡
GL_OES_dïth32


475 
	#GL_OES_dïth32
 1

	)

479 #i‚de‡
GL_OES_døw_ãxtuª


480 
	#GL_OES_døw_ãxtuª
 1

	)

481 #ifde‡
GL_GLEXT_PROTOTYPES


482 
GL_API
 
GL_APIENTRY
 
	`glDøwTexsOES
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
width
, GLsh‹à
height
);

483 
GL_API
 
GL_APIENTRY
 
	`glDøwTexiOES
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
width
, GLöà
height
);

484 
GL_API
 
GL_APIENTRY
 
	`glDøwTexxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
, GLfixed 
width
, GLfixed 
height
);

485 
GL_API
 
GL_APIENTRY
 
	`glDøwTexsvOES
 (c⁄° 
GLsh‹t
 *
co‹ds
);

486 
GL_API
 
GL_APIENTRY
 
	`glDøwTexivOES
 (c⁄° 
GLöt
 *
co‹ds
);

487 
GL_API
 
GL_APIENTRY
 
	`glDøwTexxvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

488 
GL_API
 
GL_APIENTRY
 
	`glDøwTexfOES
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
width
, GLÊﬂà
height
);

489 
GL_API
 
GL_APIENTRY
 
	`glDøwTexfvOES
 (c⁄° 
GLÊﬂt
 *
co‹ds
);

491 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXSOESPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	twidth
, GLsh‹à
	theight
);

492 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXIOESPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	twidth
, GLöà
	theight
);

493 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
, GLfixed 
	twidth
, GLfixed 
	theight
);

494 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXSVOESPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

495 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXIVOESPROC
Ë(c⁄° 
	tGLöt
 *
	tco‹ds
);

496 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

497 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXFOESPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	twidth
, GLÊﬂà
	theight
);

498 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXFVOESPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

502 #i‚de‡
GL_OES_EGL_image


503 
	#GL_OES_EGL_image
 1

	)

504 #ifde‡
GL_GLEXT_PROTOTYPES


505 
GL_API
 
GL_APIENTRY
 
	`glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

506 
GL_API
 
GL_APIENTRY
 
	`glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

508 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

509 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

513 #i‚de‡
GL_OES_ñemít_ödex_uöt


514 
	#GL_OES_ñemít_ödex_uöt
 1

	)

518 #i‚de‡
GL_OES_exãnded_m©rix_∑Àâe


519 
	#GL_OES_exãnded_m©rix_∑Àâe
 1

	)

523 #i‚de‡
GL_OES_fbo_ªndî_mùm≠


524 
	#GL_OES_fbo_ªndî_mùm≠
 1

	)

528 #i‚de‡
GL_OES_fixed_poöt


529 
	#GL_OES_fixed_poöt
 1

	)

530 #ifde‡
GL_GLEXT_PROTOTYPES


531 
GL_API
 
GL_APIENTRY
 
	`glAÕhaFuncxOES
 (
GLíum
 
func
, 
GL˛ampx
 
ªf
);

532 
GL_API
 
GL_APIENTRY
 
	`glCÀ¨Cﬁ‹xOES
 (
GL˛ampx
 
ªd
, GL˛ampx 
gªí
, GL˛ampx 
blue
, GL˛ampx 
Æpha
);

533 
GL_API
 
GL_APIENTRY
 
	`glCÀ¨DïthxOES
 (
GL˛ampx
 
dïth
);

534 
GL_API
 
GL_APIENTRY
 
	`glClùPœ√xOES
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

535 
GL_API
 
GL_APIENTRY
 
	`glCﬁ‹4xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

536 
GL_API
 
GL_APIENTRY
 
	`glDïthR™gexOES
 (
GL˛ampx
 
zNór
, GL˛ampx 
zF¨
);

537 
GL_API
 
GL_APIENTRY
 
	`glFogxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

538 
GL_API
 
GL_APIENTRY
 
	`glFogxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

539 
GL_API
 
GL_APIENTRY
 
	`glFru°umxOES
 (
GLfixed
 
À·
, GLfixed 
right
, GLfixed 
bŸtom
, GLfixed 
t›
, GLfixed 
zNór
, GLfixed 
zF¨
);

540 
GL_API
 
GL_APIENTRY
 
	`glGëClùPœ√xOES
 (
GLíum
 
≤ame
, 
GLfixed
 
eqn
[4]);

541 
GL_API
 
GL_APIENTRY
 
	`glGëFixedvOES
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

542 
GL_API
 
GL_APIENTRY
 
	`glGëLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

543 
GL_API
 
GL_APIENTRY
 
	`glGëM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

544 
GL_API
 
GL_APIENTRY
 
	`glGëTexEnvxvOES
 (
GLíum
 
ív
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

545 
GL_API
 
GL_APIENTRY
 
	`glGëTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

546 
GL_API
 
GL_APIENTRY
 
	`glLightModñxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

547 
GL_API
 
GL_APIENTRY
 
	`glLightModñxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

548 
GL_API
 
GL_APIENTRY
 
	`glLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

549 
GL_API
 
GL_APIENTRY
 
	`glLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

550 
GL_API
 
GL_APIENTRY
 
	`glLöeWidthxOES
 (
GLfixed
 
width
);

551 
GL_API
 
GL_APIENTRY
 
	`glLﬂdM©rixxOES
 (c⁄° 
GLfixed
 *
m
);

552 
GL_API
 
GL_APIENTRY
 
	`glM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

553 
GL_API
 
GL_APIENTRY
 
	`glM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

554 
GL_API
 
GL_APIENTRY
 
	`glMu…M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

555 
GL_API
 
GL_APIENTRY
 
	`glMu…iTexCo‹d4xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

556 
GL_API
 
GL_APIENTRY
 
	`glN‹mÆ3xOES
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

557 
GL_API
 
GL_APIENTRY
 
	`glOπhoxOES
 (
GLfixed
 
À·
, GLfixed 
right
, GLfixed 
bŸtom
, GLfixed 
t›
, GLfixed 
zNór
, GLfixed 
zF¨
);

558 
GL_API
 
GL_APIENTRY
 
	`glPoötP¨amëîxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

559 
GL_API
 
GL_APIENTRY
 
	`glPoötP¨amëîxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

560 
GL_API
 
GL_APIENTRY
 
	`glPoötSizexOES
 (
GLfixed
 
size
);

561 
GL_API
 
GL_APIENTRY
 
	`glPﬁyg⁄Off£txOES
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

562 
GL_API
 
GL_APIENTRY
 
	`glRŸ©exOES
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

563 
GL_API
 
GL_APIENTRY
 
	`glSam∂eCovîagexOES
 (
GL˛ampx
 
vÆue
, 
GLboﬁón
 
övît
);

564 
GL_API
 
GL_APIENTRY
 
	`glSˇÀxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

565 
GL_API
 
GL_APIENTRY
 
	`glTexEnvxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

566 
GL_API
 
GL_APIENTRY
 
	`glTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

567 
GL_API
 
GL_APIENTRY
 
	`glTexP¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

568 
GL_API
 
GL_APIENTRY
 
	`glTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

569 
GL_API
 
GL_APIENTRY
 
	`glTøn¶©exOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

571 (
	tGL_APIENTRYP
 
	tPFNGLALPHAFUNCXOESPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampx
 
	tªf
);

572 (
	tGL_APIENTRYP
 
	tPFNGLCLEARCOLORXOESPROC
Ë(
	tGL˛ampx
 
	tªd
, GL˛ampx 
	tgªí
, GL˛ampx 
	tblue
, GL˛ampx 
	tÆpha
);

573 (
	tGL_APIENTRYP
 
	tPFNGLCLEARDEPTHXOESPROC
Ë(
	tGL˛ampx
 
	tdïth
);

574 (
	tGL_APIENTRYP
 
	tPFNGLCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
 *
	tequ©i⁄
);

575 (
	tGL_APIENTRYP
 
	tPFNGLCOLOR4XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

576 (
	tGL_APIENTRYP
 
	tPFNGLDEPTHRANGEXOESPROC
Ë(
	tGL˛ampx
 
	tzNór
, GL˛ampx 
	tzF¨
);

577 (
	tGL_APIENTRYP
 
	tPFNGLFOGXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

578 (
	tGL_APIENTRYP
 
	tPFNGLFOGXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

579 (
	tGL_APIENTRYP
 
	tPFNGLFRUSTUMXOESPROC
Ë(
	tGLfixed
 
	tÀ·
, GLfixed 
	tright
, GLfixed 
	tbŸtom
, GLfixed 
	tt›
, GLfixed 
	tzNór
, GLfixed 
	tzF¨
);

580 (
	tGL_APIENTRYP
 
	tPFNGLGETCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	teqn
[4]);

581 (
	tGL_APIENTRYP
 
	tPFNGLGETFIXEDVOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

582 (
	tGL_APIENTRYP
 
	tPFNGLGETLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

583 (
	tGL_APIENTRYP
 
	tPFNGLGETMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

584 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXENVXVOESPROC
Ë(
	tGLíum
 
	tív
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

585 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

586 (
	tGL_APIENTRYP
 
	tPFNGLLIGHTMODELXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

587 (
	tGL_APIENTRYP
 
	tPFNGLLIGHTMODELXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

588 (
	tGL_APIENTRYP
 
	tPFNGLLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

589 (
	tGL_APIENTRYP
 
	tPFNGLLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

590 (
	tGL_APIENTRYP
 
	tPFNGLLINEWIDTHXOESPROC
Ë(
	tGLfixed
 
	twidth
);

591 (
	tGL_APIENTRYP
 
	tPFNGLLOADMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

592 (
	tGL_APIENTRYP
 
	tPFNGLMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

593 (
	tGL_APIENTRYP
 
	tPFNGLMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

594 (
	tGL_APIENTRYP
 
	tPFNGLMULTMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

595 (
	tGL_APIENTRYP
 
	tPFNGLMULTITEXCOORD4XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

596 (
	tGL_APIENTRYP
 
	tPFNGLNORMAL3XOESPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

597 (
	tGL_APIENTRYP
 
	tPFNGLORTHOXOESPROC
Ë(
	tGLfixed
 
	tÀ·
, GLfixed 
	tright
, GLfixed 
	tbŸtom
, GLfixed 
	tt›
, GLfixed 
	tzNór
, GLfixed 
	tzF¨
);

598 (
	tGL_APIENTRYP
 
	tPFNGLPOINTPARAMETERXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

599 (
	tGL_APIENTRYP
 
	tPFNGLPOINTPARAMETERXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

600 (
	tGL_APIENTRYP
 
	tPFNGLPOINTSIZEXOESPROC
Ë(
	tGLfixed
 
	tsize
);

601 (
	tGL_APIENTRYP
 
	tPFNGLPOLYGONOFFSETXOESPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

602 (
	tGL_APIENTRYP
 
	tPFNGLROTATEXOESPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

603 (
	tGL_APIENTRYP
 
	tPFNGLSAMPLECOVERAGEXOESPROC
Ë(
	tGL˛ampx
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

604 (
	tGL_APIENTRYP
 
	tPFNGLSCALEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

605 (
	tGL_APIENTRYP
 
	tPFNGLTEXENVXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

606 (
	tGL_APIENTRYP
 
	tPFNGLTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

607 (
	tGL_APIENTRYP
 
	tPFNGLTEXPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

608 (
	tGL_APIENTRYP
 
	tPFNGLTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

609 (
	tGL_APIENTRYP
 
	tPFNGLTRANSLATEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

613 #i‚de‡
GL_OES_‰amebuf„r_obje˘


614 
	#GL_OES_‰amebuf„r_obje˘
 1

	)

615 #ifde‡
GL_GLEXT_PROTOTYPES


616 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsRídîbuf„rOES
 (
GLuöt
 
ªndîbuf„r
);

617 
GL_API
 
GL_APIENTRY
 
	`glBödRídîbuf„rOES
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

618 
GL_API
 
GL_APIENTRY
 
	`glDñëeRídîbuf„rsOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ªndîbuf„rs
);

619 
GL_API
 
GL_APIENTRY
 
	`glGíRídîbuf„rsOES
 (
GLsizei
 
n
, 
GLuöt
* 
ªndîbuf„rs
);

620 
GL_API
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

621 
GL_API
 
GL_APIENTRY
 
	`glGëRídîbuf„rP¨amëîivOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

622 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsFømebuf„rOES
 (
GLuöt
 
‰amebuf„r
);

623 
GL_API
 
GL_APIENTRY
 
	`glBödFømebuf„rOES
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

624 
GL_API
 
GL_APIENTRY
 
	`glDñëeFømebuf„rsOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
‰amebuf„rs
);

625 
GL_API
 
GL_APIENTRY
 
	`glGíFømebuf„rsOES
 (
GLsizei
 
n
, 
GLuöt
* 
‰amebuf„rs
);

626 
GL_API
 
GLíum
 
GL_APIENTRY
 
	`glCheckFømebuf„rSètusOES
 (GLíum 
èrgë
);

627 
GL_API
 
GL_APIENTRY
 
	`glFømebuf„rRídîbuf„rOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

628 
GL_API
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

629 
GL_API
 
GL_APIENTRY
 
	`glGëFømebuf„rAâachmítP¨amëîivOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

630 
GL_API
 
GL_APIENTRY
 
	`glGíî©eMùm≠OES
 (
GLíum
 
èrgë
);

632 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISRENDERBUFFEROESPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

633 (
	tGL_APIENTRYP
 
	tPFNGLBINDRENDERBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

634 (
	tGL_APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tªndîbuf„rs
);

635 (
	tGL_APIENTRYP
 
	tPFNGLGENRENDERBUFFERSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tªndîbuf„rs
);

636 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

637 (
	tGL_APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

638 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISFRAMEBUFFEROESPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

639 (
	tGL_APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

640 (
	tGL_APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t‰amebuf„rs
);

641 (
	tGL_APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t‰amebuf„rs
);

642 
	$GLíum
 (
	tGL_APIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSOESPROC
Ë(
	tGLíum
 
	tèrgë
);

643 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

644 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

645 (
	tGL_APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

646 (
	tGL_APIENTRYP
 
	tPFNGLGENERATEMIPMAPOESPROC
Ë(
	tGLíum
 
	tèrgë
);

650 #i‚de‡
GL_OES_m≠buf„r


651 
	#GL_OES_m≠buf„r
 1

	)

652 #ifde‡
GL_GLEXT_PROTOTYPES


653 
GL_API
 * 
GL_APIENTRY
 
	`glM≠Buf„rOES
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

654 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glUnm≠Buf„rOES
 (
GLíum
 
èrgë
);

655 
GL_API
 
GL_APIENTRY
 
	`glGëBuf„rPoöãrvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 ** 
∑øms
);

657 * (
	tGL_APIENTRYP
 
	tPFNGLMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

658 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLUNMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
);

659 (
	tGL_APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 ** 
	t∑øms
);

663 #i‚de‡
GL_OES_m©rix_gë


664 
	#GL_OES_m©rix_gë
 1

	)

668 #i‚de‡
GL_OES_m©rix_∑Àâe


669 
	#GL_OES_m©rix_∑Àâe
 1

	)

670 #ifde‡
GL_GLEXT_PROTOTYPES


671 
GL_API
 
GL_APIENTRY
 
	`glCuºítPÆëãM©rixOES
 (
GLuöt
 
m©rix∑Àâeödex
);

672 
GL_API
 
GL_APIENTRY
 
	`glLﬂdPÆëãFromModñVõwM©rixOES
 ();

673 
GL_API
 
GL_APIENTRY
 
	`glM©rixIndexPoöãrOES
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

674 
GL_API
 
GL_APIENTRY
 
	`glWeightPoöãrOES
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

676 (
	tGL_APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXOESPROC
Ë(
	tGLuöt
 
	tm©rix∑Àâeödex
);

677 (
	tGL_APIENTRYP
 
	tPFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC
) ();

678 (
	tGL_APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTEROESPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

679 (
	tGL_APIENTRYP
 
	tPFNGLWEIGHTPOINTEROESPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

683 #i‚de‡
GL_OES_∑cked_dïth_°ícû


684 
	#GL_OES_∑cked_dïth_°ícû
 1

	)

688 #i‚de‡
GL_OES_quîy_m©rix


689 
	#GL_OES_quîy_m©rix
 1

	)

690 #ifde‡
GL_GLEXT_PROTOTYPES


691 
GL_API
 
GLbôfõld
 
GL_APIENTRY
 
	`glQuîyM©rixxOES
 (
GLfixed
 
m™tisß
[16], 
GLöt
 
exp⁄ít
[16]);

693 
	$GLbôfõld
 (
	tGL_APIENTRYP
 
	tPFNGLQUERYMATRIXXOESPROC
Ë(
	tGLfixed
 
	tm™tisß
[16], 
	tGLöt
 
	texp⁄ít
[16]);

697 #i‚de‡
GL_OES_rgb8_rgba8


698 
	#GL_OES_rgb8_rgba8
 1

	)

702 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


703 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

704 #ifde‡
GL_GLEXT_PROTOTYPES


705 
GL_API
 
GL_APIENTRY
 
	`glDïthR™gefOES
 (
GL˛ampf
 
zNór
, GL˛amp‡
zF¨
);

706 
GL_API
 
GL_APIENTRY
 
	`glFru°umfOES
 (
GLÊﬂt
 
À·
, GLÊﬂà
right
, GLÊﬂà
bŸtom
, GLÊﬂà
t›
, GLÊﬂà
zNór
, GLÊﬂà
zF¨
);

707 
GL_API
 
GL_APIENTRY
 
	`glOπhofOES
 (
GLÊﬂt
 
À·
, GLÊﬂà
right
, GLÊﬂà
bŸtom
, GLÊﬂà
t›
, GLÊﬂà
zNór
, GLÊﬂà
zF¨
);

708 
GL_API
 
GL_APIENTRY
 
	`glClùPœ√fOES
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

709 
GL_API
 
GL_APIENTRY
 
	`glGëClùPœ√fOES
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
eqn
[4]);

710 
GL_API
 
GL_APIENTRY
 
	`glCÀ¨DïthfOES
 (
GL˛ampf
 
dïth
);

712 (
	tGL_APIENTRYP
 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tzNór
, GL˛amp‡
	tzF¨
);

713 (
	tGL_APIENTRYP
 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tÀ·
, GLÊﬂà
	tright
, GLÊﬂà
	tbŸtom
, GLÊﬂà
	tt›
, GLÊﬂà
	tzNór
, GLÊﬂà
	tzF¨
);

714 (
	tGL_APIENTRYP
 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tÀ·
, GLÊﬂà
	tright
, GLÊﬂà
	tbŸtom
, GLÊﬂà
	tt›
, GLÊﬂà
	tzNór
, GLÊﬂà
	tzF¨
);

715 (
	tGL_APIENTRYP
 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
 *
	tequ©i⁄
);

716 (
	tGL_APIENTRYP
 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	teqn
[4]);

717 (
	tGL_APIENTRYP
 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampf
 
	tdïth
);

721 #i‚de‡
GL_OES_°ícû1


722 
	#GL_OES_°ícû1
 1

	)

726 #i‚de‡
GL_OES_°ícû4


727 
	#GL_OES_°ícû4
 1

	)

731 #i‚de‡
GL_OES_°ícû8


732 
	#GL_OES_°ícû8
 1

	)

736 #i‚de‡
GL_OES_°ícû_wøp


737 
	#GL_OES_°ícû_wøp
 1

	)

741 #i‚de‡
GL_OES_ãxtuª_cube_m≠


742 
	#GL_OES_ãxtuª_cube_m≠
 1

	)

743 #ifde‡
GL_GLEXT_PROTOTYPES


744 
GL_API
 
GL_APIENTRY
 
	`glTexGífOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

745 
GL_API
 
GL_APIENTRY
 
	`glTexGífvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

746 
GL_API
 
GL_APIENTRY
 
	`glTexGíiOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

747 
GL_API
 
GL_APIENTRY
 
	`glTexGíivOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

748 
GL_API
 
GL_APIENTRY
 
	`glTexGíxOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

749 
GL_API
 
GL_APIENTRY
 
	`glTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

750 
GL_API
 
GL_APIENTRY
 
	`glGëTexGífvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

751 
GL_API
 
GL_APIENTRY
 
	`glGëTexGíivOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

752 
GL_API
 
GL_APIENTRY
 
	`glGëTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

754 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENFOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

755 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENFVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

756 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENIOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

757 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENIVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

758 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENXOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

759 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

760 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXGENFVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

761 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXGENIVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

762 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

766 #i‚de‡
GL_OES_ãxtuª_ív_¸ossb¨


767 
	#GL_OES_ãxtuª_ív_¸ossb¨
 1

	)

771 #i‚de‡
GL_OES_ãxtuª_múr‹ed_ª≥©


772 
	#GL_OES_ãxtuª_múr‹ed_ª≥©
 1

	)

776 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


777 
	#GL_OES_vîãx_¨øy_obje˘
 1

	)

778 #ifde‡
GL_GLEXT_PROTOTYPES


779 
GL_API
 
GL_APIENTRY
 
	`glBödVîãxAºayOES
 (
GLuöt
 
¨øy
);

780 
GL_API
 
GL_APIENTRY
 
	`glDñëeVîãxAºaysOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

781 
GL_API
 
GL_APIENTRY
 
	`glGíVîãxAºaysOES
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

782 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsVîãxAºayOES
 (
GLuöt
 
¨øy
);

784 (
	tGL_APIENTRYP
 
	tPFNGLBINDVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

785 (
	tGL_APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

786 (
	tGL_APIENTRYP
 
	tPFNGLGENVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

787 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

791 #i‚de‡
GL_OES_EGL_image_exã∫Æ


792 
	#GL_OES_EGL_image_exã∫Æ
 1

	)

800 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


801 
	#GL_AMD_com¥es£d_3DC_ãxtuª
 1

	)

805 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


806 
	#GL_AMD_com¥es£d_ATC_ãxtuª
 1

	)

814 #i‚de‡
GL_APPLE_ãxtuª_2D_limôed_≈Ÿ


815 
	#GL_APPLE_ãxtuª_2D_limôed_≈Ÿ
 1

	)

823 #i‚de‡
GL_EXT_bÀnd_mömax


824 
	#GL_EXT_bÀnd_mömax
 1

	)

828 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


829 
	#GL_EXT_disˇrd_‰amebuf„r
 1

	)

830 #ifde‡
GL_GLEXT_PROTOTYPES


831 
GL_API
 
GL_APIENTRY
 
	`glDisˇrdFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

833 (
	tGL_APIENTRYP
 
	tPFNGLDISCARDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

837 #i‚de‡
GL_EXT_mu…i_døw_¨øys


838 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

839 #ifde‡
GL_GLEXT_PROTOTYPES


840 
GL_API
 
GL_APIENTRY
 
	`glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 *
fú°
, 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

841 
GL_API
 
GL_APIENTRY
 
	`glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* *
ödi˚s
, GLsizeò
¥imcou¡
);

843 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

844 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

848 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


849 
	#GL_EXT_ªad_f‹m©_bgø
 1

	)

853 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


854 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

858 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


859 
	#GL_EXT_ãxtuª_f‹m©_BGRA8888
 1

	)

863 #i‚de‡
GL_EXT_ãxtuª_lod_büs


864 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

872 #i‚de‡
GL_IMG_ªad_f‹m©


873 
	#GL_IMG_ªad_f‹m©
 1

	)

877 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


878 
	#GL_IMG_ãxtuª_com¥essi⁄_pvπc
 1

	)

882 #i‚de‡
GL_IMG_ãxtuª_ív_íh™˚d_fixed_fun˘i⁄


883 
	#GL_IMG_ãxtuª_ív_íh™˚d_fixed_fun˘i⁄
 1

	)

887 #i‚de‡
GL_IMG_u£r_˛ù_∂™e


888 
	#GL_IMG_u£r_˛ù_∂™e
 1

	)

889 #ifde‡
GL_GLEXT_PROTOTYPES


890 
GL_API
 
GL_APIENTRY
 
	`glClùPœ√fIMG
 (
GLíum
 
p
, c⁄° 
GLÊﬂt
 *
eqn
);

891 
GL_API
 
GL_APIENTRY
 
	`glClùPœ√xIMG
 (
GLíum
 
p
, c⁄° 
GLfixed
 *
eqn
);

893 (
	tGL_APIENTRYP
 
	tPFNGLCLIPPLANEFIMGPROC
Ë(
	tGLíum
 
	tp
, c⁄° 
	tGLÊﬂt
 *
	teqn
);

894 (
	tGL_APIENTRYP
 
	tPFNGLCLIPPLANEXIMGPROC
Ë(
	tGLíum
 
	tp
, c⁄° 
	tGLfixed
 *
	teqn
);

898 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


899 
	#GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª
 1

	)

900 #ifde‡
GL_GLEXT_PROTOTYPES


901 
GL_API
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eIMG
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

902 
GL_API
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DMu…ißm∂eIMG
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
ßm∂es
);

904 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMG
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

905 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMG
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tßm∂es
);

913 #i‚de‡
GL_NV_„n˚


914 
	#GL_NV_„n˚
 1

	)

915 #ifde‡
GL_GLEXT_PROTOTYPES


916 
GL_API
 
GL_APIENTRY
 
	`glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

917 
GL_API
 
GL_APIENTRY
 
	`glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

918 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsFí˚NV
 (
GLuöt
 
„n˚
);

919 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

920 
GL_API
 
GL_APIENTRY
 
	`glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

921 
GL_API
 
GL_APIENTRY
 
	`glFöishFí˚NV
 (
GLuöt
 
„n˚
);

922 
GL_API
 
GL_APIENTRY
 
	`glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

924 (
	tGL_APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

925 (
	tGL_APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

926 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

927 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

928 (
	tGL_APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

929 (
	tGL_APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

930 (
	tGL_APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

938 #i‚de‡
GL_QCOM_drivî_c⁄åﬁ


939 
	#GL_QCOM_drivî_c⁄åﬁ
 1

	)

940 #ifde‡
GL_GLEXT_PROTOTYPES


941 
GL_API
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁsQCOM
 (
GLöt
 *
num
, 
GLsizei
 
size
, 
GLuöt
 *
drivîC⁄åﬁs
);

942 
GL_API
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁSåögQCOM
 (
GLuöt
 
drivîC⁄åﬁ
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
drivîC⁄åﬁSåög
);

943 
GL_API
 
GL_APIENTRY
 
	`glE«bÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

944 
GL_API
 
GL_APIENTRY
 
	`glDißbÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

946 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSQCOMPROC
Ë(
	tGLöt
 *
	tnum
, 
	tGLsizei
 
	tsize
, 
	tGLuöt
 *
	tdrivîC⁄åﬁs
);

947 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSTRINGQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tdrivîC⁄åﬁSåög
);

948 (
	tGL_APIENTRYP
 
	tPFNGLENABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

949 (
	tGL_APIENTRYP
 
	tPFNGLDISABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

953 #i‚de‡
GL_QCOM_exãnded_gë


954 
	#GL_QCOM_exãnded_gë
 1

	)

955 #ifde‡
GL_GLEXT_PROTOTYPES


956 
GL_API
 
GL_APIENTRY
 
	`glExtGëTextuªsQCOM
 (
GLuöt
 *
ãxtuªs
, 
GLöt
 
maxTextuªs
, GLöà*
numTextuªs
);

957 
GL_API
 
GL_APIENTRY
 
	`glExtGëBuf„rsQCOM
 (
GLuöt
 *
buf„rs
, 
GLöt
 
maxBuf„rs
, GLöà*
numBuf„rs
);

958 
GL_API
 
GL_APIENTRY
 
	`glExtGëRídîbuf„rsQCOM
 (
GLuöt
 *
ªndîbuf„rs
, 
GLöt
 
maxRídîbuf„rs
, GLöà*
numRídîbuf„rs
);

959 
GL_API
 
GL_APIENTRY
 
	`glExtGëFømebuf„rsQCOM
 (
GLuöt
 *
‰amebuf„rs
, 
GLöt
 
maxFømebuf„rs
, GLöà*
numFømebuf„rs
);

960 
GL_API
 
GL_APIENTRY
 
	`glExtGëTexLevñP¨amëîivQCOM
 (
GLuöt
 
ãxtuª
, 
GLíum
 
Á˚
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

961 
GL_API
 
GL_APIENTRY
 
	`glExtTexObje˘SèãOvîrideiQCOM
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

962 
GL_API
 
GL_APIENTRY
 
	`glExtGëTexSubImageQCOM
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
ãxñs
);

963 
GL_API
 
GL_APIENTRY
 
	`glExtGëBuf„rPoöãrvQCOM
 (
GLíum
 
èrgë
, 
GLvoid
 **
∑øms
);

965 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXTURESQCOMPROC
Ë(
	tGLuöt
 *
	tãxtuªs
, 
	tGLöt
 
	tmaxTextuªs
, GLöà*
	tnumTextuªs
);

966 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tbuf„rs
, 
	tGLöt
 
	tmaxBuf„rs
, GLöà*
	tnumBuf„rs
);

967 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETRENDERBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tªndîbuf„rs
, 
	tGLöt
 
	tmaxRídîbuf„rs
, GLöà*
	tnumRídîbuf„rs
);

968 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETFRAMEBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	t‰amebuf„rs
, 
	tGLöt
 
	tmaxFømebuf„rs
, GLöà*
	tnumFømebuf„rs
);

969 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tÁ˚
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

970 (
	tGL_APIENTRYP
 
	tPFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

971 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXSUBIMAGEQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tãxñs
);

972 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERPOINTERVQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 **
	t∑øms
);

976 #i‚de‡
GL_QCOM_exãnded_gë2


977 
	#GL_QCOM_exãnded_gë2
 1

	)

978 #ifde‡
GL_GLEXT_PROTOTYPES


979 
GL_API
 
GL_APIENTRY
 
	`glExtGëShadîsQCOM
 (
GLuöt
 *
shadîs
, 
GLöt
 
maxShadîs
, GLöà*
numShadîs
);

980 
GL_API
 
GL_APIENTRY
 
	`glExtGëProgømsQCOM
 (
GLuöt
 *
¥ogøms
, 
GLöt
 
maxProgøms
, GLöà*
numProgøms
);

981 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glExtIsProgømBö¨yQCOM
 (
GLuöt
 
¥ogøm
);

982 
GL_API
 
GL_APIENTRY
 
	`glExtGëProgømBö¨ySour˚QCOM
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, 
GLch¨
 *
sour˚
, 
GLöt
 *
Àngth
);

984 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETSHADERSQCOMPROC
Ë(
	tGLuöt
 *
	tshadîs
, 
	tGLöt
 
	tmaxShadîs
, GLöà*
	tnumShadîs
);

985 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMSQCOMPROC
Ë(
	tGLuöt
 *
	t¥ogøms
, 
	tGLöt
 
	tmaxProgøms
, GLöà*
	tnumProgøms
);

986 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLEXTISPROGRAMBINARYQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

987 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, 
	tGLch¨
 *
	tsour˚
, 
	tGLöt
 *
	tÀngth
);

991 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


992 
	#GL_QCOM_≥rfm⁄_globÆ_mode
 1

	)

996 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


997 
	#GL_QCOM_wrôe⁄ly_ªndîög
 1

	)

1001 #i‚de‡
GL_QCOM_tûed_ªndîög


1002 
	#GL_QCOM_tûed_ªndîög
 1

	)

1003 #ifde‡
GL_GLEXT_PROTOTYPES


1004 
GL_API
 
GL_APIENTRY
 
	`glSèπTûögQCOM
 (
GLuöt
 
x
, GLuöà
y
, GLuöà
width
, GLuöà
height
, 
GLbôfõld
 
¥e£rveMask
);

1005 
GL_API
 
GL_APIENTRY
 
	`glEndTûögQCOM
 (
GLbôfõld
 
¥e£rveMask
);

1007 (
	tGL_APIENTRYP
 
	tPFNGLSTARTTILINGQCOMPROC
Ë(
	tGLuöt
 
	tx
, GLuöà
	ty
, GLuöà
	twidth
, GLuöà
	theight
, 
	tGLbôfõld
 
	t¥e£rveMask
);

1008 (
	tGL_APIENTRYP
 
	tPFNGLENDTILINGQCOMPROC
Ë(
	tGLbôfõld
 
	t¥e£rveMask
);

1011 #ifde‡
__˝lu•lus


1012 
	}
}

	@GLES/glplatform.h

1 #i‚de‡
__gÕœtf‹m_h_


2 
	#__gÕœtf‹m_h_


	)

20 
	~<KHR/khΩœtf‹m.h
>

22 #i‚de‡
GL_API


23 
	#GL_API
 
KHRONOS_APICALL


	)

26 #i‚de‡
GL_APIENTRY


27 
	#GL_APIENTRY
 
KHRONOS_APIENTRY


	)

	@GLES2/gl2.h

1 #i‚de‡
__gl2_h_


2 
	#__gl2_h_


	)

6 
	~<GLES2/gl2∂©f‹m.h
>

8 #ifde‡
__˝lu•lus


21 
	tGLvoid
;

22 
	tGLch¨
;

23 
	tGLíum
;

24 
	tGLboﬁón
;

25 
	tGLbôfõld
;

26 
khr⁄os_öt8_t
 
	tGLbyã
;

27 
	tGLsh‹t
;

28 
	tGLöt
;

29 
	tGLsizei
;

30 
khr⁄os_uöt8_t
 
	tGLubyã
;

31 
	tGLush‹t
;

32 
	tGLuöt
;

33 
khr⁄os_Êﬂt_t
 
	tGLÊﬂt
;

34 
khr⁄os_Êﬂt_t
 
	tGL˛ampf
;

35 
khr⁄os_öt32_t
 
	tGLfixed
;

38 
khr⁄os_öçå_t
 
	tGLöçå
;

39 
khr⁄os_ssize_t
 
	tGLsizeùå
;

42 
	#GL_ES_VERSION_2_0
 1

	)

45 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

46 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

47 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

50 
	#GL_FALSE
 0

	)

51 
	#GL_TRUE
 1

	)

54 
	#GL_POINTS
 0x0000

	)

55 
	#GL_LINES
 0x0001

	)

56 
	#GL_LINE_LOOP
 0x0002

	)

57 
	#GL_LINE_STRIP
 0x0003

	)

58 
	#GL_TRIANGLES
 0x0004

	)

59 
	#GL_TRIANGLE_STRIP
 0x0005

	)

60 
	#GL_TRIANGLE_FAN
 0x0006

	)

73 
	#GL_ZERO
 0

	)

74 
	#GL_ONE
 1

	)

75 
	#GL_SRC_COLOR
 0x0300

	)

76 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

77 
	#GL_SRC_ALPHA
 0x0302

	)

78 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

79 
	#GL_DST_ALPHA
 0x0304

	)

80 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

85 
	#GL_DST_COLOR
 0x0306

	)

86 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

87 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

94 
	#GL_FUNC_ADD
 0x8006

	)

95 
	#GL_BLEND_EQUATION
 0x8009

	)

96 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

97 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

100 
	#GL_FUNC_SUBTRACT
 0x800A

	)

101 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

104 
	#GL_BLEND_DST_RGB
 0x80C8

	)

105 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

106 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

107 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

108 
	#GL_CONSTANT_COLOR
 0x8001

	)

109 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

110 
	#GL_CONSTANT_ALPHA
 0x8003

	)

111 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

112 
	#GL_BLEND_COLOR
 0x8005

	)

115 
	#GL_ARRAY_BUFFER
 0x8892

	)

116 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

117 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

118 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

120 
	#GL_STREAM_DRAW
 0x88E0

	)

121 
	#GL_STATIC_DRAW
 0x88E4

	)

122 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

124 
	#GL_BUFFER_SIZE
 0x8764

	)

125 
	#GL_BUFFER_USAGE
 0x8765

	)

127 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

130 
	#GL_FRONT
 0x0404

	)

131 
	#GL_BACK
 0x0405

	)

132 
	#GL_FRONT_AND_BACK
 0x0408

	)

145 
	#GL_TEXTURE_2D
 0x0DE1

	)

146 
	#GL_CULL_FACE
 0x0B44

	)

147 
	#GL_BLEND
 0x0BE2

	)

148 
	#GL_DITHER
 0x0BD0

	)

149 
	#GL_STENCIL_TEST
 0x0B90

	)

150 
	#GL_DEPTH_TEST
 0x0B71

	)

151 
	#GL_SCISSOR_TEST
 0x0C11

	)

152 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

153 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

154 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

157 
	#GL_NO_ERROR
 0

	)

158 
	#GL_INVALID_ENUM
 0x0500

	)

159 
	#GL_INVALID_VALUE
 0x0501

	)

160 
	#GL_INVALID_OPERATION
 0x0502

	)

161 
	#GL_OUT_OF_MEMORY
 0x0505

	)

164 
	#GL_CW
 0x0900

	)

165 
	#GL_CCW
 0x0901

	)

168 
	#GL_LINE_WIDTH
 0x0B21

	)

169 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

170 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

171 
	#GL_CULL_FACE_MODE
 0x0B45

	)

172 
	#GL_FRONT_FACE
 0x0B46

	)

173 
	#GL_DEPTH_RANGE
 0x0B70

	)

174 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

175 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

176 
	#GL_DEPTH_FUNC
 0x0B74

	)

177 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

178 
	#GL_STENCIL_FUNC
 0x0B92

	)

179 
	#GL_STENCIL_FAIL
 0x0B94

	)

180 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

181 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

182 
	#GL_STENCIL_REF
 0x0B97

	)

183 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

184 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

185 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

186 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

187 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

188 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

189 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

190 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

191 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

192 
	#GL_VIEWPORT
 0x0BA2

	)

193 
	#GL_SCISSOR_BOX
 0x0C10

	)

195 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

196 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

197 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

198 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

199 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

200 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

201 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

202 
	#GL_RED_BITS
 0x0D52

	)

203 
	#GL_GREEN_BITS
 0x0D53

	)

204 
	#GL_BLUE_BITS
 0x0D54

	)

205 
	#GL_ALPHA_BITS
 0x0D55

	)

206 
	#GL_DEPTH_BITS
 0x0D56

	)

207 
	#GL_STENCIL_BITS
 0x0D57

	)

208 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

210 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

211 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

212 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

213 
	#GL_SAMPLES
 0x80A9

	)

214 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

215 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

223 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

224 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

227 
	#GL_DONT_CARE
 0x1100

	)

228 
	#GL_FASTEST
 0x1101

	)

229 
	#GL_NICEST
 0x1102

	)

232 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

235 
	#GL_BYTE
 0x1400

	)

236 
	#GL_UNSIGNED_BYTE
 0x1401

	)

237 
	#GL_SHORT
 0x1402

	)

238 
	#GL_UNSIGNED_SHORT
 0x1403

	)

239 
	#GL_INT
 0x1404

	)

240 
	#GL_UNSIGNED_INT
 0x1405

	)

241 
	#GL_FLOAT
 0x1406

	)

242 
	#GL_FIXED
 0x140C

	)

245 
	#GL_DEPTH_COMPONENT
 0x1902

	)

246 
	#GL_ALPHA
 0x1906

	)

247 
	#GL_RGB
 0x1907

	)

248 
	#GL_RGBA
 0x1908

	)

249 
	#GL_LUMINANCE
 0x1909

	)

250 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

254 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

255 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

256 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

259 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

260 
	#GL_VERTEX_SHADER
 0x8B31

	)

261 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

262 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

263 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

264 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

265 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

266 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

267 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

268 
	#GL_SHADER_TYPE
 0x8B4F

	)

269 
	#GL_DELETE_STATUS
 0x8B80

	)

270 
	#GL_LINK_STATUS
 0x8B82

	)

271 
	#GL_VALIDATE_STATUS
 0x8B83

	)

272 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

273 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

274 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

275 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

276 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

277 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

278 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

281 
	#GL_NEVER
 0x0200

	)

282 
	#GL_LESS
 0x0201

	)

283 
	#GL_EQUAL
 0x0202

	)

284 
	#GL_LEQUAL
 0x0203

	)

285 
	#GL_GREATER
 0x0204

	)

286 
	#GL_NOTEQUAL
 0x0205

	)

287 
	#GL_GEQUAL
 0x0206

	)

288 
	#GL_ALWAYS
 0x0207

	)

292 
	#GL_KEEP
 0x1E00

	)

293 
	#GL_REPLACE
 0x1E01

	)

294 
	#GL_INCR
 0x1E02

	)

295 
	#GL_DECR
 0x1E03

	)

296 
	#GL_INVERT
 0x150A

	)

297 
	#GL_INCR_WRAP
 0x8507

	)

298 
	#GL_DECR_WRAP
 0x8508

	)

301 
	#GL_VENDOR
 0x1F00

	)

302 
	#GL_RENDERER
 0x1F01

	)

303 
	#GL_VERSION
 0x1F02

	)

304 
	#GL_EXTENSIONS
 0x1F03

	)

307 
	#GL_NEAREST
 0x2600

	)

308 
	#GL_LINEAR
 0x2601

	)

313 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

314 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

315 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

316 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

319 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

320 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

321 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

322 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

326 
	#GL_TEXTURE
 0x1702

	)

328 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

329 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

330 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

331 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

332 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

333 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

334 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

335 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

336 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

339 
	#GL_TEXTURE0
 0x84C0

	)

340 
	#GL_TEXTURE1
 0x84C1

	)

341 
	#GL_TEXTURE2
 0x84C2

	)

342 
	#GL_TEXTURE3
 0x84C3

	)

343 
	#GL_TEXTURE4
 0x84C4

	)

344 
	#GL_TEXTURE5
 0x84C5

	)

345 
	#GL_TEXTURE6
 0x84C6

	)

346 
	#GL_TEXTURE7
 0x84C7

	)

347 
	#GL_TEXTURE8
 0x84C8

	)

348 
	#GL_TEXTURE9
 0x84C9

	)

349 
	#GL_TEXTURE10
 0x84CA

	)

350 
	#GL_TEXTURE11
 0x84CB

	)

351 
	#GL_TEXTURE12
 0x84CC

	)

352 
	#GL_TEXTURE13
 0x84CD

	)

353 
	#GL_TEXTURE14
 0x84CE

	)

354 
	#GL_TEXTURE15
 0x84CF

	)

355 
	#GL_TEXTURE16
 0x84D0

	)

356 
	#GL_TEXTURE17
 0x84D1

	)

357 
	#GL_TEXTURE18
 0x84D2

	)

358 
	#GL_TEXTURE19
 0x84D3

	)

359 
	#GL_TEXTURE20
 0x84D4

	)

360 
	#GL_TEXTURE21
 0x84D5

	)

361 
	#GL_TEXTURE22
 0x84D6

	)

362 
	#GL_TEXTURE23
 0x84D7

	)

363 
	#GL_TEXTURE24
 0x84D8

	)

364 
	#GL_TEXTURE25
 0x84D9

	)

365 
	#GL_TEXTURE26
 0x84DA

	)

366 
	#GL_TEXTURE27
 0x84DB

	)

367 
	#GL_TEXTURE28
 0x84DC

	)

368 
	#GL_TEXTURE29
 0x84DD

	)

369 
	#GL_TEXTURE30
 0x84DE

	)

370 
	#GL_TEXTURE31
 0x84DF

	)

371 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

374 
	#GL_REPEAT
 0x2901

	)

375 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

376 
	#GL_MIRRORED_REPEAT
 0x8370

	)

379 
	#GL_FLOAT_VEC2
 0x8B50

	)

380 
	#GL_FLOAT_VEC3
 0x8B51

	)

381 
	#GL_FLOAT_VEC4
 0x8B52

	)

382 
	#GL_INT_VEC2
 0x8B53

	)

383 
	#GL_INT_VEC3
 0x8B54

	)

384 
	#GL_INT_VEC4
 0x8B55

	)

385 
	#GL_BOOL
 0x8B56

	)

386 
	#GL_BOOL_VEC2
 0x8B57

	)

387 
	#GL_BOOL_VEC3
 0x8B58

	)

388 
	#GL_BOOL_VEC4
 0x8B59

	)

389 
	#GL_FLOAT_MAT2
 0x8B5A

	)

390 
	#GL_FLOAT_MAT3
 0x8B5B

	)

391 
	#GL_FLOAT_MAT4
 0x8B5C

	)

392 
	#GL_SAMPLER_2D
 0x8B5E

	)

393 
	#GL_SAMPLER_CUBE
 0x8B60

	)

396 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

397 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

398 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

399 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

400 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

401 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

402 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

405 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

406 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

409 
	#GL_COMPILE_STATUS
 0x8B81

	)

410 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

411 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

412 
	#GL_SHADER_COMPILER
 0x8DFA

	)

415 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

416 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

419 
	#GL_LOW_FLOAT
 0x8DF0

	)

420 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

421 
	#GL_HIGH_FLOAT
 0x8DF2

	)

422 
	#GL_LOW_INT
 0x8DF3

	)

423 
	#GL_MEDIUM_INT
 0x8DF4

	)

424 
	#GL_HIGH_INT
 0x8DF5

	)

427 
	#GL_FRAMEBUFFER
 0x8D40

	)

428 
	#GL_RENDERBUFFER
 0x8D41

	)

430 
	#GL_RGBA4
 0x8056

	)

431 
	#GL_RGB5_A1
 0x8057

	)

432 
	#GL_RGB565
 0x8D62

	)

433 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

434 
	#GL_STENCIL_INDEX
 0x1901

	)

435 
	#GL_STENCIL_INDEX8
 0x8D48

	)

437 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

438 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

439 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

440 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

441 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

442 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

443 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

444 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

445 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

447 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

448 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

449 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

450 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

452 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

453 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

454 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

456 
	#GL_NONE
 0

	)

458 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

459 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

460 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

461 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
 0x8CD9

	)

462 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

464 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

465 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

466 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

468 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

474 
GL_APICALL
 
GL_APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

475 
GL_APICALL
 
GL_APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

476 
GL_APICALL
 
GL_APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
* 
«me
);

477 
GL_APICALL
 
GL_APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

478 
GL_APICALL
 
GL_APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

479 
GL_APICALL
 
GL_APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

480 
GL_APICALL
 
GL_APIENTRY
 
glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

481 
GL_APICALL
 
GL_APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

482 
GL_APICALL
 
GL_APIENTRY
 
glBÀndEqu©i⁄
 ( 
GLíum
 
mode
 );

483 
GL_APICALL
 
GL_APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

484 
GL_APICALL
 
GL_APIENTRY
 
glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

485 
GL_APICALL
 
GL_APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

486 
GL_APICALL
 
GL_APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
* 
d©a
, GLíum 
ußge
);

487 
GL_APICALL
 
GL_APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
* 
d©a
);

488 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

489 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨
 (
GLbôfõld
 
mask
);

490 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Cﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

491 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Dïthf
 (
GL˛ampf
 
dïth
);

492 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Sãncû
 (
GLöt
 
s
);

493 
GL_APICALL
 
GL_APIENTRY
 
glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

494 
GL_APICALL
 
GL_APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

495 
GL_APICALL
 
GL_APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

496 
GL_APICALL
 
GL_APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

497 
GL_APICALL
 
GL_APIENTRY
 
glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

498 
GL_APICALL
 
GL_APIENTRY
 
glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

499 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
glCª©eProgøm
 ();

500 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

501 
GL_APICALL
 
GL_APIENTRY
 
glCuŒFa˚
 (
GLíum
 
mode
);

502 
GL_APICALL
 
GL_APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
buf„rs
);

503 
GL_APICALL
 
GL_APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
‰amebuf„rs
);

504 
GL_APICALL
 
GL_APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

505 
GL_APICALL
 
GL_APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ªndîbuf„rs
);

506 
GL_APICALL
 
GL_APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

507 
GL_APICALL
 
GL_APIENTRY
 
glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ãxtuªs
);

508 
GL_APICALL
 
GL_APIENTRY
 
glDïthFunc
 (
GLíum
 
func
);

509 
GL_APICALL
 
GL_APIENTRY
 
glDïthMask
 (
GLboﬁón
 
Êag
);

510 
GL_APICALL
 
GL_APIENTRY
 
glDïthR™gef
 (
GL˛ampf
 
zNór
, GL˛amp‡
zF¨
);

511 
GL_APICALL
 
GL_APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

512 
GL_APICALL
 
GL_APIENTRY
 
glDißbÀ
 (
GLíum
 
ˇp
);

513 
GL_APICALL
 
GL_APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

514 
GL_APICALL
 
GL_APIENTRY
 
glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

515 
GL_APICALL
 
GL_APIENTRY
 
glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
ödi˚s
);

516 
GL_APICALL
 
GL_APIENTRY
 
glE«bÀ
 (
GLíum
 
ˇp
);

517 
GL_APICALL
 
GL_APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

518 
GL_APICALL
 
GL_APIENTRY
 
glFöish
 ();

519 
GL_APICALL
 
GL_APIENTRY
 
glFlush
 ();

520 
GL_APICALL
 
GL_APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

521 
GL_APICALL
 
GL_APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

522 
GL_APICALL
 
GL_APIENTRY
 
glFr⁄tFa˚
 (
GLíum
 
mode
);

523 
GL_APICALL
 
GL_APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
buf„rs
);

524 
GL_APICALL
 
GL_APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

525 
GL_APICALL
 
GL_APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
‰amebuf„rs
);

526 
GL_APICALL
 
GL_APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
ªndîbuf„rs
);

527 
GL_APICALL
 
GL_APIENTRY
 
glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
* 
ãxtuªs
);

528 
GL_APICALL
 
GL_APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLöt
* 
size
, 
GLíum
* 
ty≥
, 
GLch¨
* 
«me
);

529 
GL_APICALL
 
GL_APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLöt
* 
size
, 
GLíum
* 
ty≥
, 
GLch¨
* 
«me
);

530 
GL_APICALL
 
GL_APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxcou¡
, GLsizei* 
cou¡
, GLuöt* 
shadîs
);

531 
GL_APICALL
 
GLöt
 
GL_APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
* 
«me
);

532 
GL_APICALL
 
GL_APIENTRY
 
glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
* 
∑øms
);

533 
GL_APICALL
 
GL_APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

534 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
glGëEº‹
 ();

535 
GL_APICALL
 
GL_APIENTRY
 
glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
* 
∑øms
);

536 
GL_APICALL
 
GL_APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

537 
GL_APICALL
 
GL_APIENTRY
 
glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

538 
GL_APICALL
 
GL_APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

539 
GL_APICALL
 
GL_APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
öfﬁog
);

540 
GL_APICALL
 
GL_APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

541 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

542 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
öfﬁog
);

543 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
* 
ønge
, GLöt* 
¥ecisi⁄
);

544 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
sour˚
);

545 
GL_APICALL
 c⁄° 
GLubyã
* 
GL_APIENTRY
 
glGëSåög
 (
GLíum
 
«me
);

546 
GL_APICALL
 
GL_APIENTRY
 
glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
* 
∑øms
);

547 
GL_APICALL
 
GL_APIENTRY
 
glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

548 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
* 
∑øms
);

549 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöt* 
∑øms
);

550 
GL_APICALL
 
GLöt
 
GL_APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
* 
«me
);

551 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
* 
∑øms
);

552 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

553 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
** 
poöãr
);

554 
GL_APICALL
 
GL_APIENTRY
 
glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

555 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

556 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsE«bÀd
 (
GLíum
 
ˇp
);

557 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

558 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

559 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

560 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

561 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsTextuª
 (
GLuöt
 
ãxtuª
);

562 
GL_APICALL
 
GL_APIENTRY
 
glLöeWidth
 (
GLÊﬂt
 
width
);

563 
GL_APICALL
 
GL_APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

564 
GL_APICALL
 
GL_APIENTRY
 
glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

565 
GL_APICALL
 
GL_APIENTRY
 
glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

566 
GL_APICALL
 
GL_APIENTRY
 
glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLvoid
* 
pixñs
);

567 
GL_APICALL
 
GL_APIENTRY
 
glRñó£ShadîCompûî
 ();

568 
GL_APICALL
 
GL_APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

569 
GL_APICALL
 
GL_APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

570 
GL_APICALL
 
GL_APIENTRY
 
glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

571 
GL_APICALL
 
GL_APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° 
GLvoid
* 
bö¨y
, GLsizeò
Àngth
);

572 
GL_APICALL
 
GL_APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
** 
°rög
, c⁄° 
GLöt
* 
Àngth
);

573 
GL_APICALL
 
GL_APIENTRY
 
glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

574 
GL_APICALL
 
GL_APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

575 
GL_APICALL
 
GL_APIENTRY
 
glSãncûMask
 (
GLuöt
 
mask
);

576 
GL_APICALL
 
GL_APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

577 
GL_APICALL
 
GL_APIENTRY
 
glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

578 
GL_APICALL
 
GL_APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

579 
GL_APICALL
 
GL_APIENTRY
 
glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

580 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

581 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
* 
∑øms
);

582 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

583 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
* 
∑øms
);

584 
GL_APICALL
 
GL_APIENTRY
 
glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

585 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
);

586 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

587 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
x
);

588 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

589 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

590 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

591 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
);

592 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

593 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

594 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

595 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
);

596 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

597 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

598 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

599 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
, GLöà
w
);

600 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

601 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

602 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

603 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

604 
GL_APICALL
 
GL_APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

605 
GL_APICALL
 
GL_APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

606 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
);

607 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

608 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

609 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

610 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

611 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

612 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

613 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

614 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödx
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
* 
±r
);

615 
GL_APICALL
 
GL_APIENTRY
 
glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

617 #ifde‡
__˝lu•lus


	@GLES2/gl2ext.h

1 #i‚de‡
__gl2ext_h_


2 
	#__gl2ext_h_


	)

6 
	~<GLES2/gl2.h
>

8 #ifde‡
__˝lu•lus


17 #i‚de‡
GL_APIENTRYP


18 
	#GL_APIENTRYP
 
GL_APIENTRY
*

	)

26 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


27 
	#GL_ETC1_RGB8_OES
 0x8D64

	)

31 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


32 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

33 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

34 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

35 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

36 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

37 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

38 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

39 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

40 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

41 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

45 #i‚de‡
GL_OES_dïth24


46 
	#GL_DEPTH_COMPONENT24_OES
 0x81A6

	)

50 #i‚de‡
GL_OES_dïth32


51 
	#GL_DEPTH_COMPONENT32_OES
 0x81A7

	)

58 #i‚de‡
GL_OES_EGL_image


59 * 
	tGLeglImageOES
;

63 #i‚de‡
GL_OES_ñemít_ödex_uöt


64 
	#GL_UNSIGNED_INT
 0x1405

	)

68 #i‚de‡
GL_OES_gë_¥ogøm_bö¨y


69 
	#GL_PROGRAM_BINARY_LENGTH_OES
 0x8741

	)

70 
	#GL_NUM_PROGRAM_BINARY_FORMATS_OES
 0x87FE

	)

71 
	#GL_PROGRAM_BINARY_FORMATS_OES
 0x87FF

	)

75 #i‚de‡
GL_OES_m≠buf„r


76 
	#GL_WRITE_ONLY_OES
 0x88B9

	)

77 
	#GL_BUFFER_ACCESS_OES
 0x88BB

	)

78 
	#GL_BUFFER_MAPPED_OES
 0x88BC

	)

79 
	#GL_BUFFER_MAP_POINTER_OES
 0x88BD

	)

83 #i‚de‡
GL_OES_∑cked_dïth_°ícû


84 
	#GL_DEPTH_STENCIL_OES
 0x84F9

	)

85 
	#GL_UNSIGNED_INT_24_8_OES
 0x84FA

	)

86 
	#GL_DEPTH24_STENCIL8_OES
 0x88F0

	)

90 #i‚de‡
GL_OES_rgb8_rgba8


91 
	#GL_RGB8_OES
 0x8051

	)

92 
	#GL_RGBA8_OES
 0x8058

	)

96 #i‚de‡
GL_OES_°™d¨d_dîiv©ives


97 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES
 0x8B8B

	)

101 #i‚de‡
GL_OES_°ícû1


102 
	#GL_STENCIL_INDEX1_OES
 0x8D46

	)

106 #i‚de‡
GL_OES_°ícû4


107 
	#GL_STENCIL_INDEX4_OES
 0x8D47

	)

111 #i‚de‡
GL_OES_ãxtuª_3D


112 
	#GL_TEXTURE_WRAP_R_OES
 0x8072

	)

113 
	#GL_TEXTURE_3D_OES
 0x806F

	)

114 
	#GL_TEXTURE_BINDING_3D_OES
 0x806A

	)

115 
	#GL_MAX_3D_TEXTURE_SIZE_OES
 0x8073

	)

116 
	#GL_SAMPLER_3D_OES
 0x8B5F

	)

117 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES
 0x8CD4

	)

127 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt


128 
	#GL_HALF_FLOAT_OES
 0x8D61

	)

138 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


139 
	#GL_VERTEX_ARRAY_BINDING_OES
 0x85B5

	)

146 #i‚de‡
GL_OES_vîãx_ty≥_10_10_10_2


147 
	#GL_UNSIGNED_INT_10_10_10_2_OES
 0x8DF6

	)

148 
	#GL_INT_10_10_10_2_OES
 0x8DF7

	)

152 #i‚de‡
GL_OES_EGL_image_exã∫Æ


153 
	#GL_TEXTURE_EXTERNAL_OES
 0x8D65

	)

154 
	#GL_SAMPLER_EXTERNAL_OES
 0x8D66

	)

155 
	#GL_TEXTURE_BINDING_EXTERNAL_OES
 0x8D67

	)

156 
	#GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES
 0x8D68

	)

164 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


165 
	#GL_3DC_X_AMD
 0x87F9

	)

166 
	#GL_3DC_XY_AMD
 0x87FA

	)

170 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


171 
	#GL_ATC_RGB_AMD
 0x8C92

	)

172 
	#GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
 0x8C93

	)

173 
	#GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD
 0x87EE

	)

177 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


178 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

179 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

180 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

181 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

182 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

183 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

184 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

188 #i‚de‡
GL_AMD_¥ogøm_bö¨y_Z400


189 
	#GL_Z400_BINARY_AMD
 0x8740

	)

197 #i‚de‡
GL_EXT_bÀnd_mömax


198 
	#GL_MIN_EXT
 0x8007

	)

199 
	#GL_MAX_EXT
 0x8008

	)

203 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


204 
	#GL_COLOR_EXT
 0x1800

	)

205 
	#GL_DEPTH_EXT
 0x1801

	)

206 
	#GL_STENCIL_EXT
 0x1802

	)

213 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


214 
	#GL_BGRA_EXT
 0x80E1

	)

215 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
 0x8365

	)

216 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
 0x8366

	)

220 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


221 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

222 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

226 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


227 
	#GL_BGRA_EXT
 0x80E1

	)

231 #i‚de‡
GL_EXT_ãxtuª_ty≥_2_10_10_10_REV


232 
	#GL_UNSIGNED_INT_2_10_10_10_REV_EXT
 0x8368

	)

236 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


237 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

238 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

246 #i‚de‡
GL_IMG_¥ogøm_bö¨y


247 
	#GL_SGX_PROGRAM_BINARY_IMG
 0x9130

	)

251 #i‚de‡
GL_IMG_ªad_f‹m©


252 
	#GL_BGRA_IMG
 0x80E1

	)

253 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG
 0x8365

	)

257 #i‚de‡
GL_IMG_shadî_bö¨y


258 
	#GL_SGX_BINARY_IMG
 0x8C0A

	)

262 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


263 
	#GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
 0x8C00

	)

264 
	#GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
 0x8C01

	)

265 
	#GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
 0x8C02

	)

266 
	#GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
 0x8C03

	)

270 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


271 
	#GL_RENDERBUFFER_SAMPLES_IMG
 0x9133

	)

272 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG
 0x9134

	)

273 
	#GL_MAX_SAMPLES_IMG
 0x9135

	)

274 
	#GL_TEXTURE_SAMPLES_IMG
 0x9136

	)

282 #i‚de‡
GL_NV_„n˚


283 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

284 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

285 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

289 #i‚de‡
GL_NV_covîage_ßm∂e


290 
	#GL_COVERAGE_COMPONENT_NV
 0x8ED0

	)

291 
	#GL_COVERAGE_COMPONENT4_NV
 0x8ED1

	)

292 
	#GL_COVERAGE_ATTACHMENT_NV
 0x8ED2

	)

293 
	#GL_COVERAGE_BUFFERS_NV
 0x8ED3

	)

294 
	#GL_COVERAGE_SAMPLES_NV
 0x8ED4

	)

295 
	#GL_COVERAGE_ALL_FRAGMENTS_NV
 0x8ED5

	)

296 
	#GL_COVERAGE_EDGE_FRAGMENTS_NV
 0x8ED6

	)

297 
	#GL_COVERAGE_AUTOMATIC_NV
 0x8ED7

	)

298 
	#GL_COVERAGE_BUFFER_BIT_NV
 0x8000

	)

302 #i‚de‡
GL_NV_dïth_n⁄löór


303 
	#GL_DEPTH_COMPONENT16_NONLINEAR_NV
 0x8E2C

	)

314 #i‚de‡
GL_QCOM_exãnded_gë


315 
	#GL_TEXTURE_WIDTH_QCOM
 0x8BD2

	)

316 
	#GL_TEXTURE_HEIGHT_QCOM
 0x8BD3

	)

317 
	#GL_TEXTURE_DEPTH_QCOM
 0x8BD4

	)

318 
	#GL_TEXTURE_INTERNAL_FORMAT_QCOM
 0x8BD5

	)

319 
	#GL_TEXTURE_FORMAT_QCOM
 0x8BD6

	)

320 
	#GL_TEXTURE_TYPE_QCOM
 0x8BD7

	)

321 
	#GL_TEXTURE_IMAGE_VALID_QCOM
 0x8BD8

	)

322 
	#GL_TEXTURE_NUM_LEVELS_QCOM
 0x8BD9

	)

323 
	#GL_TEXTURE_TARGET_QCOM
 0x8BDA

	)

324 
	#GL_TEXTURE_OBJECT_VALID_QCOM
 0x8BDB

	)

325 
	#GL_STATE_RESTORE
 0x8BDC

	)

332 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


333 
	#GL_PERFMON_GLOBAL_MODE_QCOM
 0x8FA0

	)

337 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


338 
	#GL_WRITEONLY_RENDERING_QCOM
 0x8823

	)

342 #i‚de‡
GL_QCOM_tûed_ªndîög


343 
	#GL_COLOR_BUFFER_BIT0_QCOM
 0x00000001

	)

344 
	#GL_COLOR_BUFFER_BIT1_QCOM
 0x00000002

	)

345 
	#GL_COLOR_BUFFER_BIT2_QCOM
 0x00000004

	)

346 
	#GL_COLOR_BUFFER_BIT3_QCOM
 0x00000008

	)

347 
	#GL_COLOR_BUFFER_BIT4_QCOM
 0x00000010

	)

348 
	#GL_COLOR_BUFFER_BIT5_QCOM
 0x00000020

	)

349 
	#GL_COLOR_BUFFER_BIT6_QCOM
 0x00000040

	)

350 
	#GL_COLOR_BUFFER_BIT7_QCOM
 0x00000080

	)

351 
	#GL_DEPTH_BUFFER_BIT0_QCOM
 0x00000100

	)

352 
	#GL_DEPTH_BUFFER_BIT1_QCOM
 0x00000200

	)

353 
	#GL_DEPTH_BUFFER_BIT2_QCOM
 0x00000400

	)

354 
	#GL_DEPTH_BUFFER_BIT3_QCOM
 0x00000800

	)

355 
	#GL_DEPTH_BUFFER_BIT4_QCOM
 0x00001000

	)

356 
	#GL_DEPTH_BUFFER_BIT5_QCOM
 0x00002000

	)

357 
	#GL_DEPTH_BUFFER_BIT6_QCOM
 0x00004000

	)

358 
	#GL_DEPTH_BUFFER_BIT7_QCOM
 0x00008000

	)

359 
	#GL_STENCIL_BUFFER_BIT0_QCOM
 0x00010000

	)

360 
	#GL_STENCIL_BUFFER_BIT1_QCOM
 0x00020000

	)

361 
	#GL_STENCIL_BUFFER_BIT2_QCOM
 0x00040000

	)

362 
	#GL_STENCIL_BUFFER_BIT3_QCOM
 0x00080000

	)

363 
	#GL_STENCIL_BUFFER_BIT4_QCOM
 0x00100000

	)

364 
	#GL_STENCIL_BUFFER_BIT5_QCOM
 0x00200000

	)

365 
	#GL_STENCIL_BUFFER_BIT6_QCOM
 0x00400000

	)

366 
	#GL_STENCIL_BUFFER_BIT7_QCOM
 0x00800000

	)

367 
	#GL_MULTISAMPLE_BUFFER_BIT0_QCOM
 0x01000000

	)

368 
	#GL_MULTISAMPLE_BUFFER_BIT1_QCOM
 0x02000000

	)

369 
	#GL_MULTISAMPLE_BUFFER_BIT2_QCOM
 0x04000000

	)

370 
	#GL_MULTISAMPLE_BUFFER_BIT3_QCOM
 0x08000000

	)

371 
	#GL_MULTISAMPLE_BUFFER_BIT4_QCOM
 0x10000000

	)

372 
	#GL_MULTISAMPLE_BUFFER_BIT5_QCOM
 0x20000000

	)

373 
	#GL_MULTISAMPLE_BUFFER_BIT6_QCOM
 0x40000000

	)

374 
	#GL_MULTISAMPLE_BUFFER_BIT7_QCOM
 0x80000000

	)

386 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


387 
	#GL_OES_com¥es£d_ETC1_RGB8_ãxtuª
 1

	)

391 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


392 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

396 #i‚de‡
GL_OES_dïth24


397 
	#GL_OES_dïth24
 1

	)

401 #i‚de‡
GL_OES_dïth32


402 
	#GL_OES_dïth32
 1

	)

406 #i‚de‡
GL_OES_dïth_ãxtuª


407 
	#GL_OES_dïth_ãxtuª
 1

	)

411 #i‚de‡
GL_OES_EGL_image


412 
	#GL_OES_EGL_image
 1

	)

413 #ifde‡
GL_GLEXT_PROTOTYPES


414 
GL_APICALL
 
GL_APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

415 
GL_APICALL
 
GL_APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

417 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

418 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

422 #i‚de‡
GL_OES_ñemít_ödex_uöt


423 
	#GL_OES_ñemít_ödex_uöt
 1

	)

427 #i‚de‡
GL_OES_fbo_ªndî_mùm≠


428 
	#GL_OES_fbo_ªndî_mùm≠
 1

	)

432 #i‚de‡
GL_OES_‰agmít_¥ecisi⁄_high


433 
	#GL_OES_‰agmít_¥ecisi⁄_high
 1

	)

437 #i‚de‡
GL_OES_gë_¥ogøm_bö¨y


438 
	#GL_OES_gë_¥ogøm_bö¨y
 1

	)

439 #ifde‡
GL_GLEXT_PROTOTYPES


440 
GL_APICALL
 
GL_APIENTRY
 
	`glGëProgømBö¨yOES
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, 
GLvoid
 *
bö¨y
);

441 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømBö¨yOES
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° 
GLvoid
 *
bö¨y
, 
GLöt
 
Àngth
);

443 (
	tGL_APIENTRYP
 
	tPFNGLGETPROGRAMBINARYOESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
 *
	tbö¨y
);

444 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMBINARYOESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, 
	tGLöt
 
	tÀngth
);

448 #i‚de‡
GL_OES_m≠buf„r


449 
	#GL_OES_m≠buf„r
 1

	)

450 #ifde‡
GL_GLEXT_PROTOTYPES


451 
GL_APICALL
 * 
GL_APIENTRY
 
	`glM≠Buf„rOES
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

452 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glUnm≠Buf„rOES
 (
GLíum
 
èrgë
);

453 
GL_APICALL
 
GL_APIENTRY
 
	`glGëBuf„rPoöãrvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
** 
∑øms
);

455 * (
	tGL_APIENTRYP
 
	tPFNGLMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

456 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLUNMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
);

457 (
	tGL_APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
** 
	t∑øms
);

461 #i‚de‡
GL_OES_∑cked_dïth_°ícû


462 
	#GL_OES_∑cked_dïth_°ícû
 1

	)

466 #i‚de‡
GL_OES_rgb8_rgba8


467 
	#GL_OES_rgb8_rgba8
 1

	)

471 #i‚de‡
GL_OES_°™d¨d_dîiv©ives


472 
	#GL_OES_°™d¨d_dîiv©ives
 1

	)

476 #i‚de‡
GL_OES_°ícû1


477 
	#GL_OES_°ícû1
 1

	)

481 #i‚de‡
GL_OES_°ícû4


482 
	#GL_OES_°ícû4
 1

	)

486 #i‚de‡
GL_OES_ãxtuª_3D


487 
	#GL_OES_ãxtuª_3D
 1

	)

488 #ifde‡
GL_GLEXT_PROTOTYPES


489 
GL_APICALL
 
GL_APIENTRY
 
	`glTexImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

490 
GL_APICALL
 
GL_APIENTRY
 
	`glTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

491 
GL_APICALL
 
GL_APIENTRY
 
	`glC›yTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

492 
GL_APICALL
 
GL_APIENTRY
 
	`glCom¥es£dTexImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

493 
GL_APICALL
 
GL_APIENTRY
 
	`glCom¥es£dTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

494 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª3DOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

496 (
	tGL_APIENTRYP
 
	tPFNGLTEXIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	tpixñs
);

497 (
	tGL_APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	tpixñs
);

498 (
	tGL_APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

499 (
	tGL_APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
* 
	td©a
);

500 (
	tGL_APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
* 
	td©a
);

501 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DOES
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

505 #i‚de‡
GL_OES_ãxtuª_Êﬂt


506 
	#GL_OES_ãxtuª_Êﬂt
 1

	)

510 #i‚de‡
GL_OES_ãxtuª_Êﬂt_löór


511 
	#GL_OES_ãxtuª_Êﬂt_löór
 1

	)

515 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt


516 
	#GL_OES_ãxtuª_hÆf_Êﬂt
 1

	)

520 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt_löór


521 
	#GL_OES_ãxtuª_hÆf_Êﬂt_löór
 1

	)

525 #i‚de‡
GL_OES_ãxtuª_≈Ÿ


526 
	#GL_OES_ãxtuª_≈Ÿ
 1

	)

530 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


531 
	#GL_OES_vîãx_¨øy_obje˘
 1

	)

532 #ifde‡
GL_GLEXT_PROTOTYPES


533 
GL_APICALL
 
GL_APIENTRY
 
	`glBödVîãxAºayOES
 (
GLuöt
 
¨øy
);

534 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeVîãxAºaysOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

535 
GL_APICALL
 
GL_APIENTRY
 
	`glGíVîãxAºaysOES
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

536 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsVîãxAºayOES
 (
GLuöt
 
¨øy
);

538 (
	tGL_APIENTRYP
 
	tPFNGLBINDVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

539 (
	tGL_APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

540 (
	tGL_APIENTRYP
 
	tPFNGLGENVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

541 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

545 #i‚de‡
GL_OES_vîãx_hÆf_Êﬂt


546 
	#GL_OES_vîãx_hÆf_Êﬂt
 1

	)

550 #i‚de‡
GL_OES_vîãx_ty≥_10_10_10_2


551 
	#GL_OES_vîãx_ty≥_10_10_10_2
 1

	)

555 #i‚de‡
GL_OES_EGL_image_exã∫Æ


556 
	#GL_OES_EGL_image_exã∫Æ
 1

	)

564 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


565 
	#GL_AMD_com¥es£d_3DC_ãxtuª
 1

	)

569 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


570 
	#GL_AMD_com¥es£d_ATC_ãxtuª
 1

	)

574 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


575 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

576 #ifde‡
GL_GLEXT_PROTOTYPES


577 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

578 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

579 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

580 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

581 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, 
GLvoid
 *
d©a
);

582 
GL_APICALL
 
GL_APIENTRY
 
	`glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

583 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

584 
GL_APICALL
 
GL_APIENTRY
 
	`glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îsLi°
);

585 
GL_APICALL
 
GL_APIENTRY
 
	`glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

586 
GL_APICALL
 
GL_APIENTRY
 
	`glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

587 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

589 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

590 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

591 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

592 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

593 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
 *
	td©a
);

594 (
	tGL_APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

595 (
	tGL_APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

596 (
	tGL_APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îsLi°
);

597 (
	tGL_APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

598 (
	tGL_APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

599 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

603 #i‚de‡
GL_AMD_¥ogøm_bö¨y_Z400


604 
	#GL_AMD_¥ogøm_bö¨y_Z400
 1

	)

612 #i‚de‡
GL_EXT_bÀnd_mömax


613 
	#GL_EXT_bÀnd_mömax
 1

	)

617 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


618 
	#GL_EXT_disˇrd_‰amebuf„r
 1

	)

619 #ifde‡
GL_GLEXT_PROTOTYPES


620 
GL_APICALL
 
GL_APIENTRY
 
	`glDisˇrdFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

622 (
	tGL_APIENTRYP
 
	tPFNGLDISCARDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

625 #i‚de‡
GL_EXT_mu…i_døw_¨øys


626 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

627 #ifde‡
GL_GLEXT_PROTOTYPES


628 
GL_APICALL
 
GL_APIENTRY
 
	`glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 *
fú°
, 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

629 
GL_APICALL
 
GL_APIENTRY
 
	`glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* *
ödi˚s
, GLsizeò
¥imcou¡
);

631 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

632 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

636 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


637 
	#GL_EXT_ªad_f‹m©_bgø
 1

	)

641 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


642 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

646 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


647 
	#GL_EXT_ãxtuª_f‹m©_BGRA8888
 1

	)

651 #i‚de‡
GL_EXT_ãxtuª_ty≥_2_10_10_10_REV


652 
	#GL_EXT_ãxtuª_ty≥_2_10_10_10_REV
 1

	)

656 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


657 
	#GL_EXT_ãxtuª_com¥essi⁄_dxt1
 1

	)

665 #i‚de‡
GL_IMG_¥ogøm_bö¨y


666 
	#GL_IMG_¥ogøm_bö¨y
 1

	)

670 #i‚de‡
GL_IMG_ªad_f‹m©


671 
	#GL_IMG_ªad_f‹m©
 1

	)

675 #i‚de‡
GL_IMG_shadî_bö¨y


676 
	#GL_IMG_shadî_bö¨y
 1

	)

680 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


681 
	#GL_IMG_ãxtuª_com¥essi⁄_pvπc
 1

	)

685 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


686 
	#GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª
 1

	)

687 #ifde‡
GL_GLEXT_PROTOTYPES


688 
GL_APICALL
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eIMG
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

689 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DMu…ißm∂eIMG
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
ßm∂es
);

691 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMG
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

692 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMG
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tßm∂es
);

700 #i‚de‡
GL_NV_„n˚


701 
	#GL_NV_„n˚
 1

	)

702 #ifde‡
GL_GLEXT_PROTOTYPES


703 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

704 
GL_APICALL
 
GL_APIENTRY
 
	`glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

705 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsFí˚NV
 (
GLuöt
 
„n˚
);

706 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

707 
GL_APICALL
 
GL_APIENTRY
 
	`glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

708 
GL_APICALL
 
GL_APIENTRY
 
	`glFöishFí˚NV
 (
GLuöt
 
„n˚
);

709 
GL_APICALL
 
GL_APIENTRY
 
	`glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

711 (
	tGL_APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

712 (
	tGL_APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

713 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

714 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

715 (
	tGL_APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

716 (
	tGL_APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

717 (
	tGL_APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

721 #i‚de‡
GL_NV_covîage_ßm∂e


722 
	#GL_NV_covîage_ßm∂e
 1

	)

723 #ifde‡
GL_GLEXT_PROTOTYPES


724 
GL_APICALL
 
GL_APIENTRY
 
	`glCovîageMaskNV
 (
GLboﬁón
 
mask
);

725 
GL_APICALL
 
GL_APIENTRY
 
	`glCovîageO≥øti⁄NV
 (
GLíum
 
›î©i⁄
);

727 (
	tGL_APIENTRYP
 
	tPFNGLCOVERAGEMASKNVPROC
Ë(
	tGLboﬁón
 
	tmask
);

728 (
	tGL_APIENTRYP
 
	tPFNGLCOVERAGEOPERATIONNVPROC
Ë(
	tGLíum
 
	t›î©i⁄
);

732 #i‚de‡
GL_NV_dïth_n⁄löór


733 
	#GL_NV_dïth_n⁄löór
 1

	)

741 #i‚de‡
GL_QCOM_drivî_c⁄åﬁ


742 
	#GL_QCOM_drivî_c⁄åﬁ
 1

	)

743 #ifde‡
GL_GLEXT_PROTOTYPES


744 
GL_APICALL
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁsQCOM
 (
GLöt
 *
num
, 
GLsizei
 
size
, 
GLuöt
 *
drivîC⁄åﬁs
);

745 
GL_APICALL
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁSåögQCOM
 (
GLuöt
 
drivîC⁄åﬁ
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
drivîC⁄åﬁSåög
);

746 
GL_APICALL
 
GL_APIENTRY
 
	`glE«bÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

747 
GL_APICALL
 
GL_APIENTRY
 
	`glDißbÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

749 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSQCOMPROC
Ë(
	tGLöt
 *
	tnum
, 
	tGLsizei
 
	tsize
, 
	tGLuöt
 *
	tdrivîC⁄åﬁs
);

750 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSTRINGQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tdrivîC⁄åﬁSåög
);

751 (
	tGL_APIENTRYP
 
	tPFNGLENABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

752 (
	tGL_APIENTRYP
 
	tPFNGLDISABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

756 #i‚de‡
GL_QCOM_exãnded_gë


757 
	#GL_QCOM_exãnded_gë
 1

	)

758 #ifde‡
GL_GLEXT_PROTOTYPES


759 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTextuªsQCOM
 (
GLuöt
 *
ãxtuªs
, 
GLöt
 
maxTextuªs
, GLöà*
numTextuªs
);

760 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëBuf„rsQCOM
 (
GLuöt
 *
buf„rs
, 
GLöt
 
maxBuf„rs
, GLöà*
numBuf„rs
);

761 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëRídîbuf„rsQCOM
 (
GLuöt
 *
ªndîbuf„rs
, 
GLöt
 
maxRídîbuf„rs
, GLöà*
numRídîbuf„rs
);

762 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëFømebuf„rsQCOM
 (
GLuöt
 *
‰amebuf„rs
, 
GLöt
 
maxFømebuf„rs
, GLöà*
numFømebuf„rs
);

763 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTexLevñP¨amëîivQCOM
 (
GLuöt
 
ãxtuª
, 
GLíum
 
Á˚
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

764 
GL_APICALL
 
GL_APIENTRY
 
	`glExtTexObje˘SèãOvîrideiQCOM
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

765 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTexSubImageQCOM
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
ãxñs
);

766 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëBuf„rPoöãrvQCOM
 (
GLíum
 
èrgë
, 
GLvoid
 **
∑øms
);

768 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXTURESQCOMPROC
Ë(
	tGLuöt
 *
	tãxtuªs
, 
	tGLöt
 
	tmaxTextuªs
, GLöà*
	tnumTextuªs
);

769 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tbuf„rs
, 
	tGLöt
 
	tmaxBuf„rs
, GLöà*
	tnumBuf„rs
);

770 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETRENDERBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tªndîbuf„rs
, 
	tGLöt
 
	tmaxRídîbuf„rs
, GLöà*
	tnumRídîbuf„rs
);

771 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETFRAMEBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	t‰amebuf„rs
, 
	tGLöt
 
	tmaxFømebuf„rs
, GLöà*
	tnumFømebuf„rs
);

772 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tÁ˚
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

773 (
	tGL_APIENTRYP
 
	tPFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

774 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXSUBIMAGEQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tãxñs
);

775 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERPOINTERVQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 **
	t∑øms
);

779 #i‚de‡
GL_QCOM_exãnded_gë2


780 
	#GL_QCOM_exãnded_gë2
 1

	)

781 #ifde‡
GL_GLEXT_PROTOTYPES


782 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëShadîsQCOM
 (
GLuöt
 *
shadîs
, 
GLöt
 
maxShadîs
, GLöà*
numShadîs
);

783 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëProgømsQCOM
 (
GLuöt
 *
¥ogøms
, 
GLöt
 
maxProgøms
, GLöà*
numProgøms
);

784 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glExtIsProgømBö¨yQCOM
 (
GLuöt
 
¥ogøm
);

785 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëProgømBö¨ySour˚QCOM
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, 
GLch¨
 *
sour˚
, 
GLöt
 *
Àngth
);

787 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETSHADERSQCOMPROC
Ë(
	tGLuöt
 *
	tshadîs
, 
	tGLöt
 
	tmaxShadîs
, GLöà*
	tnumShadîs
);

788 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMSQCOMPROC
Ë(
	tGLuöt
 *
	t¥ogøms
, 
	tGLöt
 
	tmaxProgøms
, GLöà*
	tnumProgøms
);

789 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLEXTISPROGRAMBINARYQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

790 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, 
	tGLch¨
 *
	tsour˚
, 
	tGLöt
 *
	tÀngth
);

794 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


795 
	#GL_QCOM_≥rfm⁄_globÆ_mode
 1

	)

799 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


800 
	#GL_QCOM_wrôe⁄ly_ªndîög
 1

	)

804 #i‚de‡
GL_QCOM_tûed_ªndîög


805 
	#GL_QCOM_tûed_ªndîög
 1

	)

806 #ifde‡
GL_GLEXT_PROTOTYPES


807 
GL_APICALL
 
GL_APIENTRY
 
	`glSèπTûögQCOM
 (
GLuöt
 
x
, GLuöà
y
, GLuöà
width
, GLuöà
height
, 
GLbôfõld
 
¥e£rveMask
);

808 
GL_APICALL
 
GL_APIENTRY
 
	`glEndTûögQCOM
 (
GLbôfõld
 
¥e£rveMask
);

810 (
	tGL_APIENTRYP
 
	tPFNGLSTARTTILINGQCOMPROC
Ë(
	tGLuöt
 
	tx
, GLuöà
	ty
, GLuöà
	twidth
, GLuöà
	theight
, 
	tGLbôfõld
 
	t¥e£rveMask
);

811 (
	tGL_APIENTRYP
 
	tPFNGLENDTILINGQCOMPROC
Ë(
	tGLbôfõld
 
	t¥e£rveMask
);

814 #ifde‡
__˝lu•lus


815 
	}
}

	@GLES2/gl2platform.h

1 #i‚de‡
__gl2∂©f‹m_h_


2 
	#__gl2∂©f‹m_h_


	)

20 
	~<KHR/khΩœtf‹m.h
>

22 #i‚de‡
GL_APICALL


23 
	#GL_APICALL
 
KHRONOS_APICALL


	)

26 #i‚de‡
GL_APIENTRY


27 
	#GL_APIENTRY
 
KHRONOS_APIENTRY


	)

	@KHR/khrplatform.h

1 #i‚de‡
__khΩœtf‹m_h_


2 
	#__khΩœtf‹m_h_


	)

90 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__SCITECH_SNAP__
)

91 
	#KHRONOS_APICALL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

92 #ñi‡
deföed
 (
__SYMBIAN32__
)

93 
	#KHRONOS_APICALL
 
IMPORT_C


	)

94 #ñi‡
deföed
(
__ANDROID__
)

95 
	~<sys/cdefs.h
>

96 
	#KHRONOS_APICALL
 
	`__©åibuã__
((
	`visibûôy
("deÁu…"))Ë
__NDK_FPABI__


	)

98 
	#KHRONOS_APICALL


	)

107 #i‡
deföed
(
_WIN32
Ë&& !deföed(
_WIN32_WCE
Ë&& !deföed(
__SCITECH_SNAP__
)

109 
	#KHRONOS_APIENTRY
 
__°dˇŒ


	)

111 
	#KHRONOS_APIENTRY


	)

119 #i‡
deföed
 (
__ARMCC_2__
)

120 
	#KHRONOS_APIATTRIBUTES
 
__so·Â


	)

122 
	#KHRONOS_APIATTRIBUTES


	)

128 #i‡(
deföed
(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__GNUC__
Ë|| deföed(
__SCO__
Ë|| deföed(
__USLC__
)

134 
	~<°döt.h
>

135 
öt32_t
 
	tkhr⁄os_öt32_t
;

136 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

137 
öt64_t
 
	tkhr⁄os_öt64_t
;

138 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

139 
	#KHRONOS_SUPPORT_INT64
 1

	)

140 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

142 #ñi‡
deföed
(
__VMS
 ) || deföed(
__sgi
)

147 
	~<öây≥s.h
>

148 
öt32_t
 
	tkhr⁄os_öt32_t
;

149 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

150 
öt64_t
 
	tkhr⁄os_öt64_t
;

151 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

152 
	#KHRONOS_SUPPORT_INT64
 1

	)

153 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

155 #ñi‡
deföed
(
_WIN32
Ë&& !deföed(
__SCITECH_SNAP__
)

160 
__öt32
 
	tkhr⁄os_öt32_t
;

161 
	t__öt32
 
	tkhr⁄os_uöt32_t
;

162 
__öt64
 
	tkhr⁄os_öt64_t
;

163 
	t__öt64
 
	tkhr⁄os_uöt64_t
;

164 
	#KHRONOS_SUPPORT_INT64
 1

	)

165 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

167 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

172 
	tkhr⁄os_öt32_t
;

173 
	tkhr⁄os_uöt32_t
;

174 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

175 
	tkhr⁄os_öt64_t
;

176 
	tkhr⁄os_uöt64_t
;

178 
	tkhr⁄os_öt64_t
;

179 
	tkhr⁄os_uöt64_t
;

181 
	#KHRONOS_SUPPORT_INT64
 1

	)

182 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

189 
	tkhr⁄os_öt32_t
;

190 
	tkhr⁄os_uöt32_t
;

191 
	#KHRONOS_SUPPORT_INT64
 0

	)

192 
	#KHRONOS_SUPPORT_FLOAT
 0

	)

199 
	~<°döt.h
>

200 
öt32_t
 
	tkhr⁄os_öt32_t
;

201 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

202 
öt64_t
 
	tkhr⁄os_öt64_t
;

203 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

204 
	#KHRONOS_SUPPORT_INT64
 1

	)

205 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

213 sig√d 
	tkhr⁄os_öt8_t
;

214 
	tkhr⁄os_uöt8_t
;

215 sig√d 
	tkhr⁄os_öt16_t
;

216 
	tkhr⁄os_uöt16_t
;

217 sig√d 
	tkhr⁄os_öçå_t
;

218 
	tkhr⁄os_uöçå_t
;

219 sig√d 
	tkhr⁄os_ssize_t
;

220 
	tkhr⁄os_usize_t
;

222 #i‡
KHRONOS_SUPPORT_FLOAT


226 
	tkhr⁄os_Êﬂt_t
;

229 #i‡
KHRONOS_SUPPORT_INT64


239 
khr⁄os_uöt64_t
 
	tkhr⁄os_utime_«no£c⁄ds_t
;

240 
khr⁄os_öt64_t
 
	tkhr⁄os_°ime_«no£c⁄ds_t
;

	@SLES/OpenSLES.h

32 #i‚de‡
OPENSL_ES_H_


33 
	#OPENSL_ES_H_


	)

35 #ifde‡
__˝lu•lus


39 
	~"O≥nSLES_Pœtf‹m.h
"

46 #i‚de‡
_KHRONOS_KEYS_


47 
	#_KHRONOS_KEYS_


	)

49 
	#KHRONOS_TITLE
 "Khr⁄osTôÀ"

	)

50 
	#KHRONOS_ALBUM
 "Khr⁄osAlbum"

	)

51 
	#KHRONOS_TRACK_NUMBER
 "Khr⁄osTøckNumbî"

	)

52 
	#KHRONOS_ARTIST
 "Khr⁄osAπi°"

	)

53 
	#KHRONOS_GENRE
 "Khr⁄osGíª"

	)

54 
	#KHRONOS_YEAR
 "Khr⁄osYór"

	)

55 
	#KHRONOS_COMMENT
 "Khr⁄osCommít"

	)

56 
	#KHRONOS_ARTIST_URL
 "Khr⁄osAπi°URL"

	)

57 
	#KHRONOS_CONTENT_URL
 "Khr⁄osC⁄ã¡URL"

	)

58 
	#KHRONOS_RATING
 "Khr⁄osR©ög"

	)

59 
	#KHRONOS_ALBUM_ART
 "Khr⁄osAlbumAπ"

	)

60 
	#KHRONOS_COPYRIGHT
 "Khr⁄osC›yright"

	)

66 
¶_öt8_t
 
	tSLöt8
;

67 
¶_uöt8_t
 
	tSLuöt8
;

68 
¶_öt16_t
 
	tSLöt16
;

69 
¶_uöt16_t
 
	tSLuöt16
;

70 
¶_öt32_t
 
	tSLöt32
;

71 
¶_uöt32_t
 
	tSLuöt32
;

73 
SLuöt32
 
	tSLboﬁón
;

74 
	#SL_BOOLEAN_FALSE
 ((
SLboﬁón
Ë0x00000000)

	)

75 
	#SL_BOOLEAN_TRUE
 ((
SLboﬁón
Ë0x00000001)

	)

77 
SLuöt8
 
	tSLch¨
;

78 
SLöt16
 
	tSLmûlibñ
;

79 
SLuöt32
 
	tSLmûli£c⁄d
;

80 
SLuöt32
 
	tSLmûliHîtz
;

81 
SLöt32
 
	tSLmûlimëî
;

82 
SLöt32
 
	tSLmûlidegªe
;

83 
SLöt16
 
	tSL≥rmûÀ
;

84 
SLuöt32
 
	tSLmi¸o£c⁄d
;

85 
SLuöt32
 
	tSLªsu…
;

87 
	#SL_MILLIBEL_MAX
 ((
SLmûlibñ
Ë0x7FFF)

	)

88 
	#SL_MILLIBEL_MIN
 ((
SLmûlibñ
Ë(-
SL_MILLIBEL_MAX
-1))

	)

90 
	#SL_MILLIHERTZ_MAX
 ((
SLmûliHîtz
Ë0xFFFFFFFF)

	)

91 
	#SL_MILLIMETER_MAX
 ((
SLmûlimëî
Ë0x7FFFFFFF)

	)

94 c⁄° 
	sSLI¡îÁ˚ID_
 {

95 
SLuöt32
 
time_low
;

96 
SLuöt16
 
time_mid
;

97 
SLuöt16
 
time_hi_™d_vîsi⁄
;

98 
SLuöt16
 
˛ock_£q
;

99 
SLuöt8
 
node
[6];

100 } * 
	tSLI¡îÁ˚ID
;

103 
SLObje˘Itf_
;

105 c⁄° 
	tSLObje˘Itf_
 * c⁄° * 
	tSLObje˘Itf
;

109 
	#SL_OBJECTID_ENGINE
 ((
SLuöt32
Ë0x00001001)

	)

110 
	#SL_OBJECTID_LEDDEVICE
 ((
SLuöt32
Ë0x00001002)

	)

111 
	#SL_OBJECTID_VIBRADEVICE
 ((
SLuöt32
Ë0x00001003)

	)

112 
	#SL_OBJECTID_AUDIOPLAYER
 ((
SLuöt32
Ë0x00001004)

	)

113 
	#SL_OBJECTID_AUDIORECORDER
 ((
SLuöt32
Ë0x00001005)

	)

114 
	#SL_OBJECTID_MIDIPLAYER
 ((
SLuöt32
Ë0x00001006)

	)

115 
	#SL_OBJECTID_LISTENER
 ((
SLuöt32
Ë0x00001007)

	)

116 
	#SL_OBJECTID_3DGROUP
 ((
SLuöt32
Ë0x00001008)

	)

117 
	#SL_OBJECTID_OUTPUTMIX
 ((
SLuöt32
Ë0x00001009)

	)

118 
	#SL_OBJECTID_METADATAEXTRACTOR
 ((
SLuöt32
Ë0x0000100A)

	)

123 
	#SL_PROFILES_PHONE
 ((
SLuöt16
Ë0x0001)

	)

124 
	#SL_PROFILES_MUSIC
 ((
SLuöt16
Ë0x0002)

	)

125 
	#SL_PROFILES_GAME
 ((
SLuöt16
Ë0x0004)

	)

129 
	#SL_VOICETYPE_2D_AUDIO
 ((
SLuöt16
Ë0x0001)

	)

130 
	#SL_VOICETYPE_MIDI
 ((
SLuöt16
Ë0x0002)

	)

131 
	#SL_VOICETYPE_3D_AUDIO
 ((
SLuöt16
Ë0x0004)

	)

132 
	#SL_VOICETYPE_3D_MIDIOUTPUT
 ((
SLuöt16
Ë0x0008)

	)

136 
	#SL_PRIORITY_LOWEST
 ((
SLöt32
Ë(-0x7FFFFFFF-1))

	)

137 
	#SL_PRIORITY_VERYLOW
 ((
SLöt32
Ë-0x60000000)

	)

138 
	#SL_PRIORITY_LOW
 ((
SLöt32
Ë-0x40000000)

	)

139 
	#SL_PRIORITY_BELOWNORMAL
 ((
SLöt32
Ë-0x20000000)

	)

140 
	#SL_PRIORITY_NORMAL
 ((
SLöt32
Ë0x00000000)

	)

141 
	#SL_PRIORITY_ABOVENORMAL
 ((
SLöt32
Ë0x20000000)

	)

142 
	#SL_PRIORITY_HIGH
 ((
SLöt32
Ë0x40000000)

	)

143 
	#SL_PRIORITY_VERYHIGH
 ((
SLöt32
Ë0x60000000)

	)

144 
	#SL_PRIORITY_HIGHEST
 ((
SLöt32
Ë0x7FFFFFFF)

	)

149 
	#SL_PCMSAMPLEFORMAT_FIXED_8
 ((
SLuöt16
Ë0x0008)

	)

150 
	#SL_PCMSAMPLEFORMAT_FIXED_16
 ((
SLuöt16
Ë0x0010)

	)

151 
	#SL_PCMSAMPLEFORMAT_FIXED_20
 ((
SLuöt16
Ë0x0014)

	)

152 
	#SL_PCMSAMPLEFORMAT_FIXED_24
 ((
SLuöt16
Ë0x0018)

	)

153 
	#SL_PCMSAMPLEFORMAT_FIXED_28
 ((
SLuöt16
Ë0x001C)

	)

154 
	#SL_PCMSAMPLEFORMAT_FIXED_32
 ((
SLuöt16
Ë0x0020)

	)

159 
	#SL_SAMPLINGRATE_8
 ((
SLuöt32
Ë8000000)

	)

160 
	#SL_SAMPLINGRATE_11_025
 ((
SLuöt32
Ë11025000)

	)

161 
	#SL_SAMPLINGRATE_12
 ((
SLuöt32
Ë12000000)

	)

162 
	#SL_SAMPLINGRATE_16
 ((
SLuöt32
Ë16000000)

	)

163 
	#SL_SAMPLINGRATE_22_05
 ((
SLuöt32
Ë22050000)

	)

164 
	#SL_SAMPLINGRATE_24
 ((
SLuöt32
Ë24000000)

	)

165 
	#SL_SAMPLINGRATE_32
 ((
SLuöt32
Ë32000000)

	)

166 
	#SL_SAMPLINGRATE_44_1
 ((
SLuöt32
Ë44100000)

	)

167 
	#SL_SAMPLINGRATE_48
 ((
SLuöt32
Ë48000000)

	)

168 
	#SL_SAMPLINGRATE_64
 ((
SLuöt32
Ë64000000)

	)

169 
	#SL_SAMPLINGRATE_88_2
 ((
SLuöt32
Ë88200000)

	)

170 
	#SL_SAMPLINGRATE_96
 ((
SLuöt32
Ë96000000)

	)

171 
	#SL_SAMPLINGRATE_192
 ((
SLuöt32
Ë192000000)

	)

173 
	#SL_SPEAKER_FRONT_LEFT
 ((
SLuöt32
Ë0x00000001)

	)

174 
	#SL_SPEAKER_FRONT_RIGHT
 ((
SLuöt32
Ë0x00000002)

	)

175 
	#SL_SPEAKER_FRONT_CENTER
 ((
SLuöt32
Ë0x00000004)

	)

176 
	#SL_SPEAKER_LOW_FREQUENCY
 ((
SLuöt32
Ë0x00000008)

	)

177 
	#SL_SPEAKER_BACK_LEFT
 ((
SLuöt32
Ë0x00000010)

	)

178 
	#SL_SPEAKER_BACK_RIGHT
 ((
SLuöt32
Ë0x00000020)

	)

179 
	#SL_SPEAKER_FRONT_LEFT_OF_CENTER
 ((
SLuöt32
Ë0x00000040)

	)

180 
	#SL_SPEAKER_FRONT_RIGHT_OF_CENTER
 ((
SLuöt32
Ë0x00000080)

	)

181 
	#SL_SPEAKER_BACK_CENTER
 ((
SLuöt32
Ë0x00000100)

	)

182 
	#SL_SPEAKER_SIDE_LEFT
 ((
SLuöt32
Ë0x00000200)

	)

183 
	#SL_SPEAKER_SIDE_RIGHT
 ((
SLuöt32
Ë0x00000400)

	)

184 
	#SL_SPEAKER_TOP_CENTER
 ((
SLuöt32
Ë0x00000800)

	)

185 
	#SL_SPEAKER_TOP_FRONT_LEFT
 ((
SLuöt32
Ë0x00001000)

	)

186 
	#SL_SPEAKER_TOP_FRONT_CENTER
 ((
SLuöt32
Ë0x00002000)

	)

187 
	#SL_SPEAKER_TOP_FRONT_RIGHT
 ((
SLuöt32
Ë0x00004000)

	)

188 
	#SL_SPEAKER_TOP_BACK_LEFT
 ((
SLuöt32
Ë0x00008000)

	)

189 
	#SL_SPEAKER_TOP_BACK_CENTER
 ((
SLuöt32
Ë0x00010000)

	)

190 
	#SL_SPEAKER_TOP_BACK_RIGHT
 ((
SLuöt32
Ë0x00020000)

	)

198 
	#SL_RESULT_SUCCESS
 ((
SLuöt32
Ë0x00000000)

	)

199 
	#SL_RESULT_PRECONDITIONS_VIOLATED
 ((
SLuöt32
Ë0x00000001)

	)

200 
	#SL_RESULT_PARAMETER_INVALID
 ((
SLuöt32
Ë0x00000002)

	)

201 
	#SL_RESULT_MEMORY_FAILURE
 ((
SLuöt32
Ë0x00000003)

	)

202 
	#SL_RESULT_RESOURCE_ERROR
 ((
SLuöt32
Ë0x00000004)

	)

203 
	#SL_RESULT_RESOURCE_LOST
 ((
SLuöt32
Ë0x00000005)

	)

204 
	#SL_RESULT_IO_ERROR
 ((
SLuöt32
Ë0x00000006)

	)

205 
	#SL_RESULT_BUFFER_INSUFFICIENT
 ((
SLuöt32
Ë0x00000007)

	)

206 
	#SL_RESULT_CONTENT_CORRUPTED
 ((
SLuöt32
Ë0x00000008)

	)

207 
	#SL_RESULT_CONTENT_UNSUPPORTED
 ((
SLuöt32
Ë0x00000009)

	)

208 
	#SL_RESULT_CONTENT_NOT_FOUND
 ((
SLuöt32
Ë0x0000000A)

	)

209 
	#SL_RESULT_PERMISSION_DENIED
 ((
SLuöt32
Ë0x0000000B)

	)

210 
	#SL_RESULT_FEATURE_UNSUPPORTED
 ((
SLuöt32
Ë0x0000000C)

	)

211 
	#SL_RESULT_INTERNAL_ERROR
 ((
SLuöt32
Ë0x0000000D)

	)

212 
	#SL_RESULT_UNKNOWN_ERROR
 ((
SLuöt32
Ë0x0000000E)

	)

213 
	#SL_RESULT_OPERATION_ABORTED
 ((
SLuöt32
Ë0x0000000F)

	)

214 
	#SL_RESULT_CONTROL_LOST
 ((
SLuöt32
Ë0x00000010)

	)

219 
	#SL_OBJECT_STATE_UNREALIZED
 ((
SLuöt32
Ë0x00000001)

	)

220 
	#SL_OBJECT_STATE_REALIZED
 ((
SLuöt32
Ë0x00000002)

	)

221 
	#SL_OBJECT_STATE_SUSPENDED
 ((
SLuöt32
Ë0x00000003)

	)

225 
	#SL_OBJECT_EVENT_RUNTIME_ERROR
 ((
SLuöt32
Ë0x00000001)

	)

226 
	#SL_OBJECT_EVENT_ASYNC_TERMINATION
 ((
SLuöt32
Ë0x00000002)

	)

227 
	#SL_OBJECT_EVENT_RESOURCES_LOST
 ((
SLuöt32
Ë0x00000003)

	)

228 
	#SL_OBJECT_EVENT_RESOURCES_AVAILABLE
 ((
SLuöt32
Ë0x00000004)

	)

229 
	#SL_OBJECT_EVENT_ITF_CONTROL_TAKEN
 ((
SLuöt32
Ë0x00000005)

	)

230 
	#SL_OBJECT_EVENT_ITF_CONTROL_RETURNED
 ((
SLuöt32
Ë0x00000006)

	)

231 
	#SL_OBJECT_EVENT_ITF_PARAMETERS_CHANGED
 ((
SLuöt32
Ë0x00000007)

	)

240 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_NULL
;

247 
	#SL_DATALOCATOR_URI
 ((
SLuöt32
Ë0x00000001)

	)

248 
	#SL_DATALOCATOR_ADDRESS
 ((
SLuöt32
Ë0x00000002)

	)

249 
	#SL_DATALOCATOR_IODEVICE
 ((
SLuöt32
Ë0x00000003)

	)

250 
	#SL_DATALOCATOR_OUTPUTMIX
 ((
SLuöt32
Ë0x00000004)

	)

251 
	#SL_DATALOCATOR_RESERVED5
 ((
SLuöt32
Ë0x00000005)

	)

252 
	#SL_DATALOCATOR_BUFFERQUEUE
 ((
SLuöt32
Ë0x00000006)

	)

253 
	#SL_DATALOCATOR_MIDIBUFFERQUEUE
 ((
SLuöt32
Ë0x00000007)

	)

254 
	#SL_DATALOCATOR_RESERVED8
 ((
SLuöt32
Ë0x00000008)

	)

259 
	sSLD©aLoˇt‹_URI_
 {

260 
SLuöt32
 
	gloˇt‹Ty≥
;

261 
SLch¨
 * 
	gURI
;

262 } 
	tSLD©aLoˇt‹_URI
;

265 
	sSLD©aLoˇt‹_Addªss_
 {

266 
SLuöt32
 
	gloˇt‹Ty≥
;

267 *
	gpAddªss
;

268 
SLuöt32
 
	gÀngth
;

269 } 
	tSLD©aLoˇt‹_Addªss
;

272 
	#SL_IODEVICE_AUDIOINPUT
 ((
SLuöt32
Ë0x00000001)

	)

273 
	#SL_IODEVICE_LEDARRAY
 ((
SLuöt32
Ë0x00000002)

	)

274 
	#SL_IODEVICE_VIBRA
 ((
SLuöt32
Ë0x00000003)

	)

275 
	#SL_IODEVICE_RESERVED4
 ((
SLuöt32
Ë0x00000004)

	)

276 
	#SL_IODEVICE_RESERVED5
 ((
SLuöt32
Ë0x00000005)

	)

279 
	sSLD©aLoˇt‹_IODevi˚_
 {

280 
SLuöt32
 
	gloˇt‹Ty≥
;

281 
SLuöt32
 
	gdevi˚Ty≥
;

282 
SLuöt32
 
	gdevi˚ID
;

283 
SLObje˘Itf
 
	gdevi˚
;

284 } 
	tSLD©aLoˇt‹_IODevi˚
;

287 
	sSLD©aLoˇt‹_OuçutMix
 {

288 
SLuöt32
 
	gloˇt‹Ty≥
;

289 
SLObje˘Itf
 
	gouçutMix
;

290 } 
	tSLD©aLoˇt‹_OuçutMix
;

294 
	sSLD©aLoˇt‹_Buf„rQueue
 {

295 
SLuöt32
 
	gloˇt‹Ty≥
;

296 
SLuöt32
 
	gnumBuf„rs
;

297 } 
	tSLD©aLoˇt‹_Buf„rQueue
;

300 
	sSLD©aLoˇt‹_MIDIBuf„rQueue
 {

301 
SLuöt32
 
	gloˇt‹Ty≥
;

302 
SLuöt32
 
	gçqn
;

303 
SLuöt32
 
	gnumBuf„rs
;

304 } 
	tSLD©aLoˇt‹_MIDIBuf„rQueue
;

307 
	#SL_DATAFORMAT_MIME
 ((
SLuöt32
Ë0x00000001)

	)

308 
	#SL_DATAFORMAT_PCM
 ((
SLuöt32
Ë0x00000002)

	)

309 
	#SL_DATAFORMAT_RESERVED3
 ((
SLuöt32
Ë0x00000003)

	)

313 
	sSLD©aF‹m©_MIME_
 {

314 
SLuöt32
 
	gf‹m©Ty≥
;

315 
SLch¨
 * 
	gmimeTy≥
;

316 
SLuöt32
 
	gc⁄èöîTy≥
;

317 } 
	tSLD©aF‹m©_MIME
;

320 
	#SL_BYTEORDER_BIGENDIAN
 ((
SLuöt32
Ë0x00000001)

	)

321 
	#SL_BYTEORDER_LITTLEENDIAN
 ((
SLuöt32
Ë0x00000002)

	)

324 
	#SL_CONTAINERTYPE_UNSPECIFIED
 ((
SLuöt32
Ë0x00000001)

	)

325 
	#SL_CONTAINERTYPE_RAW
 ((
SLuöt32
Ë0x00000002)

	)

326 
	#SL_CONTAINERTYPE_ASF
 ((
SLuöt32
Ë0x00000003)

	)

327 
	#SL_CONTAINERTYPE_AVI
 ((
SLuöt32
Ë0x00000004)

	)

328 
	#SL_CONTAINERTYPE_BMP
 ((
SLuöt32
Ë0x00000005)

	)

329 
	#SL_CONTAINERTYPE_JPG
 ((
SLuöt32
Ë0x00000006)

	)

330 
	#SL_CONTAINERTYPE_JPG2000
 ((
SLuöt32
Ë0x00000007)

	)

331 
	#SL_CONTAINERTYPE_M4A
 ((
SLuöt32
Ë0x00000008)

	)

332 
	#SL_CONTAINERTYPE_MP3
 ((
SLuöt32
Ë0x00000009)

	)

333 
	#SL_CONTAINERTYPE_MP4
 ((
SLuöt32
Ë0x0000000A)

	)

334 
	#SL_CONTAINERTYPE_MPEG_ES
 ((
SLuöt32
Ë0x0000000B)

	)

335 
	#SL_CONTAINERTYPE_MPEG_PS
 ((
SLuöt32
Ë0x0000000C)

	)

336 
	#SL_CONTAINERTYPE_MPEG_TS
 ((
SLuöt32
Ë0x0000000D)

	)

337 
	#SL_CONTAINERTYPE_QT
 ((
SLuöt32
Ë0x0000000E)

	)

338 
	#SL_CONTAINERTYPE_WAV
 ((
SLuöt32
Ë0x0000000F)

	)

339 
	#SL_CONTAINERTYPE_XMF_0
 ((
SLuöt32
Ë0x00000010)

	)

340 
	#SL_CONTAINERTYPE_XMF_1
 ((
SLuöt32
Ë0x00000011)

	)

341 
	#SL_CONTAINERTYPE_XMF_2
 ((
SLuöt32
Ë0x00000012)

	)

342 
	#SL_CONTAINERTYPE_XMF_3
 ((
SLuöt32
Ë0x00000013)

	)

343 
	#SL_CONTAINERTYPE_XMF_GENERIC
 ((
SLuöt32
Ë0x00000014)

	)

344 
	#SL_CONTAINERTYPE_AMR
 ((
SLuöt32
Ë0x00000015)

	)

345 
	#SL_CONTAINERTYPE_AAC
 ((
SLuöt32
Ë0x00000016)

	)

346 
	#SL_CONTAINERTYPE_3GPP
 ((
SLuöt32
Ë0x00000017)

	)

347 
	#SL_CONTAINERTYPE_3GA
 ((
SLuöt32
Ë0x00000018)

	)

348 
	#SL_CONTAINERTYPE_RM
 ((
SLuöt32
Ë0x00000019)

	)

349 
	#SL_CONTAINERTYPE_DMF
 ((
SLuöt32
Ë0x0000001A)

	)

350 
	#SL_CONTAINERTYPE_SMF
 ((
SLuöt32
Ë0x0000001B)

	)

351 
	#SL_CONTAINERTYPE_MOBILE_DLS
 ((
SLuöt32
Ë0x0000001C)

	)

352 
	#SL_CONTAINERTYPE_OGG
 ((
SLuöt32
Ë0x0000001D)

	)

356 
	sSLD©aF‹m©_PCM_
 {

357 
SLuöt32
 
	gf‹m©Ty≥
;

358 
SLuöt32
 
	gnumCh™√ls
;

359 
SLuöt32
 
	gßm∂esPîSec
;

360 
SLuöt32
 
	gbôsPîSam∂e
;

361 
SLuöt32
 
	gc⁄èöîSize
;

362 
SLuöt32
 
	gch™√lMask
;

363 
SLuöt32
 
	gídü¬ess
;

364 } 
	tSLD©aF‹m©_PCM
;

366 
	sSLD©aSour˚_
 {

367 *
	gpLoˇt‹
;

368 *
	gpF‹m©
;

369 } 
	tSLD©aSour˚
;

372 
	sSLD©aSök_
 {

373 *
	gpLoˇt‹
;

374 *
	gpF‹m©
;

375 } 
	tSLD©aSök
;

386 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_OBJECT
;

391 –*
	g¶Obje˘CÆlback
) (

392 
	tSLObje˘Itf
 
	tˇŒî
,

393 c⁄° * 
	tpC⁄ãxt
,

394 
	tSLuöt32
 
	tevít
,

395 
	tSLªsu…
 
	tªsu…
,

396 
	tSLuöt32
 
	t∑øm
,

397 *
	tpI¡îÁ˚


401 
	sSLObje˘Itf_
 {

402 
SLªsu…
 (*
Rólize
) (

403 
SLObje˘Itf
 
	g£lf
,

404 
SLboﬁón
 
	gasync


406 
SLªsu…
 (*
Resume
) (

407 
SLObje˘Itf
 
	g£lf
,

408 
SLboﬁón
 
	gasync


410 
SLªsu…
 (*
GëSèã
) (

411 
SLObje˘Itf
 
	g£lf
,

412 
SLuöt32
 * 
	gpSèã


414 
SLªsu…
 (*
GëI¡îÁ˚
) (

415 
SLObje˘Itf
 
	g£lf
,

416 c⁄° 
SLI¡îÁ˚ID
 
	giid
,

417 * 
	gpI¡îÁ˚


419 
SLªsu…
 (*
Regi°îCÆlback
) (

420 
SLObje˘Itf
 
	g£lf
,

421 
¶Obje˘CÆlback
 
	gˇŒback
,

422 * 
	gpC⁄ãxt


424 (*
	gAb‹tAsyncO≥øti⁄
) (

425 
SLObje˘Itf
 
	g£lf


427 (*
	gDe°roy
) (

428 
SLObje˘Itf
 
	g£lf


430 
SLªsu…
 (*
SëPri‹ôy
) (

431 
SLObje˘Itf
 
	g£lf
,

432 
SLöt32
 
	g¥i‹ôy
,

433 
SLboﬁón
 
	g¥ìm±abÀ


435 
SLªsu…
 (*
GëPri‹ôy
) (

436 
SLObje˘Itf
 
	g£lf
,

437 
SLöt32
 *
	gpPri‹ôy
,

438 
SLboﬁón
 *
	gpPªem±abÀ


440 
SLªsu…
 (*
SëLossOfC⁄åﬁI¡îÁ˚s
) (

441 
SLObje˘Itf
 
	g£lf
,

442 
SLöt16
 
	gnumI¡îÁ˚s
,

443 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚IDs
,

444 
SLboﬁón
 
	gíabÀd


453 
	#SL_DEFAULTDEVICEID_AUDIOINPUT
 ((
SLuöt32
Ë0xFFFFFFFF)

	)

454 
	#SL_DEFAULTDEVICEID_AUDIOOUTPUT
 ((
SLuöt32
Ë0xFFFFFFFE)

	)

455 
	#SL_DEFAULTDEVICEID_LED
 ((
SLuöt32
Ë0xFFFFFFFD)

	)

456 
	#SL_DEFAULTDEVICEID_VIBRA
 ((
SLuöt32
Ë0xFFFFFFFC)

	)

457 
	#SL_DEFAULTDEVICEID_RESERVED1
 ((
SLuöt32
Ë0xFFFFFFFB)

	)

460 
	#SL_DEVCONNECTION_INTEGRATED
 ((
SLöt16
Ë0x0001)

	)

461 
	#SL_DEVCONNECTION_ATTACHED_WIRED
 ((
SLöt16
Ë0x0100)

	)

462 
	#SL_DEVCONNECTION_ATTACHED_WIRELESS
 ((
SLöt16
Ë0x0200)

	)

463 
	#SL_DEVCONNECTION_NETWORK
 ((
SLöt16
Ë0x0400)

	)

466 
	#SL_DEVLOCATION_HANDSET
 ((
SLuöt16
Ë0x0001)

	)

467 
	#SL_DEVLOCATION_HEADSET
 ((
SLuöt16
Ë0x0002)

	)

468 
	#SL_DEVLOCATION_CARKIT
 ((
SLuöt16
Ë0x0003)

	)

469 
	#SL_DEVLOCATION_DOCK
 ((
SLuöt16
Ë0x0004)

	)

470 
	#SL_DEVLOCATION_REMOTE
 ((
SLuöt16
Ë0x0005)

	)

472 
	#SL_DEVLOCATION_RESLTE
 ((
SLuöt16
Ë0x0005)

	)

475 
	#SL_DEVSCOPE_UNKNOWN
 ((
SLuöt16
Ë0x0001)

	)

476 
	#SL_DEVSCOPE_ENVIRONMENT
 ((
SLuöt16
Ë0x0002)

	)

477 
	#SL_DEVSCOPE_USER
 ((
SLuöt16
Ë0x0003)

	)

480 
	sSLAudioI≈utDes¸ùt‹_
 {

481 
SLch¨
 *
	gdevi˚Name
;

482 
SLöt16
 
	gdevi˚C⁄√˘i⁄
;

483 
SLöt16
 
	gdevi˚Sc›e
;

484 
SLöt16
 
	gdevi˚Loˇti⁄
;

485 
SLboﬁón
 
	gisF‹Tñïh⁄y
;

486 
SLmûliHîtz
 
	gmöSam∂eR©e
;

487 
SLmûliHîtz
 
	gmaxSam∂eR©e
;

488 
SLboﬁón
 
	gisFªqR™geC⁄töuous
;

489 
SLmûliHîtz
 *
	gßm∂ögR©esSuµ‹ãd
;

490 
SLöt16
 
	gnumOfSam∂ögR©esSuµ‹ãd
;

491 
SLöt16
 
	gmaxCh™√ls
;

492 } 
	tSLAudioI≈utDes¸ùt‹
;

495 
	sSLAudioOuçutDes¸ùt‹_
 {

496 
SLch¨
 *
	gpDevi˚Name
;

497 
SLöt16
 
	gdevi˚C⁄√˘i⁄
;

498 
SLöt16
 
	gdevi˚Sc›e
;

499 
SLöt16
 
	gdevi˚Loˇti⁄
;

500 
SLboﬁón
 
	gisF‹Tñïh⁄y
;

501 
SLmûliHîtz
 
	gmöSam∂eR©e
;

502 
SLmûliHîtz
 
	gmaxSam∂eR©e
;

503 
SLboﬁón
 
	gisFªqR™geC⁄töuous
;

504 
SLmûliHîtz
 *
	gßm∂ögR©esSuµ‹ãd
;

505 
SLöt16
 
	gnumOfSam∂ögR©esSuµ‹ãd
;

506 
SLöt16
 
	gmaxCh™√ls
;

507 } 
	tSLAudioOuçutDes¸ùt‹
;

511 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_AUDIOIODEVICECAPABILITIES
;

513 
	gSLAudioIODevi˚C≠abûôõsItf_
;

514 c⁄° 
	tSLAudioIODevi˚C≠abûôõsItf_
 * c⁄° * 
	tSLAudioIODevi˚C≠abûôõsItf
;

517 –*
	g¶AvaûabÀAudioI≈utsCh™gedCÆlback
) (

518 
	tSLAudioIODevi˚C≠abûôõsItf
 
	tˇŒî
,

519 *
	tpC⁄ãxt
,

520 
	tSLuöt32
 
	tdevi˚ID
,

521 
	tSLöt32
 
	tnumI≈uts
,

522 
	tSLboﬁón
 
	tisNew


526 –*
	g¶AvaûabÀAudioOuçutsCh™gedCÆlback
) (

527 
	tSLAudioIODevi˚C≠abûôõsItf
 
	tˇŒî
,

528 *
	tpC⁄ãxt
,

529 
	tSLuöt32
 
	tdevi˚ID
,

530 
	tSLöt32
 
	tnumOuçuts
,

531 
	tSLboﬁón
 
	tisNew


534 –*
	g¶DeÁu…Devi˚IDM≠Ch™gedCÆlback
) (

535 
	tSLAudioIODevi˚C≠abûôõsItf
 
	tˇŒî
,

536 *
	tpC⁄ãxt
,

537 
	tSLboﬁón
 
	tisOuçut
,

538 
	tSLöt32
 
	tnumDevi˚s


542 
	sSLAudioIODevi˚C≠abûôõsItf_
 {

543 
SLªsu…
 (*
GëAvaûabÀAudioI≈uts
)(

544 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

545 
SLöt32
 *
	gpNumI≈uts
,

546 
SLuöt32
 *
	gpI≈utDevi˚IDs


548 
SLªsu…
 (*
QuîyAudioI≈utC≠abûôõs
)(

549 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

550 
SLuöt32
 
	gdevi˚Id
,

551 
SLAudioI≈utDes¸ùt‹
 *
	gpDes¸ùt‹


553 
SLªsu…
 (*
Regi°îAvaûabÀAudioI≈utsCh™gedCÆlback
) (

554 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

555 
¶AvaûabÀAudioI≈utsCh™gedCÆlback
 
	gˇŒback
,

556 *
	gpC⁄ãxt


558 
SLªsu…
 (*
GëAvaûabÀAudioOuçuts
)(

559 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

560 
SLöt32
 *
	gpNumOuçuts
,

561 
SLuöt32
 *
	gpOuçutDevi˚IDs


563 
SLªsu…
 (*
QuîyAudioOuçutC≠abûôõs
)(

564 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

565 
SLuöt32
 
	gdevi˚Id
,

566 
SLAudioOuçutDes¸ùt‹
 *
	gpDes¸ùt‹


568 
SLªsu…
 (*
Regi°îAvaûabÀAudioOuçutsCh™gedCÆlback
) (

569 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

570 
¶AvaûabÀAudioOuçutsCh™gedCÆlback
 
	gˇŒback
,

571 *
	gpC⁄ãxt


573 
SLªsu…
 (*
Regi°îDeÁu…Devi˚IDM≠Ch™gedCÆlback
) (

574 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

575 
¶DeÁu…Devi˚IDM≠Ch™gedCÆlback
 
	gˇŒback
,

576 *
	gpC⁄ãxt


578 
SLªsu…
 (*
GëAssocüãdAudioI≈uts
) (

579 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

580 
SLuöt32
 
	gdevi˚Id
,

581 
SLöt32
 *
	gpNumAudioI≈uts
,

582 
SLuöt32
 *
	gpAudioI≈utDevi˚IDs


584 
SLªsu…
 (*
GëAssocüãdAudioOuçuts
) (

585 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

586 
SLuöt32
 
	gdevi˚Id
,

587 
SLöt32
 *
	gpNumAudioOuçuts
,

588 
SLuöt32
 *
	gpAudioOuçutDevi˚IDs


590 
SLªsu…
 (*
GëDeÁu…AudioDevi˚s
) (

591 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

592 
SLuöt32
 
	gdeÁu…Devi˚ID
,

593 
SLöt32
 *
	gpNumAudioDevi˚s
,

594 
SLuöt32
 *
	gpAudioDevi˚IDs


596 
SLªsu…
 (*
QuîySam∂eF‹m©sSuµ‹ãd
)(

597 
SLAudioIODevi˚C≠abûôõsItf
 
	g£lf
,

598 
SLuöt32
 
	gdevi˚Id
,

599 
SLmûliHîtz
 
	gßm∂ögR©e
,

600 
SLöt32
 *
	gpSam∂eF‹m©s
,

601 
SLöt32
 *
	gpNumOfSam∂eF‹m©s


611 
	sSLLEDDes¸ùt‹_
 {

612 
SLuöt8
 
	gÀdCou¡
;

613 
SLuöt8
 
	g¥im¨yLED
;

614 
SLuöt32
 
	gcﬁ‹Mask
;

615 } 
	tSLLEDDes¸ùt‹
;

622 
	sSLHSL_
 {

623 
SLmûlidegªe
 
	ghue
;

624 
SL≥rmûÀ
 
	gßtuøti⁄
;

625 
SL≥rmûÀ
 
	glighäess
;

626 } 
	tSLHSL
;

629 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_LED
;

631 
	gSLLEDAºayItf_
;

632 c⁄° 
	tSLLEDAºayItf_
 * c⁄° * 
	tSLLEDAºayItf
;

634 
	sSLLEDAºayItf_
 {

635 
SLªsu…
 (*
A˘iv©eLEDAºay
) (

636 
SLLEDAºayItf
 
	g£lf
,

637 
SLuöt32
 
	glightMask


639 
SLªsu…
 (*
IsLEDAºayA˘iv©ed
) (

640 
SLLEDAºayItf
 
	g£lf
,

641 
SLuöt32
 *
	glightMask


643 
SLªsu…
 (*
SëCﬁ‹
) (

644 
SLLEDAºayItf
 
	g£lf
,

645 
SLuöt8
 
	gödex
,

646 c⁄° 
SLHSL
 *
	gcﬁ‹


648 
SLªsu…
 (*
GëCﬁ‹
) (

649 
SLLEDAºayItf
 
	g£lf
,

650 
SLuöt8
 
	gödex
,

651 
SLHSL
 *
	gcﬁ‹


659 
	sSLVibøDes¸ùt‹_
 {

660 
SLboﬁón
 
	gsuµ‹tsFªquícy
;

661 
SLboﬁón
 
	gsuµ‹tsI¡ísôy
;

662 
SLmûliHîtz
 
	gmöFªquícy
;

663 
SLmûliHîtz
 
	gmaxFªquícy
;

664 } 
	tSLVibøDes¸ùt‹
;

673 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_VIBRA
;

676 
	gSLVibøItf_
;

677 c⁄° 
	tSLVibøItf_
 * c⁄° * 
	tSLVibøItf
;

679 
	sSLVibøItf_
 {

680 
SLªsu…
 (*
Vibøã
) (

681 
SLVibøItf
 
	g£lf
,

682 
SLboﬁón
 
	gvibøã


684 
SLªsu…
 (*
IsVibøtög
) (

685 
SLVibøItf
 
	g£lf
,

686 
SLboﬁón
 *
	gpVibøtög


688 
SLªsu…
 (*
SëFªquícy
) (

689 
SLVibøItf
 
	g£lf
,

690 
SLmûliHîtz
 
	g‰equícy


692 
SLªsu…
 (*
GëFªquícy
) (

693 
SLVibøItf
 
	g£lf
,

694 
SLmûliHîtz
 *
	gpFªquícy


696 
SLªsu…
 (*
SëI¡ísôy
) (

697 
SLVibøItf
 
	g£lf
,

698 
SL≥rmûÀ
 
	göãnsôy


700 
SLªsu…
 (*
GëI¡ísôy
) (

701 
SLVibøItf
 
	g£lf
,

702 
SL≥rmûÀ
 *
	gpI¡ísôy


711 
	#SL_CHARACTERENCODING_UNKNOWN
 ((
SLuöt32
Ë0x00000000)

	)

712 
	#SL_CHARACTERENCODING_BINARY
 ((
SLuöt32
Ë0x00000001)

	)

713 
	#SL_CHARACTERENCODING_ASCII
 ((
SLuöt32
Ë0x00000002)

	)

714 
	#SL_CHARACTERENCODING_BIG5
 ((
SLuöt32
Ë0x00000003)

	)

715 
	#SL_CHARACTERENCODING_CODEPAGE1252
 ((
SLuöt32
Ë0x00000004)

	)

716 
	#SL_CHARACTERENCODING_GB2312
 ((
SLuöt32
Ë0x00000005)

	)

717 
	#SL_CHARACTERENCODING_HZGB2312
 ((
SLuöt32
Ë0x00000006)

	)

718 
	#SL_CHARACTERENCODING_GB12345
 ((
SLuöt32
Ë0x00000007)

	)

719 
	#SL_CHARACTERENCODING_GB18030
 ((
SLuöt32
Ë0x00000008)

	)

720 
	#SL_CHARACTERENCODING_GBK
 ((
SLuöt32
Ë0x00000009)

	)

721 
	#SL_CHARACTERENCODING_IMAPUTF7
 ((
SLuöt32
Ë0x0000000A)

	)

722 
	#SL_CHARACTERENCODING_ISO2022JP
 ((
SLuöt32
Ë0x0000000B)

	)

723 
	#SL_CHARACTERENCODING_ISO2022JP1
 ((
SLuöt32
Ë0x0000000B)

	)

724 
	#SL_CHARACTERENCODING_ISO88591
 ((
SLuöt32
Ë0x0000000C)

	)

725 
	#SL_CHARACTERENCODING_ISO885910
 ((
SLuöt32
Ë0x0000000D)

	)

726 
	#SL_CHARACTERENCODING_ISO885913
 ((
SLuöt32
Ë0x0000000E)

	)

727 
	#SL_CHARACTERENCODING_ISO885914
 ((
SLuöt32
Ë0x0000000F)

	)

728 
	#SL_CHARACTERENCODING_ISO885915
 ((
SLuöt32
Ë0x00000010)

	)

729 
	#SL_CHARACTERENCODING_ISO88592
 ((
SLuöt32
Ë0x00000011)

	)

730 
	#SL_CHARACTERENCODING_ISO88593
 ((
SLuöt32
Ë0x00000012)

	)

731 
	#SL_CHARACTERENCODING_ISO88594
 ((
SLuöt32
Ë0x00000013)

	)

732 
	#SL_CHARACTERENCODING_ISO88595
 ((
SLuöt32
Ë0x00000014)

	)

733 
	#SL_CHARACTERENCODING_ISO88596
 ((
SLuöt32
Ë0x00000015)

	)

734 
	#SL_CHARACTERENCODING_ISO88597
 ((
SLuöt32
Ë0x00000016)

	)

735 
	#SL_CHARACTERENCODING_ISO88598
 ((
SLuöt32
Ë0x00000017)

	)

736 
	#SL_CHARACTERENCODING_ISO88599
 ((
SLuöt32
Ë0x00000018)

	)

737 
	#SL_CHARACTERENCODING_ISOEUCJP
 ((
SLuöt32
Ë0x00000019)

	)

738 
	#SL_CHARACTERENCODING_SHIFTJIS
 ((
SLuöt32
Ë0x0000001A)

	)

739 
	#SL_CHARACTERENCODING_SMS7BIT
 ((
SLuöt32
Ë0x0000001B)

	)

740 
	#SL_CHARACTERENCODING_UTF7
 ((
SLuöt32
Ë0x0000001C)

	)

741 
	#SL_CHARACTERENCODING_UTF8
 ((
SLuöt32
Ë0x0000001D)

	)

742 
	#SL_CHARACTERENCODING_JAVACONFORMANTUTF8
 ((
SLuöt32
Ë0x0000001E)

	)

743 
	#SL_CHARACTERENCODING_UTF16BE
 ((
SLuöt32
Ë0x0000001F)

	)

744 
	#SL_CHARACTERENCODING_UTF16LE
 ((
SLuöt32
Ë0x00000020)

	)

747 
	#SL_METADATA_FILTER_KEY
 ((
SLuöt8
Ë0x01)

	)

748 
	#SL_METADATA_FILTER_LANG
 ((
SLuöt8
Ë0x02)

	)

749 
	#SL_METADATA_FILTER_ENCODING
 ((
SLuöt8
Ë0x04)

	)

752 
	sSLMëad©aInfo_
 {

753 
SLuöt32
 
	gsize
;

754 
SLuöt32
 
	gícodög
;

755 
SLch¨
 
	gœngCou¡ry
[16];

756 
SLuöt8
 
	gd©a
[1];

757 } 
	tSLMëad©aInfo
;

759 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_METADATAEXTRACTION
;

761 
	gSLMëad©aExåa˘i⁄Itf_
;

762 c⁄° 
	tSLMëad©aExåa˘i⁄Itf_
 * c⁄° * 
	tSLMëad©aExåa˘i⁄Itf
;

765 
	sSLMëad©aExåa˘i⁄Itf_
 {

766 
SLªsu…
 (*
GëIãmCou¡
) (

767 
SLMëad©aExåa˘i⁄Itf
 
	g£lf
,

768 
SLuöt32
 *
	gpIãmCou¡


770 
SLªsu…
 (*
GëKeySize
) (

771 
SLMëad©aExåa˘i⁄Itf
 
	g£lf
,

772 
SLuöt32
 
	gödex
,

773 
SLuöt32
 *
	gpKeySize


775 
SLªsu…
 (*
GëKey
) (

776 
SLMëad©aExåa˘i⁄Itf
 
	g£lf
,

777 
SLuöt32
 
	gödex
,

778 
SLuöt32
 
	gkeySize
,

779 
SLMëad©aInfo
 *
	gpKey


781 
SLªsu…
 (*
GëVÆueSize
) (

782 
SLMëad©aExåa˘i⁄Itf
 
	g£lf
,

783 
SLuöt32
 
	gödex
,

784 
SLuöt32
 *
	gpVÆueSize


786 
SLªsu…
 (*
GëVÆue
) (

787 
SLMëad©aExåa˘i⁄Itf
 
	g£lf
,

788 
SLuöt32
 
	gödex
,

789 
SLuöt32
 
	gvÆueSize
,

790 
SLMëad©aInfo
 *
	gpVÆue


792 
SLªsu…
 (*
AddKeyFûãr
) (

793 
SLMëad©aExåa˘i⁄Itf
 
	g£lf
,

794 
SLuöt32
 
	gkeySize
,

795 c⁄° *
	gpKey
,

796 
SLuöt32
 
	gkeyEncodög
,

797 c⁄° 
SLch¨
 *
	gpVÆueL™gCou¡ry
,

798 
SLuöt32
 
	gvÆueEncodög
,

799 
SLuöt8
 
	gfûãrMask


801 
SLªsu…
 (*
CÀ¨KeyFûãr
) (

802 
SLMëad©aExåa˘i⁄Itf
 
	g£lf


811 
	#SL_METADATATRAVERSALMODE_ALL
 ((
SLuöt32
Ë0x00000001)

	)

812 
	#SL_METADATATRAVERSALMODE_NODE
 ((
SLuöt32
Ë0x00000002)

	)

815 
	#SL_NODETYPE_UNSPECIFIED
 ((
SLuöt32
Ë0x00000001)

	)

816 
	#SL_NODETYPE_AUDIO
 ((
SLuöt32
Ë0x00000002)

	)

817 
	#SL_NODETYPE_VIDEO
 ((
SLuöt32
Ë0x00000003)

	)

818 
	#SL_NODETYPE_IMAGE
 ((
SLuöt32
Ë0x00000004)

	)

820 
	#SL_NODE_PARENT
 0xFFFFFFFF

	)

822 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_METADATATRAVERSAL
;

824 
	gSLMëad©aTøvîßlItf_
;

825 c⁄° 
	tSLMëad©aTøvîßlItf_
 * c⁄° * 
	tSLMëad©aTøvîßlItf
;

827 
	sSLMëad©aTøvîßlItf_
 {

828 
SLªsu…
 (*
SëMode
) (

829 
SLMëad©aTøvîßlItf
 
	g£lf
,

830 
SLuöt32
 
	gmode


832 
SLªsu…
 (*
GëChûdCou¡
) (

833 
SLMëad©aTøvîßlItf
 
	g£lf
,

834 
SLuöt32
 *
	gpCou¡


836 
SLªsu…
 (*
GëChûdMIMETy≥Size
) (

837 
SLMëad©aTøvîßlItf
 
	g£lf
,

838 
SLuöt32
 
	gödex
,

839 
SLuöt32
 *
	gpSize


841 
SLªsu…
 (*
GëChûdInfo
) (

842 
SLMëad©aTøvîßlItf
 
	g£lf
,

843 
SLuöt32
 
	gödex
,

844 
SLöt32
 *
	gpNodeID
,

845 
SLuöt32
 *
	gpTy≥
,

846 
SLuöt32
 
	gsize
,

847 
SLch¨
 *
	gpMimeTy≥


849 
SLªsu…
 (*
SëA˘iveNode
) (

850 
SLMëad©aTøvîßlItf
 
	g£lf
,

851 
SLuöt32
 
	gödex


859 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_DYNAMICSOURCE
;

861 
	gSLDy«micSour˚Itf_
;

862 c⁄° 
	tSLDy«micSour˚Itf_
 * c⁄° * 
	tSLDy«micSour˚Itf
;

864 
	sSLDy«micSour˚Itf_
 {

865 
SLªsu…
 (*
SëSour˚
) (

866 
SLDy«micSour˚Itf
 
	g£lf
,

867 
SLD©aSour˚
 *
	gpD©aSour˚


875 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_OUTPUTMIX
;

877 
	gSLOuçutMixItf_
;

878 c⁄° 
	tSLOuçutMixItf_
 * c⁄° * 
	tSLOuçutMixItf
;

880 –*
	g¶MixDevi˚Ch™geCÆlback
) (

881 
	tSLOuçutMixItf
 
	tˇŒî
,

882 *
	tpC⁄ãxt


886 
	sSLOuçutMixItf_
 {

887 
SLªsu…
 (*
GëDe°ö©i⁄OuçutDevi˚IDs
) (

888 
SLOuçutMixItf
 
	g£lf
,

889 
SLöt32
 *
	gpNumDevi˚s
,

890 
SLuöt32
 *
	gpDevi˚IDs


892 
SLªsu…
 (*
Regi°îDevi˚Ch™geCÆlback
) (

893 
SLOuçutMixItf
 
	g£lf
,

894 
¶MixDevi˚Ch™geCÆlback
 
	gˇŒback
,

895 *
	gpC⁄ãxt


897 
SLªsu…
 (*
ReRouã
)(

898 
SLOuçutMixItf
 
	g£lf
,

899 
SLöt32
 
	gnumOuçutDevi˚s
,

900 
SLuöt32
 *
	gpOuçutDevi˚IDs


910 
	#SL_PLAYSTATE_STOPPED
 ((
SLuöt32
Ë0x00000001)

	)

911 
	#SL_PLAYSTATE_PAUSED
 ((
SLuöt32
Ë0x00000002)

	)

912 
	#SL_PLAYSTATE_PLAYING
 ((
SLuöt32
Ë0x00000003)

	)

915 
	#SL_PLAYEVENT_HEADATEND
 ((
SLuöt32
Ë0x00000001)

	)

916 
	#SL_PLAYEVENT_HEADATMARKER
 ((
SLuöt32
Ë0x00000002)

	)

917 
	#SL_PLAYEVENT_HEADATNEWPOS
 ((
SLuöt32
Ë0x00000004)

	)

918 
	#SL_PLAYEVENT_HEADMOVING
 ((
SLuöt32
Ë0x00000008)

	)

919 
	#SL_PLAYEVENT_HEADSTALLED
 ((
SLuöt32
Ë0x00000010)

	)

921 
	#SL_TIME_UNKNOWN
 ((
SLuöt32
Ë0xFFFFFFFF)

	)

924 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_PLAY
;

928 
	gSLPœyItf_
;

929 c⁄° 
	tSLPœyItf_
 * c⁄° * 
	tSLPœyItf
;

931 –*
	g¶PœyCÆlback
) (

932 
	tSLPœyItf
 
	tˇŒî
,

933 *
	tpC⁄ãxt
,

934 
	tSLuöt32
 
	tevít


937 
	sSLPœyItf_
 {

938 
SLªsu…
 (*
SëPœySèã
) (

939 
SLPœyItf
 
	g£lf
,

940 
SLuöt32
 
	g°©e


942 
SLªsu…
 (*
GëPœySèã
) (

943 
SLPœyItf
 
	g£lf
,

944 
SLuöt32
 *
	gpSèã


946 
SLªsu…
 (*
GëDuøti⁄
) (

947 
SLPœyItf
 
	g£lf
,

948 
SLmûli£c⁄d
 *
	gpM£c


950 
SLªsu…
 (*
GëPosôi⁄
) (

951 
SLPœyItf
 
	g£lf
,

952 
SLmûli£c⁄d
 *
	gpM£c


954 
SLªsu…
 (*
Regi°îCÆlback
) (

955 
SLPœyItf
 
	g£lf
,

956 
¶PœyCÆlback
 
	gˇŒback
,

957 *
	gpC⁄ãxt


959 
SLªsu…
 (*
SëCÆlbackEvítsMask
) (

960 
SLPœyItf
 
	g£lf
,

961 
SLuöt32
 
	gevítFœgs


963 
SLªsu…
 (*
GëCÆlbackEvítsMask
) (

964 
SLPœyItf
 
	g£lf
,

965 
SLuöt32
 *
	gpEvítFœgs


967 
SLªsu…
 (*
SëM¨kîPosôi⁄
) (

968 
SLPœyItf
 
	g£lf
,

969 
SLmûli£c⁄d
 
	gmSec


971 
SLªsu…
 (*
CÀ¨M¨kîPosôi⁄
) (

972 
SLPœyItf
 
	g£lf


974 
SLªsu…
 (*
GëM¨kîPosôi⁄
) (

975 
SLPœyItf
 
	g£lf
,

976 
SLmûli£c⁄d
 *
	gpM£c


978 
SLªsu…
 (*
SëPosôi⁄Upd©ePîiod
) (

979 
SLPœyItf
 
	g£lf
,

980 
SLmûli£c⁄d
 
	gmSec


982 
SLªsu…
 (*
GëPosôi⁄Upd©ePîiod
) (

983 
SLPœyItf
 
	g£lf
,

984 
SLmûli£c⁄d
 *
	gpM£c


992 
	#SL_PREFETCHEVENT_STATUSCHANGE
 ((
SLuöt32
Ë0x00000001)

	)

993 
	#SL_PREFETCHEVENT_FILLLEVELCHANGE
 ((
SLuöt32
Ë0x00000002)

	)

995 
	#SL_PREFETCHSTATUS_UNDERFLOW
 ((
SLuöt32
Ë0x00000001)

	)

996 
	#SL_PREFETCHSTATUS_SUFFICIENTDATA
 ((
SLuöt32
Ë0x00000002)

	)

997 
	#SL_PREFETCHSTATUS_OVERFLOW
 ((
SLuöt32
Ë0x00000003)

	)

1000 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_PREFETCHSTATUS
;

1005 
	gSLPª„tchSètusItf_
;

1006 c⁄° 
	tSLPª„tchSètusItf_
 * c⁄° * 
	tSLPª„tchSètusItf
;

1008 –*
	g¶Pª„tchCÆlback
) (

1009 
	tSLPª„tchSètusItf
 
	tˇŒî
,

1010 *
	tpC⁄ãxt
,

1011 
	tSLuöt32
 
	tevít


1014 
	sSLPª„tchSètusItf_
 {

1015 
SLªsu…
 (*
GëPª„tchSètus
) (

1016 
SLPª„tchSètusItf
 
	g£lf
,

1017 
SLuöt32
 *
	gpSètus


1019 
SLªsu…
 (*
GëFûlLevñ
) (

1020 
SLPª„tchSètusItf
 
	g£lf
,

1021 
SL≥rmûÀ
 *
	gpLevñ


1023 
SLªsu…
 (*
Regi°îCÆlback
) (

1024 
SLPª„tchSètusItf
 
	g£lf
,

1025 
¶Pª„tchCÆlback
 
	gˇŒback
,

1026 *
	gpC⁄ãxt


1028 
SLªsu…
 (*
SëCÆlbackEvítsMask
) (

1029 
SLPª„tchSètusItf
 
	g£lf
,

1030 
SLuöt32
 
	gevítFœgs


1032 
SLªsu…
 (*
GëCÆlbackEvítsMask
) (

1033 
SLPª„tchSètusItf
 
	g£lf
,

1034 
SLuöt32
 *
	gpEvítFœgs


1036 
SLªsu…
 (*
SëFûlUpd©ePîiod
) (

1037 
SLPª„tchSètusItf
 
	g£lf
,

1038 
SL≥rmûÀ
 
	g≥riod


1040 
SLªsu…
 (*
GëFûlUpd©ePîiod
) (

1041 
SLPª„tchSètusItf
 
	g£lf
,

1042 
SL≥rmûÀ
 *
	gpPîiod


1050 
	#SL_RATEPROP_RESERVED1
 ((
SLuöt32
Ë0x00000001)

	)

1051 
	#SL_RATEPROP_RESERVED2
 ((
SLuöt32
Ë0x00000002)

	)

1052 
	#SL_RATEPROP_SILENTAUDIO
 ((
SLuöt32
Ë0x00000100)

	)

1053 
	#SL_RATEPROP_STAGGEREDAUDIO
 ((
SLuöt32
Ë0x00000200)

	)

1054 
	#SL_RATEPROP_NOPITCHCORAUDIO
 ((
SLuöt32
Ë0x00000400)

	)

1055 
	#SL_RATEPROP_PITCHCORAUDIO
 ((
SLuöt32
Ë0x00000800)

	)

1058 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_PLAYBACKRATE
;

1060 
	gSLPœybackR©eItf_
;

1061 c⁄° 
	tSLPœybackR©eItf_
 * c⁄° * 
	tSLPœybackR©eItf
;

1063 
	sSLPœybackR©eItf_
 {

1064 
SLªsu…
 (*
SëR©e
)(

1065 
SLPœybackR©eItf
 
	g£lf
,

1066 
SL≥rmûÀ
 
	gøã


1068 
SLªsu…
 (*
GëR©e
)(

1069 
SLPœybackR©eItf
 
	g£lf
,

1070 
SL≥rmûÀ
 *
	gpR©e


1072 
SLªsu…
 (*
SëPr›îtyC⁄°øöts
)(

1073 
SLPœybackR©eItf
 
	g£lf
,

1074 
SLuöt32
 
	gc⁄°øöts


1076 
SLªsu…
 (*
GëPr›îtõs
)(

1077 
SLPœybackR©eItf
 
	g£lf
,

1078 
SLuöt32
 *
	gpPr›îtõs


1080 
SLªsu…
 (*
GëC≠abûôõsOfR©e
)(

1081 
SLPœybackR©eItf
 
	g£lf
,

1082 
SL≥rmûÀ
 
	gøã
,

1083 
SLuöt32
 *
	gpC≠abûôõs


1085 
SLªsu…
 (*
GëR©eR™ge
) (

1086 
SLPœybackR©eItf
 
	g£lf
,

1087 
SLuöt8
 
	gödex
,

1088 
SL≥rmûÀ
 *
	gpMöR©e
,

1089 
SL≥rmûÀ
 *
	gpMaxR©e
,

1090 
SL≥rmûÀ
 *
	gpSãpSize
,

1091 
SLuöt32
 *
	gpC≠abûôõs


1099 
	#SL_SEEKMODE_FAST
 ((
SLuöt32
Ë0x0001)

	)

1100 
	#SL_SEEKMODE_ACCURATE
 ((
SLuöt32
Ë0x0002)

	)

1102 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_SEEK
;

1104 
	gSLSìkItf_
;

1105 c⁄° 
	tSLSìkItf_
 * c⁄° * 
	tSLSìkItf
;

1107 
	sSLSìkItf_
 {

1108 
SLªsu…
 (*
SëPosôi⁄
)(

1109 
SLSìkItf
 
	g£lf
,

1110 
SLmûli£c⁄d
 
	gpos
,

1111 
SLuöt32
 
	g£ekMode


1113 
SLªsu…
 (*
SëLo›
)(

1114 
SLSìkItf
 
	g£lf
,

1115 
SLboﬁón
 
	glo›E«bÀ
,

1116 
SLmûli£c⁄d
 
	g°¨tPos
,

1117 
SLmûli£c⁄d
 
	gídPos


1119 
SLªsu…
 (*
GëLo›
)(

1120 
SLSìkItf
 
	g£lf
,

1121 
SLboﬁón
 *
	gpLo›E«bÀd
,

1122 
SLmûli£c⁄d
 *
	gpSèπPos
,

1123 
SLmûli£c⁄d
 *
	gpEndPos


1132 
	#SL_RECORDSTATE_STOPPED
 ((
SLuöt32
Ë0x00000001)

	)

1133 
	#SL_RECORDSTATE_PAUSED
 ((
SLuöt32
Ë0x00000002)

	)

1134 
	#SL_RECORDSTATE_RECORDING
 ((
SLuöt32
Ë0x00000003)

	)

1138 
	#SL_RECORDEVENT_HEADATLIMIT
 ((
SLuöt32
Ë0x00000001)

	)

1139 
	#SL_RECORDEVENT_HEADATMARKER
 ((
SLuöt32
Ë0x00000002)

	)

1140 
	#SL_RECORDEVENT_HEADATNEWPOS
 ((
SLuöt32
Ë0x00000004)

	)

1141 
	#SL_RECORDEVENT_HEADMOVING
 ((
SLuöt32
Ë0x00000008)

	)

1142 
	#SL_RECORDEVENT_HEADSTALLED
 ((
SLuöt32
Ë0x00000010)

	)

1144 
	#SL_RECORDEVENT_BUFFER_INSUFFICIENT
 ((
SLuöt32
Ë0x00000020)

	)

1145 
	#SL_RECORDEVENT_BUFFER_FULL
 ((
SLuöt32
Ë0x00000020)

	)

1148 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_RECORD
;

1150 
	gSLRec‹dItf_
;

1151 c⁄° 
	tSLRec‹dItf_
 * c⁄° * 
	tSLRec‹dItf
;

1153 –*
	g¶Rec‹dCÆlback
) (

1154 
	tSLRec‹dItf
 
	tˇŒî
,

1155 *
	tpC⁄ãxt
,

1156 
	tSLuöt32
 
	tevít


1160 
	sSLRec‹dItf_
 {

1161 
SLªsu…
 (*
SëRec‹dSèã
) (

1162 
SLRec‹dItf
 
	g£lf
,

1163 
SLuöt32
 
	g°©e


1165 
SLªsu…
 (*
GëRec‹dSèã
) (

1166 
SLRec‹dItf
 
	g£lf
,

1167 
SLuöt32
 *
	gpSèã


1169 
SLªsu…
 (*
SëDuøti⁄Limô
) (

1170 
SLRec‹dItf
 
	g£lf
,

1171 
SLmûli£c⁄d
 
	gm£c


1173 
SLªsu…
 (*
GëPosôi⁄
) (

1174 
SLRec‹dItf
 
	g£lf
,

1175 
SLmûli£c⁄d
 *
	gpM£c


1177 
SLªsu…
 (*
Regi°îCÆlback
) (

1178 
SLRec‹dItf
 
	g£lf
,

1179 
¶Rec‹dCÆlback
 
	gˇŒback
,

1180 *
	gpC⁄ãxt


1182 
SLªsu…
 (*
SëCÆlbackEvítsMask
) (

1183 
SLRec‹dItf
 
	g£lf
,

1184 
SLuöt32
 
	gevítFœgs


1186 
SLªsu…
 (*
GëCÆlbackEvítsMask
) (

1187 
SLRec‹dItf
 
	g£lf
,

1188 
SLuöt32
 *
	gpEvítFœgs


1190 
SLªsu…
 (*
SëM¨kîPosôi⁄
) (

1191 
SLRec‹dItf
 
	g£lf
,

1192 
SLmûli£c⁄d
 
	gmSec


1194 
SLªsu…
 (*
CÀ¨M¨kîPosôi⁄
) (

1195 
SLRec‹dItf
 
	g£lf


1197 
SLªsu…
 (*
GëM¨kîPosôi⁄
) (

1198 
SLRec‹dItf
 
	g£lf
,

1199 
SLmûli£c⁄d
 *
	gpM£c


1201 
SLªsu…
 (*
SëPosôi⁄Upd©ePîiod
) (

1202 
SLRec‹dItf
 
	g£lf
,

1203 
SLmûli£c⁄d
 
	gmSec


1205 
SLªsu…
 (*
GëPosôi⁄Upd©ePîiod
) (

1206 
SLRec‹dItf
 
	g£lf
,

1207 
SLmûli£c⁄d
 *
	gpM£c


1215 
	#SL_EQUALIZER_UNDEFINED
 ((
SLuöt16
Ë0xFFFF)

	)

1217 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_EQUALIZER
;

1219 
	gSLEquÆizîItf_
;

1220 c⁄° 
	tSLEquÆizîItf_
 * c⁄° * 
	tSLEquÆizîItf
;

1222 
	sSLEquÆizîItf_
 {

1223 
SLªsu…
 (*
SëE«bÀd
)(

1224 
SLEquÆizîItf
 
	g£lf
,

1225 
SLboﬁón
 
	gíabÀd


1227 
SLªsu…
 (*
IsE«bÀd
)(

1228 
SLEquÆizîItf
 
	g£lf
,

1229 
SLboﬁón
 *
	gpE«bÀd


1231 
SLªsu…
 (*
GëNumbîOfB™ds
)(

1232 
SLEquÆizîItf
 
	g£lf
,

1233 
SLuöt16
 *
	gpAmou¡


1235 
SLªsu…
 (*
GëB™dLevñR™ge
)(

1236 
SLEquÆizîItf
 
	g£lf
,

1237 
SLmûlibñ
 *
	gpMö
,

1238 
SLmûlibñ
 *
	gpMax


1240 
SLªsu…
 (*
SëB™dLevñ
)(

1241 
SLEquÆizîItf
 
	g£lf
,

1242 
SLuöt16
 
	gb™d
,

1243 
SLmûlibñ
 
	gÀvñ


1245 
SLªsu…
 (*
GëB™dLevñ
)(

1246 
SLEquÆizîItf
 
	g£lf
,

1247 
SLuöt16
 
	gb™d
,

1248 
SLmûlibñ
 *
	gpLevñ


1250 
SLªsu…
 (*
GëCíãrFªq
)(

1251 
SLEquÆizîItf
 
	g£lf
,

1252 
SLuöt16
 
	gb™d
,

1253 
SLmûliHîtz
 *
	gpCíãr


1255 
SLªsu…
 (*
GëB™dFªqR™ge
)(

1256 
SLEquÆizîItf
 
	g£lf
,

1257 
SLuöt16
 
	gb™d
,

1258 
SLmûliHîtz
 *
	gpMö
,

1259 
SLmûliHîtz
 *
	gpMax


1261 
SLªsu…
 (*
GëB™d
)(

1262 
SLEquÆizîItf
 
	g£lf
,

1263 
SLmûliHîtz
 
	g‰equícy
,

1264 
SLuöt16
 *
	gpB™d


1266 
SLªsu…
 (*
GëCuºítPª£t
)(

1267 
SLEquÆizîItf
 
	g£lf
,

1268 
SLuöt16
 *
	gpPª£t


1270 
SLªsu…
 (*
U£Pª£t
)(

1271 
SLEquÆizîItf
 
	g£lf
,

1272 
SLuöt16
 
	gödex


1274 
SLªsu…
 (*
GëNumbîOfPª£ts
)(

1275 
SLEquÆizîItf
 
	g£lf
,

1276 
SLuöt16
 *
	gpNumPª£ts


1278 
SLªsu…
 (*
GëPª£tName
)(

1279 
SLEquÆizîItf
 
	g£lf
,

1280 
SLuöt16
 
	gödex
,

1281 c⁄° 
SLch¨
 ** 
	gµName


1289 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_VOLUME
;

1291 
	gSLVﬁumeItf_
;

1292 c⁄° 
	tSLVﬁumeItf_
 * c⁄° * 
	tSLVﬁumeItf
;

1294 
	sSLVﬁumeItf_
 {

1295 
SLªsu…
 (*
SëVﬁumeLevñ
) (

1296 
SLVﬁumeItf
 
	g£lf
,

1297 
SLmûlibñ
 
	gÀvñ


1299 
SLªsu…
 (*
GëVﬁumeLevñ
) (

1300 
SLVﬁumeItf
 
	g£lf
,

1301 
SLmûlibñ
 *
	gpLevñ


1303 
SLªsu…
 (*
GëMaxVﬁumeLevñ
) (

1304 
SLVﬁumeItf
 
	g£lf
,

1305 
SLmûlibñ
 *
	gpMaxLevñ


1307 
SLªsu…
 (*
SëMuã
) (

1308 
SLVﬁumeItf
 
	g£lf
,

1309 
SLboﬁón
 
	gmuã


1311 
SLªsu…
 (*
GëMuã
) (

1312 
SLVﬁumeItf
 
	g£lf
,

1313 
SLboﬁón
 *
	gpMuã


1315 
SLªsu…
 (*
E«bÀSãªoPosôi⁄
) (

1316 
SLVﬁumeItf
 
	g£lf
,

1317 
SLboﬁón
 
	gíabÀ


1319 
SLªsu…
 (*
IsE«bÀdSãªoPosôi⁄
) (

1320 
SLVﬁumeItf
 
	g£lf
,

1321 
SLboﬁón
 *
	gpE«bÀ


1323 
SLªsu…
 (*
SëSãªoPosôi⁄
) (

1324 
SLVﬁumeItf
 
	g£lf
,

1325 
SL≥rmûÀ
 
	g°îeoPosôi⁄


1327 
SLªsu…
 (*
GëSãªoPosôi⁄
) (

1328 
SLVﬁumeItf
 
	g£lf
,

1329 
SL≥rmûÀ
 *
	gpSãªoPosôi⁄


1338 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_DEVICEVOLUME
;

1340 
	gSLDevi˚VﬁumeItf_
;

1341 c⁄° 
	tSLDevi˚VﬁumeItf_
 * c⁄° * 
	tSLDevi˚VﬁumeItf
;

1343 
	sSLDevi˚VﬁumeItf_
 {

1344 
SLªsu…
 (*
GëVﬁumeSˇÀ
) (

1345 
SLDevi˚VﬁumeItf
 
	g£lf
,

1346 
SLuöt32
 
	gdevi˚ID
,

1347 
SLöt32
 *
	gpMöVÆue
,

1348 
SLöt32
 *
	gpMaxVÆue
,

1349 
SLboﬁón
 *
	gpIsMûlibñSˇÀ


1351 
SLªsu…
 (*
SëVﬁume
) (

1352 
SLDevi˚VﬁumeItf
 
	g£lf
,

1353 
SLuöt32
 
	gdevi˚ID
,

1354 
SLöt32
 
	gvﬁume


1356 
SLªsu…
 (*
GëVﬁume
) (

1357 
SLDevi˚VﬁumeItf
 
	g£lf
,

1358 
SLuöt32
 
	gdevi˚ID
,

1359 
SLöt32
 *
	gpVﬁume


1368 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_BUFFERQUEUE
;

1370 
	gSLBuf„rQueueItf_
;

1371 c⁄° 
	tSLBuf„rQueueItf_
 * c⁄° * 
	tSLBuf„rQueueItf
;

1373 –*
	g¶Buf„rQueueCÆlback
)(

1374 
	tSLBuf„rQueueItf
 
	tˇŒî
,

1375 *
	tpC⁄ãxt


1380 
	sSLBuf„rQueueSèã_
 {

1381 
SLuöt32
 
	gcou¡
;

1382 
SLuöt32
 
	g∂ayIndex
;

1383 } 
	tSLBuf„rQueueSèã
;

1386 
	sSLBuf„rQueueItf_
 {

1387 
SLªsu…
 (*
Enqueue
) (

1388 
SLBuf„rQueueItf
 
	g£lf
,

1389 c⁄° *
	gpBuf„r
,

1390 
SLuöt32
 
	gsize


1392 
SLªsu…
 (*
CÀ¨
) (

1393 
SLBuf„rQueueItf
 
	g£lf


1395 
SLªsu…
 (*
GëSèã
) (

1396 
SLBuf„rQueueItf
 
	g£lf
,

1397 
SLBuf„rQueueSèã
 *
	gpSèã


1399 
SLªsu…
 (*
Regi°îCÆlback
) (

1400 
SLBuf„rQueueItf
 
	g£lf
,

1401 
¶Buf„rQueueCÆlback
 
	gˇŒback
,

1402 * 
	gpC⁄ãxt


1411 
	#SL_REVERBPRESET_NONE
 ((
SLuöt16
Ë0x0000)

	)

1412 
	#SL_REVERBPRESET_SMALLROOM
 ((
SLuöt16
Ë0x0001)

	)

1413 
	#SL_REVERBPRESET_MEDIUMROOM
 ((
SLuöt16
Ë0x0002)

	)

1414 
	#SL_REVERBPRESET_LARGEROOM
 ((
SLuöt16
Ë0x0003)

	)

1415 
	#SL_REVERBPRESET_MEDIUMHALL
 ((
SLuöt16
Ë0x0004)

	)

1416 
	#SL_REVERBPRESET_LARGEHALL
 ((
SLuöt16
Ë0x0005)

	)

1417 
	#SL_REVERBPRESET_PLATE
 ((
SLuöt16
Ë0x0006)

	)

1420 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_PRESETREVERB
;

1422 
	gSLPª£tRevîbItf_
;

1423 c⁄° 
	tSLPª£tRevîbItf_
 * c⁄° * 
	tSLPª£tRevîbItf
;

1425 
	sSLPª£tRevîbItf_
 {

1426 
SLªsu…
 (*
SëPª£t
) (

1427 
SLPª£tRevîbItf
 
	g£lf
,

1428 
SLuöt16
 
	g¥e£t


1430 
SLªsu…
 (*
GëPª£t
) (

1431 
SLPª£tRevîbItf
 
	g£lf
,

1432 
SLuöt16
 *
	gpPª£t


1441 
	#SL_I3DL2_ENVIRONMENT_PRESET_DEFAULT
 \

1442 { 
SL_MILLIBEL_MIN
, 0, 1000, 500, SL_MILLIBEL_MIN, 20, SL_MILLIBEL_MIN, 40, 1000,1000 }

	)

1443 
	#SL_I3DL2_ENVIRONMENT_PRESET_GENERIC
 \

1444 { -1000, -100, 1490, 830, -2602, 7, 200, 11, 1000,1000 }

	)

1445 
	#SL_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL
 \

1446 { -1000,-6000, 170, 100, -1204, 1, 207, 2, 1000,1000 }

	)

1447 
	#SL_I3DL2_ENVIRONMENT_PRESET_ROOM
 \

1448 { -1000, -454, 400, 830, -1646, 2, 53, 3, 1000,1000 }

	)

1449 
	#SL_I3DL2_ENVIRONMENT_PRESET_BATHROOM
 \

1450 { -1000,-1200, 1490, 540, -370, 7, 1030, 11, 1000, 600 }

	)

1451 
	#SL_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM
 \

1452 { -1000,-6000, 500, 100, -1376, 3, -1104, 4, 1000,1000 }

	)

1453 
	#SL_I3DL2_ENVIRONMENT_PRESET_STONEROOM
 \

1454 { -1000, -300, 2310, 640, -711, 12, 83, 17, 1000,1000 }

	)

1455 
	#SL_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM
 \

1456 { -1000, -476, 4320, 590, -789, 20, -289, 30, 1000,1000 }

	)

1457 
	#SL_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL
 \

1458 { -1000, -500, 3920, 700, -1230, 20, -2, 29, 1000,1000 }

	)

1459 
	#SL_I3DL2_ENVIRONMENT_PRESET_CAVE
 \

1460 { -1000, 0, 2910, 1300, -602, 15, -302, 22, 1000,1000 }

	)

1461 
	#SL_I3DL2_ENVIRONMENT_PRESET_ARENA
 \

1462 { -1000, -698, 7240, 330, -1166, 20, 16, 30, 1000,1000 }

	)

1463 
	#SL_I3DL2_ENVIRONMENT_PRESET_HANGAR
 \

1464 { -1000,-1000, 10050, 230, -602, 20, 198, 30, 1000,1000 }

	)

1465 
	#SL_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY
 \

1466 { -1000,-4000, 300, 100, -1831, 2, -1630, 30, 1000,1000 }

	)

1467 
	#SL_I3DL2_ENVIRONMENT_PRESET_HALLWAY
 \

1468 { -1000, -300, 1490, 590, -1219, 7, 441, 11, 1000,1000 }

	)

1469 
	#SL_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR
 \

1470 { -1000, -237, 2700, 790, -1214, 13, 395, 20, 1000,1000 }

	)

1471 
	#SL_I3DL2_ENVIRONMENT_PRESET_ALLEY
 \

1472 { -1000, -270, 1490, 860, -1204, 7, -4, 11, 1000,1000 }

	)

1473 
	#SL_I3DL2_ENVIRONMENT_PRESET_FOREST
 \

1474 { -1000,-3300, 1490, 540, -2560, 162, -613, 88, 790,1000 }

	)

1475 
	#SL_I3DL2_ENVIRONMENT_PRESET_CITY
 \

1476 { -1000, -800, 1490, 670, -2273, 7, -2217, 11, 500,1000 }

	)

1477 
	#SL_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS
 \

1478 { -1000,-2500, 1490, 210, -2780, 300, -2014, 100, 270,1000 }

	)

1479 
	#SL_I3DL2_ENVIRONMENT_PRESET_QUARRY
 \

1480 { -1000,-1000, 1490, 830, 
SL_MILLIBEL_MIN
, 61, 500, 25, 1000,1000 }

	)

1481 
	#SL_I3DL2_ENVIRONMENT_PRESET_PLAIN
 \

1482 { -1000,-2000, 1490, 500, -2466, 179, -2514, 100, 210,1000 }

	)

1483 
	#SL_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT
 \

1484 { -1000, 0, 1650, 1500, -1363, 8, -1153, 12, 1000,1000 }

	)

1485 
	#SL_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE
 \

1486 { -1000,-1000, 2810, 140, 429, 14, 648, 21, 800, 600 }

	)

1487 
	#SL_I3DL2_ENVIRONMENT_PRESET_UNDERWATER
 \

1488 { -1000,-4000, 1490, 100, -449, 7, 1700, 11, 1000,1000 }

	)

1489 
	#SL_I3DL2_ENVIRONMENT_PRESET_SMALLROOM
 \

1490 { -1000,-600, 1100, 830, -400, 5, 500, 10, 1000, 1000 }

	)

1491 
	#SL_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM
 \

1492 { -1000,-600, 1300, 830, -1000, 20, -200, 20, 1000, 1000 }

	)

1493 
	#SL_I3DL2_ENVIRONMENT_PRESET_LARGEROOM
 \

1494 { -1000,-600, 1500, 830, -1600, 5, -1000, 40, 1000, 1000 }

	)

1495 
	#SL_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL
 \

1496 { -1000,-600, 1800, 700, -1300, 15, -800, 30, 1000, 1000 }

	)

1497 
	#SL_I3DL2_ENVIRONMENT_PRESET_LARGEHALL
 \

1498 { -1000,-600, 1800, 700, -2000, 30, -1400, 60, 1000, 1000 }

	)

1499 
	#SL_I3DL2_ENVIRONMENT_PRESET_PLATE
 \

1500 { -1000,-200, 1300, 900, 0, 2, 0, 10, 1000, 750 }

	)

1503 
	sSLEnvú⁄míèlRevîbSëtögs_
 {

1504 
SLmûlibñ
 
	groomLevñ
;

1505 
SLmûlibñ
 
	groomHFLevñ
;

1506 
SLmûli£c⁄d
 
	gdeˇyTime
;

1507 
SL≥rmûÀ
 
	gdeˇyHFR©io
;

1508 
SLmûlibñ
 
	gªÊe˘i⁄sLevñ
;

1509 
SLmûli£c⁄d
 
	gªÊe˘i⁄sDñay
;

1510 
SLmûlibñ
 
	gªvîbLevñ
;

1511 
SLmûli£c⁄d
 
	gªvîbDñay
;

1512 
SL≥rmûÀ
 
	gdiffusi⁄
;

1513 
SL≥rmûÀ
 
	gdísôy
;

1514 } 
	tSLEnvú⁄míèlRevîbSëtögs
;

1519 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_ENVIRONMENTALREVERB
;

1522 
	gSLEnvú⁄míèlRevîbItf_
;

1523 c⁄° 
	tSLEnvú⁄míèlRevîbItf_
 * c⁄° * 
	tSLEnvú⁄míèlRevîbItf
;

1525 
	sSLEnvú⁄míèlRevîbItf_
 {

1526 
SLªsu…
 (*
SëRoomLevñ
) (

1527 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1528 
SLmûlibñ
 
	groom


1530 
SLªsu…
 (*
GëRoomLevñ
) (

1531 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1532 
SLmûlibñ
 *
	gpRoom


1534 
SLªsu…
 (*
SëRoomHFLevñ
) (

1535 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1536 
SLmûlibñ
 
	groomHF


1538 
SLªsu…
 (*
GëRoomHFLevñ
) (

1539 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1540 
SLmûlibñ
 *
	gpRoomHF


1542 
SLªsu…
 (*
SëDeˇyTime
) (

1543 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1544 
SLmûli£c⁄d
 
	gdeˇyTime


1546 
SLªsu…
 (*
GëDeˇyTime
) (

1547 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1548 
SLmûli£c⁄d
 *
	gpDeˇyTime


1550 
SLªsu…
 (*
SëDeˇyHFR©io
) (

1551 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1552 
SL≥rmûÀ
 
	gdeˇyHFR©io


1554 
SLªsu…
 (*
GëDeˇyHFR©io
) (

1555 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1556 
SL≥rmûÀ
 *
	gpDeˇyHFR©io


1558 
SLªsu…
 (*
SëReÊe˘i⁄sLevñ
) (

1559 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1560 
SLmûlibñ
 
	gªÊe˘i⁄sLevñ


1562 
SLªsu…
 (*
GëReÊe˘i⁄sLevñ
) (

1563 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1564 
SLmûlibñ
 *
	gpReÊe˘i⁄sLevñ


1566 
SLªsu…
 (*
SëReÊe˘i⁄sDñay
) (

1567 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1568 
SLmûli£c⁄d
 
	gªÊe˘i⁄sDñay


1570 
SLªsu…
 (*
GëReÊe˘i⁄sDñay
) (

1571 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1572 
SLmûli£c⁄d
 *
	gpReÊe˘i⁄sDñay


1574 
SLªsu…
 (*
SëRevîbLevñ
) (

1575 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1576 
SLmûlibñ
 
	gªvîbLevñ


1578 
SLªsu…
 (*
GëRevîbLevñ
) (

1579 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1580 
SLmûlibñ
 *
	gpRevîbLevñ


1582 
SLªsu…
 (*
SëRevîbDñay
) (

1583 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1584 
SLmûli£c⁄d
 
	gªvîbDñay


1586 
SLªsu…
 (*
GëRevîbDñay
) (

1587 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1588 
SLmûli£c⁄d
 *
	gpRevîbDñay


1590 
SLªsu…
 (*
SëDiffusi⁄
) (

1591 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1592 
SL≥rmûÀ
 
	gdiffusi⁄


1594 
SLªsu…
 (*
GëDiffusi⁄
) (

1595 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1596 
SL≥rmûÀ
 *
	gpDiffusi⁄


1598 
SLªsu…
 (*
SëDísôy
) (

1599 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1600 
SL≥rmûÀ
 
	gdísôy


1602 
SLªsu…
 (*
GëDísôy
) (

1603 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1604 
SL≥rmûÀ
 *
	gpDísôy


1606 
SLªsu…
 (*
SëEnvú⁄míèlRevîbPr›îtõs
) (

1607 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1608 c⁄° 
SLEnvú⁄míèlRevîbSëtögs
 *
	gpPr›îtõs


1610 
SLªsu…
 (*
GëEnvú⁄míèlRevîbPr›îtõs
) (

1611 
SLEnvú⁄míèlRevîbItf
 
	g£lf
,

1612 
SLEnvú⁄míèlRevîbSëtögs
 *
	gpPr›îtõs


1621 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_EFFECTSEND
;

1623 
	gSLEf„˘SídItf_
;

1624 c⁄° 
	tSLEf„˘SídItf_
 * c⁄° * 
	tSLEf„˘SídItf
;

1626 
	sSLEf„˘SídItf_
 {

1627 
SLªsu…
 (*
E«bÀEf„˘Síd
) (

1628 
SLEf„˘SídItf
 
	g£lf
,

1629 c⁄° *
	gpAuxEf„˘
,

1630 
SLboﬁón
 
	gíabÀ
,

1631 
SLmûlibñ
 
	göôülLevñ


1633 
SLªsu…
 (*
IsE«bÀd
) (

1634 
SLEf„˘SídItf
 
	g£lf
,

1635 c⁄° * 
	gpAuxEf„˘
,

1636 
SLboﬁón
 *
	gpE«bÀ


1638 
SLªsu…
 (*
SëDúe˘Levñ
) (

1639 
SLEf„˘SídItf
 
	g£lf
,

1640 
SLmûlibñ
 
	gdúe˘Levñ


1642 
SLªsu…
 (*
GëDúe˘Levñ
) (

1643 
SLEf„˘SídItf
 
	g£lf
,

1644 
SLmûlibñ
 *
	gpDúe˘Levñ


1646 
SLªsu…
 (*
SëSídLevñ
) (

1647 
SLEf„˘SídItf
 
	g£lf
,

1648 c⁄° *
	gpAuxEf„˘
,

1649 
SLmûlibñ
 
	g£ndLevñ


1651 
SLªsu…
 (*
GëSídLevñ
)(

1652 
SLEf„˘SídItf
 
	g£lf
,

1653 c⁄° *
	gpAuxEf„˘
,

1654 
SLmûlibñ
 *
	gpSídLevñ


1664 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_3DGROUPING
;

1667 
	gSL3DGroupögItf_
 ;

1668 c⁄° 
	tSL3DGroupögItf_
 * c⁄° * 
	tSL3DGroupögItf
;

1670 
	sSL3DGroupögItf_
 {

1671 
SLªsu…
 (*
Së3DGroup
) (

1672 
SL3DGroupögItf
 
	g£lf
,

1673 
SLObje˘Itf
 
	ggroup


1675 
SLªsu…
 (*
Gë3DGroup
) (

1676 
SL3DGroupögItf
 
	g£lf
,

1677 
SLObje˘Itf
 *
	gpGroup


1687 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_3DCOMMIT
;

1689 
	gSL3DCommôItf_
;

1690 c⁄° 
	tSL3DCommôItf_
* c⁄° * 
	tSL3DCommôItf
;

1692 
	sSL3DCommôItf_
 {

1693 
SLªsu…
 (*
Commô
) (

1694 
SL3DCommôItf
 
	g£lf


1696 
SLªsu…
 (*
SëDe„ºed
) (

1697 
SL3DCommôItf
 
	g£lf
,

1698 
SLboﬁón
 
	gde„ºed


1707 
	sSLVec3D_
 {

1708 
SLöt32
 
	gx
;

1709 
SLöt32
 
	gy
;

1710 
SLöt32
 
	gz
;

1711 } 
	tSLVec3D
;

1713 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_3DLOCATION
;

1715 
	gSL3DLoˇti⁄Itf_
;

1716 c⁄° 
	tSL3DLoˇti⁄Itf_
 * c⁄° * 
	tSL3DLoˇti⁄Itf
;

1718 
	sSL3DLoˇti⁄Itf_
 {

1719 
SLªsu…
 (*
SëLoˇti⁄C¨ãsün
) (

1720 
SL3DLoˇti⁄Itf
 
	g£lf
,

1721 c⁄° 
SLVec3D
 *
	gpLoˇti⁄


1723 
SLªsu…
 (*
SëLoˇti⁄Sphîiˇl
) (

1724 
SL3DLoˇti⁄Itf
 
	g£lf
,

1725 
SLmûlidegªe
 
	gazimuth
,

1726 
SLmûlidegªe
 
	gñev©i⁄
,

1727 
SLmûlimëî
 
	gdi°™˚


1729 
SLªsu…
 (*
Move
) (

1730 
SL3DLoˇti⁄Itf
 
	g£lf
,

1731 c⁄° 
SLVec3D
 *
	gpMovemít


1733 
SLªsu…
 (*
GëLoˇti⁄C¨ãsün
) (

1734 
SL3DLoˇti⁄Itf
 
	g£lf
,

1735 
SLVec3D
 *
	gpLoˇti⁄


1737 
SLªsu…
 (*
SëOrõ¡©i⁄Ve˘‹s
) (

1738 
SL3DLoˇti⁄Itf
 
	g£lf
,

1739 c⁄° 
SLVec3D
 *
	gpFr⁄t
,

1740 c⁄° 
SLVec3D
 *
	gpAbove


1742 
SLªsu…
 (*
SëOrõ¡©i⁄AngÀs
) (

1743 
SL3DLoˇti⁄Itf
 
	g£lf
,

1744 
SLmûlidegªe
 
	ghódög
,

1745 
SLmûlidegªe
 
	gpôch
,

1746 
SLmûlidegªe
 
	grﬁl


1748 
SLªsu…
 (*
RŸ©e
) (

1749 
SL3DLoˇti⁄Itf
 
	g£lf
,

1750 
SLmûlidegªe
 
	gthëa
,

1751 c⁄° 
SLVec3D
 *
	gpAxis


1753 
SLªsu…
 (*
GëOrõ¡©i⁄Ve˘‹s
) (

1754 
SL3DLoˇti⁄Itf
 
	g£lf
,

1755 
SLVec3D
 *
	gpFr⁄t
,

1756 
SLVec3D
 *
	gpUp


1766 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_3DDOPPLER
;

1768 
	gSL3DD›∂îItf_
;

1769 c⁄° 
	tSL3DD›∂îItf_
 * c⁄° * 
	tSL3DD›∂îItf
;

1771 
	sSL3DD›∂îItf_
 {

1772 
SLªsu…
 (*
SëVñocôyC¨ãsün
) (

1773 
SL3DD›∂îItf
 
	g£lf
,

1774 c⁄° 
SLVec3D
 *
	gpVñocôy


1776 
SLªsu…
 (*
SëVñocôySphîiˇl
) (

1777 
SL3DD›∂îItf
 
	g£lf
,

1778 
SLmûlidegªe
 
	gazimuth
,

1779 
SLmûlidegªe
 
	gñev©i⁄
,

1780 
SLmûlimëî
 
	g•ìd


1782 
SLªsu…
 (*
GëVñocôyC¨ãsün
) (

1783 
SL3DD›∂îItf
 
	g£lf
,

1784 
SLVec3D
 *
	gpVñocôy


1786 
SLªsu…
 (*
SëD›∂îFa˘‹
) (

1787 
SL3DD›∂îItf
 
	g£lf
,

1788 
SL≥rmûÀ
 
	gd›∂îFa˘‹


1790 
SLªsu…
 (*
GëD›∂îFa˘‹
) (

1791 
SL3DD›∂îItf
 
	g£lf
,

1792 
SL≥rmûÀ
 *
	gpD›∂îFa˘‹


1800 
	#SL_ROLLOFFMODEL_EXPONENTIAL
 ((
SLuöt32
Ë0x00000000)

	)

1801 
	#SL_ROLLOFFMODEL_LINEAR
 ((
SLuöt32
Ë0x00000001)

	)

1804 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_3DSOURCE
;

1806 
	gSL3DSour˚Itf_
;

1807 c⁄° 
	tSL3DSour˚Itf_
 * c⁄° * 
	tSL3DSour˚Itf
;

1809 
	sSL3DSour˚Itf_
 {

1810 
SLªsu…
 (*
SëHódRñ©ive
) (

1811 
SL3DSour˚Itf
 
	g£lf
,

1812 
SLboﬁón
 
	ghódRñ©ive


1814 
SLªsu…
 (*
GëHódRñ©ive
) (

1815 
SL3DSour˚Itf
 
	g£lf
,

1816 
SLboﬁón
 *
	gpHódRñ©ive


1818 
SLªsu…
 (*
SëRﬁloffDi°™˚s
) (

1819 
SL3DSour˚Itf
 
	g£lf
,

1820 
SLmûlimëî
 
	gmöDi°™˚
,

1821 
SLmûlimëî
 
	gmaxDi°™˚


1823 
SLªsu…
 (*
GëRﬁloffDi°™˚s
) (

1824 
SL3DSour˚Itf
 
	g£lf
,

1825 
SLmûlimëî
 *
	gpMöDi°™˚
,

1826 
SLmûlimëî
 *
	gpMaxDi°™˚


1828 
SLªsu…
 (*
SëRﬁloffMaxDi°™˚Muã
) (

1829 
SL3DSour˚Itf
 
	g£lf
,

1830 
SLboﬁón
 
	gmuã


1832 
SLªsu…
 (*
GëRﬁloffMaxDi°™˚Muã
) (

1833 
SL3DSour˚Itf
 
	g£lf
,

1834 
SLboﬁón
 *
	gpMuã


1836 
SLªsu…
 (*
SëRﬁloffFa˘‹
) (

1837 
SL3DSour˚Itf
 
	g£lf
,

1838 
SL≥rmûÀ
 
	grﬁloffFa˘‹


1840 
SLªsu…
 (*
GëRﬁloffFa˘‹
) (

1841 
SL3DSour˚Itf
 
	g£lf
,

1842 
SL≥rmûÀ
 *
	gpRﬁloffFa˘‹


1844 
SLªsu…
 (*
SëRoomRﬁloffFa˘‹
) (

1845 
SL3DSour˚Itf
 
	g£lf
,

1846 
SL≥rmûÀ
 
	groomRﬁloffFa˘‹


1848 
SLªsu…
 (*
GëRoomRﬁloffFa˘‹
) (

1849 
SL3DSour˚Itf
 
	g£lf
,

1850 
SL≥rmûÀ
 *
	gpRoomRﬁloffFa˘‹


1852 
SLªsu…
 (*
SëRﬁloffModñ
) (

1853 
SL3DSour˚Itf
 
	g£lf
,

1854 
SLuöt8
 
	gmodñ


1856 
SLªsu…
 (*
GëRﬁloffModñ
) (

1857 
SL3DSour˚Itf
 
	g£lf
,

1858 
SLuöt8
 *
	gpModñ


1860 
SLªsu…
 (*
SëC⁄e
) (

1861 
SL3DSour˚Itf
 
	g£lf
,

1862 
SLmûlidegªe
 
	gö√rAngÀ
,

1863 
SLmûlidegªe
 
	gouãrAngÀ
,

1864 
SLmûlibñ
 
	gouãrLevñ


1866 
SLªsu…
 (*
GëC⁄e
) (

1867 
SL3DSour˚Itf
 
	g£lf
,

1868 
SLmûlidegªe
 *
	gpI¬îAngÀ
,

1869 
SLmûlidegªe
 *
	gpOuãrAngÀ
,

1870 
SLmûlibñ
 *
	gpOuãrLevñ


1878 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_3DMACROSCOPIC
;

1880 
	gSL3DMa¸osc›icItf_
;

1881 c⁄° 
	tSL3DMa¸osc›icItf_
 * c⁄° * 
	tSL3DMa¸osc›icItf
;

1883 
	sSL3DMa¸osc›icItf_
 {

1884 
SLªsu…
 (*
SëSize
) (

1885 
SL3DMa¸osc›icItf
 
	g£lf
,

1886 
SLmûlimëî
 
	gwidth
,

1887 
SLmûlimëî
 
	gheight
,

1888 
SLmûlimëî
 
	gdïth


1890 
SLªsu…
 (*
GëSize
) (

1891 
SL3DMa¸osc›icItf
 
	g£lf
,

1892 
SLmûlimëî
 *
	gpWidth
,

1893 
SLmûlimëî
 *
	gpHeight
,

1894 
SLmûlimëî
 *
	gpDïth


1896 
SLªsu…
 (*
SëOrõ¡©i⁄AngÀs
) (

1897 
SL3DMa¸osc›icItf
 
	g£lf
,

1898 
SLmûlidegªe
 
	ghódög
,

1899 
SLmûlidegªe
 
	gpôch
,

1900 
SLmûlidegªe
 
	grﬁl


1902 
SLªsu…
 (*
SëOrõ¡©i⁄Ve˘‹s
) (

1903 
SL3DMa¸osc›icItf
 
	g£lf
,

1904 c⁄° 
SLVec3D
 *
	gpFr⁄t
,

1905 c⁄° 
SLVec3D
 *
	gpAbove


1907 
SLªsu…
 (*
RŸ©e
) (

1908 
SL3DMa¸osc›icItf
 
	g£lf
,

1909 
SLmûlidegªe
 
	gthëa
,

1910 c⁄° 
SLVec3D
 *
	gpAxis


1912 
SLªsu…
 (*
GëOrõ¡©i⁄Ve˘‹s
) (

1913 
SL3DMa¸osc›icItf
 
	g£lf
,

1914 
SLVec3D
 *
	gpFr⁄t
,

1915 
SLVec3D
 *
	gpUp


1924 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_MUTESOLO
;

1926 
	gSLMuãSﬁoItf_
;

1927 c⁄° 
	tSLMuãSﬁoItf_
 * c⁄° * 
	tSLMuãSﬁoItf
;

1929 
	sSLMuãSﬁoItf_
 {

1930 
SLªsu…
 (*
SëCh™√lMuã
) (

1931 
SLMuãSﬁoItf
 
	g£lf
,

1932 
SLuöt8
 
	gch™
,

1933 
SLboﬁón
 
	gmuã


1935 
SLªsu…
 (*
GëCh™√lMuã
) (

1936 
SLMuãSﬁoItf
 
	g£lf
,

1937 
SLuöt8
 
	gch™
,

1938 
SLboﬁón
 *
	gpMuã


1940 
SLªsu…
 (*
SëCh™√lSﬁo
) (

1941 
SLMuãSﬁoItf
 
	g£lf
,

1942 
SLuöt8
 
	gch™
,

1943 
SLboﬁón
 
	gsﬁo


1945 
SLªsu…
 (*
GëCh™√lSﬁo
) (

1946 
SLMuãSﬁoItf
 
	g£lf
,

1947 
SLuöt8
 
	gch™
,

1948 
SLboﬁón
 *
	gpSﬁo


1950 
SLªsu…
 (*
GëNumCh™√ls
) (

1951 
SLMuãSﬁoItf
 
	g£lf
,

1952 
SLuöt8
 *
	gpNumCh™√ls


1961 
	#SL_DYNAMIC_ITF_EVENT_RUNTIME_ERROR
 ((
SLuöt32
Ë0x00000001)

	)

1962 
	#SL_DYNAMIC_ITF_EVENT_ASYNC_TERMINATION
 ((
SLuöt32
Ë0x00000002)

	)

1963 
	#SL_DYNAMIC_ITF_EVENT_RESOURCES_LOST
 ((
SLuöt32
Ë0x00000003)

	)

1964 
	#SL_DYNAMIC_ITF_EVENT_RESOURCES_LOST_PERMANENTLY
 ((
SLuöt32
Ë0x00000004)

	)

1965 
	#SL_DYNAMIC_ITF_EVENT_RESOURCES_AVAILABLE
 ((
SLuöt32
Ë0x00000005)

	)

1970 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_DYNAMICINTERFACEMANAGEMENT
;

1972 
	gSLDy«micI¡îÁ˚M™agemítItf_
;

1973 c⁄° 
	tSLDy«micI¡îÁ˚M™agemítItf_
 * c⁄° * 
	tSLDy«micI¡îÁ˚M™agemítItf
;

1975 –*
	g¶Dy«micI¡îÁ˚M™agemítCÆlback
) (

1976 
	tSLDy«micI¡îÁ˚M™agemítItf
 
	tˇŒî
,

1977 * 
	tpC⁄ãxt
,

1978 
	tSLuöt32
 
	tevít
,

1979 
	tSLªsu…
 
	tªsu…
,

1980 c⁄° 
	tSLI¡îÁ˚ID
 
	tiid


1984 
	sSLDy«micI¡îÁ˚M™agemítItf_
 {

1985 
SLªsu…
 (*
AddI¡îÁ˚
) (

1986 
SLDy«micI¡îÁ˚M™agemítItf
 
	g£lf
,

1987 c⁄° 
SLI¡îÁ˚ID
 
	giid
,

1988 
SLboﬁón
 
	gasync


1990 
SLªsu…
 (*
RemoveI¡îÁ˚
) (

1991 
SLDy«micI¡îÁ˚M™agemítItf
 
	g£lf
,

1992 c⁄° 
SLI¡îÁ˚ID
 
	giid


1994 
SLªsu…
 (*
ResumeI¡îÁ˚
) (

1995 
SLDy«micI¡îÁ˚M™agemítItf
 
	g£lf
,

1996 c⁄° 
SLI¡îÁ˚ID
 
	giid
,

1997 
SLboﬁón
 
	gasync


1999 
SLªsu…
 (*
Regi°îCÆlback
) (

2000 
SLDy«micI¡îÁ˚M™agemítItf
 
	g£lf
,

2001 
¶Dy«micI¡îÁ˚M™agemítCÆlback
 
	gˇŒback
,

2002 * 
	gpC⁄ãxt


2010 
	#SL_MIDIMESSAGETYPE_NOTE_ON_OFF
 ((
SLuöt32
Ë0x00000001)

	)

2011 
	#SL_MIDIMESSAGETYPE_POLY_PRESSURE
 ((
SLuöt32
Ë0x00000002)

	)

2012 
	#SL_MIDIMESSAGETYPE_CONTROL_CHANGE
 ((
SLuöt32
Ë0x00000003)

	)

2013 
	#SL_MIDIMESSAGETYPE_PROGRAM_CHANGE
 ((
SLuöt32
Ë0x00000004)

	)

2014 
	#SL_MIDIMESSAGETYPE_CHANNEL_PRESSURE
 ((
SLuöt32
Ë0x00000005)

	)

2015 
	#SL_MIDIMESSAGETYPE_PITCH_BEND
 ((
SLuöt32
Ë0x00000006)

	)

2016 
	#SL_MIDIMESSAGETYPE_SYSTEM_MESSAGE
 ((
SLuöt32
Ë0x00000007)

	)

2019 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_MIDIMESSAGE
;

2021 
	gSLMIDIMesßgeItf_
;

2022 c⁄° 
	tSLMIDIMesßgeItf_
 * c⁄° * 
	tSLMIDIMesßgeItf
;

2024 –*
	g¶MëaEvítCÆlback
) (

2025 
	tSLMIDIMesßgeItf
 
	tˇŒî
,

2026 *
	tpC⁄ãxt
,

2027 
	tSLuöt8
 
	tty≥
,

2028 
	tSLuöt32
 
	tÀngth
,

2029 c⁄° 
	tSLuöt8
 *
	tpD©a
,

2030 
	tSLuöt32
 
	ttick
,

2031 
	tSLuöt16
 
	tåack


2034 –*
	g¶MIDIMesßgeCÆlback
) (

2035 
	tSLMIDIMesßgeItf
 
	tˇŒî
,

2036 *
	tpC⁄ãxt
,

2037 
	tSLuöt8
 
	t°©usByã
,

2038 
	tSLuöt32
 
	tÀngth
,

2039 c⁄° 
	tSLuöt8
 *
	tpD©a
,

2040 
	tSLuöt32
 
	ttick
,

2041 
	tSLuöt16
 
	tåack


2044 
	sSLMIDIMesßgeItf_
 {

2045 
SLªsu…
 (*
SídMesßge
) (

2046 
SLMIDIMesßgeItf
 
	g£lf
,

2047 c⁄° 
SLuöt8
 *
	gd©a
,

2048 
SLuöt32
 
	gÀngth


2050 
SLªsu…
 (*
Regi°îMëaEvítCÆlback
) (

2051 
SLMIDIMesßgeItf
 
	g£lf
,

2052 
¶MëaEvítCÆlback
 
	gˇŒback
,

2053 *
	gpC⁄ãxt


2055 
SLªsu…
 (*
Regi°îMIDIMesßgeCÆlback
) (

2056 
SLMIDIMesßgeItf
 
	g£lf
,

2057 
¶MIDIMesßgeCÆlback
 
	gˇŒback
,

2058 *
	gpC⁄ãxt


2060 
SLªsu…
 (*
AddMIDIMesßgeCÆlbackFûãr
) (

2061 
SLMIDIMesßgeItf
 
	g£lf
,

2062 
SLuöt32
 
	gmesßgeTy≥


2064 
SLªsu…
 (*
CÀ¨MIDIMesßgeCÆlbackFûãr
) (

2065 
SLMIDIMesßgeItf
 
	g£lf


2075 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_MIDIMUTESOLO
;

2077 
	gSLMIDIMuãSﬁoItf_
;

2078 c⁄° 
	tSLMIDIMuãSﬁoItf_
 * c⁄° * 
	tSLMIDIMuãSﬁoItf
;

2080 
	sSLMIDIMuãSﬁoItf_
 {

2081 
SLªsu…
 (*
SëCh™√lMuã
) (

2082 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2083 
SLuöt8
 
	gch™√l
,

2084 
SLboﬁón
 
	gmuã


2086 
SLªsu…
 (*
GëCh™√lMuã
) (

2087 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2088 
SLuöt8
 
	gch™√l
,

2089 
SLboﬁón
 *
	gpMuã


2091 
SLªsu…
 (*
SëCh™√lSﬁo
) (

2092 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2093 
SLuöt8
 
	gch™√l
,

2094 
SLboﬁón
 
	gsﬁo


2096 
SLªsu…
 (*
GëCh™√lSﬁo
) (

2097 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2098 
SLuöt8
 
	gch™√l
,

2099 
SLboﬁón
 *
	gpSﬁo


2101 
SLªsu…
 (*
GëTøckCou¡
) (

2102 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2103 
SLuöt16
 *
	gpCou¡


2105 
SLªsu…
 (*
SëTøckMuã
) (

2106 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2107 
SLuöt16
 
	gåack
,

2108 
SLboﬁón
 
	gmuã


2110 
SLªsu…
 (*
GëTøckMuã
) (

2111 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2112 
SLuöt16
 
	gåack
,

2113 
SLboﬁón
 *
	gpMuã


2115 
SLªsu…
 (*
SëTøckSﬁo
) (

2116 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2117 
SLuöt16
 
	gåack
,

2118 
SLboﬁón
 
	gsﬁo


2120 
SLªsu…
 (*
GëTøckSﬁo
) (

2121 
SLMIDIMuãSﬁoItf
 
	g£lf
,

2122 
SLuöt16
 
	gåack
,

2123 
SLboﬁón
 *
	gpSﬁo


2133 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_MIDITEMPO
;

2135 
	gSLMIDITempoItf_
;

2136 c⁄° 
	tSLMIDITempoItf_
 * c⁄° * 
	tSLMIDITempoItf
;

2138 
	sSLMIDITempoItf_
 {

2139 
SLªsu…
 (*
SëTicksPîQu¨ãrNŸe
) (

2140 
SLMIDITempoItf
 
	g£lf
,

2141 
SLuöt32
 
	gçqn


2143 
SLªsu…
 (*
GëTicksPîQu¨ãrNŸe
) (

2144 
SLMIDITempoItf
 
	g£lf
,

2145 
SLuöt32
 *
	gpTpqn


2147 
SLªsu…
 (*
SëMi¸o£c⁄dsPîQu¨ãrNŸe
) (

2148 
SLMIDITempoItf
 
	g£lf
,

2149 
SLmi¸o£c⁄d
 
	gu•qn


2151 
SLªsu…
 (*
GëMi¸o£c⁄dsPîQu¨ãrNŸe
) (

2152 
SLMIDITempoItf
 
	g£lf
,

2153 
SLmi¸o£c⁄d
 *
	gu•qn


2163 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_MIDITIME
;

2165 
	gSLMIDITimeItf_
;

2166 c⁄° 
	tSLMIDITimeItf_
 * c⁄° * 
	tSLMIDITimeItf
;

2168 
	sSLMIDITimeItf_
 {

2169 
SLªsu…
 (*
GëDuøti⁄
) (

2170 
SLMIDITimeItf
 
	g£lf
,

2171 
SLuöt32
 *
	gpDuøti⁄


2173 
SLªsu…
 (*
SëPosôi⁄
) (

2174 
SLMIDITimeItf
 
	g£lf
,

2175 
SLuöt32
 
	gposôi⁄


2177 
SLªsu…
 (*
GëPosôi⁄
) (

2178 
SLMIDITimeItf
 
	g£lf
,

2179 
SLuöt32
 *
	gpPosôi⁄


2181 
SLªsu…
 (*
SëLo›Poöts
) (

2182 
SLMIDITimeItf
 
	g£lf
,

2183 
SLuöt32
 
	g°¨tTick
,

2184 
SLuöt32
 
	gnumTicks


2186 
SLªsu…
 (*
GëLo›Poöts
) (

2187 
SLMIDITimeItf
 
	g£lf
,

2188 
SLuöt32
 *
	gpSèπTick
,

2189 
SLuöt32
 *
	gpNumTicks


2200 
	#SL_RATECONTROLMODE_CONSTANTBITRATE
 ((
SLuöt32
Ë0x00000001)

	)

2201 
	#SL_RATECONTROLMODE_VARIABLEBITRATE
 ((
SLuöt32
Ë0x00000002)

	)

2203 
	#SL_AUDIOCODEC_PCM
 ((
SLuöt32
Ë0x00000001)

	)

2204 
	#SL_AUDIOCODEC_MP3
 ((
SLuöt32
Ë0x00000002)

	)

2205 
	#SL_AUDIOCODEC_AMR
 ((
SLuöt32
Ë0x00000003)

	)

2206 
	#SL_AUDIOCODEC_AMRWB
 ((
SLuöt32
Ë0x00000004)

	)

2207 
	#SL_AUDIOCODEC_AMRWBPLUS
 ((
SLuöt32
Ë0x00000005)

	)

2208 
	#SL_AUDIOCODEC_AAC
 ((
SLuöt32
Ë0x00000006)

	)

2209 
	#SL_AUDIOCODEC_WMA
 ((
SLuöt32
Ë0x00000007)

	)

2210 
	#SL_AUDIOCODEC_REAL
 ((
SLuöt32
Ë0x00000008)

	)

2212 
	#SL_AUDIOPROFILE_PCM
 ((
SLuöt32
Ë0x00000001)

	)

2214 
	#SL_AUDIOPROFILE_MPEG1_L3
 ((
SLuöt32
Ë0x00000001)

	)

2215 
	#SL_AUDIOPROFILE_MPEG2_L3
 ((
SLuöt32
Ë0x00000002)

	)

2216 
	#SL_AUDIOPROFILE_MPEG25_L3
 ((
SLuöt32
Ë0x00000003)

	)

2218 
	#SL_AUDIOCHANMODE_MP3_MONO
 ((
SLuöt32
Ë0x00000001)

	)

2219 
	#SL_AUDIOCHANMODE_MP3_STEREO
 ((
SLuöt32
Ë0x00000002)

	)

2220 
	#SL_AUDIOCHANMODE_MP3_JOINTSTEREO
 ((
SLuöt32
Ë0x00000003)

	)

2221 
	#SL_AUDIOCHANMODE_MP3_DUAL
 ((
SLuöt32
Ë0x00000004)

	)

2223 
	#SL_AUDIOPROFILE_AMR
 ((
SLuöt32
Ë0x00000001)

	)

2225 
	#SL_AUDIOSTREAMFORMAT_CONFORMANCE
 ((
SLuöt32
Ë0x00000001)

	)

2226 
	#SL_AUDIOSTREAMFORMAT_IF1
 ((
SLuöt32
Ë0x00000002)

	)

2227 
	#SL_AUDIOSTREAMFORMAT_IF2
 ((
SLuöt32
Ë0x00000003)

	)

2228 
	#SL_AUDIOSTREAMFORMAT_FSF
 ((
SLuöt32
Ë0x00000004)

	)

2229 
	#SL_AUDIOSTREAMFORMAT_RTPPAYLOAD
 ((
SLuöt32
Ë0x00000005)

	)

2230 
	#SL_AUDIOSTREAMFORMAT_ITU
 ((
SLuöt32
Ë0x00000006)

	)

2232 
	#SL_AUDIOPROFILE_AMRWB
 ((
SLuöt32
Ë0x00000001)

	)

2234 
	#SL_AUDIOPROFILE_AMRWBPLUS
 ((
SLuöt32
Ë0x00000001)

	)

2236 
	#SL_AUDIOPROFILE_AAC_AAC
 ((
SLuöt32
Ë0x00000001)

	)

2238 
	#SL_AUDIOMODE_AAC_MAIN
 ((
SLuöt32
Ë0x00000001)

	)

2239 
	#SL_AUDIOMODE_AAC_LC
 ((
SLuöt32
Ë0x00000002)

	)

2240 
	#SL_AUDIOMODE_AAC_SSR
 ((
SLuöt32
Ë0x00000003)

	)

2241 
	#SL_AUDIOMODE_AAC_LTP
 ((
SLuöt32
Ë0x00000004)

	)

2242 
	#SL_AUDIOMODE_AAC_HE
 ((
SLuöt32
Ë0x00000005)

	)

2243 
	#SL_AUDIOMODE_AAC_SCALABLE
 ((
SLuöt32
Ë0x00000006)

	)

2244 
	#SL_AUDIOMODE_AAC_ERLC
 ((
SLuöt32
Ë0x00000007)

	)

2245 
	#SL_AUDIOMODE_AAC_LD
 ((
SLuöt32
Ë0x00000008)

	)

2246 
	#SL_AUDIOMODE_AAC_HE_PS
 ((
SLuöt32
Ë0x00000009)

	)

2247 
	#SL_AUDIOMODE_AAC_HE_MPS
 ((
SLuöt32
Ë0x0000000A)

	)

2249 
	#SL_AUDIOSTREAMFORMAT_MP2ADTS
 ((
SLuöt32
Ë0x00000001)

	)

2250 
	#SL_AUDIOSTREAMFORMAT_MP4ADTS
 ((
SLuöt32
Ë0x00000002)

	)

2251 
	#SL_AUDIOSTREAMFORMAT_MP4LOAS
 ((
SLuöt32
Ë0x00000003)

	)

2252 
	#SL_AUDIOSTREAMFORMAT_MP4LATM
 ((
SLuöt32
Ë0x00000004)

	)

2253 
	#SL_AUDIOSTREAMFORMAT_ADIF
 ((
SLuöt32
Ë0x00000005)

	)

2254 
	#SL_AUDIOSTREAMFORMAT_MP4FF
 ((
SLuöt32
Ë0x00000006)

	)

2255 
	#SL_AUDIOSTREAMFORMAT_RAW
 ((
SLuöt32
Ë0x00000007)

	)

2257 
	#SL_AUDIOPROFILE_WMA7
 ((
SLuöt32
Ë0x00000001)

	)

2258 
	#SL_AUDIOPROFILE_WMA8
 ((
SLuöt32
Ë0x00000002)

	)

2259 
	#SL_AUDIOPROFILE_WMA9
 ((
SLuöt32
Ë0x00000003)

	)

2260 
	#SL_AUDIOPROFILE_WMA10
 ((
SLuöt32
Ë0x00000004)

	)

2262 
	#SL_AUDIOMODE_WMA_LEVEL1
 ((
SLuöt32
Ë0x00000001)

	)

2263 
	#SL_AUDIOMODE_WMA_LEVEL2
 ((
SLuöt32
Ë0x00000002)

	)

2264 
	#SL_AUDIOMODE_WMA_LEVEL3
 ((
SLuöt32
Ë0x00000003)

	)

2265 
	#SL_AUDIOMODE_WMA_LEVEL4
 ((
SLuöt32
Ë0x00000004)

	)

2266 
	#SL_AUDIOMODE_WMAPRO_LEVELM0
 ((
SLuöt32
Ë0x00000005)

	)

2267 
	#SL_AUDIOMODE_WMAPRO_LEVELM1
 ((
SLuöt32
Ë0x00000006)

	)

2268 
	#SL_AUDIOMODE_WMAPRO_LEVELM2
 ((
SLuöt32
Ë0x00000007)

	)

2269 
	#SL_AUDIOMODE_WMAPRO_LEVELM3
 ((
SLuöt32
Ë0x00000008)

	)

2271 
	#SL_AUDIOPROFILE_REALAUDIO
 ((
SLuöt32
Ë0x00000001)

	)

2273 
	#SL_AUDIOMODE_REALAUDIO_G2
 ((
SLuöt32
Ë0x00000001)

	)

2274 
	#SL_AUDIOMODE_REALAUDIO_8
 ((
SLuöt32
Ë0x00000002)

	)

2275 
	#SL_AUDIOMODE_REALAUDIO_10
 ((
SLuöt32
Ë0x00000003)

	)

2276 
	#SL_AUDIOMODE_REALAUDIO_SURROUND
 ((
SLuöt32
Ë0x00000004)

	)

2278 
	sSLAudioCodecDes¸ùt‹_
 {

2279 
SLuöt32
 
	gmaxCh™√ls
;

2280 
SLuöt32
 
	gmöBôsPîSam∂e
;

2281 
SLuöt32
 
	gmaxBôsPîSam∂e
;

2282 
SLmûliHîtz
 
	gmöSam∂eR©e
;

2283 
SLmûliHîtz
 
	gmaxSam∂eR©e
;

2284 
SLboﬁón
 
	gisFªqR™geC⁄töuous
;

2285 
SLmûliHîtz
 *
	gpSam∂eR©esSuµ‹ãd
;

2286 
SLuöt32
 
	gnumSam∂eR©esSuµ‹ãd
;

2287 
SLuöt32
 
	gmöBôR©e
;

2288 
SLuöt32
 
	gmaxBôR©e
;

2289 
SLboﬁón
 
	gisBôøãR™geC⁄töuous
;

2290 
SLuöt32
 *
	gpBôøãsSuµ‹ãd
;

2291 
SLuöt32
 
	gnumBôøãsSuµ‹ãd
;

2292 
SLuöt32
 
	g¥ofûeSëtög
;

2293 
SLuöt32
 
	gmodeSëtög
;

2294 } 
	tSLAudioCodecDes¸ùt‹
;

2298 
	sSLAudioCodecProfûeMode_
 {

2299 
SLuöt32
 
	g¥ofûeSëtög
;

2300 
SLuöt32
 
	gmodeSëtög
;

2301 } 
	tSLAudioCodecProfûeMode
;

2303 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_AUDIODECODERCAPABILITIES
;

2305 
	gSLAudioDecodîC≠abûôõsItf_
;

2306 c⁄° 
	tSLAudioDecodîC≠abûôõsItf_
 * c⁄° * 
	tSLAudioDecodîC≠abûôõsItf
;

2308 
	sSLAudioDecodîC≠abûôõsItf_
 {

2309 
SLªsu…
 (*
GëAudioDecodîs
) (

2310 
SLAudioDecodîC≠abûôõsItf
 
	g£lf
,

2311 
SLuöt32
 * 
	gpNumDecodîs
 ,

2312 
SLuöt32
 *
	gpDecodîIds


2314 
SLªsu…
 (*
GëAudioDecodîC≠abûôõs
) (

2315 
SLAudioDecodîC≠abûôõsItf
 
	g£lf
,

2316 
SLuöt32
 
	gdecodîId
,

2317 
SLuöt32
 *
	gpIndex
,

2318 
SLAudioCodecDes¸ùt‹
 *
	gpDes¸ùt‹


2331 
	sSLAudioEncodîSëtögs_
 {

2332 
SLuöt32
 
	gícodîId
;

2333 
SLuöt32
 
	gch™√lsIn
;

2334 
SLuöt32
 
	gch™√lsOut
;

2335 
SLmûliHîtz
 
	gßm∂eR©e
;

2336 
SLuöt32
 
	gbôR©e
;

2337 
SLuöt32
 
	gbôsPîSam∂e
;

2338 
SLuöt32
 
	gøãC⁄åﬁ
;

2339 
SLuöt32
 
	g¥ofûeSëtög
;

2340 
SLuöt32
 
	gÀvñSëtög
;

2341 
SLuöt32
 
	gch™√lMode
;

2342 
SLuöt32
 
	g°ªamF‹m©
;

2343 
SLuöt32
 
	gícodeO±i⁄s
;

2344 
SLuöt32
 
	gblockAlignmít
;

2345 } 
	tSLAudioEncodîSëtögs
;

2347 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_AUDIOENCODERCAPABILITIES
;

2349 
	gSLAudioEncodîC≠abûôõsItf_
;

2350 c⁄° 
	tSLAudioEncodîC≠abûôõsItf_
 * c⁄° * 
	tSLAudioEncodîC≠abûôõsItf
;

2352 
	sSLAudioEncodîC≠abûôõsItf_
 {

2353 
SLªsu…
 (*
GëAudioEncodîs
) (

2354 
SLAudioEncodîC≠abûôõsItf
 
	g£lf
,

2355 
SLuöt32
 *
	gpNumEncodîs
 ,

2356 
SLuöt32
 *
	gpEncodîIds


2358 
SLªsu…
 (*
GëAudioEncodîC≠abûôõs
) (

2359 
SLAudioEncodîC≠abûôõsItf
 
	g£lf
,

2360 
SLuöt32
 
	gícodîId
,

2361 
SLuöt32
 *
	gpIndex
,

2362 
SLAudioCodecDes¸ùt‹
 * 
	gpDes¸ùt‹


2372 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_AUDIOENCODER
;

2374 
	gSLAudioEncodîItf_
;

2375 c⁄° 
	tSLAudioEncodîItf_
 * c⁄° * 
	tSLAudioEncodîItf
;

2377 
	sSLAudioEncodîItf_
 {

2378 
SLªsu…
 (*
SëEncodîSëtögs
) (

2379 
SLAudioEncodîItf
 
	g£lf
,

2380 
SLAudioEncodîSëtögs
 *
	gpSëtögs


2382 
SLªsu…
 (*
GëEncodîSëtögs
) (

2383 
SLAudioEncodîItf
 
	g£lf
,

2384 
SLAudioEncodîSëtögs
 *
	gpSëtögs


2394 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_BASSBOOST
;

2396 
	gSLBassBoo°Itf_
;

2397 c⁄° 
	tSLBassBoo°Itf_
 * c⁄° * 
	tSLBassBoo°Itf
;

2399 
	sSLBassBoo°Itf_
 {

2400 
SLªsu…
 (*
SëE«bÀd
)(

2401 
SLBassBoo°Itf
 
	g£lf
,

2402 
SLboﬁón
 
	gíabÀd


2404 
SLªsu…
 (*
IsE«bÀd
)(

2405 
SLBassBoo°Itf
 
	g£lf
,

2406 
SLboﬁón
 *
	gpE«bÀd


2408 
SLªsu…
 (*
SëSåígth
)(

2409 
SLBassBoo°Itf
 
	g£lf
,

2410 
SL≥rmûÀ
 
	g°ªngth


2412 
SLªsu…
 (*
GëRoundedSåígth
)(

2413 
SLBassBoo°Itf
 
	g£lf
,

2414 
SL≥rmûÀ
 *
	gpSåígth


2416 
SLªsu…
 (*
IsSåígthSuµ‹ãd
)(

2417 
SLBassBoo°Itf
 
	g£lf
,

2418 
SLboﬁón
 *
	gpSuµ‹ãd


2427 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_PITCH
;

2429 
	gSLPôchItf_
;

2430 c⁄° 
	tSLPôchItf_
 * c⁄° * 
	tSLPôchItf
;

2432 
	sSLPôchItf_
 {

2433 
SLªsu…
 (*
SëPôch
) (

2434 
SLPôchItf
 
	g£lf
,

2435 
SL≥rmûÀ
 
	gpôch


2437 
SLªsu…
 (*
GëPôch
) (

2438 
SLPôchItf
 
	g£lf
,

2439 
SL≥rmûÀ
 *
	gpPôch


2441 
SLªsu…
 (*
GëPôchC≠abûôõs
) (

2442 
SLPôchItf
 
	g£lf
,

2443 
SL≥rmûÀ
 *
	gpMöPôch
,

2444 
SL≥rmûÀ
 *
	gpMaxPôch


2456 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_RATEPITCH
;

2458 
	gSLR©ePôchItf_
;

2459 c⁄° 
	tSLR©ePôchItf_
 * c⁄° * 
	tSLR©ePôchItf
;

2461 
	sSLR©ePôchItf_
 {

2462 
SLªsu…
 (*
SëR©e
) (

2463 
SLR©ePôchItf
 
	g£lf
,

2464 
SL≥rmûÀ
 
	gøã


2466 
SLªsu…
 (*
GëR©e
) (

2467 
SLR©ePôchItf
 
	g£lf
,

2468 
SL≥rmûÀ
 *
	gpR©e


2470 
SLªsu…
 (*
GëR©ePôchC≠abûôõs
) (

2471 
SLR©ePôchItf
 
	g£lf
,

2472 
SL≥rmûÀ
 *
	gpMöR©e
,

2473 
SL≥rmûÀ
 *
	gpMaxR©e


2483 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_VIRTUALIZER
;

2485 
	gSLVútuÆizîItf_
;

2486 c⁄° 
	tSLVútuÆizîItf_
 * c⁄° * 
	tSLVútuÆizîItf
;

2488 
	sSLVútuÆizîItf_
 {

2489 
SLªsu…
 (*
SëE«bÀd
)(

2490 
SLVútuÆizîItf
 
	g£lf
,

2491 
SLboﬁón
 
	gíabÀd


2493 
SLªsu…
 (*
IsE«bÀd
)(

2494 
SLVútuÆizîItf
 
	g£lf
,

2495 
SLboﬁón
 *
	gpE«bÀd


2497 
SLªsu…
 (*
SëSåígth
)(

2498 
SLVútuÆizîItf
 
	g£lf
,

2499 
SL≥rmûÀ
 
	g°ªngth


2501 
SLªsu…
 (*
GëRoundedSåígth
)(

2502 
SLVútuÆizîItf
 
	g£lf
,

2503 
SL≥rmûÀ
 *
	gpSåígth


2505 
SLªsu…
 (*
IsSåígthSuµ‹ãd
)(

2506 
SLVútuÆizîItf
 
	g£lf
,

2507 
SLboﬁón
 *
	gpSuµ‹ãd


2516 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_VISUALIZATION
;

2518 
	gSLVisuÆiz©i⁄Itf_
;

2519 c⁄° 
	tSLVisuÆiz©i⁄Itf_
 * c⁄° * 
	tSLVisuÆiz©i⁄Itf
;

2521 –*
	g¶VisuÆiz©i⁄CÆlback
) (

2522 *
	tpC⁄ãxt
,

2523 c⁄° 
	tSLuöt8
 
	twavef‹m
[],

2524 c⁄° 
	tSLuöt8
 
	tf·
[],

2525 
	tSLmûliHîtz
 
	tßm∂î©e


2528 
	sSLVisuÆiz©i⁄Itf_
{

2529 
SLªsu…
 (*
Regi°îVisuÆiz©i⁄CÆlback
)(

2530 
SLVisuÆiz©i⁄Itf
 
	g£lf
,

2531 
¶VisuÆiz©i⁄CÆlback
 
	gˇŒback
,

2532 *
	gpC⁄ãxt
,

2533 
SLmûliHîtz
 
	gøã


2535 
SLªsu…
 (*
GëMaxR©e
)(

2536 
SLVisuÆiz©i⁄Itf
 
	g£lf
,

2537 
SLmûliHîtz
* 
	gpR©e


2547 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_ENGINE
;

2549 
	gSLEngöeItf_
;

2550 c⁄° 
	tSLEngöeItf_
 * c⁄° * 
	tSLEngöeItf
;

2553 
	sSLEngöeItf_
 {

2555 
SLªsu…
 (*
Cª©eLEDDevi˚
) (

2556 
SLEngöeItf
 
	g£lf
,

2557 
SLObje˘Itf
 * 
	gpDevi˚
,

2558 
SLuöt32
 
	gdevi˚ID
,

2559 
SLuöt32
 
	gnumI¡îÁ˚s
,

2560 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2561 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2563 
SLªsu…
 (*
Cª©eVibøDevi˚
) (

2564 
SLEngöeItf
 
	g£lf
,

2565 
SLObje˘Itf
 * 
	gpDevi˚
,

2566 
SLuöt32
 
	gdevi˚ID
,

2567 
SLuöt32
 
	gnumI¡îÁ˚s
,

2568 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2569 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2571 
SLªsu…
 (*
Cª©eAudioPœyî
) (

2572 
SLEngöeItf
 
	g£lf
,

2573 
SLObje˘Itf
 * 
	gpPœyî
,

2574 
SLD©aSour˚
 *
	gpAudioSrc
,

2575 
SLD©aSök
 *
	gpAudioSnk
,

2576 
SLuöt32
 
	gnumI¡îÁ˚s
,

2577 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2578 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2580 
SLªsu…
 (*
Cª©eAudioRec‹dî
) (

2581 
SLEngöeItf
 
	g£lf
,

2582 
SLObje˘Itf
 * 
	gpRec‹dî
,

2583 
SLD©aSour˚
 *
	gpAudioSrc
,

2584 
SLD©aSök
 *
	gpAudioSnk
,

2585 
SLuöt32
 
	gnumI¡îÁ˚s
,

2586 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2587 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2589 
SLªsu…
 (*
Cª©eMidiPœyî
) (

2590 
SLEngöeItf
 
	g£lf
,

2591 
SLObje˘Itf
 * 
	gpPœyî
,

2592 
SLD©aSour˚
 *
	gpMIDISrc
,

2593 
SLD©aSour˚
 *
	gpB™kSrc
,

2594 
SLD©aSök
 *
	gpAudioOuçut
,

2595 
SLD©aSök
 *
	gpVibø
,

2596 
SLD©aSök
 *
	gpLEDAºay
,

2597 
SLuöt32
 
	gnumI¡îÁ˚s
,

2598 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2599 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2601 
SLªsu…
 (*
Cª©eLi°íî
) (

2602 
SLEngöeItf
 
	g£lf
,

2603 
SLObje˘Itf
 * 
	gpLi°íî
,

2604 
SLuöt32
 
	gnumI¡îÁ˚s
,

2605 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2606 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2608 
SLªsu…
 (*
Cª©e3DGroup
) (

2609 
SLEngöeItf
 
	g£lf
,

2610 
SLObje˘Itf
 * 
	gpGroup
,

2611 
SLuöt32
 
	gnumI¡îÁ˚s
,

2612 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2613 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2615 
SLªsu…
 (*
Cª©eOuçutMix
) (

2616 
SLEngöeItf
 
	g£lf
,

2617 
SLObje˘Itf
 * 
	gpMix
,

2618 
SLuöt32
 
	gnumI¡îÁ˚s
,

2619 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2620 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2622 
SLªsu…
 (*
Cª©eMëad©aExåa˘‹
) (

2623 
SLEngöeItf
 
	g£lf
,

2624 
SLObje˘Itf
 * 
	gpMëad©aExåa˘‹
,

2625 
SLD©aSour˚
 * 
	gpD©aSour˚
,

2626 
SLuöt32
 
	gnumI¡îÁ˚s
,

2627 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2628 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2630 
SLªsu…
 (*
Cª©eExãnsi⁄Obje˘
) (

2631 
SLEngöeItf
 
	g£lf
,

2632 
SLObje˘Itf
 * 
	gpObje˘
,

2633 * 
	gpP¨amëîs
,

2634 
SLuöt32
 
	gobje˘ID
,

2635 
SLuöt32
 
	gnumI¡îÁ˚s
,

2636 c⁄° 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Ids
,

2637 c⁄° 
SLboﬁón
 * 
	gpI¡îÁ˚Requúed


2639 
SLªsu…
 (*
QuîyNumSuµ‹ãdI¡îÁ˚s
) (

2640 
SLEngöeItf
 
	g£lf
,

2641 
SLuöt32
 
	gobje˘ID
,

2642 
SLuöt32
 * 
	gpNumSuµ‹ãdI¡îÁ˚s


2644 
SLªsu…
 (*
QuîySuµ‹ãdI¡îÁ˚s
) (

2645 
SLEngöeItf
 
	g£lf
,

2646 
SLuöt32
 
	gobje˘ID
,

2647 
SLuöt32
 
	gödex
,

2648 
SLI¡îÁ˚ID
 * 
	gpI¡îÁ˚Id


2650 
SLªsu…
 (*
QuîyNumSuµ‹ãdExãnsi⁄s
) (

2651 
SLEngöeItf
 
	g£lf
,

2652 
SLuöt32
 * 
	gpNumExãnsi⁄s


2654 
SLªsu…
 (*
QuîySuµ‹ãdExãnsi⁄
) (

2655 
SLEngöeItf
 
	g£lf
,

2656 
SLuöt32
 
	gödex
,

2657 
SLch¨
 * 
	gpExãnsi⁄Name
,

2658 
SLöt16
 * 
	gpNameLígth


2660 
SLªsu…
 (*
IsExãnsi⁄Suµ‹ãd
) (

2661 
SLEngöeItf
 
	g£lf
,

2662 c⁄° 
SLch¨
 * 
	gpExãnsi⁄Name
,

2663 
SLboﬁón
 * 
	gpSuµ‹ãd


2673 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_ENGINECAPABILITIES
;

2675 
	gSLEngöeC≠abûôõsItf_
;

2676 c⁄° 
	tSLEngöeC≠abûôõsItf_
 * c⁄° * 
	tSLEngöeC≠abûôõsItf
;

2678 
	sSLEngöeC≠abûôõsItf_
 {

2679 
SLªsu…
 (*
QuîySuµ‹ãdProfûes
) (

2680 
SLEngöeC≠abûôõsItf
 
	g£lf
,

2681 
SLuöt16
 *
	gpProfûesSuµ‹ãd


2683 
SLªsu…
 (*
QuîyAvaûabÀVoi˚s
) (

2684 
SLEngöeC≠abûôõsItf
 
	g£lf
,

2685 
SLuöt16
 
	gvoi˚Ty≥
,

2686 
SLöt16
 *
	gpNumMaxVoi˚s
,

2687 
SLboﬁón
 *
	gpIsAbsﬁuãMax
,

2688 
SLöt16
 *
	gpNumFªeVoi˚s


2690 
SLªsu…
 (*
QuîyNumbîOfMIDISy¡hesizîs
) (

2691 
SLEngöeC≠abûôõsItf
 
	g£lf
,

2692 
SLöt16
 *
	gpNumMIDIsy¡hesizîs


2694 
SLªsu…
 (*
QuîyAPIVîsi⁄
) (

2695 
SLEngöeC≠abûôõsItf
 
	g£lf
,

2696 
SLöt16
 *
	gpMaj‹
,

2697 
SLöt16
 *
	gpMö‹
,

2698 
SLöt16
 *
	gpSãp


2700 
SLªsu…
 (*
QuîyLEDC≠abûôõs
) (

2701 
SLEngöeC≠abûôõsItf
 
	g£lf
,

2702 
SLuöt32
 *
	gpIndex
,

2703 
SLuöt32
 *
	gpLEDDevi˚ID
,

2704 
SLLEDDes¸ùt‹
 *
	gpDes¸ùt‹


2706 
SLªsu…
 (*
QuîyVibøC≠abûôõs
) (

2707 
SLEngöeC≠abûôõsItf
 
	g£lf
,

2708 
SLuöt32
 *
	gpIndex
,

2709 
SLuöt32
 *
	gpVibøDevi˚ID
,

2710 
SLVibøDes¸ùt‹
 *
	gpDes¸ùt‹


2712 
SLªsu…
 (*
IsThªadSa„
) (

2713 
SLEngöeC≠abûôõsItf
 
	g£lf
,

2714 
SLboﬁón
 *
	gpIsThªadSa„


2723 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_THREADSYNC
;

2725 
	gSLThªadSyncItf_
;

2726 c⁄° 
	tSLThªadSyncItf_
 * c⁄° * 
	tSLThªadSyncItf
;

2729 
	sSLThªadSyncItf_
 {

2730 
SLªsu…
 (*
E¡îCrôiˇlSe˘i⁄
) (

2731 
SLThªadSyncItf
 
	g£lf


2733 
SLªsu…
 (*
ExôCrôiˇlSe˘i⁄
) (

2734 
SLThªadSyncItf
 
	g£lf


2743 
	#SL_ENGINEOPTION_THREADSAFE
 ((
SLuöt32
Ë0x00000001)

	)

2744 
	#SL_ENGINEOPTION_LOSSOFCONTROL
 ((
SLuöt32
Ë0x00000002)

	)

2746 
	sSLEngöeO±i⁄_
 {

2747 
SLuöt32
 
	g„©uª
;

2748 
SLuöt32
 
	gd©a
;

2749 } 
	tSLEngöeO±i⁄
;

2752 
SLªsu…
 
SLAPIENTRY
 
¶Cª©eEngöe
(

2753 
SLObje˘Itf
 *
pEngöe
,

2754 
SLuöt32
 
numO±i⁄s
,

2755 c⁄° 
SLEngöeO±i⁄
 *
pEngöeO±i⁄s
,

2756 
SLuöt32
 
numI¡îÁ˚s
,

2757 c⁄° 
SLI¡îÁ˚ID
 *
pI¡îÁ˚Ids
,

2758 c⁄° 
SLboﬁón
 * 
pI¡îÁ˚Requúed


2761 
SLªsu…
 
SLAPIENTRY
 
¶QuîyNumSuµ‹ãdEngöeI¡îÁ˚s
(

2762 
SLuöt32
 * 
pNumSuµ‹ãdI¡îÁ˚s


2765 
SLªsu…
 
SLAPIENTRY
 
¶QuîySuµ‹ãdEngöeI¡îÁ˚s
(

2766 
SLuöt32
 
ödex
,

2767 
SLI¡îÁ˚ID
 * 
pI¡îÁ˚Id


2770 #ifde‡
__˝lu•lus


	@SLES/OpenSLES_Android.h

17 #i‚de‡
OPENSL_ES_ANDROID_H_


18 
	#OPENSL_ES_ANDROID_H_


	)

20 #ifde‡
__˝lu•lus


24 
	~"O≥nSLES.h
"

30 
¶_öt64_t
 
	tSLAöt64
;

37 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_ANDROIDEFFECT
;

41 
	gSLAndroidEf„˘Itf_
;

42 c⁄° 
	tSLAndroidEf„˘Itf_
 * c⁄° * 
	tSLAndroidEf„˘Itf
;

44 
	sSLAndroidEf„˘Itf_
 {

46 
SLªsu…
 (*
Cª©eEf„˘
Ë(
SLAndroidEf„˘Itf
 
	g£lf
,

47 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
);

49 
SLªsu…
 (*
Rñó£Ef„˘
Ë(
SLAndroidEf„˘Itf
 
	g£lf
,

50 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
);

52 
SLªsu…
 (*
SëE«bÀd
Ë(
SLAndroidEf„˘Itf
 
	g£lf
,

53 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
,

54 
SLboﬁón
 
	gíabÀd
);

56 
SLªsu…
 (*
IsE«bÀd
Ë(
SLAndroidEf„˘Itf
 
	g£lf
,

57 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
,

58 
SLboﬁón
 *
	gpE«bÀd
);

60 
SLªsu…
 (*
SídComm™d
Ë(
SLAndroidEf„˘Itf
 
	g£lf
,

61 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
,

62 
SLuöt32
 
	gcomm™d
,

63 
SLuöt32
 
	gcomm™dSize
,

64 *
	gpComm™dD©a
,

65 
SLuöt32
 *
	gª∂ySize
,

66 *
	gpRïlyD©a
);

74 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_ANDROIDEFFECTSEND
;

78 
	gSLAndroidEf„˘SídItf_
;

79 c⁄° 
	tSLAndroidEf„˘SídItf_
 * c⁄° * 
	tSLAndroidEf„˘SídItf
;

81 
	sSLAndroidEf„˘SídItf_
 {

82 
SLªsu…
 (*
E«bÀEf„˘Síd
) (

83 
SLAndroidEf„˘SídItf
 
	g£lf
,

84 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
,

85 
SLboﬁón
 
	gíabÀ
,

86 
SLmûlibñ
 
	göôülLevñ


88 
SLªsu…
 (*
IsE«bÀd
) (

89 
SLAndroidEf„˘SídItf
 
	g£lf
,

90 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
,

91 
SLboﬁón
 *
	gpE«bÀ


93 
SLªsu…
 (*
SëDúe˘Levñ
) (

94 
SLAndroidEf„˘SídItf
 
	g£lf
,

95 
SLmûlibñ
 
	gdúe˘Levñ


97 
SLªsu…
 (*
GëDúe˘Levñ
) (

98 
SLAndroidEf„˘SídItf
 
	g£lf
,

99 
SLmûlibñ
 *
	gpDúe˘Levñ


101 
SLªsu…
 (*
SëSídLevñ
) (

102 
SLAndroidEf„˘SídItf
 
	g£lf
,

103 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
,

104 
SLmûlibñ
 
	g£ndLevñ


106 
SLªsu…
 (*
GëSídLevñ
)(

107 
SLAndroidEf„˘SídItf
 
	g£lf
,

108 
SLI¡îÁ˚ID
 
	gef„˘Im∂emíèti⁄Id
,

109 
SLmûlibñ
 *
	gpSídLevñ


118 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_ANDROIDEFFECTCAPABILITIES
;

122 
	gSLAndroidEf„˘C≠abûôõsItf_
;

123 c⁄° 
	tSLAndroidEf„˘C≠abûôõsItf_
 * c⁄° * 
	tSLAndroidEf„˘C≠abûôõsItf
;

125 
	sSLAndroidEf„˘C≠abûôõsItf_
 {

127 
SLªsu…
 (*
QuîyNumEf„˘s
Ë(
SLAndroidEf„˘C≠abûôõsItf
 
	g£lf
,

128 
SLuöt32
 *
	gpNumSuµ‹ãdEf„˘s
);

131 
SLªsu…
 (*
QuîyEf„˘
Ë(
SLAndroidEf„˘C≠abûôõsItf
 
	g£lf
,

132 
SLuöt32
 
	gödex
,

133 
SLI¡îÁ˚ID
 *
	gpEf„˘Ty≥
,

134 
SLI¡îÁ˚ID
 *
	gpEf„˘Im∂emíèti⁄
,

135 
SLch¨
 *
	gpName
,

136 
SLuöt16
 *
	gpNameSize
);

143 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_ANDROIDCONFIGURATION
;

147 
	gSLAndroidC⁄figuøti⁄Itf_
;

148 c⁄° 
	tSLAndroidC⁄figuøti⁄Itf_
 * c⁄° * 
	tSLAndroidC⁄figuøti⁄Itf
;

150 
	sSLAndroidC⁄figuøti⁄Itf_
 {

152 
SLªsu…
 (*
SëC⁄figuøti⁄
Ë(
SLAndroidC⁄figuøti⁄Itf
 
	g£lf
,

153 c⁄° 
SLch¨
 *
	gc⁄figKey
,

154 c⁄° *
	gpC⁄figVÆue
,

155 
SLuöt32
 
	gvÆueSize
);

157 
SLªsu…
 (*
GëC⁄figuøti⁄
Ë(
SLAndroidC⁄figuøti⁄Itf
 
	g£lf
,

158 c⁄° 
SLch¨
 *
	gc⁄figKey
,

159 
SLuöt32
 *
	gpVÆueSize
,

160 *
	gpC⁄figVÆue


169 
SLAPIENTRY
 c⁄° 
SLI¡îÁ˚ID
 
SL_IID_ANDROIDSIMPLEBUFFERQUEUE
;

171 
	gSLAndroidSim∂eBuf„rQueueItf_
;

172 c⁄° 
	tSLAndroidSim∂eBuf„rQueueItf_
 * c⁄° * 
	tSLAndroidSim∂eBuf„rQueueItf
;

174 –*
	g¶AndroidSim∂eBuf„rQueueCÆlback
)(

175 
	tSLAndroidSim∂eBuf„rQueueItf
 
	tˇŒî
,

176 *
	tpC⁄ãxt


181 
	sSLAndroidSim∂eBuf„rQueueSèã_
 {

182 
SLuöt32
 
	gcou¡
;

183 
SLuöt32
 
	gödex
;

184 } 
	tSLAndroidSim∂eBuf„rQueueSèã
;

187 
	sSLAndroidSim∂eBuf„rQueueItf_
 {

188 
SLªsu…
 (*
Enqueue
) (

189 
SLAndroidSim∂eBuf„rQueueItf
 
	g£lf
,

190 c⁄° *
	gpBuf„r
,

191 
SLuöt32
 
	gsize


193 
SLªsu…
 (*
CÀ¨
) (

194 
SLAndroidSim∂eBuf„rQueueItf
 
	g£lf


196 
SLªsu…
 (*
GëSèã
) (

197 
SLAndroidSim∂eBuf„rQueueItf
 
	g£lf
,

198 
SLAndroidSim∂eBuf„rQueueSèã
 *
	gpSèã


200 
SLªsu…
 (*
Regi°îCÆlback
) (

201 
SLAndroidSim∂eBuf„rQueueItf
 
	g£lf
,

202 
¶AndroidSim∂eBuf„rQueueCÆlback
 
	gˇŒback
,

203 * 
	gpC⁄ãxt


213 
	#SL_DATALOCATOR_ANDROIDFD
 ((
SLuöt32
Ë0x800007BC)

	)

215 
	#SL_DATALOCATOR_ANDROIDFD_USE_FILE_SIZE
 ((
SLAöt64
Ë0xFFFFFFFFFFFFFFFFŒ)

	)

218 
	sSLD©aLoˇt‹_AndroidFD_
 {

219 
SLuöt32
 
	gloˇt‹Ty≥
;

220 
SLöt32
 
	gfd
;

221 
SLAöt64
 
	goff£t
;

222 
SLAöt64
 
	gÀngth
;

223 } 
	tSLD©aLoˇt‹_AndroidFD
;

231 
	#SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE
 ((
SLuöt32
Ë0x800007BD)

	)

234 
	sSLD©aLoˇt‹_AndroidSim∂eBuf„rQueue
 {

235 
SLuöt32
 
	gloˇt‹Ty≥
;

236 
SLuöt32
 
	gnumBuf„rs
;

237 } 
	tSLD©aLoˇt‹_AndroidSim∂eBuf„rQueue
;

240 #ifde‡
__˝lu•lus


	@SLES/OpenSLES_AndroidConfiguration.h

17 #i‚de‡
OPENSL_ES_ANDROIDCONFIGURATION_H_


18 
	#OPENSL_ES_ANDROIDCONFIGURATION_H_


	)

20 #ifde‡
__˝lu•lus


30 
	#SL_ANDROID_KEY_RECORDING_PRESET
 ((c⁄° 
SLch¨
*Ë"™droidRec‹dögPª£t")

	)

34 
	#SL_ANDROID_RECORDING_PRESET_NONE
 ((
SLuöt32
Ë0x00000000)

	)

36 
	#SL_ANDROID_RECORDING_PRESET_GENERIC
 ((
SLuöt32
Ë0x00000001)

	)

39 
	#SL_ANDROID_RECORDING_PRESET_CAMCORDER
 ((
SLuöt32
Ë0x00000002)

	)

41 
	#SL_ANDROID_RECORDING_PRESET_VOICE_RECOGNITION
 ((
SLuöt32
Ë0x00000003)

	)

49 
	#SL_ANDROID_KEY_STREAM_TYPE
 ((c⁄° 
SLch¨
*Ë"™droidPœybackSåómTy≥")

	)

53 
	#SL_ANDROID_STREAM_VOICE
 ((
SLöt32
Ë0x00000000)

	)

55 
	#SL_ANDROID_STREAM_SYSTEM
 ((
SLöt32
Ë0x00000001)

	)

57 
	#SL_ANDROID_STREAM_RING
 ((
SLöt32
Ë0x00000002)

	)

59 
	#SL_ANDROID_STREAM_MEDIA
 ((
SLöt32
Ë0x00000003)

	)

61 
	#SL_ANDROID_STREAM_ALARM
 ((
SLöt32
Ë0x00000004)

	)

63 
	#SL_ANDROID_STREAM_NOTIFICATION
 ((
SLöt32
Ë0x00000005)

	)

67 #ifde‡
__˝lu•lus


	@SLES/OpenSLES_Platform.h

33 #i‚de‡
_OPENSLES_PLATFORM_H_


34 
	#_OPENSLES_PLATFORM_H_


	)

36 
	t¶_uöt8_t
;

37 sig√d 
	t¶_öt8_t
;

38 
	t¶_uöt16_t
;

39 sig√d 
	t¶_öt16_t
;

40 
	t¶_uöt32_t
;

41 sig√d 
	t¶_öt32_t
;

42 
	t¶_öt64_t
;

44 #i‚de‡
SLAPIENTRY


45 #ifde‡
__GNUC__


46 
	#SLAPIENTRY


	)

48 
	#SLAPIENTRY
 
	`__de˛•ec
(
dŒimp‹t
)

	)

	@alloca.h

28 #i‚de‡
_ALLOCA_H


29 
	#_ALLOCA_H


	)

31 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
(size)

	)

	@android/api-level.h

28 #i‚de‡
ANDROID_API_LEVEL_H


29 
	#ANDROID_API_LEVEL_H


	)

31 
	#__ANDROID_API__
 9

	)

	@android/asset_manager.h

18 #i‚de‡
ANDROID_ASSET_MANAGER_H


19 
	#ANDROID_ASSET_MANAGER_H


	)

21 
	~<sys/ty≥s.h
>

23 #ifde‡
__˝lu•lus


27 
AAs£tM™agî
;

28 
AAs£tM™agî
 
	tAAs£tM™agî
;

30 
AAs£tDú
;

31 
AAs£tDú
 
	tAAs£tDú
;

33 
AAs£t
;

34 
AAs£t
 
	tAAs£t
;

38 
AASSET_MODE_UNKNOWN
 = 0,

39 
AASSET_MODE_RANDOM
 = 1,

40 
AASSET_MODE_STREAMING
 = 2,

41 
AASSET_MODE_BUFFER
 = 3

52 
AAs£tDú
* 
AAs£tM™agî_›íDú
(
AAs£tM™agî
* 
mgr
, c⁄° * 
dúName
);

59 
AAs£t
* 
AAs£tM™agî_›í
(
AAs£tM™agî
* 
mgr
, c⁄° * 
fûíame
, 
mode
);

71 c⁄° * 
AAs£tDú_gëNextFûeName
(
AAs£tDú
* 
as£tDú
);

76 
AAs£tDú_ªwöd
(
AAs£tDú
* 
as£tDú
);

81 
AAs£tDú_˛o£
(
AAs£tDú
* 
as£tDú
);

88 
AAs£t_ªad
(
AAs£t
* 
as£t
, * 
buf
, 
size_t
 
cou¡
);

96 
off_t
 
AAs£t_£ek
(
AAs£t
* 
as£t
, off_à
off£t
, 
whí˚
);

101 
AAs£t_˛o£
(
AAs£t
* 
as£t
);

108 c⁄° * 
AAs£t_gëBuf„r
(
AAs£t
* 
as£t
);

113 
off_t
 
AAs£t_gëLígth
(
AAs£t
* 
as£t
);

118 
off_t
 
AAs£t_gëRemaöögLígth
(
AAs£t
* 
as£t
);

126 
AAs£t_›íFûeDes¸ùt‹
(
AAs£t
* 
as£t
, 
off_t
* 
outSèπ
, off_t* 
outLígth
);

132 
AAs£t_isAŒoˇãd
(
AAs£t
* 
as£t
);

136 #ifde‡
__˝lu•lus


	@android/asset_manager_jni.h

18 #i‚de‡
ANDROID_ASSET_MANAGER_JNI_H


19 
	#ANDROID_ASSET_MANAGER_JNI_H


	)

21 
	~<™droid/as£t_m™agî.h
>

22 
	~<jni.h
>

24 #ifde‡
__˝lu•lus


34 
AAs£tM™agî
* 
AAs£tM™agî_‰omJava
(
JNIEnv
* 
ív
, 
jobje˘
 
as£tM™agî
);

36 #ifde‡
__˝lu•lus


	@android/bitmap.h

17 #i‚de‡
ANDROID_BITMAP_H


18 
	#ANDROID_BITMAP_H


	)

20 
	~<sys/cdefs.h
>

21 
	~<°döt.h
>

22 
	~<jni.h
>

24 
	g__BEGIN_DECLS


26 
	#ANDROID_BITMAP_RESULT_SUCCESS
 0

	)

27 
	#ANDROID_BITMAP_RESULT_BAD_PARAMETER
 -1

	)

28 
	#ANDROID_BITMAP_RESULT_JNI_EXCEPTION
 -2

	)

29 
	#ANDROID_BITMAP_RESULT_ALLOCATION_FAILED
 -3

	)

32 
	#ANDROID_BITMAP_RESUT_SUCCESS
 
ANDROID_BITMAP_RESULT_SUCCESS


	)

34 
	eAndroidBôm≠F‹m©
 {

35 
	mANDROID_BITMAP_FORMAT_NONE
 = 0,

36 
	mANDROID_BITMAP_FORMAT_RGBA_8888
 = 1,

37 
	mANDROID_BITMAP_FORMAT_RGB_565
 = 4,

38 
	mANDROID_BITMAP_FORMAT_RGBA_4444
 = 7,

39 
	mANDROID_BITMAP_FORMAT_A_8
 = 8,

43 
uöt32_t
 
	mwidth
;

44 
uöt32_t
 
	mheight
;

45 
uöt32_t
 
	m°ride
;

46 
öt32_t
 
	mf‹m©
;

47 
uöt32_t
 
	mÊags
;

48 } 
	tAndroidBôm≠Info
;

54 
AndroidBôm≠_gëInfo
(
JNIEnv
* 
ív
, 
jobje˘
 
jbôm≠
,

55 
AndroidBôm≠Info
* 
öfo
);

70 
AndroidBôm≠_lockPixñs
(
JNIEnv
* 
ív
, 
jobje˘
 
jbôm≠
, ** 
addrPå
);

75 
AndroidBôm≠_u∆ockPixñs
(
JNIEnv
* 
ív
, 
jobje˘
 
jbôm≠
);

77 
	g__END_DECLS


	@android/configuration.h

17 #i‚de‡
ANDROID_CONFIGURATION_H


18 
	#ANDROID_CONFIGURATION_H


	)

20 
	~<™droid/as£t_m™agî.h
>

22 #ifde‡
__˝lu•lus


26 
AC⁄figuøti⁄
;

27 
AC⁄figuøti⁄
 
	tAC⁄figuøti⁄
;

30 
ACONFIGURATION_ORIENTATION_ANY
 = 0x0000,

31 
ACONFIGURATION_ORIENTATION_PORT
 = 0x0001,

32 
ACONFIGURATION_ORIENTATION_LAND
 = 0x0002,

33 
ACONFIGURATION_ORIENTATION_SQUARE
 = 0x0003,

35 
ACONFIGURATION_TOUCHSCREEN_ANY
 = 0x0000,

36 
ACONFIGURATION_TOUCHSCREEN_NOTOUCH
 = 0x0001,

37 
ACONFIGURATION_TOUCHSCREEN_STYLUS
 = 0x0002,

38 
ACONFIGURATION_TOUCHSCREEN_FINGER
 = 0x0003,

40 
ACONFIGURATION_DENSITY_DEFAULT
 = 0,

41 
ACONFIGURATION_DENSITY_LOW
 = 120,

42 
ACONFIGURATION_DENSITY_MEDIUM
 = 160,

43 
ACONFIGURATION_DENSITY_HIGH
 = 240,

44 
ACONFIGURATION_DENSITY_NONE
 = 0xffff,

46 
ACONFIGURATION_KEYBOARD_ANY
 = 0x0000,

47 
ACONFIGURATION_KEYBOARD_NOKEYS
 = 0x0001,

48 
ACONFIGURATION_KEYBOARD_QWERTY
 = 0x0002,

49 
ACONFIGURATION_KEYBOARD_12KEY
 = 0x0003,

51 
ACONFIGURATION_NAVIGATION_ANY
 = 0x0000,

52 
ACONFIGURATION_NAVIGATION_NONAV
 = 0x0001,

53 
ACONFIGURATION_NAVIGATION_DPAD
 = 0x0002,

54 
ACONFIGURATION_NAVIGATION_TRACKBALL
 = 0x0003,

55 
ACONFIGURATION_NAVIGATION_WHEEL
 = 0x0004,

57 
ACONFIGURATION_KEYSHIDDEN_ANY
 = 0x0000,

58 
ACONFIGURATION_KEYSHIDDEN_NO
 = 0x0001,

59 
ACONFIGURATION_KEYSHIDDEN_YES
 = 0x0002,

60 
ACONFIGURATION_KEYSHIDDEN_SOFT
 = 0x0003,

62 
ACONFIGURATION_NAVHIDDEN_ANY
 = 0x0000,

63 
ACONFIGURATION_NAVHIDDEN_NO
 = 0x0001,

64 
ACONFIGURATION_NAVHIDDEN_YES
 = 0x0002,

66 
ACONFIGURATION_SCREENSIZE_ANY
 = 0x00,

67 
ACONFIGURATION_SCREENSIZE_SMALL
 = 0x01,

68 
ACONFIGURATION_SCREENSIZE_NORMAL
 = 0x02,

69 
ACONFIGURATION_SCREENSIZE_LARGE
 = 0x03,

70 
ACONFIGURATION_SCREENSIZE_XLARGE
 = 0x04,

72 
ACONFIGURATION_SCREENLONG_ANY
 = 0x00,

73 
ACONFIGURATION_SCREENLONG_NO
 = 0x1,

74 
ACONFIGURATION_SCREENLONG_YES
 = 0x2,

76 
ACONFIGURATION_UI_MODE_TYPE_ANY
 = 0x00,

77 
ACONFIGURATION_UI_MODE_TYPE_NORMAL
 = 0x01,

78 
ACONFIGURATION_UI_MODE_TYPE_DESK
 = 0x02,

79 
ACONFIGURATION_UI_MODE_TYPE_CAR
 = 0x03,

81 
ACONFIGURATION_UI_MODE_NIGHT_ANY
 = 0x00,

82 
ACONFIGURATION_UI_MODE_NIGHT_NO
 = 0x1,

83 
ACONFIGURATION_UI_MODE_NIGHT_YES
 = 0x2,

85 
ACONFIGURATION_MCC
 = 0x0001,

86 
ACONFIGURATION_MNC
 = 0x0002,

87 
ACONFIGURATION_LOCALE
 = 0x0004,

88 
ACONFIGURATION_TOUCHSCREEN
 = 0x0008,

89 
ACONFIGURATION_KEYBOARD
 = 0x0010,

90 
ACONFIGURATION_KEYBOARD_HIDDEN
 = 0x0020,

91 
ACONFIGURATION_NAVIGATION
 = 0x0040,

92 
ACONFIGURATION_ORIENTATION
 = 0x0080,

93 
ACONFIGURATION_DENSITY
 = 0x0100,

94 
ACONFIGURATION_SCREEN_SIZE
 = 0x0200,

95 
ACONFIGURATION_VERSION
 = 0x0400,

96 
ACONFIGURATION_SCREEN_LAYOUT
 = 0x0800,

97 
ACONFIGURATION_UI_MODE
 = 0x1000,

103 
AC⁄figuøti⁄
* 
AC⁄figuøti⁄_√w
();

109 
AC⁄figuøti⁄_dñëe
(
AC⁄figuøti⁄
* 
c⁄fig
);

115 
AC⁄figuøti⁄_‰omAs£tM™agî
(
AC⁄figuøti⁄
* 
out
, 
AAs£tM™agî
* 
am
);

120 
AC⁄figuøti⁄_c›y
(
AC⁄figuøti⁄
* 
de°
, AC⁄figuøti⁄* 
§c
);

125 
öt32_t
 
AC⁄figuøti⁄_gëMcc
(
AC⁄figuøti⁄
* 
c⁄fig
);

130 
AC⁄figuøti⁄_£tMcc
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
mcc
);

135 
öt32_t
 
AC⁄figuøti⁄_gëMnc
(
AC⁄figuøti⁄
* 
c⁄fig
);

140 
AC⁄figuøti⁄_£tMnc
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
mnc
);

147 
AC⁄figuøti⁄_gëL™guage
(
AC⁄figuøti⁄
* 
c⁄fig
, * 
outL™guage
);

153 
AC⁄figuøti⁄_£tL™guage
(
AC⁄figuøti⁄
* 
c⁄fig
, c⁄° * 
œnguage
);

160 
AC⁄figuøti⁄_gëCou¡ry
(
AC⁄figuøti⁄
* 
c⁄fig
, * 
outCou¡ry
);

166 
AC⁄figuøti⁄_£tCou¡ry
(
AC⁄figuøti⁄
* 
c⁄fig
, c⁄° * 
cou¡ry
);

171 
öt32_t
 
AC⁄figuøti⁄_gëOrõ¡©i⁄
(
AC⁄figuøti⁄
* 
c⁄fig
);

176 
AC⁄figuøti⁄_£tOrõ¡©i⁄
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
‹õ¡©i⁄
);

181 
öt32_t
 
AC⁄figuøti⁄_gëTouchs¸ìn
(
AC⁄figuøti⁄
* 
c⁄fig
);

186 
AC⁄figuøti⁄_£tTouchs¸ìn
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
touchs¸ìn
);

191 
öt32_t
 
AC⁄figuøti⁄_gëDísôy
(
AC⁄figuøti⁄
* 
c⁄fig
);

196 
AC⁄figuøti⁄_£tDísôy
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
dísôy
);

201 
öt32_t
 
AC⁄figuøti⁄_gëKeybﬂrd
(
AC⁄figuøti⁄
* 
c⁄fig
);

206 
AC⁄figuøti⁄_£tKeybﬂrd
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
keybﬂrd
);

211 
öt32_t
 
AC⁄figuøti⁄_gëNavig©i⁄
(
AC⁄figuøti⁄
* 
c⁄fig
);

216 
AC⁄figuøti⁄_£tNavig©i⁄
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
«vig©i⁄
);

221 
öt32_t
 
AC⁄figuøti⁄_gëKeysHiddí
(
AC⁄figuøti⁄
* 
c⁄fig
);

226 
AC⁄figuøti⁄_£tKeysHiddí
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
keysHiddí
);

231 
öt32_t
 
AC⁄figuøti⁄_gëNavHiddí
(
AC⁄figuøti⁄
* 
c⁄fig
);

236 
AC⁄figuøti⁄_£tNavHiddí
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
«vHiddí
);

241 
öt32_t
 
AC⁄figuøti⁄_gëSdkVîsi⁄
(
AC⁄figuøti⁄
* 
c⁄fig
);

246 
AC⁄figuøti⁄_£tSdkVîsi⁄
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
sdkVîsi⁄
);

251 
öt32_t
 
AC⁄figuøti⁄_gëS¸ìnSize
(
AC⁄figuøti⁄
* 
c⁄fig
);

256 
AC⁄figuøti⁄_£tS¸ìnSize
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
s¸ìnSize
);

261 
öt32_t
 
AC⁄figuøti⁄_gëS¸ìnL⁄g
(
AC⁄figuøti⁄
* 
c⁄fig
);

266 
AC⁄figuøti⁄_£tS¸ìnL⁄g
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
s¸ìnL⁄g
);

271 
öt32_t
 
AC⁄figuøti⁄_gëUiModeTy≥
(
AC⁄figuøti⁄
* 
c⁄fig
);

276 
AC⁄figuøti⁄_£tUiModeTy≥
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
uiModeTy≥
);

281 
öt32_t
 
AC⁄figuøti⁄_gëUiModeNight
(
AC⁄figuøti⁄
* 
c⁄fig
);

286 
AC⁄figuøti⁄_£tUiModeNight
(
AC⁄figuøti⁄
* 
c⁄fig
, 
öt32_t
 
uiModeNight
);

293 
öt32_t
 
AC⁄figuøti⁄_diff
(
AC⁄figuøti⁄
* 
c⁄fig1
, AC⁄figuøti⁄* 
c⁄fig2
);

300 
öt32_t
 
AC⁄figuøti⁄_m©ch
(
AC⁄figuøti⁄
* 
ba£
, AC⁄figuøti⁄* 
ªque°ed
);

312 
öt32_t
 
AC⁄figuøti⁄_isBëãrTh™
(
AC⁄figuøti⁄
* 
ba£
, AC⁄figuøti⁄* 
ã°
,

313 
AC⁄figuøti⁄
* 
ªque°ed
);

315 #ifde‡
__˝lu•lus


	@android/input.h

17 #i‚de‡
_ANDROID_INPUT_H


18 
	#_ANDROID_INPUT_H


	)

43 
	~<°döt.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<™droid/keycodes.h
>

46 
	~<™droid/lo›î.h
>

48 #ifde‡
__˝lu•lus


58 
AKEY_STATE_UNKNOWN
 = -1,

61 
AKEY_STATE_UP
 = 0,

64 
AKEY_STATE_DOWN
 = 1,

67 
AKEY_STATE_VIRTUAL
 = 2

75 
AMETA_NONE
 = 0,

78 
AMETA_ALT_ON
 = 0x02,

81 
AMETA_ALT_LEFT_ON
 = 0x10,

84 
AMETA_ALT_RIGHT_ON
 = 0x20,

87 
AMETA_SHIFT_ON
 = 0x01,

90 
AMETA_SHIFT_LEFT_ON
 = 0x40,

93 
AMETA_SHIFT_RIGHT_ON
 = 0x80,

96 
AMETA_SYM_ON
 = 0x04

105 
AI≈utEvít
;

106 
AI≈utEvít
 
	tAI≈utEvít
;

113 
AINPUT_EVENT_TYPE_KEY
 = 1,

116 
AINPUT_EVENT_TYPE_MOTION
 = 2

124 
AKEY_EVENT_ACTION_DOWN
 = 0,

127 
AKEY_EVENT_ACTION_UP
 = 1,

133 
AKEY_EVENT_ACTION_MULTIPLE
 = 2

141 
AKEY_EVENT_FLAG_WOKE_HERE
 = 0x1,

144 
AKEY_EVENT_FLAG_SOFT_KEYBOARD
 = 0x2,

147 
AKEY_EVENT_FLAG_KEEP_TOUCH_MODE
 = 0x4,

152 
AKEY_EVENT_FLAG_FROM_SYSTEM
 = 0x8,

159 
AKEY_EVENT_FLAG_EDITOR_ACTION
 = 0x10,

169 
AKEY_EVENT_FLAG_CANCELED
 = 0x20,

174 
AKEY_EVENT_FLAG_VIRTUAL_HARD_KEY
 = 0x40,

178 
AKEY_EVENT_FLAG_LONG_PRESS
 = 0x80,

182 
AKEY_EVENT_FLAG_CANCELED_LONG_PRESS
 = 0x100,

188 
AKEY_EVENT_FLAG_TRACKING
 = 0x200

198 
	#AMOTION_EVENT_ACTION_POINTER_INDEX_SHIFT
 8

	)

203 
AMOTION_EVENT_ACTION_MASK
 = 0xff,

210 
AMOTION_EVENT_ACTION_POINTER_INDEX_MASK
 = 0xff00,

214 
AMOTION_EVENT_ACTION_DOWN
 = 0,

219 
AMOTION_EVENT_ACTION_UP
 = 1,

225 
AMOTION_EVENT_ACTION_MOVE
 = 2,

231 
AMOTION_EVENT_ACTION_CANCEL
 = 3,

236 
AMOTION_EVENT_ACTION_OUTSIDE
 = 4,

241 
AMOTION_EVENT_ACTION_POINTER_DOWN
 = 5,

246 
AMOTION_EVENT_ACTION_POINTER_UP
 = 6

262 
AMOTION_EVENT_FLAG_WINDOW_IS_OBSCURED
 = 0x1,

270 
AMOTION_EVENT_EDGE_FLAG_NONE
 = 0,

273 
AMOTION_EVENT_EDGE_FLAG_TOP
 = 0x01,

276 
AMOTION_EVENT_EDGE_FLAG_BOTTOM
 = 0x02,

279 
AMOTION_EVENT_EDGE_FLAG_LEFT
 = 0x04,

282 
AMOTION_EVENT_EDGE_FLAG_RIGHT
 = 0x08

292 
AINPUT_SOURCE_CLASS_MASK
 = 0x000000ff,

294 
AINPUT_SOURCE_CLASS_BUTTON
 = 0x00000001,

295 
AINPUT_SOURCE_CLASS_POINTER
 = 0x00000002,

296 
AINPUT_SOURCE_CLASS_NAVIGATION
 = 0x00000004,

297 
AINPUT_SOURCE_CLASS_POSITION
 = 0x00000008,

301 
AINPUT_SOURCE_UNKNOWN
 = 0x00000000,

303 
AINPUT_SOURCE_KEYBOARD
 = 0x00000100 | 
AINPUT_SOURCE_CLASS_BUTTON
,

304 
AINPUT_SOURCE_DPAD
 = 0x00000200 | 
AINPUT_SOURCE_CLASS_BUTTON
,

305 
AINPUT_SOURCE_TOUCHSCREEN
 = 0x00001000 | 
AINPUT_SOURCE_CLASS_POINTER
,

306 
AINPUT_SOURCE_MOUSE
 = 0x00002000 | 
AINPUT_SOURCE_CLASS_POINTER
,

307 
AINPUT_SOURCE_TRACKBALL
 = 0x00010000 | 
AINPUT_SOURCE_CLASS_NAVIGATION
,

308 
AINPUT_SOURCE_TOUCHPAD
 = 0x00100000 | 
AINPUT_SOURCE_CLASS_POSITION
,

310 
AINPUT_SOURCE_ANY
 = 0xffffff00,

319 
AINPUT_KEYBOARD_TYPE_NONE
 = 0,

320 
AINPUT_KEYBOARD_TYPE_NON_ALPHABETIC
 = 1,

321 
AINPUT_KEYBOARD_TYPE_ALPHABETIC
 = 2,

332 
AINPUT_MOTION_RANGE_X
 = 0,

333 
AINPUT_MOTION_RANGE_Y
 = 1,

334 
AINPUT_MOTION_RANGE_PRESSURE
 = 2,

335 
AINPUT_MOTION_RANGE_SIZE
 = 3,

336 
AINPUT_MOTION_RANGE_TOUCH_MAJOR
 = 4,

337 
AINPUT_MOTION_RANGE_TOUCH_MINOR
 = 5,

338 
AINPUT_MOTION_RANGE_TOOL_MAJOR
 = 6,

339 
AINPUT_MOTION_RANGE_TOOL_MINOR
 = 7,

340 
AINPUT_MOTION_RANGE_ORIENTATION
 = 8,

354 
öt32_t
 
AI≈utEvít_gëTy≥
(c⁄° 
AI≈utEvít
* 
evít
);

366 
öt32_t
 
AI≈utEvít_gëDevi˚Id
(c⁄° 
AI≈utEvít
* 
evít
);

369 
öt32_t
 
AI≈utEvít_gëSour˚
(c⁄° 
AI≈utEvít
* 
evít
);

374 
öt32_t
 
AKeyEvít_gëA˘i⁄
(c⁄° 
AI≈utEvít
* 
key_evít
);

377 
öt32_t
 
AKeyEvít_gëFœgs
(c⁄° 
AI≈utEvít
* 
key_evít
);

381 
öt32_t
 
AKeyEvít_gëKeyCode
(c⁄° 
AI≈utEvít
* 
key_evít
);

385 
öt32_t
 
AKeyEvít_gëSˇnCode
(c⁄° 
AI≈utEvít
* 
key_evít
);

388 
öt32_t
 
AKeyEvít_gëMëaSèã
(c⁄° 
AI≈utEvít
* 
key_evít
);

394 
öt32_t
 
AKeyEvít_gëRïótCou¡
(c⁄° 
AI≈utEvít
* 
key_evít
);

401 
öt64_t
 
AKeyEvít_gëDownTime
(c⁄° 
AI≈utEvít
* 
key_evít
);

405 
öt64_t
 
AKeyEvít_gëEvítTime
(c⁄° 
AI≈utEvít
* 
key_evít
);

410 
öt32_t
 
AMŸi⁄Evít_gëA˘i⁄
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
);

413 
öt32_t
 
AMŸi⁄Evít_gëFœgs
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
);

417 
öt32_t
 
AMŸi⁄Evít_gëMëaSèã
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
);

422 
öt32_t
 
AMŸi⁄Evít_gëEdgeFœgs
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
);

426 
öt64_t
 
AMŸi⁄Evít_gëDownTime
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
);

430 
öt64_t
 
AMŸi⁄Evít_gëEvítTime
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
);

436 
AMŸi⁄Evít_gëXOff£t
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
Ë
__NDK_FPABI__
;

442 
AMŸi⁄Evít_gëYOff£t
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
Ë
__NDK_FPABI__
;

447 
AMŸi⁄Evít_gëXPªcisi⁄
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
Ë
__NDK_FPABI__
;

452 
AMŸi⁄Evít_gëYPªcisi⁄
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
Ë
__NDK_FPABI__
;

456 
size_t
 
AMŸi⁄Evít_gëPoöãrCou¡
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
);

462 
öt32_t
 
AMŸi⁄Evít_gëPoöãrId
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
);

468 
AMŸi⁄Evít_gëRawX
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

474 
AMŸi⁄Evít_gëRawY
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

479 
AMŸi⁄Evít_gëX
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

484 
AMŸi⁄Evít_gëY
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

490 
AMŸi⁄Evít_gëPªssuª
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

498 
AMŸi⁄Evít_gëSize
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

502 
AMŸi⁄Evít_gëTouchMaj‹
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

506 
AMŸi⁄Evít_gëTouchMö‹
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

512 
AMŸi⁄Evít_gëToﬁMaj‹
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

518 
AMŸi⁄Evít_gëToﬁMö‹
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

528 
AMŸi⁄Evít_gëOrõ¡©i⁄
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
Ë
__NDK_FPABI__
;

534 
size_t
 
AMŸi⁄Evít_gëHi°‹ySize
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
);

538 
öt64_t
 
AMŸi⁄Evít_gëHi°‹iˇlEvítTime
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
,

539 
size_t
 
hi°‹y_ödex
);

548 
AMŸi⁄Evít_gëHi°‹iˇlRawX
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

549 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

558 
AMŸi⁄Evít_gëHi°‹iˇlRawY
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

559 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

565 
AMŸi⁄Evít_gëHi°‹iˇlX
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

566 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

572 
AMŸi⁄Evít_gëHi°‹iˇlY
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

573 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

580 
AMŸi⁄Evít_gëHi°‹iˇlPªssuª
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

581 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

590 
AMŸi⁄Evít_gëHi°‹iˇlSize
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

591 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

596 
AMŸi⁄Evít_gëHi°‹iˇlTouchMaj‹
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

597 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

602 
AMŸi⁄Evít_gëHi°‹iˇlTouchMö‹
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

603 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

610 
AMŸi⁄Evít_gëHi°‹iˇlToﬁMaj‹
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

611 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

618 
AMŸi⁄Evít_gëHi°‹iˇlToﬁMö‹
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

619 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

630 
AMŸi⁄Evít_gëHi°‹iˇlOrõ¡©i⁄
(c⁄° 
AI≈utEvít
* 
mŸi⁄_evít
, 
size_t
 
poöãr_ödex
,

631 
size_t
 
hi°‹y_ödex
Ë
__NDK_FPABI__
;

640 
AI≈utQueue
;

641 
AI≈utQueue
 
	tAI≈utQueue
;

647 
AI≈utQueue_©èchLo›î
(
AI≈utQueue
* 
queue
, 
ALo›î
* 
lo›î
,

648 
idít
, 
ALo›î_ˇŒbackFunc
 
ˇŒback
, * 
d©a
);

653 
AI≈utQueue_dëachLo›î
(
AI≈utQueue
* 
queue
);

660 
öt32_t
 
AI≈utQueue_hasEvíts
(
AI≈utQueue
* 
queue
);

666 
öt32_t
 
AI≈utQueue_gëEvít
(
AI≈utQueue
* 
queue
, 
AI≈utEvít
** 
outEvít
);

676 
öt32_t
 
AI≈utQueue_¥eDi•©chEvít
(
AI≈utQueue
* 
queue
, 
AI≈utEvít
* 
evít
);

682 
AI≈utQueue_föishEvít
(
AI≈utQueue
* 
queue
, 
AI≈utEvít
* 
evít
, 
h™dÀd
);

684 #ifde‡
__˝lu•lus


	@android/keycodes.h

17 #i‚de‡
_ANDROID_KEYCODES_H


18 
	#_ANDROID_KEYCODES_H


	)

36 
	~<sys/ty≥s.h
>

38 #ifde‡
__˝lu•lus


46 
AKEYCODE_UNKNOWN
 = 0,

47 
AKEYCODE_SOFT_LEFT
 = 1,

48 
AKEYCODE_SOFT_RIGHT
 = 2,

49 
AKEYCODE_HOME
 = 3,

50 
AKEYCODE_BACK
 = 4,

51 
AKEYCODE_CALL
 = 5,

52 
AKEYCODE_ENDCALL
 = 6,

53 
AKEYCODE_0
 = 7,

54 
AKEYCODE_1
 = 8,

55 
AKEYCODE_2
 = 9,

56 
AKEYCODE_3
 = 10,

57 
AKEYCODE_4
 = 11,

58 
AKEYCODE_5
 = 12,

59 
AKEYCODE_6
 = 13,

60 
AKEYCODE_7
 = 14,

61 
AKEYCODE_8
 = 15,

62 
AKEYCODE_9
 = 16,

63 
AKEYCODE_STAR
 = 17,

64 
AKEYCODE_POUND
 = 18,

65 
AKEYCODE_DPAD_UP
 = 19,

66 
AKEYCODE_DPAD_DOWN
 = 20,

67 
AKEYCODE_DPAD_LEFT
 = 21,

68 
AKEYCODE_DPAD_RIGHT
 = 22,

69 
AKEYCODE_DPAD_CENTER
 = 23,

70 
AKEYCODE_VOLUME_UP
 = 24,

71 
AKEYCODE_VOLUME_DOWN
 = 25,

72 
AKEYCODE_POWER
 = 26,

73 
AKEYCODE_CAMERA
 = 27,

74 
AKEYCODE_CLEAR
 = 28,

75 
AKEYCODE_A
 = 29,

76 
AKEYCODE_B
 = 30,

77 
AKEYCODE_C
 = 31,

78 
AKEYCODE_D
 = 32,

79 
AKEYCODE_E
 = 33,

80 
AKEYCODE_F
 = 34,

81 
AKEYCODE_G
 = 35,

82 
AKEYCODE_H
 = 36,

83 
AKEYCODE_I
 = 37,

84 
AKEYCODE_J
 = 38,

85 
AKEYCODE_K
 = 39,

86 
AKEYCODE_L
 = 40,

87 
AKEYCODE_M
 = 41,

88 
AKEYCODE_N
 = 42,

89 
AKEYCODE_O
 = 43,

90 
AKEYCODE_P
 = 44,

91 
AKEYCODE_Q
 = 45,

92 
AKEYCODE_R
 = 46,

93 
AKEYCODE_S
 = 47,

94 
AKEYCODE_T
 = 48,

95 
AKEYCODE_U
 = 49,

96 
AKEYCODE_V
 = 50,

97 
AKEYCODE_W
 = 51,

98 
AKEYCODE_X
 = 52,

99 
AKEYCODE_Y
 = 53,

100 
AKEYCODE_Z
 = 54,

101 
AKEYCODE_COMMA
 = 55,

102 
AKEYCODE_PERIOD
 = 56,

103 
AKEYCODE_ALT_LEFT
 = 57,

104 
AKEYCODE_ALT_RIGHT
 = 58,

105 
AKEYCODE_SHIFT_LEFT
 = 59,

106 
AKEYCODE_SHIFT_RIGHT
 = 60,

107 
AKEYCODE_TAB
 = 61,

108 
AKEYCODE_SPACE
 = 62,

109 
AKEYCODE_SYM
 = 63,

110 
AKEYCODE_EXPLORER
 = 64,

111 
AKEYCODE_ENVELOPE
 = 65,

112 
AKEYCODE_ENTER
 = 66,

113 
AKEYCODE_DEL
 = 67,

114 
AKEYCODE_GRAVE
 = 68,

115 
AKEYCODE_MINUS
 = 69,

116 
AKEYCODE_EQUALS
 = 70,

117 
AKEYCODE_LEFT_BRACKET
 = 71,

118 
AKEYCODE_RIGHT_BRACKET
 = 72,

119 
AKEYCODE_BACKSLASH
 = 73,

120 
AKEYCODE_SEMICOLON
 = 74,

121 
AKEYCODE_APOSTROPHE
 = 75,

122 
AKEYCODE_SLASH
 = 76,

123 
AKEYCODE_AT
 = 77,

124 
AKEYCODE_NUM
 = 78,

125 
AKEYCODE_HEADSETHOOK
 = 79,

126 
AKEYCODE_FOCUS
 = 80,

127 
AKEYCODE_PLUS
 = 81,

128 
AKEYCODE_MENU
 = 82,

129 
AKEYCODE_NOTIFICATION
 = 83,

130 
AKEYCODE_SEARCH
 = 84,

131 
AKEYCODE_MEDIA_PLAY_PAUSE
= 85,

132 
AKEYCODE_MEDIA_STOP
 = 86,

133 
AKEYCODE_MEDIA_NEXT
 = 87,

134 
AKEYCODE_MEDIA_PREVIOUS
 = 88,

135 
AKEYCODE_MEDIA_REWIND
 = 89,

136 
AKEYCODE_MEDIA_FAST_FORWARD
 = 90,

137 
AKEYCODE_MUTE
 = 91,

138 
AKEYCODE_PAGE_UP
 = 92,

139 
AKEYCODE_PAGE_DOWN
 = 93,

140 
AKEYCODE_PICTSYMBOLS
 = 94,

141 
AKEYCODE_SWITCH_CHARSET
 = 95,

142 
AKEYCODE_BUTTON_A
 = 96,

143 
AKEYCODE_BUTTON_B
 = 97,

144 
AKEYCODE_BUTTON_C
 = 98,

145 
AKEYCODE_BUTTON_X
 = 99,

146 
AKEYCODE_BUTTON_Y
 = 100,

147 
AKEYCODE_BUTTON_Z
 = 101,

148 
AKEYCODE_BUTTON_L1
 = 102,

149 
AKEYCODE_BUTTON_R1
 = 103,

150 
AKEYCODE_BUTTON_L2
 = 104,

151 
AKEYCODE_BUTTON_R2
 = 105,

152 
AKEYCODE_BUTTON_THUMBL
 = 106,

153 
AKEYCODE_BUTTON_THUMBR
 = 107,

154 
AKEYCODE_BUTTON_START
 = 108,

155 
AKEYCODE_BUTTON_SELECT
 = 109,

156 
AKEYCODE_BUTTON_MODE
 = 110,

162 #ifde‡
__˝lu•lus


	@android/log.h

17 #i‚de‡
_ANDROID_LOG_H


18 
	#_ANDROID_LOG_H


	)

70 
	~<°d¨g.h
>

72 #ifde‡
__˝lu•lus


79 
	e™droid_LogPri‹ôy
 {

80 
ANDROID_LOG_UNKNOWN
 = 0,

81 
ANDROID_LOG_DEFAULT
,

82 
ANDROID_LOG_VERBOSE
,

83 
ANDROID_LOG_DEBUG
,

84 
ANDROID_LOG_INFO
,

85 
ANDROID_LOG_WARN
,

86 
ANDROID_LOG_ERROR
,

87 
ANDROID_LOG_FATAL
,

88 
ANDROID_LOG_SILENT
,

89 } 
	t™droid_LogPri‹ôy
;

94 
__™droid_log_wrôe
(
¥io
, c⁄° *
èg
, c⁄° *
ãxt
);

99 
__™droid_log_¥öt
(
¥io
, c⁄° *
èg
, c⁄° *
fmt
, ...)

100 #i‡
deföed
(
__GNUC__
)

101 
__©åibuã__
 ((
f‹m©
(
¥ötf
, 3, 4)))

109 
__™droid_log_v¥öt
(
¥io
, c⁄° *
èg
,

110 c⁄° *
fmt
, 
va_li°
 
≠
);

116 
__™droid_log_as£π
(c⁄° *
c⁄d
, c⁄° *
èg
,

117 c⁄° *
fmt
, ...)

118 #i‡
deföed
(
__GNUC__
)

119 
__©åibuã__
 ((
n‹ëu∫
))

120 
__©åibuã__
 ((
f‹m©
(
¥ötf
, 3, 4)))

124 #ifde‡
__˝lu•lus


	@android/looper.h

18 #i‚de‡
ANDROID_LOOPER_H


19 
	#ANDROID_LOOPER_H


	)

21 #ifde‡
__˝lu•lus


38 
ALo›î
;

39 
ALo›î
 
	tALo›î
;

45 
ALo›î
* 
ALo›î_f‹Thªad
();

55 
ALOOPER_PREPARE_ALLOW_NON_CALLBACKS
 = 1<<0

65 
ALo›î
* 
ALo›î_¥ï¨e
(
›ts
);

73 
ALOOPER_POLL_WAKE
 = -1,

79 
ALOOPER_POLL_CALLBACK
 = -2,

85 
ALOOPER_POLL_TIMEOUT
 = -3,

91 
ALOOPER_POLL_ERROR
 = -4,

99 
ALo›î_acquúe
(
ALo›î
* 
lo›î
);

104 
ALo›î_ªÀa£
(
ALo›î
* 
lo›î
);

115 
ALOOPER_EVENT_INPUT
 = 1 << 0,

120 
ALOOPER_EVENT_OUTPUT
 = 1 << 1,

128 
ALOOPER_EVENT_ERROR
 = 1 << 2,

137 
ALOOPER_EVENT_HANGUP
 = 1 << 3,

146 
ALOOPER_EVENT_INVALID
 = 1 << 4,

159 (*
ALo›î_ˇŒbackFunc
)(
	tfd
, 
	tevíts
, * 
	td©a
);

187 
ALo›î_pﬁlOn˚
(
timeoutMûlis
, * 
outFd
, * 
outEvíts
, ** 
outD©a
);

194 
ALo›î_pﬁlAŒ
(
timeoutMûlis
, * 
outFd
, * 
outEvíts
, ** 
outD©a
);

202 
ALo›î_wake
(
ALo›î
* 
lo›î
);

230 
ALo›î_addFd
(
ALo›î
* 
lo›î
, 
fd
, 
idít
, 
evíts
,

231 
ALo›î_ˇŒbackFunc
 
ˇŒback
, * 
d©a
);

250 
ALo›î_ªmoveFd
(
ALo›î
* 
lo›î
, 
fd
);

252 #ifde‡
__˝lu•lus


	@android/native_activity.h

18 #i‚de‡
ANDROID_NATIVE_ACTIVITY_H


19 
	#ANDROID_NATIVE_ACTIVITY_H


	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<jni.h
>

26 
	~<™droid/as£t_m™agî.h
>

27 
	~<™droid/öput.h
>

28 
	~<™droid/«tive_wödow.h
>

30 #ifde‡
__˝lu•lus


34 
AN©iveA˘ivôyCÆlbacks
;

41 
	sAN©iveA˘ivôy
 {

48 
AN©iveA˘ivôyCÆlbacks
* 
ˇŒbacks
;

53 
JavaVM
* 
vm
;

60 
JNIEnv
* 
ív
;

72 
jobje˘
 
˛azz
;

77 c⁄° * 
öã∫ÆD©aP©h
;

82 c⁄° * 
exã∫ÆD©aP©h
;

87 
öt32_t
 
sdkVîsi⁄
;

94 * 
ö°™˚
;

100 
AAs£tM™agî
* 
as£tM™agî
;

101 } 
	tAN©iveA˘ivôy
;

109 
	sAN©iveA˘ivôyCÆlbacks
 {

114 (*
⁄Sèπ
)(
AN©iveA˘ivôy
* 
a˘ivôy
);

120 (*
⁄Resume
)(
AN©iveA˘ivôy
* 
a˘ivôy
);

131 * (*
⁄SaveIn°™˚Sèã
)(
AN©iveA˘ivôy
* 
a˘ivôy
, 
size_t
* 
outSize
);

137 (*
⁄Pau£
)(
AN©iveA˘ivôy
* 
a˘ivôy
);

143 (*
⁄St›
)(
AN©iveA˘ivôy
* 
a˘ivôy
);

149 (*
⁄De°roy
)(
AN©iveA˘ivôy
* 
a˘ivôy
);

155 (*
⁄WödowFocusCh™ged
)(
AN©iveA˘ivôy
* 
a˘ivôy
, 
hasFocus
);

161 (*
⁄N©iveWödowCª©ed
)(
AN©iveA˘ivôy
* 
a˘ivôy
, 
AN©iveWödow
* 
wödow
);

168 (*
⁄N©iveWödowResized
)(
AN©iveA˘ivôy
* 
a˘ivôy
, 
AN©iveWödow
* 
wödow
);

176 (*
⁄N©iveWödowRedøwNìded
)(
AN©iveA˘ivôy
* 
a˘ivôy
, 
AN©iveWödow
* 
wödow
);

186 (*
⁄N©iveWödowDe°royed
)(
AN©iveA˘ivôy
* 
a˘ivôy
, 
AN©iveWödow
* 
wödow
);

192 (*
⁄I≈utQueueCª©ed
)(
AN©iveA˘ivôy
* 
a˘ivôy
, 
AI≈utQueue
* 
queue
);

199 (*
⁄I≈utQueueDe°royed
)(
AN©iveA˘ivôy
* 
a˘ivôy
, 
AI≈utQueue
* 
queue
);

204 (*
⁄C⁄ã¡Re˘Ch™ged
)(
AN©iveA˘ivôy
* 
a˘ivôy
, c⁄° 
ARe˘
* 
ª˘
);

210 (*
⁄C⁄figuøti⁄Ch™ged
)(
AN©iveA˘ivôy
* 
a˘ivôy
);

217 (*
⁄LowMem‹y
)(
AN©iveA˘ivôy
* 
a˘ivôy
);

218 } 
	tAN©iveA˘ivôyCÆlbacks
;

228 
	tAN©iveA˘ivôy_¸óãFunc
(
	tAN©iveA˘ivôy
* 
	ta˘ivôy
,

229 * 
	tßvedSèã
, 
	tsize_t
 
	tßvedSèãSize
);

237 
AN©iveA˘ivôy_¸óãFunc
 
AN©iveA˘ivôy_⁄Cª©e
;

245 
AN©iveA˘ivôy_föish
(
AN©iveA˘ivôy
* 
a˘ivôy
);

253 
AN©iveA˘ivôy_£tWödowF‹m©
(
AN©iveA˘ivôy
* 
a˘ivôy
, 
öt32_t
 
f‹m©
);

261 
AN©iveA˘ivôy_£tWödowFœgs
(
AN©iveA˘ivôy
* 
a˘ivôy
,

262 
uöt32_t
 
addFœgs
, uöt32_à
ªmoveFœgs
);

269 
	gANATIVEACTIVITY_SHOW_SOFT_INPUT_IMPLICIT
 = 0x0001,

270 
	gANATIVEACTIVITY_SHOW_SOFT_INPUT_FORCED
 = 0x0002,

279 
AN©iveA˘ivôy_showSo·I≈ut
(
AN©iveA˘ivôy
* 
a˘ivôy
, 
uöt32_t
 
Êags
);

286 
	gANATIVEACTIVITY_HIDE_SOFT_INPUT_IMPLICIT_ONLY
 = 0x0001,

287 
	gANATIVEACTIVITY_HIDE_SOFT_INPUT_NOT_ALWAYS
 = 0x0002,

296 
AN©iveA˘ivôy_hideSo·I≈ut
(
AN©iveA˘ivôy
* 
a˘ivôy
, 
uöt32_t
 
Êags
);

298 #ifde‡
__˝lu•lus


	@android/native_window.h

17 #i‚de‡
ANDROID_NATIVE_WINDOW_H


18 
	#ANDROID_NATIVE_WINDOW_H


	)

20 
	~<™droid/ª˘.h
>

22 #ifde‡
__˝lu•lus


30 
WINDOW_FORMAT_RGBA_8888
 = 1,

31 
WINDOW_FORMAT_RGBX_8888
 = 2,

32 
WINDOW_FORMAT_RGB_565
 = 4,

35 
AN©iveWödow
;

36 
AN©iveWödow
 
	tAN©iveWödow
;

38 
	sAN©iveWödow_Buf„r
 {

40 
öt32_t
 
width
;

43 
öt32_t
 
height
;

47 
öt32_t
 
°ride
;

50 
öt32_t
 
f‹m©
;

53 * 
bôs
;

56 
uöt32_t
 
ª£rved
[6];

57 } 
	tAN©iveWödow_Buf„r
;

63 
AN©iveWödow_acquúe
(
AN©iveWödow
* 
wödow
);

68 
AN©iveWödow_ªÀa£
(
AN©iveWödow
* 
wödow
);

74 
öt32_t
 
AN©iveWödow_gëWidth
(
AN©iveWödow
* 
wödow
);

80 
öt32_t
 
AN©iveWödow_gëHeight
(
AN©iveWödow
* 
wödow
);

86 
öt32_t
 
AN©iveWödow_gëF‹m©
(
AN©iveWödow
* 
wödow
);

99 
öt32_t
 
AN©iveWödow_£tBuf„rsGeomëry
(
AN©iveWödow
* 
wödow
, i¡32_à
width
, i¡32_à
height
, i¡32_à
f‹m©
);

104 
öt32_t
 
AN©iveWödow_lock
(
AN©iveWödow
* 
wödow
, 
AN©iveWödow_Buf„r
* 
outBuf„r
,

105 
ARe˘
* 
öOutDútyBounds
);

111 
öt32_t
 
AN©iveWödow_u∆ockAndPo°
(
AN©iveWödow
* 
wödow
);

113 #ifde‡
__˝lu•lus


	@android/native_window_jni.h

17 #i‚de‡
ANDROID_NATIVE_WINDOW_JNI_H


18 
	#ANDROID_NATIVE_WINDOW_JNI_H


	)

20 
	~<™droid/«tive_wödow.h
>

22 
	~<jni.h
>

24 #ifde‡
__˝lu•lus


34 
AN©iveWödow
* 
AN©iveWödow_‰omSurÁ˚
(
JNIEnv
* 
ív
, 
jobje˘
 
surÁ˚
);

36 #ifde‡
__˝lu•lus


	@android/obb.h

18 #i‚de‡
ANDROID_OBB_H


19 
	#ANDROID_OBB_H


	)

21 
	~<sys/ty≥s.h
>

23 #ifde‡
__˝lu•lus


27 
AObbInfo
;

28 
AObbInfo
 
	tAObbInfo
;

31 
AOBBINFO_OVERLAY
 = 0x0001,

37 
AObbInfo
* 
AObbSˇ¬î_gëObbInfo
(c⁄° * 
fûíame
);

42 
AObbInfo_dñëe
(
AObbInfo
* 
obbInfo
);

47 c⁄° * 
AObbInfo_gëPackageName
(
AObbInfo
* 
obbInfo
);

52 
öt32_t
 
AObbInfo_gëVîsi⁄
(
AObbInfo
* 
obbInfo
);

57 
öt32_t
 
AObbInfo_gëFœgs
(
AObbInfo
* 
obbInfo
);

59 #ifde‡
__˝lu•lus


	@android/rect.h

18 #i‚de‡
ANDROID_RECT_H


19 
	#ANDROID_RECT_H


	)

21 
	~<°döt.h
>

23 #ifde‡
__˝lu•lus


27 
	sARe˘
 {

28 #ifde‡
__˝lu•lus


29 
öt32_t
 
	tvÆue_ty≥
;

31 
öt32_t
 
À·
;

32 
öt32_t
 
t›
;

33 
öt32_t
 
right
;

34 
öt32_t
 
bŸtom
;

35 } 
ARe˘
;

37 #ifde‡
__˝lu•lus


	@android/sensor.h

18 #i‚de‡
ANDROID_SENSOR_H


19 
	#ANDROID_SENSOR_H


	)

43 
	~<sys/ty≥s.h
>

45 
	~<™droid/lo›î.h
>

47 #ifde‡
__˝lu•lus


58 
ASENSOR_TYPE_ACCELEROMETER
 = 1,

59 
ASENSOR_TYPE_MAGNETIC_FIELD
 = 2,

60 
ASENSOR_TYPE_GYROSCOPE
 = 4,

61 
ASENSOR_TYPE_LIGHT
 = 5,

62 
ASENSOR_TYPE_PROXIMITY
 = 8

69 
ASENSOR_STATUS_UNRELIABLE
 = 0,

70 
ASENSOR_STATUS_ACCURACY_LOW
 = 1,

71 
ASENSOR_STATUS_ACCURACY_MEDIUM
 = 2,

72 
ASENSOR_STATUS_ACCURACY_HIGH
 = 3

80 
	#ASENSOR_STANDARD_GRAVITY
 (9.80665f)

	)

82 
	#ASENSOR_MAGNETIC_FIELD_EARTH_MAX
 (60.0f)

	)

84 
	#ASENSOR_MAGNETIC_FIELD_EARTH_MIN
 (30.0f)

	)

91 
	sASís‹Ve˘‹
 {

93 
v
[3];

95 
x
;

96 
y
;

97 
z
;

100 
azimuth
;

101 
pôch
;

102 
rﬁl
;

105 
öt8_t
 
°©us
;

106 
uöt8_t
 
ª£rved
[3];

107 } 
	tASís‹Ve˘‹
;

110 
	sASís‹Evít
 {

111 
öt32_t
 
vîsi⁄
;

112 
öt32_t
 
£ns‹
;

113 
öt32_t
 
ty≥
;

114 
öt32_t
 
ª£rved0
;

115 
öt64_t
 
time°amp
;

117 
d©a
[16];

118 
ASís‹Ve˘‹
 
ve˘‹
;

119 
ASís‹Ve˘‹
 
ac˚Àøti⁄
;

120 
ASís‹Ve˘‹
 
mag√tic
;

121 
ãm≥øtuª
;

122 
di°™˚
;

123 
light
;

124 
¥essuª
;

126 
öt32_t
 
ª£rved1
[4];

127 } 
	tASís‹Evít
;

130 
ASís‹M™agî
;

131 
ASís‹M™agî
 
	tASís‹M™agî
;

133 
ASís‹EvítQueue
;

134 
ASís‹EvítQueue
 
	tASís‹EvítQueue
;

136 
ASís‹
;

137 
ASís‹
 
	tASís‹
;

138 
ASís‹
 c⁄°* 
	tASís‹Ref
;

139 
ASís‹Ref
 c⁄°* 
	tASís‹Li°
;

151 
ASís‹M™agî
* 
ASís‹M™agî_gëIn°™˚
();

157 
ASís‹M™agî_gëSís‹Li°
(
ASís‹M™agî
* 
m™agî
, 
ASís‹Li°
* 
li°
);

163 
ASís‹
 c⁄°* 
ASís‹M™agî_gëDeÁu…Sís‹
(
ASís‹M™agî
* 
m™agî
, 
ty≥
);

168 
ASís‹EvítQueue
* 
ASís‹M™agî_¸óãEvítQueue
(
ASís‹M™agî
* 
m™agî
,

169 
ALo›î
* 
lo›î
, 
idít
, 
ALo›î_ˇŒbackFunc
 
ˇŒback
, * 
d©a
);

174 
ASís‹M™agî_de°royEvítQueue
(
ASís‹M™agî
* 
m™agî
, 
ASís‹EvítQueue
* 
queue
);

182 
ASís‹EvítQueue_íabÀSís‹
(
ASís‹EvítQueue
* 
queue
, 
ASís‹
 c⁄°* 
£ns‹
);

187 
ASís‹EvítQueue_dißbÀSís‹
(
ASís‹EvítQueue
* 
queue
, 
ASís‹
 c⁄°* 
£ns‹
);

196 
ASís‹EvítQueue_£tEvítR©e
(
ASís‹EvítQueue
* 
queue
, 
ASís‹
 c⁄°* 
£ns‹
, 
öt32_t
 
u£c
);

203 
ASís‹EvítQueue_hasEvíts
(
ASís‹EvítQueue
* 
queue
);

218 
ssize_t
 
ASís‹EvítQueue_gëEvíts
(
ASís‹EvítQueue
* 
queue
,

219 
ASís‹Evít
* 
evíts
, 
size_t
 
cou¡
);

227 c⁄° * 
ASís‹_gëName
(
ASís‹
 c⁄°* 
£ns‹
);

232 c⁄° * 
ASís‹_gëVíd‹
(
ASís‹
 c⁄°* 
£ns‹
);

237 
ASís‹_gëTy≥
(
ASís‹
 c⁄°* 
£ns‹
);

242 
ASís‹_gëResﬁuti⁄
(
ASís‹
 c⁄°* 
£ns‹
Ë
__NDK_FPABI__
;

249 
ASís‹_gëMöDñay
(
ASís‹
 c⁄°* 
£ns‹
);

252 #ifde‡
__˝lu•lus


	@android/storage_manager.h

18 #i‚de‡
ANDROID_STORAGE_MANAGER_H


19 
	#ANDROID_STORAGE_MANAGER_H


	)

21 
	~<°döt.h
>

23 #ifde‡
__˝lu•lus


27 
ASt‹ageM™agî
;

28 
ASt‹ageM™agî
 
	tASt‹ageM™agî
;

35 
AOBB_STATE_MOUNTED
 = 1,

41 
AOBB_STATE_UNMOUNTED
 = 2,

48 
AOBB_STATE_ERROR_INTERNAL
 = 20,

54 
AOBB_STATE_ERROR_COULD_NOT_MOUNT
 = 21,

61 
AOBB_STATE_ERROR_COULD_NOT_UNMOUNT
 = 22,

68 
AOBB_STATE_ERROR_NOT_MOUNTED
 = 23,

74 
AOBB_STATE_ERROR_ALREADY_MOUNTED
 = 24,

82 
AOBB_STATE_ERROR_PERMISSION_DENIED
 = 25,

88 
ASt‹ageM™agî
* 
ASt‹ageM™agî_√w
();

93 
ASt‹ageM™agî_dñëe
(
ASt‹ageM™agî
* 
mgr
);

98 (*
ASt‹ageM™agî_obbCÆlbackFunc
)(c⁄° * 
	tfûíame
, c⁄° 
	töt32_t
 
	t°©e
, * 
	td©a
);

103 
ASt‹ageM™agî_mou¡Obb
(
ASt‹ageM™agî
* 
mgr
, c⁄° * 
fûíame
, c⁄° * 
key
,

104 
ASt‹ageM™agî_obbCÆlbackFunc
 
cb
, * 
d©a
);

109 
ASt‹ageM™agî_unmou¡Obb
(
ASt‹ageM™agî
* 
mgr
, c⁄° * 
fûíame
, c⁄° 
f‹˚
,

110 
ASt‹ageM™agî_obbCÆlbackFunc
 
cb
, * 
d©a
);

115 
ASt‹ageM™agî_isObbMou¡ed
(
ASt‹ageM™agî
* 
mgr
, c⁄° * 
fûíame
);

120 c⁄° * 
ASt‹ageM™agî_gëMou¡edObbP©h
(
ASt‹ageM™agî
* 
mgr
, c⁄° * 
fûíame
);

123 #ifde‡
__˝lu•lus


	@android/window.h

18 #i‚de‡
ANDROID_WINDOW_H


19 
	#ANDROID_WINDOW_H


	)

21 #ifde‡
__˝lu•lus


29 
AWINDOW_FLAG_ALLOW_LOCK_WHILE_SCREEN_ON
 = 0x00000001,

30 
AWINDOW_FLAG_DIM_BEHIND
 = 0x00000002,

31 
AWINDOW_FLAG_BLUR_BEHIND
 = 0x00000004,

32 
AWINDOW_FLAG_NOT_FOCUSABLE
 = 0x00000008,

33 
AWINDOW_FLAG_NOT_TOUCHABLE
 = 0x00000010,

34 
AWINDOW_FLAG_NOT_TOUCH_MODAL
 = 0x00000020,

35 
AWINDOW_FLAG_TOUCHABLE_WHEN_WAKING
 = 0x00000040,

36 
AWINDOW_FLAG_KEEP_SCREEN_ON
 = 0x00000080,

37 
AWINDOW_FLAG_LAYOUT_IN_SCREEN
 = 0x00000100,

38 
AWINDOW_FLAG_LAYOUT_NO_LIMITS
 = 0x00000200,

39 
AWINDOW_FLAG_FULLSCREEN
 = 0x00000400,

40 
AWINDOW_FLAG_FORCE_NOT_FULLSCREEN
 = 0x00000800,

41 
AWINDOW_FLAG_DITHER
 = 0x00001000,

42 
AWINDOW_FLAG_SECURE
 = 0x00002000,

43 
AWINDOW_FLAG_SCALED
 = 0x00004000,

44 
AWINDOW_FLAG_IGNORE_CHEEK_PRESSES
 = 0x00008000,

45 
AWINDOW_FLAG_LAYOUT_INSET_DECOR
 = 0x00010000,

46 
AWINDOW_FLAG_ALT_FOCUSABLE_IM
 = 0x00020000,

47 
AWINDOW_FLAG_WATCH_OUTSIDE_TOUCH
 = 0x00040000,

48 
AWINDOW_FLAG_SHOW_WHEN_LOCKED
 = 0x00080000,

49 
AWINDOW_FLAG_SHOW_WALLPAPER
 = 0x00100000,

50 
AWINDOW_FLAG_TURN_SCREEN_ON
 = 0x00200000,

51 
AWINDOW_FLAG_DISMISS_KEYGUARD
 = 0x00400000,

54 #ifde‡
__˝lu•lus


	@arpa/inet.h

28 #i‚de‡
_ARPA_INET_H_


29 
	#_ARPA_INET_H_


	)

31 
	~<°döt.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<√töë/ö.h
>

35 
__BEGIN_DECLS


37 
uöt32_t
 
	tö_addr_t
;

39 
uöt32_t
 
öë_addr
(const *);

41 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

42 * 
öë_¡ﬂ
(
ö_addr
);

44 
öë_±⁄
(, const *, *);

45 c⁄° * 
öë_¡›
(, c⁄° *, *, 
size_t
);

47 
öë_nßp_addr
(const *, *, );

48 * 
öë_nßp_¡ﬂ
(, const *, *);

50 
	g__END_DECLS


	@arpa/nameser.h

28 #i‚de‡
_¨∑_«me£r_h


29 
	#_¨∑_«me£r_h


	)

31 
	~<sys/ty≥s.h
>

32 
	~<sys/cdefs.h
>

	@arpa/telnet.h

32 #i‚de‡
_ARPA_TELNET_H


33 
	#_ARPA_TELNET_H
 1

	)

38 
	#IAC
 255

	)

39 
	#DONT
 254

	)

40 
	#DO
 253

	)

41 
	#WONT
 252

	)

42 
	#WILL
 251

	)

43 
	#SB
 250

	)

44 
	#GA
 249

	)

45 
	#EL
 248

	)

46 
	#EC
 247

	)

47 
	#AYT
 246

	)

48 
	#AO
 245

	)

49 
	#IP
 244

	)

50 
	#BREAK
 243

	)

51 
	#DM
 242

	)

52 
	#NOP
 241

	)

53 
	#SE
 240

	)

54 
	#EOR
 239

	)

55 
	#ABORT
 238

	)

56 
	#SUSP
 237

	)

57 
	#xEOF
 236

	)

59 
	#SYNCH
 242

	)

61 #ifde‡
TELCMDS


62 *
	gãlcmds
[] = {

68 *
ãlcmds
[];

71 
	#TELCMD_FIRST
 
xEOF


	)

72 
	#TELCMD_LAST
 
IAC


	)

73 
	#TELCMD_OK
(
x
Ë(()(xË<
TELCMD_LAST
 && \

74 ()(
x
Ë>
TELCMD_FIRST
)

	)

75 
	#TELCMD
(
x
Ë
ãlcmds
[(x)-
TELCMD_FIRST
]

	)

78 
	#TELOPT_BINARY
 0

	)

79 
	#TELOPT_ECHO
 1

	)

80 
	#TELOPT_RCP
 2

	)

81 
	#TELOPT_SGA
 3

	)

82 
	#TELOPT_NAMS
 4

	)

83 
	#TELOPT_STATUS
 5

	)

84 
	#TELOPT_TM
 6

	)

85 
	#TELOPT_RCTE
 7

	)

86 
	#TELOPT_NAOL
 8

	)

87 
	#TELOPT_NAOP
 9

	)

88 
	#TELOPT_NAOCRD
 10

	)

89 
	#TELOPT_NAOHTS
 11

	)

90 
	#TELOPT_NAOHTD
 12

	)

91 
	#TELOPT_NAOFFD
 13

	)

92 
	#TELOPT_NAOVTS
 14

	)

93 
	#TELOPT_NAOVTD
 15

	)

94 
	#TELOPT_NAOLFD
 16

	)

95 
	#TELOPT_XASCII
 17

	)

96 
	#TELOPT_LOGOUT
 18

	)

97 
	#TELOPT_BM
 19

	)

98 
	#TELOPT_DET
 20

	)

99 
	#TELOPT_SUPDUP
 21

	)

100 
	#TELOPT_SUPDUPOUTPUT
 22

	)

101 
	#TELOPT_SNDLOC
 23

	)

102 
	#TELOPT_TTYPE
 24

	)

103 
	#TELOPT_EOR
 25

	)

104 
	#TELOPT_TUID
 26

	)

105 
	#TELOPT_OUTMRK
 27

	)

106 
	#TELOPT_TTYLOC
 28

	)

107 
	#TELOPT_3270REGIME
 29

	)

108 
	#TELOPT_X3PAD
 30

	)

109 
	#TELOPT_NAWS
 31

	)

110 
	#TELOPT_TSPEED
 32

	)

111 
	#TELOPT_LFLOW
 33

	)

112 
	#TELOPT_LINEMODE
 34

	)

113 
	#TELOPT_XDISPLOC
 35

	)

114 
	#TELOPT_OLD_ENVIRON
 36

	)

115 
	#TELOPT_AUTHENTICATION
 37

	)

116 
	#TELOPT_ENCRYPT
 38

	)

117 
	#TELOPT_NEW_ENVIRON
 39

	)

118 
	#TELOPT_EXOPL
 255

	)

121 
	#NTELOPTS
 (1+
TELOPT_NEW_ENVIRON
)

	)

122 #ifde‡
TELOPTS


123 c⁄° *
	gãl›ts
[
NTELOPTS
+1] = {

136 
	#TELOPT_FIRST
 
TELOPT_BINARY


	)

137 
	#TELOPT_LAST
 
TELOPT_NEW_ENVIRON


	)

138 
	#TELOPT_OK
(
x
Ë(()(xË<
TELOPT_LAST
)

	)

139 
	#TELOPT
(
x
Ë
ãl›ts
[(x)-
TELOPT_FIRST
]

	)

143 
	#TELQUAL_IS
 0

	)

144 
	#TELQUAL_SEND
 1

	)

145 
	#TELQUAL_INFO
 2

	)

146 
	#TELQUAL_REPLY
 2

	)

147 
	#TELQUAL_NAME
 3

	)

149 
	#LFLOW_OFF
 0

	)

150 
	#LFLOW_ON
 1

	)

151 
	#LFLOW_RESTART_ANY
 2

	)

152 
	#LFLOW_RESTART_XON
 3

	)

158 
	#LM_MODE
 1

	)

159 
	#LM_FORWARDMASK
 2

	)

160 
	#LM_SLC
 3

	)

162 
	#MODE_EDIT
 0x01

	)

163 
	#MODE_TRAPSIG
 0x02

	)

164 
	#MODE_ACK
 0x04

	)

165 
	#MODE_SOFT_TAB
 0x08

	)

166 
	#MODE_LIT_ECHO
 0x10

	)

168 
	#MODE_MASK
 0x1f

	)

171 
	#MODE_FLOW
 0x0100

	)

172 
	#MODE_ECHO
 0x0200

	)

173 
	#MODE_INBIN
 0x0400

	)

174 
	#MODE_OUTBIN
 0x0800

	)

175 
	#MODE_FORCE
 0x1000

	)

177 
	#SLC_SYNCH
 1

	)

178 
	#SLC_BRK
 2

	)

179 
	#SLC_IP
 3

	)

180 
	#SLC_AO
 4

	)

181 
	#SLC_AYT
 5

	)

182 
	#SLC_EOR
 6

	)

183 
	#SLC_ABORT
 7

	)

184 
	#SLC_EOF
 8

	)

185 
	#SLC_SUSP
 9

	)

186 
	#SLC_EC
 10

	)

187 
	#SLC_EL
 11

	)

188 
	#SLC_EW
 12

	)

189 
	#SLC_RP
 13

	)

190 
	#SLC_LNEXT
 14

	)

191 
	#SLC_XON
 15

	)

192 
	#SLC_XOFF
 16

	)

193 
	#SLC_FORW1
 17

	)

194 
	#SLC_FORW2
 18

	)

196 
	#NSLC
 18

	)

202 
	#SLC_NAMELIST
 "0", "SYNCH", "BRK", "IP", "AO", "AYT", "EOR", \

204 "LNEXT", "XON", "XOFF", "FORW1", "FORW2", 0,

	)

205 #ifdef 
SLC_NAMES


206 c⁄° *
	g¶c_«mes
[] = {

207 
SLC_NAMELIST


210 *
¶c_«mes
[];

211 
	#SLC_NAMES
 
SLC_NAMELIST


	)

214 
	#SLC_NAME_OK
(
x
Ë(()(xË<
NSLC
)

	)

215 
	#SLC_NAME
(
x
Ë
¶c_«mes
[x]

	)

217 
	#SLC_NOSUPPORT
 0

	)

218 
	#SLC_CANTCHANGE
 1

	)

219 
	#SLC_VARIABLE
 2

	)

220 
	#SLC_DEFAULT
 3

	)

221 
	#SLC_LEVELBITS
 0x03

	)

223 
	#SLC_FUNC
 0

	)

224 
	#SLC_FLAGS
 1

	)

225 
	#SLC_VALUE
 2

	)

227 
	#SLC_ACK
 0x80

	)

228 
	#SLC_FLUSHIN
 0x40

	)

229 
	#SLC_FLUSHOUT
 0x20

	)

231 
	#OLD_ENV_VAR
 1

	)

232 
	#OLD_ENV_VALUE
 0

	)

233 
	#NEW_ENV_VAR
 0

	)

234 
	#NEW_ENV_VALUE
 1

	)

235 
	#ENV_ESC
 2

	)

236 
	#ENV_USERVAR
 3

	)

245 
	#AUTH_WHO_CLIENT
 0

	)

246 
	#AUTH_WHO_SERVER
 1

	)

247 
	#AUTH_WHO_MASK
 1

	)

252 
	#AUTH_HOW_ONE_WAY
 0

	)

253 
	#AUTH_HOW_MUTUAL
 2

	)

254 
	#AUTH_HOW_MASK
 2

	)

256 
	#AUTHTYPE_NULL
 0

	)

257 
	#AUTHTYPE_KERBEROS_V4
 1

	)

258 
	#AUTHTYPE_KERBEROS_V5
 2

	)

259 
	#AUTHTYPE_SPX
 3

	)

260 
	#AUTHTYPE_MINK
 4

	)

261 
	#AUTHTYPE_CNT
 5

	)

263 
	#AUTHTYPE_TEST
 99

	)

265 #ifdef 
AUTH_NAMES


266 c⁄° *
	gauthty≥_«mes
[] = {

270 *
authty≥_«mes
[];

273 
	#AUTHTYPE_NAME_OK
(
x
Ë(()(xË< 
AUTHTYPE_CNT
)

	)

274 
	#AUTHTYPE_NAME
(
x
Ë
authty≥_«mes
[x]

	)

279 
	#ENCRYPT_IS
 0

	)

280 
	#ENCRYPT_SUPPORT
 1

	)

281 
	#ENCRYPT_REPLY
 2

	)

282 
	#ENCRYPT_START
 3

	)

283 
	#ENCRYPT_END
 4

	)

284 
	#ENCRYPT_REQSTART
 5

	)

285 
	#ENCRYPT_REQEND
 6

	)

286 
	#ENCRYPT_ENC_KEYID
 7

	)

287 
	#ENCRYPT_DEC_KEYID
 8

	)

288 
	#ENCRYPT_CNT
 9

	)

290 
	#ENCTYPE_ANY
 0

	)

291 
	#ENCTYPE_DES_CFB64
 1

	)

292 
	#ENCTYPE_DES_OFB64
 2

	)

293 
	#ENCTYPE_CNT
 3

	)

295 #ifdef 
ENCRYPT_NAMES


296 c⁄° *
	gí¸y±_«mes
[] = {

301 c⁄° *
	gí˘y≥_«mes
[] = {

305 c⁄° *
í¸y±_«mes
[];

306 c⁄° *
í˘y≥_«mes
[];

310 
	#ENCRYPT_NAME_OK
(
x
Ë(()(xË< 
ENCRYPT_CNT
)

	)

311 
	#ENCRYPT_NAME
(
x
Ë
í¸y±_«mes
[x]

	)

313 
	#ENCTYPE_NAME_OK
(
x
Ë(()(xË< 
ENCTYPE_CNT
)

	)

314 
	#ENCTYPE_NAME
(
x
Ë
í˘y≥_«mes
[x]

	)

	@asm-generic/4level-fixup.h

12 #i‚de‡
_4LEVEL_FIXUP_H


13 
	#_4LEVEL_FIXUP_H


	)

15 
	#__ARCH_HAS_4LEVEL_HACK


	)

16 
	#__PAGETABLE_PUD_FOLDED


	)

18 
	#PUD_SIZE
 
PGDIR_SIZE


	)

19 
	#PUD_MASK
 
PGDIR_MASK


	)

20 
	#PTRS_PER_PUD
 1

	)

22 
	#pud_t
 
pgd_t


	)

24 
	#pmd_Æloc
(
mm
, 
pud
, 
addªss
Ë((
	`u∆ikñy
(
	`pgd_n⁄e
(*’ud))Ë&& 
	`__pmd_Æloc
(mm,Öud,áddªss))? 
NULL
: 
	`pmd_off£t
’ud,áddªss))

	)

26 
	#pud_Æloc
(
mm
, 
pgd
, 
addªss
Ë’gd)

	)

27 
	#pud_off£t
(
pgd
, 
°¨t
Ë’gd)

	)

28 
	#pud_n⁄e
(
pud
Ë0

	)

29 
	#pud_bad
(
pud
Ë0

	)

30 
	#pud_¥e£¡
(
pud
Ë1

	)

31 
	#pud_ERROR
(
pud
Ëdÿ{ } 0)

	)

32 
	#pud_˛ór
(
pud
Ë
	`pgd_˛ór
’ud)

	)

34 #unde‡
pud_‰ì_éb


35 
	#pud_‰ì_éb
(
éb
, 
x
Ëdÿ{ } 0)

	)

36 
	#pud_‰ì
(
x
Ëdÿ{ } 0)

	)

37 
	#__pud_‰ì_éb
(
éb
, 
x
Ëdÿ{ } 0)

	)

39 #unde‡
pud_addr_íd


40 
	#pud_addr_íd
(
addr
, 
íd
Ë”nd)

	)

	@asm-generic/audit_dir_write.h

	@asm-generic/bitops/__ffs.h

12 #i‚de‡
_ASM_GENERIC_BITOPS___FFS_H_


13 
	#_ASM_GENERIC_BITOPS___FFS_H_


	)

15 
	~<asm/ty≥s.h
>

17 #i‡
BITS_PER_LONG
 == 64

	@asm-generic/bitops/atomic.h

12 #i‚de‡
_ASM_GENERIC_BITOPS_ATOMIC_H_


13 
	#_ASM_GENERIC_BITOPS_ATOMIC_H_


	)

15 
	~<asm/ty≥s.h
>

17 
	#BITOP_MASK
(
ƒ
Ë(1UL << (“rË% 
BITS_PER_LONG
))

	)

18 
	#BITOP_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG
)

	)

20 
	#_©omic_•ö_lock_úqßve
(
l
,
f
Ëdÿ{ 
	`loˇl_úq_ßve
(f); } 0)

	)

21 
	#_©omic_•ö_u∆ock_úqª°‹e
(
l
,
f
Ëdÿ{ 
	`loˇl_úq_ª°‹e
(f); } 0)

	)

	@asm-generic/bitops/ffz.h

12 #i‚de‡
_ASM_GENERIC_BITOPS_FFZ_H_


13 
	#_ASM_GENERIC_BITOPS_FFZ_H_


	)

15 
	#ffz
(
x
Ë
	`__ffs
(~(x))

	)

	@asm-generic/bitops/find.h

12 #i‚de‡
_ASM_GENERIC_BITOPS_FIND_H_


13 
	#_ASM_GENERIC_BITOPS_FIND_H_


	)

15 
	#föd_fú°_bô
(
addr
, 
size
Ë
	`föd_√xt_bô
(◊ddr), (size), 0)

	)

16 
	#föd_fú°_zîo_bô
(
addr
, 
size
Ë
	`föd_√xt_zîo_bô
(◊ddr), (size), 0)

	)

	@asm-generic/bitops/fls.h

12 #i‚de‡
_ASM_GENERIC_BITOPS_FLS_H_


13 
	#_ASM_GENERIC_BITOPS_FLS_H_


	)

	@asm-generic/bitops/fls64.h

12 #i‚de‡
_ASM_GENERIC_BITOPS_FLS64_H_


13 
	#_ASM_GENERIC_BITOPS_FLS64_H_


	)

15 
	~<asm/ty≥s.h
>

	@asm-generic/bitops/le.h

12 #i‚de‡
_ASM_GENERIC_BITOPS_LE_H_


13 
	#_ASM_GENERIC_BITOPS_LE_H_


	)

15 
	~<asm/ty≥s.h
>

16 
	~<asm/byã‹dî.h
>

18 
	#BITOP_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG
)

	)

19 
	#BITOP_LE_SWIZZLE
 ((
BITS_PER_LONG
-1Ë& ~0x7)

	)

21 #ifde‡
__LITTLE_ENDIAN


23 
	#gíîic_ã°_À_bô
(
ƒ
, 
addr
Ë
	`ã°_bô
“r,áddr)

	)

24 
	#gíîic___£t_À_bô
(
ƒ
, 
addr
Ë
	`__£t_bô
“r,áddr)

	)

25 
	#gíîic___˛ór_À_bô
(
ƒ
, 
addr
Ë
	`__˛ór_bô
“r,áddr)

	)

27 
	#gíîic_ã°_™d_£t_À_bô
(
ƒ
, 
addr
Ë
	`ã°_™d_£t_bô
“r,áddr)

	)

28 
	#gíîic_ã°_™d_˛ór_À_bô
(
ƒ
, 
addr
Ë
	`ã°_™d_˛ór_bô
“r,áddr)

	)

30 
	#gíîic___ã°_™d_£t_À_bô
(
ƒ
, 
addr
Ë
	`__ã°_™d_£t_bô
“r,áddr)

	)

31 
	#gíîic___ã°_™d_˛ór_À_bô
(
ƒ
, 
addr
Ë
	`__ã°_™d_˛ór_bô
“r,áddr)

	)

33 
	#gíîic_föd_√xt_zîo_À_bô
(
addr
, 
size
, 
off£t
Ë
	`föd_√xt_zîo_bô
◊ddr, size, off£t)

	)

35 #ñi‡
deföed
(
__BIG_ENDIAN
)

37 
	#gíîic_ã°_À_bô
(
ƒ
, 
addr
Ë
	`ã°_bô
(“rË^ 
BITOP_LE_SWIZZLE
, (addr))

	)

38 
	#gíîic___£t_À_bô
(
ƒ
, 
addr
Ë
	`__£t_bô
(“rË^ 
BITOP_LE_SWIZZLE
, (addr))

	)

39 
	#gíîic___˛ór_À_bô
(
ƒ
, 
addr
Ë
	`__˛ór_bô
(“rË^ 
BITOP_LE_SWIZZLE
, (addr))

	)

41 
	#gíîic_ã°_™d_£t_À_bô
(
ƒ
, 
addr
Ë
	`ã°_™d_£t_bô
(“rË^ 
BITOP_LE_SWIZZLE
, (addr))

	)

42 
	#gíîic_ã°_™d_˛ór_À_bô
(
ƒ
, 
addr
Ë
	`ã°_™d_˛ór_bô
(“rË^ 
BITOP_LE_SWIZZLE
, (addr))

	)

44 
	#gíîic___ã°_™d_£t_À_bô
(
ƒ
, 
addr
Ë
	`__ã°_™d_£t_bô
(“rË^ 
BITOP_LE_SWIZZLE
, (addr))

	)

45 
	#gíîic___ã°_™d_˛ór_À_bô
(
ƒ
, 
addr
Ë
	`__ã°_™d_˛ór_bô
(“rË^ 
BITOP_LE_SWIZZLE
, (addr))

	)

51 
	#gíîic_föd_fú°_zîo_À_bô
(
addr
, 
size
Ë
	`gíîic_föd_√xt_zîo_À_bô
(◊ddr), (size), 0)

	)

	@asm-generic/bitops/non-atomic.h

12 #i‚de‡
_ASM_GENERIC_BITOPS_NON_ATOMIC_H_


13 
	#_ASM_GENERIC_BITOPS_NON_ATOMIC_H_


	)

15 
	~<asm/ty≥s.h
>

17 
	#BITOP_MASK
(
ƒ
Ë(1UL << (“rË% 
BITS_PER_LONG
))

	)

18 
	#BITOP_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG
)

	)

	@asm-generic/bug.h

12 #i‚de‡
_ASM_GENERIC_BUG_H


13 
	#_ASM_GENERIC_BUG_H


	)

15 
	~<löux/compûî.h
>

17 #i‚de‡
HAVE_ARCH_BUG


18 
	#BUG
()

	)

21 #i‚de‡
HAVE_ARCH_BUG_ON


22 
	#BUG_ON
(
c⁄dôi⁄
Ëdÿ{ i‡(c⁄dôi⁄Ë; } 0)

	)

25 #i‚de‡
HAVE_ARCH_WARN_ON


26 
	#WARN_ON
(
c⁄dôi⁄
Ëdÿ{ i‡(c⁄dôi⁄Ë; } 0)

	)

29 
	#WARN_ON_ONCE
(
c⁄dôi⁄
Ë({ 
__w¨n_⁄˚
 = 1; 
__ªt
 = 0; i‡(
	`u∆ikñy
((c⁄dôi⁄Ë&& __w¨n_⁄˚)Ë{ __w¨n_⁄˚ = 0; 
	`WARN_ON
(1); __ªà1; } __ªt; })

	)

31 
	#WARN_ON_SMP
(
x
Ëdÿ{ } 0)

	)

	@asm-generic/cputime.h

12 #i‚de‡
_ASM_GENERIC_CPUTIME_H


13 
	#_ASM_GENERIC_CPUTIME_H


	)

15 
	~<löux/time.h
>

16 
	~<löux/jiffõs.h
>

18 
	t˝utime_t
;

20 
	#˝utime_zîo
 (0UL)

	)

21 
	#˝utime_max
 ((~0UL >> 1Ë- 1)

	)

22 
	#˝utime_add
(
__a
, 
__b
Ë((__aË+ (__b))

	)

23 
	#˝utime_sub
(
__a
, 
__b
Ë((__aË- (__b))

	)

24 
	#˝utime_div
(
__a
, 
__n
Ë((__aË/ (__n))

	)

25 
	#˝utime_hÆve
(
__a
Ë((__aË>> 1)

	)

26 
	#˝utime_eq
(
__a
, 
__b
Ë((__aË=(__b))

	)

27 
	#˝utime_gt
(
__a
, 
__b
Ë((__aË> (__b))

	)

28 
	#˝utime_ge
(
__a
, 
__b
Ë((__aË>(__b))

	)

29 
	#˝utime_…
(
__a
, 
__b
Ë((__aË< (__b))

	)

30 
	#˝utime_À
(
__a
, 
__b
Ë((__aË<(__b))

	)

31 
	#˝utime_to_jiffõs
(
__˘
Ë(__˘)

	)

32 
	#jiffõs_to_˝utime
(
__hz
Ë(__hz)

	)

34 
u64
 
	t˝utime64_t
;

36 
	#˝utime64_zîo
 (0ULL)

	)

37 
	#˝utime64_add
(
__a
, 
__b
Ë((__aË+ (__b))

	)

38 
	#˝utime64_sub
(
__a
, 
__b
Ë((__aË- (__b))

	)

39 
	#˝utime64_to_jiffõs64
(
__˘
Ë(__˘)

	)

40 
	#jiffõs64_to_˝utime64
(
__jif
Ë(__jif)

	)

41 
	#˝utime_to_˝utime64
(
__˘
Ë((
u64
Ë__˘)

	)

43 
	#˝utime_to_m£cs
(
__˘
Ë
	`jiffõs_to_m£cs
(__˘)

	)

44 
	#m£cs_to_˝utime
(
__m£cs
Ë
	`m£cs_to_jiffõs
(__m£cs)

	)

46 
	#˝utime_to_£cs
(
jif
Ë((jifË/ 
HZ
)

	)

47 
	#£cs_to_˝utime
(
£c
Ë((£cË* 
HZ
)

	)

49 
	#time•ec_to_˝utime
(
__vÆ
Ë
	`time•ec_to_jiffõs
(__vÆ)

	)

50 
	#˝utime_to_time•ec
(
__˘
,
__vÆ
Ë
	`jiffõs_to_time•ec
(__˘,__vÆ)

	)

52 
	#timevÆ_to_˝utime
(
__vÆ
Ë
	`timevÆ_to_jiffõs
(__vÆ)

	)

53 
	#˝utime_to_timevÆ
(
__˘
,
__vÆ
Ë
	`jiffõs_to_timevÆ
(__˘,__vÆ)

	)

55 
	#˝utime_to_˛ock_t
(
__˘
Ë
	`jiffõs_to_˛ock_t
(__˘)

	)

56 
	#˛ock_t_to_˝utime
(
__x
Ë
	`˛ock_t_to_jiffõs
(__x)

	)

58 
	#˝utime64_to_˛ock_t
(
__˘
Ë
	`jiffõs_64_to_˛ock_t
(__˘)

	)

	@asm-generic/emergency-restart.h

12 #i‚de‡
_ASM_GENERIC_EMERGENCY_RESTART_H


13 
	#_ASM_GENERIC_EMERGENCY_RESTART_H


	)

	@asm-generic/errno-base.h

12 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


13 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

15 
	#EPERM
 1

	)

16 
	#ENOENT
 2

	)

17 
	#ESRCH
 3

	)

18 
	#EINTR
 4

	)

19 
	#EIO
 5

	)

20 
	#ENXIO
 6

	)

21 
	#E2BIG
 7

	)

22 
	#ENOEXEC
 8

	)

23 
	#EBADF
 9

	)

24 
	#ECHILD
 10

	)

25 
	#EAGAIN
 11

	)

26 
	#ENOMEM
 12

	)

27 
	#EACCES
 13

	)

28 
	#EFAULT
 14

	)

29 
	#ENOTBLK
 15

	)

30 
	#EBUSY
 16

	)

31 
	#EEXIST
 17

	)

32 
	#EXDEV
 18

	)

33 
	#ENODEV
 19

	)

34 
	#ENOTDIR
 20

	)

35 
	#EISDIR
 21

	)

36 
	#EINVAL
 22

	)

37 
	#ENFILE
 23

	)

38 
	#EMFILE
 24

	)

39 
	#ENOTTY
 25

	)

40 
	#ETXTBSY
 26

	)

41 
	#EFBIG
 27

	)

42 
	#ENOSPC
 28

	)

43 
	#ESPIPE
 29

	)

44 
	#EROFS
 30

	)

45 
	#EMLINK
 31

	)

46 
	#EPIPE
 32

	)

47 
	#EDOM
 33

	)

48 
	#ERANGE
 34

	)

	@asm-generic/errno.h

12 #i‚de‡
_ASM_GENERIC_ERRNO_H


13 
	#_ASM_GENERIC_ERRNO_H


	)

15 
	~<asm-gíîic/î∫o-ba£.h
>

17 
	#EDEADLK
 35

	)

18 
	#ENAMETOOLONG
 36

	)

19 
	#ENOLCK
 37

	)

20 
	#ENOSYS
 38

	)

21 
	#ENOTEMPTY
 39

	)

22 
	#ELOOP
 40

	)

23 
	#EWOULDBLOCK
 
EAGAIN


	)

24 
	#ENOMSG
 42

	)

25 
	#EIDRM
 43

	)

26 
	#ECHRNG
 44

	)

27 
	#EL2NSYNC
 45

	)

28 
	#EL3HLT
 46

	)

29 
	#EL3RST
 47

	)

30 
	#ELNRNG
 48

	)

31 
	#EUNATCH
 49

	)

32 
	#ENOCSI
 50

	)

33 
	#EL2HLT
 51

	)

34 
	#EBADE
 52

	)

35 
	#EBADR
 53

	)

36 
	#EXFULL
 54

	)

37 
	#ENOANO
 55

	)

38 
	#EBADRQC
 56

	)

39 
	#EBADSLT
 57

	)

41 
	#EDEADLOCK
 
EDEADLK


	)

43 
	#EBFONT
 59

	)

44 
	#ENOSTR
 60

	)

45 
	#ENODATA
 61

	)

46 
	#ETIME
 62

	)

47 
	#ENOSR
 63

	)

48 
	#ENONET
 64

	)

49 
	#ENOPKG
 65

	)

50 
	#EREMOTE
 66

	)

51 
	#ENOLINK
 67

	)

52 
	#EADV
 68

	)

53 
	#ESRMNT
 69

	)

54 
	#ECOMM
 70

	)

55 
	#EPROTO
 71

	)

56 
	#EMULTIHOP
 72

	)

57 
	#EDOTDOT
 73

	)

58 
	#EBADMSG
 74

	)

59 
	#EOVERFLOW
 75

	)

60 
	#ENOTUNIQ
 76

	)

61 
	#EBADFD
 77

	)

62 
	#EREMCHG
 78

	)

63 
	#ELIBACC
 79

	)

64 
	#ELIBBAD
 80

	)

65 
	#ELIBSCN
 81

	)

66 
	#ELIBMAX
 82

	)

67 
	#ELIBEXEC
 83

	)

68 
	#EILSEQ
 84

	)

69 
	#ERESTART
 85

	)

70 
	#ESTRPIPE
 86

	)

71 
	#EUSERS
 87

	)

72 
	#ENOTSOCK
 88

	)

73 
	#EDESTADDRREQ
 89

	)

74 
	#EMSGSIZE
 90

	)

75 
	#EPROTOTYPE
 91

	)

76 
	#ENOPROTOOPT
 92

	)

77 
	#EPROTONOSUPPORT
 93

	)

78 
	#ESOCKTNOSUPPORT
 94

	)

79 
	#EOPNOTSUPP
 95

	)

80 
	#EPFNOSUPPORT
 96

	)

81 
	#EAFNOSUPPORT
 97

	)

82 
	#EADDRINUSE
 98

	)

83 
	#EADDRNOTAVAIL
 99

	)

84 
	#ENETDOWN
 100

	)

85 
	#ENETUNREACH
 101

	)

86 
	#ENETRESET
 102

	)

87 
	#ECONNABORTED
 103

	)

88 
	#ECONNRESET
 104

	)

89 
	#ENOBUFS
 105

	)

90 
	#EISCONN
 106

	)

91 
	#ENOTCONN
 107

	)

92 
	#ESHUTDOWN
 108

	)

93 
	#ETOOMANYREFS
 109

	)

94 
	#ETIMEDOUT
 110

	)

95 
	#ECONNREFUSED
 111

	)

96 
	#EHOSTDOWN
 112

	)

97 
	#EHOSTUNREACH
 113

	)

98 
	#EALREADY
 114

	)

99 
	#EINPROGRESS
 115

	)

100 
	#ESTALE
 116

	)

101 
	#EUCLEAN
 117

	)

102 
	#ENOTNAM
 118

	)

103 
	#ENAVAIL
 119

	)

104 
	#EISNAM
 120

	)

105 
	#EREMOTEIO
 121

	)

106 
	#EDQUOT
 122

	)

108 
	#ENOMEDIUM
 123

	)

109 
	#EMEDIUMTYPE
 124

	)

110 
	#ECANCELED
 125

	)

111 
	#ENOKEY
 126

	)

112 
	#EKEYEXPIRED
 127

	)

113 
	#EKEYREVOKED
 128

	)

114 
	#EKEYREJECTED
 129

	)

116 
	#EOWNERDEAD
 130

	)

117 
	#ENOTRECOVERABLE
 131

	)

	@asm-generic/fcntl.h

12 #i‚de‡
_ASM_GENERIC_FCNTL_H


13 
	#_ASM_GENERIC_FCNTL_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#O_ACCMODE
 00000003

	)

18 
	#O_RDONLY
 00000000

	)

19 
	#O_WRONLY
 00000001

	)

20 
	#O_RDWR
 00000002

	)

21 #i‚de‡
O_CREAT


22 
	#O_CREAT
 00000100

	)

24 #i‚de‡
O_EXCL


25 
	#O_EXCL
 00000200

	)

27 #i‚de‡
O_NOCTTY


28 
	#O_NOCTTY
 00000400

	)

30 #i‚de‡
O_TRUNC


31 
	#O_TRUNC
 00001000

	)

33 #i‚de‡
O_APPEND


34 
	#O_APPEND
 00002000

	)

36 #i‚de‡
O_NONBLOCK


37 
	#O_NONBLOCK
 00004000

	)

39 #i‚de‡
O_SYNC


40 
	#O_SYNC
 00010000

	)

42 #i‚de‡
FASYNC


43 
	#FASYNC
 00020000

	)

45 #i‚de‡
O_DIRECT


46 
	#O_DIRECT
 00040000

	)

48 #i‚de‡
O_LARGEFILE


49 
	#O_LARGEFILE
 00100000

	)

51 #i‚de‡
O_DIRECTORY


52 
	#O_DIRECTORY
 00200000

	)

54 #i‚de‡
O_NOFOLLOW


55 
	#O_NOFOLLOW
 00400000

	)

57 #i‚de‡
O_NOATIME


58 
	#O_NOATIME
 01000000

	)

60 #i‚de‡
O_NDELAY


61 
	#O_NDELAY
 
O_NONBLOCK


	)

64 
	#F_DUPFD
 0

	)

65 
	#F_GETFD
 1

	)

66 
	#F_SETFD
 2

	)

67 
	#F_GETFL
 3

	)

68 
	#F_SETFL
 4

	)

69 #i‚de‡
F_GETLK


70 
	#F_GETLK
 5

	)

71 
	#F_SETLK
 6

	)

72 
	#F_SETLKW
 7

	)

74 #i‚de‡
F_SETOWN


75 
	#F_SETOWN
 8

	)

76 
	#F_GETOWN
 9

	)

78 #i‚de‡
F_SETSIG


79 
	#F_SETSIG
 10

	)

80 
	#F_GETSIG
 11

	)

83 
	#FD_CLOEXEC
 1

	)

85 #i‚de‡
F_RDLCK


86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 #i‚de‡
F_EXLCK


92 
	#F_EXLCK
 4

	)

93 
	#F_SHLCK
 8

	)

96 #i‚de‡
F_INPROGRESS


97 
	#F_INPROGRESS
 16

	)

100 
	#LOCK_SH
 1

	)

101 
	#LOCK_EX
 2

	)

102 
	#LOCK_NB
 4

	)

103 
	#LOCK_UN
 8

	)

105 
	#LOCK_MAND
 32

	)

106 
	#LOCK_READ
 64

	)

107 
	#LOCK_WRITE
 128

	)

108 
	#LOCK_RW
 192

	)

110 
	#F_LINUX_SPECIFIC_BASE
 1024

	)

112 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK


113 #i‚de‡
__ARCH_FLOCK_PAD


114 
	#__ARCH_FLOCK_PAD


	)

117 
	sÊock
 {

118 
	ml_ty≥
;

119 
	ml_whí˚
;

120 
off_t
 
	ml_°¨t
;

121 
off_t
 
	ml_Àn
;

122 
pid_t
 
	ml_pid
;

123 
	m__ARCH_FLOCK_PAD


127 #i‚de‡
F_GETLK64


128 
	#F_GETLK64
 12

	)

129 
	#F_SETLK64
 13

	)

130 
	#F_SETLKW64
 14

	)

133 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK64


134 #i‚de‡
__ARCH_FLOCK64_PAD


135 
	#__ARCH_FLOCK64_PAD


	)

138 
	sÊock64
 {

139 
	ml_ty≥
;

140 
	ml_whí˚
;

141 
loff_t
 
	ml_°¨t
;

142 
loff_t
 
	ml_Àn
;

143 
pid_t
 
	ml_pid
;

144 
	m__ARCH_FLOCK64_PAD


	@asm-generic/futex.h

12 #i‚de‡
_ASM_GENERIC_FUTEX_H


13 
	#_ASM_GENERIC_FUTEX_H


	)

	@asm-generic/ioctl.h

12 #i‚de‡
_ASM_GENERIC_IOCTL_H


13 
	#_ASM_GENERIC_IOCTL_H


	)

15 
	#_IOC_NRBITS
 8

	)

16 
	#_IOC_TYPEBITS
 8

	)

17 
	#_IOC_SIZEBITS
 14

	)

18 
	#_IOC_DIRBITS
 2

	)

20 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

21 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

22 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

23 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

25 
	#_IOC_NRSHIFT
 0

	)

26 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

27 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

28 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

30 
	#_IOC_NONE
 0U

	)

31 
	#_IOC_WRITE
 1U

	)

32 
	#_IOC_READ
 2U

	)

34 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
Ë(((dúË<< 
_IOC_DIRSHIFT
Ë| (—y≥Ë<< 
_IOC_TYPESHIFT
Ë| (“rË<< 
_IOC_NRSHIFT
Ë| ((sizeË<< 
_IOC_SIZESHIFT
))

	)

36 
__övÆid_size_¨gumít_f‹_IOC
;

37 
	#_IOC_TYPECHECK
(
t
Ë((—Ë=—[1]Ë&& —Ë< (1 << 
_IOC_SIZEBITS
)Ë? —Ë: 
__övÆid_size_¨gumít_f‹_IOC
)

	)

39 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

40 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

41 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

42 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

43 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

44 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

45 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

47 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

48 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

49 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

50 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

52 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

53 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

54 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

55 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

56 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@asm-generic/ipc.h

12 #i‚de‡
_ASM_GENERIC_IPC_H


13 
	#_ASM_GENERIC_IPC_H


	)

15 
	sùc_kludge
 {

16 
msgbuf
 
__u£r
 *
	mmsgp
;

17 
	mmsgtyp
;

20 
	#SEMOP
 1

	)

21 
	#SEMGET
 2

	)

22 
	#SEMCTL
 3

	)

23 
	#SEMTIMEDOP
 4

	)

24 
	#MSGSND
 11

	)

25 
	#MSGRCV
 12

	)

26 
	#MSGGET
 13

	)

27 
	#MSGCTL
 14

	)

28 
	#SHMAT
 21

	)

29 
	#SHMDT
 22

	)

30 
	#SHMGET
 23

	)

31 
	#SHMCTL
 24

	)

33 
	#DIPC
 25

	)

35 
	#IPCCALL
(
vîsi⁄
,
›
Ë((vîsi⁄)<<16 | (›))

	)

	@asm-generic/local.h

12 #i‚de‡
_ASM_GENERIC_LOCAL_H


13 
	#_ASM_GENERIC_LOCAL_H


	)

15 
	~<löux/≥r˝u.h
>

16 
	~<löux/h¨dúq.h
>

17 
	~<asm/©omic.h
>

18 
	~<asm/ty≥s.h
>

22 
©omic_l⁄g_t
 
	ma
;

23 } 
	tloˇl_t
;

25 
	#LOCAL_INIT
(
i
Ë{ 
	`ATOMIC_LONG_INIT
(iË}

	)

27 
	#loˇl_ªad
(
l
Ë
	`©omic_l⁄g_ªad
(&÷)->
a
)

	)

28 
	#loˇl_£t
(
l
,
i
Ë
	`©omic_l⁄g_£t
((&÷)->
a
),(i))

	)

29 
	#loˇl_öc
(
l
Ë
	`©omic_l⁄g_öc
(&÷)->
a
)

	)

30 
	#loˇl_dec
(
l
Ë
	`©omic_l⁄g_dec
(&÷)->
a
)

	)

31 
	#loˇl_add
(
i
,
l
Ë
	`©omic_l⁄g_add
((i),(&÷)->
a
))

	)

32 
	#loˇl_sub
(
i
,
l
Ë
	`©omic_l⁄g_sub
((i),(&÷)->
a
))

	)

34 
	#__loˇl_öc
(
l
Ë
	`loˇl_£t
(÷), 
	`loˇl_ªad
÷Ë+ 1)

	)

35 
	#__loˇl_dec
(
l
Ë
	`loˇl_£t
(÷), 
	`loˇl_ªad
÷Ë- 1)

	)

36 
	#__loˇl_add
(
i
,
l
Ë
	`loˇl_£t
(÷), 
	`loˇl_ªad
÷Ë+ (i))

	)

37 
	#__loˇl_sub
(
i
,
l
Ë
	`loˇl_£t
(÷), 
	`loˇl_ªad
÷Ë- (i))

	)

39 
	#˝u_loˇl_ªad
(
v
Ë
	`loˇl_ªad
(&
	`__gë_˝u_v¨
(v))

	)

40 
	#˝u_loˇl_£t
(
v
, 
i
Ë
	`loˇl_£t
(&
	`__gë_˝u_v¨
(v), (i))

	)

41 
	#˝u_loˇl_öc
(
v
Ë
	`loˇl_öc
(&
	`__gë_˝u_v¨
(v))

	)

42 
	#˝u_loˇl_dec
(
v
Ë
	`loˇl_dec
(&
	`__gë_˝u_v¨
(v))

	)

43 
	#˝u_loˇl_add
(
i
, 
v
Ë
	`loˇl_add
((i), &
	`__gë_˝u_v¨
(v))

	)

44 
	#˝u_loˇl_sub
(
i
, 
v
Ë
	`loˇl_sub
((i), &
	`__gë_˝u_v¨
(v))

	)

46 
	#__˝u_loˇl_öc
(
v
Ë
	`__loˇl_öc
(&
	`__gë_˝u_v¨
(v))

	)

47 
	#__˝u_loˇl_dec
(
v
Ë
	`__loˇl_dec
(&
	`__gë_˝u_v¨
(v))

	)

48 
	#__˝u_loˇl_add
(
i
, 
v
Ë
	`__loˇl_add
((i), &
	`__gë_˝u_v¨
(v))

	)

49 
	#__˝u_loˇl_sub
(
i
, 
v
Ë
	`__loˇl_sub
((i), &
	`__gë_˝u_v¨
(v))

	)

	@asm-generic/memory_model.h

12 #i‚de‡
__ASM_MEMORY_MODEL_H


13 
	#__ASM_MEMORY_MODEL_H


	)

	@asm-generic/mman-common.h

19 #i‚de‡
__ASM_GENERIC_MMAN_COMMON_H


20 
	#__ASM_GENERIC_MMAN_COMMON_H


	)

21 
	#PROT_READ
 0x1

	)

22 
	#PROT_WRITE
 0x2

	)

24 
	#PROT_EXEC
 0x4

	)

25 
	#PROT_SEM
 0x8

	)

26 
	#PROT_NONE
 0x0

	)

27 
	#PROT_GROWSDOWN
 0x01000000

	)

29 
	#PROT_GROWSUP
 0x02000000

	)

30 
	#MAP_SHARED
 0x01

	)

31 
	#MAP_PRIVATE
 0x02

	)

32 
	#MAP_TYPE
 0x0f

	)

34 
	#MAP_FIXED
 0x10

	)

35 
	#MAP_ANONYMOUS
 0x20

	)

36 
	#MAP_UNINITIALIZED
 0x0

	)

37 
	#MS_ASYNC
 1

	)

39 
	#MS_INVALIDATE
 2

	)

40 
	#MS_SYNC
 4

	)

41 
	#MADV_NORMAL
 0

	)

42 
	#MADV_RANDOM
 1

	)

44 
	#MADV_SEQUENTIAL
 2

	)

45 
	#MADV_WILLNEED
 3

	)

46 
	#MADV_DONTNEED
 4

	)

47 
	#MADV_REMOVE
 9

	)

49 
	#MADV_DONTFORK
 10

	)

50 
	#MADV_DOFORK
 11

	)

51 
	#MADV_HWPOISON
 100

	)

52 
	#MADV_SOFT_OFFLINE
 101

	)

54 
	#MADV_MERGEABLE
 12

	)

55 
	#MADV_UNMERGEABLE
 13

	)

56 
	#MADV_HUGEPAGE
 14

	)

57 
	#MADV_NOHUGEPAGE
 15

	)

59 
	#MAP_FILE
 0

	)

	@asm-generic/mman.h

19 #i‚de‡
__ASM_GENERIC_MMAN_H


20 
	#__ASM_GENERIC_MMAN_H


	)

21 
	~<asm-gíîic/mm™-comm⁄.h
>

22 
	#MAP_GROWSDOWN
 0x0100

	)

24 
	#MAP_DENYWRITE
 0x0800

	)

25 
	#MAP_EXECUTABLE
 0x1000

	)

26 
	#MAP_LOCKED
 0x2000

	)

27 
	#MAP_NORESERVE
 0x4000

	)

29 
	#MAP_POPULATE
 0x8000

	)

30 
	#MAP_NONBLOCK
 0x10000

	)

31 
	#MAP_STACK
 0x20000

	)

32 
	#MAP_HUGETLB
 0x40000

	)

34 
	#MCL_CURRENT
 1

	)

35 
	#MCL_FUTURE
 2

	)

	@asm-generic/mutex-xchg.h

12 #i‚de‡
_ASM_GENERIC_MUTEX_XCHG_H


13 
	#_ASM_GENERIC_MUTEX_XCHG_H


	)

15 
	#__muãx_¶ow∑th_√eds_to_u∆ock
(Ë0

	)

	@asm-generic/percpu.h

12 #i‚de‡
_ASM_GENERIC_PERCPU_H_


13 
	#_ASM_GENERIC_PERCPU_H_


	)

14 
	~<löux/compûî.h
>

16 
	#__GENERIC_PER_CPU


	)

18 
	#DEFINE_PER_CPU
(
ty≥
, 
«me
Ë
	`__ty≥of__
—y≥Ë
≥r_˝u__
##
	)
name

20 
	#≥r_˝u
(
v¨
, 
˝u
Ë(*(()(˝u), &
≥r_˝u__
##v¨))

	)

21 
	#__gë_˝u_v¨
(
v¨
Ë
≥r_˝u__
##
	)
var

22 
	#__øw_gë_˝u_v¨
(
v¨
Ë
≥r_˝u__
##
	)
var

24 
	#DECLARE_PER_CPU
(
ty≥
, 
«me
Ë
	`__ty≥of__
—y≥Ë
≥r_˝u__
##
	)
name

26 
	#EXPORT_PER_CPU_SYMBOL
(
v¨
Ë
	`EXPORT_SYMBOL
(
≥r_˝u__
##v¨)

	)

27 
	#EXPORT_PER_CPU_SYMBOL_GPL
(
v¨
Ë
	`EXPORT_SYMBOL_GPL
(
≥r_˝u__
##v¨)

	)

	@asm-generic/pgtable-nopmd.h

19 #i‚de‡
_PGTABLE_NOPMD_H


20 
	#_PGTABLE_NOPMD_H


	)

21 #i‚de‡
__ASSEMBLY__


22 
	~<asm-gíîic/pgèbÀ-n›ud.h
>

24 
	gmm_°ru˘
;

25 
	#__PAGETABLE_PMD_FOLDED


	)

26 °ru˘ { 
pud_t
 
	mpud
; } 
	tpmd_t
;

27 
	#PMD_SHIFT
 
PUD_SHIFT


	)

29 
	#PTRS_PER_PMD
 1

	)

30 
	#PMD_SIZE
 (1UL << 
PMD_SHIFT
)

	)

31 
	#PMD_MASK
 (~(
PMD_SIZE
-1))

	)

32 
	#pmd_ERROR
(
pmd
Ë(
	`pud_ERROR
(’md).
pud
))

	)

34 
	#pud_p›uœã
(
mm
, 
pmd
, 
±e
Ëdÿ{ } 0)

	)

35 
	#£t_pud
(
pud±r
, 
pudvÆ
Ë
	`£t_pmd
((
pmd_t
 *)’ud±r), (pmd_tË{ÖudvÆ })

	)

36 
	#pmd_vÆ
(
x
Ë(
	`pud_vÆ
((x).
pud
))

	)

37 
	#__pmd
(
x
Ë((
pmd_t
Ë{ 
	`__pud
(xË} )

	)

39 
	#pud_∑ge
(
pud
Ë(
	`pmd_∑ge
((
pmd_t
){Öud }))

	)

40 
	#pud_∑ge_vaddr
(
pud
Ë(
	`pmd_∑ge_vaddr
((
pmd_t
){Öud }))

	)

41 
	#pmd_Æloc_⁄e
(
mm
, 
addªss
Ë
NULL


	)

42 
	#__pmd_‰ì_éb
(
éb
, 
x
, 
a
Ëdÿ{ } 0)

	)

44 #unde‡
pmd_addr_íd


45 
	#pmd_addr_íd
(
addr
, 
íd
Ë”nd)

	)

	@asm-generic/pgtable-nopud.h

12 #i‚de‡
_PGTABLE_NOPUD_H


13 
	#_PGTABLE_NOPUD_H


	)

15 #i‚de‡
__ASSEMBLY__


17 
	#__PAGETABLE_PUD_FOLDED


	)

19 °ru˘ { 
pgd_t
 
	mpgd
; } 
	tpud_t
;

21 
	#PUD_SHIFT
 
PGDIR_SHIFT


	)

22 
	#PTRS_PER_PUD
 1

	)

23 
	#PUD_SIZE
 (1UL << 
PUD_SHIFT
)

	)

24 
	#PUD_MASK
 (~(
PUD_SIZE
-1))

	)

26 
	#pud_ERROR
(
pud
Ë(
	`pgd_ERROR
(’ud).
pgd
))

	)

27 
	#pgd_p›uœã
(
mm
, 
pgd
, 
pud
Ëdÿ{ } 0)

	)

28 
	#£t_pgd
(
pgd±r
, 
pgdvÆ
Ë
	`£t_pud
((
pud_t
 *)’gd±r), (pud_tË{ÖgdvÆ })

	)

29 
	#pud_vÆ
(
x
Ë(
	`pgd_vÆ
((x).
pgd
))

	)

30 
	#__pud
(
x
Ë((
pud_t
Ë{ 
	`__pgd
(xË} )

	)

31 
	#pgd_∑ge
(
pgd
Ë(
	`pud_∑ge
((
pud_t
){Ögd }))

	)

32 
	#pgd_∑ge_kî√l
(
pgd
Ë(
	`pud_∑ge_kî√l
((
pud_t
){Ögd }))

	)

33 
	#pud_Æloc_⁄e
(
mm
, 
addªss
Ë
NULL


	)

34 
	#pud_‰ì
(
x
Ëdÿ{ } 0)

	)

35 
	#__pud_‰ì_éb
(
éb
, 
x
Ëdÿ{ } 0)

	)

36 #unde‡
pud_addr_íd


37 
	#pud_addr_íd
(
addr
, 
íd
Ë”nd)

	)

	@asm-generic/pgtable.h

12 #i‚de‡
_ASM_GENERIC_PGTABLE_H


13 
	#_ASM_GENERIC_PGTABLE_H


	)

15 #i‚de‡
__HAVE_ARCH_PTEP_ESTABLISH


17 #i‚de‡
__HAVE_ARCH_SET_PTE_ATOMIC


18 
	#±ï_e°ablish
(
__vma
, 
__addªss
, 
__±ï
, 
__íåy
Ëdÿ{ 
	`£t_±e_©
((__vma)->
vm_mm
, (__addªss), __±ï, __íåy); 
	`Êush_éb_∑ge
(__vma, __addªss); } 0)

	)

20 
	#±ï_e°ablish
(
__vma
, 
__addªss
, 
__±ï
, 
__íåy
Ëdÿ{ 
	`£t_±e_©omic
(__±ï, __íåy); 
	`Êush_éb_∑ge
(__vma, __addªss); } 0)

	)

24 #i‚de‡
__HAVE_ARCH_PTEP_SET_ACCESS_FLAGS


26 
	#±ï_£t_ac˚ss_Êags
(
__vma
, 
__addªss
, 
__±ï
, 
__íåy
, 
__dúty
Ëdÿ{ 
	`£t_±e_©
((__vma)->
vm_mm
, (__addªss), __±ï, __íåy); 
	`Êush_éb_∑ge
(__vma, __addªss); } 0)

	)

29 #i‚de‡
__HAVE_ARCH_PTEP_TEST_AND_CLEAR_YOUNG


30 
	#±ï_ã°_™d_˛ór_young
(
__vma
, 
__addªss
, 
__±ï
Ë({ 
±e_t
 
__±e
 = *(__±ï); 
r
 = 1; i‡(!
	`±e_young
(__±e)Ë∏0; 
	`£t_±e_©
((__vma)->
vm_mm
, (__addªss), (__±ï), 
	`±e_mkﬁd
(__±e));Ñ; })

	)

33 #i‚de‡
__HAVE_ARCH_PTEP_CLEAR_YOUNG_FLUSH


34 
	#±ï_˛ór_Êush_young
(
__vma
, 
__addªss
, 
__±ï
Ë({ 
__young
; __young = 
	`±ï_ã°_™d_˛ór_young
(__vma, __addªss, __±ï); i‡(__youngË
	`Êush_éb_∑ge
(__vma, __addªss); __young; })

	)

37 #i‚de‡
__HAVE_ARCH_PTEP_TEST_AND_CLEAR_DIRTY


38 
	#±ï_ã°_™d_˛ór_dúty
(
__vma
, 
__addªss
, 
__±ï
Ë({ 
±e_t
 
__±e
 = *__±ï; 
r
 = 1; i‡(!
	`±e_dúty
(__±e)Ë∏0; 
	`£t_±e_©
((__vma)->
vm_mm
, (__addªss), (__±ï), 
	`±e_mk˛ón
(__±e));Ñ; })

	)

41 #i‚de‡
__HAVE_ARCH_PTEP_CLEAR_DIRTY_FLUSH


42 
	#±ï_˛ór_Êush_dúty
(
__vma
, 
__addªss
, 
__±ï
Ë({ 
__dúty
; __dúty = 
	`±ï_ã°_™d_˛ór_dúty
(__vma, __addªss, __±ï); i‡(__dútyË
	`Êush_éb_∑ge
(__vma, __addªss); __dúty; })

	)

45 #i‚de‡
__HAVE_ARCH_PTEP_GET_AND_CLEAR


46 
	#±ï_gë_™d_˛ór
(
__mm
, 
__addªss
, 
__±ï
Ë({ 
±e_t
 
__±e
 = *(__±ï); 
	`±e_˛ór
((__mm), (__addªss), (__±ï)); __±e; })

	)

49 #i‚de‡
__HAVE_ARCH_PTEP_GET_AND_CLEAR_FULL


50 
	#±ï_gë_™d_˛ór_fuŒ
(
__mm
, 
__addªss
, 
__±ï
, 
__fuŒ
Ë({ 
±e_t
 
__±e
; __±ê
	`±ï_gë_™d_˛ór
((__mm), (__addªss), (__±ï)); __±e; })

	)

53 #i‚de‡
__HAVE_ARCH_PTE_CLEAR_FULL


54 
	#±e_˛ór_fuŒ
(
__mm
, 
__addªss
, 
__±ï
, 
__fuŒ
Ëdÿ{ 
	`±e_˛ór
((__mm), (__addªss), (__±ï)); } 0)

	)

57 #i‚de‡
__HAVE_ARCH_PTEP_CLEAR_FLUSH


58 
	#±ï_˛ór_Êush
(
__vma
, 
__addªss
, 
__±ï
Ë({ 
±e_t
 
__±e
; __±ê
	`±ï_gë_™d_˛ór
((__vma)->
vm_mm
, __addªss, __±ï); 
	`Êush_éb_∑ge
(__vma, __addªss); __±e; })

	)

61 #i‚de‡
__HAVE_ARCH_PTEP_SET_WRPROTECT


62 
	gmm_°ru˘
;

64 #i‚de‡
__HAVE_ARCH_PTE_SAME


65 
	#±e_ßme
(
A
,
B
Ë(
	`±e_vÆ
(AË=±e_vÆ(B))

	)

67 #i‚de‡
__HAVE_ARCH_PAGE_TEST_AND_CLEAR_DIRTY


68 
	#∑ge_ã°_™d_˛ór_dúty
(
∑ge
Ë(0)

	)

69 
	#±e_maybe_dúty
(
±e
Ë
	`±e_dúty
’ã)

	)

71 
	#±e_maybe_dúty
(
±e
Ë(1)

	)

73 #i‚de‡
__HAVE_ARCH_PAGE_TEST_AND_CLEAR_YOUNG


74 
	#∑ge_ã°_™d_˛ór_young
(
∑ge
Ë(0)

	)

76 #i‚de‡
__HAVE_ARCH_PGD_OFFSET_GATE


77 
	#pgd_off£t_g©e
(
mm
, 
addr
Ë
	`pgd_off£t
(mm,áddr)

	)

79 #i‚de‡
__HAVE_ARCH_LAZY_MMU_PROT_UPDATE


80 
	#œzy_mmu_¥Ÿ_upd©e
(
±e
Ëdÿ{ } 0)

	)

82 #i‚de‡
__HAVE_ARCH_MOVE_PTE


83 
	#move_±e
(
±e
, 
¥Ÿ
, 
ﬁd_addr
, 
√w_addr
Ë’ã)

	)

85 
	#pgd_addr_íd
(
addr
, 
íd
Ë({ 
__bound¨y
 = (◊ddrË+ 
PGDIR_SIZE
Ë& 
PGDIR_MASK
; (__bound¨y - 1 < (ídË- 1)? __bound¨y: (íd); })

	)

86 #i‚de‡
pud_addr_íd


87 
	#pud_addr_íd
(
addr
, 
íd
Ë({ 
__bound¨y
 = (◊ddrË+ 
PUD_SIZE
Ë& 
PUD_MASK
; (__bound¨y - 1 < (ídË- 1)? __bound¨y: (íd); })

	)

89 #i‚de‡
pmd_addr_íd


90 
	#pmd_addr_íd
(
addr
, 
íd
Ë({ 
__bound¨y
 = (◊ddrË+ 
PMD_SIZE
Ë& 
PMD_MASK
; (__bound¨y - 1 < (ídË- 1)? __bound¨y: (íd); })

	)

92 #i‚de‡
__ASSEMBLY__


	@asm-generic/poll.h

12 #i‚de‡
__ASM_GENERIC_POLL_H


13 
	#__ASM_GENERIC_POLL_H


	)

15 
	#POLLIN
 0x0001

	)

16 
	#POLLPRI
 0x0002

	)

17 
	#POLLOUT
 0x0004

	)

18 
	#POLLERR
 0x0008

	)

19 
	#POLLHUP
 0x0010

	)

20 
	#POLLNVAL
 0x0020

	)

22 
	#POLLRDNORM
 0x0040

	)

23 
	#POLLRDBAND
 0x0080

	)

24 #i‚de‡
POLLWRNORM


25 
	#POLLWRNORM
 0x0100

	)

27 #i‚de‡
POLLWRBAND


28 
	#POLLWRBAND
 0x0200

	)

30 #i‚de‡
POLLMSG


31 
	#POLLMSG
 0x0400

	)

33 #i‚de‡
POLLREMOVE


34 
	#POLLREMOVE
 0x1000

	)

36 #i‚de‡
POLLRDHUP


37 
	#POLLRDHUP
 0x2000

	)

40 
	spﬁlfd
 {

41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

	@asm-generic/resource.h

12 #i‚de‡
_ASM_GENERIC_RESOURCE_H


13 
	#_ASM_GENERIC_RESOURCE_H


	)

15 
	#RLIMIT_CPU
 0

	)

16 
	#RLIMIT_FSIZE
 1

	)

17 
	#RLIMIT_DATA
 2

	)

18 
	#RLIMIT_STACK
 3

	)

19 
	#RLIMIT_CORE
 4

	)

21 #i‚de‡
RLIMIT_RSS


22 
	#RLIMIT_RSS
 5

	)

25 #i‚de‡
RLIMIT_NPROC


26 
	#RLIMIT_NPROC
 6

	)

29 #i‚de‡
RLIMIT_NOFILE


30 
	#RLIMIT_NOFILE
 7

	)

33 #i‚de‡
RLIMIT_MEMLOCK


34 
	#RLIMIT_MEMLOCK
 8

	)

37 #i‚de‡
RLIMIT_AS


38 
	#RLIMIT_AS
 9

	)

41 
	#RLIMIT_LOCKS
 10

	)

42 
	#RLIMIT_SIGPENDING
 11

	)

43 
	#RLIMIT_MSGQUEUE
 12

	)

44 
	#RLIMIT_NICE
 13

	)

45 
	#RLIMIT_RTPRIO
 14

	)

46 
	#RLIMIT_RTTIME
 15

	)

48 
	#RLIM_NLIMITS
 16

	)

50 #i‚de‡
RLIM_INFINITY


51 
	#RLIM_INFINITY
 (~0UL)

	)

54 #i‚de‡
_STK_LIM_MAX


55 
	#_STK_LIM_MAX
 
RLIM_INFINITY


	)

	@asm-generic/sections.h

12 #i‚de‡
_ASM_GENERIC_SECTIONS_H_


13 
	#_ASM_GENERIC_SECTIONS_H_


	)

	@asm-generic/siginfo.h

12 #i‚de‡
_ASM_GENERIC_SIGINFO_H


13 
	#_ASM_GENERIC_SIGINFO_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/ty≥s.h
>

18 
	usigvÆ
 {

19 
	msivÆ_öt
;

20 
__u£r
 *
	msivÆ_±r
;

21 } 
	tsigvÆ_t
;

23 #i‚de‡
__ARCH_SI_PREAMBLE_SIZE


24 
	#__ARCH_SI_PREAMBLE_SIZE
 (3 * ())

	)

27 
	#SI_MAX_SIZE
 128

	)

28 #i‚de‡
SI_PAD_SIZE


29 
	#SI_PAD_SIZE
 ((
SI_MAX_SIZE
 - 
__ARCH_SI_PREAMBLE_SIZE
Ë/ ())

	)

32 #i‚de‡
__ARCH_SI_UID_T


33 
	#__ARCH_SI_UID_T
 
uid_t


	)

36 #i‚de‡
__ARCH_SI_BAND_T


37 
	#__ARCH_SI_BAND_T
 

	)

40 #i‚de‡
HAVE_ARCH_SIGINFO_T


42 
	ssigöfo
 {

43 
	msi_signo
;

44 
	msi_î∫o
;

45 
	msi_code
;

48 
	m_∑d
[
SI_PAD_SIZE
];

51 
pid_t
 
	m_pid
;

52 
__ARCH_SI_UID_T
 
	m_uid
;

53 } 
	m_kûl
;

56 
timî_t
 
	m_tid
;

57 
	m_ovîrun
;

58 
	m_∑d
[–
__ARCH_SI_UID_T
) - ()];

59 
sigvÆ_t
 
	m_sigvÆ
;

60 
	m_sys_¥iv©e
;

61 } 
	m_timî
;

64 
pid_t
 
	m_pid
;

65 
__ARCH_SI_UID_T
 
	m_uid
;

66 
sigvÆ_t
 
	m_sigvÆ
;

67 } 
	m_π
;

70 
pid_t
 
	m_pid
;

71 
__ARCH_SI_UID_T
 
	m_uid
;

72 
	m_°©us
;

73 
˛ock_t
 
	m_utime
;

74 
˛ock_t
 
	m_°ime
;

75 } 
	m_sigchld
;

78 
__u£r
 *
	m_addr
;

79 #ifde‡
__ARCH_SI_TRAPNO


80 
	m_å≠no
;

82 } 
	m_sigÁu…
;

85 
__ARCH_SI_BAND_T
 
	m_b™d
;

86 
	m_fd
;

87 } 
	m_sigpﬁl
;

88 } 
	m_sifõlds
;

89 } 
	tsigöfo_t
;

93 
	#si_pid
 
_sifõlds
.
_kûl
.
_pid


	)

94 
	#si_uid
 
_sifõlds
.
_kûl
.
_uid


	)

95 
	#si_tid
 
_sifõlds
.
_timî
.
_tid


	)

96 
	#si_ovîrun
 
_sifõlds
.
_timî
.
_ovîrun


	)

97 
	#si_sys_¥iv©e
 
_sifõlds
.
_timî
.
_sys_¥iv©e


	)

98 
	#si_°©us
 
_sifõlds
.
_sigchld
.
_°©us


	)

99 
	#si_utime
 
_sifõlds
.
_sigchld
.
_utime


	)

100 
	#si_°ime
 
_sifõlds
.
_sigchld
.
_°ime


	)

101 
	#si_vÆue
 
_sifõlds
.
_π
.
_sigvÆ


	)

102 
	#si_öt
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_öt


	)

103 
	#si_±r
 
_sifõlds
.
_π
.
_sigvÆ
.
sivÆ_±r


	)

104 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
_addr


	)

105 #ifde‡
__ARCH_SI_TRAPNO


106 
	#si_å≠no
 
_sifõlds
.
_sigÁu…
.
_å≠no


	)

108 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
_b™d


	)

109 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
_fd


	)

111 
	#__SI_KILL
 0

	)

112 
	#__SI_TIMER
 0

	)

113 
	#__SI_POLL
 0

	)

114 
	#__SI_FAULT
 0

	)

115 
	#__SI_CHLD
 0

	)

116 
	#__SI_RT
 0

	)

117 
	#__SI_MESGQ
 0

	)

118 
	#__SI_CODE
(
T
,
N
Ë(N)

	)

120 
	#SI_USER
 0

	)

121 
	#SI_KERNEL
 0x80

	)

122 
	#SI_QUEUE
 -1

	)

123 
	#SI_TIMER
 
	`__SI_CODE
(
__SI_TIMER
,-2)

	)

124 
	#SI_MESGQ
 
	`__SI_CODE
(
__SI_MESGQ
,-3)

	)

125 
	#SI_ASYNCIO
 -4

	)

126 
	#SI_SIGIO
 -5

	)

127 
	#SI_TKILL
 -6

	)

128 
	#SI_DETHREAD
 -7

	)

130 
	#SI_FROMUSER
(
sùå
Ë((sùå)->
si_code
 <0)

	)

131 
	#SI_FROMKERNEL
(
sùå
Ë((sùå)->
si_code
 > 0)

	)

133 
	#ILL_ILLOPC
 (
__SI_FAULT
|1)

	)

134 
	#ILL_ILLOPN
 (
__SI_FAULT
|2)

	)

135 
	#ILL_ILLADR
 (
__SI_FAULT
|3)

	)

136 
	#ILL_ILLTRP
 (
__SI_FAULT
|4)

	)

137 
	#ILL_PRVOPC
 (
__SI_FAULT
|5)

	)

138 
	#ILL_PRVREG
 (
__SI_FAULT
|6)

	)

139 
	#ILL_COPROC
 (
__SI_FAULT
|7)

	)

140 
	#ILL_BADSTK
 (
__SI_FAULT
|8)

	)

141 
	#NSIGILL
 8

	)

143 
	#FPE_INTDIV
 (
__SI_FAULT
|1)

	)

144 
	#FPE_INTOVF
 (
__SI_FAULT
|2)

	)

145 
	#FPE_FLTDIV
 (
__SI_FAULT
|3)

	)

146 
	#FPE_FLTOVF
 (
__SI_FAULT
|4)

	)

147 
	#FPE_FLTUND
 (
__SI_FAULT
|5)

	)

148 
	#FPE_FLTRES
 (
__SI_FAULT
|6)

	)

149 
	#FPE_FLTINV
 (
__SI_FAULT
|7)

	)

150 
	#FPE_FLTSUB
 (
__SI_FAULT
|8)

	)

151 
	#NSIGFPE
 8

	)

153 
	#SEGV_MAPERR
 (
__SI_FAULT
|1)

	)

154 
	#SEGV_ACCERR
 (
__SI_FAULT
|2)

	)

155 
	#NSIGSEGV
 2

	)

157 
	#BUS_ADRALN
 (
__SI_FAULT
|1)

	)

158 
	#BUS_ADRERR
 (
__SI_FAULT
|2)

	)

159 
	#BUS_OBJERR
 (
__SI_FAULT
|3)

	)

160 
	#NSIGBUS
 3

	)

162 
	#TRAP_BRKPT
 (
__SI_FAULT
|1)

	)

163 
	#TRAP_TRACE
 (
__SI_FAULT
|2)

	)

164 
	#NSIGTRAP
 2

	)

166 
	#CLD_EXITED
 (
__SI_CHLD
|1)

	)

167 
	#CLD_KILLED
 (
__SI_CHLD
|2)

	)

168 
	#CLD_DUMPED
 (
__SI_CHLD
|3)

	)

169 
	#CLD_TRAPPED
 (
__SI_CHLD
|4)

	)

170 
	#CLD_STOPPED
 (
__SI_CHLD
|5)

	)

171 
	#CLD_CONTINUED
 (
__SI_CHLD
|6)

	)

172 
	#NSIGCHLD
 6

	)

174 
	#POLL_IN
 (
__SI_POLL
|1)

	)

175 
	#POLL_OUT
 (
__SI_POLL
|2)

	)

176 
	#POLL_MSG
 (
__SI_POLL
|3)

	)

177 
	#POLL_ERR
 (
__SI_POLL
|4)

	)

178 
	#POLL_PRI
 (
__SI_POLL
|5)

	)

179 
	#POLL_HUP
 (
__SI_POLL
|6)

	)

180 
	#NSIGPOLL
 6

	)

182 
	#SIGEV_SIGNAL
 0

	)

183 
	#SIGEV_NONE
 1

	)

184 
	#SIGEV_THREAD
 2

	)

185 
	#SIGEV_THREAD_ID
 4

	)

187 #i‚de‡
__ARCH_SIGEV_PREAMBLE_SIZE


188 
	#__ARCH_SIGEV_PREAMBLE_SIZE
 ((Ë* 2 + (
sigvÆ_t
))

	)

191 
	#SIGEV_MAX_SIZE
 64

	)

192 
	#SIGEV_PAD_SIZE
 ((
SIGEV_MAX_SIZE
 - 
__ARCH_SIGEV_PREAMBLE_SIZE
Ë/ ())

	)

194 
	ssigevít
 {

195 
sigvÆ_t
 
	msigev_vÆue
;

196 
	msigev_signo
;

197 
	msigev_nŸify
;

199 
	m_∑d
[
SIGEV_PAD_SIZE
];

200 
	m_tid
;

203 (*
	m_fun˘i⁄
)(
	msigvÆ_t
);

204 *
	m_©åibuã
;

205 } 
	m_sigev_thªad
;

206 } 
	m_sigev_un
;

207 } 
	tsigevít_t
;

209 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

210 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

211 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_tid


	)

	@asm-generic/signal.h

12 #i‚de‡
__ASM_GENERIC_SIGNAL_H


13 
	#__ASM_GENERIC_SIGNAL_H


	)

15 
	~<löux/compûî.h
>

17 #i‚de‡
SIG_BLOCK


18 
	#SIG_BLOCK
 0

	)

20 #i‚de‡
SIG_UNBLOCK


21 
	#SIG_UNBLOCK
 1

	)

23 #i‚de‡
SIG_SETMASK


24 
	#SIG_SETMASK
 2

	)

27 #i‚de‡
__ASSEMBLY__


28 
	t__sig«l‚_t
();

29 
__sig«l‚_t
 
	t__u£r
 *
	t__sigh™dÀr_t
;

31 
	t__ª°‹e‚_t
();

32 
__ª°‹e‚_t
 
	t__u£r
 *
	t__sigª°‹e_t
;

34 
	#SIG_DFL
 ((
__f‹˚
 
__sigh™dÀr_t
)0)

	)

35 
	#SIG_IGN
 ((
__f‹˚
 
__sigh™dÀr_t
)1)

	)

36 
	#SIG_ERR
 ((
__f‹˚
 
__sigh™dÀr_t
)-1)

	)

	@asm-generic/socket.h

19 #i‚de‡
__ASM_GENERIC_SOCKET_H


20 
	#__ASM_GENERIC_SOCKET_H


	)

21 
	~<asm/sockios.h
>

22 
	#SOL_SOCKET
 1

	)

24 
	#SO_DEBUG
 1

	)

25 
	#SO_REUSEADDR
 2

	)

26 
	#SO_TYPE
 3

	)

27 
	#SO_ERROR
 4

	)

29 
	#SO_DONTROUTE
 5

	)

30 
	#SO_BROADCAST
 6

	)

31 
	#SO_SNDBUF
 7

	)

32 
	#SO_RCVBUF
 8

	)

34 
	#SO_SNDBUFFORCE
 32

	)

35 
	#SO_RCVBUFFORCE
 33

	)

36 
	#SO_KEEPALIVE
 9

	)

37 
	#SO_OOBINLINE
 10

	)

39 
	#SO_NO_CHECK
 11

	)

40 
	#SO_PRIORITY
 12

	)

41 
	#SO_LINGER
 13

	)

42 
	#SO_BSDCOMPAT
 14

	)

44 #i‚de‡
SO_PASSCRED


45 
	#SO_PASSCRED
 16

	)

46 
	#SO_PEERCRED
 17

	)

47 
	#SO_RCVLOWAT
 18

	)

49 
	#SO_SNDLOWAT
 19

	)

50 
	#SO_RCVTIMEO
 20

	)

51 
	#SO_SNDTIMEO
 21

	)

54 
	#SO_SECURITY_AUTHENTICATION
 22

	)

55 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

56 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

57 
	#SO_BINDTODEVICE
 25

	)

59 
	#SO_ATTACH_FILTER
 26

	)

60 
	#SO_DETACH_FILTER
 27

	)

61 
	#SO_PEERNAME
 28

	)

62 
	#SO_TIMESTAMP
 29

	)

64 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

65 
	#SO_ACCEPTCONN
 30

	)

66 
	#SO_PEERSEC
 31

	)

67 
	#SO_PASSSEC
 34

	)

69 
	#SO_TIMESTAMPNS
 35

	)

70 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

71 
	#SO_MARK
 36

	)

72 
	#SO_TIMESTAMPING
 37

	)

74 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

75 
	#SO_PROTOCOL
 38

	)

76 
	#SO_DOMAIN
 39

	)

77 
	#SO_RXQ_OVFL
 40

	)

79 
	#SO_WIFI_STATUS
 41

	)

80 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

	@asm-generic/swab.h

19 #i‚de‡
_ASM_GENERIC_SWAB_H


20 
	#_ASM_GENERIC_SWAB_H


	)

21 
	~<asm/bô•îl⁄g.h
>

22 #i‡
__BITS_PER_LONG
 == 32

24 #i‡
deföed
(
__GNUC__
Ë&& (!deföed(
__STRICT_ANSI__
Ë|| deföed(
__KERNEL__
))

25 
	#__SWAB_64_THRU_32__


	)

	@asm-generic/tlb.h

12 #i‚de‡
_ASM_GENERIC__TLB_H


13 
	#_ASM_GENERIC__TLB_H


	)

15 
	~<löux/sw≠.h
>

16 
	~<asm/pgÆloc.h
>

17 
	~<asm/ébÊush.h
>

19 
	#FREE_PTE_NR
 1

	)

20 
	#éb_Á°_mode
(
éb
Ë1

	)

22 
	smmu_g©hî
 {

23 
mm_°ru˘
 *
	mmm
;

24 
	mƒ
;

25 
	m√ed_Êush
;

26 
	mfuŒmm
;

27 
∑ge
 * 
	m∑ges
[
FREE_PTE_NR
];

30 
	#éb_ªmove_éb_íåy
(
éb
, 
±ï
, 
addªss
Ëdÿ{Ålb->
√ed_Êush
 = 1; 
	`__éb_ªmove_éb_íåy
—lb,Öãp,áddªss); } 0)

	)

31 
	#±e_‰ì_éb
(
éb
, 
±ï
Ëdÿ{Ålb->
√ed_Êush
 = 1; 
	`__±e_‰ì_éb
—lb,Öãp); } 0)

	)

32 #i‚de‡
__ARCH_HAS_4LEVEL_HACK


33 
	#pud_‰ì_éb
(
éb
, 
pudp
Ëdÿ{Ålb->
√ed_Êush
 = 1; 
	`__pud_‰ì_éb
—lb,Öudp); } 0)

	)

35 
	#pmd_‰ì_éb
(
éb
, 
pmdp
Ëdÿ{Ålb->
√ed_Êush
 = 1; 
	`__pmd_‰ì_éb
—lb,Ömdp); } 0)

	)

36 
	#éb_migøã_föish
(
mm
Ëdÿ{} 0)

	)

	@asm-generic/topology.h

12 #i‚de‡
_ASM_GENERIC_TOPOLOGY_H


13 
	#_ASM_GENERIC_TOPOLOGY_H


	)

15 #i‚de‡
˝u_to_node


16 
	#˝u_to_node
(
˝u
Ë(0)

	)

18 #i‚de‡
∑ª¡_node


19 
	#∑ª¡_node
(
node
Ë(0)

	)

21 #i‚de‡
node_to_˝umask


22 
	#node_to_˝umask
(
node
Ë(
˝u_⁄löe_m≠
)

	)

24 #i‚de‡
node_to_fú°_˝u


25 
	#node_to_fú°_˝u
(
node
Ë(0)

	)

27 #i‚de‡
pcibus_to_node


28 
	#pcibus_to_node
(
node
Ë(-1)

	)

31 #i‚de‡
pcibus_to_˝umask


32 
	#pcibus_to_˝umask
(
bus
Ë(
	`pcibus_to_node
(busË=-1 ? 
CPU_MASK_ALL
 : 
	`node_to_˝umask
’cibus_to_node(bus)Ë)

	)

	@asm-generic/xor.h

12 
	~<asm/¥o˚ss‹.h
>

14 
	#XOR_TRY_TEMPLATES
 dÿ{ 
	`x‹_•ìd
(&
x‹_block_8ªgs
); x‹_•ìd(&
x‹_block_8ªgs_p
); x‹_•ìd(&
x‹_block_32ªgs
); x‹_•ìd(&
x‹_block_32ªgs_p
); } 0)

	)

	@asm/a.out.h

12 #i‚de‡
__ARM_A_OUT_H__


13 
	#__ARM_A_OUT_H__


	)

15 
	~<löux/≥rs⁄Æôy.h
>

16 
	~<asm/ty≥s.h
>

18 
	sexec


20 
__u32
 
	ma_öfo
;

21 
__u32
 
	ma_ãxt
;

22 
__u32
 
	ma_d©a
;

23 
__u32
 
	ma_bss
;

24 
__u32
 
	ma_syms
;

25 
__u32
 
	ma_íåy
;

26 
__u32
 
	ma_åsize
;

27 
__u32
 
	ma_drsize
;

30 
	#N_TXTADDR
(
a
Ë(0x00008000)

	)

32 
	#N_TRSIZE
(
a
Ë(◊).
a_åsize
)

	)

33 
	#N_DRSIZE
(
a
Ë(◊).
a_drsize
)

	)

34 
	#N_SYMSIZE
(
a
Ë(◊).
a_syms
)

	)

36 
	#M_ARM
 103

	)

38 #i‚de‡
LIBRARY_START_TEXT


39 
	#LIBRARY_START_TEXT
 (0x00c00000)

	)

	@asm/arch/board-perseus2.h

12 #i‚de‡
__ASM_ARCH_OMAP_PERSEUS2_H


13 
	#__ASM_ARCH_OMAP_PERSEUS2_H


	)

15 
	~<asm/¨ch/Âga.h
>

17 #i‚de‡
OMAP_SDRAM_DEVICE


18 
	#OMAP_SDRAM_DEVICE
 
D256M_1X16_4B


	)

21 
	#MAXIRQNUM
 
IH_BOARD_BASE


	)

22 
	#MAXFIQNUM
 
MAXIRQNUM


	)

23 
	#MAXSWINUM
 
MAXIRQNUM


	)

25 
	#NR_IRQS
 (
MAXIRQNUM
 + 1)

	)

	@asm/arch/board.h

12 #i‚de‡
_OMAP_BOARD_H


13 
	#_OMAP_BOARD_H


	)

15 
	~<löux/ty≥s.h
>

17 
	~<asm/¨ch/gpio-swôch.h
>

19 
	#OMAP_TAG_CLOCK
 0x4f01

	)

20 
	#OMAP_TAG_MMC
 0x4f02

	)

21 
	#OMAP_TAG_SERIAL_CONSOLE
 0x4f03

	)

22 
	#OMAP_TAG_USB
 0x4f04

	)

23 
	#OMAP_TAG_LCD
 0x4f05

	)

24 
	#OMAP_TAG_GPIO_SWITCH
 0x4f06

	)

25 
	#OMAP_TAG_UART
 0x4f07

	)

26 
	#OMAP_TAG_FBMEM
 0x4f08

	)

27 
	#OMAP_TAG_STI_CONSOLE
 0x4f09

	)

28 
	#OMAP_TAG_CAMERA_SENSOR
 0x4f0a

	)

29 
	#OMAP_TAG_BT
 0x4f0b

	)

31 
	#OMAP_TAG_BOOT_REASON
 0x4f80

	)

32 
	#OMAP_TAG_FLASH_PART
 0x4f81

	)

33 
	#OMAP_TAG_VERSION_STR
 0x4f82

	)

35 
	som≠_˛ock_c⁄fig
 {

37 
u8
 
	msy°em_˛ock_ty≥
;

40 
	som≠_mmc_c⁄f
 {

41 
	míabÀd
:1;

43 
	mnomux
:1;

45 
	mcovî
:1;

47 
	mwúe4
:1;

48 
s16
 
	mpowî_pö
;

49 
s16
 
	mswôch_pö
;

50 
s16
 
	mwp_pö
;

53 
	som≠_mmc_c⁄fig
 {

54 
om≠_mmc_c⁄f
 
	mmmc
[2];

57 
	som≠_£rül_c⁄sﬁe_c⁄fig
 {

58 
u8
 
	mc⁄sﬁe_u¨t
;

59 
u32
 
	mc⁄sﬁe_•ìd
;

62 
	som≠_°i_c⁄sﬁe_c⁄fig
 {

63 
	míabÀ
:1;

64 
u8
 
	mch™√l
;

67 
	som≠_ˇmîa_£ns‹_c⁄fig
 {

68 
u16
 
	mª£t_gpio
;

69 (*
	mpowî_⁄
)(* 
	md©a
);

70 (*
	mpowî_off
)(* 
	md©a
);

73 
	som≠_usb_c⁄fig
 {

75 
	mªgi°î_ho°
:1;

76 
	mªgi°î_dev
:1;

77 
u8
 
	mŸg
;

79 
u8
 
	mhmc_mode
;

81 
u8
 
	mrwc
;

83 
u8
 
	mpös
[3];

86 
	som≠_lcd_c⁄fig
 {

87 
	m∑√l_«me
[16];

88 
	m˘æ_«me
[16];

89 
s16
 
	mƒe£t_gpio
;

90 
u8
 
	md©a_löes
;

93 
	gdevi˚
;

94 
	gfb_öfo
;

95 
	som≠_backlight_c⁄fig
 {

96 
	mdeÁu…_öãnsôy
;

97 (*
	m£t_powî
)(
devi˚
 *
	mdev
, 
	m°©e
);

98 (*
	mcheck_fb
)(
fb_öfo
 *
	mfb
);

101 
	som≠_fbmem_c⁄fig
 {

102 
u32
 
	m°¨t
;

103 
u32
 
	msize
;

106 
	som≠_pwm_Àd_∂©f‹m_d©a
 {

107 c⁄° *
	m«me
;

108 
	möãnsôy_timî
;

109 
	mblök_timî
;

110 (*
	m£t_powî
)(
om≠_pwm_Àd_∂©f‹m_d©a
 *
	m£lf
, 
	m⁄_off
);

113 
	som≠_gpio_swôch_c⁄fig
 {

114 
	m«me
[12];

115 
u16
 
	mgpio
;

116 
	mÊags
:4;

117 
	mty≥
:4;

118 
	mkey_code
:24;

121 
	som≠_u¨t_c⁄fig
 {

123 
	míabÀd_u¨ts
;

126 
	som≠_Êash_∑π_c⁄fig
 {

127 
	m∑π_èbÀ
[0];

130 
	som≠_boŸ_ªas⁄_c⁄fig
 {

131 
	mªas⁄_°r
[12];

134 
	som≠_vîsi⁄_c⁄fig
 {

135 
	mcomp⁄ít
[12];

136 
	mvîsi⁄
[12];

139 
	som≠_bﬂrd_c⁄fig_íåy
 {

140 
u16
 
	mèg
;

141 
u16
 
	mÀn
;

142 
u8
 
	md©a
[0];

145 
	som≠_bﬂrd_c⁄fig_kî√l
 {

146 
u16
 
	mèg
;

147 c⁄° *
	md©a
;

150 
	som≠_bluëoŸh_c⁄fig
 {

151 
u8
 
	mchù_ty≥
;

152 
u8
 
	mbt_u¨t
;

153 
u8
 
	mbd_addr
[6];

154 
u8
 
	mbt_sys˛k
;

155 
	mbt_wakeup_gpio
;

156 
	mho°_wakeup_gpio
;

157 
	mª£t_gpio
;

160 
	#om≠_gë_c⁄fig
(
èg
, 
ty≥
Ë((c⁄°Åy≥ *Ë
	`__om≠_gë_c⁄fig
(—ag), —y≥), 0))

	)

161 
	#om≠_gë_ƒ_c⁄fig
(
èg
, 
ty≥
, 
ƒ
Ë((c⁄°Åy≥ *Ë
	`__om≠_gë_c⁄fig
(—ag), —y≥), (ƒ)))

	)

	@asm/arch/cpu.h

12 #i‚de‡
__ASM_ARCH_OMAP_CPU_H


13 
	#__ASM_ARCH_OMAP_CPU_H


	)

15 
	#om≠2_˝u_ªv
(Ë((
sy°em_ªv
 >> 8Ë& 0x0f)

	)

17 #unde‡
MULTI_OMAP1


18 #unde‡
MULTI_OMAP2


19 #unde‡
OMAP_NAME


21 
	#GET_OMAP_CLASS
 (
sy°em_ªv
 & 0xff)

	)

23 
	#IS_OMAP_CLASS
(
˛ass
, 
id
Ë
ölöe
 
is_om≠
 ##
	`˛ass
 (Ë{  (
GET_OMAP_CLASS
 =(id)Ë? 1 : 0; }

	)

25 
	#GET_OMAP_SUBCLASS
 ((
sy°em_ªv
 >> 20Ë& 0x0fff)

	)

27 
	#IS_OMAP_SUBCLASS
(
sub˛ass
, 
id
Ë
ölöe
 
is_om≠
 ##
	`sub˛ass
 (Ë{  (
GET_OMAP_SUBCLASS
 =(id)Ë? 1 : 0; }

	)

29 
	#˝u_is_om≠7xx
(Ë0

	)

30 
	#˝u_is_om≠15xx
(Ë0

	)

31 
	#˝u_is_om≠16xx
(Ë0

	)

32 
	#˝u_is_om≠24xx
(Ë0

	)

33 
	#˝u_is_om≠242x
(Ë0

	)

34 
	#˝u_is_om≠243x
(Ë0

	)

35 #ifde‡
MULTI_OMAP1


38 
	#GET_OMAP_TYPE
 ((
sy°em_ªv
 >> 16Ë& 0xffff)

	)

39 
	#IS_OMAP_TYPE
(
ty≥
, 
id
Ë
ölöe
 
is_om≠
 ##
	`ty≥
 (Ë{  (
GET_OMAP_TYPE
 =(id)Ë? 1 : 0; }

	)

40 
	#˝u_is_om≠310
(Ë0

	)

41 
	#˝u_is_om≠730
(Ë0

	)

42 
	#˝u_is_om≠1510
(Ë0

	)

43 
	#˝u_is_om≠1610
(Ë0

	)

44 
	#˝u_is_om≠5912
(Ë0

	)

45 
	#˝u_is_om≠1611
(Ë0

	)

46 
	#˝u_is_om≠1621
(Ë0

	)

47 
	#˝u_is_om≠1710
(Ë0

	)

48 
	#˝u_is_om≠2420
(Ë0

	)

49 
	#˝u_is_om≠2422
(Ë0

	)

50 
	#˝u_is_om≠2423
(Ë0

	)

51 
	#˝u_is_om≠2430
(Ë0

	)

52 #ifde‡
MULTI_OMAP1


55 
	#˝u_˛ass_is_om≠1
(Ë(
	`˝u_is_om≠730
(Ë|| 
	`˝u_is_om≠15xx
(Ë|| 
	`˝u_is_om≠16xx
())

	)

56 
	#˝u_˛ass_is_om≠2
(Ë
	`˝u_is_om≠24xx
()

	)

	@asm/arch/dma.h

12 #i‚de‡
__ASM_ARCH_DMA_H


13 
	#__ASM_ARCH_DMA_H


	)

15 
	#OMAP_DMA_BASE
 (0xff„d800)

	)

16 
	#OMAP_DMA_GCR
 (
OMAP_DMA_BASE
 + 0x400)

	)

17 
	#OMAP_DMA_GSCR
 (
OMAP_DMA_BASE
 + 0x404)

	)

18 
	#OMAP_DMA_GRST
 (
OMAP_DMA_BASE
 + 0x408)

	)

19 
	#OMAP_DMA_HW_ID
 (
OMAP_DMA_BASE
 + 0x442)

	)

20 
	#OMAP_DMA_PCH2_ID
 (
OMAP_DMA_BASE
 + 0x444)

	)

21 
	#OMAP_DMA_PCH0_ID
 (
OMAP_DMA_BASE
 + 0x446)

	)

22 
	#OMAP_DMA_PCH1_ID
 (
OMAP_DMA_BASE
 + 0x448)

	)

23 
	#OMAP_DMA_PCHG_ID
 (
OMAP_DMA_BASE
 + 0x44a)

	)

24 
	#OMAP_DMA_PCHD_ID
 (
OMAP_DMA_BASE
 + 0x44c)

	)

25 
	#OMAP_DMA_CAPS_0_U
 (
OMAP_DMA_BASE
 + 0x44e)

	)

26 
	#OMAP_DMA_CAPS_0_L
 (
OMAP_DMA_BASE
 + 0x450)

	)

27 
	#OMAP_DMA_CAPS_1_U
 (
OMAP_DMA_BASE
 + 0x452)

	)

28 
	#OMAP_DMA_CAPS_1_L
 (
OMAP_DMA_BASE
 + 0x454)

	)

29 
	#OMAP_DMA_CAPS_2
 (
OMAP_DMA_BASE
 + 0x456)

	)

30 
	#OMAP_DMA_CAPS_3
 (
OMAP_DMA_BASE
 + 0x458)

	)

31 
	#OMAP_DMA_CAPS_4
 (
OMAP_DMA_BASE
 + 0x45a)

	)

32 
	#OMAP_DMA_PCH2_SR
 (
OMAP_DMA_BASE
 + 0x460)

	)

33 
	#OMAP_DMA_PCH0_SR
 (
OMAP_DMA_BASE
 + 0x480)

	)

34 
	#OMAP_DMA_PCH1_SR
 (
OMAP_DMA_BASE
 + 0x482)

	)

35 
	#OMAP_DMA_PCHD_SR
 (
OMAP_DMA_BASE
 + 0x4c0)

	)

37 
	#OMAP24XX_DMA_BASE
 (
L4_24XX_BASE
 + 0x56000)

	)

38 
	#OMAP_DMA4_REVISION
 (
OMAP24XX_DMA_BASE
 + 0x00)

	)

39 
	#OMAP_DMA4_GCR_REG
 (
OMAP24XX_DMA_BASE
 + 0x78)

	)

40 
	#OMAP_DMA4_IRQSTATUS_L0
 (
OMAP24XX_DMA_BASE
 + 0x08)

	)

41 
	#OMAP_DMA4_IRQSTATUS_L1
 (
OMAP24XX_DMA_BASE
 + 0x0c)

	)

42 
	#OMAP_DMA4_IRQSTATUS_L2
 (
OMAP24XX_DMA_BASE
 + 0x10)

	)

43 
	#OMAP_DMA4_IRQSTATUS_L3
 (
OMAP24XX_DMA_BASE
 + 0x14)

	)

44 
	#OMAP_DMA4_IRQENABLE_L0
 (
OMAP24XX_DMA_BASE
 + 0x18)

	)

45 
	#OMAP_DMA4_IRQENABLE_L1
 (
OMAP24XX_DMA_BASE
 + 0x1c)

	)

46 
	#OMAP_DMA4_IRQENABLE_L2
 (
OMAP24XX_DMA_BASE
 + 0x20)

	)

47 
	#OMAP_DMA4_IRQENABLE_L3
 (
OMAP24XX_DMA_BASE
 + 0x24)

	)

48 
	#OMAP_DMA4_SYSSTATUS
 (
OMAP24XX_DMA_BASE
 + 0x28)

	)

49 
	#OMAP_DMA4_CAPS_0
 (
OMAP24XX_DMA_BASE
 + 0x64)

	)

50 
	#OMAP_DMA4_CAPS_2
 (
OMAP24XX_DMA_BASE
 + 0x6c)

	)

51 
	#OMAP_DMA4_CAPS_3
 (
OMAP24XX_DMA_BASE
 + 0x70)

	)

52 
	#OMAP_DMA4_CAPS_4
 (
OMAP24XX_DMA_BASE
 + 0x74)

	)

54 
	#OMAP_LOGICAL_DMA_CH_COUNT
 32

	)

56 
	#OMAP_DMA_CCR_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0x80)

	)

57 
	#OMAP_DMA_CLNK_CTRL_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0x84)

	)

58 
	#OMAP_DMA_CICR_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0x88)

	)

59 
	#OMAP_DMA_CSR_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0x8c)

	)

60 
	#OMAP_DMA_CSDP_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0x90)

	)

61 
	#OMAP_DMA_CEN_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0x94)

	)

62 
	#OMAP_DMA_CFN_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0x98)

	)

63 
	#OMAP_DMA_CSEI_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xa4)

	)

64 
	#OMAP_DMA_CSFI_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xa8)

	)

65 
	#OMAP_DMA_CDEI_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xac)

	)

66 
	#OMAP_DMA_CDFI_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xb0)

	)

67 
	#OMAP_DMA_CSAC_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xb4)

	)

68 
	#OMAP_DMA_CDAC_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xb8)

	)

70 
	#OMAP1_DMA_CSSA_L_REG
(
n
Ë
	`__REG16
(
OMAP_DMA_BASE
 + 0x40 * (nË+ 0x08)

	)

71 
	#OMAP1_DMA_CSSA_U_REG
(
n
Ë
	`__REG16
(
OMAP_DMA_BASE
 + 0x40 * (nË+ 0x0a)

	)

72 
	#OMAP1_DMA_CDSA_L_REG
(
n
Ë
	`__REG16
(
OMAP_DMA_BASE
 + 0x40 * (nË+ 0x0c)

	)

73 
	#OMAP1_DMA_CDSA_U_REG
(
n
Ë
	`__REG16
(
OMAP_DMA_BASE
 + 0x40 * (nË+ 0x0e)

	)

74 
	#OMAP1_DMA_COLOR_L_REG
(
n
Ë
	`__REG16
(
OMAP_DMA_BASE
 + 0x40 * (nË+ 0x20)

	)

75 
	#OMAP1_DMA_CCR2_REG
(
n
Ë
	`__REG16
(
OMAP_DMA_BASE
 + 0x40 * (nË+ 0x24)

	)

76 
	#OMAP1_DMA_COLOR_U_REG
(
n
Ë
	`__REG16
(
OMAP_DMA_BASE
 + 0x40 * (nË+ 0x22)

	)

77 
	#OMAP1_DMA_LCH_CTRL_REG
(
n
Ë
	`__REG16
(
OMAP_DMA_BASE
 + 0x40 * (nË+ 0x2a)

	)

79 
	#OMAP2_DMA_CSSA_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0x9c)

	)

80 
	#OMAP2_DMA_CDSA_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xa0)

	)

81 
	#OMAP2_DMA_CCEN_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xbc)

	)

82 
	#OMAP2_DMA_CCFN_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xc0)

	)

83 
	#OMAP2_DMA_COLOR_REG
(
n
Ë
	`__REG32
(
OMAP24XX_DMA_BASE
 + 0x60 * (nË+ 0xc4)

	)

85 
	#OMAP_DMA_NO_DEVICE
 0

	)

86 
	#OMAP_DMA_MCSI1_TX
 1

	)

87 
	#OMAP_DMA_MCSI1_RX
 2

	)

88 
	#OMAP_DMA_I2C_RX
 3

	)

89 
	#OMAP_DMA_I2C_TX
 4

	)

90 
	#OMAP_DMA_EXT_NDMA_REQ
 5

	)

91 
	#OMAP_DMA_EXT_NDMA_REQ2
 6

	)

92 
	#OMAP_DMA_UWIRE_TX
 7

	)

93 
	#OMAP_DMA_MCBSP1_TX
 8

	)

94 
	#OMAP_DMA_MCBSP1_RX
 9

	)

95 
	#OMAP_DMA_MCBSP3_TX
 10

	)

96 
	#OMAP_DMA_MCBSP3_RX
 11

	)

97 
	#OMAP_DMA_UART1_TX
 12

	)

98 
	#OMAP_DMA_UART1_RX
 13

	)

99 
	#OMAP_DMA_UART2_TX
 14

	)

100 
	#OMAP_DMA_UART2_RX
 15

	)

101 
	#OMAP_DMA_MCBSP2_TX
 16

	)

102 
	#OMAP_DMA_MCBSP2_RX
 17

	)

103 
	#OMAP_DMA_UART3_TX
 18

	)

104 
	#OMAP_DMA_UART3_RX
 19

	)

105 
	#OMAP_DMA_CAMERA_IF_RX
 20

	)

106 
	#OMAP_DMA_MMC_TX
 21

	)

107 
	#OMAP_DMA_MMC_RX
 22

	)

108 
	#OMAP_DMA_NAND
 23

	)

109 
	#OMAP_DMA_IRQ_LCD_LINE
 24

	)

110 
	#OMAP_DMA_MEMORY_STICK
 25

	)

111 
	#OMAP_DMA_USB_W2FC_RX0
 26

	)

112 
	#OMAP_DMA_USB_W2FC_RX1
 27

	)

113 
	#OMAP_DMA_USB_W2FC_RX2
 28

	)

114 
	#OMAP_DMA_USB_W2FC_TX0
 29

	)

115 
	#OMAP_DMA_USB_W2FC_TX1
 30

	)

116 
	#OMAP_DMA_USB_W2FC_TX2
 31

	)

118 
	#OMAP_DMA_CRYPTO_DES_IN
 32

	)

119 
	#OMAP_DMA_SPI_TX
 33

	)

120 
	#OMAP_DMA_SPI_RX
 34

	)

121 
	#OMAP_DMA_CRYPTO_HASH
 35

	)

122 
	#OMAP_DMA_CCP_ATTN
 36

	)

123 
	#OMAP_DMA_CCP_FIFO_NOT_EMPTY
 37

	)

124 
	#OMAP_DMA_CMT_APE_TX_CHAN_0
 38

	)

125 
	#OMAP_DMA_CMT_APE_RV_CHAN_0
 39

	)

126 
	#OMAP_DMA_CMT_APE_TX_CHAN_1
 40

	)

127 
	#OMAP_DMA_CMT_APE_RV_CHAN_1
 41

	)

128 
	#OMAP_DMA_CMT_APE_TX_CHAN_2
 42

	)

129 
	#OMAP_DMA_CMT_APE_RV_CHAN_2
 43

	)

130 
	#OMAP_DMA_CMT_APE_TX_CHAN_3
 44

	)

131 
	#OMAP_DMA_CMT_APE_RV_CHAN_3
 45

	)

132 
	#OMAP_DMA_CMT_APE_TX_CHAN_4
 46

	)

133 
	#OMAP_DMA_CMT_APE_RV_CHAN_4
 47

	)

134 
	#OMAP_DMA_CMT_APE_TX_CHAN_5
 48

	)

135 
	#OMAP_DMA_CMT_APE_RV_CHAN_5
 49

	)

136 
	#OMAP_DMA_CMT_APE_TX_CHAN_6
 50

	)

137 
	#OMAP_DMA_CMT_APE_RV_CHAN_6
 51

	)

138 
	#OMAP_DMA_CMT_APE_TX_CHAN_7
 52

	)

139 
	#OMAP_DMA_CMT_APE_RV_CHAN_7
 53

	)

140 
	#OMAP_DMA_MMC2_TX
 54

	)

141 
	#OMAP_DMA_MMC2_RX
 55

	)

142 
	#OMAP_DMA_CRYPTO_DES_OUT
 56

	)

144 
	#OMAP24XX_DMA_NO_DEVICE
 0

	)

145 
	#OMAP24XX_DMA_XTI_DMA
 1

	)

146 
	#OMAP24XX_DMA_EXT_DMAREQ0
 2

	)

147 
	#OMAP24XX_DMA_EXT_DMAREQ1
 3

	)

148 
	#OMAP24XX_DMA_GPMC
 4

	)

149 
	#OMAP24XX_DMA_GFX
 5

	)

150 
	#OMAP24XX_DMA_DSS
 6

	)

151 
	#OMAP24XX_DMA_VLYNQ_TX
 7

	)

152 
	#OMAP24XX_DMA_CWT
 8

	)

153 
	#OMAP24XX_DMA_AES_TX
 9

	)

154 
	#OMAP24XX_DMA_AES_RX
 10

	)

155 
	#OMAP24XX_DMA_DES_TX
 11

	)

156 
	#OMAP24XX_DMA_DES_RX
 12

	)

157 
	#OMAP24XX_DMA_SHA1MD5_RX
 13

	)

158 
	#OMAP24XX_DMA_EXT_DMAREQ2
 14

	)

159 
	#OMAP24XX_DMA_EXT_DMAREQ3
 15

	)

160 
	#OMAP24XX_DMA_EXT_DMAREQ4
 16

	)

161 
	#OMAP24XX_DMA_EAC_AC_RD
 17

	)

162 
	#OMAP24XX_DMA_EAC_AC_WR
 18

	)

163 
	#OMAP24XX_DMA_EAC_MD_UL_RD
 19

	)

164 
	#OMAP24XX_DMA_EAC_MD_UL_WR
 20

	)

165 
	#OMAP24XX_DMA_EAC_MD_DL_RD
 21

	)

166 
	#OMAP24XX_DMA_EAC_MD_DL_WR
 22

	)

167 
	#OMAP24XX_DMA_EAC_BT_UL_RD
 23

	)

168 
	#OMAP24XX_DMA_EAC_BT_UL_WR
 24

	)

169 
	#OMAP24XX_DMA_EAC_BT_DL_RD
 25

	)

170 
	#OMAP24XX_DMA_EAC_BT_DL_WR
 26

	)

171 
	#OMAP24XX_DMA_I2C1_TX
 27

	)

172 
	#OMAP24XX_DMA_I2C1_RX
 28

	)

173 
	#OMAP24XX_DMA_I2C2_TX
 29

	)

174 
	#OMAP24XX_DMA_I2C2_RX
 30

	)

175 
	#OMAP24XX_DMA_MCBSP1_TX
 31

	)

176 
	#OMAP24XX_DMA_MCBSP1_RX
 32

	)

177 
	#OMAP24XX_DMA_MCBSP2_TX
 33

	)

178 
	#OMAP24XX_DMA_MCBSP2_RX
 34

	)

179 
	#OMAP24XX_DMA_SPI1_TX0
 35

	)

180 
	#OMAP24XX_DMA_SPI1_RX0
 36

	)

181 
	#OMAP24XX_DMA_SPI1_TX1
 37

	)

182 
	#OMAP24XX_DMA_SPI1_RX1
 38

	)

183 
	#OMAP24XX_DMA_SPI1_TX2
 39

	)

184 
	#OMAP24XX_DMA_SPI1_RX2
 40

	)

185 
	#OMAP24XX_DMA_SPI1_TX3
 41

	)

186 
	#OMAP24XX_DMA_SPI1_RX3
 42

	)

187 
	#OMAP24XX_DMA_SPI2_TX0
 43

	)

188 
	#OMAP24XX_DMA_SPI2_RX0
 44

	)

189 
	#OMAP24XX_DMA_SPI2_TX1
 45

	)

190 
	#OMAP24XX_DMA_SPI2_RX1
 46

	)

192 
	#OMAP24XX_DMA_UART1_TX
 49

	)

193 
	#OMAP24XX_DMA_UART1_RX
 50

	)

194 
	#OMAP24XX_DMA_UART2_TX
 51

	)

195 
	#OMAP24XX_DMA_UART2_RX
 52

	)

196 
	#OMAP24XX_DMA_UART3_TX
 53

	)

197 
	#OMAP24XX_DMA_UART3_RX
 54

	)

198 
	#OMAP24XX_DMA_USB_W2FC_TX0
 55

	)

199 
	#OMAP24XX_DMA_USB_W2FC_RX0
 56

	)

200 
	#OMAP24XX_DMA_USB_W2FC_TX1
 57

	)

201 
	#OMAP24XX_DMA_USB_W2FC_RX1
 58

	)

202 
	#OMAP24XX_DMA_USB_W2FC_TX2
 59

	)

203 
	#OMAP24XX_DMA_USB_W2FC_RX2
 60

	)

204 
	#OMAP24XX_DMA_MMC1_TX
 61

	)

205 
	#OMAP24XX_DMA_MMC1_RX
 62

	)

206 
	#OMAP24XX_DMA_MS
 63

	)

207 
	#OMAP24XX_DMA_EXT_DMAREQ5
 64

	)

209 
	#OMAP1510_DMA_LCD_BASE
 (0xff„db00)

	)

210 
	#OMAP1510_DMA_LCD_CTRL
 (
OMAP1510_DMA_LCD_BASE
 + 0x00)

	)

211 
	#OMAP1510_DMA_LCD_TOP_F1_L
 (
OMAP1510_DMA_LCD_BASE
 + 0x02)

	)

212 
	#OMAP1510_DMA_LCD_TOP_F1_U
 (
OMAP1510_DMA_LCD_BASE
 + 0x04)

	)

213 
	#OMAP1510_DMA_LCD_BOT_F1_L
 (
OMAP1510_DMA_LCD_BASE
 + 0x06)

	)

214 
	#OMAP1510_DMA_LCD_BOT_F1_U
 (
OMAP1510_DMA_LCD_BASE
 + 0x08)

	)

216 
	#OMAP1610_DMA_LCD_BASE
 (0xff„e300)

	)

217 
	#OMAP1610_DMA_LCD_CSDP
 (
OMAP1610_DMA_LCD_BASE
 + 0xc0)

	)

218 
	#OMAP1610_DMA_LCD_CCR
 (
OMAP1610_DMA_LCD_BASE
 + 0xc2)

	)

219 
	#OMAP1610_DMA_LCD_CTRL
 (
OMAP1610_DMA_LCD_BASE
 + 0xc4)

	)

220 
	#OMAP1610_DMA_LCD_TOP_B1_L
 (
OMAP1610_DMA_LCD_BASE
 + 0xc8)

	)

221 
	#OMAP1610_DMA_LCD_TOP_B1_U
 (
OMAP1610_DMA_LCD_BASE
 + 0xˇ)

	)

222 
	#OMAP1610_DMA_LCD_BOT_B1_L
 (
OMAP1610_DMA_LCD_BASE
 + 0xcc)

	)

223 
	#OMAP1610_DMA_LCD_BOT_B1_U
 (
OMAP1610_DMA_LCD_BASE
 + 0x˚)

	)

224 
	#OMAP1610_DMA_LCD_TOP_B2_L
 (
OMAP1610_DMA_LCD_BASE
 + 0xd0)

	)

225 
	#OMAP1610_DMA_LCD_TOP_B2_U
 (
OMAP1610_DMA_LCD_BASE
 + 0xd2)

	)

226 
	#OMAP1610_DMA_LCD_BOT_B2_L
 (
OMAP1610_DMA_LCD_BASE
 + 0xd4)

	)

227 
	#OMAP1610_DMA_LCD_BOT_B2_U
 (
OMAP1610_DMA_LCD_BASE
 + 0xd6)

	)

228 
	#OMAP1610_DMA_LCD_SRC_EI_B1
 (
OMAP1610_DMA_LCD_BASE
 + 0xd8)

	)

229 
	#OMAP1610_DMA_LCD_SRC_FI_B1_L
 (
OMAP1610_DMA_LCD_BASE
 + 0xda)

	)

230 
	#OMAP1610_DMA_LCD_SRC_EN_B1
 (
OMAP1610_DMA_LCD_BASE
 + 0xe0)

	)

231 
	#OMAP1610_DMA_LCD_SRC_FN_B1
 (
OMAP1610_DMA_LCD_BASE
 + 0xe4)

	)

232 
	#OMAP1610_DMA_LCD_LCH_CTRL
 (
OMAP1610_DMA_LCD_BASE
 + 0xó)

	)

233 
	#OMAP1610_DMA_LCD_SRC_FI_B1_U
 (
OMAP1610_DMA_LCD_BASE
 + 0xf4)

	)

235 
	#OMAP1_DMA_TOUT_IRQ
 (1 << 0)

	)

236 
	#OMAP_DMA_DROP_IRQ
 (1 << 1)

	)

237 
	#OMAP_DMA_HALF_IRQ
 (1 << 2)

	)

238 
	#OMAP_DMA_FRAME_IRQ
 (1 << 3)

	)

239 
	#OMAP_DMA_LAST_IRQ
 (1 << 4)

	)

240 
	#OMAP_DMA_BLOCK_IRQ
 (1 << 5)

	)

241 
	#OMAP1_DMA_SYNC_IRQ
 (1 << 6)

	)

242 
	#OMAP2_DMA_PKT_IRQ
 (1 << 7)

	)

243 
	#OMAP2_DMA_TRANS_ERR_IRQ
 (1 << 8)

	)

244 
	#OMAP2_DMA_SECURE_ERR_IRQ
 (1 << 9)

	)

245 
	#OMAP2_DMA_SUPERVISOR_ERR_IRQ
 (1 << 10)

	)

246 
	#OMAP2_DMA_MISALIGNED_ERR_IRQ
 (1 << 11)

	)

248 
	#OMAP_DMA_DATA_TYPE_S8
 0x00

	)

249 
	#OMAP_DMA_DATA_TYPE_S16
 0x01

	)

250 
	#OMAP_DMA_DATA_TYPE_S32
 0x02

	)

252 
	#OMAP_DMA_SYNC_ELEMENT
 0x00

	)

253 
	#OMAP_DMA_SYNC_FRAME
 0x01

	)

254 
	#OMAP_DMA_SYNC_BLOCK
 0x02

	)

256 
	#OMAP_DMA_PORT_EMIFF
 0x00

	)

257 
	#OMAP_DMA_PORT_EMIFS
 0x01

	)

258 
	#OMAP_DMA_PORT_OCP_T1
 0x02

	)

259 
	#OMAP_DMA_PORT_TIPB
 0x03

	)

260 
	#OMAP_DMA_PORT_OCP_T2
 0x04

	)

261 
	#OMAP_DMA_PORT_MPUI
 0x05

	)

263 
	#OMAP_DMA_AMODE_CONSTANT
 0x00

	)

264 
	#OMAP_DMA_AMODE_POST_INC
 0x01

	)

265 
	#OMAP_DMA_AMODE_SINGLE_IDX
 0x02

	)

266 
	#OMAP_DMA_AMODE_DOUBLE_IDX
 0x03

	)

269 
	mOMAP_LCD_DMA_B1_TOP
,

270 
	mOMAP_LCD_DMA_B1_BOTTOM
,

271 
	mOMAP_LCD_DMA_B2_TOP
,

272 
	mOMAP_LCD_DMA_B2_BOTTOM


275 
	eom≠_dma_bur°_mode
 {

276 
	mOMAP_DMA_DATA_BURST_DIS
 = 0,

277 
	mOMAP_DMA_DATA_BURST_4
,

278 
	mOMAP_DMA_DATA_BURST_8
,

279 
	mOMAP_DMA_DATA_BURST_16
,

282 
	eom≠_dma_cﬁ‹_mode
 {

283 
	mOMAP_DMA_COLOR_DIS
 = 0,

284 
	mOMAP_DMA_CONSTANT_FILL
,

285 
	mOMAP_DMA_TRANSPARENT_COPY


288 
	eom≠_dma_wrôe_mode
 {

289 
	mOMAP_DMA_WRITE_NON_POSTED
 = 0,

290 
	mOMAP_DMA_WRITE_POSTED
,

291 
	mOMAP_DMA_WRITE_LAST_NON_POSTED


294 
	som≠_dma_ch™√l_∑øms
 {

295 
	md©a_ty≥
;

296 
	mñem_cou¡
;

297 
	m‰ame_cou¡
;

299 
	m§c_p‹t
;

300 
	m§c_amode
;

301 
	m§c_°¨t
;

302 
	m§c_ei
;

303 
	m§c_fi
;

305 
	md°_p‹t
;

306 
	md°_amode
;

307 
	md°_°¨t
;

308 
	md°_ei
;

309 
	md°_fi
;

311 
	måiggî
;

312 
	msync_mode
;

313 
	m§c_‹_d°_synch
;

315 
	mõ
;

	@asm/arch/fpga.h

12 #i‚de‡
__ASM_ARCH_OMAP_FPGA_H


13 
	#__ASM_ARCH_OMAP_FPGA_H


	)

15 
	#om≠1510_Âga_öô_úq
(Ë(0)

	)

17 
	#Âga_ªad
(
ªg
Ë
	`__øw_ªadb
‘eg)

	)

18 
	#Âga_wrôe
(
vÆ
, 
ªg
Ë
	`__øw_wrôeb
(vÆ,Ñeg)

	)

20 
	#H2P2_DBG_FPGA_BASE
 0xE8000000

	)

21 
	#H2P2_DBG_FPGA_SIZE
 
SZ_4K


	)

22 
	#H2P2_DBG_FPGA_START
 0x04000000

	)

24 
	#H2P2_DBG_FPGA_ETHR_START
 (
H2P2_DBG_FPGA_START
 + 0x300)

	)

25 
	#H2P2_DBG_FPGA_FPGA_REV
 (
H2P2_DBG_FPGA_BASE
 + 0x10)

	)

26 
	#H2P2_DBG_FPGA_BOARD_REV
 (
H2P2_DBG_FPGA_BASE
 + 0x12)

	)

27 
	#H2P2_DBG_FPGA_GPIO
 (
H2P2_DBG_FPGA_BASE
 + 0x14)

	)

28 
	#H2P2_DBG_FPGA_LEDS
 (
H2P2_DBG_FPGA_BASE
 + 0x16)

	)

29 
	#H2P2_DBG_FPGA_MISC_INPUTS
 (
H2P2_DBG_FPGA_BASE
 + 0x18)

	)

30 
	#H2P2_DBG_FPGA_LAN_STATUS
 (
H2P2_DBG_FPGA_BASE
 + 0x1A)

	)

31 
	#H2P2_DBG_FPGA_LAN_RESET
 (
H2P2_DBG_FPGA_BASE
 + 0x1C)

	)

33 
	sh2p2_dbg_Âga
 {

35 
u16
 
	msmc91x
[8];

37 
u16
 
	mÂga_ªv
;

38 
u16
 
	mbﬂrd_ªv
;

39 
u16
 
	mgpio_ouçuts
;

40 
u16
 
	mÀds
;

42 
u16
 
	mmisc_öputs
;

43 
u16
 
	mœn_°©us
;

44 
u16
 
	mœn_ª£t
;

45 
u16
 
	mª£rved0
;

47 
u16
 
	mps2_d©a
;

48 
u16
 
	mps2_˘æ
;

52 
	#H2P2_DBG_FPGA_LED_GREEN
 (1 << 15)

	)

53 
	#H2P2_DBG_FPGA_LED_AMBER
 (1 << 14)

	)

54 
	#H2P2_DBG_FPGA_LED_RED
 (1 << 13)

	)

55 
	#H2P2_DBG_FPGA_LED_BLUE
 (1 << 12)

	)

57 
	#H2P2_DBG_FPGA_LOAD_METER
 (1 << 0)

	)

58 
	#H2P2_DBG_FPGA_LOAD_METER_SIZE
 11

	)

59 
	#H2P2_DBG_FPGA_LOAD_METER_MASK
 ((1 << 
H2P2_DBG_FPGA_LOAD_METER_SIZE
Ë- 1)

	)

61 
	#H2P2_DBG_FPGA_P2_LED_TIMER
 (1 << 0)

	)

62 
	#H2P2_DBG_FPGA_P2_LED_IDLE
 (1 << 1)

	)

64 
	#OMAP1510_FPGA_BASE
 0xE8000000

	)

65 
	#OMAP1510_FPGA_SIZE
 
SZ_4K


	)

66 
	#OMAP1510_FPGA_START
 0x08000000

	)

68 
	#OMAP1510_FPGA_REV_LOW
 (
OMAP1510_FPGA_BASE
 + 0x0)

	)

69 
	#OMAP1510_FPGA_REV_HIGH
 (
OMAP1510_FPGA_BASE
 + 0x1)

	)

71 
	#OMAP1510_FPGA_LCD_PANEL_CONTROL
 (
OMAP1510_FPGA_BASE
 + 0x2)

	)

72 
	#OMAP1510_FPGA_LED_DIGIT
 (
OMAP1510_FPGA_BASE
 + 0x3)

	)

73 
	#INNOVATOR_FPGA_HID_SPI
 (
OMAP1510_FPGA_BASE
 + 0x4)

	)

74 
	#OMAP1510_FPGA_POWER
 (
OMAP1510_FPGA_BASE
 + 0x5)

	)

76 
	#OMAP1510_FPGA_ISR_LO
 (
OMAP1510_FPGA_BASE
 + 0x6)

	)

77 
	#OMAP1510_FPGA_ISR_HI
 (
OMAP1510_FPGA_BASE
 + 0x7)

	)

79 
	#OMAP1510_FPGA_IMR_LO
 (
OMAP1510_FPGA_BASE
 + 0x8)

	)

80 
	#OMAP1510_FPGA_IMR_HI
 (
OMAP1510_FPGA_BASE
 + 0x9)

	)

82 
	#OMAP1510_FPGA_HOST_RESET
 (
OMAP1510_FPGA_BASE
 + 0xa)

	)

83 
	#OMAP1510_FPGA_RST
 (
OMAP1510_FPGA_BASE
 + 0xb)

	)

85 
	#OMAP1510_FPGA_AUDIO
 (
OMAP1510_FPGA_BASE
 + 0xc)

	)

86 
	#OMAP1510_FPGA_DIP
 (
OMAP1510_FPGA_BASE
 + 0xe)

	)

87 
	#OMAP1510_FPGA_FPGA_IO
 (
OMAP1510_FPGA_BASE
 + 0xf)

	)

88 
	#OMAP1510_FPGA_UART1
 (
OMAP1510_FPGA_BASE
 + 0x14)

	)

89 
	#OMAP1510_FPGA_UART2
 (
OMAP1510_FPGA_BASE
 + 0x15)

	)

90 
	#OMAP1510_FPGA_OMAP1510_STATUS
 (
OMAP1510_FPGA_BASE
 + 0x16)

	)

91 
	#OMAP1510_FPGA_BOARD_REV
 (
OMAP1510_FPGA_BASE
 + 0x18)

	)

92 
	#OMAP1510P1_PPT_DATA
 (
OMAP1510_FPGA_BASE
 + 0x100)

	)

93 
	#OMAP1510P1_PPT_STATUS
 (
OMAP1510_FPGA_BASE
 + 0x101)

	)

94 
	#OMAP1510P1_PPT_CONTROL
 (
OMAP1510_FPGA_BASE
 + 0x102)

	)

96 
	#OMAP1510_FPGA_TOUCHSCREEN
 (
OMAP1510_FPGA_BASE
 + 0x204)

	)

98 
	#INNOVATOR_FPGA_INFO
 (
OMAP1510_FPGA_BASE
 + 0x205)

	)

99 
	#INNOVATOR_FPGA_LCD_BRIGHT_LO
 (
OMAP1510_FPGA_BASE
 + 0x206)

	)

100 
	#INNOVATOR_FPGA_LCD_BRIGHT_HI
 (
OMAP1510_FPGA_BASE
 + 0x207)

	)

101 
	#INNOVATOR_FPGA_LED_GRN_LO
 (
OMAP1510_FPGA_BASE
 + 0x208)

	)

102 
	#INNOVATOR_FPGA_LED_GRN_HI
 (
OMAP1510_FPGA_BASE
 + 0x209)

	)

103 
	#INNOVATOR_FPGA_LED_RED_LO
 (
OMAP1510_FPGA_BASE
 + 0x20a)

	)

104 
	#INNOVATOR_FPGA_LED_RED_HI
 (
OMAP1510_FPGA_BASE
 + 0x20b)

	)

105 
	#INNOVATOR_FPGA_CAM_USB_CONTROL
 (
OMAP1510_FPGA_BASE
 + 0x20c)

	)

106 
	#INNOVATOR_FPGA_EXP_CONTROL
 (
OMAP1510_FPGA_BASE
 + 0x20d)

	)

107 
	#INNOVATOR_FPGA_ISR2
 (
OMAP1510_FPGA_BASE
 + 0x20e)

	)

108 
	#INNOVATOR_FPGA_IMR2
 (
OMAP1510_FPGA_BASE
 + 0x210)

	)

110 
	#OMAP1510_FPGA_ETHR_START
 (
OMAP1510_FPGA_START
 + 0x300)

	)

112 
	#OMAP1510_FPGA_RESET_VALUE
 0x42

	)

114 
	#OMAP1510_FPGA_PCR_IF_PD0
 (1 << 7)

	)

115 
	#OMAP1510_FPGA_PCR_COM2_EN
 (1 << 6)

	)

116 
	#OMAP1510_FPGA_PCR_COM1_EN
 (1 << 5)

	)

117 
	#OMAP1510_FPGA_PCR_EXP_PD0
 (1 << 4)

	)

118 
	#OMAP1510_FPGA_PCR_EXP_PD1
 (1 << 3)

	)

119 
	#OMAP1510_FPGA_PCR_48MHZ_CLK
 (1 << 2)

	)

120 
	#OMAP1510_FPGA_PCR_4MHZ_CLK
 (1 << 1)

	)

121 
	#OMAP1510_FPGA_PCR_RSRVD_BIT0
 (1 << 0)

	)

123 
	#OMAP1510_FPGA_HID_SCLK
 (1<<0)

	)

124 
	#OMAP1510_FPGA_HID_MOSI
 (1<<1)

	)

125 
	#OMAP1510_FPGA_HID_nSS
 (1<<2)

	)

126 
	#OMAP1510_FPGA_HID_nHSUS
 (1<<3)

	)

127 
	#OMAP1510_FPGA_HID_MISO
 (1<<4)

	)

128 
	#OMAP1510_FPGA_HID_ATN
 (1<<5)

	)

129 
	#OMAP1510_FPGA_HID_r§vd
 (1<<6)

	)

130 
	#OMAP1510_FPGA_HID_RESETn
 (1<<7)

	)

132 
	#OMAP1510_INT_FPGA
 (
IH_GPIO_BASE
 + 13)

	)

134 
	#OMAP1510_IH_FPGA_BASE
 
IH_BOARD_BASE


	)

135 
	#OMAP1510_INT_FPGA_ATN
 (
OMAP1510_IH_FPGA_BASE
 + 0)

	)

136 
	#OMAP1510_INT_FPGA_ACK
 (
OMAP1510_IH_FPGA_BASE
 + 1)

	)

137 
	#OMAP1510_INT_FPGA2
 (
OMAP1510_IH_FPGA_BASE
 + 2)

	)

138 
	#OMAP1510_INT_FPGA3
 (
OMAP1510_IH_FPGA_BASE
 + 3)

	)

139 
	#OMAP1510_INT_FPGA4
 (
OMAP1510_IH_FPGA_BASE
 + 4)

	)

140 
	#OMAP1510_INT_FPGA5
 (
OMAP1510_IH_FPGA_BASE
 + 5)

	)

141 
	#OMAP1510_INT_FPGA6
 (
OMAP1510_IH_FPGA_BASE
 + 6)

	)

142 
	#OMAP1510_INT_FPGA7
 (
OMAP1510_IH_FPGA_BASE
 + 7)

	)

143 
	#OMAP1510_INT_FPGA8
 (
OMAP1510_IH_FPGA_BASE
 + 8)

	)

144 
	#OMAP1510_INT_FPGA9
 (
OMAP1510_IH_FPGA_BASE
 + 9)

	)

145 
	#OMAP1510_INT_FPGA10
 (
OMAP1510_IH_FPGA_BASE
 + 10)

	)

146 
	#OMAP1510_INT_FPGA11
 (
OMAP1510_IH_FPGA_BASE
 + 11)

	)

147 
	#OMAP1510_INT_FPGA12
 (
OMAP1510_IH_FPGA_BASE
 + 12)

	)

148 
	#OMAP1510_INT_ETHER
 (
OMAP1510_IH_FPGA_BASE
 + 13)

	)

149 
	#OMAP1510_INT_FPGAUART1
 (
OMAP1510_IH_FPGA_BASE
 + 14)

	)

150 
	#OMAP1510_INT_FPGAUART2
 (
OMAP1510_IH_FPGA_BASE
 + 15)

	)

151 
	#OMAP1510_INT_FPGA_TS
 (
OMAP1510_IH_FPGA_BASE
 + 16)

	)

152 
	#OMAP1510_INT_FPGA17
 (
OMAP1510_IH_FPGA_BASE
 + 17)

	)

153 
	#OMAP1510_INT_FPGA_CAM
 (
OMAP1510_IH_FPGA_BASE
 + 18)

	)

154 
	#OMAP1510_INT_FPGA_RTC_A
 (
OMAP1510_IH_FPGA_BASE
 + 19)

	)

155 
	#OMAP1510_INT_FPGA_RTC_B
 (
OMAP1510_IH_FPGA_BASE
 + 20)

	)

156 
	#OMAP1510_INT_FPGA_CD
 (
OMAP1510_IH_FPGA_BASE
 + 21)

	)

157 
	#OMAP1510_INT_FPGA22
 (
OMAP1510_IH_FPGA_BASE
 + 22)

	)

158 
	#OMAP1510_INT_FPGA23
 (
OMAP1510_IH_FPGA_BASE
 + 23)

	)

	@asm/arch/gpio-switch.h

12 #i‚de‡
__ASM_ARCH_OMAP_GPIO_SWITCH_H


13 
	#__ASM_ARCH_OMAP_GPIO_SWITCH_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#OMAP_GPIO_SWITCH_TYPE_COVER
 0x0000

	)

18 
	#OMAP_GPIO_SWITCH_TYPE_CONNECTION
 0x0001

	)

19 
	#OMAP_GPIO_SWITCH_TYPE_ACTIVITY
 0x0002

	)

20 
	#OMAP_GPIO_SWITCH_FLAG_INVERTED
 0x0001

	)

21 
	#OMAP_GPIO_SWITCH_FLAG_OUTPUT
 0x0002

	)

23 
	som≠_gpio_swôch
 {

24 c⁄° *
	m«me
;

25 
s16
 
	mgpio
;

26 
	mÊags
:4;

27 
	mty≥
:4;

29 
u16
 
	mdeboun˚_risög
;

31 
u16
 
	mdeboun˚_ÁŒög
;

33 (* 
	mnŸify
)(*
	md©a
, 
	m°©e
);

34 *
	mnŸify_d©a
;

	@asm/arch/gpio.h

12 #i‚de‡
__ASM_ARCH_OMAP_GPIO_H


13 
	#__ASM_ARCH_OMAP_GPIO_H


	)

15 
	~<asm/h¨dw¨e.h
>

16 
	~<asm/¨ch/úqs.h
>

17 
	~<asm/io.h
>

19 
	#OMAP_MPUIO_BASE
 (
__iomem
 *)0xfffb5000

	)

21 
	#OMAP_MPUIO_INPUT_LATCH
 0x00

	)

22 
	#OMAP_MPUIO_OUTPUT
 0x04

	)

23 
	#OMAP_MPUIO_IO_CNTL
 0x08

	)

24 
	#OMAP_MPUIO_KBR_LATCH
 0x10

	)

25 
	#OMAP_MPUIO_KBC
 0x14

	)

26 
	#OMAP_MPUIO_GPIO_EVENT_MODE
 0x18

	)

27 
	#OMAP_MPUIO_GPIO_INT_EDGE
 0x1c

	)

28 
	#OMAP_MPUIO_KBD_INT
 0x20

	)

29 
	#OMAP_MPUIO_GPIO_INT
 0x24

	)

30 
	#OMAP_MPUIO_KBD_MASKIT
 0x28

	)

31 
	#OMAP_MPUIO_GPIO_MASKIT
 0x2c

	)

32 
	#OMAP_MPUIO_GPIO_DEBOUNCING
 0x30

	)

33 
	#OMAP_MPUIO_LATCH
 0x34

	)

35 
	#OMAP_MPUIO
(
ƒ
Ë(
OMAP_MAX_GPIO_LINES
 + (ƒ))

	)

36 
	#OMAP_GPIO_IS_MPUIO
(
ƒ
Ë(“rË>
OMAP_MAX_GPIO_LINES
)

	)

38 
	#OMAP_GPIO_IRQ
(
ƒ
Ë(
	`OMAP_GPIO_IS_MPUIO
“rË? 
IH_MPUIO_BASE
 + (“rË& 0x0fË: 
IH_GPIO_BASE
 + (ƒ))

	)

40 
	som≠_machöe_gpio_b™k
 {

41 
	m°¨t
;

42 
	míd
;

44 (*
	m£t_gpio_dúe˘i⁄
)(
	mgpio
, 
	mis_öput
);

45 (*
	m£t_gpio_d©aout
)(
	mgpio
, 
	míabÀ
);

46 (*
	mgë_gpio_d©aö
)(
	mgpio
);

	@asm/arch/hardware.h

12 #i‚de‡
__ASM_ARCH_OMAP_HARDWARE_H


13 
	#__ASM_ARCH_OMAP_HARDWARE_H


	)

15 
	~<asm/sizes.h
>

16 #i‚de‡
__ASSEMBLER__


17 
	~<asm/ty≥s.h
>

18 
	~<asm/¨ch/˝u.h
>

20 
	~<asm/¨ch/io.h
>

21 
	~<asm/¨ch/£rül.h
>

23 
	#OMAP_MPU_TIMER1_BASE
 (0xff„c500)

	)

24 
	#OMAP_MPU_TIMER2_BASE
 (0xff„c600)

	)

25 
	#OMAP_MPU_TIMER3_BASE
 (0xff„c700)

	)

26 
	#MPU_TIMER_FREE
 (1 << 6)

	)

27 
	#MPU_TIMER_CLOCK_ENABLE
 (1 << 5)

	)

28 
	#MPU_TIMER_AR
 (1 << 1)

	)

29 
	#MPU_TIMER_ST
 (1 << 0)

	)

31 
	#CLKGEN_REG_BASE
 (0xff„˚00)

	)

32 
	#ARM_CKCTL
 (
CLKGEN_REG_BASE
 + 0x0)

	)

33 
	#ARM_IDLECT1
 (
CLKGEN_REG_BASE
 + 0x4)

	)

34 
	#ARM_IDLECT2
 (
CLKGEN_REG_BASE
 + 0x8)

	)

35 
	#ARM_EWUPCT
 (
CLKGEN_REG_BASE
 + 0xC)

	)

36 
	#ARM_RSTCT1
 (
CLKGEN_REG_BASE
 + 0x10)

	)

37 
	#ARM_RSTCT2
 (
CLKGEN_REG_BASE
 + 0x14)

	)

38 
	#ARM_SYSST
 (
CLKGEN_REG_BASE
 + 0x18)

	)

39 
	#ARM_IDLECT3
 (
CLKGEN_REG_BASE
 + 0x24)

	)

41 
	#CK_RATEF
 1

	)

42 
	#CK_IDLEF
 2

	)

43 
	#CK_ENABLEF
 4

	)

44 
	#CK_SELECTF
 8

	)

45 
	#SETARM_IDLE_SHIFT


	)

47 
	#DPLL_CTL
 (0xff„cf00)

	)

49 
	#DSP_CONFIG_REG_BASE
 (0xe1008000)

	)

50 
	#DSP_CKCTL
 (
DSP_CONFIG_REG_BASE
 + 0x0)

	)

51 
	#DSP_IDLECT1
 (
DSP_CONFIG_REG_BASE
 + 0x4)

	)

52 
	#DSP_IDLECT2
 (
DSP_CONFIG_REG_BASE
 + 0x8)

	)

53 
	#DSP_RSTCT2
 (
DSP_CONFIG_REG_BASE
 + 0x14)

	)

55 
	#ULPD_REG_BASE
 (0xff„0800)

	)

56 
	#ULPD_IT_STATUS
 (
ULPD_REG_BASE
 + 0x14)

	)

57 
	#ULPD_SETUP_ANALOG_CELL_3
 (
ULPD_REG_BASE
 + 0x24)

	)

58 
	#ULPD_CLOCK_CTRL
 (
ULPD_REG_BASE
 + 0x30)

	)

59 
	#DIS_USB_PVCI_CLK
 (1 << 5)

	)

60 
	#USB_MCLK_EN
 (1 << 4)

	)

61 
	#ULPD_SOFT_REQ
 (
ULPD_REG_BASE
 + 0x34)

	)

62 
	#SOFT_UDC_REQ
 (1 << 4)

	)

63 
	#SOFT_USB_CLK_REQ
 (1 << 3)

	)

64 
	#SOFT_DPLL_REQ
 (1 << 0)

	)

65 
	#ULPD_DPLL_CTRL
 (
ULPD_REG_BASE
 + 0x3c)

	)

66 
	#ULPD_STATUS_REQ
 (
ULPD_REG_BASE
 + 0x40)

	)

67 
	#ULPD_APLL_CTRL
 (
ULPD_REG_BASE
 + 0x4c)

	)

68 
	#ULPD_POWER_CTRL
 (
ULPD_REG_BASE
 + 0x50)

	)

69 
	#ULPD_SOFT_DISABLE_REQ_REG
 (
ULPD_REG_BASE
 + 0x68)

	)

70 
	#DIS_MMC2_DPLL_REQ
 (1 << 11)

	)

71 
	#DIS_MMC1_DPLL_REQ
 (1 << 10)

	)

72 
	#DIS_UART3_DPLL_REQ
 (1 << 9)

	)

73 
	#DIS_UART2_DPLL_REQ
 (1 << 8)

	)

74 
	#DIS_UART1_DPLL_REQ
 (1 << 7)

	)

75 
	#DIS_USB_HOST_DPLL_REQ
 (1 << 6)

	)

76 
	#ULPD_SDW_CLK_DIV_CTRL_SEL
 (
ULPD_REG_BASE
 + 0x74)

	)

77 
	#ULPD_CAM_CLK_CTRL
 (
ULPD_REG_BASE
 + 0x7c)

	)

79 
	#OMAP_MPU_WATCHDOG_BASE
 (0xff„c800)

	)

80 
	#OMAP_WDT_TIMER
 (
OMAP_MPU_WATCHDOG_BASE
 + 0x0)

	)

81 
	#OMAP_WDT_LOAD_TIM
 (
OMAP_MPU_WATCHDOG_BASE
 + 0x4)

	)

82 
	#OMAP_WDT_READ_TIM
 (
OMAP_MPU_WATCHDOG_BASE
 + 0x4)

	)

83 
	#OMAP_WDT_TIMER_MODE
 (
OMAP_MPU_WATCHDOG_BASE
 + 0x8)

	)

85 
	#MOD_CONF_CTRL_0
 0xff„1080

	)

86 
	#MOD_CONF_CTRL_1
 0xff„1110

	)

88 
	#FUNC_MUX_CTRL_0
 0xff„1000

	)

89 
	#FUNC_MUX_CTRL_1
 0xff„1004

	)

90 
	#FUNC_MUX_CTRL_2
 0xff„1008

	)

91 
	#COMP_MODE_CTRL_0
 0xff„100c

	)

92 
	#FUNC_MUX_CTRL_3
 0xff„1010

	)

93 
	#FUNC_MUX_CTRL_4
 0xff„1014

	)

94 
	#FUNC_MUX_CTRL_5
 0xff„1018

	)

95 
	#FUNC_MUX_CTRL_6
 0xff„101C

	)

96 
	#FUNC_MUX_CTRL_7
 0xff„1020

	)

97 
	#FUNC_MUX_CTRL_8
 0xff„1024

	)

98 
	#FUNC_MUX_CTRL_9
 0xff„1028

	)

99 
	#FUNC_MUX_CTRL_A
 0xff„102C

	)

100 
	#FUNC_MUX_CTRL_B
 0xff„1030

	)

101 
	#FUNC_MUX_CTRL_C
 0xff„1034

	)

102 
	#FUNC_MUX_CTRL_D
 0xff„1038

	)

103 
	#PULL_DWN_CTRL_0
 0xff„1040

	)

104 
	#PULL_DWN_CTRL_1
 0xff„1044

	)

105 
	#PULL_DWN_CTRL_2
 0xff„1048

	)

106 
	#PULL_DWN_CTRL_3
 0xff„104c

	)

107 
	#PULL_DWN_CTRL_4
 0xff„10ac

	)

109 
	#FUNC_MUX_CTRL_E
 0xff„1090

	)

110 
	#FUNC_MUX_CTRL_F
 0xff„1094

	)

111 
	#FUNC_MUX_CTRL_10
 0xff„1098

	)

112 
	#FUNC_MUX_CTRL_11
 0xff„109c

	)

113 
	#FUNC_MUX_CTRL_12
 0xff„10a0

	)

114 
	#PU_PD_SEL_0
 0xff„10b4

	)

115 
	#PU_PD_SEL_1
 0xff„10b8

	)

116 
	#PU_PD_SEL_2
 0xff„10bc

	)

117 
	#PU_PD_SEL_3
 0xff„10c0

	)

118 
	#PU_PD_SEL_4
 0xff„10c4

	)

120 
	#OMAP_TIMER32K_BASE
 0xFFFBC400

	)

122 
	#TIPB_PUBLIC_CNTL_BASE
 0xff„d300

	)

123 
	#MPU_PUBLIC_TIPB_CNTL
 (
TIPB_PUBLIC_CNTL_BASE
 + 0x8)

	)

124 
	#TIPB_PRIVATE_CNTL_BASE
 0xff„ˇ00

	)

125 
	#MPU_PRIVATE_TIPB_CNTL
 (
TIPB_PRIVATE_CNTL_BASE
 + 0x8)

	)

127 
	#MPUI_BASE
 (0xff„c900)

	)

128 
	#MPUI_CTRL
 (
MPUI_BASE
 + 0x0)

	)

129 
	#MPUI_DEBUG_ADDR
 (
MPUI_BASE
 + 0x4)

	)

130 
	#MPUI_DEBUG_DATA
 (
MPUI_BASE
 + 0x8)

	)

131 
	#MPUI_DEBUG_FLAG
 (
MPUI_BASE
 + 0xc)

	)

132 
	#MPUI_STATUS_REG
 (
MPUI_BASE
 + 0x10)

	)

133 
	#MPUI_DSP_STATUS
 (
MPUI_BASE
 + 0x14)

	)

134 
	#MPUI_DSP_BOOT_CONFIG
 (
MPUI_BASE
 + 0x18)

	)

135 
	#MPUI_DSP_API_CONFIG
 (
MPUI_BASE
 + 0x1c)

	)

137 
	#OMAP_LPG1_BASE
 0xfffbd000

	)

138 
	#OMAP_LPG2_BASE
 0xfffbd800

	)

139 
	#OMAP_LPG1_LCR
 (
OMAP_LPG1_BASE
 + 0x00)

	)

140 
	#OMAP_LPG1_PMR
 (
OMAP_LPG1_BASE
 + 0x04)

	)

141 
	#OMAP_LPG2_LCR
 (
OMAP_LPG2_BASE
 + 0x00)

	)

142 
	#OMAP_LPG2_PMR
 (
OMAP_LPG2_BASE
 + 0x04)

	)

144 
	#OMAP_PWL_BASE
 0xfffb5800

	)

145 
	#OMAP_PWL_ENABLE
 (
OMAP_PWL_BASE
 + 0x00)

	)

146 
	#OMAP_PWL_CLK_ENABLE
 (
OMAP_PWL_BASE
 + 0x04)

	)

148 
	~"om≠730.h
"

149 
	~"om≠1510.h
"

150 
	~"om≠24xx.h
"

151 
	~"om≠16xx.h
"

153 #i‚de‡
__ASSEMBLER__


	@asm/arch/io.h

12 #i‚de‡
__ASM_ARM_ARCH_IO_H


13 
	#__ASM_ARM_ARCH_IO_H


	)

15 
	~<asm/h¨dw¨e.h
>

17 
	#IO_SPACE_LIMIT
 0xffffffff

	)

19 
	#__io
(
a
Ë((
__iomem
 *)(
PCIO_BASE
 + (a)))

	)

20 
	#__mem_pci
(
a
Ë◊)

	)

22 
	#PCIO_BASE
 0

	)

24 #i‚de‡
__ASSEMBLER__


26 
	#om≠_ªadb
(
a
Ë(*(vﬁ©ûê*)
	`IO_ADDRESS
◊))

	)

27 
	#om≠_ªadw
(
a
Ë(*(vﬁ©ûê*)
	`IO_ADDRESS
◊))

	)

28 
	#om≠_ªadl
(
a
Ë(*(vﬁ©ûê*)
	`IO_ADDRESS
◊))

	)

30 
	#om≠_wrôeb
(
v
,
a
Ë(*(vﬁ©ûê*)
	`IO_ADDRESS
◊Ë(v))

	)

31 
	#om≠_wrôew
(
v
,
a
Ë(*(vﬁ©ûê*)
	`IO_ADDRESS
◊Ë(v))

	)

32 
	#om≠_wrôñ
(
v
,
a
Ë(*(vﬁ©ûê*)
	`IO_ADDRESS
◊Ë(v))

	)

34 °ru˘ { vﬁ©ûê
u16
 
	moff£t
[256]; } 
	t__ªgba£16
;

35 
	#__REGV16
(
vaddr
Ë((
__ªgba£16
 *)((vaddr)&~0xff)Ë->
off£t
[((vaddr)&0xff)>>1]

	)

36 
	#__REG16
(
∑ddr
Ë
	`__REGV16
(
	`io_p2v
’addr))

	)

38 °ru˘ { vﬁ©ûê
u8
 
	moff£t
[4096]; } 
	t__ªgba£8
;

39 
	#__REGV8
(
vaddr
Ë((
__ªgba£8
 *)((vaddr)&~4095)Ë->
off£t
[((vaddr)&4095)>>0]

	)

40 
	#__REG8
(
∑ddr
Ë
	`__REGV8
(
	`io_p2v
’addr))

	)

42 °ru˘ { vﬁ©ûê
u32
 
	moff£t
[4096]; } 
	t__ªgba£32
;

43 
	#__REGV32
(
vaddr
Ë((
__ªgba£32
 *)((vaddr)&~4095)Ë->
off£t
[((vaddr)&4095)>>2]

	)

44 
	#__REG32
(
∑ddr
Ë
	`__REGV32
(
	`io_p2v
’addr))

	)

48 
	#__REG8
(
∑ddr
Ë
	`io_p2v
’addr)

	)

49 
	#__REG16
(
∑ddr
Ë
	`io_p2v
’addr)

	)

50 
	#__REG32
(
∑ddr
Ë
	`io_p2v
’addr)

	)

	@asm/arch/irqs.h

12 #i‚de‡
__ASM_ARCH_OMAP15XX_IRQS_H


13 
	#__ASM_ARCH_OMAP15XX_IRQS_H


	)

15 
	#INT_CAMERA
 1

	)

16 
	#INT_FIQ
 3

	)

17 
	#INT_RTDX
 6

	)

18 
	#INT_DSP_MMU_ABORT
 7

	)

19 
	#INT_HOST
 8

	)

20 
	#INT_ABORT
 9

	)

21 
	#INT_DSP_MAILBOX1
 10

	)

22 
	#INT_DSP_MAILBOX2
 11

	)

23 
	#INT_BRIDGE_PRIV
 13

	)

24 
	#INT_GPIO_BANK1
 14

	)

25 
	#INT_UART3
 15

	)

26 
	#INT_TIMER3
 16

	)

27 
	#INT_DMA_CH0_6
 19

	)

28 
	#INT_DMA_CH1_7
 20

	)

29 
	#INT_DMA_CH2_8
 21

	)

30 
	#INT_DMA_CH3
 22

	)

31 
	#INT_DMA_CH4
 23

	)

32 
	#INT_DMA_CH5
 24

	)

33 
	#INT_DMA_LCD
 25

	)

34 
	#INT_TIMER1
 26

	)

35 
	#INT_WD_TIMER
 27

	)

36 
	#INT_BRIDGE_PUB
 28

	)

37 
	#INT_TIMER2
 30

	)

38 
	#INT_LCD_CTRL
 31

	)

40 
	#INT_1510_IH2_IRQ
 0

	)

41 
	#INT_1510_RES2
 2

	)

42 
	#INT_1510_SPI_TX
 4

	)

43 
	#INT_1510_SPI_RX
 5

	)

44 
	#INT_1510_RES12
 12

	)

45 
	#INT_1510_LB_MMU
 17

	)

46 
	#INT_1510_RES18
 18

	)

47 
	#INT_1510_LOCAL_BUS
 29

	)

49 
	#INT_1610_IH2_IRQ
 0

	)

50 
	#INT_1610_IH2_FIQ
 2

	)

51 
	#INT_1610_McBSP2_TX
 4

	)

52 
	#INT_1610_McBSP2_RX
 5

	)

53 
	#INT_1610_LCD_LINE
 12

	)

54 
	#INT_1610_GPTIMER1
 17

	)

55 
	#INT_1610_GPTIMER2
 18

	)

56 
	#INT_1610_SSR_FIFO_0
 29

	)

58 
	#INT_730_IH2_FIQ
 0

	)

59 
	#INT_730_IH2_IRQ
 1

	)

60 
	#INT_730_USB_NON_ISO
 2

	)

61 
	#INT_730_USB_ISO
 3

	)

62 
	#INT_730_ICR
 4

	)

63 
	#INT_730_EAC
 5

	)

64 
	#INT_730_GPIO_BANK1
 6

	)

65 
	#INT_730_GPIO_BANK2
 7

	)

66 
	#INT_730_GPIO_BANK3
 8

	)

67 
	#INT_730_McBSP2TX
 10

	)

68 
	#INT_730_McBSP2RX
 11

	)

69 
	#INT_730_McBSP2RX_OVF
 12

	)

70 
	#INT_730_LCD_LINE
 14

	)

71 
	#INT_730_GSM_PROTECT
 15

	)

72 
	#INT_730_TIMER3
 16

	)

73 
	#INT_730_GPIO_BANK5
 17

	)

74 
	#INT_730_GPIO_BANK6
 18

	)

75 
	#INT_730_SPGIO_WR
 29

	)

77 
	#IH2_BASE
 32

	)

79 
	#INT_KEYBOARD
 (1 + 
IH2_BASE
)

	)

80 
	#INT_uWúeTX
 (2 + 
IH2_BASE
)

	)

81 
	#INT_uWúeRX
 (3 + 
IH2_BASE
)

	)

82 
	#INT_I2C
 (4 + 
IH2_BASE
)

	)

83 
	#INT_MPUIO
 (5 + 
IH2_BASE
)

	)

84 
	#INT_USB_HHC_1
 (6 + 
IH2_BASE
)

	)

85 
	#INT_McBSP3TX
 (10 + 
IH2_BASE
)

	)

86 
	#INT_McBSP3RX
 (11 + 
IH2_BASE
)

	)

87 
	#INT_McBSP1TX
 (12 + 
IH2_BASE
)

	)

88 
	#INT_McBSP1RX
 (13 + 
IH2_BASE
)

	)

89 
	#INT_UART2
 (14 + 
IH2_BASE
)

	)

90 
	#INT_UART1
 (15 + 
IH2_BASE
)

	)

91 
	#INT_BT_MCSI1TX
 (16 + 
IH2_BASE
)

	)

92 
	#INT_BT_MCSI1RX
 (17 + 
IH2_BASE
)

	)

93 
	#INT_USB_W2FC
 (20 + 
IH2_BASE
)

	)

94 
	#INT_1WIRE
 (21 + 
IH2_BASE
)

	)

95 
	#INT_OS_TIMER
 (22 + 
IH2_BASE
)

	)

96 
	#INT_MMC
 (23 + 
IH2_BASE
)

	)

97 
	#INT_GAUGE_32K
 (24 + 
IH2_BASE
)

	)

98 
	#INT_RTC_TIMER
 (25 + 
IH2_BASE
)

	)

99 
	#INT_RTC_ALARM
 (26 + 
IH2_BASE
)

	)

100 
	#INT_MEM_STICK
 (27 + 
IH2_BASE
)

	)

101 
	#INT_DSP_MMU
 (28 + 
IH2_BASE
)

	)

103 
	#INT_1510_COM_SPI_RO
 (31 + 
IH2_BASE
)

	)

105 
	#INT_1610_FAC
 (0 + 
IH2_BASE
)

	)

106 
	#INT_1610_USB_HHC_2
 (7 + 
IH2_BASE
)

	)

107 
	#INT_1610_USB_OTG
 (8 + 
IH2_BASE
)

	)

108 
	#INT_1610_SoSSI
 (9 + 
IH2_BASE
)

	)

109 
	#INT_1610_SoSSI_MATCH
 (19 + 
IH2_BASE
)

	)

110 
	#INT_1610_McBSP2RX_OF
 (31 + 
IH2_BASE
)

	)

111 
	#INT_1610_STI
 (32 + 
IH2_BASE
)

	)

112 
	#INT_1610_STI_WAKEUP
 (33 + 
IH2_BASE
)

	)

113 
	#INT_1610_GPTIMER3
 (34 + 
IH2_BASE
)

	)

114 
	#INT_1610_GPTIMER4
 (35 + 
IH2_BASE
)

	)

115 
	#INT_1610_GPTIMER5
 (36 + 
IH2_BASE
)

	)

116 
	#INT_1610_GPTIMER6
 (37 + 
IH2_BASE
)

	)

117 
	#INT_1610_GPTIMER7
 (38 + 
IH2_BASE
)

	)

118 
	#INT_1610_GPTIMER8
 (39 + 
IH2_BASE
)

	)

119 
	#INT_1610_GPIO_BANK2
 (40 + 
IH2_BASE
)

	)

120 
	#INT_1610_GPIO_BANK3
 (41 + 
IH2_BASE
)

	)

121 
	#INT_1610_MMC2
 (42 + 
IH2_BASE
)

	)

122 
	#INT_1610_CF
 (43 + 
IH2_BASE
)

	)

123 
	#INT_1610_WAKE_UP_REQ
 (46 + 
IH2_BASE
)

	)

124 
	#INT_1610_GPIO_BANK4
 (48 + 
IH2_BASE
)

	)

125 
	#INT_1610_SPI
 (49 + 
IH2_BASE
)

	)

126 
	#INT_1610_DMA_CH6
 (53 + 
IH2_BASE
)

	)

127 
	#INT_1610_DMA_CH7
 (54 + 
IH2_BASE
)

	)

128 
	#INT_1610_DMA_CH8
 (55 + 
IH2_BASE
)

	)

129 
	#INT_1610_DMA_CH9
 (56 + 
IH2_BASE
)

	)

130 
	#INT_1610_DMA_CH10
 (57 + 
IH2_BASE
)

	)

131 
	#INT_1610_DMA_CH11
 (58 + 
IH2_BASE
)

	)

132 
	#INT_1610_DMA_CH12
 (59 + 
IH2_BASE
)

	)

133 
	#INT_1610_DMA_CH13
 (60 + 
IH2_BASE
)

	)

134 
	#INT_1610_DMA_CH14
 (61 + 
IH2_BASE
)

	)

135 
	#INT_1610_DMA_CH15
 (62 + 
IH2_BASE
)

	)

136 
	#INT_1610_NAND
 (63 + 
IH2_BASE
)

	)

138 
	#INT_730_HW_ERRORS
 (0 + 
IH2_BASE
)

	)

139 
	#INT_730_NFIQ_PWR_FAIL
 (1 + 
IH2_BASE
)

	)

140 
	#INT_730_CFCD
 (2 + 
IH2_BASE
)

	)

141 
	#INT_730_CFIREQ
 (3 + 
IH2_BASE
)

	)

142 
	#INT_730_I2C
 (4 + 
IH2_BASE
)

	)

143 
	#INT_730_PCC
 (5 + 
IH2_BASE
)

	)

144 
	#INT_730_MPU_EXT_NIRQ
 (6 + 
IH2_BASE
)

	)

145 
	#INT_730_SPI_100K_1
 (7 + 
IH2_BASE
)

	)

146 
	#INT_730_SYREN_SPI
 (8 + 
IH2_BASE
)

	)

147 
	#INT_730_VLYNQ
 (9 + 
IH2_BASE
)

	)

148 
	#INT_730_GPIO_BANK4
 (10 + 
IH2_BASE
)

	)

149 
	#INT_730_McBSP1TX
 (11 + 
IH2_BASE
)

	)

150 
	#INT_730_McBSP1RX
 (12 + 
IH2_BASE
)

	)

151 
	#INT_730_McBSP1RX_OF
 (13 + 
IH2_BASE
)

	)

152 
	#INT_730_UART_MODEM_IRDA_2
 (14 + 
IH2_BASE
)

	)

153 
	#INT_730_UART_MODEM_1
 (15 + 
IH2_BASE
)

	)

154 
	#INT_730_MCSI
 (16 + 
IH2_BASE
)

	)

155 
	#INT_730_uWúeTX
 (17 + 
IH2_BASE
)

	)

156 
	#INT_730_uWúeRX
 (18 + 
IH2_BASE
)

	)

157 
	#INT_730_SMC_CD
 (19 + 
IH2_BASE
)

	)

158 
	#INT_730_SMC_IREQ
 (20 + 
IH2_BASE
)

	)

159 
	#INT_730_HDQ_1WIRE
 (21 + 
IH2_BASE
)

	)

160 
	#INT_730_TIMER32K
 (22 + 
IH2_BASE
)

	)

161 
	#INT_730_MMC_SDIO
 (23 + 
IH2_BASE
)

	)

162 
	#INT_730_UPLD
 (24 + 
IH2_BASE
)

	)

163 
	#INT_730_USB_HHC_1
 (27 + 
IH2_BASE
)

	)

164 
	#INT_730_USB_HHC_2
 (28 + 
IH2_BASE
)

	)

165 
	#INT_730_USB_GENI
 (29 + 
IH2_BASE
)

	)

166 
	#INT_730_USB_OTG
 (30 + 
IH2_BASE
)

	)

167 
	#INT_730_CAMERA_IF
 (31 + 
IH2_BASE
)

	)

168 
	#INT_730_RNG
 (32 + 
IH2_BASE
)

	)

169 
	#INT_730_DUAL_MODE_TIMER
 (33 + 
IH2_BASE
)

	)

170 
	#INT_730_DBB_RF_EN
 (34 + 
IH2_BASE
)

	)

171 
	#INT_730_MPUIO_KEYPAD
 (35 + 
IH2_BASE
)

	)

172 
	#INT_730_SHA1_MD5
 (36 + 
IH2_BASE
)

	)

173 
	#INT_730_SPI_100K_2
 (37 + 
IH2_BASE
)

	)

174 
	#INT_730_RNG_IDLE
 (38 + 
IH2_BASE
)

	)

175 
	#INT_730_MPUIO
 (39 + 
IH2_BASE
)

	)

176 
	#INT_730_LLPC_LCD_CTRL_CAN_BE_OFF
 (40 + 
IH2_BASE
)

	)

177 
	#INT_730_LLPC_OE_FALLING
 (41 + 
IH2_BASE
)

	)

178 
	#INT_730_LLPC_OE_RISING
 (42 + 
IH2_BASE
)

	)

179 
	#INT_730_LLPC_VSYNC
 (43 + 
IH2_BASE
)

	)

180 
	#INT_730_WAKE_UP_REQ
 (46 + 
IH2_BASE
)

	)

181 
	#INT_730_DMA_CH6
 (53 + 
IH2_BASE
)

	)

182 
	#INT_730_DMA_CH7
 (54 + 
IH2_BASE
)

	)

183 
	#INT_730_DMA_CH8
 (55 + 
IH2_BASE
)

	)

184 
	#INT_730_DMA_CH9
 (56 + 
IH2_BASE
)

	)

185 
	#INT_730_DMA_CH10
 (57 + 
IH2_BASE
)

	)

186 
	#INT_730_DMA_CH11
 (58 + 
IH2_BASE
)

	)

187 
	#INT_730_DMA_CH12
 (59 + 
IH2_BASE
)

	)

188 
	#INT_730_DMA_CH13
 (60 + 
IH2_BASE
)

	)

189 
	#INT_730_DMA_CH14
 (61 + 
IH2_BASE
)

	)

190 
	#INT_730_DMA_CH15
 (62 + 
IH2_BASE
)

	)

191 
	#INT_730_NAND
 (63 + 
IH2_BASE
)

	)

193 
	#INT_24XX_SYS_NIRQ
 7

	)

194 
	#INT_24XX_SDMA_IRQ0
 12

	)

195 
	#INT_24XX_SDMA_IRQ1
 13

	)

196 
	#INT_24XX_SDMA_IRQ2
 14

	)

197 
	#INT_24XX_SDMA_IRQ3
 15

	)

198 
	#INT_24XX_CAM_IRQ
 24

	)

199 
	#INT_24XX_DSS_IRQ
 25

	)

200 
	#INT_24XX_GPIO_BANK1
 29

	)

201 
	#INT_24XX_GPIO_BANK2
 30

	)

202 
	#INT_24XX_GPIO_BANK3
 31

	)

203 
	#INT_24XX_GPIO_BANK4
 32

	)

204 
	#INT_24XX_GPTIMER1
 37

	)

205 
	#INT_24XX_GPTIMER2
 38

	)

206 
	#INT_24XX_GPTIMER3
 39

	)

207 
	#INT_24XX_GPTIMER4
 40

	)

208 
	#INT_24XX_GPTIMER5
 41

	)

209 
	#INT_24XX_GPTIMER6
 42

	)

210 
	#INT_24XX_GPTIMER7
 43

	)

211 
	#INT_24XX_GPTIMER8
 44

	)

212 
	#INT_24XX_GPTIMER9
 45

	)

213 
	#INT_24XX_GPTIMER10
 46

	)

214 
	#INT_24XX_GPTIMER11
 47

	)

215 
	#INT_24XX_GPTIMER12
 48

	)

216 
	#INT_24XX_MCBSP1_IRQ_TX
 59

	)

217 
	#INT_24XX_MCBSP1_IRQ_RX
 60

	)

218 
	#INT_24XX_MCBSP2_IRQ_TX
 62

	)

219 
	#INT_24XX_MCBSP2_IRQ_RX
 63

	)

220 
	#INT_24XX_UART1_IRQ
 72

	)

221 
	#INT_24XX_UART2_IRQ
 73

	)

222 
	#INT_24XX_UART3_IRQ
 74

	)

223 
	#INT_24XX_MMC_IRQ
 83

	)

225 
	#OMAP_MAX_GPIO_LINES
 192

	)

226 
	#IH_GPIO_BASE
 (128 + 
IH2_BASE
)

	)

227 
	#IH_MPUIO_BASE
 (
OMAP_MAX_GPIO_LINES
 + 
IH_GPIO_BASE
)

	)

228 
	#IH_BOARD_BASE
 (16 + 
IH_MPUIO_BASE
)

	)

230 
	#OMAP_IRQ_BIT
(
úq
Ë(1 << ((úqË% 32))

	)

232 #i‚de‡
__ASSEMBLY__


236 
	~<asm/h¨dw¨e.h
>

238 #i‚de‡
NR_IRQS


239 
	#NR_IRQS
 
IH_BOARD_BASE


	)

	@asm/arch/mcbsp.h

12 #i‚de‡
__ASM_ARCH_OMAP_MCBSP_H


13 
	#__ASM_ARCH_OMAP_MCBSP_H


	)

15 
	~<asm/h¨dw¨e.h
>

17 
	#OMAP730_MCBSP1_BASE
 0xfffb1000

	)

18 
	#OMAP730_MCBSP2_BASE
 0xfffb1800

	)

20 
	#OMAP1510_MCBSP1_BASE
 0xe1011800

	)

21 
	#OMAP1510_MCBSP2_BASE
 0xfffb1000

	)

22 
	#OMAP1510_MCBSP3_BASE
 0xe1017000

	)

24 
	#OMAP1610_MCBSP1_BASE
 0xe1011800

	)

25 
	#OMAP1610_MCBSP2_BASE
 0xfffb1000

	)

26 
	#OMAP1610_MCBSP3_BASE
 0xe1017000

	)

28 
	#OMAP24XX_MCBSP1_BASE
 0x48074000

	)

29 
	#OMAP24XX_MCBSP2_BASE
 0x48076000

	)

31 
	#OMAP_MCBSP_READ
(
ba£
, 
ªg
Ë
	`__øw_ªadw
((ba£Ë+ 
OMAP_MCBSP_REG_
##ªg)

	)

32 
	#OMAP_MCBSP_WRITE
(
ba£
, 
ªg
, 
vÆ
Ë
	`__øw_wrôew
((vÆ), (ba£Ë+ 
OMAP_MCBSP_REG_
##ªg)

	)

34 
	#RRST
 0x0001

	)

35 
	#RRDY
 0x0002

	)

36 
	#RFULL
 0x0004

	)

37 
	#RSYNC_ERR
 0x0008

	)

38 
	#RINTM
(
vÆue
Ë((vÆue)<<4)

	)

39 
	#ABIS
 0x0040

	)

40 
	#DXENA
 0x0080

	)

41 
	#CLKSTP
(
vÆue
Ë((vÆue)<<11)

	)

42 
	#RJUST
(
vÆue
Ë((vÆue)<<13)

	)

43 
	#DLB
 0x8000

	)

45 
	#XRST
 0x0001

	)

46 
	#XRDY
 0x0002

	)

47 
	#XEMPTY
 0x0004

	)

48 
	#XSYNC_ERR
 0x0008

	)

49 
	#XINTM
(
vÆue
Ë((vÆue)<<4)

	)

50 
	#GRST
 0x0040

	)

51 
	#FRST
 0x0080

	)

52 
	#SOFT
 0x0100

	)

53 
	#FREE
 0x0200

	)

55 
	#CLKRP
 0x0001

	)

56 
	#CLKXP
 0x0002

	)

57 
	#FSRP
 0x0004

	)

58 
	#FSXP
 0x0008

	)

59 
	#DR_STAT
 0x0010

	)

60 
	#DX_STAT
 0x0020

	)

61 
	#CLKS_STAT
 0x0040

	)

62 
	#SCLKME
 0x0080

	)

63 
	#CLKRM
 0x0100

	)

64 
	#CLKXM
 0x0200

	)

65 
	#FSRM
 0x0400

	)

66 
	#FSXM
 0x0800

	)

67 
	#RIOEN
 0x1000

	)

68 
	#XIOEN
 0x2000

	)

69 
	#IDLE_EN
 0x4000

	)

71 
	#RWDLEN1
(
vÆue
Ë((vÆue)<<5)

	)

72 
	#RFRLEN1
(
vÆue
Ë((vÆue)<<8)

	)

74 
	#XWDLEN1
(
vÆue
Ë((vÆue)<<5)

	)

75 
	#XFRLEN1
(
vÆue
Ë((vÆue)<<8)

	)

77 
	#RDATDLY
(
vÆue
Ë(vÆue)

	)

78 
	#RFIG
 0x0004

	)

79 
	#RCOMPAND
(
vÆue
Ë((vÆue)<<3)

	)

80 
	#RWDLEN2
(
vÆue
Ë((vÆue)<<5)

	)

81 
	#RFRLEN2
(
vÆue
Ë((vÆue)<<8)

	)

82 
	#RPHASE
 0x8000

	)

84 
	#XDATDLY
(
vÆue
Ë(vÆue)

	)

85 
	#XFIG
 0x0004

	)

86 
	#XCOMPAND
(
vÆue
Ë((vÆue)<<3)

	)

87 
	#XWDLEN2
(
vÆue
Ë((vÆue)<<5)

	)

88 
	#XFRLEN2
(
vÆue
Ë((vÆue)<<8)

	)

89 
	#XPHASE
 0x8000

	)

91 
	#CLKGDV
(
vÆue
Ë(vÆue)

	)

92 
	#FWID
(
vÆue
Ë((vÆue)<<8)

	)

94 
	#FPER
(
vÆue
Ë(vÆue)

	)

95 
	#FSGM
 0x1000

	)

96 
	#CLKSM
 0x2000

	)

97 
	#CLKSP
 0x4000

	)

98 
	#GSYNC
 0x8000

	)

100 
	#RMCM
 0x0001

	)

101 
	#RCBLK
(
vÆue
Ë((vÆue)<<2)

	)

102 
	#RPABLK
(
vÆue
Ë((vÆue)<<5)

	)

103 
	#RPBBLK
(
vÆue
Ë((vÆue)<<7)

	)

105 
	#XMCM
(
vÆue
Ë(vÆue)

	)

106 
	#XCBLK
(
vÆue
Ë((vÆue)<<2)

	)

107 
	#XPABLK
(
vÆue
Ë((vÆue)<<5)

	)

108 
	#XPBBLK
(
vÆue
Ë((vÆue)<<7)

	)

110 
	som≠_mcb•_ªg_cfg
 {

111 
u16
 
	m•¸2
;

112 
u16
 
	m•¸1
;

113 
u16
 
	mr¸2
;

114 
u16
 
	mr¸1
;

115 
u16
 
	mx¸2
;

116 
u16
 
	mx¸1
;

117 
u16
 
	m§gr2
;

118 
u16
 
	m§gr1
;

119 
u16
 
	mm¸2
;

120 
u16
 
	mm¸1
;

121 
u16
 
	mp¸0
;

122 
u16
 
	mr˚rc
;

123 
u16
 
	mr˚rd
;

124 
u16
 
	mx˚rc
;

125 
u16
 
	mx˚rd
;

126 
u16
 
	mr˚ª
;

127 
u16
 
	mr˚rf
;

128 
u16
 
	mx˚ª
;

129 
u16
 
	mx˚rf
;

130 
u16
 
	mr˚rg
;

131 
u16
 
	mr˚rh
;

132 
u16
 
	mx˚rg
;

133 
u16
 
	mx˚rh
;

137 
	mOMAP_MCBSP1
 = 0,

138 
	mOMAP_MCBSP2
,

139 
	mOMAP_MCBSP3
,

140 } 
	tom≠_mcb•_id
;

142 
	t__bôwi£
 
	tom≠_mcb•_io_ty≥_t
;

143 
	#OMAP_MCBSP_IRQ_IO
 ((
__f‹˚
 
om≠_mcb•_io_ty≥_t
Ë1)

	)

144 
	#OMAP_MCBSP_POLL_IO
 ((
__f‹˚
 
om≠_mcb•_io_ty≥_t
Ë2)

	)

147 
	mOMAP_MCBSP_WORD_8
 = 0,

148 
	mOMAP_MCBSP_WORD_12
,

149 
	mOMAP_MCBSP_WORD_16
,

150 
	mOMAP_MCBSP_WORD_20
,

151 
	mOMAP_MCBSP_WORD_24
,

152 
	mOMAP_MCBSP_WORD_32
,

153 } 
	tom≠_mcb•_w‹d_Àngth
;

156 
	mOMAP_MCBSP_CLK_RISING
 = 0,

157 
	mOMAP_MCBSP_CLK_FALLING
,

158 } 
	tom≠_mcb•_˛k_pﬁ¨ôy
;

161 
	mOMAP_MCBSP_FS_ACTIVE_HIGH
 = 0,

162 
	mOMAP_MCBSP_FS_ACTIVE_LOW
,

163 } 
	tom≠_mcb•_fs_pﬁ¨ôy
;

166 
	mOMAP_MCBSP_CLK_STP_MODE_NO_DELAY
 = 0,

167 
	mOMAP_MCBSP_CLK_STP_MODE_DELAY
,

168 } 
	tom≠_mcb•_˛k_°p_mode
;

171 
	mOMAP_MCBSP_SPI_MASTER
 = 0,

172 
	mOMAP_MCBSP_SPI_SLAVE
,

173 } 
	tom≠_mcb•_•i_mode
;

175 
	som≠_mcb•_•i_cfg
 {

176 
om≠_mcb•_•i_mode
 
	m•i_mode
;

177 
om≠_mcb•_˛k_pﬁ¨ôy
 
	mrx_˛ock_pﬁ¨ôy
;

178 
om≠_mcb•_˛k_pﬁ¨ôy
 
	mtx_˛ock_pﬁ¨ôy
;

179 
om≠_mcb•_fs_pﬁ¨ôy
 
	mfsx_pﬁ¨ôy
;

180 
u8
 
	m˛k_div
;

181 
om≠_mcb•_˛k_°p_mode
 
	m˛k_°p_mode
;

182 
om≠_mcb•_w‹d_Àngth
 
	mw‹d_Àngth
;

	@asm/arch/memory.h

12 #i‚de‡
__ASM_ARCH_MEMORY_H


13 
	#__ASM_ARCH_MEMORY_H


	)

15 
	#__vút_to_bus
(
x
Ë
	`__vút_to_phys
(x)

	)

16 
	#__bus_to_vút
(
x
Ë
	`__phys_to_vút
(x)

	)

	@asm/arch/mtd-xip.h

12 #i‚de‡
__ARCH_OMAP_MTD_XIP_H__


13 
	#__ARCH_OMAP_MTD_XIP_H__


	)

15 
	~<asm/h¨dw¨e.h
>

16 
	#OMAP_MPU_TIMER_BASE
 (0xff„c500)

	)

17 
	#OMAP_MPU_TIMER_OFFSET
 0x100

	)

20 
u32
 
	m˙é
;

21 
u32
 
	mlﬂd_tim
;

22 
u32
 
	mªad_tim
;

23 } 
	txù_om≠_mpu_timî_ªgs_t
;

25 
	#xù_om≠_mpu_timî_ba£
(
n
Ë((vﬁ©ûê
xù_om≠_mpu_timî_ªgs_t
*)
	`IO_ADDRESS
(
OMAP_MPU_TIMER_BASE
 + (n)*
OMAP_MPU_TIMER_OFFSET
))

	)

27 
	#xù_úq≥ndög
(Ë(
	`om≠_ªadl
(
OMAP_IH1_ITR
Ë& ~om≠_ªadl(
OMAP_IH1_MIR
))

	)

28 
	#xù_cuºtime
(Ë(~
	`xù_om≠_mpu_timî_ªad
(0))

	)

29 
	#xù_ñ≠£d_sö˚
(
x
Ë(sig√d)((~
	`xù_om≠_mpu_timî_ªad
(0Ë- (x)Ë/ 6)

	)

30 
	#xù_˝u_idÀ
(Ë
asm
 vﬁ©ûê("m¸Ö15, 0, %0, c7, c0, 4" :: "r" (1))

	)

	@asm/arch/mux.h

12 #i‚de‡
__ASM_ARCH_MUX_H


13 
	#__ASM_ARCH_MUX_H


	)

15 
	#PU_PD_SEL_NA
 0

	)

16 
	#PULL_DWN_CTRL_NA
 0

	)

18 
	#MUX_REG
(
ªg
, 
mode_off£t
, 
mode
Ë.
mux_ªg
 = 
FUNC_MUX_CTRL_
##ªg, .
mask_off£t
 = mode_off£t, .
mask
 = mode,

	)

20 
	#PULL_REG
(
ªg
, 
bô
, 
°©us
Ë.
puŒ_ªg
 = 
PULL_DWN_CTRL_
##ªg, .
puŒ_bô
 = bô, .
puŒ_vÆ
 = sètus,

	)

22 
	#PU_PD_REG
(
ªg
, 
°©us
Ë.
pu_pd_ªg
 = 
PU_PD_SEL_
##ªg, .
pu_pd_vÆ
 = sètus,

	)

24 
	#MUX_REG_730
(
ªg
, 
mode_off£t
, 
mode
Ë.
mux_ªg
 = 
OMAP730_IO_CONF_
##ªg, .
mask_off£t
 = mode_off£t, .
mask
 = mode,

	)

26 
	#PULL_REG_730
(
ªg
, 
bô
, 
°©us
Ë.
puŒ_ªg
 = 
OMAP730_IO_CONF_
##ªg, .
puŒ_bô
 = bô, .
puŒ_vÆ
 = sètus,

	)

28 
	#MUX_CFG
(
desc
, 
mux_ªg
, 
mode_off£t
, 
mode
, 
puŒ_ªg
, 
puŒ_bô
, 
puŒ_°©us
, 
pu_pd_ªg
, 
pu_pd_°©us
, 
debug_°©us
Ë{ .
«me
 = desc, .
debug
 = debug_°©us, 
	`MUX_REG
(mux_ªg, mode_off£t, modeË
	`PULL_REG
’uŒ_ªg,ÖuŒ_bô, !puŒ_°©usË
	`PU_PD_REG
’u_pd_ªg,Öu_pd_°©usË},

	)

30 
	#MUX_CFG_730
(
desc
, 
mux_ªg
, 
mode_off£t
, 
mode
, 
puŒ_bô
, 
puŒ_°©us
, 
debug_°©us
Ë{ .
«me
 = desc, .
debug
 = debug_°©us, 
	`MUX_REG_730
(mux_ªg, mode_off£t, modeË
	`PULL_REG_730
(mux_ªg,ÖuŒ_bô,ÖuŒ_°©usË
	`PU_PD_REG
(
NA
, 0Ë},

	)

32 
	#MUX_CFG_24XX
(
desc
, 
ªg_off£t
, 
mode
, 
puŒ_í
, 
puŒ_mode
, 
dbg
Ë{ .
«me
 = desc, .
debug
 = dbg, .
mux_ªg
 =Ñeg_off£t, .
mask
 = mode, .
puŒ_vÆ
 =ÖuŒ_í, .
pu_pd_vÆ
 =ÖuŒ_mode, },

	)

34 
	#PULL_DISABLED
 0

	)

35 
	#PULL_ENABLED
 1

	)

37 
	#PULL_DOWN
 0

	)

38 
	#PULL_UP
 1

	)

40 
	spö_c⁄fig
 {

41 *
	m«me
;

42 
	mbusy
;

43 
	mdebug
;

45 c⁄° *
	mmux_ªg_«me
;

46 c⁄° 
	mmux_ªg
;

47 c⁄° 
	mmask_off£t
;

48 c⁄° 
	mmask
;

50 c⁄° *
	mpuŒ_«me
;

51 c⁄° 
	mpuŒ_ªg
;

52 c⁄° 
	mpuŒ_vÆ
;

53 c⁄° 
	mpuŒ_bô
;

55 c⁄° *
	mpu_pd_«me
;

56 c⁄° 
	mpu_pd_ªg
;

57 c⁄° 
	mpu_pd_vÆ
;

60 
	eom≠730_ödex
 {

62 
	mE2_730_KBR0
,

63 
	mJ7_730_KBR1
,

64 
	mE1_730_KBR2
,

65 
	mF3_730_KBR3
,

66 
	mD2_730_KBR4
,

67 
	mAA20_730_KBR5
,

68 
	mV17_730_KBR6
,

69 
	mC2_730_KBC0
,

70 
	mD3_730_KBC1
,

71 
	mE4_730_KBC2
,

72 
	mF4_730_KBC3
,

73 
	mE3_730_KBC4
,

75 
	mAA17_730_USB_DM
,

76 
	mW16_730_USB_PU_EN
,

77 
	mW17_730_USB_VBUSI
,

79 
	mV19_730_GPIO_15
,

80 
	mM19_730_GPIO_77
,

81 
	mC21_730_GPIO_121_122
,

82 
	mK19_730_GPIO_126
,

83 
	mK15_730_GPIO_127
,

85 
	mP15_730_GPIO_16_17
,

87 
	mM15_730_GPIO_83
,

88 
	mN20_730_GPIO_82
,

89 
	mN18_730_GPIO_81
,

90 
	mN19_730_GPIO_80
,

91 
	mL15_730_GPIO_76
,

93 
	mUART1_CTS_RTS
,

94 
	mOMAP_730_GPIOS_42_43
,

95 
	mUART1_TX_RX
,

96 
	mOMAP_730_GPIOS_40_41
,

97 
	mUART1_USB_RX_TX
,

98 
	mUART1_USB_RTS
,

99 
	mUART1_USB_CTS


102 
	eom≠1xxx_ödex
 {

104 
	mUART1_TX
 = 0,

105 
	mUART1_RTS
,

107 
	mUART2_TX
,

108 
	mUART2_RX
,

109 
	mUART2_CTS
,

110 
	mUART2_RTS
,

112 
	mUART3_TX
,

113 
	mUART3_RX
,

114 
	mUART3_CTS
,

115 
	mUART3_RTS
,

116 
	mUART3_CLKREQ
,

117 
	mUART3_BCLK
,

118 
	mY15_1610_UART3_RTS
,

120 
	mPWT
,

121 
	mPWL
,

123 
	mR18_USB_VBUS
,

124 
	mR18_1510_USB_GPIO0
,

125 
	mW4_USB_PUEN
,

126 
	mW4_USB_CLKO
,

127 
	mW4_USB_HIGHZ
,

128 
	mW4_GPIO58
,

130 
	mUSB1_SUSP
,

131 
	mUSB1_SEO
,

132 
	mW13_1610_USB1_SE0
,

133 
	mUSB1_TXEN
,

134 
	mUSB1_TXD
,

135 
	mUSB1_VP
,

136 
	mUSB1_VM
,

137 
	mUSB1_RCV
,

138 
	mUSB1_SPEED
,

139 
	mR13_1610_USB1_SPEED
,

140 
	mR13_1710_USB1_SE0
,

142 
	mUSB2_SUSP
,

143 
	mUSB2_VP
,

144 
	mUSB2_TXEN
,

145 
	mUSB2_VM
,

146 
	mUSB2_RCV
,

147 
	mUSB2_SEO
,

148 
	mUSB2_TXD
,

150 
	mR18_1510_GPIO0
,

151 
	mR19_1510_GPIO1
,

152 
	mM14_1510_GPIO2
,

154 
	mP18_1610_GPIO3
,

155 
	mY15_1610_GPIO17
,

157 
	mR18_1710_GPIO0
,

158 
	mV2_1710_GPIO10
,

159 
	mN21_1710_GPIO14
,

160 
	mW15_1710_GPIO40
,

162 
	mMPUIO2
,

163 
	mN15_1610_MPUIO2
,

164 
	mMPUIO4
,

165 
	mMPUIO5
,

166 
	mT20_1610_MPUIO5
,

167 
	mW11_1610_MPUIO6
,

168 
	mV10_1610_MPUIO7
,

169 
	mW11_1610_MPUIO9
,

170 
	mV10_1610_MPUIO10
,

171 
	mW10_1610_MPUIO11
,

172 
	mE20_1610_MPUIO13
,

173 
	mU20_1610_MPUIO14
,

174 
	mE19_1610_MPUIO15
,

176 
	mMCBSP2_CLKR
,

177 
	mMCBSP2_CLKX
,

178 
	mMCBSP2_DR
,

179 
	mMCBSP2_DX
,

180 
	mMCBSP2_FSR
,

181 
	mMCBSP2_FSX
,

183 
	mMCBSP3_CLKX
,

185 
	mBALLOUT_V8_ARMIO3
,

186 
	mN20_HDQ
,

188 
	mW8_1610_MMC2_DAT0
,

189 
	mV8_1610_MMC2_DAT1
,

190 
	mW15_1610_MMC2_DAT2
,

191 
	mR10_1610_MMC2_DAT3
,

192 
	mY10_1610_MMC2_CLK
,

193 
	mY8_1610_MMC2_CMD
,

194 
	mV9_1610_MMC2_CMDDIR
,

195 
	mV5_1610_MMC2_DATDIR0
,

196 
	mW19_1610_MMC2_DATDIR1
,

197 
	mR18_1610_MMC2_CLKIN
,

199 
	mM19_1610_ETM_PSTAT0
,

200 
	mL15_1610_ETM_PSTAT1
,

201 
	mL18_1610_ETM_PSTAT2
,

202 
	mL19_1610_ETM_D0
,

203 
	mJ19_1610_ETM_D6
,

204 
	mJ18_1610_ETM_D7
,

206 
	mP20_1610_GPIO4
,

207 
	mV9_1610_GPIO7
,

208 
	mW8_1610_GPIO9
,

209 
	mN20_1610_GPIO11
,

210 
	mN19_1610_GPIO13
,

211 
	mP10_1610_GPIO22
,

212 
	mV5_1610_GPIO24
,

213 
	mAA20_1610_GPIO_41
,

214 
	mW19_1610_GPIO48
,

215 
	mM7_1610_GPIO62
,

216 
	mV14_16XX_GPIO37
,

217 
	mR9_16XX_GPIO18
,

218 
	mL14_16XX_GPIO49
,

220 
	mV19_1610_UWIRE_SCLK
,

221 
	mU18_1610_UWIRE_SDI
,

222 
	mW21_1610_UWIRE_SDO
,

223 
	mN14_1610_UWIRE_CS0
,

224 
	mP15_1610_UWIRE_CS3
,

225 
	mN15_1610_UWIRE_CS1
,

227 
	mU19_1610_SPIF_SCK
,

228 
	mU18_1610_SPIF_DIN
,

229 
	mP20_1610_SPIF_DIN
,

230 
	mW21_1610_SPIF_DOUT
,

231 
	mR18_1610_SPIF_DOUT
,

232 
	mN14_1610_SPIF_CS0
,

233 
	mN15_1610_SPIF_CS1
,

234 
	mT19_1610_SPIF_CS2
,

235 
	mP15_1610_SPIF_CS3
,

237 
	mL3_1610_FLASH_CS2B_OE
,

238 
	mM8_1610_FLASH_CS2B_WE
,

240 
	mMMC_CMD
,

241 
	mMMC_DAT1
,

242 
	mMMC_DAT2
,

243 
	mMMC_DAT0
,

244 
	mMMC_CLK
,

245 
	mMMC_DAT3
,

247 
	mM15_1710_MMC_CLKI
,

248 
	mP19_1710_MMC_CMDDIR
,

249 
	mP20_1710_MMC_DATDIR0
,

251 
	mW9_USB0_TXEN
,

252 
	mAA9_USB0_VP
,

253 
	mY5_USB0_RCV
,

254 
	mR9_USB0_VM
,

255 
	mV6_USB0_TXD
,

256 
	mW5_USB0_SE0
,

257 
	mV9_USB0_SPEED
,

258 
	mV9_USB0_SUSP
,

260 
	mW9_USB2_TXEN
,

261 
	mAA9_USB2_VP
,

262 
	mY5_USB2_RCV
,

263 
	mR9_USB2_VM
,

264 
	mV6_USB2_TXD
,

265 
	mW5_USB2_SE0
,

267 
	mR13_1610_UART1_TX
,

268 
	mV14_16XX_UART1_RX
,

269 
	mR14_1610_UART1_CTS
,

270 
	mAA15_1610_UART1_RTS
,

271 
	mR9_16XX_UART2_RX
,

272 
	mL14_16XX_UART3_RX
,

274 
	mI2C_SCL
,

275 
	mI2C_SDA
,

277 
	mF18_1610_KBC0
,

278 
	mD20_1610_KBC1
,

279 
	mD19_1610_KBC2
,

280 
	mE18_1610_KBC3
,

281 
	mC21_1610_KBC4
,

282 
	mG18_1610_KBR0
,

283 
	mF19_1610_KBR1
,

284 
	mH14_1610_KBR2
,

285 
	mE20_1610_KBR3
,

286 
	mE19_1610_KBR4
,

287 
	mN19_1610_KBR5
,

289 
	mT20_1610_LOW_PWR
,

291 
	mV5_1710_MCLK_ON
,

292 
	mV5_1710_MCLK_OFF
,

293 
	mR10_1610_MCLK_ON
,

294 
	mR10_1610_MCLK_OFF
,

296 
	mP11_1610_CF_CD2
,

297 
	mR11_1610_CF_IOIS16
,

298 
	mV10_1610_CF_IREQ
,

299 
	mW10_1610_CF_RESET
,

300 
	mW11_1610_CF_CD1
,

303 
	eom≠24xx_ödex
 {

305 
	mM19_24XX_I2C1_SCL
,

306 
	mL15_24XX_I2C1_SDA
,

307 
	mJ15_24XX_I2C2_SCL
,

308 
	mH19_24XX_I2C2_SDA
,

310 
	mW19_24XX_SYS_NIRQ
,

312 
	mW14_24XX_SYS_CLKOUT
,

314 
	mL3_GPMC_WAIT0
,

315 
	mN7_GPMC_WAIT1
,

316 
	mM1_GPMC_WAIT2
,

317 
	mP1_GPMC_WAIT3
,

319 
	mY15_24XX_MCBSP2_CLKX
,

320 
	mR14_24XX_MCBSP2_FSX
,

321 
	mW15_24XX_MCBSP2_DR
,

322 
	mV15_24XX_MCBSP2_DX
,

324 
	mM21_242X_GPIO11
,

325 
	mAA10_242X_GPIO13
,

326 
	mAA6_242X_GPIO14
,

327 
	mAA4_242X_GPIO15
,

328 
	mY11_242X_GPIO16
,

329 
	mAA12_242X_GPIO17
,

330 
	mAA8_242X_GPIO58
,

331 
	mY20_24XX_GPIO60
,

332 
	mW4__24XX_GPIO74
,

333 
	mM15_24XX_GPIO92
,

334 
	mV14_24XX_GPIO117
,

336 
	mV4_242X_GPIO49
,

337 
	mW2_242X_GPIO50
,

338 
	mU4_242X_GPIO51
,

339 
	mV3_242X_GPIO52
,

340 
	mV2_242X_GPIO53
,

341 
	mV6_242X_GPIO53
,

342 
	mT4_242X_GPIO54
,

343 
	mY4_242X_GPIO54
,

344 
	mT3_242X_GPIO55
,

345 
	mU2_242X_GPIO56
,

347 
	mAA10_242X_DMAREQ0
,

348 
	mAA6_242X_DMAREQ1
,

349 
	mE4_242X_DMAREQ2
,

350 
	mG4_242X_DMAREQ3
,

351 
	mD3_242X_DMAREQ4
,

352 
	mE3_242X_DMAREQ5
,

354 
	mP20_24XX_TSC_IRQ
,

356 
	mK15_24XX_UART3_TX
,

357 
	mK14_24XX_UART3_RX
,

359 
	mG19_24XX_MMC_CLKO
,

360 
	mH18_24XX_MMC_CMD
,

361 
	mF20_24XX_MMC_DAT0
,

362 
	mH14_24XX_MMC_DAT1
,

363 
	mE19_24XX_MMC_DAT2
,

364 
	mD19_24XX_MMC_DAT3
,

365 
	mF19_24XX_MMC_DAT_DIR0
,

366 
	mE20_24XX_MMC_DAT_DIR1
,

367 
	mF18_24XX_MMC_DAT_DIR2
,

368 
	mE18_24XX_MMC_DAT_DIR3
,

369 
	mG18_24XX_MMC_CMD_DIR
,

370 
	mH15_24XX_MMC_CLKI
,

372 
	mT19_24XX_KBR0
,

373 
	mR19_24XX_KBR1
,

374 
	mV18_24XX_KBR2
,

375 
	mM21_24XX_KBR3
,

376 
	mE5__24XX_KBR4
,

377 
	mM18_24XX_KBR5
,

378 
	mR20_24XX_KBC0
,

379 
	mM14_24XX_KBC1
,

380 
	mH19_24XX_KBC2
,

381 
	mV17_24XX_KBC3
,

382 
	mP21_24XX_KBC4
,

383 
	mL14_24XX_KBC5
,

384 
	mN19_24XX_KBC6
,

386 
	mB3__24XX_KBR5
,

387 
	mAA4_24XX_KBC2
,

388 
	mB13_24XX_KBC6
,

	@asm/arch/omap24xx.h

12 #i‚de‡
__ASM_ARCH_OMAP24XX_H


13 
	#__ASM_ARCH_OMAP24XX_H


	)

15 
	#L4_24XX_BASE
 0x48000000

	)

16 
	#L3_24XX_BASE
 0x68000000

	)

18 
	#OMAP24XX_IC_BASE
 (
L4_24XX_BASE
 + 0x„000)

	)

19 
	#VA_IC_BASE
 
	`IO_ADDRESS
(
OMAP24XX_IC_BASE
)

	)

20 
	#OMAP24XX_IVA_INTC_BASE
 0x40000000

	)

21 
	#IRQ_SIR_IRQ
 0x0040

	)

23 
	#OMAP24XX_32KSYNCT_BASE
 (
L4_24XX_BASE
 + 0x4000)

	)

24 
	#OMAP24XX_PRCM_BASE
 (
L4_24XX_BASE
 + 0x8000)

	)

25 
	#OMAP24XX_SDRC_BASE
 (
L3_24XX_BASE
 + 0x9000)

	)

27 
	#OMAP242X_CONTROL_STATUS
 (
L4_24XX_BASE
 + 0x2f8)

	)

	@asm/arch/serial.h

12 #i‚de‡
__ASM_ARCH_SERIAL_H


13 
	#__ASM_ARCH_SERIAL_H


	)

15 
	#OMAP_MAX_NR_PORTS
 3

	)

16 
	#OMAP1510_BASE_BAUD
 (12000000/16)

	)

17 
	#OMAP16XX_BASE_BAUD
 (48000000/16)

	)

19 
	#is_om≠_p‹t
(
p
Ë({
__ªt
 = 0; i‡’ =
	`IO_ADDRESS
(
OMAP_UART1_BASE
Ë||Ö =IO_ADDRESS(
OMAP_UART2_BASE
Ë||Ö =IO_ADDRESS(
OMAP_UART3_BASE
)Ë__ªà1; __ªt; })

	)

	@asm/arch/timex.h

12 #i‚de‡
__ASM_ARCH_OMAP_TIMEX_H


13 
	#__ASM_ARCH_OMAP_TIMEX_H


	)

15 
	#CLOCK_TICK_RATE
 (
HZ
 * 100000UL)

	)

	@asm/arch/vmalloc.h

12 
	#VMALLOC_END
 (
PAGE_OFFSET
 + 0x10000000)

	)

	@asm/atomic.h

12 #i‚de‡
__ASM_ARM_ATOMIC_H


13 
	#__ASM_ARM_ATOMIC_H


	)

15 
	~<löux/compûî.h
>

17 °ru˘ { vﬁ©ûê
	mcou¡î
; } 
	t©omic_t
;

19 
	#ATOMIC_INIT
(
i
Ë{ (iË}

	)

	@asm/auxvec.h

12 #i‚de‡
__ASMARM_AUXVEC_H


13 
	#__ASMARM_AUXVEC_H


	)

	@asm/bitops.h

12 #i‚de‡
__ASM_ARM_BITOPS_H


13 
	#__ASM_ARM_BITOPS_H


	)

	@asm/byteorder.h

12 #i‚de‡
__ASM_ARM_BYTEORDER_H


13 
	#__ASM_ARM_BYTEORDER_H


	)

15 
	~<löux/compûî.h
>

16 
	~<asm/ty≥s.h
>

18 
ölöe
 
__©åibuã_c⁄°__
 
__u32
 
	$___¨ch__swab32
(
__u32
 
x
)

20 
__u32
 
t
;

22 #i‚de‡
__thumb__


23 i‡(!
	`__buûtö_c⁄°™t_p
(
x
)) {

25 
	`__asm__
 ("e‹\t%0, %1, %1,Ñ‹ #16" : "Ù" (
t
Ë: "r" (
x
));

28 
t
 = 
x
 ^ ((x << 16) | (x >> 16));

30 
x
 = (x << 24) | (x >> 8);

31 
t
 &= ~0x00FF0000;

32 
x
 ^(
t
 >> 8);

34  
x
;

35 
	}
}

37 
	#__¨ch__swab32
(
x
Ë
	`___¨ch__swab32
(x)

	)

39 #i‚de‡
__STRICT_ANSI__


40 
	#__BYTEORDER_HAS_U64__


	)

41 
	#__SWAB_64_THRU_32__


	)

44 #ifde‡
__ARMEB__


45 
	~<löux/byã‹dî/big_ídün.h
>

47 
	~<löux/byã‹dî/lôée_ídün.h
>

	@asm/cache.h

12 #i‚de‡
__ASMARM_CACHE_H


13 
	#__ASMARM_CACHE_H


	)

15 
	#L1_CACHE_SHIFT
 5

	)

16 
	#L1_CACHE_BYTES
 (1 << 
L1_CACHE_SHIFT
)

	)

	@asm/cacheflush.h

12 #i‚de‡
_ASMARM_CACHEFLUSH_H


13 
	#_ASMARM_CACHEFLUSH_H


	)

15 
	~<löux/sched.h
>

16 
	~<löux/mm.h
>

18 
	~<asm/glue.h
>

19 
	~<asm/shm∑øm.h
>

21 
	#CACHE_COLOUR
(
vaddr
Ë((vadd∏& (
SHMLBA
 - 1)Ë>> 
PAGE_SHIFT
)

	)

23 #unde‡
_CACHE


24 #unde‡
MULTI_CACHE


26 #i‡!
deföed
(
_CACHE
Ë&& !deföed(
MULTI_CACHE
)

27 #îr‹ 
Unknown
 
ˇche
 
maöèöí˚
 
modñ


30 
	#PG_dˇche_dúty
 
PG_¨ch_1


	)

32 
	s˝u_ˇche_‚s
 {

33 (*
	mÊush_kîn_Æl
)();

34 (*
	mÊush_u£r_Æl
)();

35 (*
	mÊush_u£r_ønge
)(, , );

37 (*
	mcohîít_kîn_ønge
)(, );

38 (*
	mcohîít_u£r_ønge
)(, );

39 (*
	mÊush_kîn_dˇche_∑ge
)(*);

41 (*
	mdma_öv_ønge
)(, );

42 (*
	mdma_˛ón_ønge
)(, );

43 (*
	mdma_Êush_ønge
)(, );

46 #ifde‡
MULTI_CACHE


48 
	#__˝uc_Êush_kîn_Æl
 
˝u_ˇche
.
Êush_kîn_Æl


	)

49 
	#__˝uc_Êush_u£r_Æl
 
˝u_ˇche
.
Êush_u£r_Æl


	)

50 
	#__˝uc_Êush_u£r_ønge
 
˝u_ˇche
.
Êush_u£r_ønge


	)

51 
	#__˝uc_cohîít_kîn_ønge
 
˝u_ˇche
.
cohîít_kîn_ønge


	)

52 
	#__˝uc_cohîít_u£r_ønge
 
˝u_ˇche
.
cohîít_u£r_ønge


	)

53 
	#__˝uc_Êush_dˇche_∑ge
 
˝u_ˇche
.
Êush_kîn_dˇche_∑ge


	)

55 
	#dmac_öv_ønge
 
˝u_ˇche
.
dma_öv_ønge


	)

56 
	#dmac_˛ón_ønge
 
˝u_ˇche
.
dma_˛ón_ønge


	)

57 
	#dmac_Êush_ønge
 
˝u_ˇche
.
dma_Êush_ønge


	)

61 
	#__˝uc_Êush_kîn_Æl
 
	`__glue
(
_CACHE
,
_Êush_kîn_ˇche_Æl
)

	)

62 
	#__˝uc_Êush_u£r_Æl
 
	`__glue
(
_CACHE
,
_Êush_u£r_ˇche_Æl
)

	)

63 
	#__˝uc_Êush_u£r_ønge
 
	`__glue
(
_CACHE
,
_Êush_u£r_ˇche_ønge
)

	)

64 
	#__˝uc_cohîít_kîn_ønge
 
	`__glue
(
_CACHE
,
_cohîít_kîn_ønge
)

	)

65 
	#__˝uc_cohîít_u£r_ønge
 
	`__glue
(
_CACHE
,
_cohîít_u£r_ønge
)

	)

66 
	#__˝uc_Êush_dˇche_∑ge
 
	`__glue
(
_CACHE
,
_Êush_kîn_dˇche_∑ge
)

	)

68 
	#dmac_öv_ønge
 
	`__glue
(
_CACHE
,
_dma_öv_ønge
)

	)

69 
	#dmac_˛ón_ønge
 
	`__glue
(
_CACHE
,
_dma_˛ón_ønge
)

	)

70 
	#dmac_Êush_ønge
 
	`__glue
(
_CACHE
,
_dma_Êush_ønge
)

	)

74 
	#Êush_ˇche_vm≠
(
°¨t
, 
íd
Ë
	`Êush_ˇche_Æl
()

	)

75 
	#Êush_ˇche_vunm≠
(
°¨t
, 
íd
Ë
	`Êush_ˇche_Æl
()

	)

77 
	#c›y_to_u£r_∑ge
(
vma
, 
∑ge
, 
vaddr
, 
d°
, 
§c
, 
Àn
Ëdÿ{ 
	`mem˝y
(d°, src,Üí); 
	`Êush_±ø˚_ac˚ss
(vma,Öage, vaddr, d°,Üí, 1); } 0)

	)

79 
	#c›y_‰om_u£r_∑ge
(
vma
, 
∑ge
, 
vaddr
, 
d°
, 
§c
, 
Àn
Ëdÿ{ 
	`mem˝y
(d°, src,Üí); } 0)

	)

81 
	#Êush_ˇche_Æl
(Ë
	`__˝uc_Êush_kîn_Æl
()

	)

82 
	#Êush_ˇche_u£r_ønge
(
vma
,
°¨t
,
íd
Ë
	`__˝uc_cohîít_u£r_ønge
((°¨tË& 
PAGE_MASK
, 
	`PAGE_ALIGN
”nd))

	)

83 
	#Êush_iˇche_ønge
(
s
,
e
Ë
	`__˝uc_cohîít_kîn_ønge
(s,e)

	)

84 
	#˛ón_dˇche_¨ó
(
°¨t
,
size
Ë
	`˝u_dˇche_˛ón_¨ó
(°¨t, size)

	)

86 
	#Êush_dˇche_mm≠_lock
(
m≠pög
Ë
	`wrôe_lock_úq
(&(m≠pög)->
åì_lock
)

	)

87 
	#Êush_dˇche_mm≠_u∆ock
(
m≠pög
Ë
	`wrôe_u∆ock_úq
(&(m≠pög)->
åì_lock
)

	)

89 
	#Êush_iˇche_u£r_ønge
(
vma
,
∑ge
,
addr
,
Àn
Ë
	`Êush_dˇche_∑ge
’age)

	)

91 
	#Êush_iˇche_∑ge
(
vma
,
∑ge
Ëdÿ{ } 0)

	)

93 
	#__ˇcheid_¥e£¡
(
vÆ
Ë(vÆ !
	`ªad_˝uid
(
CPUID_ID
))

	)

94 
	#__ˇcheid_vivt
(
vÆ
Ë((vÆ & (15 << 25)Ë!(14 << 25))

	)

95 
	#__ˇcheid_vùt
(
vÆ
Ë((vÆ & (15 << 25)Ë=(14 << 25))

	)

96 
	#__ˇcheid_vùt_n⁄Æüsög
(
vÆ
Ë((vÆ & (15 << 25 | 1 << 23)Ë=(14 << 25))

	)

97 
	#__ˇcheid_vùt_Æüsög
(
vÆ
Ë((vÆ & (15 << 25 | 1 << 23)Ë=(14 << 25 | 1 << 23))

	)

99 
	#ˇche_is_vivt
(Ë({ 
__vÆ
 = 
	`ªad_˝uid
(
CPUID_CACHETYPE
); (!
	`__ˇcheid_¥e£¡
(__vÆ)Ë|| 
	`__ˇcheid_vivt
(__vÆ); })

	)

101 
	#ˇche_is_vùt
(Ë({ 
__vÆ
 = 
	`ªad_˝uid
(
CPUID_CACHETYPE
); 
	`__ˇcheid_¥e£¡
(__vÆË&& 
	`__ˇcheid_vùt
(__vÆ); })

	)

103 
	#ˇche_is_vùt_n⁄Æüsög
(Ë({ 
__vÆ
 = 
	`ªad_˝uid
(
CPUID_CACHETYPE
); 
	`__ˇcheid_¥e£¡
(__vÆË&& 
	`__ˇcheid_vùt_n⁄Æüsög
(__vÆ); })

	)

105 
	#ˇche_is_vùt_Æüsög
(Ë({ 
__vÆ
 = 
	`ªad_˝uid
(
CPUID_CACHETYPE
); 
	`__ˇcheid_¥e£¡
(__vÆË&& 
	`__ˇcheid_vùt_Æüsög
(__vÆ); })

	)

	@asm/cputime.h

12 #i‚de‡
__ARM_CPUTIME_H


13 
	#__ARM_CPUTIME_H


	)

15 
	~<asm-gíîic/˝utime.h
>

	@asm/delay.h

12 #i‚de‡
__ASM_ARM_DELAY_H


13 
	#__ASM_ARM_DELAY_H


	)

15 
	~<asm/∑øm.h
>

17 
	#MAX_UDELAY_MS
 2

	)

19 
	#udñay
(
n
Ë(
	`__buûtö_c⁄°™t_p
“Ë? (“Ë> (
MAX_UDELAY_MS
 * 1000Ë? 
	`__bad_udñay
(Ë: 
	`__c⁄°_udñay
(“Ë* ((2199023U*
HZ
)>>11))Ë: 
	`__udñay
“))

	)

	@asm/div64.h

12 #i‚de‡
__ASM_ARM_DIV64


13 
	#__ASM_ARM_DIV64


	)

15 
	~<asm/sy°em.h
>

17 #ifde‡
__ARMEB__


18 
	#__xh
 "r0"

	)

19 
	#__xl
 "r1"

	)

21 
	#__xl
 "r0"

	)

22 
	#__xh
 "r1"

	)

25 
	#do_div
(
n
,
ba£
Ë({ 
__ba£
 
	`asm
("r4"Ëba£; 
__n
ásm("r0"Ën; 
__ªs
ásm("r2"); 
__ªm
ásm(
__xh
);ásm–
	`__asmeq
("%0", __xhË__asmeq("%1", "r2"Ë__asmeq("%2", "r0"Ë__asmeq("%3", "r4"Ë"bl __do_div64" : "Ù" (__ªm), "Ù" (__ªsË: "r" (__n), "r" (__ba£Ë: "ù", "Ã", "cc");Ç = __ªs; __ªm; })

	)

	@asm/dma-mapping.h

12 #i‚de‡
ASMARM_DMA_MAPPING_H


13 
	#ASMARM_DMA_MAPPING_H


	)

	@asm/dma.h

12 #i‚de‡
__ASM_ARM_DMA_H


13 
	#__ASM_ARM_DMA_H


	)

15 
	tdmach_t
;

17 
	~<löux/•ölock.h
>

18 
	~<asm/sy°em.h
>

19 
	~<asm/sˇâîli°.h
>

20 
	~<asm/¨ch/dma.h
>

22 #i‚de‡
MAX_DMA_ADDRESS


23 
	#MAX_DMA_ADDRESS
 0xffffffff

	)

26 
	tdmamode_t
;

28 
	#DMA_MODE_MASK
 3

	)

30 
	#DMA_MODE_READ
 0

	)

31 
	#DMA_MODE_WRITE
 1

	)

32 
	#DMA_MODE_CASCADE
 2

	)

33 
	#DMA_AUTOINIT
 4

	)

35 
	#˛ór_dma_ff
(
ch™√l
)

	)

37 
	#£t_dma_addr
(
ch™√l
, 
addr
Ë
	`__£t_dma_addr
(ch™√l, 
	`bus_to_vút
◊ddr))

	)

39 #i‚de‡
NO_DMA


40 
	#NO_DMA
 255

	)

43 
	#iß_dma_bridge_buggy
 (0)

	)

	@asm/domain.h

12 #i‚de‡
__ASM_PROC_DOMAIN_H


13 
	#__ASM_PROC_DOMAIN_H


	)

15 
	#DOMAIN_KERNEL
 0

	)

16 
	#DOMAIN_TABLE
 0

	)

17 
	#DOMAIN_USER
 1

	)

18 
	#DOMAIN_IO
 2

	)

20 
	#DOMAIN_NOACCESS
 0

	)

21 
	#DOMAIN_CLIENT
 1

	)

22 
	#DOMAIN_MANAGER
 3

	)

24 
	#domaö_vÆ
(
dom
,
ty≥
Ë(—y≥Ë<< (2*(dom)))

	)

26 #i‚de‡
__ASSEMBLY__


28 
	#£t_domaö
(
x
Ëdÿ{ } 0)

	)

29 
	#modify_domaö
(
dom
,
ty≥
Ëdÿ{ } 0)

	)

	@asm/dyntick.h

12 #i‚de‡
_ASMARM_DYNTICK_H


13 
	#_ASMARM_DYNTICK_H


	)

15 
	~<asm/mach/time.h
>

	@asm/elf.h

12 #i‚de‡
__ASMARM_ELF_H


13 
	#__ASMARM_ELF_H


	)

15 
	~<asm/±ø˚.h
>

16 
	~<asm/u£r.h
>

17 #ifde‡
__KERNEL


18 
	~<asm/¥ocöfo.h
>

21 
	tñf_gªg_t
;

22 
	tñf_‰eg_t
[3];

24 
	#EM_ARM
 40

	)

25 
	#EF_ARM_APCS26
 0x08

	)

26 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

27 
	#EF_ARM_EABI_MASK
 0xFF000000

	)

29 
	#R_ARM_NONE
 0

	)

30 
	#R_ARM_PC24
 1

	)

31 
	#R_ARM_ABS32
 2

	)

32 
	#R_ARM_CALL
 28

	)

33 
	#R_ARM_JUMP24
 29

	)

35 
	#ELF_NGREG
 ( (
±_ªgs
Ë/ (
ñf_gªg_t
))

	)

36 
ñf_gªg_t
 
	tñf_gªg£t_t
[
ELF_NGREG
];

38 
u£r_Â
 
	tñf_Âªg£t_t
;

40 
	#ñf_check_¨ch
(
x
Ë–((x)->
e_machöe
 =
EM_ARM
Ë&& (
	`ELF_PROC_OK
((x))Ë)

	)

42 
	#ELF_CLASS
 
ELFCLASS32


	)

43 #ifde‡
__ARMEB__


44 
	#ELF_DATA
 
ELFDATA2MSB


	)

46 
	#ELF_DATA
 
ELFDATA2LSB


	)

48 
	#ELF_ARCH
 
EM_ARM


	)

50 
	#USE_ELF_CORE_DUMP


	)

51 
	#ELF_EXEC_PAGESIZE
 4096

	)

53 
	#ELF_ET_DYN_BASE
 (2 * 
TASK_SIZE
 / 3)

	)

55 
	#ELF_PLAT_INIT
(
_r
, 
lﬂd_addr
Ë(_r)->
ARM_r0
 = 0

	)

57 
	#ELF_HWCAP
 (
ñf_hwˇp
)

	)

59 
	#ELF_PLATFORM_SIZE
 8

	)

61 
	#ELF_PLATFORM
 (
ñf_∂©f‹m
)

	)

	@asm/errno.h

12 #i‚de‡
_ARM_ERRNO_H


13 
	#_ARM_ERRNO_H


	)

15 
	~<asm-gíîic/î∫o.h
>

	@asm/fcntl.h

12 #i‚de‡
_ARM_FCNTL_H


13 
	#_ARM_FCNTL_H


	)

15 
	#O_DIRECTORY
 040000

	)

16 
	#O_NOFOLLOW
 0100000

	)

17 
	#O_DIRECT
 0200000

	)

18 
	#O_LARGEFILE
 0400000

	)

20 
	~<asm-gíîic/f˙é.h
>

	@asm/fpstate.h

12 #i‚de‡
__ASM_ARM_FPSTATE_H


13 
	#__ASM_ARM_FPSTATE_H


	)

15 #i‚de‡
__ASSEMBLY__


17 
	svÂ_h¨d_°ru˘
 {

18 
__u64
 
	mÂªgs
[16];

19 #i‡
__LINUX_ARM_ARCH__
 < 6

20 
__u32
 
	mÂmx_°©e
;

22 
__u32
 
	mÂexc
;

23 
__u32
 
	mÂs¸
;

25 
__u32
 
	mÂö°
;

26 
__u32
 
	mÂö°2
;

29 
	uvÂ_°©e
 {

30 
vÂ_h¨d_°ru˘
 
	mh¨d
;

33 
	#FP_HARD_SIZE
 35

	)

35 
	sÂ_h¨d_°ru˘
 {

36 
	mßve
[
FP_HARD_SIZE
];

39 
	#FP_SOFT_SIZE
 35

	)

41 
	sÂ_so·_°ru˘
 {

42 
	mßve
[
FP_SOFT_SIZE
];

45 
	#IWMMXT_SIZE
 0x98

	)

47 
	siwmmxt_°ru˘
 {

48 
	mßve
[
IWMMXT_SIZE
 / ()];

51 
	uÂ_°©e
 {

52 
Â_h¨d_°ru˘
 
	mh¨d
;

53 
Â_so·_°ru˘
 
	mso·
;

56 
	#FP_SIZE
 ((
Â_°©e
Ë/ ())

	)

58 
	s¸unch_°©e
 {

59 
	mmvdx
[16][2];

60 
	mmvax
[4][3];

61 
	md•sc
[2];

64 
	#CRUNCH_SIZE
 (
¸unch_°©e
)

	)

	@asm/glue.h

	@asm/hardirq.h

12 #i‚de‡
__ASM_HARDIRQ_H


13 
	#__ASM_HARDIRQ_H


	)

15 
	~<löux/ˇche.h
>

16 
	~<löux/thªads.h
>

17 
	~<asm/úq.h
>

20 
	m__so·úq_≥ndög
;

21 
	mloˇl_timî_úqs
;

22 } 
	t____ˇchñöe_Æig√d
 
	túq_˝u°©_t
;

24 
	~<löux/úq_˝u°©.h
>

26 #i‡
NR_IRQS
 > 256

27 
	#HARDIRQ_BITS
 9

	)

29 
	#HARDIRQ_BITS
 8

	)

32 #i‡1 << 
HARDIRQ_BITS
 < 
NR_IRQS


33 #îr‹ 
HARDIRQ_BITS
 
is
 
too
 
low
!

36 
	#__ARCH_IRQ_EXIT_IRQS_DISABLED
 1

	)

	@asm/hardware.h

12 #i‚de‡
__ASM_HARDWARE_H


13 
	#__ASM_HARDWARE_H


	)

15 
	~<asm/¨ch/h¨dw¨e.h
>

	@asm/hw_irq.h

12 #i‚de‡
_ARCH_ARM_HW_IRQ_H


13 
	#_ARCH_ARM_HW_IRQ_H


	)

15 
	~<asm/mach/úq.h
>

	@asm/ide.h

12 #i‚de‡
__ASMARM_IDE_H


13 
	#__ASMARM_IDE_H


	)

	@asm/io.h

12 #i‚de‡
__ASM_ARM_IO_H


13 
	#__ASM_ARM_IO_H


	)

	@asm/ioctl.h

12 
	~<asm-gíîic/io˘l.h
>

	@asm/ioctls.h

12 #i‚de‡
__ASM_ARM_IOCTLS_H


13 
	#__ASM_ARM_IOCTLS_H


	)

15 
	~<asm/io˘l.h
>

17 
	#TCGETS
 0x5401

	)

18 
	#TCSETS
 0x5402

	)

19 
	#TCSETSW
 0x5403

	)

20 
	#TCSETSF
 0x5404

	)

21 
	#TCGETA
 0x5405

	)

22 
	#TCSETA
 0x5406

	)

23 
	#TCSETAW
 0x5407

	)

24 
	#TCSETAF
 0x5408

	)

25 
	#TCSBRK
 0x5409

	)

26 
	#TCXONC
 0x540A

	)

27 
	#TCFLSH
 0x540B

	)

28 
	#TIOCEXCL
 0x540C

	)

29 
	#TIOCNXCL
 0x540D

	)

30 
	#TIOCSCTTY
 0x540E

	)

31 
	#TIOCGPGRP
 0x540F

	)

32 
	#TIOCSPGRP
 0x5410

	)

33 
	#TIOCOUTQ
 0x5411

	)

34 
	#TIOCSTI
 0x5412

	)

35 
	#TIOCGWINSZ
 0x5413

	)

36 
	#TIOCSWINSZ
 0x5414

	)

37 
	#TIOCMGET
 0x5415

	)

38 
	#TIOCMBIS
 0x5416

	)

39 
	#TIOCMBIC
 0x5417

	)

40 
	#TIOCMSET
 0x5418

	)

41 
	#TIOCGSOFTCAR
 0x5419

	)

42 
	#TIOCSSOFTCAR
 0x541A

	)

43 
	#FIONREAD
 0x541B

	)

44 
	#TIOCINQ
 
FIONREAD


	)

45 
	#TIOCLINUX
 0x541C

	)

46 
	#TIOCCONS
 0x541D

	)

47 
	#TIOCGSERIAL
 0x541E

	)

48 
	#TIOCSSERIAL
 0x541F

	)

49 
	#TIOCPKT
 0x5420

	)

50 
	#FIONBIO
 0x5421

	)

51 
	#TIOCNOTTY
 0x5422

	)

52 
	#TIOCSETD
 0x5423

	)

53 
	#TIOCGETD
 0x5424

	)

54 
	#TCSBRKP
 0x5425

	)

55 
	#TIOCSBRK
 0x5427

	)

56 
	#TIOCCBRK
 0x5428

	)

57 
	#TIOCGSID
 0x5429

	)

58 
	#TIOCGPTN
 
	`_IOR
('T',0x30, )

	)

59 
	#TIOCSPTLCK
 
	`_IOW
('T',0x31, )

	)

61 
	#FIONCLEX
 0x5450

	)

62 
	#FIOCLEX
 0x5451

	)

63 
	#FIOASYNC
 0x5452

	)

64 
	#TIOCSERCONFIG
 0x5453

	)

65 
	#TIOCSERGWILD
 0x5454

	)

66 
	#TIOCSERSWILD
 0x5455

	)

67 
	#TIOCGLCKTRMIOS
 0x5456

	)

68 
	#TIOCSLCKTRMIOS
 0x5457

	)

69 
	#TIOCSERGSTRUCT
 0x5458

	)

70 
	#TIOCSERGETLSR
 0x5459

	)

71 
	#TIOCSERGETMULTI
 0x545A

	)

72 
	#TIOCSERSETMULTI
 0x545B

	)

74 
	#TIOCMIWAIT
 0x545C

	)

75 
	#TIOCGICOUNT
 0x545D

	)

76 
	#FIOQSIZE
 0x545E

	)

78 
	#TIOCPKT_DATA
 0

	)

79 
	#TIOCPKT_FLUSHREAD
 1

	)

80 
	#TIOCPKT_FLUSHWRITE
 2

	)

81 
	#TIOCPKT_STOP
 4

	)

82 
	#TIOCPKT_START
 8

	)

83 
	#TIOCPKT_NOSTOP
 16

	)

84 
	#TIOCPKT_DOSTOP
 32

	)

86 
	#TIOCSER_TEMT
 0x01

	)

	@asm/ipcbuf.h

12 #i‚de‡
__ASMARM_IPCBUF_H


13 
	#__ASMARM_IPCBUF_H


	)

15 
	sùc64_≥rm


17 
__kî√l_key_t
 
	mkey
;

18 
__kî√l_uid32_t
 
	muid
;

19 
__kî√l_gid32_t
 
	mgid
;

20 
__kî√l_uid32_t
 
	mcuid
;

21 
__kî√l_gid32_t
 
	mcgid
;

22 
__kî√l_mode_t
 
	mmode
;

23 
	m__∑d1
;

24 
	m£q
;

25 
	m__∑d2
;

26 
	m__unu£d1
;

27 
	m__unu£d2
;

	@asm/irq.h

12 #i‚de‡
__ASM_ARM_IRQ_H


13 
	#__ASM_ARM_IRQ_H


	)

15 
	~<asm/¨ch/úqs.h
>

17 #i‚de‡
úq_ˇn⁄iˇlize


18 
	#úq_ˇn⁄iˇlize
(
i
Ë(i)

	)

21 #i‚de‡
NR_IRQS


22 
	#NR_IRQS
 128

	)

25 #i‚de‡
NO_IRQ


26 
	#NO_IRQ
 (()(-1))

	)

29 
	gúqa˘i⁄
;

31 
	#__IRQT_FALEDGE
 
IRQ_TYPE_EDGE_FALLING


	)

32 
	#__IRQT_RISEDGE
 
IRQ_TYPE_EDGE_RISING


	)

33 
	#__IRQT_LOWLVL
 
IRQ_TYPE_LEVEL_LOW


	)

34 
	#__IRQT_HIGHLVL
 
IRQ_TYPE_LEVEL_HIGH


	)

36 
	#IRQT_NOEDGE
 (0)

	)

37 
	#IRQT_RISING
 (
__IRQT_RISEDGE
)

	)

38 
	#IRQT_FALLING
 (
__IRQT_FALEDGE
)

	)

39 
	#IRQT_BOTHEDGE
 (
__IRQT_RISEDGE
|
__IRQT_FALEDGE
)

	)

40 
	#IRQT_LOW
 (
__IRQT_LOWLVL
)

	)

41 
	#IRQT_HIGH
 (
__IRQT_HIGHLVL
)

	)

42 
	#IRQT_PROBE
 
IRQ_TYPE_PROBE


	)

	@asm/linkage.h

12 #i‚de‡
__ASM_LINKAGE_H


13 
	#__ASM_LINKAGE_H


	)

15 
	#__ALIGN
 .
Æign
 0

	)

16 
	#__ALIGN_STR
 ".Æig¿0"

	)

	@asm/local.h

12 
	~<asm-gíîic/loˇl.h
>

	@asm/locks.h

12 #i‚de‡
__ASM_PROC_LOCKS_H


13 
	#__ASM_PROC_LOCKS_H


	)

15 #i‡
__LINUX_ARM_ARCH__
 >= 6

17 
	#__down_›
(
±r
,
Áû
Ë({ 
__asm__
 
	`__vﬁ©ûe__
–"@ down_›\n" "1:ÜdªxÜr, [%0]\n" " subÜr,Ür, %1\n" " såex ip,Ür, [%0]\n" "Åeq ip, #0\n" " b√ 1b\n" "ÅeqÜr, #0\n" " movmi ip, %0\n" " blmi " #Áû : : "r" (±r), "I" (1Ë: "ù", "Ã", "cc"); 
	`smp_mb
(); })

	)

19 
	#__down_›_ªt
(
±r
,
Áû
Ë({ 
ªt
; 
__asm__
 
	`__vﬁ©ûe__
–"@ down_›_ªt\n" "1:ÜdªxÜr, [%1]\n" " subÜr,Ür, %2\n" " såex ip,Ür, [%1]\n" "Åeq ip, #0\n" " b√ 1b\n" "ÅeqÜr, #0\n" " movmi ip, %1\n" " mov∂ ip, #0\n" " blmi " #Áû "\n" " mov %0, ip" : "=&r" (ªtË: "r" (±r), "I" (1Ë: "ù", "Ã", "cc"); 
	`smp_mb
();Ñë; })

	)

21 
	#__up_›
(
±r
,
wake
Ë({ 
	`smp_mb
(); 
__asm__
 
	`__vﬁ©ûe__
–"@ up_›\n" "1:ÜdªxÜr, [%0]\n" "áddÜr,Ür, %1\n" " såex ip,Ür, [%0]\n" "Åeq ip, #0\n" " b√ 1b\n" " cmpÜr, #0\n" " movÀ ip, %0\n" " bŒe " #wakê: : "r" (±r), "I" (1Ë: "ù", "Ã", "cc"); })

	)

23 
	#RW_LOCK_BIAS
 0x01000000

	)

24 
	#RW_LOCK_BIAS_STR
 "0x01000000"

	)

26 
	#__down_›_wrôe
(
±r
,
Áû
Ë({ 
__asm__
 
	`__vﬁ©ûe__
–"@ down_›_wrôe\n" "1:ÜdªxÜr, [%0]\n" " subÜr,Ür, %1\n" " såex ip,Ür, [%0]\n" "Åeq ip, #0\n" " b√ 1b\n" "ÅeqÜr, #0\n" " mov√ ip, %0\n" " b e " #Áû : : "r" (±r), "I" (
RW_LOCK_BIAS
Ë: "ù", "Ã", "cc"); 
	`smp_mb
(); })

	)

28 
	#__up_›_wrôe
(
±r
,
wake
Ë({ 
	`smp_mb
(); 
__asm__
 
	`__vﬁ©ûe__
–"@ up_›_wrôe\n" "1:ÜdªxÜr, [%0]\n" "áddsÜr,Ür, %1\n" " såex ip,Ür, [%0]\n" "Åeq ip, #0\n" " b√ 1b\n" " movcs ip, %0\n" " blcs " #wakê: : "r" (±r), "I" (
RW_LOCK_BIAS
Ë: "ù", "Ã", "cc"); })

	)

30 
	#__down_›_ªad
(
±r
,
Áû
Ë
	`__down_›
’å, faû)

	)

32 
	#__up_›_ªad
(
±r
,
wake
Ë({ 
	`smp_mb
(); 
__asm__
 
	`__vﬁ©ûe__
–"@ up_›_ªad\n" "1:ÜdªxÜr, [%0]\n" "áddÜr,Ür, %1\n" " såex ip,Ür, [%0]\n" "Åeq ip, #0\n" " b√ 1b\n" "ÅeqÜr, #0\n" " moveq ip, %0\n" " bÀq " #wakê: : "r" (±r), "I" (1Ë: "ù", "Ã", "cc"); })

	)

36 
	#__down_›
(
±r
,
Áû
Ë({ 
__asm__
 
	`__vﬁ©ûe__
–"@ down_›\n" " mrs ip, cp§\n" " oºÜr, ip, #128\n" " m§ cp§_c,Ür\n" "ÜdrÜr, [%0]\n" " subsÜr,Ür, %1\n" " såÜr, [%0]\n" " m§ cp§_c, ip\n" " movmi ip, %0\n" " blmi " #Áû : : "r" (±r), "I" (1Ë: "ù", "Ã", "cc"); 
	`smp_mb
(); })

	)

38 
	#__down_›_ªt
(
±r
,
Áû
Ë({ 
ªt
; 
__asm__
 
	`__vﬁ©ûe__
–"@ down_›_ªt\n" " mrs ip, cp§\n" " oºÜr, ip, #128\n" " m§ cp§_c,Ür\n" "ÜdrÜr, [%1]\n" " subsÜr,Ür, %2\n" " såÜr, [%1]\n" " m§ cp§_c, ip\n" " movmi ip, %1\n" " mov∂ ip, #0\n" " blmi " #Áû "\n" " mov %0, ip" : "=&r" (ªtË: "r" (±r), "I" (1Ë: "ù", "Ã", "cc"); 
	`smp_mb
();Ñë; })

	)

40 
	#__up_›
(
±r
,
wake
Ë({ 
	`smp_mb
(); 
__asm__
 
	`__vﬁ©ûe__
–"@ up_›\n" " mrs ip, cp§\n" " oºÜr, ip, #128\n" " m§ cp§_c,Ür\n" "ÜdrÜr, [%0]\n" "áddsÜr,Ür, %1\n" " såÜr, [%0]\n" " m§ cp§_c, ip\n" " movÀ ip, %0\n" " bŒe " #wakê: : "r" (±r), "I" (1Ë: "ù", "Ã", "cc"); })

	)

42 
	#RW_LOCK_BIAS
 0x01000000

	)

43 
	#RW_LOCK_BIAS_STR
 "0x01000000"

	)

45 
	#__down_›_wrôe
(
±r
,
Áû
Ë({ 
__asm__
 
	`__vﬁ©ûe__
–"@ down_›_wrôe\n" " mrs ip, cp§\n" " oºÜr, ip, #128\n" " m§ cp§_c,Ür\n" "ÜdrÜr, [%0]\n" " subsÜr,Ür, %1\n" " såÜr, [%0]\n" " m§ cp§_c, ip\n" " mov√ ip, %0\n" " b e " #Áû : : "r" (±r), "I" (
RW_LOCK_BIAS
Ë: "ù", "Ã", "cc"); 
	`smp_mb
(); })

	)

47 
	#__up_›_wrôe
(
±r
,
wake
Ë({ 
__asm__
 
	`__vﬁ©ûe__
–"@ up_›_wrôe\n" " mrs ip, cp§\n" " oºÜr, ip, #128\n" " m§ cp§_c,Ür\n" "ÜdrÜr, [%0]\n" "áddsÜr,Ür, %1\n" " såÜr, [%0]\n" " m§ cp§_c, ip\n" " movcs ip, %0\n" " blcs " #wakê: : "r" (±r), "I" (
RW_LOCK_BIAS
Ë: "ù", "Ã", "cc"); 
	`smp_mb
(); })

	)

49 
	#__down_›_ªad
(
±r
,
Áû
Ë
	`__down_›
’å, faû)

	)

51 
	#__up_›_ªad
(
±r
,
wake
Ë({ 
	`smp_mb
(); 
__asm__
 
	`__vﬁ©ûe__
–"@ up_›_ªad\n" " mrs ip, cp§\n" " oºÜr, ip, #128\n" " m§ cp§_c,Ür\n" "ÜdrÜr, [%0]\n" "áddsÜr,Ür, %1\n" " såÜr, [%0]\n" " m§ cp§_c, ip\n" " moveq ip, %0\n" " bÀq " #wakê: : "r" (±r), "I" (1Ë: "ù", "Ã", "cc"); })

	)

	@asm/mc146818rtc.h

12 #i‚de‡
_ASM_MC146818RTC_H


13 
	#_ASM_MC146818RTC_H


	)

15 
	~<asm/¨ch/úqs.h
>

16 
	~<asm/io.h
>

18 #i‚de‡
RTC_PORT


19 
	#RTC_PORT
(
x
Ë(0x70 + (x))

	)

20 
	#RTC_ALWAYS_BCD
 1

	)

23 
	#CMOS_READ
(
addr
Ë({ 
	`outb_p
(◊ddr),
	`RTC_PORT
(0)); 
	`öb_p
(RTC_PORT(1)); })

	)

24 
	#CMOS_WRITE
(
vÆ
, 
addr
Ë({ 
	`outb_p
(◊ddr),
	`RTC_PORT
(0)); outb_p((vÆ),RTC_PORT(1)); })

	)

	@asm/memory.h

12 #i‚de‡
__ASM_ARM_MEMORY_H


13 
	#__ASM_ARM_MEMORY_H


	)

15 #i‚de‡
__ASSEMBLY__


16 
	#UL
(
x
Ë(x##
UL
)

	)

18 
	#UL
(
x
Ë(x)

	)

21 
	~<löux/compûî.h
>

22 
	~<asm/¨ch/mem‹y.h
>

23 
	~<asm/sizes.h
>

25 #i‚de‡
TASK_SIZE


26 
	#TASK_SIZE
 (
CONFIG_DRAM_SIZE
)

	)

29 #i‚de‡
TASK_UNMAPPED_BASE


30 
	#TASK_UNMAPPED_BASE
 
	`UL
(0x00000000)

	)

33 #i‚de‡
PHYS_OFFSET


34 
	#PHYS_OFFSET
 (
CONFIG_DRAM_BASE
)

	)

37 #i‚de‡
END_MEM


38 
	#END_MEM
 (
CONFIG_DRAM_BASE
 + 
CONFIG_DRAM_SIZE
)

	)

41 #i‚de‡
PAGE_OFFSET


42 
	#PAGE_OFFSET
 (
PHYS_OFFSET
)

	)

45 
	#MODULE_END
 (
END_MEM
)

	)

46 
	#MODULE_START
 (
PHYS_OFFSET
)

	)

48 #i‚de‡
CONSISTENT_DMA_SIZE


49 
	#CONSISTENT_DMA_SIZE
 
SZ_2M


	)

52 #i‚de‡
__vút_to_phys


53 
	#__vút_to_phys
(
x
Ë((xË- 
PAGE_OFFSET
 + 
PHYS_OFFSET
)

	)

54 
	#__phys_to_vút
(
x
Ë((xË- 
PHYS_OFFSET
 + 
PAGE_OFFSET
)

	)

57 
	#__phys_to_p‚
(
∑ddr
Ë(’addrË>> 
PAGE_SHIFT
)

	)

58 
	#__p‚_to_phys
(
p‚
Ë(’‚Ë<< 
PAGE_SHIFT
)

	)

60 #i‚de‡
__ASSEMBLY__


62 #i‚de‡
ISA_DMA_THRESHOLD


63 
	#ISA_DMA_THRESHOLD
 (0xffffffffULL)

	)

66 #i‚de‡
¨ch_adju°_z⁄es


67 
	#¨ch_adju°_z⁄es
(
node
,
size
,
hﬁes
Ëdÿ{ } 0)

	)

70 
	#PHYS_PFN_OFFSET
 (
PHYS_OFFSET
 >> 
PAGE_SHIFT
)

	)

72 
	#__∑
(
x
Ë
	`__vút_to_phys
(()(x))

	)

73 
	#__va
(
x
Ë((*)
	`__phys_to_vút
(()(x)))

	)

74 
	#p‚_to_kaddr
(
p‚
Ë
	`__va
(’‚Ë<< 
PAGE_SHIFT
)

	)

75 
	#ARCH_PFN_OFFSET
 
PHYS_PFN_OFFSET


	)

76 
	#p‚_vÆid
(
p‚
Ë(’‚Ë>
PHYS_PFN_OFFSET
 && (p‚Ë< (PHYS_PFN_OFFSET + 
max_m≠ƒ
))

	)

77 
	#vút_to_∑ge
(
kaddr
Ë
	`p‚_to_∑ge
(
	`__∑
(kaddrË>> 
PAGE_SHIFT
)

	)

78 
	#vút_addr_vÆid
(
kaddr
Ë(()(kaddrË>
PAGE_OFFSET
 && ()(kaddrË< ()
high_mem‹y
)

	)

79 
	#PHYS_TO_NID
(
addr
Ë(0)

	)

80 
	#∑ge_to_phys
(
∑ge
Ë(
	`∑ge_to_p‚
’ageË<< 
PAGE_SHIFT
)

	)

81 #i‚de‡
__¨ch_∑ge_to_dma


82 
	#∑ge_to_dma
(
dev
, 
∑ge
Ë((
dma_addr_t
)
	`__vút_to_bus
(()
	`∑ge_addªss
’age)))

	)

83 
	#dma_to_vút
(
dev
, 
addr
Ë((*)
	`__bus_to_vút
◊ddr))

	)

84 
	#vút_to_dma
(
dev
, 
addr
Ë((
dma_addr_t
)
	`__vút_to_bus
(()◊ddr)))

	)

86 
	#∑ge_to_dma
(
dev
, 
∑ge
Ë(
	`__¨ch_∑ge_to_dma
(dev,Öage))

	)

87 
	#dma_to_vút
(
dev
, 
addr
Ë(
	`__¨ch_dma_to_vút
(dev,áddr))

	)

88 
	#vút_to_dma
(
dev
, 
addr
Ë(
	`__¨ch_vút_to_dma
(dev,áddr))

	)

90 #i‚de‡
¨ch_is_cohîít


91 
	#¨ch_is_cohîít
(Ë0

	)

94 
	~<asm-gíîic/mem‹y_modñ.h
>

	@asm/mman.h

12 #i‚de‡
__ARM_MMAN_H__


13 
	#__ARM_MMAN_H__


	)

15 
	~<asm-gíîic/mm™.h
>

17 
	#MAP_GROWSDOWN
 0x0100

	)

18 
	#MAP_DENYWRITE
 0x0800

	)

19 
	#MAP_EXECUTABLE
 0x1000

	)

20 
	#MAP_LOCKED
 0x2000

	)

21 
	#MAP_NORESERVE
 0x4000

	)

22 
	#MAP_POPULATE
 0x8000

	)

23 
	#MAP_NONBLOCK
 0x10000

	)

25 
	#MCL_CURRENT
 1

	)

26 
	#MCL_FUTURE
 2

	)

	@asm/module.h

12 #i‚de‡
_ASM_ARM_MODULE_H


13 
	#_ASM_ARM_MODULE_H


	)

15 
	smod_¨ch_•ecific


17 
	mfoo
;

20 
	#Elf_Shdr
 
Elf32_Shdr


	)

21 
	#Elf_Sym
 
Elf32_Sym


	)

22 
	#Elf_Ehdr
 
Elf32_Ehdr


	)

24 
	#MODULE_ARCH_VERMAGIC
 "ARMv" 
	`__°rögify
(
__LINUX_ARM_ARCH__
Ë" "

	)

	@asm/msgbuf.h

12 #i‚de‡
_ASMARM_MSGBUF_H


13 
	#_ASMARM_MSGBUF_H


	)

15 
	smsqid64_ds
 {

16 
ùc64_≥rm
 
	mmsg_≥rm
;

17 
__kî√l_time_t
 
	mmsg_°ime
;

18 
	m__unu£d1
;

19 
__kî√l_time_t
 
	mmsg_πime
;

20 
	m__unu£d2
;

21 
__kî√l_time_t
 
	mmsg_˘ime
;

22 
	m__unu£d3
;

23 
	mmsg_cbyãs
;

24 
	mmsg_qnum
;

25 
	mmsg_qbyãs
;

26 
__kî√l_pid_t
 
	mmsg_l•id
;

27 
__kî√l_pid_t
 
	mmsg_Ãpid
;

28 
	m__unu£d4
;

29 
	m__unu£d5
;

	@asm/mtd-xip.h

12 #i‚de‡
__ARM_MTD_XIP_H__


13 
	#__ARM_MTD_XIP_H__


	)

15 
	~<asm/h¨dw¨e.h
>

16 
	~<asm/¨ch/mtd-xù.h
>

18 
	#xù_ùª„tch
(Ëdÿ{ 
asm
 vﬁ©ûê(".ª∞8;Ç›; .ídr"); } 0)

	)

	@asm/page.h

12 #i‚de‡
_ASMARM_PAGE_H


13 
	#_ASMARM_PAGE_H


	)

15 
	#PAGE_SHIFT
 12

	)

16 
	#PAGE_SIZE
 (1UL << 
PAGE_SHIFT
)

	)

17 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

	@asm/param.h

12 #i‚de‡
__ASM_PARAM_H


13 
	#__ASM_PARAM_H


	)

15 
	#HZ
 100

	)

17 
	#EXEC_PAGESIZE
 4096

	)

19 #i‚de‡
NOGROUP


20 
	#NOGROUP
 (-1)

	)

	@asm/percpu.h

12 #i‚de‡
__ARM_PERCPU


13 
	#__ARM_PERCPU


	)

15 
	~<asm-gíîic/≥r˝u.h
>

	@asm/pgalloc.h

12 #i‚de‡
_ASMARM_PGALLOC_H


13 
	#_ASMARM_PGALLOC_H


	)

15 
	~<asm/domaö.h
>

16 
	~<asm/pgèbÀ-hwdef.h
>

17 
	~<asm/¥o˚ss‹.h
>

18 
	~<asm/ˇcheÊush.h
>

19 
	~<asm/ébÊush.h
>

21 
	#check_pgt_ˇche
(Ëdÿ{ } 0)

	)

	@asm/pgtable-hwdef.h

12 #i‚de‡
_ASMARM_PGTABLE_HWDEF_H


13 
	#_ASMARM_PGTABLE_HWDEF_H


	)

15 
	#PMD_TYPE_MASK
 (3 << 0)

	)

16 
	#PMD_TYPE_FAULT
 (0 << 0)

	)

17 
	#PMD_TYPE_TABLE
 (1 << 0)

	)

18 
	#PMD_TYPE_SECT
 (2 << 0)

	)

19 
	#PMD_BIT4
 (1 << 4)

	)

20 
	#PMD_DOMAIN
(
x
Ë((xË<< 5)

	)

21 
	#PMD_PROTECTION
 (1 << 9)

	)

23 
	#PMD_SECT_BUFFERABLE
 (1 << 2)

	)

24 
	#PMD_SECT_CACHEABLE
 (1 << 3)

	)

25 
	#PMD_SECT_XN
 (1 << 4)

	)

26 
	#PMD_SECT_AP_WRITE
 (1 << 10)

	)

27 
	#PMD_SECT_AP_READ
 (1 << 11)

	)

28 
	#PMD_SECT_TEX
(
x
Ë((xË<< 12)

	)

29 
	#PMD_SECT_APX
 (1 << 15)

	)

30 
	#PMD_SECT_S
 (1 << 16)

	)

31 
	#PMD_SECT_nG
 (1 << 17)

	)

32 
	#PMD_SECT_SUPER
 (1 << 18)

	)

34 
	#PMD_SECT_UNCACHED
 (0)

	)

35 
	#PMD_SECT_BUFFERED
 (
PMD_SECT_BUFFERABLE
)

	)

36 
	#PMD_SECT_WT
 (
PMD_SECT_CACHEABLE
)

	)

37 
	#PMD_SECT_WB
 (
PMD_SECT_CACHEABLE
 | 
PMD_SECT_BUFFERABLE
)

	)

38 
	#PMD_SECT_MINICACHE
 (
	`PMD_SECT_TEX
(1Ë| 
PMD_SECT_CACHEABLE
)

	)

39 
	#PMD_SECT_WBWA
 (
	`PMD_SECT_TEX
(1Ë| 
PMD_SECT_CACHEABLE
 | 
PMD_SECT_BUFFERABLE
)

	)

40 
	#PMD_SECT_NONSHARED_DEV
 (
	`PMD_SECT_TEX
(2))

	)

42 
	#PTE_TYPE_MASK
 (3 << 0)

	)

43 
	#PTE_TYPE_FAULT
 (0 << 0)

	)

44 
	#PTE_TYPE_LARGE
 (1 << 0)

	)

45 
	#PTE_TYPE_SMALL
 (2 << 0)

	)

46 
	#PTE_TYPE_EXT
 (3 << 0)

	)

47 
	#PTE_BUFFERABLE
 (1 << 2)

	)

48 
	#PTE_CACHEABLE
 (1 << 3)

	)

50 
	#PTE_EXT_XN
 (1 << 0)

	)

51 
	#PTE_EXT_AP_MASK
 (3 << 4)

	)

52 
	#PTE_EXT_AP0
 (1 << 4)

	)

53 
	#PTE_EXT_AP1
 (2 << 4)

	)

54 
	#PTE_EXT_AP_UNO_SRO
 (0 << 4)

	)

55 
	#PTE_EXT_AP_UNO_SRW
 (
PTE_EXT_AP0
)

	)

56 
	#PTE_EXT_AP_URO_SRW
 (
PTE_EXT_AP1
)

	)

57 
	#PTE_EXT_AP_URW_SRW
 (
PTE_EXT_AP1
|
PTE_EXT_AP0
)

	)

58 
	#PTE_EXT_TEX
(
x
Ë((xË<< 6)

	)

59 
	#PTE_EXT_APX
 (1 << 9)

	)

60 
	#PTE_EXT_COHERENT
 (1 << 9)

	)

61 
	#PTE_EXT_SHARED
 (1 << 10)

	)

62 
	#PTE_EXT_NG
 (1 << 11)

	)

64 
	#PTE_SMALL_AP_MASK
 (0xf‡<< 4)

	)

65 
	#PTE_SMALL_AP_UNO_SRO
 (0x00 << 4)

	)

66 
	#PTE_SMALL_AP_UNO_SRW
 (0x55 << 4)

	)

67 
	#PTE_SMALL_AP_URO_SRW
 (0xØ << 4)

	)

68 
	#PTE_SMALL_AP_URW_SRW
 (0xf‡<< 4)

	)

	@asm/pgtable.h

12 #i‚de‡
_ASMARM_PGTABLE_H


13 
	#_ASMARM_PGTABLE_H


	)

15 
	~<asm-gíîic/4Àvñ-fixup.h
>

16 
	~<asm/¥oc-‚s.h
>

18 
	~"pgèbÀ-nommu.h
"

	@asm/poll.h

12 #i‚de‡
__ASMARM_POLL_H


13 
	#__ASMARM_POLL_H


	)

15 
	#POLLIN
 0x0001

	)

16 
	#POLLPRI
 0x0002

	)

17 
	#POLLOUT
 0x0004

	)

18 
	#POLLERR
 0x0008

	)

19 
	#POLLHUP
 0x0010

	)

20 
	#POLLNVAL
 0x0020

	)

22 
	#POLLRDNORM
 0x0040

	)

23 
	#POLLRDBAND
 0x0080

	)

24 
	#POLLWRNORM
 0x0100

	)

25 
	#POLLWRBAND
 0x0200

	)

26 
	#POLLMSG
 0x0400

	)

27 
	#POLLREMOVE
 0x1000

	)

28 
	#POLLRDHUP
 0x2000

	)

30 
	spﬁlfd
 {

31 
	mfd
;

32 
	mevíts
;

33 
	mªvíts
;

	@asm/posix_types.h

12 #i‚de‡
__ARCH_ARM_POSIX_TYPES_H


13 
	#__ARCH_ARM_POSIX_TYPES_H


	)

15 
	t__kî√l_öo_t
;

16 
	t__kî√l_mode_t
;

17 
	t__kî√l_∆ök_t
;

18 
	t__kî√l_off_t
;

19 
	t__kî√l_pid_t
;

20 
	t__kî√l_ùc_pid_t
;

21 
	t__kî√l_uid_t
;

22 
	t__kî√l_gid_t
;

23 
	t__kî√l_size_t
;

24 
	t__kî√l_ssize_t
;

25 
	t__kî√l_±rdiff_t
;

26 
	t__kî√l_time_t
;

27 
	t__kî√l_su£c⁄ds_t
;

28 
	t__kî√l_˛ock_t
;

29 
	t__kî√l_timî_t
;

30 
	t__kî√l_˛ockid_t
;

31 
	t__kî√l_daddr_t
;

32 * 
	t__kî√l_ˇddr_t
;

33 
	t__kî√l_uid16_t
;

34 
	t__kî√l_gid16_t
;

35 
	t__kî√l_uid32_t
;

36 
	t__kî√l_gid32_t
;

38 
	t__kî√l_ﬁd_uid_t
;

39 
	t__kî√l_ﬁd_gid_t
;

40 
	t__kî√l_ﬁd_dev_t
;

42 #ifde‡
__GNUC__


43 
	t__kî√l_loff_t
;

47 #ifde‡
__USE_ALL


48 
	mvÆ
[2];

50 
	m__vÆ
[2];

52 } 
	t__kî√l_fsid_t
;

54 #i‡!
deföed
(
__GLIBC__
) || __GLIBC__ < 2

56 #unde‡
__FD_SET


57 
	#__FD_SET
(
fd
, 
fd£ç
Ë(((
fd_£t
 *)(fd£ç))->
fds_bôs
[(fdË>> 5] |(1<<((fdË& 31)))

	)

59 #unde‡
__FD_CLR


60 
	#__FD_CLR
(
fd
, 
fd£ç
Ë(((
fd_£t
 *)(fd£ç))->
fds_bôs
[(fdË>> 5] &~(1<<((fdË& 31)))

	)

62 #unde‡
__FD_ISSET


63 
	#__FD_ISSET
(
fd
, 
fd£ç
Ë((((
fd_£t
 *)(fd£ç))->
fds_bôs
[(fdË>> 5] & (1<<((fdË& 31))Ë!0)

	)

65 #unde‡
__FD_ZERO


66 
	#__FD_ZERO
(
fd£ç
Ë(
	`mem£t
 (fd£ç, 0,  (*(
fd_£t
 *)(fd£ç))))

	)

	@asm/proc-fns.h

12 #i‚de‡
__ASM_PROCFNS_H


13 
	#__ASM_PROCFNS_H


	)

	@asm/processor.h

12 #i‚de‡
__ASM_ARM_PROCESSOR_H


13 
	#__ASM_ARM_PROCESSOR_H


	)

15 
	#cuºít_ãxt_addr
(Ë({ 
__œbñ__
 
_l
; _l: &&_l;})

	)

	@asm/procinfo.h

12 #i‚de‡
__ASM_PROCINFO_H


13 
	#__ASM_PROCINFO_H


	)

15 #i‚de‡
__ASSEMBLY__


17 
	g˝u_éb_‚s
;

18 
	g˝u_u£r_‚s
;

19 
	g˝u_ˇche_‚s
;

20 
	g¥o˚ss‹
;

22 
	s¥oc_öfo_li°
 {

23 
	m˝u_vÆ
;

24 
	m˝u_mask
;

25 
	m__˝u_mm_mmu_Êags
;

26 
	m__˝u_io_mmu_Êags
;

27 
	m__˝u_Êush
;

28 c⁄° *
	m¨ch_«me
;

29 c⁄° *
	mñf_«me
;

30 
	mñf_hwˇp
;

31 c⁄° *
	m˝u_«me
;

32 
¥o˚ss‹
 *
	m¥oc
;

33 
˝u_éb_‚s
 *
	méb
;

34 
˝u_u£r_‚s
 *
	mu£r
;

35 
˝u_ˇche_‚s
 *
	mˇche
;

40 
	#HWCAP_SWP
 1

	)

41 
	#HWCAP_HALF
 2

	)

42 
	#HWCAP_THUMB
 4

	)

43 
	#HWCAP_26BIT
 8

	)

44 
	#HWCAP_FAST_MULT
 16

	)

45 
	#HWCAP_FPA
 32

	)

46 
	#HWCAP_VFP
 64

	)

47 
	#HWCAP_EDSP
 128

	)

48 
	#HWCAP_JAVA
 256

	)

49 
	#HWCAP_IWMMXT
 512

	)

	@asm/ptrace.h

12 #i‚de‡
__ASM_ARM_PTRACE_H


13 
	#__ASM_ARM_PTRACE_H


	)

15 
	#PTRACE_GETREGS
 12

	)

16 
	#PTRACE_SETREGS
 13

	)

17 
	#PTRACE_GETFPREGS
 14

	)

18 
	#PTRACE_SETFPREGS
 15

	)

20 
	#PTRACE_GETWMMXREGS
 18

	)

21 
	#PTRACE_SETWMMXREGS
 19

	)

23 
	#PTRACE_OLDSETOPTIONS
 21

	)

25 
	#PTRACE_GET_THREAD_AREA
 22

	)

27 
	#PTRACE_SET_SYSCALL
 23

	)

29 
	#PTRACE_GETCRUNCHREGS
 25

	)

30 
	#PTRACE_SETCRUNCHREGS
 26

	)

32 
	#PTRACE_GETVFPREGS
 27

	)

33 
	#PTRACE_SETVFPREGS
 28

	)

35 
	#USR26_MODE
 0x00000000

	)

36 
	#FIQ26_MODE
 0x00000001

	)

37 
	#IRQ26_MODE
 0x00000002

	)

38 
	#SVC26_MODE
 0x00000003

	)

39 
	#USR_MODE
 0x00000010

	)

40 
	#FIQ_MODE
 0x00000011

	)

41 
	#IRQ_MODE
 0x00000012

	)

42 
	#SVC_MODE
 0x00000013

	)

43 
	#ABT_MODE
 0x00000017

	)

44 
	#UND_MODE
 0x0000001b

	)

45 
	#SYSTEM_MODE
 0x0000001f

	)

46 
	#MODE32_BIT
 0x00000010

	)

47 
	#MODE_MASK
 0x0000001f

	)

48 
	#PSR_T_BIT
 0x00000020

	)

49 
	#PSR_F_BIT
 0x00000040

	)

50 
	#PSR_I_BIT
 0x00000080

	)

51 
	#PSR_J_BIT
 0x01000000

	)

52 
	#PSR_Q_BIT
 0x08000000

	)

53 
	#PSR_V_BIT
 0x10000000

	)

54 
	#PSR_C_BIT
 0x20000000

	)

55 
	#PSR_Z_BIT
 0x40000000

	)

56 
	#PSR_N_BIT
 0x80000000

	)

57 
	#PCMASK
 0

	)

59 
	#PSR_f
 0xff000000

	)

60 
	#PSR_s
 0x00ff0000

	)

61 
	#PSR_x
 0x0000ff00

	)

62 
	#PSR_c
 0x000000ff

	)

64 #i‚de‡
__ASSEMBLY__


66 
	s±_ªgs
 {

67 
	muªgs
[18];

70 
	#ARM_˝§
 
uªgs
[16]

	)

71 
	#ARM_pc
 
uªgs
[15]

	)

72 
	#ARM_Ã
 
uªgs
[14]

	)

73 
	#ARM_•
 
uªgs
[13]

	)

74 
	#ARM_ù
 
uªgs
[12]

	)

75 
	#ARM_Â
 
uªgs
[11]

	)

76 
	#ARM_r10
 
uªgs
[10]

	)

77 
	#ARM_r9
 
uªgs
[9]

	)

78 
	#ARM_r8
 
uªgs
[8]

	)

79 
	#ARM_r7
 
uªgs
[7]

	)

80 
	#ARM_r6
 
uªgs
[6]

	)

81 
	#ARM_r5
 
uªgs
[5]

	)

82 
	#ARM_r4
 
uªgs
[4]

	)

83 
	#ARM_r3
 
uªgs
[3]

	)

84 
	#ARM_r2
 
uªgs
[2]

	)

85 
	#ARM_r1
 
uªgs
[1]

	)

86 
	#ARM_r0
 
uªgs
[0]

	)

87 
	#ARM_ORIG_r0
 
uªgs
[17]

	)

89 
	#pc_poöãr
(
v
Ë((vË& ~
PCMASK
)

	)

91 
	#ö°ru˘i⁄_poöãr
(
ªgs
Ë(
	`pc_poöãr
(‘egs)->
ARM_pc
))

	)

93 
	#¥ofûe_pc
(
ªgs
Ë
	`ö°ru˘i⁄_poöãr
‘egs)

	)

	@asm/resource.h

12 #i‚de‡
_ARM_RESOURCE_H


13 
	#_ARM_RESOURCE_H


	)

15 
	~<asm-gíîic/ªsour˚.h
>

	@asm/scatterlist.h

12 #i‚de‡
_ASMARM_SCATTERLIST_H


13 
	#_ASMARM_SCATTERLIST_H


	)

15 
	~<asm/mem‹y.h
>

16 
	~<asm/ty≥s.h
>

18 
	ssˇâîli°
 {

19 
∑ge
 *
	m∑ge
;

20 
	moff£t
;

21 
dma_addr_t
 
	mdma_addªss
;

22 
	mÀngth
;

25 
	#sg_dma_addªss
(
sg
Ë((sg)->
dma_addªss
)

	)

26 
	#sg_dma_Àn
(
sg
Ë((sg)->
Àngth
)

	)

	@asm/semaphore.h

12 #i‚de‡
__ASM_ARM_SEMAPHORE_H


13 
	#__ASM_ARM_SEMAPHORE_H


	)

15 
	~<löux/lökage.h
>

16 
	~<löux/•ölock.h
>

17 
	~<löux/waô.h
>

18 
	~<löux/rw£m.h
>

20 
	~<asm/©omic.h
>

21 
	~<asm/locks.h
>

23 
	s£m≠h‹e
 {

24 
©omic_t
 
	mcou¡
;

25 
	m¶ì≥rs
;

26 
waô_queue_hód_t
 
	mwaô
;

29 
	#__SEMAPHORE_INIT
(
«me
, 
˙t
Ë{ .
cou¡
 = 
	`ATOMIC_INIT
(˙t), .
waô
 = 
	`__WAIT_QUEUE_HEAD_INITIALIZER
(“ame).waô), }

	)

31 
	#__DECLARE_SEMAPHORE_GENERIC
(
«me
,
cou¡
Ë
£m≠h‹e
Çamê
	`__SEMAPHORE_INIT
“ame,cou¡)

	)

33 
	#DECLARE_MUTEX
(
«me
Ë
	`__DECLARE_SEMAPHORE_GENERIC
“ame,1)

	)

34 
	#DECLARE_MUTEX_LOCKED
(
«me
Ë
	`__DECLARE_SEMAPHORE_GENERIC
“ame,0)

	)

	@asm/sembuf.h

12 #i‚de‡
_ASMARM_SEMBUF_H


13 
	#_ASMARM_SEMBUF_H


	)

15 
	s£mid64_ds
 {

16 
ùc64_≥rm
 
	m£m_≥rm
;

17 
__kî√l_time_t
 
	m£m_Ÿime
;

18 
	m__unu£d1
;

19 
__kî√l_time_t
 
	m£m_˘ime
;

20 
	m__unu£d2
;

21 
	m£m_n£ms
;

22 
	m__unu£d3
;

23 
	m__unu£d4
;

	@asm/shmbuf.h

12 #i‚de‡
_ASMARM_SHMBUF_H


13 
	#_ASMARM_SHMBUF_H


	)

15 
	sshmid64_ds
 {

16 
ùc64_≥rm
 
	mshm_≥rm
;

17 
size_t
 
	mshm_£gsz
;

18 
__kî√l_time_t
 
	mshm_©ime
;

19 
	m__unu£d1
;

20 
__kî√l_time_t
 
	mshm_dtime
;

21 
	m__unu£d2
;

22 
__kî√l_time_t
 
	mshm_˘ime
;

23 
	m__unu£d3
;

24 
__kî√l_pid_t
 
	mshm_˝id
;

25 
__kî√l_pid_t
 
	mshm_Õid
;

26 
	mshm_«âch
;

27 
	m__unu£d4
;

28 
	m__unu£d5
;

31 
	sshmöfo64
 {

32 
	mshmmax
;

33 
	mshmmö
;

34 
	mshmmni
;

35 
	mshm£g
;

36 
	mshmÆl
;

37 
	m__unu£d1
;

38 
	m__unu£d2
;

39 
	m__unu£d3
;

40 
	m__unu£d4
;

	@asm/shmparam.h

12 #i‚de‡
_ASMARM_SHMPARAM_H


13 
	#_ASMARM_SHMPARAM_H


	)

15 
	#SHMLBA
 (4 * 
PAGE_SIZE
)

	)

17 
	#__ARCH_FORCE_SHMLBA


	)

	@asm/sigcontext.h

12 #i‚de‡
_ASMARM_SIGCONTEXT_H


13 
	#_ASMARM_SIGCONTEXT_H


	)

15 
	ssigc⁄ãxt
 {

16 
	må≠_no
;

17 
	mîr‹_code
;

18 
	mﬁdmask
;

19 
	m¨m_r0
;

20 
	m¨m_r1
;

21 
	m¨m_r2
;

22 
	m¨m_r3
;

23 
	m¨m_r4
;

24 
	m¨m_r5
;

25 
	m¨m_r6
;

26 
	m¨m_r7
;

27 
	m¨m_r8
;

28 
	m¨m_r9
;

29 
	m¨m_r10
;

30 
	m¨m_Â
;

31 
	m¨m_ù
;

32 
	m¨m_•
;

33 
	m¨m_Ã
;

34 
	m¨m_pc
;

35 
	m¨m_˝§
;

36 
	mÁu…_addªss
;

	@asm/siginfo.h

12 #i‚de‡
_ASMARM_SIGINFO_H


13 
	#_ASMARM_SIGINFO_H


	)

15 
	~<asm-gíîic/sigöfo.h
>

	@asm/signal.h

12 #i‚de‡
_ASMARM_SIGNAL_H


13 
	#_ASMARM_SIGNAL_H


	)

15 
	~<löux/ty≥s.h
>

17 
	gsigöfo
;

19 
	#NSIG
 32

	)

20 
	tsig£t_t
;

22 
	#SIGHUP
 1

	)

23 
	#SIGINT
 2

	)

24 
	#SIGQUIT
 3

	)

25 
	#SIGILL
 4

	)

26 
	#SIGTRAP
 5

	)

27 
	#SIGABRT
 6

	)

28 
	#SIGIOT
 6

	)

29 
	#SIGBUS
 7

	)

30 
	#SIGFPE
 8

	)

31 
	#SIGKILL
 9

	)

32 
	#SIGUSR1
 10

	)

33 
	#SIGSEGV
 11

	)

34 
	#SIGUSR2
 12

	)

35 
	#SIGPIPE
 13

	)

36 
	#SIGALRM
 14

	)

37 
	#SIGTERM
 15

	)

38 
	#SIGSTKFLT
 16

	)

39 
	#SIGCHLD
 17

	)

40 
	#SIGCONT
 18

	)

41 
	#SIGSTOP
 19

	)

42 
	#SIGTSTP
 20

	)

43 
	#SIGTTIN
 21

	)

44 
	#SIGTTOU
 22

	)

45 
	#SIGURG
 23

	)

46 
	#SIGXCPU
 24

	)

47 
	#SIGXFSZ
 25

	)

48 
	#SIGVTALRM
 26

	)

49 
	#SIGPROF
 27

	)

50 
	#SIGWINCH
 28

	)

51 
	#SIGIO
 29

	)

52 
	#SIGPOLL
 
SIGIO


	)

54 
	#SIGPWR
 30

	)

55 
	#SIGSYS
 31

	)

56 
	#SIGUNUSED
 31

	)

58 
	#SIGRTMIN
 32

	)

59 
	#SIGRTMAX
 
_NSIG


	)

61 
	#SIGSWI
 32

	)

63 
	#SA_NOCLDSTOP
 0x00000001

	)

64 
	#SA_NOCLDWAIT
 0x00000002

	)

65 
	#SA_SIGINFO
 0x00000004

	)

66 
	#SA_THIRTYTWO
 0x02000000

	)

67 
	#SA_RESTORER
 0x04000000

	)

68 
	#SA_ONSTACK
 0x08000000

	)

69 
	#SA_RESTART
 0x10000000

	)

70 
	#SA_NODEFER
 0x40000000

	)

71 
	#SA_RESETHAND
 0x80000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

76 
	#SS_ONSTACK
 1

	)

77 
	#SS_DISABLE
 2

	)

79 
	#MINSIGSTKSZ
 2048

	)

80 
	#SIGSTKSZ
 8192

	)

82 
	~<asm-gíîic/sig«l.h
>

84 
	ssiga˘i⁄
 {

86 
__sigh™dÀr_t
 
	m_ß_h™dÀr
;

87 (*
	m_ß_siga˘i⁄
)(, 
	msigöfo
 *, *);

88 } 
	m_u
;

89 
sig£t_t
 
	mß_mask
;

90 
	mß_Êags
;

91 (*
	mß_ª°‹î
)();

94 
	#ß_h™dÀr
 
_u
.
_ß_h™dÀr


	)

95 
	#ß_siga˘i⁄
 
_u
.
_ß_siga˘i⁄


	)

97 
	ssigÆt°ack
 {

98 
__u£r
 *
	mss_•
;

99 
	mss_Êags
;

100 
size_t
 
	mss_size
;

101 } 
	t°ack_t
;

	@asm/sizes.h

12 #i‚de‡
__sizes_h


13 
	#__sizes_h
 1

	)

15 
	#SZ_1K
 0x00000400

	)

16 
	#SZ_4K
 0x00001000

	)

17 
	#SZ_8K
 0x00002000

	)

18 
	#SZ_16K
 0x00004000

	)

19 
	#SZ_64K
 0x00010000

	)

20 
	#SZ_128K
 0x00020000

	)

21 
	#SZ_256K
 0x00040000

	)

22 
	#SZ_512K
 0x00080000

	)

24 
	#SZ_1M
 0x00100000

	)

25 
	#SZ_2M
 0x00200000

	)

26 
	#SZ_4M
 0x00400000

	)

27 
	#SZ_8M
 0x00800000

	)

28 
	#SZ_16M
 0x01000000

	)

29 
	#SZ_32M
 0x02000000

	)

30 
	#SZ_64M
 0x04000000

	)

31 
	#SZ_128M
 0x08000000

	)

32 
	#SZ_256M
 0x10000000

	)

33 
	#SZ_512M
 0x20000000

	)

35 
	#SZ_1G
 0x40000000

	)

36 
	#SZ_2G
 0x80000000

	)

	@asm/smp.h

12 #i‚de‡
__ASM_ARM_SMP_H


13 
	#__ASM_ARM_SMP_H


	)

15 
	~<löux/thªads.h
>

16 
	~<löux/˝umask.h
>

17 
	~<löux/thªad_öfo.h
>

19 
	~<asm/¨ch/smp.h
>

23 
	#øw_smp_¥o˚ss‹_id
(Ë(
	`cuºít_thªad_öfo
()->
˝u
)

	)

25 
	#PROC_CHANGE_PENALTY
 15

	)

27 
	g£q_fûe
;

29 
	s£c⁄d¨y_d©a
 {

30 
	mpgdú
;

31 *
	m°ack
;

	@asm/socket.h

19 #i‚de‡
_ASMARM_SOCKET_H


20 
	#_ASMARM_SOCKET_H


	)

21 
	~<asm/sockios.h
>

22 
	#SOL_SOCKET
 1

	)

24 
	#SO_DEBUG
 1

	)

25 
	#SO_REUSEADDR
 2

	)

26 
	#SO_TYPE
 3

	)

27 
	#SO_ERROR
 4

	)

29 
	#SO_DONTROUTE
 5

	)

30 
	#SO_BROADCAST
 6

	)

31 
	#SO_SNDBUF
 7

	)

32 
	#SO_RCVBUF
 8

	)

34 
	#SO_SNDBUFFORCE
 32

	)

35 
	#SO_RCVBUFFORCE
 33

	)

36 
	#SO_KEEPALIVE
 9

	)

37 
	#SO_OOBINLINE
 10

	)

39 
	#SO_NO_CHECK
 11

	)

40 
	#SO_PRIORITY
 12

	)

41 
	#SO_LINGER
 13

	)

42 
	#SO_BSDCOMPAT
 14

	)

44 
	#SO_PASSCRED
 16

	)

45 
	#SO_PEERCRED
 17

	)

46 
	#SO_RCVLOWAT
 18

	)

47 
	#SO_SNDLOWAT
 19

	)

49 
	#SO_RCVTIMEO
 20

	)

50 
	#SO_SNDTIMEO
 21

	)

51 
	#SO_SECURITY_AUTHENTICATION
 22

	)

52 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

54 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

55 
	#SO_BINDTODEVICE
 25

	)

56 
	#SO_ATTACH_FILTER
 26

	)

57 
	#SO_DETACH_FILTER
 27

	)

59 
	#SO_PEERNAME
 28

	)

60 
	#SO_TIMESTAMP
 29

	)

61 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

62 
	#SO_ACCEPTCONN
 30

	)

64 
	#SO_PEERSEC
 31

	)

65 
	#SO_PASSSEC
 34

	)

66 
	#SO_TIMESTAMPNS
 35

	)

67 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

69 
	#SO_MARK
 36

	)

70 
	#SO_TIMESTAMPING
 37

	)

71 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

72 
	#SO_PROTOCOL
 38

	)

74 
	#SO_DOMAIN
 39

	)

75 
	#SO_RXQ_OVFL
 40

	)

76 
	#SO_WIFI_STATUS
 41

	)

77 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

	@asm/sockios.h

12 #i‚de‡
__ARCH_ARM_SOCKIOS_H


13 
	#__ARCH_ARM_SOCKIOS_H


	)

15 
	#FIOSETOWN
 0x8901

	)

16 
	#SIOCSPGRP
 0x8902

	)

17 
	#FIOGETOWN
 0x8903

	)

18 
	#SIOCGPGRP
 0x8904

	)

19 
	#SIOCATMARK
 0x8905

	)

20 
	#SIOCGSTAMP
 0x8906

	)

	@asm/spinlock.h

12 #i‚de‡
__ASM_SPINLOCK_H


13 
	#__ASM_SPINLOCK_H


	)

15 #i‡
__LINUX_ARM_ARCH__
 < 6

16 #îr‹ 
SMP
 
nŸ
 
suµ‹ãd
 
⁄
 
¥e
-
ARMv6
 
CPUs


19 
	#__øw_•ö_is_locked
(
x
Ë((x)->
lock
 !0)

	)

20 
	#__øw_•ö_u∆ock_waô
(
lock
Ëdÿ{ 
	`__øw_•ö_is_locked
÷ock)Ë
	`˝u_ªœx
(); } 0)

	)

22 
	#__øw_•ö_lock_Êags
(
lock
, 
Êags
Ë
	`__øw_•ö_lock
÷ock)

	)

24 
	#rwlock_is_locked
(
x
Ë(*((vﬁ©ûê*)(x)Ë!0)

	)

25 
	#__øw_wrôe_ˇn_lock
(
x
Ë((x)->
lock
 =0x80000000)

	)

26 
	#__øw_ªad_ˇn_lock
(
x
Ë((x)->
lock
 < 0x80000000)

	)

	@asm/spinlock_types.h

12 #i‚de‡
__ASM_SPINLOCK_TYPES_H


13 
	#__ASM_SPINLOCK_TYPES_H


	)

15 #i‚de‡
__LINUX_SPINLOCK_TYPES_H


20 vﬁ©ûê
	mlock
;

21 } 
	tøw_•ölock_t
;

23 
	#__RAW_SPIN_LOCK_UNLOCKED
 { 0 }

	)

26 vﬁ©ûê
	mlock
;

27 } 
	tøw_rwlock_t
;

29 
	#__RAW_RW_LOCK_UNLOCKED
 { 0 }

	)

	@asm/stat.h

12 #i‚de‡
_ASMARM_STAT_H


13 
	#_ASMARM_STAT_H


	)

15 
	s__ﬁd_kî√l_°©
 {

16 
	m°_dev
;

17 
	m°_öo
;

18 
	m°_mode
;

19 
	m°_∆ök
;

20 
	m°_uid
;

21 
	m°_gid
;

22 
	m°_rdev
;

23 
	m°_size
;

24 
	m°_©ime
;

25 
	m°_mtime
;

26 
	m°_˘ime
;

29 
	#STAT_HAVE_NSEC


	)

31 
	s°©
 {

32 #ifde‡
__ARMEB__


33 
	m°_dev
;

34 
	m__∑d1
;

36 
	m°_dev
;

38 
	m°_öo
;

39 
	m°_mode
;

40 
	m°_∆ök
;

41 
	m°_uid
;

42 
	m°_gid
;

43 #ifde‡
__ARMEB__


44 
	m°_rdev
;

45 
	m__∑d2
;

47 
	m°_rdev
;

49 
	m°_size
;

50 
	m°_blksize
;

51 
	m°_blocks
;

52 
	m°_©ime
;

53 
	m°_©ime_n£c
;

54 
	m°_mtime
;

55 
	m°_mtime_n£c
;

56 
	m°_˘ime
;

57 
	m°_˘ime_n£c
;

58 
	m__unu£d4
;

59 
	m__unu£d5
;

62 
	s°©64
 {

63 
	m°_dev
;

64 
	m__∑d0
[4];

66 
	#STAT64_HAS_BROKEN_ST_INO
 1

	)

67 
	m__°_öo
;

68 
	m°_mode
;

69 
	m°_∆ök
;

71 
	m°_uid
;

72 
	m°_gid
;

74 
	m°_rdev
;

75 
	m__∑d3
[4];

77 
	m°_size
;

78 
	m°_blksize
;

79 
	m°_blocks
;

81 
	m°_©ime
;

82 
	m°_©ime_n£c
;

84 
	m°_mtime
;

85 
	m°_mtime_n£c
;

87 
	m°_˘ime
;

88 
	m°_˘ime_n£c
;

90 
	m°_öo
;

	@asm/statfs.h

12 #i‚de‡
_ASMARM_STATFS_H


13 
	#_ASMARM_STATFS_H


	)

15 
	s°©fs
 {

16 
__u32
 
	mf_ty≥
;

17 
__u32
 
	mf_bsize
;

18 
__u32
 
	mf_blocks
;

19 
__u32
 
	mf_b‰ì
;

20 
__u32
 
	mf_bavaû
;

21 
__u32
 
	mf_fûes
;

22 
__u32
 
	mf_f‰ì
;

23 
__kî√l_fsid_t
 
	mf_fsid
;

24 
__u32
 
	mf_«mñí
;

25 
__u32
 
	mf_‰size
;

26 
__u32
 
	mf_•¨e
[5];

29 
	s°©fs64
 {

30 
__u32
 
	mf_ty≥
;

31 
__u32
 
	mf_bsize
;

32 
__u64
 
	mf_blocks
;

33 
__u64
 
	mf_b‰ì
;

34 
__u64
 
	mf_bavaû
;

35 
__u64
 
	mf_fûes
;

36 
__u64
 
	mf_f‰ì
;

37 
__kî√l_fsid_t
 
	mf_fsid
;

38 
__u32
 
	mf_«mñí
;

39 
__u32
 
	mf_‰size
;

40 
__u32
 
	mf_•¨e
[5];

41 } 
__©åibuã__
 ((
∑cked
,
Æig√d
(4)));

	@asm/suspend.h

12 #i‚de‡
_ASMARM_SUSPEND_H


13 
	#_ASMARM_SUSPEND_H


	)

	@asm/system.h

12 #i‚de‡
__ASM_ARM_SYSTEM_H


13 
	#__ASM_ARM_SYSTEM_H


	)

	@asm/termbits.h

12 #i‚de‡
__ASM_ARM_TERMBITS_H


13 
	#__ASM_ARM_TERMBITS_H


	)

15 
	tcc_t
;

16 
	t•ìd_t
;

17 
	ttcÊag_t
;

19 
	#NCCS
 19

	)

20 
	sãrmios
 {

21 
tcÊag_t
 
	mc_iÊag
;

22 
tcÊag_t
 
	mc_oÊag
;

23 
tcÊag_t
 
	mc_cÊag
;

24 
tcÊag_t
 
	mc_lÊag
;

25 
cc_t
 
	mc_löe
;

26 
cc_t
 
	mc_cc
[
NCCS
];

29 
	#VINTR
 0

	)

30 
	#VQUIT
 1

	)

31 
	#VERASE
 2

	)

32 
	#VKILL
 3

	)

33 
	#VEOF
 4

	)

34 
	#VTIME
 5

	)

35 
	#VMIN
 6

	)

36 
	#VSWTC
 7

	)

37 
	#VSTART
 8

	)

38 
	#VSTOP
 9

	)

39 
	#VSUSP
 10

	)

40 
	#VEOL
 11

	)

41 
	#VREPRINT
 12

	)

42 
	#VDISCARD
 13

	)

43 
	#VWERASE
 14

	)

44 
	#VLNEXT
 15

	)

45 
	#VEOL2
 16

	)

47 
	#IGNBRK
 0000001

	)

48 
	#BRKINT
 0000002

	)

49 
	#IGNPAR
 0000004

	)

50 
	#PARMRK
 0000010

	)

51 
	#INPCK
 0000020

	)

52 
	#ISTRIP
 0000040

	)

53 
	#INLCR
 0000100

	)

54 
	#IGNCR
 0000200

	)

55 
	#ICRNL
 0000400

	)

56 
	#IUCLC
 0001000

	)

57 
	#IXON
 0002000

	)

58 
	#IXANY
 0004000

	)

59 
	#IXOFF
 0010000

	)

60 
	#IMAXBEL
 0020000

	)

61 
	#IUTF8
 0040000

	)

63 
	#OPOST
 0000001

	)

64 
	#OLCUC
 0000002

	)

65 
	#ONLCR
 0000004

	)

66 
	#OCRNL
 0000010

	)

67 
	#ONOCR
 0000020

	)

68 
	#ONLRET
 0000040

	)

69 
	#OFILL
 0000100

	)

70 
	#OFDEL
 0000200

	)

71 
	#NLDLY
 0000400

	)

72 
	#NL0
 0000000

	)

73 
	#NL1
 0000400

	)

74 
	#CRDLY
 0003000

	)

75 
	#CR0
 0000000

	)

76 
	#CR1
 0001000

	)

77 
	#CR2
 0002000

	)

78 
	#CR3
 0003000

	)

79 
	#TABDLY
 0014000

	)

80 
	#TAB0
 0000000

	)

81 
	#TAB1
 0004000

	)

82 
	#TAB2
 0010000

	)

83 
	#TAB3
 0014000

	)

84 
	#XTABS
 0014000

	)

85 
	#BSDLY
 0020000

	)

86 
	#BS0
 0000000

	)

87 
	#BS1
 0020000

	)

88 
	#VTDLY
 0040000

	)

89 
	#VT0
 0000000

	)

90 
	#VT1
 0040000

	)

91 
	#FFDLY
 0100000

	)

92 
	#FF0
 0000000

	)

93 
	#FF1
 0100000

	)

95 
	#CBAUD
 0010017

	)

96 
	#B0
 0000000

	)

97 
	#B50
 0000001

	)

98 
	#B75
 0000002

	)

99 
	#B110
 0000003

	)

100 
	#B134
 0000004

	)

101 
	#B150
 0000005

	)

102 
	#B200
 0000006

	)

103 
	#B300
 0000007

	)

104 
	#B600
 0000010

	)

105 
	#B1200
 0000011

	)

106 
	#B1800
 0000012

	)

107 
	#B2400
 0000013

	)

108 
	#B4800
 0000014

	)

109 
	#B9600
 0000015

	)

110 
	#B19200
 0000016

	)

111 
	#B38400
 0000017

	)

112 
	#EXTA
 
B19200


	)

113 
	#EXTB
 
B38400


	)

114 
	#CSIZE
 0000060

	)

115 
	#CS5
 0000000

	)

116 
	#CS6
 0000020

	)

117 
	#CS7
 0000040

	)

118 
	#CS8
 0000060

	)

119 
	#CSTOPB
 0000100

	)

120 
	#CREAD
 0000200

	)

121 
	#PARENB
 0000400

	)

122 
	#PARODD
 0001000

	)

123 
	#HUPCL
 0002000

	)

124 
	#CLOCAL
 0004000

	)

125 
	#CBAUDEX
 0010000

	)

126 
	#B57600
 0010001

	)

127 
	#B115200
 0010002

	)

128 
	#B230400
 0010003

	)

129 
	#B460800
 0010004

	)

130 
	#B500000
 0010005

	)

131 
	#B576000
 0010006

	)

132 
	#B921600
 0010007

	)

133 
	#B1000000
 0010010

	)

134 
	#B1152000
 0010011

	)

135 
	#B1500000
 0010012

	)

136 
	#B2000000
 0010013

	)

137 
	#B2500000
 0010014

	)

138 
	#B3000000
 0010015

	)

139 
	#B3500000
 0010016

	)

140 
	#B4000000
 0010017

	)

141 
	#CIBAUD
 002003600000

	)

142 
	#CMSPAR
 010000000000

	)

143 
	#CRTSCTS
 020000000000

	)

145 
	#ISIG
 0000001

	)

146 
	#ICANON
 0000002

	)

147 
	#XCASE
 0000004

	)

148 
	#ECHO
 0000010

	)

149 
	#ECHOE
 0000020

	)

150 
	#ECHOK
 0000040

	)

151 
	#ECHONL
 0000100

	)

152 
	#NOFLSH
 0000200

	)

153 
	#TOSTOP
 0000400

	)

154 
	#ECHOCTL
 0001000

	)

155 
	#ECHOPRT
 0002000

	)

156 
	#ECHOKE
 0004000

	)

157 
	#FLUSHO
 0010000

	)

158 
	#PENDIN
 0040000

	)

159 
	#IEXTEN
 0100000

	)

161 
	#TCOOFF
 0

	)

162 
	#TCOON
 1

	)

163 
	#TCIOFF
 2

	)

164 
	#TCION
 3

	)

166 
	#TCIFLUSH
 0

	)

167 
	#TCOFLUSH
 1

	)

168 
	#TCIOFLUSH
 2

	)

170 
	#TCSANOW
 0

	)

171 
	#TCSADRAIN
 1

	)

172 
	#TCSAFLUSH
 2

	)

	@asm/termios.h

12 #i‚de‡
__ASM_ARM_TERMIOS_H


13 
	#__ASM_ARM_TERMIOS_H


	)

15 
	~<asm/ãrmbôs.h
>

16 
	~<asm/io˘ls.h
>

18 
	swösize
 {

19 
	mws_row
;

20 
	mws_cﬁ
;

21 
	mws_xpixñ
;

22 
	mws_ypixñ
;

25 
	#NCC
 8

	)

26 
	sãrmio
 {

27 
	mc_iÊag
;

28 
	mc_oÊag
;

29 
	mc_cÊag
;

30 
	mc_lÊag
;

31 
	mc_löe
;

32 
	mc_cc
[
NCC
];

35 
	#TIOCM_LE
 0x001

	)

36 
	#TIOCM_DTR
 0x002

	)

37 
	#TIOCM_RTS
 0x004

	)

38 
	#TIOCM_ST
 0x008

	)

39 
	#TIOCM_SR
 0x010

	)

40 
	#TIOCM_CTS
 0x020

	)

41 
	#TIOCM_CAR
 0x040

	)

42 
	#TIOCM_RNG
 0x080

	)

43 
	#TIOCM_DSR
 0x100

	)

44 
	#TIOCM_CD
 
TIOCM_CAR


	)

45 
	#TIOCM_RI
 
TIOCM_RNG


	)

46 
	#TIOCM_OUT1
 0x2000

	)

47 
	#TIOCM_OUT2
 0x4000

	)

48 
	#TIOCM_LOOP
 0x8000

	)

50 
	#N_TTY
 0

	)

51 
	#N_SLIP
 1

	)

52 
	#N_MOUSE
 2

	)

53 
	#N_PPP
 3

	)

54 
	#N_STRIP
 4

	)

55 
	#N_AX25
 5

	)

56 
	#N_X25
 6

	)

57 
	#N_6PACK
 7

	)

58 
	#N_MASC
 8

	)

59 
	#N_R3964
 9

	)

60 
	#N_PROFIBUS_FDL
 10

	)

61 
	#N_IRDA
 11

	)

62 
	#N_SMSBLOCK
 12

	)

63 
	#N_HDLC
 13

	)

64 
	#N_SYNC_PPP
 14

	)

65 
	#N_HCI
 15

	)

	@asm/thread_info.h

12 #i‚de‡
__ASM_ARM_THREAD_INFO_H


13 
	#__ASM_ARM_THREAD_INFO_H


	)

	@asm/timex.h

12 #i‚de‡
_ASMARM_TIMEX_H


13 
	#_ASMARM_TIMEX_H


	)

15 
	~<asm/¨ch/timex.h
>

17 
	tcy˛es_t
;

	@asm/tlbflush.h

12 #i‚de‡
_ASMARM_TLBFLUSH_H


13 
	#_ASMARM_TLBFLUSH_H


	)

15 
	#éb_Êush
(
éb
Ë((Ëéb)

	)

	@asm/topology.h

12 #i‚de‡
_ASM_ARM_TOPOLOGY_H


13 
	#_ASM_ARM_TOPOLOGY_H


	)

15 
	~<asm-gíîic/t›ﬁogy.h
>

	@asm/types.h

12 #i‚de‡
__ASM_ARM_TYPES_H


13 
	#__ASM_ARM_TYPES_H


	)

15 #i‚de‡
__ASSEMBLY__


17 
	tumode_t
;

19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__sig√d__
 
	t__s64
;

30 
	t__u64
;

	@asm/uaccess.h

12 #i‚de‡
_ASMARM_UACCESS_H


13 
	#_ASMARM_UACCESS_H


	)

15 
	~<löux/sched.h
>

16 
	~<asm/î∫o.h
>

17 
	~<asm/mem‹y.h
>

18 
	~<asm/domaö.h
>

19 
	~<asm/sy°em.h
>

21 
	#VERIFY_READ
 0

	)

22 
	#VERIFY_WRITE
 1

	)

24 
	sex˚±i⁄_èbÀ_íåy


26 
	mö¢
, 
	mfixup
;

29 
	#KERNEL_DS
 0x00000000

	)

30 
	#gë_ds
(Ë(
KERNEL_DS
)

	)

32 
	#USER_DS
 
KERNEL_DS


	)

34 
	#£gmít_eq
(
a
,
b
Ë(1)

	)

35 
	#__addr_ok
(
addr
Ë(1)

	)

36 
	#__ønge_ok
(
addr
,
size
Ë(0)

	)

37 
	#gë_fs
(Ë(
KERNEL_DS
)

	)

39 
	#gë_u£r
(
x
,
p
Ë
	`__gë_u£r
(x,p)

	)

40 
	#put_u£r
(
x
,
p
Ë
	`__put_u£r
(x,p)

	)

41 
	#ac˚ss_ok
(
ty≥
,
addr
,
size
Ë(
	`__ønge_ok
◊ddr,sizeË=0)

	)

42 
	#__gë_u£r
(
x
,
±r
Ë({ 
__gu_îr
 = 0; 
	`__gë_u£r_îr
((x),’å),__gu_îr); __gu_îr; })

	)

43 
	#__gë_u£r_îr‹
(
x
,
±r
,
îr
Ë({ 
	`__gë_u£r_îr
((x),’å),îr); (Ë0; })

	)

44 
	#__gë_u£r_îr
(
x
,
±r
,
îr
Ëdÿ{ 
__gu_addr
 = ()’å); 
__gu_vÆ
; 
	`__chk_u£r_±r
’å); (*’å))Ë{ 1: 
	`__gë_u£r_asm_byã
(__gu_vÆ,__gu_addr,îr); ; 2: 
	`__gë_u£r_asm_hÆf
(__gu_vÆ,__gu_addr,îr); ; 4: 
	`__gë_u£r_asm_w‹d
(__gu_vÆ,__gu_addr,îr); ; : (__gu_vÆË
	`__gë_u£r_bad
(); } (xË(
	`__ty≥of__
(*’å)))__gu_vÆ; } 0)

	)

45 
	#__gë_u£r_asm_byã
(
x
,
addr
,
îr
Ë
__asm__
 
	`__vﬁ©ûe__
–"1:Üdrbt %1,[%2],#0\n" "2:\n" " .£˘i⁄ .fixup,\"ax\"\n" " .Æign 2\n" "3: mov %0, %3\n" " mov %1, #0\n" " b 2b\n" " .¥evious\n" " .£˘i⁄ __ex_èbÀ,\"a\"\n" " .Æign 3\n" " .l⁄g 1b, 3b\n" " .¥evious" : "+r" (îr), "=&r" (xË: "r" (addr), "i" (-
EFAULT
Ë: "cc")

	)

46 #i‚de‡
__ARMEB__


47 
	#__gë_u£r_asm_hÆf
(
x
,
__gu_addr
,
îr
Ë({ 
__b1
, 
__b2
; 
	`__gë_u£r_asm_byã
(__b1, __gu_addr,Éº); __gë_u£r_asm_byã(__b2, __gu_add∏+ 1,Éº); (xË__b1 | (__b2 << 8); })

	)

49 
	#__gë_u£r_asm_hÆf
(
x
,
__gu_addr
,
îr
Ë({ 
__b1
, 
__b2
; 
	`__gë_u£r_asm_byã
(__b1, __gu_addr,Éº); __gë_u£r_asm_byã(__b2, __gu_add∏+ 1,Éº); (xË(__b1 << 8Ë| __b2; })

	)

51 
	#__gë_u£r_asm_w‹d
(
x
,
addr
,
îr
Ë
__asm__
 
	`__vﬁ©ûe__
–"1:Üdπ %1,[%2],#0\n" "2:\n" " .£˘i⁄ .fixup,\"ax\"\n" " .Æign 2\n" "3: mov %0, %3\n" " mov %1, #0\n" " b 2b\n" " .¥evious\n" " .£˘i⁄ __ex_èbÀ,\"a\"\n" " .Æign 3\n" " .l⁄g 1b, 3b\n" " .¥evious" : "+r" (îr), "=&r" (xË: "r" (addr), "i" (-
EFAULT
Ë: "cc")

	)

52 
	#__put_u£r
(
x
,
±r
Ë({ 
__pu_îr
 = 0; 
	`__put_u£r_îr
((x),’å),__pu_îr); __pu_îr; })

	)

53 
	#__put_u£r_îr‹
(
x
,
±r
,
îr
Ë({ 
	`__put_u£r_îr
((x),’å),îr); (Ë0; })

	)

54 
	#__put_u£r_îr
(
x
,
±r
,
îr
Ëdÿ{ 
__pu_addr
 = ()’å); 
	`__ty≥of__
(*’å)Ë
__pu_vÆ
 = (x); 
	`__chk_u£r_±r
’å); (*’å))Ë{ 1: 
	`__put_u£r_asm_byã
(__pu_vÆ,__pu_addr,îr); ; 2: 
	`__put_u£r_asm_hÆf
(__pu_vÆ,__pu_addr,îr); ; 4: 
	`__put_u£r_asm_w‹d
(__pu_vÆ,__pu_addr,îr); ; 8: 
	`__put_u£r_asm_dw‹d
(__pu_vÆ,__pu_addr,îr); ; : 
	`__put_u£r_bad
(); } } 0)

	)

55 
	#__put_u£r_asm_byã
(
x
,
__pu_addr
,
îr
Ë
__asm__
 
	`__vﬁ©ûe__
–"1: såbt %1,[%2],#0\n" "2:\n" " .£˘i⁄ .fixup,\"ax\"\n" " .Æign 2\n" "3: mov %0, %3\n" " b 2b\n" " .¥evious\n" " .£˘i⁄ __ex_èbÀ,\"a\"\n" " .Æign 3\n" " .l⁄g 1b, 3b\n" " .¥evious" : "+r" (îrË: "r" (x), "r" (__pu_addr), "i" (-
EFAULT
Ë: "cc")

	)

56 #i‚de‡
__ARMEB__


57 
	#__put_u£r_asm_hÆf
(
x
,
__pu_addr
,
îr
Ë({ 
__ãmp
 = ()(x); 
	`__put_u£r_asm_byã
(__ãmp, __pu_addr,Éº); __put_u£r_asm_byã(__ãm∞>> 8, __pu_add∏+ 1,Éº); })

	)

59 
	#__put_u£r_asm_hÆf
(
x
,
__pu_addr
,
îr
Ë({ 
__ãmp
 = ()(x); 
	`__put_u£r_asm_byã
(__ãm∞>> 8, __pu_addr,Éº); __put_u£r_asm_byã(__ãmp, __pu_add∏+ 1,Éº); })

	)

61 
	#__put_u£r_asm_w‹d
(
x
,
__pu_addr
,
îr
Ë
__asm__
 
	`__vﬁ©ûe__
–"1: såt %1,[%2],#0\n" "2:\n" " .£˘i⁄ .fixup,\"ax\"\n" " .Æign 2\n" "3: mov %0, %3\n" " b 2b\n" " .¥evious\n" " .£˘i⁄ __ex_èbÀ,\"a\"\n" " .Æign 3\n" " .l⁄g 1b, 3b\n" " .¥evious" : "+r" (îrË: "r" (x), "r" (__pu_addr), "i" (-
EFAULT
Ë: "cc")

	)

62 #i‚de‡
__ARMEB__


63 
	#__ªg_›î0
 "%R2"

	)

64 
	#__ªg_›î1
 "%Q2"

	)

66 
	#__ªg_›î0
 "%Q2"

	)

67 
	#__ªg_›î1
 "%R2"

	)

69 
	#__put_u£r_asm_dw‹d
(
x
,
__pu_addr
,
îr
Ë
__asm__
 
	`__vﬁ©ûe__
–"1: såt " 
__ªg_›î1
 ", [%1], #4\n" "2: såt " 
__ªg_›î0
 ", [%1], #0\n" "3:\n" " .£˘i⁄ .fixup,\"ax\"\n" " .Æign 2\n" "4: mov %0, %3\n" " b 3b\n" " .¥evious\n" " .£˘i⁄ __ex_èbÀ,\"a\"\n" " .Æign 3\n" " .l⁄g 1b, 4b\n" " .l⁄g 2b, 4b\n" " .¥evious" : "+r" (îr), "+r" (__pu_addrË: "r" (x), "i" (-
EFAULT
Ë: "cc")

	)

70 
	#__c›y_‰om_u£r
(
to
,
‰om
,
n
Ë(
	`mem˝y
—o, (
__f‹˚
 *)‰om,Ç), 0)

	)

71 
	#__c›y_to_u£r
(
to
,
‰om
,
n
Ë(
	`mem˝y
((
__f‹˚
 *Èo, from,Ç), 0)

	)

72 
	#__˛ór_u£r
(
addr
,
n
Ë(
	`mem£t
((
__f‹˚
 *Ôddr, 0,Ç), 0)

	)

74 
	#__c›y_to_u£r_ö©omic
 
__c›y_to_u£r


	)

75 
	#__c›y_‰om_u£r_ö©omic
 
__c›y_‰om_u£r


	)

76 
	#°æí_u£r
(
s
Ë
	`°∫Àn_u£r
(s, ~0UL >> 1)

	)

	@asm/unaligned.h

12 #i‚de‡
__ASM_ARM_UNALIGNED_H


13 
	#__ASM_ARM_UNALIGNED_H


	)

15 
	~<asm/ty≥s.h
>

17 
	#__gë_u«lig√d_2_À
(
__p
Ë(__p[0] | __p[1] << 8)

	)

19 
	#__gë_u«lig√d_2_be
(
__p
Ë(__p[0] << 8 | __p[1])

	)

21 
	#__gë_u«lig√d_4_À
(
__p
Ë(__p[0] | __p[1] << 8 | __p[2] << 16 | __p[3] << 24)

	)

23 
	#__gë_u«lig√d_4_be
(
__p
Ë(__p[0] << 24 | __p[1] << 16 | __p[2] << 8 | __p[3])

	)

25 
	#__gë_u«lig√d_À
(
±r
Ë({ 
	`__ty≥of__
(*’å)Ë
__v
; 
__u8
 *
__p
 = (__u8 *)’å); (*’å))Ë{ 1: __v = *’å); ; 2: __v = 
	`__gë_u«lig√d_2_À
(__p); ; 4: __v = 
	`__gë_u«lig√d_4_À
(__p); ; 8: { 
__v1
, 
__v2
; __v2 = __gë_u«lig√d_4_À((__p+4)); __v1 = __gë_u«lig√d_4_À(__p); __v = (()__v2 << 32 | __v1); } ; : __v = 
	`__bug_u«lig√d_x
(__p); ; } __v; })

	)

27 
	#__gë_u«lig√d_be
(
±r
Ë({ 
	`__ty≥of__
(*’å)Ë
__v
; 
__u8
 *
__p
 = (__u8 *)’å); (*’å))Ë{ 1: __v = *’å); ; 2: __v = 
	`__gë_u«lig√d_2_be
(__p); ; 4: __v = 
	`__gë_u«lig√d_4_be
(__p); ; 8: { 
__v1
, 
__v2
; __v2 = __gë_u«lig√d_4_be(__p); __v1 = __gë_u«lig√d_4_be((__p+4)); __v = (()__v2 << 32 | __v1); } ; : __v = 
	`__bug_u«lig√d_x
(__p); ; } __v; })

	)

29 
	#__put_u«lig√d_À
(
vÆ
,
±r
Ë({ (*’å))Ë{ 1: *’åË(vÆ); ; 2: 
	`__put_u«lig√d_2_À
((vÆ),(
__u8
 *)’å)); ; 4: 
	`__put_u«lig√d_4_À
((vÆ),(__u8 *)’å)); ; 8: 
	`__put_u«lig√d_8_À
((vÆ),(__u8 *)’å)); ; : 
	`__bug_u«lig√d_x
’å); ; } (Ë0; })

	)

30 
	#__put_u«lig√d_be
(
vÆ
,
±r
Ë({ (*’å))Ë{ 1: *’åË(vÆ); ; 2: 
	`__put_u«lig√d_2_be
((vÆ),(
__u8
 *)’å)); ; 4: 
	`__put_u«lig√d_4_be
((vÆ),(__u8 *)’å)); ; 8: 
	`__put_u«lig√d_8_be
((vÆ),(__u8 *)’å)); ; : 
	`__bug_u«lig√d_x
’å); ; } (Ë0; })

	)

31 #i‚de‡
__ARMEB__


32 
	#gë_u«lig√d
 
__gë_u«lig√d_À


	)

33 
	#put_u«lig√d
 
__put_u«lig√d_À


	)

35 
	#gë_u«lig√d
 
__gë_u«lig√d_be


	)

36 
	#put_u«lig√d
 
__put_u«lig√d_be


	)

	@asm/unistd.h

19 #i‚de‡
__ASM_ARM_UNISTD_H


20 
	#__ASM_ARM_UNISTD_H


	)

21 
	#__NR_OABI_SYSCALL_BASE
 0x900000

	)

22 #i‡
deföed
(
__thumb__
Ë|| deföed(
__ARM_EABI__
)

24 
	#__NR_SYSCALL_BASE
 0

	)

26 
	#__NR_SYSCALL_BASE
 
__NR_OABI_SYSCALL_BASE


	)

29 
	#__NR_ª°¨t_sysˇŒ
 (
__NR_SYSCALL_BASE
+ 0)

	)

30 
	#__NR_exô
 (
__NR_SYSCALL_BASE
+ 1)

	)

31 
	#__NR_f‹k
 (
__NR_SYSCALL_BASE
+ 2)

	)

32 
	#__NR_ªad
 (
__NR_SYSCALL_BASE
+ 3)

	)

34 
	#__NR_wrôe
 (
__NR_SYSCALL_BASE
+ 4)

	)

35 
	#__NR_›í
 (
__NR_SYSCALL_BASE
+ 5)

	)

36 
	#__NR_˛o£
 (
__NR_SYSCALL_BASE
+ 6)

	)

37 
	#__NR_¸ót
 (
__NR_SYSCALL_BASE
+ 8)

	)

39 
	#__NR_lök
 (
__NR_SYSCALL_BASE
+ 9)

	)

40 
	#__NR_u∆ök
 (
__NR_SYSCALL_BASE
+ 10)

	)

41 
	#__NR_execve
 (
__NR_SYSCALL_BASE
+ 11)

	)

42 
	#__NR_chdú
 (
__NR_SYSCALL_BASE
+ 12)

	)

44 
	#__NR_time
 (
__NR_SYSCALL_BASE
+ 13)

	)

45 
	#__NR_mknod
 (
__NR_SYSCALL_BASE
+ 14)

	)

46 
	#__NR_chmod
 (
__NR_SYSCALL_BASE
+ 15)

	)

47 
	#__NR_lchown
 (
__NR_SYSCALL_BASE
+ 16)

	)

49 
	#__NR_l£ek
 (
__NR_SYSCALL_BASE
+ 19)

	)

50 
	#__NR_gëpid
 (
__NR_SYSCALL_BASE
+ 20)

	)

51 
	#__NR_mou¡
 (
__NR_SYSCALL_BASE
+ 21)

	)

52 
	#__NR_umou¡
 (
__NR_SYSCALL_BASE
+ 22)

	)

54 
	#__NR_£tuid
 (
__NR_SYSCALL_BASE
+ 23)

	)

55 
	#__NR_gëuid
 (
__NR_SYSCALL_BASE
+ 24)

	)

56 
	#__NR_°ime
 (
__NR_SYSCALL_BASE
+ 25)

	)

57 
	#__NR_±ø˚
 (
__NR_SYSCALL_BASE
+ 26)

	)

59 
	#__NR_Æ¨m
 (
__NR_SYSCALL_BASE
+ 27)

	)

60 
	#__NR_∑u£
 (
__NR_SYSCALL_BASE
+ 29)

	)

61 
	#__NR_utime
 (
__NR_SYSCALL_BASE
+ 30)

	)

62 
	#__NR_ac˚ss
 (
__NR_SYSCALL_BASE
+ 33)

	)

64 
	#__NR_ni˚
 (
__NR_SYSCALL_BASE
+ 34)

	)

65 
	#__NR_sync
 (
__NR_SYSCALL_BASE
+ 36)

	)

66 
	#__NR_kûl
 (
__NR_SYSCALL_BASE
+ 37)

	)

67 
	#__NR_ª«me
 (
__NR_SYSCALL_BASE
+ 38)

	)

69 
	#__NR_mkdú
 (
__NR_SYSCALL_BASE
+ 39)

	)

70 
	#__NR_rmdú
 (
__NR_SYSCALL_BASE
+ 40)

	)

71 
	#__NR_dup
 (
__NR_SYSCALL_BASE
+ 41)

	)

72 
	#__NR_pùe
 (
__NR_SYSCALL_BASE
+ 42)

	)

74 
	#__NR_times
 (
__NR_SYSCALL_BASE
+ 43)

	)

75 
	#__NR_brk
 (
__NR_SYSCALL_BASE
+ 45)

	)

76 
	#__NR_£tgid
 (
__NR_SYSCALL_BASE
+ 46)

	)

77 
	#__NR_gëgid
 (
__NR_SYSCALL_BASE
+ 47)

	)

79 
	#__NR_gëeuid
 (
__NR_SYSCALL_BASE
+ 49)

	)

80 
	#__NR_gëegid
 (
__NR_SYSCALL_BASE
+ 50)

	)

81 
	#__NR_ac˘
 (
__NR_SYSCALL_BASE
+ 51)

	)

82 
	#__NR_umou¡2
 (
__NR_SYSCALL_BASE
+ 52)

	)

84 
	#__NR_io˘l
 (
__NR_SYSCALL_BASE
+ 54)

	)

85 
	#__NR_f˙é
 (
__NR_SYSCALL_BASE
+ 55)

	)

86 
	#__NR_£çgid
 (
__NR_SYSCALL_BASE
+ 57)

	)

87 
	#__NR_umask
 (
__NR_SYSCALL_BASE
+ 60)

	)

89 
	#__NR_chroŸ
 (
__NR_SYSCALL_BASE
+ 61)

	)

90 
	#__NR_u°©
 (
__NR_SYSCALL_BASE
+ 62)

	)

91 
	#__NR_dup2
 (
__NR_SYSCALL_BASE
+ 63)

	)

92 
	#__NR_gëµid
 (
__NR_SYSCALL_BASE
+ 64)

	)

94 
	#__NR_gëpgΩ
 (
__NR_SYSCALL_BASE
+ 65)

	)

95 
	#__NR_£tsid
 (
__NR_SYSCALL_BASE
+ 66)

	)

96 
	#__NR_siga˘i⁄
 (
__NR_SYSCALL_BASE
+ 67)

	)

97 
	#__NR_£åeuid
 (
__NR_SYSCALL_BASE
+ 70)

	)

99 
	#__NR_£åegid
 (
__NR_SYSCALL_BASE
+ 71)

	)

100 
	#__NR_sigsu•íd
 (
__NR_SYSCALL_BASE
+ 72)

	)

101 
	#__NR_sig≥ndög
 (
__NR_SYSCALL_BASE
+ 73)

	)

102 
	#__NR_£tho°«me
 (
__NR_SYSCALL_BASE
+ 74)

	)

104 
	#__NR_£ålimô
 (
__NR_SYSCALL_BASE
+ 75)

	)

105 
	#__NR_gëæimô
 (
__NR_SYSCALL_BASE
+ 76)

	)

106 
	#__NR_gërußge
 (
__NR_SYSCALL_BASE
+ 77)

	)

107 
	#__NR_gëtimeofday
 (
__NR_SYSCALL_BASE
+ 78)

	)

109 
	#__NR_£âimeofday
 (
__NR_SYSCALL_BASE
+ 79)

	)

110 
	#__NR_gëgroups
 (
__NR_SYSCALL_BASE
+ 80)

	)

111 
	#__NR_£tgroups
 (
__NR_SYSCALL_BASE
+ 81)

	)

112 
	#__NR_£À˘
 (
__NR_SYSCALL_BASE
+ 82)

	)

114 
	#__NR_symlök
 (
__NR_SYSCALL_BASE
+ 83)

	)

115 
	#__NR_ªadlök
 (
__NR_SYSCALL_BASE
+ 85)

	)

116 
	#__NR_u£lib
 (
__NR_SYSCALL_BASE
+ 86)

	)

117 
	#__NR_sw≠⁄
 (
__NR_SYSCALL_BASE
+ 87)

	)

119 
	#__NR_ªboŸ
 (
__NR_SYSCALL_BASE
+ 88)

	)

120 
	#__NR_ªaddú
 (
__NR_SYSCALL_BASE
+ 89)

	)

121 
	#__NR_mm≠
 (
__NR_SYSCALL_BASE
+ 90)

	)

122 
	#__NR_munm≠
 (
__NR_SYSCALL_BASE
+ 91)

	)

124 
	#__NR_åunˇã
 (
__NR_SYSCALL_BASE
+ 92)

	)

125 
	#__NR_·runˇã
 (
__NR_SYSCALL_BASE
+ 93)

	)

126 
	#__NR_fchmod
 (
__NR_SYSCALL_BASE
+ 94)

	)

127 
	#__NR_fchown
 (
__NR_SYSCALL_BASE
+ 95)

	)

129 
	#__NR_gë¥i‹ôy
 (
__NR_SYSCALL_BASE
+ 96)

	)

130 
	#__NR_£çri‹ôy
 (
__NR_SYSCALL_BASE
+ 97)

	)

131 
	#__NR_°©fs
 (
__NR_SYSCALL_BASE
+ 99)

	)

132 
	#__NR_f°©fs
 (
__NR_SYSCALL_BASE
+100)

	)

134 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
+102)

	)

135 
	#__NR_sy¶og
 (
__NR_SYSCALL_BASE
+103)

	)

136 
	#__NR_£tôimî
 (
__NR_SYSCALL_BASE
+104)

	)

137 
	#__NR_gëôimî
 (
__NR_SYSCALL_BASE
+105)

	)

139 
	#__NR_°©
 (
__NR_SYSCALL_BASE
+106)

	)

140 
	#__NR_l°©
 (
__NR_SYSCALL_BASE
+107)

	)

141 
	#__NR_f°©
 (
__NR_SYSCALL_BASE
+108)

	)

142 
	#__NR_vh™gup
 (
__NR_SYSCALL_BASE
+111)

	)

144 
	#__NR_sysˇŒ
 (
__NR_SYSCALL_BASE
+113)

	)

145 
	#__NR_waô4
 (
__NR_SYSCALL_BASE
+114)

	)

146 
	#__NR_sw≠off
 (
__NR_SYSCALL_BASE
+115)

	)

147 
	#__NR_sysöfo
 (
__NR_SYSCALL_BASE
+116)

	)

149 
	#__NR_ùc
 (
__NR_SYSCALL_BASE
+117)

	)

150 
	#__NR_fsync
 (
__NR_SYSCALL_BASE
+118)

	)

151 
	#__NR_sigªtu∫
 (
__NR_SYSCALL_BASE
+119)

	)

152 
	#__NR_˛⁄e
 (
__NR_SYSCALL_BASE
+120)

	)

154 
	#__NR_£tdomaö«me
 (
__NR_SYSCALL_BASE
+121)

	)

155 
	#__NR_u«me
 (
__NR_SYSCALL_BASE
+122)

	)

156 
	#__NR_adjtimex
 (
__NR_SYSCALL_BASE
+124)

	)

157 
	#__NR_m¥Ÿe˘
 (
__NR_SYSCALL_BASE
+125)

	)

159 
	#__NR_sig¥ocmask
 (
__NR_SYSCALL_BASE
+126)

	)

160 
	#__NR_öô_moduÀ
 (
__NR_SYSCALL_BASE
+128)

	)

161 
	#__NR_dñëe_moduÀ
 (
__NR_SYSCALL_BASE
+129)

	)

162 
	#__NR_quŸa˘l
 (
__NR_SYSCALL_BASE
+131)

	)

164 
	#__NR_gëpgid
 (
__NR_SYSCALL_BASE
+132)

	)

165 
	#__NR_fchdú
 (
__NR_SYSCALL_BASE
+133)

	)

166 
	#__NR_bdÊush
 (
__NR_SYSCALL_BASE
+134)

	)

167 
	#__NR_sysfs
 (
__NR_SYSCALL_BASE
+135)

	)

169 
	#__NR_≥rs⁄Æôy
 (
__NR_SYSCALL_BASE
+136)

	)

170 
	#__NR_£tfsuid
 (
__NR_SYSCALL_BASE
+138)

	)

171 
	#__NR_£tfsgid
 (
__NR_SYSCALL_BASE
+139)

	)

172 
	#__NR__Œ£ek
 (
__NR_SYSCALL_BASE
+140)

	)

174 
	#__NR_gëdíts
 (
__NR_SYSCALL_BASE
+141)

	)

175 
	#__NR__√w£À˘
 (
__NR_SYSCALL_BASE
+142)

	)

176 
	#__NR_Êock
 (
__NR_SYSCALL_BASE
+143)

	)

177 
	#__NR_msync
 (
__NR_SYSCALL_BASE
+144)

	)

179 
	#__NR_ªadv
 (
__NR_SYSCALL_BASE
+145)

	)

180 
	#__NR_wrôev
 (
__NR_SYSCALL_BASE
+146)

	)

181 
	#__NR_gësid
 (
__NR_SYSCALL_BASE
+147)

	)

182 
	#__NR_fd©async
 (
__NR_SYSCALL_BASE
+148)

	)

184 
	#__NR__sys˘l
 (
__NR_SYSCALL_BASE
+149)

	)

185 
	#__NR_mlock
 (
__NR_SYSCALL_BASE
+150)

	)

186 
	#__NR_mu∆ock
 (
__NR_SYSCALL_BASE
+151)

	)

187 
	#__NR_mlockÆl
 (
__NR_SYSCALL_BASE
+152)

	)

189 
	#__NR_mu∆ockÆl
 (
__NR_SYSCALL_BASE
+153)

	)

190 
	#__NR_sched_£ç¨am
 (
__NR_SYSCALL_BASE
+154)

	)

191 
	#__NR_sched_gë∑øm
 (
__NR_SYSCALL_BASE
+155)

	)

192 
	#__NR_sched_£tscheduÀr
 (
__NR_SYSCALL_BASE
+156)

	)

194 
	#__NR_sched_gëscheduÀr
 (
__NR_SYSCALL_BASE
+157)

	)

195 
	#__NR_sched_yõld
 (
__NR_SYSCALL_BASE
+158)

	)

196 
	#__NR_sched_gë_¥i‹ôy_max
 (
__NR_SYSCALL_BASE
+159)

	)

197 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__NR_SYSCALL_BASE
+160)

	)

199 
	#__NR_sched_º_gë_öãrvÆ
 (
__NR_SYSCALL_BASE
+161)

	)

200 
	#__NR_«no¶ìp
 (
__NR_SYSCALL_BASE
+162)

	)

201 
	#__NR_mªm≠
 (
__NR_SYSCALL_BASE
+163)

	)

202 
	#__NR_£åesuid
 (
__NR_SYSCALL_BASE
+164)

	)

204 
	#__NR_gëªsuid
 (
__NR_SYSCALL_BASE
+165)

	)

205 
	#__NR_pﬁl
 (
__NR_SYSCALL_BASE
+168)

	)

206 
	#__NR_nfs£rv˘l
 (
__NR_SYSCALL_BASE
+169)

	)

207 
	#__NR_£åesgid
 (
__NR_SYSCALL_BASE
+170)

	)

209 
	#__NR_gëªsgid
 (
__NR_SYSCALL_BASE
+171)

	)

210 
	#__NR_¥˘l
 (
__NR_SYSCALL_BASE
+172)

	)

211 
	#__NR_π_sigªtu∫
 (
__NR_SYSCALL_BASE
+173)

	)

212 
	#__NR_π_siga˘i⁄
 (
__NR_SYSCALL_BASE
+174)

	)

214 
	#__NR_π_sig¥ocmask
 (
__NR_SYSCALL_BASE
+175)

	)

215 
	#__NR_π_sig≥ndög
 (
__NR_SYSCALL_BASE
+176)

	)

216 
	#__NR_π_sigtimedwaô
 (
__NR_SYSCALL_BASE
+177)

	)

217 
	#__NR_π_sigqueueöfo
 (
__NR_SYSCALL_BASE
+178)

	)

219 
	#__NR_π_sigsu•íd
 (
__NR_SYSCALL_BASE
+179)

	)

220 
	#__NR_¥ód64
 (
__NR_SYSCALL_BASE
+180)

	)

221 
	#__NR_pwrôe64
 (
__NR_SYSCALL_BASE
+181)

	)

222 
	#__NR_chown
 (
__NR_SYSCALL_BASE
+182)

	)

224 
	#__NR_gëcwd
 (
__NR_SYSCALL_BASE
+183)

	)

225 
	#__NR_ˇpgë
 (
__NR_SYSCALL_BASE
+184)

	)

226 
	#__NR_ˇp£t
 (
__NR_SYSCALL_BASE
+185)

	)

227 
	#__NR_sigÆt°ack
 (
__NR_SYSCALL_BASE
+186)

	)

229 
	#__NR_£ndfûe
 (
__NR_SYSCALL_BASE
+187)

	)

230 
	#__NR_vf‹k
 (
__NR_SYSCALL_BASE
+190)

	)

231 
	#__NR_ugëæimô
 (
__NR_SYSCALL_BASE
+191)

	)

232 
	#__NR_mm≠2
 (
__NR_SYSCALL_BASE
+192)

	)

234 
	#__NR_åunˇã64
 (
__NR_SYSCALL_BASE
+193)

	)

235 
	#__NR_·runˇã64
 (
__NR_SYSCALL_BASE
+194)

	)

236 
	#__NR_°©64
 (
__NR_SYSCALL_BASE
+195)

	)

237 
	#__NR_l°©64
 (
__NR_SYSCALL_BASE
+196)

	)

239 
	#__NR_f°©64
 (
__NR_SYSCALL_BASE
+197)

	)

240 
	#__NR_lchown32
 (
__NR_SYSCALL_BASE
+198)

	)

241 
	#__NR_gëuid32
 (
__NR_SYSCALL_BASE
+199)

	)

242 
	#__NR_gëgid32
 (
__NR_SYSCALL_BASE
+200)

	)

244 
	#__NR_gëeuid32
 (
__NR_SYSCALL_BASE
+201)

	)

245 
	#__NR_gëegid32
 (
__NR_SYSCALL_BASE
+202)

	)

246 
	#__NR_£åeuid32
 (
__NR_SYSCALL_BASE
+203)

	)

247 
	#__NR_£åegid32
 (
__NR_SYSCALL_BASE
+204)

	)

249 
	#__NR_gëgroups32
 (
__NR_SYSCALL_BASE
+205)

	)

250 
	#__NR_£tgroups32
 (
__NR_SYSCALL_BASE
+206)

	)

251 
	#__NR_fchown32
 (
__NR_SYSCALL_BASE
+207)

	)

252 
	#__NR_£åesuid32
 (
__NR_SYSCALL_BASE
+208)

	)

254 
	#__NR_gëªsuid32
 (
__NR_SYSCALL_BASE
+209)

	)

255 
	#__NR_£åesgid32
 (
__NR_SYSCALL_BASE
+210)

	)

256 
	#__NR_gëªsgid32
 (
__NR_SYSCALL_BASE
+211)

	)

257 
	#__NR_chown32
 (
__NR_SYSCALL_BASE
+212)

	)

259 
	#__NR_£tuid32
 (
__NR_SYSCALL_BASE
+213)

	)

260 
	#__NR_£tgid32
 (
__NR_SYSCALL_BASE
+214)

	)

261 
	#__NR_£tfsuid32
 (
__NR_SYSCALL_BASE
+215)

	)

262 
	#__NR_£tfsgid32
 (
__NR_SYSCALL_BASE
+216)

	)

264 
	#__NR_gëdíts64
 (
__NR_SYSCALL_BASE
+217)

	)

265 
	#__NR_pivŸ_roŸ
 (
__NR_SYSCALL_BASE
+218)

	)

266 
	#__NR_möc‹e
 (
__NR_SYSCALL_BASE
+219)

	)

267 
	#__NR_madvi£
 (
__NR_SYSCALL_BASE
+220)

	)

269 
	#__NR_f˙é64
 (
__NR_SYSCALL_BASE
+221)

	)

270 
	#__NR_gëtid
 (
__NR_SYSCALL_BASE
+224)

	)

271 
	#__NR_ªadahód
 (
__NR_SYSCALL_BASE
+225)

	)

272 
	#__NR_£tx©å
 (
__NR_SYSCALL_BASE
+226)

	)

274 
	#__NR_l£tx©å
 (
__NR_SYSCALL_BASE
+227)

	)

275 
	#__NR_f£tx©å
 (
__NR_SYSCALL_BASE
+228)

	)

276 
	#__NR_gëx©å
 (
__NR_SYSCALL_BASE
+229)

	)

277 
	#__NR_lgëx©å
 (
__NR_SYSCALL_BASE
+230)

	)

279 
	#__NR_fgëx©å
 (
__NR_SYSCALL_BASE
+231)

	)

280 
	#__NR_li°x©å
 (
__NR_SYSCALL_BASE
+232)

	)

281 
	#__NR_Œi°x©å
 (
__NR_SYSCALL_BASE
+233)

	)

282 
	#__NR_Êi°x©å
 (
__NR_SYSCALL_BASE
+234)

	)

284 
	#__NR_ªmovex©å
 (
__NR_SYSCALL_BASE
+235)

	)

285 
	#__NR_Ãemovex©å
 (
__NR_SYSCALL_BASE
+236)

	)

286 
	#__NR_‰emovex©å
 (
__NR_SYSCALL_BASE
+237)

	)

287 
	#__NR_tkûl
 (
__NR_SYSCALL_BASE
+238)

	)

289 
	#__NR_£ndfûe64
 (
__NR_SYSCALL_BASE
+239)

	)

290 
	#__NR_fuãx
 (
__NR_SYSCALL_BASE
+240)

	)

291 
	#__NR_sched_£èfföôy
 (
__NR_SYSCALL_BASE
+241)

	)

292 
	#__NR_sched_gëafföôy
 (
__NR_SYSCALL_BASE
+242)

	)

294 
	#__NR_io_£tup
 (
__NR_SYSCALL_BASE
+243)

	)

295 
	#__NR_io_de°roy
 (
__NR_SYSCALL_BASE
+244)

	)

296 
	#__NR_io_gëevíts
 (
__NR_SYSCALL_BASE
+245)

	)

297 
	#__NR_io_submô
 (
__NR_SYSCALL_BASE
+246)

	)

299 
	#__NR_io_ˇn˚l
 (
__NR_SYSCALL_BASE
+247)

	)

300 
	#__NR_exô_group
 (
__NR_SYSCALL_BASE
+248)

	)

301 
	#__NR_lookup_dcookõ
 (
__NR_SYSCALL_BASE
+249)

	)

302 
	#__NR_ïﬁl_¸óã
 (
__NR_SYSCALL_BASE
+250)

	)

304 
	#__NR_ïﬁl_˘l
 (
__NR_SYSCALL_BASE
+251)

	)

305 
	#__NR_ïﬁl_waô
 (
__NR_SYSCALL_BASE
+252)

	)

306 
	#__NR_ªm≠_fûe_∑ges
 (
__NR_SYSCALL_BASE
+253)

	)

307 
	#__NR_£t_tid_addªss
 (
__NR_SYSCALL_BASE
+256)

	)

309 
	#__NR_timî_¸óã
 (
__NR_SYSCALL_BASE
+257)

	)

310 
	#__NR_timî_£âime
 (
__NR_SYSCALL_BASE
+258)

	)

311 
	#__NR_timî_gëtime
 (
__NR_SYSCALL_BASE
+259)

	)

312 
	#__NR_timî_gëovîrun
 (
__NR_SYSCALL_BASE
+260)

	)

314 
	#__NR_timî_dñëe
 (
__NR_SYSCALL_BASE
+261)

	)

315 
	#__NR_˛ock_£âime
 (
__NR_SYSCALL_BASE
+262)

	)

316 
	#__NR_˛ock_gëtime
 (
__NR_SYSCALL_BASE
+263)

	)

317 
	#__NR_˛ock_gëªs
 (
__NR_SYSCALL_BASE
+264)

	)

319 
	#__NR_˛ock_«no¶ìp
 (
__NR_SYSCALL_BASE
+265)

	)

320 
	#__NR_°©fs64
 (
__NR_SYSCALL_BASE
+266)

	)

321 
	#__NR_f°©fs64
 (
__NR_SYSCALL_BASE
+267)

	)

322 
	#__NR_tgkûl
 (
__NR_SYSCALL_BASE
+268)

	)

324 
	#__NR_utimes
 (
__NR_SYSCALL_BASE
+269)

	)

325 
	#__NR_¨m_Ádvi£64_64
 (
__NR_SYSCALL_BASE
+270)

	)

326 
	#__NR_pcic⁄fig_ioba£
 (
__NR_SYSCALL_BASE
+271)

	)

327 
	#__NR_pcic⁄fig_ªad
 (
__NR_SYSCALL_BASE
+272)

	)

329 
	#__NR_pcic⁄fig_wrôe
 (
__NR_SYSCALL_BASE
+273)

	)

330 
	#__NR_mq_›í
 (
__NR_SYSCALL_BASE
+274)

	)

331 
	#__NR_mq_u∆ök
 (
__NR_SYSCALL_BASE
+275)

	)

332 
	#__NR_mq_timed£nd
 (
__NR_SYSCALL_BASE
+276)

	)

334 
	#__NR_mq_timedª˚ive
 (
__NR_SYSCALL_BASE
+277)

	)

335 
	#__NR_mq_nŸify
 (
__NR_SYSCALL_BASE
+278)

	)

336 
	#__NR_mq_gë£èâr
 (
__NR_SYSCALL_BASE
+279)

	)

337 
	#__NR_waôid
 (
__NR_SYSCALL_BASE
+280)

	)

339 
	#__NR_sockë
 (
__NR_SYSCALL_BASE
+281)

	)

340 
	#__NR_böd
 (
__NR_SYSCALL_BASE
+282)

	)

341 
	#__NR_c⁄√˘
 (
__NR_SYSCALL_BASE
+283)

	)

342 
	#__NR_li°í
 (
__NR_SYSCALL_BASE
+284)

	)

344 
	#__NR_ac˚±
 (
__NR_SYSCALL_BASE
+285)

	)

345 
	#__NR_gësock«me
 (
__NR_SYSCALL_BASE
+286)

	)

346 
	#__NR_gë≥î«me
 (
__NR_SYSCALL_BASE
+287)

	)

347 
	#__NR_sockë∑ú
 (
__NR_SYSCALL_BASE
+288)

	)

349 
	#__NR_£nd
 (
__NR_SYSCALL_BASE
+289)

	)

350 
	#__NR_£ndto
 (
__NR_SYSCALL_BASE
+290)

	)

351 
	#__NR_ªcv
 (
__NR_SYSCALL_BASE
+291)

	)

352 
	#__NR_ªcv‰om
 (
__NR_SYSCALL_BASE
+292)

	)

354 
	#__NR_shutdown
 (
__NR_SYSCALL_BASE
+293)

	)

355 
	#__NR_£tsock›t
 (
__NR_SYSCALL_BASE
+294)

	)

356 
	#__NR_gësock›t
 (
__NR_SYSCALL_BASE
+295)

	)

357 
	#__NR_£ndmsg
 (
__NR_SYSCALL_BASE
+296)

	)

359 
	#__NR_ªcvmsg
 (
__NR_SYSCALL_BASE
+297)

	)

360 
	#__NR_£m›
 (
__NR_SYSCALL_BASE
+298)

	)

361 
	#__NR_£mgë
 (
__NR_SYSCALL_BASE
+299)

	)

362 
	#__NR_£m˘l
 (
__NR_SYSCALL_BASE
+300)

	)

364 
	#__NR_msg¢d
 (
__NR_SYSCALL_BASE
+301)

	)

365 
	#__NR_msgrcv
 (
__NR_SYSCALL_BASE
+302)

	)

366 
	#__NR_msggë
 (
__NR_SYSCALL_BASE
+303)

	)

367 
	#__NR_msg˘l
 (
__NR_SYSCALL_BASE
+304)

	)

369 
	#__NR_shm©
 (
__NR_SYSCALL_BASE
+305)

	)

370 
	#__NR_shmdt
 (
__NR_SYSCALL_BASE
+306)

	)

371 
	#__NR_shmgë
 (
__NR_SYSCALL_BASE
+307)

	)

372 
	#__NR_shm˘l
 (
__NR_SYSCALL_BASE
+308)

	)

374 
	#__NR_add_key
 (
__NR_SYSCALL_BASE
+309)

	)

375 
	#__NR_ªque°_key
 (
__NR_SYSCALL_BASE
+310)

	)

376 
	#__NR_key˘l
 (
__NR_SYSCALL_BASE
+311)

	)

377 
	#__NR_£mtimed›
 (
__NR_SYSCALL_BASE
+312)

	)

379 
	#__NR_v£rvî
 (
__NR_SYSCALL_BASE
+313)

	)

380 
	#__NR_i›rio_£t
 (
__NR_SYSCALL_BASE
+314)

	)

381 
	#__NR_i›rio_gë
 (
__NR_SYSCALL_BASE
+315)

	)

382 
	#__NR_öŸify_öô
 (
__NR_SYSCALL_BASE
+316)

	)

384 
	#__NR_öŸify_add_w©ch
 (
__NR_SYSCALL_BASE
+317)

	)

385 
	#__NR_öŸify_rm_w©ch
 (
__NR_SYSCALL_BASE
+318)

	)

386 
	#__NR_mböd
 (
__NR_SYSCALL_BASE
+319)

	)

387 
	#__NR_gë_mempﬁicy
 (
__NR_SYSCALL_BASE
+320)

	)

389 
	#__NR_£t_mempﬁicy
 (
__NR_SYSCALL_BASE
+321)

	)

390 
	#__NR_›í©
 (
__NR_SYSCALL_BASE
+322)

	)

391 
	#__NR_mkdú©
 (
__NR_SYSCALL_BASE
+323)

	)

392 
	#__NR_mknod©
 (
__NR_SYSCALL_BASE
+324)

	)

394 
	#__NR_fchow«t
 (
__NR_SYSCALL_BASE
+325)

	)

395 
	#__NR_futimeßt
 (
__NR_SYSCALL_BASE
+326)

	)

396 
	#__NR_f°©©64
 (
__NR_SYSCALL_BASE
+327)

	)

397 
	#__NR_u∆ök©
 (
__NR_SYSCALL_BASE
+328)

	)

399 
	#__NR_ª«mót
 (
__NR_SYSCALL_BASE
+329)

	)

400 
	#__NR_lök©
 (
__NR_SYSCALL_BASE
+330)

	)

401 
	#__NR_symlök©
 (
__NR_SYSCALL_BASE
+331)

	)

402 
	#__NR_ªadlök©
 (
__NR_SYSCALL_BASE
+332)

	)

404 
	#__NR_fchmod©
 (
__NR_SYSCALL_BASE
+333)

	)

405 
	#__NR_Ác˚sßt
 (
__NR_SYSCALL_BASE
+334)

	)

406 
	#__NR_p£À˘6
 (
__NR_SYSCALL_BASE
+335)

	)

407 
	#__NR_µﬁl
 (
__NR_SYSCALL_BASE
+336)

	)

409 
	#__NR_unsh¨e
 (
__NR_SYSCALL_BASE
+337)

	)

410 
	#__NR_£t_robu°_li°
 (
__NR_SYSCALL_BASE
+338)

	)

411 
	#__NR_gë_robu°_li°
 (
__NR_SYSCALL_BASE
+339)

	)

412 
	#__NR_•li˚
 (
__NR_SYSCALL_BASE
+340)

	)

414 
	#__NR_¨m_sync_fûe_ønge
 (
__NR_SYSCALL_BASE
+341)

	)

415 
	#__NR_sync_fûe_ønge2
 
__NR_¨m_sync_fûe_ønge


	)

416 
	#__NR_ãe
 (
__NR_SYSCALL_BASE
+342)

	)

417 
	#__NR_vm•li˚
 (
__NR_SYSCALL_BASE
+343)

	)

419 
	#__NR_move_∑ges
 (
__NR_SYSCALL_BASE
+344)

	)

420 
	#__NR_gë˝u
 (
__NR_SYSCALL_BASE
+345)

	)

421 
	#__NR_ïﬁl_pwaô
 (
__NR_SYSCALL_BASE
+346)

	)

422 
	#__NR_kexec_lﬂd
 (
__NR_SYSCALL_BASE
+347)

	)

424 
	#__NR_utimíßt
 (
__NR_SYSCALL_BASE
+348)

	)

425 
	#__NR_sig«lfd
 (
__NR_SYSCALL_BASE
+349)

	)

426 
	#__NR_timîfd_¸óã
 (
__NR_SYSCALL_BASE
+350)

	)

427 
	#__NR_evítfd
 (
__NR_SYSCALL_BASE
+351)

	)

429 
	#__NR_ÁŒoˇã
 (
__NR_SYSCALL_BASE
+352)

	)

430 
	#__NR_timîfd_£âime
 (
__NR_SYSCALL_BASE
+353)

	)

431 
	#__NR_timîfd_gëtime
 (
__NR_SYSCALL_BASE
+354)

	)

432 
	#__NR_sig«lfd4
 (
__NR_SYSCALL_BASE
+355)

	)

434 
	#__NR_evítfd2
 (
__NR_SYSCALL_BASE
+356)

	)

435 
	#__NR_ïﬁl_¸óã1
 (
__NR_SYSCALL_BASE
+357)

	)

436 
	#__NR_dup3
 (
__NR_SYSCALL_BASE
+358)

	)

437 
	#__NR_pùe2
 (
__NR_SYSCALL_BASE
+359)

	)

439 
	#__NR_öŸify_öô1
 (
__NR_SYSCALL_BASE
+360)

	)

440 
	#__NR_¥ódv
 (
__NR_SYSCALL_BASE
+361)

	)

441 
	#__NR_pwrôev
 (
__NR_SYSCALL_BASE
+362)

	)

442 
	#__NR_π_tgsigqueueöfo
 (
__NR_SYSCALL_BASE
+363)

	)

444 
	#__NR_≥rf_evít_›í
 (
__NR_SYSCALL_BASE
+364)

	)

445 
	#__NR_ªcvmmsg
 (
__NR_SYSCALL_BASE
+365)

	)

446 
	#__NR_ac˚±4
 (
__NR_SYSCALL_BASE
+366)

	)

447 
	#__NR_ÁnŸify_öô
 (
__NR_SYSCALL_BASE
+367)

	)

449 
	#__NR_ÁnŸify_m¨k
 (
__NR_SYSCALL_BASE
+368)

	)

450 
	#__NR_¥limô64
 (
__NR_SYSCALL_BASE
+369)

	)

451 
	#__NR_«me_to_h™dÀ_©
 (
__NR_SYSCALL_BASE
+370)

	)

452 
	#__NR_›í_by_h™dÀ_©
 (
__NR_SYSCALL_BASE
+371)

	)

454 
	#__NR_˛ock_adjtime
 (
__NR_SYSCALL_BASE
+372)

	)

455 
	#__NR_syncfs
 (
__NR_SYSCALL_BASE
+373)

	)

456 
	#__NR_£ndmmsg
 (
__NR_SYSCALL_BASE
+374)

	)

457 
	#__NR_£äs
 (
__NR_SYSCALL_BASE
+375)

	)

459 
	#__NR_¥o˚ss_vm_ªadv
 (
__NR_SYSCALL_BASE
+376)

	)

460 
	#__NR_¥o˚ss_vm_wrôev
 (
__NR_SYSCALL_BASE
+377)

	)

461 
	#__ARM_NR_BASE
 (
__NR_SYSCALL_BASE
+0x0f0000)

	)

462 
	#__ARM_NR_bªakpoöt
 (
__ARM_NR_BASE
+1)

	)

464 
	#__ARM_NR_ˇcheÊush
 (
__ARM_NR_BASE
+2)

	)

465 
	#__ARM_NR_u§26
 (
__ARM_NR_BASE
+3)

	)

466 
	#__ARM_NR_u§32
 (
__ARM_NR_BASE
+4)

	)

467 
	#__ARM_NR_£t_és
 (
__ARM_NR_BASE
+5)

	)

469 #ifde‡
__ARM_EABI__


470 #unde‡
__NR_time


471 #unde‡
__NR_umou¡


472 #unde‡
__NR_°ime


474 #unde‡
__NR_Æ¨m


475 #unde‡
__NR_utime


476 #unde‡
__NR_gëæimô


477 #unde‡
__NR_£À˘


479 #unde‡
__NR_ªaddú


480 #unde‡
__NR_mm≠


481 #unde‡
__NR_sockëˇŒ


482 #unde‡
__NR_sysˇŒ


484 #unde‡
__NR_ùc


	@asm/user.h

12 #i‚de‡
_ARM_USER_H


13 
	#_ARM_USER_H


	)

15 
	~<asm/∑ge.h
>

16 
	~<asm/±ø˚.h
>

18 
	su£r_Â
 {

19 
	sÂ_ªg
 {

20 
	msign1
:1;

21 
	munu£d
:15;

22 
	msign2
:1;

23 
	mexp⁄ít
:14;

24 
	mj
:1;

25 
	mm™tisß1
:31;

26 
	mm™tisß0
:32;

27 } 
	mÂªgs
[8];

28 
	mÂ§
:32;

29 
	mÂ¸
:32;

30 
	m·y≥
[8];

31 
	möô_Êag
;

34 
	su£r
{

36 
±_ªgs
 
	mªgs
;

38 
	mu_ÂvÆid
;

40 
	mu_tsize
;

41 
	mu_dsize
;

42 
	mu_ssize
;

43 
	m°¨t_code
;

44 
	m°¨t_°ack
;

45 
	msig«l
;

46 
	mª£rved
;

47 
±_ªgs
 * 
	mu_¨0
;

49 
	mmagic
;

50 
	mu_comm
[32];

51 
	mu_debugªg
[8];

52 
u£r_Â
 
	mu_Â
;

53 
u£r_Â_°ru˘
 * 
	mu_Â0
;

56 
	#NBPG
 
PAGE_SIZE


	)

57 
	#UPAGES
 1

	)

58 
	#HOST_TEXT_START_ADDR
 (
u
.
°¨t_code
)

	)

59 
	#HOST_STACK_END_ADDR
 (
u
.
°¨t_°ack
 + u.
u_ssize
 * 
NBPG
)

	)

61 
	su£r_vÂ
 {

62 
	mÂªgs
[32];

63 
	mÂs¸
;

66 
	su£r_vÂ_exc
 {

67 
	mÂexc
;

68 
	mÂö°
;

69 
	mÂö°2
;

	@asm/vga.h

12 #i‚de‡
ASMARM_VGA_H


13 
	#ASMARM_VGA_H


	)

15 
	~<asm/h¨dw¨e.h
>

16 
	~<asm/io.h
>

18 
	#VGA_MAP_MEM
(
x
,
s
Ë(
PCIMEM_BASE
 + (x))

	)

20 
	#vga_ªadb
(
x
Ë(*((vﬁ©ûê*)x))

	)

21 
	#vga_wrôeb
(
x
,
y
Ë(*((vﬁ©ûê*)yË(x))

	)

	@assert.h

45 
	~<sys/cdefs.h
>

47 #unde‡
as£π


48 #unde‡
_as£π


50 #ifde‡
NDEBUG


51 
	#as£π
(
e
Ë(()0)

	)

52 
	#_as£π
(
e
Ë(()0)

	)

54 
	#_as£π
(
e
Ë
	`as£π
”)

	)

55 #i‡
__ISO_C_VISIBLE
 >= 1999

56 
	#as£π
(
e
Ë(”Ë? ()0 : 
	`__as£π2
(
__FILE__
, 
__LINE__
, 
__func__
, #e))

	)

58 
	#as£π
(
e
Ë(”Ë? ()0 : 
	`__as£π
(
__FILE__
, 
__LINE__
, #e))

	)

62 
__BEGIN_DECLS


63 
__dód
 
__as£π
(const *, , const *);

64 
__dód
 
__as£π2
(const *, , const *, const *);

65 
	g__END_DECLS


	@byteswap.h

28 #i‚de‡
_BYTESWAP_H_


29 
	#_BYTESWAP_H_


	)

32 
	~<ídün.h
>

34 
	#bsw≠_16
(
x
Ë
	`sw≠16
(x)

	)

35 
	#bsw≠_32
(
x
Ë
	`sw≠32
(x)

	)

36 
	#bsw≠_64
(
x
Ë
	`sw≠64
(x)

	)

	@ctype.h

40 #i‚de‡
_CTYPE_H_


41 
	#_CTYPE_H_


	)

43 
	~<sys/cdefs.h
>

45 
	#_U
 0x01

	)

46 
	#_L
 0x02

	)

47 
	#_N
 0x04

	)

48 
	#_S
 0x08

	)

49 
	#_P
 0x10

	)

50 
	#_C
 0x20

	)

51 
	#_X
 0x40

	)

52 
	#_B
 0x80

	)

54 
__BEGIN_DECLS


56 c⁄° *
_˘y≥_
;

57 c⁄° *
_tﬁowî_èb_
;

58 c⁄° *
_touµî_èb_
;

61 #ifde‡
__GNUC__


62 #i‡
deföed
(
__GNUC_STDC_INLINE__
)

63 
	#__CTYPE_INLINE
 
__ölöe
 
	`__©åibuã__
((
__gnu_ölöe__
))

	)

65 
	#__CTYPE_INLINE
 
__ölöe


	)

68 
	#__CTYPE_INLINE
 
__ölöe


	)

71 #i‡
deföed
(
__GNUC__
Ë|| deföed(
_ANSI_LIBRARY
Ë|| deföed(
löt
)

72 
iß um
();

73 
ißÕha
();

74 
is˙ål
();

75 
isdigô
();

76 
isgøph
();

77 
i¶owî
();

78 
i•röt
();

79 
i•un˘
();

80 
is•a˚
();

81 
isuµî
();

82 
isxdigô
();

83 
tﬁowî
();

84 
touµî
();

86 #i‡
__BSD_VISIBLE
 || 
__ISO_C_VISIBLE
 >1999 || 
__POSIX_VISIBLE
 > 200112 \

87 || 
	g__XPG_VISIBLE
 > 600

88 
isbœnk
();

91 #i‡
__BSD_VISIBLE
 || 
__XPG_VISIBLE


92 
ißscii
();

93 
tﬂscii
();

94 
_tﬁowî
();

95 
_touµî
();

100 #i‡
deföed
(
NDEBUG
)

102 
__CTYPE_INLINE
 
	$iß um
(
c
)

104  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & (
_U
|
_L
|
_N
)));

105 
	}
}

107 
__CTYPE_INLINE
 
	$ißÕha
(
c
)

109  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & (
_U
|
_L
)));

110 
	}
}

112 
__CTYPE_INLINE
 
	$is˙ål
(
c
)

114  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & 
_C
));

115 
	}
}

117 
__CTYPE_INLINE
 
	$isdigô
(
c
)

119  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & 
_N
));

120 
	}
}

122 
__CTYPE_INLINE
 
	$isgøph
(
c
)

124  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & (
_P
|
_U
|
_L
|
_N
)));

125 
	}
}

127 
__CTYPE_INLINE
 
	$i¶owî
(
c
)

129  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & 
_L
));

130 
	}
}

132 
__CTYPE_INLINE
 
	$i•röt
(
c
)

134  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & (
_P
|
_U
|
_L
|
_N
|
_B
)));

135 
	}
}

137 
__CTYPE_INLINE
 
	$i•un˘
(
c
)

139  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & 
_P
));

140 
	}
}

142 
__CTYPE_INLINE
 
	$is•a˚
(
c
)

144  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & 
_S
));

145 
	}
}

147 
__CTYPE_INLINE
 
	$isuµî
(
c
)

149  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & 
_U
));

150 
	}
}

152 
__CTYPE_INLINE
 
	$isxdigô
(
c
)

154  (
c
 =-1 ? 0 : ((
_˘y≥_
 + 1)[()c] & (
_N
|
_X
)));

155 
	}
}

157 
__CTYPE_INLINE
 
	$tﬁowî
(
c
)

159 i‡(()
c
 > 255)

160  (
c
);

161  ((
_tﬁowî_èb_
 + 1)[
c
]);

162 
	}
}

164 
__CTYPE_INLINE
 
	$touµî
(
c
)

166 i‡(()
c
 > 255)

167  (
c
);

168  ((
_touµî_èb_
 + 1)[
c
]);

169 
	}
}

171 #i‡
__BSD_VISIBLE
 || 
__ISO_C_VISIBLE
 >1999 || 
__POSIX_VISIBLE
 > 200112 \

172 || 
	g__XPG_VISIBLE
 > 600

173 
__CTYPE_INLINE
 
	$isbœnk
(
c
)

175  (
c
 == ' ' || c == '\t');

176 
	}
}

179 #i‡
__BSD_VISIBLE
 || 
__XPG_VISIBLE


180 
__CTYPE_INLINE
 
	$ißscii
(
c
)

182  (()
c
 <= 0177);

183 
	}
}

185 
__CTYPE_INLINE
 
	$tﬂscii
(
c
)

187  (
c
 & 0177);

188 
	}
}

190 
__CTYPE_INLINE
 
	$_tﬁowî
(
c
)

192  (
c
 - 'A' + 'a');

193 
	}
}

195 
__CTYPE_INLINE
 
	$_touµî
(
c
)

197  (
c
 - 'a' + 'A');

198 
	}
}

203 
	g__END_DECLS


205 #unde‡
__CTYPE_INLINE


	@dirent.h

28 #i‚de‡
_DIRENT_H_


29 
	#_DIRENT_H_


	)

31 
	~<°döt.h
>

32 
	~<sys/cdefs.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
DT_UNKNOWN


37 
	#DT_UNKNOWN
 0

	)

38 
	#DT_FIFO
 1

	)

39 
	#DT_CHR
 2

	)

40 
	#DT_DIR
 4

	)

41 
	#DT_BLK
 6

	)

42 
	#DT_REG
 8

	)

43 
	#DT_LNK
 10

	)

44 
	#DT_SOCK
 12

	)

45 
	#DT_WHT
 14

	)

53 
	sdúít
 {

54 
uöt64_t
 
	md_öo
;

55 
öt64_t
 
	md_off
;

56 
	md_ª˛í
;

57 
	md_ty≥
;

58 
	md_«me
[256];

61 
DIR
 
	tDIR
;

63 
DIR
* 
›ídú
(c⁄° * 
dú∑th
);

64 
DIR
* 
fd›ídú
(
fd
);

65 
dúít
* 
ªaddú
(
DIR
* 
dúp
);

66 
ªaddú_r
(
DIR
* 
dúp
, 
dúít
* 
íåy
, dúít** 
ªsu…
);

67 
˛o£dú
(
DIR
* 
dúp
);

68 
ªwöddú
(
DIR
* 
dúp
);

69 
dúfd
(
DIR
* 
dúp
);

70 
Æphas‹t
(c⁄° 
dúít
** 
a
, c⁄° dúít** 
b
);

71 
sˇndú
(c⁄° * 
dú
, 
dúít
*** 
«mñi°
,

72 (*
fûãr
)(c⁄° 
dúít
*),

73 (*
com∑r
)(c⁄° 
dúít
**,

74 c⁄° 
dúít
**));

76 
	`gëdíts
(, 
dúít
*, );

78 
__END_DECLS


	@dlfcn.h

28 #i‚de‡
__DLFCN_H__


29 
	#__DLFCN_H__


	)

31 
	~<sys/cdefs.h
>

33 
__BEGIN_DECLS


36 c⁄° *
	mdli_‚ame
;

38 *
	mdli_fba£
;

40 c⁄° *
	mdli_¢ame
;

42 *
	mdli_ßddr
;

44 } 
	tDl_öfo
;

46 * 
dl›í
(c⁄° * 
fûíame
, 
Êag
);

47 
dl˛o£
(* 
h™dÀ
);

48 c⁄° * 
dÀº‹
();

49 * 
dlsym
(* 
h™dÀ
, c⁄° * 
symbﬁ
);

50 
dœddr
(c⁄° * 
addr
, 
Dl_öfo
 *
öfo
);

53 
	mRTLD_NOW
 = 0,

54 
	mRTLD_LAZY
 = 1,

56 
	mRTLD_LOCAL
 = 0,

57 
	mRTLD_GLOBAL
 = 2,

60 
	#RTLD_DEFAULT
 ((*Ë0xffffffff)

	)

61 
	#RTLD_NEXT
 ((*Ë0xffffff„)

	)

63 
	g__END_DECLS


	@elf.h

28 #i‚de‡
_ELF_H


29 
	#_ELF_H


	)

33 
	mAT_NULL
 = 0,

34 
	mAT_IGNORE
,

35 
	mAT_EXECFD
,

36 
	mAT_PHDR
,

37 
	mAT_PHENT
,

38 
	mAT_PHNUM
,

39 
	mAT_PAGESZ
,

40 
	mAT_BASE
,

41 
	mAT_FLAGS
,

42 
	mAT_ENTRY
,

43 
	mAT_NOTELF
,

44 
	mAT_UID
,

45 
	mAT_EUID
,

46 
	mAT_GID
,

47 
	mAT_EGID
,

48 
	mAT_PLATFORM
,

49 
	mAT_HWCAP
,

50 
	mAT_CLKTCK
,

52 
	mAT_SECURE
 = 23

55 
	~<°döt.h
>

56 
	~<sys/exec_ñf.h
>

59 
uöt32_t
 
	ma_ty≥
;

61 
uöt32_t
 
	ma_vÆ
;

62 } 
	ma_un
;

63 } 
	tElf32_auxv_t
;

66 
uöt64_t
 
	ma_ty≥
;

68 
uöt64_t
 
	ma_vÆ
;

69 } 
	ma_un
;

70 } 
	tElf64_auxv_t
;

	@endian.h

28 #i‚de‡
_ENDIAN_H_


29 
	#_ENDIAN_H_


	)

31 
	~<sys/ídün.h
>

	@err.h

35 #i‚de‡
_ERR_H_


36 
	#_ERR_H_


	)

45 
	~<sys/cdefs.h
>

46 
	~<machöe/_ty≥s.h
>

48 
__BEGIN_DECLS


50 
__n‹ëu∫
 
	$îr
(, const *, ...)

51 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 2, 3)));

52 
__n‹ëu∫
 
	$vîr
(, c⁄° *, 
__va_li°
)

53 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 2, 0)));

54 
__n‹ëu∫
 
	$îrx
(, const *, ...)

55 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 2, 3)));

56 
__n‹ëu∫
 
	$vîrx
(, c⁄° *, 
__va_li°
)

57 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 2, 0)));

58 
	$w¨n
(const *, ...)

59 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 1, 2)));

60 
	$vw¨n
(c⁄° *, 
__va_li°
)

61 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 1, 0)));

62 
	$w¨nx
(const *, ...)

63 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 1, 2)));

64 
	$vw¨nx
(c⁄° *, 
__va_li°
)

65 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 1, 0)));

71 
__n‹ëu∫
 
	$_îr
(, const *, ...)

72 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 2, 3)));

73 
__n‹ëu∫
 
	$_vîr
(, c⁄° *, 
__va_li°
)

74 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 2, 0)));

75 
__n‹ëu∫
 
	$_îrx
(, const *, ...)

76 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 2, 3)));

77 
__n‹ëu∫
 
	$_vîrx
(, c⁄° *, 
__va_li°
)

78 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 2, 0)));

79 
	$_w¨n
(const *, ...)

80 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 1, 2)));

81 
	$_vw¨n
(c⁄° *, 
__va_li°
)

82 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 1, 0)));

83 
	$_w¨nx
(const *, ...)

84 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 1, 2)));

85 
	$_vw¨nx
(c⁄° *, 
__va_li°
)

86 
	`__©åibuã__
((
	`__f‹m©__
 (
¥ötf
, 1, 0)));

88 
__END_DECLS


	@errno.h

28 #i‚de‡
_ERRNO_H


29 
	#_ERRNO_H


	)

31 
	~<sys/cdefs.h
>

32 
	~<löux/î∫o.h
>

34 
	g__BEGIN_DECLS


39 #i‚de‡ 
ENOTSUP


40 
	#ENOTSUP
 
EOPNOTSUPP


	)

44 vﬁ©ûê* 
__î∫o
();

47 
	#î∫o
 (*
	`__î∫o
())

	)

51 
__ölöe__
 
__©åibuã__
((
dïªˇãd
))

52 
	$__£t_î∫o
(
n
) {

53 
î∫o
 = 
n
;

55 
	}
}

57 
	g__END_DECLS


	@fcntl.h

28 #i‚de‡
_FCNTL_H


29 
	#_FCNTL_H


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<löux/f˙é.h
>

34 
	~<uni°d.h
>

36 
	g__BEGIN_DECLS


38 #i‚de‡
O_ASYNC


39 
	#O_ASYNC
 
FASYNC


	)

42 #i‚de‡
O_CLOEXEC


43 
	#O_CLOEXEC
 02000000

	)

46 
›í
(c⁄° * 
∑th
, 
mode
, ...);

47 
›í©
(
fd
, c⁄° * 
∑th
, 
mode
, ...);

48 
u∆ök©
(
dúfd
, c⁄° *
∑th«me
, 
Êags
);

49 
f˙é
(
fd
, 
comm™d
, ...);

50 
¸ót
(c⁄° * 
∑th
, 
mode_t
 
mode
);

52 
	g__END_DECLS


	@features.h

28 #i‚de‡
_FEATURES_H_


29 
	#_FEATURES_H_


	)

36 
	#_BSD_SOURCE
 1

	)

39 
	#_GNU_SOURCE
 1

	)

42 #unde‡
__USE_ISOC95


43 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L

44 
	#__USE_ISOC95
 1

	)

48 #unde‡
__USE_ISOC99


49 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

50 
	#__USE_ISOC99
 1

	)

54 
	#__USE_POSIX
 1

	)

55 
	#__USE_POSIX2
 1

	)

56 
	#__USE_XPG
 1

	)

	@fenv.h

36 #i‚de‡
_FENV_H_


37 
	#_FENV_H_


	)

39 
	~<sys/ty≥s.h
>

41 
__BEGIN_DECLS


43 
__uöt32_t
 
	t„nv_t
;

44 
__uöt32_t
 
	t„x˚±_t
;

47 
	#FE_INVALID
 0x01

	)

48 
	#FE_DIVBYZERO
 0x02

	)

49 
	#FE_OVERFLOW
 0x04

	)

50 
	#FE_UNDERFLOW
 0x08

	)

51 
	#FE_INEXACT
 0x10

	)

52 
	#FE_ALL_EXCEPT
 (
FE_DIVBYZERO
 | 
FE_INEXACT
 | 
FE_INVALID
 | 
FE_OVERFLOW
 | 
FE_UNDERFLOW
)

	)

53 
	#_FPSCR_ENABLE_SHIFT
 8

	)

54 
	#_FPSCR_ENABLE_MASK
 (
FE_ALL_EXCEPT
 << 
_FPSCR_ENABLE_SHIFT
)

	)

57 
	#FE_TONEAREST
 0x0

	)

58 
	#FE_UPWARD
 0x1

	)

59 
	#FE_DOWNWARD
 0x2

	)

60 
	#FE_TOWARDZERO
 0x3

	)

61 
	#_FPSCR_RMODE_SHIFT
 22

	)

64 c⁄° 
„nv_t
 
__„_dÊ_ív
;

65 
	#FE_DFL_ENV
 (&
__„_dÊ_ív
)

	)

67 
__ölöe
 
	$„gëív
(
„nv_t
* 
__ívp
) {

68 
„nv_t
 
_Âs¸
;

69 #i‡!
	`deföed
(
__SOFTFP__
)

70 #i‡!
	`deföed
(
__thumb__
Ë|| deföed(
__thumb2__
)

71 
__asm__
 
	`__vﬁ©ûe__
("vmr†%0,Âs¸" : "Ù" (
_Âs¸
));

74 
__asm__
 
	`__vﬁ©ûe__
(

83 : "Ù" (
_Âs¸
) : : "ip");

86 
_Âs¸
 = 0;

88 *
__ívp
 = 
_Âs¸
;

90 
	}
}

92 
__ölöe
 
	$„£ãnv
(c⁄° 
„nv_t
* 
__ívp
) {

93 
„nv_t
 
_Âs¸
 = *
__ívp
;

94 #i‡!
	`deföed
(
__SOFTFP__
)

95 #i‡!
	`deföed
(
__thumb__
Ë|| deföed(
__thumb2__
)

96 
__asm__
 
	`__vﬁ©ûe__
("vm§ fps¸,%0" : :"ri" (
_Âs¸
));

99 
__asm__
 
	`__vﬁ©ûe__
(

108 : : "ri" (
_Âs¸
) : "ip");

111 
_Âs¸
 = _fpscr;

114 
	}
}

116 
__ölöe
 
	$„˛óªx˚±
(
__ex˚±s
) {

117 
„x˚±_t
 
__Âs¸
;

118 
	`„gëív
(&
__Âs¸
);

119 
__Âs¸
 &~
__ex˚±s
;

120 
	`„£ãnv
(&
__Âs¸
);

122 
	}
}

124 
__ölöe
 
	$„gëex˚±Êag
(
„x˚±_t
* 
__Êagp
, 
__ex˚±s
) {

125 
„x˚±_t
 
__Âs¸
;

126 
	`„gëív
(&
__Âs¸
);

127 *
__Êagp
 = 
__Âs¸
 & 
__ex˚±s
;

129 
	}
}

131 
__ölöe
 
	$„£ãx˚±Êag
(c⁄° 
„x˚±_t
* 
__Êagp
, 
__ex˚±s
) {

132 
„x˚±_t
 
__Âs¸
;

133 
	`„gëív
(&
__Âs¸
);

134 
__Âs¸
 &~
__ex˚±s
;

135 
__Âs¸
 |*
__Êagp
 & 
__ex˚±s
;

136 
	`„£ãnv
(&
__Âs¸
);

138 
	}
}

140 
__ölöe
 
	$„øi£ex˚±
(
__ex˚±s
) {

141 
„x˚±_t
 
__ex
 = 
__ex˚±s
;

142 
	`„£ãx˚±Êag
(&
__ex
, 
__ex˚±s
);

144 
	}
}

146 
__ölöe
 
	$„ã°ex˚±
(
__ex˚±s
) {

147 
„x˚±_t
 
__Âs¸
;

148 
	`„gëív
(&
__Âs¸
);

149  (
__Âs¸
 & 
__ex˚±s
);

150 
	}
}

152 
__ölöe
 
	$„gëround
() {

153 
„nv_t
 
_Âs¸
;

154 
	`„gëív
(&
_Âs¸
);

155  ((
_Âs¸
 >> 
_FPSCR_RMODE_SHIFT
) & 0x3);

156 
	}
}

158 
__ölöe
 
	$„£åound
(
__round
) {

159 
„nv_t
 
_Âs¸
;

160 
	`„gëív
(&
_Âs¸
);

161 
_Âs¸
 &~(0x3 << 
_FPSCR_RMODE_SHIFT
);

162 
_Âs¸
 |(
__round
 << 
_FPSCR_RMODE_SHIFT
);

163 
	`„£ãnv
(&
_Âs¸
);

165 
	}
}

167 
__ölöe
 
	$„hﬁdex˚±
(
„nv_t
* 
__ívp
) {

168 
„nv_t
 
__ív
;

169 
	`„gëív
(&
__ív
);

170 *
__ívp
 = 
__ív
;

171 
__ív
 &~(
FE_ALL_EXCEPT
 | 
_FPSCR_ENABLE_MASK
);

172 
	`„£ãnv
(&
__ív
);

174 
	}
}

176 
__ölöe
 
	$„upd©ìnv
(c⁄° 
„nv_t
* 
__ívp
) {

177 
„x˚±_t
 
__Âs¸
;

178 
	`„gëív
(&
__Âs¸
);

179 
	`„£ãnv
(
__ívp
);

180 
	`„øi£ex˚±
(
__Âs¸
 & 
FE_ALL_EXCEPT
);

182 
	}
}

184 #i‡
__BSD_VISIBLE


186 
__ölöe
 
	$„íabÀex˚±
(
__mask
) {

187 
„nv_t
 
__ﬁd_Âs¸
, 
__√w_Âs¸
;

188 
	`„gëív
(&
__ﬁd_Âs¸
);

189 
__√w_Âs¸
 = 
__ﬁd_Âs¸
 | (
__mask
 & 
FE_ALL_EXCEPT
Ë<< 
_FPSCR_ENABLE_SHIFT
;

190 
	`„£ãnv
(&
__√w_Âs¸
);

191  ((
__ﬁd_Âs¸
 >> 
_FPSCR_ENABLE_SHIFT
Ë& 
FE_ALL_EXCEPT
);

192 
	}
}

194 
__ölöe
 
	$„dißbÀex˚±
(
__mask
) {

195 
„nv_t
 
__ﬁd_Âs¸
, 
__√w_Âs¸
;

196 
	`„gëív
(&
__ﬁd_Âs¸
);

197 
__√w_Âs¸
 = 
__ﬁd_Âs¸
 & ~((
__mask
 & 
FE_ALL_EXCEPT
Ë<< 
_FPSCR_ENABLE_SHIFT
);

198 
	`„£ãnv
(&
__√w_Âs¸
);

199  ((
__ﬁd_Âs¸
 >> 
_FPSCR_ENABLE_SHIFT
Ë& 
FE_ALL_EXCEPT
);

200 
	}
}

202 
__ölöe
 
	$„gëex˚±
() {

203 
„nv_t
 
__Âs¸
;

204 
	`„gëív
(&
__Âs¸
);

205  ((
__Âs¸
 & 
_FPSCR_ENABLE_MASK
Ë>> 
_FPSCR_ENABLE_SHIFT
);

206 
	}
}

210 
	g__END_DECLS


	@fnmatch.h

28 #i‚de‡
_FNMATCH_H


29 
	#_FNMATCH_H


	)

31 
	~<sys/cdefs.h
>

33 
	g__BEGIN_DECLS


35 
	#FNM_NOMATCH
 1

	)

36 
	#FNM_NOSYS
 2

	)

38 
	#FNM_NOESCAPE
 0x01

	)

39 
	#FNM_PATHNAME
 0x02

	)

40 
	#FNM_PERIOD
 0x04

	)

41 
	#FNM_LEADING_DIR
 0x08

	)

42 
	#FNM_CASEFOLD
 0x10

	)

44 
	#FNM_IGNORECASE
 
FNM_CASEFOLD


	)

45 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

47 
‚m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
Êags
);

49 
	g__END_DECLS


	@fts.h

35 #i‚def 
_FTS_H_


36 
	#_FTS_H_


	)

38 
	~<sys/ty≥s.h
>

41 
_·£¡
 *
	m·s_cur
;

42 
_·£¡
 *
	m·s_chûd
;

43 
_·£¡
 **
	m·s_¨øy
;

44 
dev_t
 
	m·s_dev
;

45 *
	m·s_∑th
;

46 
	m·s_rfd
;

47 
size_t
 
	m·s_∑thÀn
;

48 
	m·s_nôems
;

49 (*
	m·s_com∑r
)();

51 
	#FTS_COMFOLLOW
 0x0001

	)

52 
	#FTS_LOGICAL
 0x0002

	)

53 
	#FTS_NOCHDIR
 0x0004

	)

54 
	#FTS_NOSTAT
 0x0008

	)

55 
	#FTS_PHYSICAL
 0x0010

	)

56 
	#FTS_SEEDOT
 0x0020

	)

57 
	#FTS_XDEV
 0x0040

	)

58 
	#FTS_OPTIONMASK
 0x00f‡

	)

60 
	#FTS_NAMEONLY
 0x1000

	)

61 
	#FTS_STOP
 0x2000

	)

62 
	m·s_›ti⁄s
;

63 } 
	tFTS
;

65 
	s_·£¡
 {

66 
_·£¡
 *
	m·s_cy˛e
;

67 
_·£¡
 *
	m·s_∑ª¡
;

68 
_·£¡
 *
	m·s_lök
;

69 
	m·s_numbî
;

70 *
	m·s_poöãr
;

71 *
	m·s_ac˝©h
;

72 *
	m·s_∑th
;

73 
	m·s_î∫o
;

74 
	m·s_symfd
;

75 
size_t
 
	m·s_∑thÀn
;

76 
size_t
 
	m·s_«mñí
;

78 
öo_t
 
	m·s_öo
;

79 
dev_t
 
	m·s_dev
;

80 
∆ök_t
 
	m·s_∆ök
;

82 
	#FTS_ROOTPARENTLEVEL
 -1

	)

83 
	#FTS_ROOTLEVEL
 0

	)

84 
	#FTS_MAXLEVEL
 0x7fff

	)

85 
	m·s_Àvñ
;

87 
	#FTS_D
 1

	)

88 
	#FTS_DC
 2

	)

89 
	#FTS_DEFAULT
 3

	)

90 
	#FTS_DNR
 4

	)

91 
	#FTS_DOT
 5

	)

92 
	#FTS_DP
 6

	)

93 
	#FTS_ERR
 7

	)

94 
	#FTS_F
 8

	)

95 
	#FTS_INIT
 9

	)

96 
	#FTS_NS
 10

	)

97 
	#FTS_NSOK
 11

	)

98 
	#FTS_SL
 12

	)

99 
	#FTS_SLNONE
 13

	)

100 
	m·s_öfo
;

102 
	#FTS_DONTCHDIR
 0x01

	)

103 
	#FTS_SYMFOLLOW
 0x02

	)

104 
	m·s_Êags
;

106 
	#FTS_AGAIN
 1

	)

107 
	#FTS_FOLLOW
 2

	)

108 
	#FTS_NOINSTR
 3

	)

109 
	#FTS_SKIP
 4

	)

110 
	m·s_ö°r
;

112 
°©
 *
	m·s_°©p
;

113 
	m·s_«me
[1];

114 } 
	tFTSENT
;

116 
	~<sys/cdefs.h
>

118 
__BEGIN_DECLS


119 
FTSENT
 *
·s_chûdªn
(
FTS
 *, );

120 
·s_˛o£
(
FTS
 *);

121 
FTS
 *
·s_›í
(* const *, ,

122 (*)(c⁄° 
FTSENT
 **, const FTSENT **));

123 
FTSENT
 *
	`·s_ªad
(
FTS
 *);

124 
	`·s_£t
(
FTS
 *, 
FTSENT
 *, );

125 
__END_DECLS


	@getopt.h

40 #i‚de‡
_GETOPT_H_


41 
	#_GETOPT_H_


	)

43 
	~<sys/cdefs.h
>

48 
	#no_¨gumít
 0

	)

49 
	#ªquúed_¨gumít
 1

	)

50 
	#›ti⁄Æ_¨gumít
 2

	)

52 
	s›ti⁄
 {

54 c⁄° *
	m«me
;

59 
	mhas_¨g
;

61 *
	mÊag
;

63 
	mvÆ
;

66 
__BEGIN_DECLS


67 
gë›t_l⁄g
(, * const *, const *,

68 c⁄° 
›ti⁄
 *, *);

69 
gë›t_l⁄g_⁄ly
(, * const *, const *,

70 c⁄° 
›ti⁄
 *, *);

71 #i‚de‡
_GETOPT_DEFINED_


72 
	#_GETOPT_DEFINED_


	)

73 
gë›t
(, * const *, const *);

76 *
›èrg
;

77 
›ãº
;

78 
›töd
;

79 
›t›t
;

80 
›åe£t
;

83 
gësub›t
(**, * const *, **);

84 *
sub›èrg
;

88 
	g__END_DECLS


	@grp.h

40 #i‚de‡
_GRP_H_


41 
	#_GRP_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/ty≥s.h
>

46 #i‡
__BSD_VISIBLE


47 
	#_PATH_GROUP
 "/ëc/group"

	)

50 
	sgroup
 {

51 *
	mgr_«me
;

52 *
	mgr_∑sswd
;

53 
gid_t
 
	mgr_gid
;

54 **
	mgr_mem
;

57 
__BEGIN_DECLS


58 
group
 *
gëgrgid
(
gid_t
);

59 
group
 *
gëg∫am
(const *);

62 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >200112 || 
__XPG_VISIBLE


63 
group
 *
gëgª¡
();

64 
£tgª¡
();

65 
ídgª¡
();

66 
gëgrgid_r
(
gid_t
, 
group
 *, *,

67 
size_t
, 
group
 **);

68 
gëg∫am_r
(c⁄° *, 
group
 *, *,

69 
size_t
, 
group
 **);

71 #i‡
__BSD_VISIBLE


72 
£tgrfûe
(const *);

73 
£tgrou≥¡
();

74 *
group_‰om_gid
(
gid_t
, );

78 
gëgrou∂i°
 (c⁄° *
u£r
, 
gid_t
 
group
,

79 
gid_t
 *
groups
, *
ngroups
);

81 
öôgroups
 (c⁄° *
u£r
, 
gid_t
 
group
);

83 
	g__END_DECLS


	@inttypes.h

19 #i‚def 
_INTTYPES_H_


20 
	#_INTTYPES_H_


	)

22 
	~<°döt.h
>

23 
	~<sys/cdefs.h
>

25 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_FORMAT_MACROS
)

43 
	#PRId8
 "d"

	)

44 
	#PRId16
 "d"

	)

45 
	#PRId32
 "d"

	)

46 
	#PRId64
 "Œd"

	)

48 
	#PRIdLEAST8
 "d"

	)

49 
	#PRIdLEAST16
 "d"

	)

50 
	#PRIdLEAST32
 "d"

	)

51 
	#PRIdLEAST64
 "Œd"

	)

53 
	#PRIdFAST8
 "d"

	)

54 
	#PRIdFAST16
 "d"

	)

55 
	#PRIdFAST32
 "d"

	)

56 
	#PRIdFAST64
 "Œd"

	)

58 
	#PRIdMAX
 "jd"

	)

59 
	#PRIdPTR
 "d"

	)

61 
	#PRIi8
 "i"

	)

62 
	#PRIi16
 "i"

	)

63 
	#PRIi32
 "i"

	)

64 
	#PRIi64
 "Œi"

	)

66 
	#PRIiLEAST8
 "i"

	)

67 
	#PRIiLEAST16
 "i"

	)

68 
	#PRIiLEAST32
 "i"

	)

69 
	#PRIiLEAST64
 "Œi"

	)

71 
	#PRIiFAST8
 "i"

	)

72 
	#PRIiFAST16
 "i"

	)

73 
	#PRIiFAST32
 "i"

	)

74 
	#PRIiFAST64
 "Œi"

	)

76 
	#PRIiMAX
 "ji"

	)

77 
	#PRIiPTR
 "i"

	)

80 
	#PRIo8
 "o"

	)

81 
	#PRIo16
 "o"

	)

82 
	#PRIo32
 "o"

	)

83 
	#PRIo64
 "Œo"

	)

85 
	#PRIoLEAST8
 "o"

	)

86 
	#PRIoLEAST16
 "o"

	)

87 
	#PRIoLEAST32
 "o"

	)

88 
	#PRIoLEAST64
 "Œo"

	)

90 
	#PRIoFAST8
 "o"

	)

91 
	#PRIoFAST16
 "o"

	)

92 
	#PRIoFAST32
 "o"

	)

93 
	#PRIoFAST64
 "Œo"

	)

95 
	#PRIoMAX
 "jo"

	)

96 
	#PRIoPTR
 "o"

	)

98 
	#PRIu8
 "u"

	)

99 
	#PRIu16
 "u"

	)

100 
	#PRIu32
 "u"

	)

101 
	#PRIu64
 "Œu"

	)

103 
	#PRIuLEAST8
 "u"

	)

104 
	#PRIuLEAST16
 "u"

	)

105 
	#PRIuLEAST32
 "u"

	)

106 
	#PRIuLEAST64
 "Œu"

	)

108 
	#PRIuFAST8
 "u"

	)

109 
	#PRIuFAST16
 "u"

	)

110 
	#PRIuFAST32
 "u"

	)

111 
	#PRIuFAST64
 "Œu"

	)

113 
	#PRIuMAX
 "ju"

	)

114 
	#PRIuPTR
 "u"

	)

116 
	#PRIx8
 "x"

	)

117 
	#PRIx16
 "x"

	)

118 
	#PRIx32
 "x"

	)

119 
	#PRIx64
 "Œx"

	)

121 
	#PRIxLEAST8
 "x"

	)

122 
	#PRIxLEAST16
 "x"

	)

123 
	#PRIxLEAST32
 "x"

	)

124 
	#PRIxLEAST64
 "Œx"

	)

126 
	#PRIxFAST8
 "x"

	)

127 
	#PRIxFAST16
 "x"

	)

128 
	#PRIxFAST32
 "x"

	)

129 
	#PRIxFAST64
 "Œx"

	)

131 
	#PRIxMAX
 "jx"

	)

132 
	#PRIxPTR
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 "ŒX"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 "ŒX"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 "X"

	)

146 
	#PRIXFAST32
 "X"

	)

147 
	#PRIXFAST64
 "ŒX"

	)

149 
	#PRIXMAX
 "jX"

	)

150 
	#PRIXPTR
 "X"

	)

153 
	#SCNd8
 "hhd"

	)

154 
	#SCNd16
 "hd"

	)

155 
	#SCNd32
 "d"

	)

156 
	#SCNd64
 "Œd"

	)

158 
	#SCNdLEAST8
 "hhd"

	)

159 
	#SCNdLEAST16
 "hd"

	)

160 
	#SCNdLEAST32
 "d"

	)

161 
	#SCNdLEAST64
 "Œd"

	)

163 
	#SCNdFAST8
 "hhd"

	)

164 
	#SCNdFAST16
 "hd"

	)

165 
	#SCNdFAST32
 "d"

	)

166 
	#SCNdFAST64
 "Œd"

	)

168 
	#SCNdMAX
 "jd"

	)

169 
	#SCNdPTR
 "d"

	)

171 
	#SCNi8
 "hhi"

	)

172 
	#SCNi16
 "hi"

	)

173 
	#SCNi32
 "i"

	)

174 
	#SCNi64
 "Œi"

	)

176 
	#SCNiLEAST8
 "hhi"

	)

177 
	#SCNiLEAST16
 "hi"

	)

178 
	#SCNiLEAST32
 "i"

	)

179 
	#SCNiLEAST64
 "Œi"

	)

181 
	#SCNiFAST8
 "hhi"

	)

182 
	#SCNiFAST16
 "hi"

	)

183 
	#SCNiFAST32
 "i"

	)

184 
	#SCNiFAST64
 "Œi"

	)

186 
	#SCNiMAX
 "ji"

	)

187 
	#SCNiPTR
 "i"

	)

190 
	#SCNo8
 "hho"

	)

191 
	#SCNo16
 "ho"

	)

192 
	#SCNo32
 "o"

	)

193 
	#SCNo64
 "Œo"

	)

195 
	#SCNoLEAST8
 "hho"

	)

196 
	#SCNoLEAST16
 "ho"

	)

197 
	#SCNoLEAST32
 "o"

	)

198 
	#SCNoLEAST64
 "Œo"

	)

200 
	#SCNoFAST8
 "hho"

	)

201 
	#SCNoFAST16
 "ho"

	)

202 
	#SCNoFAST32
 "o"

	)

203 
	#SCNoFAST64
 "Œo"

	)

205 
	#SCNoMAX
 "jo"

	)

206 
	#SCNoPTR
 "o"

	)

208 
	#SCNu8
 "hhu"

	)

209 
	#SCNu16
 "hu"

	)

210 
	#SCNu32
 "u"

	)

211 
	#SCNu64
 "Œu"

	)

213 
	#SCNuLEAST8
 "hhu"

	)

214 
	#SCNuLEAST16
 "hu"

	)

215 
	#SCNuLEAST32
 "u"

	)

216 
	#SCNuLEAST64
 "Œu"

	)

218 
	#SCNuFAST8
 "hhu"

	)

219 
	#SCNuFAST16
 "hu"

	)

220 
	#SCNuFAST32
 "u"

	)

221 
	#SCNuFAST64
 "Œu"

	)

223 
	#SCNuMAX
 "ju"

	)

224 
	#SCNuPTR
 "u"

	)

226 
	#SCNx8
 "hhx"

	)

227 
	#SCNx16
 "hx"

	)

228 
	#SCNx32
 "x"

	)

229 
	#SCNx64
 "Œx"

	)

231 
	#SCNxLEAST8
 "hhx"

	)

232 
	#SCNxLEAST16
 "hx"

	)

233 
	#SCNxLEAST32
 "x"

	)

234 
	#SCNxLEAST64
 "Œx"

	)

236 
	#SCNxFAST8
 "hhx"

	)

237 
	#SCNxFAST16
 "hx"

	)

238 
	#SCNxFAST32
 "x"

	)

239 
	#SCNxFAST64
 "Œx"

	)

241 
	#SCNxMAX
 "jx"

	)

242 
	#SCNxPTR
 "x"

	)

247 
ötmax_t
 
	mquŸ
;

248 
ötmax_t
 
	mªm
;

249 } 
	timaxdiv_t
;

251 
__BEGIN_DECLS


252 
ötmax_t
 
°πoimax
(const *, **, );

253 
uötmax_t
 
°πoumax
(const *, **, );

255 
ötmax_t
 
°∫toimax
(c⁄° *
≈å
, **
íd±r
, 
ba£
, 
size_t
 
n
);

256 
uötmax_t
 
°∫toumax
(c⁄° *
≈å
, **
íd±r
, 
ba£
, 
size_t
 
n
);

257 
	g__END_DECLS


	@jni.h

24 #i‚de‡
JNI_H_


25 
	#JNI_H_


	)

27 
	~<sys/cdefs.h
>

28 
	~<°d¨g.h
>

33 #ifde‡
HAVE_INTTYPES_H


34 
	~<öây≥s.h
>

35 
uöt8_t
 
	tjboﬁón
;

36 
öt8_t
 
	tjbyã
;

37 
uöt16_t
 
	tjch¨
;

38 
öt16_t
 
	tjsh‹t
;

39 
öt32_t
 
	tjöt
;

40 
öt64_t
 
	tjl⁄g
;

41 
	tjÊﬂt
;

42 
	tjdoubÀ
;

44 
	tjboﬁón
;

45 sig√d 
	tjbyã
;

46 
	tjch¨
;

47 
	tjsh‹t
;

48 
	tjöt
;

49 
	tjl⁄g
;

50 
	tjÊﬂt
;

51 
	tjdoubÀ
;

55 
jöt
 
	tjsize
;

57 #ifde‡
__˝lu•lus


61 ˛as†
	c_jobje˘
 {};

62 ˛as†
	c_j˛ass
 : 
public
 
_jobje˘
 {};

63 ˛as†
	c_j°rög
 : 
public
 
_jobje˘
 {};

64 ˛as†
	c_j¨øy
 : 
public
 
_jobje˘
 {};

65 ˛as†
	c_jobje˘Aºay
 : 
public
 
_j¨øy
 {};

66 ˛as†
	c_jboﬁónAºay
 : 
public
 
_j¨øy
 {};

67 ˛as†
	c_jbyãAºay
 : 
public
 
_j¨øy
 {};

68 ˛as†
	c_jch¨Aºay
 : 
public
 
_j¨øy
 {};

69 ˛as†
	c_jsh‹tAºay
 : 
public
 
_j¨øy
 {};

70 ˛as†
	c_jötAºay
 : 
public
 
_j¨øy
 {};

71 ˛as†
	c_jl⁄gAºay
 : 
public
 
_j¨øy
 {};

72 ˛as†
	c_jÊﬂtAºay
 : 
public
 
_j¨øy
 {};

73 ˛as†
	c_jdoubÀAºay
 : 
public
 
_j¨øy
 {};

74 ˛as†
	c_jthrowabÀ
 : 
public
 
_jobje˘
 {};

76 
_jobje˘
* 
	tjobje˘
;

77 
_j˛ass
* 
	tj˛ass
;

78 
_j°rög
* 
	tj°rög
;

79 
_j¨øy
* 
	tj¨øy
;

80 
_jobje˘Aºay
* 
	tjobje˘Aºay
;

81 
_jboﬁónAºay
* 
	tjboﬁónAºay
;

82 
_jbyãAºay
* 
	tjbyãAºay
;

83 
_jch¨Aºay
* 
	tjch¨Aºay
;

84 
_jsh‹tAºay
* 
	tjsh‹tAºay
;

85 
_jötAºay
* 
	tjötAºay
;

86 
_jl⁄gAºay
* 
	tjl⁄gAºay
;

87 
_jÊﬂtAºay
* 
	tjÊﬂtAºay
;

88 
_jdoubÀAºay
* 
	tjdoubÀAºay
;

89 
_jthrowabÀ
* 
	tjthrowabÀ
;

90 
_jobje˘
* 
	tjwók
;

98 * 
	tjobje˘
;

99 
jobje˘
 
	tj˛ass
;

100 
jobje˘
 
	tj°rög
;

101 
jobje˘
 
	tj¨øy
;

102 
j¨øy
 
	tjobje˘Aºay
;

103 
j¨øy
 
	tjboﬁónAºay
;

104 
j¨øy
 
	tjbyãAºay
;

105 
j¨øy
 
	tjch¨Aºay
;

106 
j¨øy
 
	tjsh‹tAºay
;

107 
j¨øy
 
	tjötAºay
;

108 
j¨øy
 
	tjl⁄gAºay
;

109 
j¨øy
 
	tjÊﬂtAºay
;

110 
j¨øy
 
	tjdoubÀAºay
;

111 
jobje˘
 
	tjthrowabÀ
;

112 
jobje˘
 
	tjwók
;

116 
	g_jfõldID
;

117 
_jfõldID
* 
	tjfõldID
;

119 
	g_jmëhodID
;

120 
_jmëhodID
* 
	tjmëhodID
;

122 
	gJNIInvokeI¡îÁ˚
;

124 
	ujvÆue
 {

125 
jboﬁón
 
	mz
;

126 
jbyã
 
	mb
;

127 
jch¨
 
	mc
;

128 
jsh‹t
 
	ms
;

129 
jöt
 
	mi
;

130 
jl⁄g
 
	mj
;

131 
jÊﬂt
 
	mf
;

132 
jdoubÀ
 
	md
;

133 
jobje˘
 
	ml
;

134 } 
	tjvÆue
;

136 
	ejobje˘RefTy≥
 {

137 
	mJNIInvÆidRefTy≥
 = 0,

138 
	mJNILoˇlRefTy≥
 = 1,

139 
	mJNIGlobÆRefTy≥
 = 2,

140 
	mJNIWókGlobÆRefTy≥
 = 3

141 } 
	tjobje˘RefTy≥
;

144 c⁄° * 
	m«me
;

145 c⁄° * 
	msig«tuª
;

146 * 
	m‚På
;

147 } 
	tJNIN©iveMëhod
;

149 
	g_JNIEnv
;

150 
	g_JavaVM
;

151 c⁄° 
	tJNIN©iveI¡îÁ˚
* 
	tC_JNIEnv
;

153 #i‡
deföed
(
__˝lu•lus
)

154 
_JNIEnv
 
	tJNIEnv
;

155 
_JavaVM
 
	tJavaVM
;

157 c⁄° 
	tJNIN©iveI¡îÁ˚
* 
	tJNIEnv
;

158 c⁄° 
	tJNIInvokeI¡îÁ˚
* 
	tJavaVM
;

164 
	sJNIN©iveI¡îÁ˚
 {

165 * 
	mª£rved0
;

166 * 
	mª£rved1
;

167 * 
	mª£rved2
;

168 * 
	mª£rved3
;

170 
jöt
 (*
GëVîsi⁄
)(
	mJNIEnv
 *);

172 
j˛ass
 (*
DeföeCœss
)(
	mJNIEnv
*, c⁄° *, 
	mjobje˘
, c⁄° 
	mjbyã
*,

173 
	mjsize
);

174 
j˛ass
 (*
FödCœss
)(
	mJNIEnv
*, const *);

176 
jmëhodID
 (*
FromReÊe˘edMëhod
)(
	mJNIEnv
*, 
	mjobje˘
);

177 
jfõldID
 (*
FromReÊe˘edFõld
)(
	mJNIEnv
*, 
	mjobje˘
);

179 
jobje˘
 (*
ToReÊe˘edMëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjboﬁón
);

181 
j˛ass
 (*
GëSu≥r˛ass
)(
	mJNIEnv
*, 
	mj˛ass
);

182 
jboﬁón
 (*
IsAssig«bÀFrom
)(
	mJNIEnv
*, 
	mj˛ass
, jclass);

185 
jobje˘
 (*
ToReÊe˘edFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjboﬁón
);

187 
jöt
 (*
Throw
)(
	mJNIEnv
*, 
	mjthrowabÀ
);

188 
jöt
 (*
ThrowNew
)(
	mJNIEnv
 *, 
	mj˛ass
, const *);

189 
jthrowabÀ
 (*
Ex˚±i⁄Occuºed
)(
	mJNIEnv
*);

190 (*
	mEx˚±i⁄Des¸ibe
)(
	mJNIEnv
*);

191 (*
	mEx˚±i⁄CÀ¨
)(
	mJNIEnv
*);

192 (*
	mF©ÆEº‹
)(
	mJNIEnv
*, const *);

194 
jöt
 (*
PushLoˇlFøme
)(
	mJNIEnv
*, 
	mjöt
);

195 
jobje˘
 (*
P›LoˇlFøme
)(
	mJNIEnv
*, 
	mjobje˘
);

197 
jobje˘
 (*
NewGlobÆRef
)(
	mJNIEnv
*, 
	mjobje˘
);

198 (*
	mDñëeGlobÆRef
)(
	mJNIEnv
*, 
	mjobje˘
);

199 (*
	mDñëeLoˇlRef
)(
	mJNIEnv
*, 
	mjobje˘
);

200 
jboﬁón
 (*
IsSameObje˘
)(
	mJNIEnv
*, 
	mjobje˘
, jobject);

202 
jobje˘
 (*
NewLoˇlRef
)(
	mJNIEnv
*, 
	mjobje˘
);

203 
jöt
 (*
EnsuªLoˇlC≠acôy
)(
	mJNIEnv
*, 
	mjöt
);

205 
jobje˘
 (*
AŒocObje˘
)(
	mJNIEnv
*, 
	mj˛ass
);

206 
jobje˘
 (*
NewObje˘
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

207 
jobje˘
 (*
NewObje˘V
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
);

208 
jobje˘
 (*
NewObje˘A
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*);

210 
j˛ass
 (*
GëObje˘Cœss
)(
	mJNIEnv
*, 
	mjobje˘
);

211 
jboﬁón
 (*
IsIn°™˚Of
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
);

212 
jmëhodID
 (*
GëMëhodID
)(
	mJNIEnv
*, 
	mj˛ass
, const *, const *);

214 
jobje˘
 (*
CÆlObje˘Mëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...);

215 
jobje˘
 (*
CÆlObje˘MëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
);

216 
jobje˘
 (*
CÆlObje˘MëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*);

217 
jboﬁón
 (*
CÆlBoﬁónMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...);

218 
jboﬁón
 (*
CÆlBoﬁónMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
);

219 
jboﬁón
 (*
CÆlBoﬁónMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*);

220 
jbyã
 (*
CÆlByãMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...);

221 
jbyã
 (*
CÆlByãMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
);

222 
jbyã
 (*
CÆlByãMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*);

223 
jch¨
 (*
CÆlCh¨Mëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...);

224 
jch¨
 (*
CÆlCh¨MëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
);

225 
jch¨
 (*
CÆlCh¨MëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*);

226 
jsh‹t
 (*
CÆlSh‹tMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...);

227 
jsh‹t
 (*
CÆlSh‹tMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
);

228 
jsh‹t
 (*
CÆlSh‹tMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*);

229 
jöt
 (*
CÆlI¡Mëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...);

230 
jöt
 (*
CÆlI¡MëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
);

231 
jöt
 (*
CÆlI¡MëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*);

232 
jl⁄g
 (*
CÆlL⁄gMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...);

233 
jl⁄g
 (*
CÆlL⁄gMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
);

234 
jl⁄g
 (*
CÆlL⁄gMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*);

235 
jÊﬂt
 (*
CÆlFlﬂtMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...Ë
	m__NDK_FPABI__
;

236 
jÊﬂt
 (*
CÆlFlﬂtMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
Ë
	m__NDK_FPABI__
;

237 
jÊﬂt
 (*
CÆlFlﬂtMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*Ë
	m__NDK_FPABI__
;

238 
jdoubÀ
 (*
CÆlDoubÀMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...Ë
	m__NDK_FPABI__
;

239 
jdoubÀ
 (*
CÆlDoubÀMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
Ë
	m__NDK_FPABI__
;

240 
jdoubÀ
 (*
CÆlDoubÀMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*Ë
	m__NDK_FPABI__
;

241 (*
	mCÆlVoidMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, ...);

242 (*
	mCÆlVoidMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mva_li°
);

243 (*
	mCÆlVoidMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjmëhodID
, 
	mjvÆue
*);

245 
jobje˘
 (*
CÆlN⁄vútuÆObje˘Mëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

246 
	mjmëhodID
, ...);

247 
jobje˘
 (*
CÆlN⁄vútuÆObje˘MëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

248 
	mjmëhodID
, 
	mva_li°
);

249 
jobje˘
 (*
CÆlN⁄vútuÆObje˘MëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

250 
	mjmëhodID
, 
	mjvÆue
*);

251 
jboﬁón
 (*
CÆlN⁄vútuÆBoﬁónMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

252 
	mjmëhodID
, ...);

253 
jboﬁón
 (*
CÆlN⁄vútuÆBoﬁónMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

254 
	mjmëhodID
, 
	mva_li°
);

255 
jboﬁón
 (*
CÆlN⁄vútuÆBoﬁónMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

256 
	mjmëhodID
, 
	mjvÆue
*);

257 
jbyã
 (*
CÆlN⁄vútuÆByãMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

258 
	mjmëhodID
, ...);

259 
jbyã
 (*
CÆlN⁄vútuÆByãMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

260 
	mjmëhodID
, 
	mva_li°
);

261 
jbyã
 (*
CÆlN⁄vútuÆByãMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

262 
	mjmëhodID
, 
	mjvÆue
*);

263 
jch¨
 (*
CÆlN⁄vútuÆCh¨Mëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

264 
	mjmëhodID
, ...);

265 
jch¨
 (*
CÆlN⁄vútuÆCh¨MëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

266 
	mjmëhodID
, 
	mva_li°
);

267 
jch¨
 (*
CÆlN⁄vútuÆCh¨MëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

268 
	mjmëhodID
, 
	mjvÆue
*);

269 
jsh‹t
 (*
CÆlN⁄vútuÆSh‹tMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

270 
	mjmëhodID
, ...);

271 
jsh‹t
 (*
CÆlN⁄vútuÆSh‹tMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

272 
	mjmëhodID
, 
	mva_li°
);

273 
jsh‹t
 (*
CÆlN⁄vútuÆSh‹tMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

274 
	mjmëhodID
, 
	mjvÆue
*);

275 
jöt
 (*
CÆlN⁄vútuÆI¡Mëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

276 
	mjmëhodID
, ...);

277 
jöt
 (*
CÆlN⁄vútuÆI¡MëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

278 
	mjmëhodID
, 
	mva_li°
);

279 
jöt
 (*
CÆlN⁄vútuÆI¡MëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

280 
	mjmëhodID
, 
	mjvÆue
*);

281 
jl⁄g
 (*
CÆlN⁄vútuÆL⁄gMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

282 
	mjmëhodID
, ...);

283 
jl⁄g
 (*
CÆlN⁄vútuÆL⁄gMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

284 
	mjmëhodID
, 
	mva_li°
);

285 
jl⁄g
 (*
CÆlN⁄vútuÆL⁄gMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

286 
	mjmëhodID
, 
	mjvÆue
*);

287 
jÊﬂt
 (*
CÆlN⁄vútuÆFlﬂtMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

288 
	mjmëhodID
, ...Ë
	m__NDK_FPABI__
;

289 
jÊﬂt
 (*
CÆlN⁄vútuÆFlﬂtMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

290 
	mjmëhodID
, 
	mva_li°
Ë
	m__NDK_FPABI__
;

291 
jÊﬂt
 (*
CÆlN⁄vútuÆFlﬂtMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

292 
	mjmëhodID
, 
	mjvÆue
*Ë
	m__NDK_FPABI__
;

293 
jdoubÀ
 (*
CÆlN⁄vútuÆDoubÀMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

294 
	mjmëhodID
, ...Ë
	m__NDK_FPABI__
;

295 
jdoubÀ
 (*
CÆlN⁄vútuÆDoubÀMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

296 
	mjmëhodID
, 
	mva_li°
Ë
	m__NDK_FPABI__
;

297 
jdoubÀ
 (*
CÆlN⁄vútuÆDoubÀMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

298 
	mjmëhodID
, 
	mjvÆue
*Ë
	m__NDK_FPABI__
;

299 (*
	mCÆlN⁄vútuÆVoidMëhod
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

300 
	mjmëhodID
, ...);

301 (*
	mCÆlN⁄vútuÆVoidMëhodV
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

302 
	mjmëhodID
, 
	mva_li°
);

303 (*
	mCÆlN⁄vútuÆVoidMëhodA
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mj˛ass
,

304 
	mjmëhodID
, 
	mjvÆue
*);

306 
jfõldID
 (*
GëFõldID
)(
	mJNIEnv
*, 
	mj˛ass
, const *, const *);

308 
jobje˘
 (*
GëObje˘Fõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
);

309 
jboﬁón
 (*
GëBoﬁónFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
);

310 
jbyã
 (*
GëByãFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
);

311 
jch¨
 (*
GëCh¨Fõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
);

312 
jsh‹t
 (*
GëSh‹tFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
);

313 
jöt
 (*
GëI¡Fõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
);

314 
jl⁄g
 (*
GëL⁄gFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
);

315 
jÊﬂt
 (*
GëFlﬂtFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
Ë
	m__NDK_FPABI__
;

316 
jdoubÀ
 (*
GëDoubÀFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
Ë
	m__NDK_FPABI__
;

318 (*
	mSëObje˘Fõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, jobject);

319 (*
	mSëBoﬁónFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, 
	mjboﬁón
);

320 (*
	mSëByãFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, 
	mjbyã
);

321 (*
	mSëCh¨Fõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, 
	mjch¨
);

322 (*
	mSëSh‹tFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, 
	mjsh‹t
);

323 (*
	mSëI¡Fõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, 
	mjöt
);

324 (*
	mSëL⁄gFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, 
	mjl⁄g
);

325 (*
	mSëFlﬂtFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, 
	mjÊﬂt
Ë
	m__NDK_FPABI__
;

326 (*
	mSëDoubÀFõld
)(
	mJNIEnv
*, 
	mjobje˘
, 
	mjfõldID
, 
	mjdoubÀ
Ë
	m__NDK_FPABI__
;

328 
jmëhodID
 (*
GëSèticMëhodID
)(
	mJNIEnv
*, 
	mj˛ass
, const *, const *);

330 
jobje˘
 (*
CÆlSèticObje˘Mëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

331 
jobje˘
 (*
CÆlSèticObje˘MëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
);

332 
jobje˘
 (*
CÆlSèticObje˘MëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*);

333 
jboﬁón
 (*
CÆlSèticBoﬁónMëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

334 
jboﬁón
 (*
CÆlSèticBoﬁónMëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
,

335 
	mva_li°
);

336 
jboﬁón
 (*
CÆlSèticBoﬁónMëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
,

337 
	mjvÆue
*);

338 
jbyã
 (*
CÆlSèticByãMëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

339 
jbyã
 (*
CÆlSèticByãMëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
);

340 
jbyã
 (*
CÆlSèticByãMëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*);

341 
jch¨
 (*
CÆlSèticCh¨Mëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

342 
jch¨
 (*
CÆlSèticCh¨MëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
);

343 
jch¨
 (*
CÆlSèticCh¨MëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*);

344 
jsh‹t
 (*
CÆlSèticSh‹tMëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

345 
jsh‹t
 (*
CÆlSèticSh‹tMëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
);

346 
jsh‹t
 (*
CÆlSèticSh‹tMëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*);

347 
jöt
 (*
CÆlSèticI¡Mëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

348 
jöt
 (*
CÆlSèticI¡MëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
);

349 
jöt
 (*
CÆlSèticI¡MëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*);

350 
jl⁄g
 (*
CÆlSèticL⁄gMëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

351 
jl⁄g
 (*
CÆlSèticL⁄gMëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
);

352 
jl⁄g
 (*
CÆlSèticL⁄gMëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*);

353 
jÊﬂt
 (*
CÆlSèticFlﬂtMëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...Ë
	m__NDK_FPABI__
;

354 
jÊﬂt
 (*
CÆlSèticFlﬂtMëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
Ë
	m__NDK_FPABI__
;

355 
jÊﬂt
 (*
CÆlSèticFlﬂtMëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*Ë
	m__NDK_FPABI__
;

356 
jdoubÀ
 (*
CÆlSèticDoubÀMëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...Ë
	m__NDK_FPABI__
;

357 
jdoubÀ
 (*
CÆlSèticDoubÀMëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
Ë
	m__NDK_FPABI__
;

358 
jdoubÀ
 (*
CÆlSèticDoubÀMëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*Ë
	m__NDK_FPABI__
;

359 (*
	mCÆlSèticVoidMëhod
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, ...);

360 (*
	mCÆlSèticVoidMëhodV
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mva_li°
);

361 (*
	mCÆlSèticVoidMëhodA
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjmëhodID
, 
	mjvÆue
*);

363 
jfõldID
 (*
GëSèticFõldID
)(
	mJNIEnv
*, 
	mj˛ass
, const *,

366 
jobje˘
 (*
GëSèticObje˘Fõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
);

367 
jboﬁón
 (*
GëSèticBoﬁónFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
);

368 
jbyã
 (*
GëSèticByãFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
);

369 
jch¨
 (*
GëSèticCh¨Fõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
);

370 
jsh‹t
 (*
GëSèticSh‹tFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
);

371 
jöt
 (*
GëSèticI¡Fõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
);

372 
jl⁄g
 (*
GëSèticL⁄gFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
);

373 
jÊﬂt
 (*
GëSèticFlﬂtFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
Ë
	m__NDK_FPABI__
;

374 
jdoubÀ
 (*
GëSèticDoubÀFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
Ë
	m__NDK_FPABI__
;

376 (*
	mSëSèticObje˘Fõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjobje˘
);

377 (*
	mSëSèticBoﬁónFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjboﬁón
);

378 (*
	mSëSèticByãFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjbyã
);

379 (*
	mSëSèticCh¨Fõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjch¨
);

380 (*
	mSëSèticSh‹tFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjsh‹t
);

381 (*
	mSëSèticI¡Fõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjöt
);

382 (*
	mSëSèticL⁄gFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjl⁄g
);

383 (*
	mSëSèticFlﬂtFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjÊﬂt
Ë
	m__NDK_FPABI__
;

384 (*
	mSëSèticDoubÀFõld
)(
	mJNIEnv
*, 
	mj˛ass
, 
	mjfõldID
, 
	mjdoubÀ
Ë
	m__NDK_FPABI__
;

386 
j°rög
 (*
NewSåög
)(
	mJNIEnv
*, c⁄° 
	mjch¨
*, 
	mjsize
);

387 
jsize
 (*
GëSåögLígth
)(
	mJNIEnv
*, 
	mj°rög
);

388 c⁄° 
	mjch¨
* (*
	mGëSåögCh¨s
)(
	mJNIEnv
*, 
	mj°rög
, 
	mjboﬁón
*);

389 (*
	mRñó£SåögCh¨s
)(
	mJNIEnv
*, 
	mj°rög
, c⁄° 
	mjch¨
*);

390 
j°rög
 (*
NewSåögUTF
)(
	mJNIEnv
*, const *);

391 
jsize
 (*
GëSåögUTFLígth
)(
	mJNIEnv
*, 
	mj°rög
);

393 c⁄° * (*
	mGëSåögUTFCh¨s
)(
	mJNIEnv
*, 
	mj°rög
, 
	mjboﬁón
*);

394 (*
	mRñó£SåögUTFCh¨s
)(
	mJNIEnv
*, 
	mj°rög
, const *);

395 
jsize
 (*
GëAºayLígth
)(
	mJNIEnv
*, 
	mj¨øy
);

396 
jobje˘Aºay
 (*
NewObje˘Aºay
)(
	mJNIEnv
*, 
	mjsize
, 
	mj˛ass
, 
	mjobje˘
);

397 
jobje˘
 (*
GëObje˘AºayEÀmít
)(
	mJNIEnv
*, 
	mjobje˘Aºay
, 
	mjsize
);

398 (*
	mSëObje˘AºayEÀmít
)(
	mJNIEnv
*, 
	mjobje˘Aºay
, 
	mjsize
, 
	mjobje˘
);

400 
jboﬁónAºay
 (*
NewBoﬁónAºay
)(
	mJNIEnv
*, 
	mjsize
);

401 
jbyãAºay
 (*
NewByãAºay
)(
	mJNIEnv
*, 
	mjsize
);

402 
jch¨Aºay
 (*
NewCh¨Aºay
)(
	mJNIEnv
*, 
	mjsize
);

403 
jsh‹tAºay
 (*
NewSh‹tAºay
)(
	mJNIEnv
*, 
	mjsize
);

404 
jötAºay
 (*
NewI¡Aºay
)(
	mJNIEnv
*, 
	mjsize
);

405 
jl⁄gAºay
 (*
NewL⁄gAºay
)(
	mJNIEnv
*, 
	mjsize
);

406 
jÊﬂtAºay
 (*
NewFlﬂtAºay
)(
	mJNIEnv
*, 
	mjsize
);

407 
jdoubÀAºay
 (*
NewDoubÀAºay
)(
	mJNIEnv
*, 
	mjsize
);

409 
	mjboﬁón
* (*
	mGëBoﬁónAºayEÀmíts
)(
	mJNIEnv
*, 
	mjboﬁónAºay
, jboolean*);

410 
	mjbyã
* (*
	mGëByãAºayEÀmíts
)(
	mJNIEnv
*, 
	mjbyãAºay
, 
	mjboﬁón
*);

411 
	mjch¨
* (*
	mGëCh¨AºayEÀmíts
)(
	mJNIEnv
*, 
	mjch¨Aºay
, 
	mjboﬁón
*);

412 
	mjsh‹t
* (*
	mGëSh‹tAºayEÀmíts
)(
	mJNIEnv
*, 
	mjsh‹tAºay
, 
	mjboﬁón
*);

413 
	mjöt
* (*
	mGëI¡AºayEÀmíts
)(
	mJNIEnv
*, 
	mjötAºay
, 
	mjboﬁón
*);

414 
	mjl⁄g
* (*
	mGëL⁄gAºayEÀmíts
)(
	mJNIEnv
*, 
	mjl⁄gAºay
, 
	mjboﬁón
*);

415 
	mjÊﬂt
* (*
	mGëFlﬂtAºayEÀmíts
)(
	mJNIEnv
*, 
	mjÊﬂtAºay
, 
	mjboﬁón
*);

416 
	mjdoubÀ
* (*
	mGëDoubÀAºayEÀmíts
)(
	mJNIEnv
*, 
	mjdoubÀAºay
, 
	mjboﬁón
*);

418 (*
	mRñó£BoﬁónAºayEÀmíts
)(
	mJNIEnv
*, 
	mjboﬁónAºay
,

419 
	mjboﬁón
*, 
	mjöt
);

420 (*
	mRñó£ByãAºayEÀmíts
)(
	mJNIEnv
*, 
	mjbyãAºay
,

421 
	mjbyã
*, 
	mjöt
);

422 (*
	mRñó£Ch¨AºayEÀmíts
)(
	mJNIEnv
*, 
	mjch¨Aºay
,

423 
	mjch¨
*, 
	mjöt
);

424 (*
	mRñó£Sh‹tAºayEÀmíts
)(
	mJNIEnv
*, 
	mjsh‹tAºay
,

425 
	mjsh‹t
*, 
	mjöt
);

426 (*
	mRñó£I¡AºayEÀmíts
)(
	mJNIEnv
*, 
	mjötAºay
,

427 
	mjöt
*, jint);

428 (*
	mRñó£L⁄gAºayEÀmíts
)(
	mJNIEnv
*, 
	mjl⁄gAºay
,

429 
	mjl⁄g
*, 
	mjöt
);

430 (*
	mRñó£FlﬂtAºayEÀmíts
)(
	mJNIEnv
*, 
	mjÊﬂtAºay
,

431 
	mjÊﬂt
*, 
	mjöt
);

432 (*
	mRñó£DoubÀAºayEÀmíts
)(
	mJNIEnv
*, 
	mjdoubÀAºay
,

433 
	mjdoubÀ
*, 
	mjöt
);

435 (*
	mGëBoﬁónAºayRegi⁄
)(
	mJNIEnv
*, 
	mjboﬁónAºay
,

436 
	mjsize
, jsize, 
	mjboﬁón
*);

437 (*
	mGëByãAºayRegi⁄
)(
	mJNIEnv
*, 
	mjbyãAºay
,

438 
	mjsize
, jsize, 
	mjbyã
*);

439 (*
	mGëCh¨AºayRegi⁄
)(
	mJNIEnv
*, 
	mjch¨Aºay
,

440 
	mjsize
, jsize, 
	mjch¨
*);

441 (*
	mGëSh‹tAºayRegi⁄
)(
	mJNIEnv
*, 
	mjsh‹tAºay
,

442 
	mjsize
, jsize, 
	mjsh‹t
*);

443 (*
	mGëI¡AºayRegi⁄
)(
	mJNIEnv
*, 
	mjötAºay
,

444 
	mjsize
, jsize, 
	mjöt
*);

445 (*
	mGëL⁄gAºayRegi⁄
)(
	mJNIEnv
*, 
	mjl⁄gAºay
,

446 
	mjsize
, jsize, 
	mjl⁄g
*);

447 (*
	mGëFlﬂtAºayRegi⁄
)(
	mJNIEnv
*, 
	mjÊﬂtAºay
,

448 
	mjsize
, jsize, 
	mjÊﬂt
*);

449 (*
	mGëDoubÀAºayRegi⁄
)(
	mJNIEnv
*, 
	mjdoubÀAºay
,

450 
	mjsize
, jsize, 
	mjdoubÀ
*);

453 (*
	mSëBoﬁónAºayRegi⁄
)(
	mJNIEnv
*, 
	mjboﬁónAºay
,

454 
	mjsize
, jsize, c⁄° 
	mjboﬁón
*);

455 (*
	mSëByãAºayRegi⁄
)(
	mJNIEnv
*, 
	mjbyãAºay
,

456 
	mjsize
, jsize, c⁄° 
	mjbyã
*);

457 (*
	mSëCh¨AºayRegi⁄
)(
	mJNIEnv
*, 
	mjch¨Aºay
,

458 
	mjsize
, jsize, c⁄° 
	mjch¨
*);

459 (*
	mSëSh‹tAºayRegi⁄
)(
	mJNIEnv
*, 
	mjsh‹tAºay
,

460 
	mjsize
, jsize, c⁄° 
	mjsh‹t
*);

461 (*
	mSëI¡AºayRegi⁄
)(
	mJNIEnv
*, 
	mjötAºay
,

462 
	mjsize
, jsize, c⁄° 
	mjöt
*);

463 (*
	mSëL⁄gAºayRegi⁄
)(
	mJNIEnv
*, 
	mjl⁄gAºay
,

464 
	mjsize
, jsize, c⁄° 
	mjl⁄g
*);

465 (*
	mSëFlﬂtAºayRegi⁄
)(
	mJNIEnv
*, 
	mjÊﬂtAºay
,

466 
	mjsize
, jsize, c⁄° 
	mjÊﬂt
*);

467 (*
	mSëDoubÀAºayRegi⁄
)(
	mJNIEnv
*, 
	mjdoubÀAºay
,

468 
	mjsize
, jsize, c⁄° 
	mjdoubÀ
*);

470 
jöt
 (*
Regi°îN©ives
)(
	mJNIEnv
*, 
	mj˛ass
, c⁄° 
	mJNIN©iveMëhod
*,

471 
	mjöt
);

472 
jöt
 (*
Uƒegi°îN©ives
)(
	mJNIEnv
*, 
	mj˛ass
);

473 
jöt
 (*
M⁄ô‹E¡î
)(
	mJNIEnv
*, 
	mjobje˘
);

474 
jöt
 (*
M⁄ô‹Exô
)(
	mJNIEnv
*, 
	mjobje˘
);

475 
jöt
 (*
GëJavaVM
)(
	mJNIEnv
*, 
	mJavaVM
**);

477 (*
	mGëSåögRegi⁄
)(
	mJNIEnv
*, 
	mj°rög
, 
	mjsize
, jsize, 
	mjch¨
*);

478 (*
	mGëSåögUTFRegi⁄
)(
	mJNIEnv
*, 
	mj°rög
, 
	mjsize
, jsize, *);

480 * (*
	mGëPrimôiveAºayCrôiˇl
)(
	mJNIEnv
*, 
	mj¨øy
, 
	mjboﬁón
*);

481 (*
	mRñó£PrimôiveAºayCrôiˇl
)(
	mJNIEnv
*, 
	mj¨øy
, *, 
	mjöt
);

483 c⁄° 
	mjch¨
* (*
	mGëSåögCrôiˇl
)(
	mJNIEnv
*, 
	mj°rög
, 
	mjboﬁón
*);

484 (*
	mRñó£SåögCrôiˇl
)(
	mJNIEnv
*, 
	mj°rög
, c⁄° 
	mjch¨
*);

486 
jwók
 (*
NewWókGlobÆRef
)(
	mJNIEnv
*, 
	mjobje˘
);

487 (*
	mDñëeWókGlobÆRef
)(
	mJNIEnv
*, 
	mjwók
);

489 
jboﬁón
 (*
Ex˚±i⁄Check
)(
	mJNIEnv
*);

491 
jobje˘
 (*
NewDúe˘ByãBuf„r
)(
	mJNIEnv
*, *, 
	mjl⁄g
);

492 * (*
	mGëDúe˘Buf„rAddªss
)(
	mJNIEnv
*, 
	mjobje˘
);

493 
jl⁄g
 (*
GëDúe˘Buf„rC≠acôy
)(
	mJNIEnv
*, 
	mjobje˘
);

496 
jobje˘RefTy≥
 (*
GëObje˘RefTy≥
)(
	mJNIEnv
*, 
	mjobje˘
);

505 
	s_JNIEnv
 {

507 c⁄° 
JNIN©iveI¡îÁ˚
* 
	mfun˘i⁄s
;

509 #i‡
deföed
(
__˝lu•lus
)

511 
jöt
 
GëVîsi⁄
()

512 {  
	mfun˘i⁄s
->
GëVîsi⁄
(
this
); }

514 
j˛ass
 
DeföeCœss
(c⁄° *
«me
, 
jobje˘
 
lﬂdî
, c⁄° 
jbyã
* 
buf
,

515 
jsize
 
bufLí
)

516 {  
	mfun˘i⁄s
->
DeföeCœss
(
this
, 
«me
, 
lﬂdî
, 
buf
, 
bufLí
); }

518 
j˛ass
 
FödCœss
(c⁄° * 
«me
)

519 {  
	mfun˘i⁄s
->
FödCœss
(
this
, 
«me
); }

521 
jmëhodID
 
FromReÊe˘edMëhod
(
jobje˘
 
mëhod
)

522 {  
	mfun˘i⁄s
->
FromReÊe˘edMëhod
(
this
, 
mëhod
); }

524 
jfõldID
 
FromReÊe˘edFõld
(
jobje˘
 
fõld
)

525 {  
	mfun˘i⁄s
->
FromReÊe˘edFõld
(
this
, 
fõld
); }

527 
jobje˘
 
ToReÊe˘edMëhod
(
j˛ass
 
˛s
, 
jmëhodID
 
mëhodID
, 
jboﬁón
 
isSètic
)

528 {  
	mfun˘i⁄s
->
ToReÊe˘edMëhod
(
this
, 
˛s
, 
mëhodID
, 
isSètic
); }

530 
j˛ass
 
GëSu≥r˛ass
(j˛as†
˛azz
)

531 {  
	mfun˘i⁄s
->
GëSu≥r˛ass
(
this
, 
˛azz
); }

533 
jboﬁón
 
IsAssig«bÀFrom
(
j˛ass
 
˛azz1
, j˛as†
˛azz2
)

534 {  
	mfun˘i⁄s
->
IsAssig«bÀFrom
(
this
, 
˛azz1
, 
˛azz2
); }

536 
jobje˘
 
ToReÊe˘edFõld
(
j˛ass
 
˛s
, 
jfõldID
 
fõldID
, 
jboﬁón
 
isSètic
)

537 {  
	mfun˘i⁄s
->
ToReÊe˘edFõld
(
this
, 
˛s
, 
fõldID
, 
isSètic
); }

539 
jöt
 
Throw
(
jthrowabÀ
 
obj
)

540 {  
	mfun˘i⁄s
->
Throw
(
this
, 
obj
); }

542 
jöt
 
ThrowNew
(
j˛ass
 
˛azz
, c⁄° * 
mesßge
)

543 {  
	mfun˘i⁄s
->
ThrowNew
(
this
, 
˛azz
, 
mesßge
); }

545 
jthrowabÀ
 
Ex˚±i⁄Occuºed
()

546 {  
	mfun˘i⁄s
->
Ex˚±i⁄Occuºed
(
this
); }

548 
Ex˚±i⁄Des¸ibe
()

549 { 
	mfun˘i⁄s
->
Ex˚±i⁄Des¸ibe
(
this
); }

551 
Ex˚±i⁄CÀ¨
()

552 { 
	mfun˘i⁄s
->
Ex˚±i⁄CÀ¨
(
this
); }

554 
F©ÆEº‹
(c⁄° * 
msg
)

555 { 
	mfun˘i⁄s
->
F©ÆEº‹
(
this
, 
msg
); }

557 
jöt
 
PushLoˇlFøme
(jöà
ˇ∑côy
)

558 {  
	mfun˘i⁄s
->
PushLoˇlFøme
(
this
, 
ˇ∑côy
); }

560 
jobje˘
 
P›LoˇlFøme
(jobje˘ 
ªsu…
)

561 {  
	mfun˘i⁄s
->
P›LoˇlFøme
(
this
, 
ªsu…
); }

563 
jobje˘
 
NewGlobÆRef
(jobje˘ 
obj
)

564 {  
	mfun˘i⁄s
->
NewGlobÆRef
(
this
, 
obj
); }

566 
DñëeGlobÆRef
(
jobje˘
 
globÆRef
)

567 { 
	mfun˘i⁄s
->
DñëeGlobÆRef
(
this
, 
globÆRef
); }

569 
DñëeLoˇlRef
(
jobje˘
 
loˇlRef
)

570 { 
	mfun˘i⁄s
->
DñëeLoˇlRef
(
this
, 
loˇlRef
); }

572 
jboﬁón
 
IsSameObje˘
(
jobje˘
 
ªf1
, jobje˘ 
ªf2
)

573 {  
	mfun˘i⁄s
->
IsSameObje˘
(
this
, 
ªf1
, 
ªf2
); }

575 
jobje˘
 
NewLoˇlRef
(jobje˘ 
ªf
)

576 {  
	mfun˘i⁄s
->
NewLoˇlRef
(
this
, 
ªf
); }

578 
jöt
 
EnsuªLoˇlC≠acôy
(jöà
ˇ∑côy
)

579 {  
	mfun˘i⁄s
->
EnsuªLoˇlC≠acôy
(
this
, 
ˇ∑côy
); }

581 
jobje˘
 
AŒocObje˘
(
j˛ass
 
˛azz
)

582 {  
	mfun˘i⁄s
->
AŒocObje˘
(
this
, 
˛azz
); }

584 
jobje˘
 
NewObje˘
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, ...)

586 
va_li°
 
	m¨gs
;

587 
va_°¨t
(
¨gs
, 
mëhodID
);

588 
jobje˘
 
	mªsu…
 = 
fun˘i⁄s
->
NewObje˘V
(
this
, 
˛azz
, 
mëhodID
, 
¨gs
);

589 
va_íd
(
¨gs
);

590  
	mªsu…
;

593 
jobje˘
 
NewObje˘V
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, 
va_li°
 
¨gs
)

594 {  
	mfun˘i⁄s
->
NewObje˘V
(
this
, 
˛azz
, 
mëhodID
, 
¨gs
); }

596 
jobje˘
 
NewObje˘A
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, 
jvÆue
* 
¨gs
)

597 {  
	mfun˘i⁄s
->
NewObje˘A
(
this
, 
˛azz
, 
mëhodID
, 
¨gs
); }

599 
j˛ass
 
GëObje˘Cœss
(
jobje˘
 
obj
)

600 {  
	mfun˘i⁄s
->
GëObje˘Cœss
(
this
, 
obj
); }

602 
jboﬁón
 
IsIn°™˚Of
(
jobje˘
 
obj
, 
j˛ass
 
˛azz
)

603 {  
	mfun˘i⁄s
->
IsIn°™˚Of
(
this
, 
obj
, 
˛azz
); }

605 
jmëhodID
 
GëMëhodID
(
j˛ass
 
˛azz
, c⁄° * 
«me
, c⁄° * 
sig
)

606 {  
	mfun˘i⁄s
->
GëMëhodID
(
this
, 
˛azz
, 
«me
, 
sig
); }

608 
	#CALL_TYPE_METHOD
(
_jty≥
, 
_j«me
) \

609 
__NDK_FPABI__
 \

610 
_jty≥
 
CÆl
##
_j«me
##
	`Mëhod
(
jobje˘
 
obj
, 
jmëhodID
 
mëhodID
, ...) \

612 
_jty≥
 
ªsu…
; \

613 
va_li°
 
¨gs
; \

614 
	`va_°¨t
(
¨gs
, 
mëhodID
); \

615 
ªsu…
 = 
fun˘i⁄s
->
CÆl
##
_j«me
##
	`MëhodV
(
this
, 
obj
, 
mëhodID
, \

616 
¨gs
); \

617 
	`va_íd
(
¨gs
); \

618  
ªsu…
; \

619 }

	)

620 
	#CALL_TYPE_METHODV
(
_jty≥
, 
_j«me
) \

621 
__NDK_FPABI__
 \

622 
_jty≥
 
CÆl
##
_j«me
##
	`MëhodV
(
jobje˘
 
obj
, 
jmëhodID
 
mëhodID
, \

623 
va_li°
 
¨gs
) \

624 {  
fun˘i⁄s
->
CÆl
##
_j«me
##
	`MëhodV
(
this
, 
obj
, 
mëhodID
, 
¨gs
); }

	)

625 
	#CALL_TYPE_METHODA
(
_jty≥
, 
_j«me
) \

626 
__NDK_FPABI__
 \

627 
_jty≥
 
CÆl
##
_j«me
##
	`MëhodA
(
jobje˘
 
obj
, 
jmëhodID
 
mëhodID
, \

628 
jvÆue
* 
¨gs
) \

629 {  
fun˘i⁄s
->
CÆl
##
_j«me
##
	`MëhodA
(
this
, 
obj
, 
mëhodID
, 
¨gs
); }

	)

631 
	#CALL_TYPE
(
_jty≥
, 
_j«me
) \

632 
	`CALL_TYPE_METHOD
(
_jty≥
, 
_j«me
) \

633 
	`CALL_TYPE_METHODV
(
_jty≥
, 
_j«me
) \

634 
	`CALL_TYPE_METHODA
(
_jty≥
, 
_j«me
)

	)

636 
CALL_TYPE
(
jobje˘
, 
Obje˘
)

637 
CALL_TYPE
(
jboﬁón
, 
Boﬁón
)

638 
CALL_TYPE
(
jbyã
, 
Byã
)

639 
CALL_TYPE
(
jch¨
, 
Ch¨
)

640 
CALL_TYPE
(
jsh‹t
, 
Sh‹t
)

641 
CALL_TYPE
(
jöt
, 
I¡
)

642 
CALL_TYPE
(
jl⁄g
, 
L⁄g
)

643 
CALL_TYPE
(
jÊﬂt
, 
Flﬂt
)

644 
CALL_TYPE
(
jdoubÀ
, 
DoubÀ
)

646 
CÆlVoidMëhod
(
jobje˘
 
obj
, 
jmëhodID
 
mëhodID
, ...)

648 
va_li°
 
	m¨gs
;

649 
va_°¨t
(
¨gs
, 
mëhodID
);

650 
	mfun˘i⁄s
->
CÆlVoidMëhodV
(
this
, 
obj
, 
mëhodID
, 
¨gs
);

651 
va_íd
(
¨gs
);

653 
CÆlVoidMëhodV
(
jobje˘
 
obj
, 
jmëhodID
 
mëhodID
, 
va_li°
 
¨gs
)

654 { 
	mfun˘i⁄s
->
CÆlVoidMëhodV
(
this
, 
obj
, 
mëhodID
, 
¨gs
); }

655 
CÆlVoidMëhodA
(
jobje˘
 
obj
, 
jmëhodID
 
mëhodID
, 
jvÆue
* 
¨gs
)

656 { 
	mfun˘i⁄s
->
CÆlVoidMëhodA
(
this
, 
obj
, 
mëhodID
, 
¨gs
); }

658 
	#CALL_NONVIRT_TYPE_METHOD
(
_jty≥
, 
_j«me
) \

659 
__NDK_FPABI__
 \

660 
_jty≥
 
CÆlN⁄vútuÆ
##
_j«me
##
	`Mëhod
(
jobje˘
 
obj
, 
j˛ass
 
˛azz
, \

661 
jmëhodID
 
mëhodID
, ...) \

663 
_jty≥
 
ªsu…
; \

664 
va_li°
 
¨gs
; \

665 
	`va_°¨t
(
¨gs
, 
mëhodID
); \

666 
ªsu…
 = 
fun˘i⁄s
->
CÆlN⁄vútuÆ
##
_j«me
##
	`MëhodV
(
this
, 
obj
, \

667 
˛azz
, 
mëhodID
, 
¨gs
); \

668 
	`va_íd
(
¨gs
); \

669  
ªsu…
; \

670 }

	)

671 
	#CALL_NONVIRT_TYPE_METHODV
(
_jty≥
, 
_j«me
) \

672 
__NDK_FPABI__
 \

673 
_jty≥
 
CÆlN⁄vútuÆ
##
_j«me
##
	`MëhodV
(
jobje˘
 
obj
, 
j˛ass
 
˛azz
, \

674 
jmëhodID
 
mëhodID
, 
va_li°
 
¨gs
) \

675 {  
fun˘i⁄s
->
CÆlN⁄vútuÆ
##
_j«me
##
	`MëhodV
(
this
, 
obj
, 
˛azz
, \

676 
mëhodID
, 
¨gs
); }

	)

677 
	#CALL_NONVIRT_TYPE_METHODA
(
_jty≥
, 
_j«me
) \

678 
__NDK_FPABI__
 \

679 
_jty≥
 
CÆlN⁄vútuÆ
##
_j«me
##
	`MëhodA
(
jobje˘
 
obj
, 
j˛ass
 
˛azz
, \

680 
jmëhodID
 
mëhodID
, 
jvÆue
* 
¨gs
) \

681 {  
fun˘i⁄s
->
CÆlN⁄vútuÆ
##
_j«me
##
	`MëhodA
(
this
, 
obj
, 
˛azz
, \

682 
mëhodID
, 
¨gs
); }

	)

684 
	#CALL_NONVIRT_TYPE
(
_jty≥
, 
_j«me
) \

685 
	`CALL_NONVIRT_TYPE_METHOD
(
_jty≥
, 
_j«me
) \

686 
	`CALL_NONVIRT_TYPE_METHODV
(
_jty≥
, 
_j«me
) \

687 
	`CALL_NONVIRT_TYPE_METHODA
(
_jty≥
, 
_j«me
)

	)

689 
CALL_NONVIRT_TYPE
(
jobje˘
, 
Obje˘
)

690 
CALL_NONVIRT_TYPE
(
jboﬁón
, 
Boﬁón
)

691 
CALL_NONVIRT_TYPE
(
jbyã
, 
Byã
)

692 
CALL_NONVIRT_TYPE
(
jch¨
, 
Ch¨
)

693 
CALL_NONVIRT_TYPE
(
jsh‹t
, 
Sh‹t
)

694 
CALL_NONVIRT_TYPE
(
jöt
, 
I¡
)

695 
CALL_NONVIRT_TYPE
(
jl⁄g
, 
L⁄g
)

696 
CALL_NONVIRT_TYPE
(
jÊﬂt
, 
Flﬂt
)

697 
CALL_NONVIRT_TYPE
(
jdoubÀ
, 
DoubÀ
)

699 
CÆlN⁄vútuÆVoidMëhod
(
jobje˘
 
obj
, 
j˛ass
 
˛azz
,

700 
jmëhodID
 
mëhodID
, ...)

702 
va_li°
 
	m¨gs
;

703 
va_°¨t
(
¨gs
, 
mëhodID
);

704 
	mfun˘i⁄s
->
CÆlN⁄vútuÆVoidMëhodV
(
this
, 
obj
, 
˛azz
, 
mëhodID
, 
¨gs
);

705 
va_íd
(
¨gs
);

707 
CÆlN⁄vútuÆVoidMëhodV
(
jobje˘
 
obj
, 
j˛ass
 
˛azz
,

708 
jmëhodID
 
mëhodID
, 
va_li°
 
¨gs
)

709 { 
	mfun˘i⁄s
->
CÆlN⁄vútuÆVoidMëhodV
(
this
, 
obj
, 
˛azz
, 
mëhodID
, 
¨gs
); }

710 
CÆlN⁄vútuÆVoidMëhodA
(
jobje˘
 
obj
, 
j˛ass
 
˛azz
,

711 
jmëhodID
 
mëhodID
, 
jvÆue
* 
¨gs
)

712 { 
	mfun˘i⁄s
->
CÆlN⁄vútuÆVoidMëhodA
(
this
, 
obj
, 
˛azz
, 
mëhodID
, 
¨gs
); }

714 
jfõldID
 
GëFõldID
(
j˛ass
 
˛azz
, c⁄° * 
«me
, c⁄° * 
sig
)

715 {  
	mfun˘i⁄s
->
GëFõldID
(
this
, 
˛azz
, 
«me
, 
sig
); }

717 
jobje˘
 
GëObje˘Fõld
(jobje˘ 
obj
, 
jfõldID
 
fõldID
)

718 {  
	mfun˘i⁄s
->
GëObje˘Fõld
(
this
, 
obj
, 
fõldID
); }

719 
jboﬁón
 
GëBoﬁónFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
)

720 {  
	mfun˘i⁄s
->
GëBoﬁónFõld
(
this
, 
obj
, 
fõldID
); }

721 
jbyã
 
GëByãFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
)

722 {  
	mfun˘i⁄s
->
GëByãFõld
(
this
, 
obj
, 
fõldID
); }

723 
jch¨
 
GëCh¨Fõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
)

724 {  
	mfun˘i⁄s
->
GëCh¨Fõld
(
this
, 
obj
, 
fõldID
); }

725 
jsh‹t
 
GëSh‹tFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
)

726 {  
	mfun˘i⁄s
->
GëSh‹tFõld
(
this
, 
obj
, 
fõldID
); }

727 
jöt
 
GëI¡Fõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
)

728 {  
	mfun˘i⁄s
->
GëI¡Fõld
(
this
, 
obj
, 
fõldID
); }

729 
jl⁄g
 
GëL⁄gFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
)

730 {  
	mfun˘i⁄s
->
GëL⁄gFõld
(
this
, 
obj
, 
fõldID
); }

731 
__NDK_FPABI__


732 
jÊﬂt
 
GëFlﬂtFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
)

733 {  
	mfun˘i⁄s
->
GëFlﬂtFõld
(
this
, 
obj
, 
fõldID
); }

734 
__NDK_FPABI__


735 
jdoubÀ
 
GëDoubÀFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
)

736 {  
	mfun˘i⁄s
->
GëDoubÀFõld
(
this
, 
obj
, 
fõldID
); }

738 
SëObje˘Fõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, jobje˘ 
vÆue
)

739 { 
	mfun˘i⁄s
->
SëObje˘Fõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

740 
SëBoﬁónFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, 
jboﬁón
 
vÆue
)

741 { 
	mfun˘i⁄s
->
SëBoﬁónFõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

742 
SëByãFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, 
jbyã
 
vÆue
)

743 { 
	mfun˘i⁄s
->
SëByãFõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

744 
SëCh¨Fõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, 
jch¨
 
vÆue
)

745 { 
	mfun˘i⁄s
->
SëCh¨Fõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

746 
SëSh‹tFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, 
jsh‹t
 
vÆue
)

747 { 
	mfun˘i⁄s
->
SëSh‹tFõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

748 
SëI¡Fõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, 
jöt
 
vÆue
)

749 { 
	mfun˘i⁄s
->
SëI¡Fõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

750 
SëL⁄gFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, 
jl⁄g
 
vÆue
)

751 { 
	mfun˘i⁄s
->
SëL⁄gFõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

752 
__NDK_FPABI__


753 
SëFlﬂtFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, 
jÊﬂt
 
vÆue
)

754 { 
	mfun˘i⁄s
->
SëFlﬂtFõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

755 
__NDK_FPABI__


756 
SëDoubÀFõld
(
jobje˘
 
obj
, 
jfõldID
 
fõldID
, 
jdoubÀ
 
vÆue
)

757 { 
	mfun˘i⁄s
->
SëDoubÀFõld
(
this
, 
obj
, 
fõldID
, 
vÆue
); }

759 
jmëhodID
 
GëSèticMëhodID
(
j˛ass
 
˛azz
, c⁄° * 
«me
, c⁄° * 
sig
)

760 {  
	mfun˘i⁄s
->
GëSèticMëhodID
(
this
, 
˛azz
, 
«me
, 
sig
); }

762 
	#CALL_STATIC_TYPE_METHOD
(
_jty≥
, 
_j«me
) \

763 
__NDK_FPABI__
 \

764 
_jty≥
 
CÆlSètic
##
_j«me
##
	`Mëhod
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, \

767 
_jty≥
 
ªsu…
; \

768 
va_li°
 
¨gs
; \

769 
	`va_°¨t
(
¨gs
, 
mëhodID
); \

770 
ªsu…
 = 
fun˘i⁄s
->
CÆlSètic
##
_j«me
##
	`MëhodV
(
this
, 
˛azz
, \

771 
mëhodID
, 
¨gs
); \

772 
	`va_íd
(
¨gs
); \

773  
ªsu…
; \

774 }

	)

775 
	#CALL_STATIC_TYPE_METHODV
(
_jty≥
, 
_j«me
) \

776 
__NDK_FPABI__
 \

777 
_jty≥
 
CÆlSètic
##
_j«me
##
	`MëhodV
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, \

778 
va_li°
 
¨gs
) \

779 {  
fun˘i⁄s
->
CÆlSètic
##
_j«me
##
	`MëhodV
(
this
, 
˛azz
, 
mëhodID
, \

780 
¨gs
); }

	)

781 
	#CALL_STATIC_TYPE_METHODA
(
_jty≥
, 
_j«me
) \

782 
__NDK_FPABI__
 \

783 
_jty≥
 
CÆlSètic
##
_j«me
##
	`MëhodA
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, \

784 
jvÆue
* 
¨gs
) \

785 {  
fun˘i⁄s
->
CÆlSètic
##
_j«me
##
	`MëhodA
(
this
, 
˛azz
, 
mëhodID
, \

786 
¨gs
); }

	)

788 
	#CALL_STATIC_TYPE
(
_jty≥
, 
_j«me
) \

789 
	`CALL_STATIC_TYPE_METHOD
(
_jty≥
, 
_j«me
) \

790 
	`CALL_STATIC_TYPE_METHODV
(
_jty≥
, 
_j«me
) \

791 
	`CALL_STATIC_TYPE_METHODA
(
_jty≥
, 
_j«me
)

	)

793 
CALL_STATIC_TYPE
(
jobje˘
, 
Obje˘
)

794 
CALL_STATIC_TYPE
(
jboﬁón
, 
Boﬁón
)

795 
CALL_STATIC_TYPE
(
jbyã
, 
Byã
)

796 
CALL_STATIC_TYPE
(
jch¨
, 
Ch¨
)

797 
CALL_STATIC_TYPE
(
jsh‹t
, 
Sh‹t
)

798 
CALL_STATIC_TYPE
(
jöt
, 
I¡
)

799 
CALL_STATIC_TYPE
(
jl⁄g
, 
L⁄g
)

800 
CALL_STATIC_TYPE
(
jÊﬂt
, 
Flﬂt
)

801 
CALL_STATIC_TYPE
(
jdoubÀ
, 
DoubÀ
)

803 
CÆlSèticVoidMëhod
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, ...)

805 
va_li°
 
	m¨gs
;

806 
va_°¨t
(
¨gs
, 
mëhodID
);

807 
	mfun˘i⁄s
->
CÆlSèticVoidMëhodV
(
this
, 
˛azz
, 
mëhodID
, 
¨gs
);

808 
va_íd
(
¨gs
);

810 
CÆlSèticVoidMëhodV
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, 
va_li°
 
¨gs
)

811 { 
	mfun˘i⁄s
->
CÆlSèticVoidMëhodV
(
this
, 
˛azz
, 
mëhodID
, 
¨gs
); }

812 
CÆlSèticVoidMëhodA
(
j˛ass
 
˛azz
, 
jmëhodID
 
mëhodID
, 
jvÆue
* 
¨gs
)

813 { 
	mfun˘i⁄s
->
CÆlSèticVoidMëhodA
(
this
, 
˛azz
, 
mëhodID
, 
¨gs
); }

815 
jfõldID
 
GëSèticFõldID
(
j˛ass
 
˛azz
, c⁄° * 
«me
, c⁄° * 
sig
)

816 {  
	mfun˘i⁄s
->
GëSèticFõldID
(
this
, 
˛azz
, 
«me
, 
sig
); }

818 
jobje˘
 
GëSèticObje˘Fõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

819 {  
	mfun˘i⁄s
->
GëSèticObje˘Fõld
(
this
, 
˛azz
, 
fõldID
); }

820 
jboﬁón
 
GëSèticBoﬁónFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

821 {  
	mfun˘i⁄s
->
GëSèticBoﬁónFõld
(
this
, 
˛azz
, 
fõldID
); }

822 
jbyã
 
GëSèticByãFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

823 {  
	mfun˘i⁄s
->
GëSèticByãFõld
(
this
, 
˛azz
, 
fõldID
); }

824 
jch¨
 
GëSèticCh¨Fõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

825 {  
	mfun˘i⁄s
->
GëSèticCh¨Fõld
(
this
, 
˛azz
, 
fõldID
); }

826 
jsh‹t
 
GëSèticSh‹tFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

827 {  
	mfun˘i⁄s
->
GëSèticSh‹tFõld
(
this
, 
˛azz
, 
fõldID
); }

828 
jöt
 
GëSèticI¡Fõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

829 {  
	mfun˘i⁄s
->
GëSèticI¡Fõld
(
this
, 
˛azz
, 
fõldID
); }

830 
jl⁄g
 
GëSèticL⁄gFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

831 {  
	mfun˘i⁄s
->
GëSèticL⁄gFõld
(
this
, 
˛azz
, 
fõldID
); }

832 
__NDK_FPABI__


833 
jÊﬂt
 
GëSèticFlﬂtFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

834 {  
	mfun˘i⁄s
->
GëSèticFlﬂtFõld
(
this
, 
˛azz
, 
fõldID
); }

835 
__NDK_FPABI__


836 
jdoubÀ
 
GëSèticDoubÀFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
)

837 {  
	mfun˘i⁄s
->
GëSèticDoubÀFõld
(
this
, 
˛azz
, 
fõldID
); }

839 
SëSèticObje˘Fõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jobje˘
 
vÆue
)

840 { 
	mfun˘i⁄s
->
SëSèticObje˘Fõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

841 
SëSèticBoﬁónFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jboﬁón
 
vÆue
)

842 { 
	mfun˘i⁄s
->
SëSèticBoﬁónFõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

843 
SëSèticByãFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jbyã
 
vÆue
)

844 { 
	mfun˘i⁄s
->
SëSèticByãFõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

845 
SëSèticCh¨Fõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jch¨
 
vÆue
)

846 { 
	mfun˘i⁄s
->
SëSèticCh¨Fõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

847 
SëSèticSh‹tFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jsh‹t
 
vÆue
)

848 { 
	mfun˘i⁄s
->
SëSèticSh‹tFõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

849 
SëSèticI¡Fõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jöt
 
vÆue
)

850 { 
	mfun˘i⁄s
->
SëSèticI¡Fõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

851 
SëSèticL⁄gFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jl⁄g
 
vÆue
)

852 { 
	mfun˘i⁄s
->
SëSèticL⁄gFõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

853 
__NDK_FPABI__


854 
SëSèticFlﬂtFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jÊﬂt
 
vÆue
)

855 { 
	mfun˘i⁄s
->
SëSèticFlﬂtFõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

856 
__NDK_FPABI__


857 
SëSèticDoubÀFõld
(
j˛ass
 
˛azz
, 
jfõldID
 
fõldID
, 
jdoubÀ
 
vÆue
)

858 { 
	mfun˘i⁄s
->
SëSèticDoubÀFõld
(
this
, 
˛azz
, 
fõldID
, 
vÆue
); }

860 
j°rög
 
NewSåög
(c⁄° 
jch¨
* 
unicodeCh¨s
, 
jsize
 
Àn
)

861 {  
	mfun˘i⁄s
->
NewSåög
(
this
, 
unicodeCh¨s
, 
Àn
); }

863 
jsize
 
GëSåögLígth
(
j°rög
 
°rög
)

864 {  
	mfun˘i⁄s
->
GëSåögLígth
(
this
, 
°rög
); }

866 c⁄° 
jch¨
* 
GëSåögCh¨s
(
j°rög
 
°rög
, 
jboﬁón
* 
isC›y
)

867 {  
	mfun˘i⁄s
->
GëSåögCh¨s
(
this
, 
°rög
, 
isC›y
); }

869 
Rñó£SåögCh¨s
(
j°rög
 
°rög
, c⁄° 
jch¨
* 
ch¨s
)

870 { 
	mfun˘i⁄s
->
Rñó£SåögCh¨s
(
this
, 
°rög
, 
ch¨s
); }

872 
j°rög
 
NewSåögUTF
(c⁄° * 
byãs
)

873 {  
	mfun˘i⁄s
->
NewSåögUTF
(
this
, 
byãs
); }

875 
jsize
 
GëSåögUTFLígth
(
j°rög
 
°rög
)

876 {  
	mfun˘i⁄s
->
GëSåögUTFLígth
(
this
, 
°rög
); }

878 c⁄° * 
GëSåögUTFCh¨s
(
j°rög
 
°rög
, 
jboﬁón
* 
isC›y
)

879 {  
	mfun˘i⁄s
->
GëSåögUTFCh¨s
(
this
, 
°rög
, 
isC›y
); }

881 
Rñó£SåögUTFCh¨s
(
j°rög
 
°rög
, c⁄° * 
utf
)

882 { 
	mfun˘i⁄s
->
Rñó£SåögUTFCh¨s
(
this
, 
°rög
, 
utf
); }

884 
jsize
 
GëAºayLígth
(
j¨øy
 
¨øy
)

885 {  
	mfun˘i⁄s
->
GëAºayLígth
(
this
, 
¨øy
); }

887 
jobje˘Aºay
 
NewObje˘Aºay
(
jsize
 
Àngth
, 
j˛ass
 
ñemítCœss
,

888 
jobje˘
 
öôülEÀmít
)

889 {  
	mfun˘i⁄s
->
NewObje˘Aºay
(
this
, 
Àngth
, 
ñemítCœss
,

890 
öôülEÀmít
); }

892 
jobje˘
 
GëObje˘AºayEÀmít
(
jobje˘Aºay
 
¨øy
, 
jsize
 
ödex
)

893 {  
	mfun˘i⁄s
->
GëObje˘AºayEÀmít
(
this
, 
¨øy
, 
ödex
); }

895 
SëObje˘AºayEÀmít
(
jobje˘Aºay
 
¨øy
, 
jsize
 
ödex
, 
jobje˘
 
vÆue
)

896 { 
	mfun˘i⁄s
->
SëObje˘AºayEÀmít
(
this
, 
¨øy
, 
ödex
, 
vÆue
); }

898 
jboﬁónAºay
 
NewBoﬁónAºay
(
jsize
 
Àngth
)

899 {  
	mfun˘i⁄s
->
NewBoﬁónAºay
(
this
, 
Àngth
); }

900 
jbyãAºay
 
NewByãAºay
(
jsize
 
Àngth
)

901 {  
	mfun˘i⁄s
->
NewByãAºay
(
this
, 
Àngth
); }

902 
jch¨Aºay
 
NewCh¨Aºay
(
jsize
 
Àngth
)

903 {  
	mfun˘i⁄s
->
NewCh¨Aºay
(
this
, 
Àngth
); }

904 
jsh‹tAºay
 
NewSh‹tAºay
(
jsize
 
Àngth
)

905 {  
	mfun˘i⁄s
->
NewSh‹tAºay
(
this
, 
Àngth
); }

906 
jötAºay
 
NewI¡Aºay
(
jsize
 
Àngth
)

907 {  
	mfun˘i⁄s
->
NewI¡Aºay
(
this
, 
Àngth
); }

908 
jl⁄gAºay
 
NewL⁄gAºay
(
jsize
 
Àngth
)

909 {  
	mfun˘i⁄s
->
NewL⁄gAºay
(
this
, 
Àngth
); }

910 
jÊﬂtAºay
 
NewFlﬂtAºay
(
jsize
 
Àngth
)

911 {  
	mfun˘i⁄s
->
NewFlﬂtAºay
(
this
, 
Àngth
); }

912 
jdoubÀAºay
 
NewDoubÀAºay
(
jsize
 
Àngth
)

913 {  
	mfun˘i⁄s
->
NewDoubÀAºay
(
this
, 
Àngth
); }

915 
jboﬁón
* 
GëBoﬁónAºayEÀmíts
(
jboﬁónAºay
 
¨øy
, jboﬁón* 
isC›y
)

916 {  
	mfun˘i⁄s
->
GëBoﬁónAºayEÀmíts
(
this
, 
¨øy
, 
isC›y
); }

917 
jbyã
* 
GëByãAºayEÀmíts
(
jbyãAºay
 
¨øy
, 
jboﬁón
* 
isC›y
)

918 {  
	mfun˘i⁄s
->
GëByãAºayEÀmíts
(
this
, 
¨øy
, 
isC›y
); }

919 
jch¨
* 
GëCh¨AºayEÀmíts
(
jch¨Aºay
 
¨øy
, 
jboﬁón
* 
isC›y
)

920 {  
	mfun˘i⁄s
->
GëCh¨AºayEÀmíts
(
this
, 
¨øy
, 
isC›y
); }

921 
jsh‹t
* 
GëSh‹tAºayEÀmíts
(
jsh‹tAºay
 
¨øy
, 
jboﬁón
* 
isC›y
)

922 {  
	mfun˘i⁄s
->
GëSh‹tAºayEÀmíts
(
this
, 
¨øy
, 
isC›y
); }

923 
jöt
* 
GëI¡AºayEÀmíts
(
jötAºay
 
¨øy
, 
jboﬁón
* 
isC›y
)

924 {  
	mfun˘i⁄s
->
GëI¡AºayEÀmíts
(
this
, 
¨øy
, 
isC›y
); }

925 
jl⁄g
* 
GëL⁄gAºayEÀmíts
(
jl⁄gAºay
 
¨øy
, 
jboﬁón
* 
isC›y
)

926 {  
	mfun˘i⁄s
->
GëL⁄gAºayEÀmíts
(
this
, 
¨øy
, 
isC›y
); }

927 
jÊﬂt
* 
GëFlﬂtAºayEÀmíts
(
jÊﬂtAºay
 
¨øy
, 
jboﬁón
* 
isC›y
)

928 {  
	mfun˘i⁄s
->
GëFlﬂtAºayEÀmíts
(
this
, 
¨øy
, 
isC›y
); }

929 
jdoubÀ
* 
GëDoubÀAºayEÀmíts
(
jdoubÀAºay
 
¨øy
, 
jboﬁón
* 
isC›y
)

930 {  
	mfun˘i⁄s
->
GëDoubÀAºayEÀmíts
(
this
, 
¨øy
, 
isC›y
); }

932 
Rñó£BoﬁónAºayEÀmíts
(
jboﬁónAºay
 
¨øy
, 
jboﬁón
* 
ñems
,

933 
jöt
 
mode
)

934 { 
	mfun˘i⁄s
->
Rñó£BoﬁónAºayEÀmíts
(
this
, 
¨øy
, 
ñems
, 
mode
); }

935 
Rñó£ByãAºayEÀmíts
(
jbyãAºay
 
¨øy
, 
jbyã
* 
ñems
,

936 
jöt
 
mode
)

937 { 
	mfun˘i⁄s
->
Rñó£ByãAºayEÀmíts
(
this
, 
¨øy
, 
ñems
, 
mode
); }

938 
Rñó£Ch¨AºayEÀmíts
(
jch¨Aºay
 
¨øy
, 
jch¨
* 
ñems
,

939 
jöt
 
mode
)

940 { 
	mfun˘i⁄s
->
Rñó£Ch¨AºayEÀmíts
(
this
, 
¨øy
, 
ñems
, 
mode
); }

941 
Rñó£Sh‹tAºayEÀmíts
(
jsh‹tAºay
 
¨øy
, 
jsh‹t
* 
ñems
,

942 
jöt
 
mode
)

943 { 
	mfun˘i⁄s
->
Rñó£Sh‹tAºayEÀmíts
(
this
, 
¨øy
, 
ñems
, 
mode
); }

944 
Rñó£I¡AºayEÀmíts
(
jötAºay
 
¨øy
, 
jöt
* 
ñems
,

945 
jöt
 
mode
)

946 { 
	mfun˘i⁄s
->
Rñó£I¡AºayEÀmíts
(
this
, 
¨øy
, 
ñems
, 
mode
); }

947 
Rñó£L⁄gAºayEÀmíts
(
jl⁄gAºay
 
¨øy
, 
jl⁄g
* 
ñems
,

948 
jöt
 
mode
)

949 { 
	mfun˘i⁄s
->
Rñó£L⁄gAºayEÀmíts
(
this
, 
¨øy
, 
ñems
, 
mode
); }

950 
Rñó£FlﬂtAºayEÀmíts
(
jÊﬂtAºay
 
¨øy
, 
jÊﬂt
* 
ñems
,

951 
jöt
 
mode
)

952 { 
	mfun˘i⁄s
->
Rñó£FlﬂtAºayEÀmíts
(
this
, 
¨øy
, 
ñems
, 
mode
); }

953 
Rñó£DoubÀAºayEÀmíts
(
jdoubÀAºay
 
¨øy
, 
jdoubÀ
* 
ñems
,

954 
jöt
 
mode
)

955 { 
	mfun˘i⁄s
->
Rñó£DoubÀAºayEÀmíts
(
this
, 
¨øy
, 
ñems
, 
mode
); }

957 
GëBoﬁónAºayRegi⁄
(
jboﬁónAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

958 
jboﬁón
* 
buf
)

959 { 
	mfun˘i⁄s
->
GëBoﬁónAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

960 
GëByãAºayRegi⁄
(
jbyãAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

961 
jbyã
* 
buf
)

962 { 
	mfun˘i⁄s
->
GëByãAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

963 
GëCh¨AºayRegi⁄
(
jch¨Aºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

964 
jch¨
* 
buf
)

965 { 
	mfun˘i⁄s
->
GëCh¨AºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

966 
GëSh‹tAºayRegi⁄
(
jsh‹tAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

967 
jsh‹t
* 
buf
)

968 { 
	mfun˘i⁄s
->
GëSh‹tAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

969 
GëI¡AºayRegi⁄
(
jötAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

970 
jöt
* 
buf
)

971 { 
	mfun˘i⁄s
->
GëI¡AºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

972 
GëL⁄gAºayRegi⁄
(
jl⁄gAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

973 
jl⁄g
* 
buf
)

974 { 
	mfun˘i⁄s
->
GëL⁄gAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

975 
GëFlﬂtAºayRegi⁄
(
jÊﬂtAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

976 
jÊﬂt
* 
buf
)

977 { 
	mfun˘i⁄s
->
GëFlﬂtAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

978 
GëDoubÀAºayRegi⁄
(
jdoubÀAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

979 
jdoubÀ
* 
buf
)

980 { 
	mfun˘i⁄s
->
GëDoubÀAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

982 
SëBoﬁónAºayRegi⁄
(
jboﬁónAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

983 c⁄° 
jboﬁón
* 
buf
)

984 { 
	mfun˘i⁄s
->
SëBoﬁónAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

985 
SëByãAºayRegi⁄
(
jbyãAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

986 c⁄° 
jbyã
* 
buf
)

987 { 
	mfun˘i⁄s
->
SëByãAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

988 
SëCh¨AºayRegi⁄
(
jch¨Aºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

989 c⁄° 
jch¨
* 
buf
)

990 { 
	mfun˘i⁄s
->
SëCh¨AºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

991 
SëSh‹tAºayRegi⁄
(
jsh‹tAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

992 c⁄° 
jsh‹t
* 
buf
)

993 { 
	mfun˘i⁄s
->
SëSh‹tAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

994 
SëI¡AºayRegi⁄
(
jötAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

995 c⁄° 
jöt
* 
buf
)

996 { 
	mfun˘i⁄s
->
SëI¡AºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

997 
SëL⁄gAºayRegi⁄
(
jl⁄gAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

998 c⁄° 
jl⁄g
* 
buf
)

999 { 
	mfun˘i⁄s
->
SëL⁄gAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

1000 
SëFlﬂtAºayRegi⁄
(
jÊﬂtAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

1001 c⁄° 
jÊﬂt
* 
buf
)

1002 { 
	mfun˘i⁄s
->
SëFlﬂtAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

1003 
SëDoubÀAºayRegi⁄
(
jdoubÀAºay
 
¨øy
, 
jsize
 
°¨t
, jsizê
Àn
,

1004 c⁄° 
jdoubÀ
* 
buf
)

1005 { 
	mfun˘i⁄s
->
SëDoubÀAºayRegi⁄
(
this
, 
¨øy
, 
°¨t
, 
Àn
, 
buf
); }

1007 
jöt
 
Regi°îN©ives
(
j˛ass
 
˛azz
, c⁄° 
JNIN©iveMëhod
* 
mëhods
,

1008 
jöt
 
nMëhods
)

1009 {  
	mfun˘i⁄s
->
Regi°îN©ives
(
this
, 
˛azz
, 
mëhods
, 
nMëhods
); }

1011 
jöt
 
Uƒegi°îN©ives
(
j˛ass
 
˛azz
)

1012 {  
	mfun˘i⁄s
->
Uƒegi°îN©ives
(
this
, 
˛azz
); }

1014 
jöt
 
M⁄ô‹E¡î
(
jobje˘
 
obj
)

1015 {  
	mfun˘i⁄s
->
M⁄ô‹E¡î
(
this
, 
obj
); }

1017 
jöt
 
M⁄ô‹Exô
(
jobje˘
 
obj
)

1018 {  
	mfun˘i⁄s
->
M⁄ô‹Exô
(
this
, 
obj
); }

1020 
jöt
 
GëJavaVM
(
JavaVM
** 
vm
)

1021 {  
	mfun˘i⁄s
->
GëJavaVM
(
this
, 
vm
); }

1023 
GëSåögRegi⁄
(
j°rög
 
°r
, 
jsize
 
°¨t
, jsizê
Àn
, 
jch¨
* 
buf
)

1024 { 
	mfun˘i⁄s
->
GëSåögRegi⁄
(
this
, 
°r
, 
°¨t
, 
Àn
, 
buf
); }

1026 
GëSåögUTFRegi⁄
(
j°rög
 
°r
, 
jsize
 
°¨t
, jsizê
Àn
, * 
buf
)

1027 {  
	mfun˘i⁄s
->
GëSåögUTFRegi⁄
(
this
, 
°r
, 
°¨t
, 
Àn
, 
buf
); }

1029 * 
GëPrimôiveAºayCrôiˇl
(
j¨øy
 
¨øy
, 
jboﬁón
* 
isC›y
)

1030 {  
	mfun˘i⁄s
->
GëPrimôiveAºayCrôiˇl
(
this
, 
¨øy
, 
isC›y
); }

1032 
Rñó£PrimôiveAºayCrôiˇl
(
j¨øy
 
¨øy
, * 
ˇºay
, 
jöt
 
mode
)

1033 { 
	mfun˘i⁄s
->
Rñó£PrimôiveAºayCrôiˇl
(
this
, 
¨øy
, 
ˇºay
, 
mode
); }

1035 c⁄° 
jch¨
* 
GëSåögCrôiˇl
(
j°rög
 
°rög
, 
jboﬁón
* 
isC›y
)

1036 {  
	mfun˘i⁄s
->
GëSåögCrôiˇl
(
this
, 
°rög
, 
isC›y
); }

1038 
Rñó£SåögCrôiˇl
(
j°rög
 
°rög
, c⁄° 
jch¨
* 
ˇºay
)

1039 { 
	mfun˘i⁄s
->
Rñó£SåögCrôiˇl
(
this
, 
°rög
, 
ˇºay
); }

1041 
jwók
 
NewWókGlobÆRef
(
jobje˘
 
obj
)

1042 {  
	mfun˘i⁄s
->
NewWókGlobÆRef
(
this
, 
obj
); }

1044 
DñëeWókGlobÆRef
(
jwók
 
obj
)

1045 { 
	mfun˘i⁄s
->
DñëeWókGlobÆRef
(
this
, 
obj
); }

1047 
jboﬁón
 
Ex˚±i⁄Check
()

1048 {  
	mfun˘i⁄s
->
Ex˚±i⁄Check
(
this
); }

1050 
jobje˘
 
NewDúe˘ByãBuf„r
(* 
addªss
, 
jl⁄g
 
ˇ∑côy
)

1051 {  
	mfun˘i⁄s
->
NewDúe˘ByãBuf„r
(
this
, 
addªss
, 
ˇ∑côy
); }

1053 * 
GëDúe˘Buf„rAddªss
(
jobje˘
 
buf
)

1054 {  
	mfun˘i⁄s
->
GëDúe˘Buf„rAddªss
(
this
, 
buf
); }

1056 
jl⁄g
 
GëDúe˘Buf„rC≠acôy
(
jobje˘
 
buf
)

1057 {  
	mfun˘i⁄s
->
GëDúe˘Buf„rC≠acôy
(
this
, 
buf
); }

1060 
jobje˘RefTy≥
 
GëObje˘RefTy≥
(
jobje˘
 
obj
)

1061 {  
	mfun˘i⁄s
->
GëObje˘RefTy≥
(
this
, 
obj
); }

1069 
	sJNIInvokeI¡îÁ˚
 {

1070 * 
	mª£rved0
;

1071 * 
	mª£rved1
;

1072 * 
	mª£rved2
;

1074 
jöt
 (*
De°royJavaVM
)(
	mJavaVM
*);

1075 
jöt
 (*
AâachCuºítThªad
)(
	mJavaVM
*, 
	mJNIEnv
**, *);

1076 
jöt
 (*
DëachCuºítThªad
)(
	mJavaVM
*);

1077 
jöt
 (*
GëEnv
)(
	mJavaVM
*, **, 
	mjöt
);

1078 
jöt
 (*
AâachCuºítThªadAsD´m⁄
)(
	mJavaVM
*, 
	mJNIEnv
**, *);

1084 
	s_JavaVM
 {

1085 c⁄° 
JNIInvokeI¡îÁ˚
* 
	mfun˘i⁄s
;

1087 #i‡
deföed
(
__˝lu•lus
)

1088 
jöt
 
De°royJavaVM
()

1089 {  
	mfun˘i⁄s
->
De°royJavaVM
(
this
); }

1090 
jöt
 
AâachCuºítThªad
(
JNIEnv
** 
p_ív
, * 
thr_¨gs
)

1091 {  
	mfun˘i⁄s
->
AâachCuºítThªad
(
this
, 
p_ív
, 
thr_¨gs
); }

1092 
jöt
 
DëachCuºítThªad
()

1093 {  
	mfun˘i⁄s
->
DëachCuºítThªad
(
this
); }

1094 
jöt
 
GëEnv
(** 
ív
, jöà
vîsi⁄
)

1095 {  
	mfun˘i⁄s
->
GëEnv
(
this
, 
ív
, 
vîsi⁄
); }

1096 
jöt
 
AâachCuºítThªadAsD´m⁄
(
JNIEnv
** 
p_ív
, * 
thr_¨gs
)

1097 {  
	mfun˘i⁄s
->
AâachCuºítThªadAsD´m⁄
(
this
, 
p_ív
, 
thr_¨gs
); }

1101 
	sJavaVMAâachArgs
 {

1102 
jöt
 
	mvîsi⁄
;

1103 c⁄° * 
	m«me
;

1104 
jobje˘
 
	mgroup
;

1106 
JavaVMAâachArgs
 
	tJavaVMAâachArgs
;

1112 
	sJavaVMO±i⁄
 {

1113 c⁄° * 
	m›ti⁄Såög
;

1114 * 
	mexåaInfo
;

1115 } 
	tJavaVMO±i⁄
;

1117 
	sJavaVMInôArgs
 {

1118 
jöt
 
	mvîsi⁄
;

1120 
jöt
 
	mnO±i⁄s
;

1121 
JavaVMO±i⁄
* 
	m›ti⁄s
;

1122 
jboﬁón
 
	mign‹eUƒecognized
;

1123 } 
	tJavaVMInôArgs
;

1125 #ifde‡
__˝lu•lus


1134 
jöt
 
JNI_GëDeÁu…JavaVMInôArgs
(*);

1135 
jöt
 
JNI_Cª©eJavaVM
(
JavaVM
**, 
JNIEnv
**, *);

1136 
jöt
 
JNI_GëCª©edJavaVMs
(
JavaVM
**, 
jsize
, jsize*);

1139 
	#JNIIMPORT


	)

1140 
	#JNIEXPORT
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

1141 
	#JNICALL
 
__NDK_FPABI__


	)

1147 
JNIEXPORT
 
jöt
 
JNICALL
 
JNI_OnLﬂd
(
JavaVM
* 
vm
, * 
ª£rved
);

1148 
JNIEXPORT
 
JNICALL
 
JNI_OnU∆ﬂd
(
JavaVM
* 
vm
, * 
ª£rved
);

1150 #ifde‡
__˝lu•lus


1158 
	#JNI_FALSE
 0

	)

1159 
	#JNI_TRUE
 1

	)

1161 
	#JNI_VERSION_1_1
 0x00010001

	)

1162 
	#JNI_VERSION_1_2
 0x00010002

	)

1163 
	#JNI_VERSION_1_4
 0x00010004

	)

1164 
	#JNI_VERSION_1_6
 0x00010006

	)

1166 
	#JNI_OK
 (0Ë

	)

1167 
	#JNI_ERR
 (-1Ë

	)

1168 
	#JNI_EDETACHED
 (-2Ë

	)

1169 
	#JNI_EVERSION
 (-3Ë

	)

1171 
	#JNI_COMMIT
 1

	)

1172 
	#JNI_ABORT
 2

	)

	@lastlog.h

	@libgen.h

28 #i‚de‡
_LIBGEN_H


29 
	#_LIBGEN_H


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

34 
__BEGIN_DECLS


37 * 
dú«me
 (c⁄° * 
∑th
);

38 * 
ba£«me
(c⁄° * 
∑th
);

52 
dú«me_r
(c⁄° * 
∑th
, * 
buf„r
, 
size_t
 
bufÊí
);

53 
ba£«me_r
(c⁄° * 
∑th
, * 
buf„r
, 
size_t
 
bufÊí
);

55 
	g__END_DECLS


	@limits.h

35 #i‚de‡
_LIMITS_H_


36 
	#_LIMITS_H_


	)

38 
	~<sys/cdefs.h
>

40 #i‡
__POSIX_VISIBLE


41 
	#_POSIX_ARG_MAX
 4096

	)

42 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_LINK_MAX
 8

	)

44 
	#_POSIX_MAX_CANON
 255

	)

45 
	#_POSIX_MAX_INPUT
 255

	)

46 
	#_POSIX_NAME_MAX
 14

	)

47 
	#_POSIX_NGROUPS_MAX
 0

	)

48 
	#_POSIX_OPEN_MAX
 16

	)

49 
	#_POSIX_PATH_MAX
 256

	)

50 
	#_POSIX_PIPE_BUF
 512

	)

51 
	#_POSIX_RE_DUP_MAX
 255

	)

52 
	#_POSIX_SSIZE_MAX
 32767

	)

53 
	#_POSIX_STREAM_MAX
 8

	)

54 
	#_POSIX_SYMLINK_MAX
 255

	)

55 
	#_POSIX_SYMLOOP_MAX
 8

	)

56 
	#_POSIX_TZNAME_MAX
 3

	)

58 
	#_POSIX2_BC_BASE_MAX
 99

	)

59 
	#_POSIX2_BC_DIM_MAX
 2048

	)

60 
	#_POSIX2_BC_SCALE_MAX
 99

	)

61 
	#_POSIX2_BC_STRING_MAX
 1000

	)

62 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

63 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

64 
	#_POSIX2_LINE_MAX
 2048

	)

65 
	#_POSIX2_RE_DUP_MAX
 
_POSIX_RE_DUP_MAX


	)

67 #i‡
__POSIX_VISIBLE
 >= 200112

68 
	#_POSIX_TTY_NAME_MAX
 9

	)

69 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

73 #i‡
__XPG_VISIBLE


74 
	#PASS_MAX
 128

	)

76 
	#NL_ARGMAX
 9

	)

77 
	#NL_LANGMAX
 14

	)

78 
	#NL_MSGMAX
 32767

	)

79 
	#NL_NMAX
 1

	)

80 
	#NL_SETMAX
 255

	)

81 
	#NL_TEXTMAX
 255

	)

83 
	#TMP_MAX
 308915776

	)

86 
	~<sys/limôs.h
>

88 #i‡
__POSIX_VISIBLE


89 
	~<sys/sy¶imôs.h
>

96 #i‚de‡
LONG_LONG_MIN


97 
	#LONG_LONG_MIN
 
LLONG_MIN


	)

100 #i‚de‡
LONG_LONG_MAX


101 
	#LONG_LONG_MAX
 
LLONG_MAX


	)

104 #i‚de‡
ULONG_LONG_MAX


105 
	#ULONG_LONG_MAX
 
ULLONG_MAX


	)

108 #i‚de‡
PAGESIZE


109 
	~<asm/∑ge.h
>

110 
	#PAGESIZE
 
PAGE_SIZE


	)

	@link.h

28 #i‚de‡
_LINK_H_


29 
	#_LINK_H_


	)

31 
	~<sys/ty≥s.h
>

32 
	~<ñf.h
>

34 
	g__BEGIN_DECLS


37 
	#ElfW
(
ty≥
Ë
Elf32_
##
	)
type

39 
	sdl_phdr_öfo
 {

40 
ElfW
(
Addr
Ë
	mdÕi_addr
;

41 c⁄° * 
	mdÕi_«me
;

42 c⁄° 
ElfW
(
Phdr
)* 
	mdÕi_phdr
;

43 
ElfW
(
HÆf
Ë
	mdÕi_phnum
;

46 #ifde‡
__¨m__


47 * 
	t_Unwöd_På
;

48 
_Unwöd_På
 
dl_unwöd_föd_exidx
(_Unwöd_På 
pc
, * 
pcou¡
);

50 
dl_ôî©e_phdr
((*
cb
)(
dl_phdr_öfo
*, 
size_t
, *), *);

53 
__END_DECLS


	@linux/a.out.h

12 #i‚de‡
__A_OUT_GNU_H__


13 
	#__A_OUT_GNU_H__


	)

15 
	#__GNU_EXEC_MACROS__


	)

17 #i‚de‡
__STRUCT_EXEC_OVERRIDE__


19 
	~<asm/a.out.h
>

23 
	emachöe_ty≥
 {

24 #ifde‡
M_OLDSUN2


25 
	mM__OLDSUN2
 = 
M_OLDSUN2
,

27 
	mM_OLDSUN2
 = 0,

29 #ifde‡
M_68010


30 
	mM__68010
 = 
M_68010
,

32 
	mM_68010
 = 1,

34 #ifde‡
M_68020


35 
	mM__68020
 = 
M_68020
,

37 
	mM_68020
 = 2,

39 #ifde‡
M_SPARC


40 
	mM__SPARC
 = 
M_SPARC
,

42 
	mM_SPARC
 = 3,

45 
	mM_386
 = 100,

46 
	mM_MIPS1
 = 151,

47 
	mM_MIPS2
 = 152

50 #i‚de‡
N_MAGIC


51 
	#N_MAGIC
(
exec
Ë(”xec).
a_öfo
 & 0xffff)

	)

53 
	#N_MACHTYPE
(
exec
Ë((
machöe_ty≥
)((”xec).
a_öfo
 >> 16Ë& 0xff))

	)

54 
	#N_FLAGS
(
exec
Ë((”xec).
a_öfo
 >> 24Ë& 0xff)

	)

55 
	#N_SET_INFO
(
exec
, 
magic
, 
ty≥
, 
Êags
Ë(”xec).
a_öfo
 = ((magicË& 0xffffË| ((()—y≥Ë& 0xffË<< 16Ë| (((ÊagsË& 0xffË<< 24))

	)

56 
	#N_SET_MAGIC
(
exec
, 
magic
Ë(”xec).
a_öfo
 = ((”xec).a_öfÿ& 0xffff0000Ë| ((magicË& 0xffff)))

	)

58 
	#N_SET_MACHTYPE
(
exec
, 
machty≥
Ë(”xec).
a_öfo
 = (”xec).a_öfo&0xff00ffffË| (((()(machty≥))&0xffË<< 16))

	)

60 
	#N_SET_FLAGS
(
exec
, 
Êags
Ë(”xec).
a_öfo
 = (”xec).a_öfo&0x00ffffffË| (((ÊagsË& 0xffË<< 24))

	)

62 
	#OMAGIC
 0407

	)

64 
	#NMAGIC
 0410

	)

66 
	#ZMAGIC
 0413

	)

68 
	#QMAGIC
 0314

	)

70 
	#CMAGIC
 0421

	)

72 #i‚de‡
N_BADMAG


73 
	#N_BADMAG
(
x
Ë(
	`N_MAGIC
(xË!
OMAGIC
 && N_MAGIC(xË!
NMAGIC
 && N_MAGIC(xË!
ZMAGIC
 && N_MAGIC(xË!
QMAGIC
)

	)

76 
	#_N_HDROFF
(
x
Ë(1024 -  (
exec
))

	)

78 #i‚de‡
N_TXTOFF


79 
	#N_TXTOFF
(
x
Ë(
	`N_MAGIC
(xË=
ZMAGIC
 ? 
	`_N_HDROFF
((x)Ë+  (
exec
Ë: (N_MAGIC(xË=
QMAGIC
 ? 0 :  (exec)))

	)

82 #i‚de‡
N_DATOFF


83 
	#N_DATOFF
(
x
Ë(
	`N_TXTOFF
(xË+ (x).
a_ãxt
)

	)

86 #i‚de‡
N_TRELOFF


87 
	#N_TRELOFF
(
x
Ë(
	`N_DATOFF
(xË+ (x).
a_d©a
)

	)

90 #i‚de‡
N_DRELOFF


91 
	#N_DRELOFF
(
x
Ë(
	`N_TRELOFF
(xË+ 
	`N_TRSIZE
(x))

	)

94 #i‚de‡
N_SYMOFF


95 
	#N_SYMOFF
(
x
Ë(
	`N_DRELOFF
(xË+ 
	`N_DRSIZE
(x))

	)

98 #i‚de‡
N_STROFF


99 
	#N_STROFF
(
x
Ë(
	`N_SYMOFF
(xË+ 
	`N_SYMSIZE
(x))

	)

102 #i‚de‡
N_TXTADDR


103 
	#N_TXTADDR
(
x
Ë(
	`N_MAGIC
(xË=
QMAGIC
 ? 
PAGE_SIZE
 : 0)

	)

106 #i‡
deföed
(
vax
Ë|| deföed(
hp300
Ë|| deföed(
pyr
)

107 
	#SEGMENT_SIZE
 
∑ge_size


	)

109 #ifde‡
s⁄y


110 
	#SEGMENT_SIZE
 0x2000

	)

112 #ifde‡
is68k


113 
	#SEGMENT_SIZE
 0x20000

	)

115 #i‡
deföed
(
m68k
Ë&& deföed(
PORTAR
)

116 
	#PAGE_SIZE
 0x400

	)

117 
	#SEGMENT_SIZE
 
PAGE_SIZE


	)

120 #ifde‡
löux


121 
	~<asm/∑ge.h
>

122 #i‡
deföed
(
__i386__
Ë|| deföed(
__mc68000__
)

123 
	#SEGMENT_SIZE
 1024

	)

125 #i‚de‡
SEGMENT_SIZE


126 
	#SEGMENT_SIZE
 
PAGE_SIZE


	)

131 
	#_N_SEGMENT_ROUND
(
x
Ë
	`ALIGN
(x, 
SEGMENT_SIZE
)

	)

133 
	#_N_TXTENDADDR
(
x
Ë(
	`N_TXTADDR
(x)+(x).
a_ãxt
)

	)

135 #i‚de‡
N_DATADDR


136 
	#N_DATADDR
(
x
Ë(
	`N_MAGIC
(x)==
OMAGIC
? (
	`_N_TXTENDADDR
(x)Ë: (
	`_N_SEGMENT_ROUND
 (_N_TXTENDADDR(x))))

	)

139 #i‚de‡
N_BSSADDR


140 
	#N_BSSADDR
(
x
Ë(
	`N_DATADDR
(xË+ (x).
a_d©a
)

	)

143 #i‚de‡
N_NLIST_DECLARED


144 
	s∆i°
 {

146 *
	mn_«me
;

147 
∆i°
 *
	mn_√xt
;

148 
	mn_°rx
;

149 } 
	mn_un
;

150 
	mn_ty≥
;

151 
	mn_Ÿhî
;

152 
	mn_desc
;

153 
	mn_vÆue
;

157 #i‚de‡
N_UNDF


158 
	#N_UNDF
 0

	)

160 #i‚de‡
N_ABS


161 
	#N_ABS
 2

	)

163 #i‚de‡
N_TEXT


164 
	#N_TEXT
 4

	)

166 #i‚de‡
N_DATA


167 
	#N_DATA
 6

	)

169 #i‚de‡
N_BSS


170 
	#N_BSS
 8

	)

172 #i‚de‡
N_FN


173 
	#N_FN
 15

	)

176 #i‚de‡
N_EXT


177 
	#N_EXT
 1

	)

179 #i‚de‡
N_TYPE


180 
	#N_TYPE
 036

	)

182 #i‚de‡
N_STAB


183 
	#N_STAB
 0340

	)

186 
	#N_INDR
 0xa

	)

188 
	#N_SETA
 0x14

	)

189 
	#N_SETT
 0x16

	)

190 
	#N_SETD
 0x18

	)

191 
	#N_SETB
 0x1A

	)

193 
	#N_SETV
 0x1C

	)

195 #i‚de‡
N_RELOCATION_INFO_DECLARED


197 
	sªloˇti⁄_öfo


200 
	mr_addªss
;

202 
	mr_symbﬁnum
:24;

204 
	mr_p¸ñ
:1;

206 
	mr_Àngth
:2;

208 
	mr_exã∫
:1;

210 #ifde‡
NS32K


211 
	mr_b§
:1;

212 
	mr_di•
:1;

213 
	mr_∑d
:2;

215 
	mr_∑d
:4;

	@linux/aio_abi.h

12 #i‚de‡
__LINUX__AIO_ABI_H


13 
	#__LINUX__AIO_ABI_H


	)

15 
	~<asm/byã‹dî.h
>

17 
	taio_c⁄ãxt_t
;

20 
	mIOCB_CMD_PREAD
 = 0,

21 
	mIOCB_CMD_PWRITE
 = 1,

22 
	mIOCB_CMD_FSYNC
 = 2,

23 
	mIOCB_CMD_FDSYNC
 = 3,

25 
	mIOCB_CMD_NOOP
 = 6,

28 
	sio_evít
 {

29 
__u64
 
	md©a
;

30 
__u64
 
	mobj
;

31 
__s64
 
	mªs
;

32 
__s64
 
	mªs2
;

35 #ifde‡
__LITTLE_ENDIAN


36 
	#PADDED
(
x
,
y
Ëx, 
	)
y

37 #ñi‡
deföed
(
__BIG_ENDIAN
)

38 
	#PADDED
(
x
,
y
Ëy, 
	)
x

40 #îr‹ 
edô
 
your
 
odd
 
byã‹dî
.

43 
	siocb
 {

45 
__u64
 
	maio_d©a
;

46 
__u32
 
PADDED
(
aio_key
, 
aio_ª£rved1
);

48 
__u16
 
	maio_lio_›code
;

49 
__s16
 
	maio_ªq¥io
;

50 
__u32
 
	maio_fûdes
;

52 
__u64
 
	maio_buf
;

53 
__u64
 
	maio_nbyãs
;

54 
__s64
 
	maio_off£t
;

56 
__u64
 
	maio_ª£rved2
;

57 
__u64
 
	maio_ª£rved3
;

60 #unde‡
IFBIG


61 #unde‡
IFLITTLE


	@linux/akm8976.h

12 #i‚de‡
AKM8976_H


13 
	#AKM8976_H


	)

15 
	~<löux/io˘l.h
>

17 
	#AKECS_MODE_MEASURE
 0x00

	)

19 
	#AKECS_MODE_PFFD
 0x01

	)

20 
	#AKECS_MODE_E2P_READ
 0x02

	)

21 
	#AKECS_MODE_POWERDOWN
 0x03

	)

23 
	#AKECS_MODE_MEASURE_SNG
 0x10

	)

24 
	#AKECS_MODE_MEASURE_SEQ
 0x11

	)

26 
	#CSPEC_AINT
 0x01

	)

27 
	#CSPEC_SNG_NUM
 0x01

	)

28 
	#CSPEC_SEQ_NUM
 0x02

	)

29 
	#CSPEC_SFRQ_32
 0x00

	)

30 
	#CSPEC_SFRQ_64
 0x01

	)

31 
	#CSPEC_MCS
 0x07

	)

32 
	#CSPEC_MKS
 0x01

	)

33 
	#CSPEC_INTEN
 0x01

	)

35 
	#RBUFF_SIZE
 31

	)

36 
	#MAX_CALI_SIZE
 0x1000U

	)

38 
	#AKECS_REG_ST
 0xC0

	)

39 
	#AKECS_REG_TMPS
 0xC1

	)

40 
	#AKECS_REG_MS1
 0xE0

	)

41 
	#AKECS_REG_MS2
 0xE1

	)

42 
	#AKECS_REG_MS3
 0xE2

	)

44 
	#AKMIO
 0xA1

	)

46 
	#ECS_IOCTL_INIT
 
	`_IO
(
AKMIO
, 0x01)

	)

47 
	#ECS_IOCTL_WRITE
 
	`_IOW
(
AKMIO
, 0x02, [5])

	)

48 
	#ECS_IOCTL_READ
 
	`_IOWR
(
AKMIO
, 0x03, [5])

	)

49 
	#ECS_IOCTL_RESET
 
	`_IO
(
AKMIO
, 0x04)

	)

50 
	#ECS_IOCTL_INT_STATUS
 
	`_IO
(
AKMIO
, 0x05)

	)

51 
	#ECS_IOCTL_FFD_STATUS
 
	`_IO
(
AKMIO
, 0x06)

	)

52 
	#ECS_IOCTL_SET_MODE
 
	`_IOW
(
AKMIO
, 0x07, )

	)

53 
	#ECS_IOCTL_GETDATA
 
	`_IOR
(
AKMIO
, 0x08, [
RBUFF_SIZE
+1])

	)

54 
	#ECS_IOCTL_GET_NUMFRQ
 
	`_IOR
(
AKMIO
, 0x09, [2])

	)

55 
	#ECS_IOCTL_SET_PERST
 
	`_IO
(
AKMIO
, 0x0A)

	)

56 
	#ECS_IOCTL_SET_G0RST
 
	`_IO
(
AKMIO
, 0x0B)

	)

57 
	#ECS_IOCTL_SET_YPR
 
	`_IOW
(
AKMIO
, 0x0C, [12])

	)

58 
	#ECS_IOCTL_GET_OPEN_STATUS
 
	`_IOR
(
AKMIO
, 0x0D, )

	)

59 
	#ECS_IOCTL_GET_CLOSE_STATUS
 
	`_IOR
(
AKMIO
, 0x0E, )

	)

60 
	#ECS_IOCTL_GET_CALI_DATA
 
	`_IOR
(
AKMIO
, 0x0F, [
MAX_CALI_SIZE
])

	)

61 
	#ECS_IOCTL_GET_DELAY
 
	`_IOR
(
AKMIO
, 0x30, )

	)

63 
	#ECS_IOCTL_APP_SET_MODE
 
	`_IOW
(
AKMIO
, 0x10, )

	)

64 
	#ECS_IOCTL_APP_SET_MFLAG
 
	`_IOW
(
AKMIO
, 0x11, )

	)

65 
	#ECS_IOCTL_APP_GET_MFLAG
 
	`_IOW
(
AKMIO
, 0x12, )

	)

66 
	#ECS_IOCTL_APP_SET_AFLAG
 
	`_IOW
(
AKMIO
, 0x13, )

	)

67 
	#ECS_IOCTL_APP_GET_AFLAG
 
	`_IOR
(
AKMIO
, 0x14, )

	)

68 
	#ECS_IOCTL_APP_SET_TFLAG
 
	`_IOR
(
AKMIO
, 0x15, )

	)

69 
	#ECS_IOCTL_APP_GET_TFLAG
 
	`_IOR
(
AKMIO
, 0x16, )

	)

70 
	#ECS_IOCTL_APP_RESET_PEDOMETER
 
	`_IO
(
AKMIO
, 0x17)

	)

71 
	#ECS_IOCTL_APP_SET_DELAY
 
	`_IOW
(
AKMIO
, 0x18, )

	)

72 
	#ECS_IOCTL_APP_GET_DELAY
 
ECS_IOCTL_GET_DELAY


	)

73 
	#ECS_IOCTL_APP_SET_MVFLAG
 
	`_IOW
(
AKMIO
, 0x19, )

	)

74 
	#ECS_IOCTL_APP_GET_MVFLAG
 
	`_IOR
(
AKMIO
, 0x1A, )

	)

76 
	#ECS_IOCTL_SET_STEP_CNT
 
	`_IOW
(
AKMIO
, 0x20, )

	)

78 
	#ECS_RST
 146

	)

79 
	#ECS_CLK_ON
 155

	)

80 
	#ECS_INTR
 161

	)

82 
	sakm8976_∂©f‹m_d©a
 {

83 
	mª£t
;

84 
	m˛k_⁄
;

85 
	möå
;

	@linux/android_alarm.h

12 #i‚de‡
_LINUX_ANDROID_ALARM_H


13 
	#_LINUX_ANDROID_ALARM_H


	)

15 
	~<asm/io˘l.h
>

16 
	~<löux/time.h
>

20 
	mANDROID_ALARM_RTC_WAKEUP
,

21 
	mANDROID_ALARM_RTC
,

22 
	mANDROID_ALARM_ELAPSED_REALTIME_WAKEUP
,

23 
	mANDROID_ALARM_ELAPSED_REALTIME
,

24 
	mANDROID_ALARM_SYSTEMTIME
,

26 
	mANDROID_ALARM_TYPE_COUNT
,

28 } 
	t™droid_Æ¨m_ty≥_t
;

31 
	mANDROID_ALARM_RTC_WAKEUP_MASK
 = 1U << 
ANDROID_ALARM_RTC_WAKEUP
,

32 
	mANDROID_ALARM_RTC_MASK
 = 1U << 
ANDROID_ALARM_RTC
,

33 
	mANDROID_ALARM_ELAPSED_REALTIME_WAKEUP_MASK
 = 1U << 
ANDROID_ALARM_ELAPSED_REALTIME_WAKEUP
,

34 
	mANDROID_ALARM_ELAPSED_REALTIME_MASK
 = 1U << 
ANDROID_ALARM_ELAPSED_REALTIME
,

35 
	mANDROID_ALARM_SYSTEMTIME_MASK
 = 1U << 
ANDROID_ALARM_SYSTEMTIME
,

36 
	mANDROID_ALARM_TIME_CHANGE_MASK
 = 1U << 16

37 } 
	t™droid_Æ¨m_ªtu∫_Êags_t
;

39 
	#ANDROID_ALARM_CLEAR
(
ty≥
Ë
	`_IO
('a', 0 | (—y≥Ë<< 4))

	)

40 
	#ANDROID_ALARM_WAIT
 
	`_IO
('a', 1)

	)

41 
	#ANDROID_ALARM_SET
(
ty≥
Ë
	`_IOW
('a', 2 | (—y≥Ë<< 4), 
time•ec
)

	)

42 
	#ANDROID_ALARM_SET_AND_WAIT
(
ty≥
Ë
	`_IOW
('a', 3 | (—y≥Ë<< 4), 
time•ec
)

	)

43 
	#ANDROID_ALARM_GET_TIME
(
ty≥
Ë
	`_IOW
('a', 4 | (—y≥Ë<< 4), 
time•ec
)

	)

44 
	#ANDROID_ALARM_SET_RTC
 
	`_IOW
('a', 5, 
time•ec
)

	)

45 
	#ANDROID_ALARM_SET_TIMEZONE
 
	`_IOW
('a', 6, 
timez⁄e
)

	)

47 
	#ANDROID_ALARM_BASE_CMD
(
cmd
Ë(cmd & ~(
	`_IOC
(0, 0, 0xf0, 0)))

	)

48 
	#ANDROID_ALARM_IOCTL_TO_TYPE
(
cmd
Ë(
	`_IOC_NR
(cmdË>> 4)

	)

	@linux/android_pmem.h

12 #i‚de‡
_ANDROID_PMEM_H_


13 
	#_ANDROID_PMEM_H_


	)

15 
	~<°döt.h
>

17 #i‚de‡
__u£r


18 
	#__u£r


	)

21 
	spmem_ªgi⁄
 {

22 
	moff£t
;

23 
	mÀn
;

26 
	#PMEM_IOCTL_MAGIC
 'p'

	)

27 
	#PMEM_GET_PHYS
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 1, 
pmem_ªgi⁄
 *)

	)

28 
	#PMEM_MAP
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 2, 
pmem_ªgi⁄
 *)

	)

29 
	#PMEM_GET_SIZE
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 3, 
pmem_ªgi⁄
 *)

	)

30 
	#PMEM_UNMAP
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 4, 
pmem_ªgi⁄
 *)

	)

32 
	#PMEM_ALLOCATE
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 5, )

	)

34 
	#PMEM_CONNECT
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 6, )

	)

36 
	#PMEM_GET_TOTAL_SIZE
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 7, 
pmem_ªgi⁄
 *)

	)

38 
	#HW3D_REVOKE_GPU
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 8, )

	)

39 
	#HW3D_GRANT_GPU
 
	`_IOW
(
PMEM_IOCTL_MAGIC
, 9, )

	)

40 
	#HW3D_WAIT_IRQ
 
	`_IOW
(
PMEM_IOCTL_MAGIC
,10, )

	)

42 
	g™droid_pmem_∂©f‹m_d©a
;

43 
	spmem_fûe_›î©i⁄s
 {

44 (*
	mmm≠
Ë(
	mfûe
 *, 
	mvm_¨ó_°ru˘
 *);

45 (*
	m›í
Ë(
	möode
 *, 
	mfûe
 *);

46 
ssize_t
 (*
ªad
Ë(
	mfûe
 *, 
	m__u£r
 *, 
	msize_t
, *);

47 (*
	mªÀa£
Ë(
	möode
 *, 
	mfûe
 *);

48 (*
	mio˘l
Ë(
	mfûe
 *, , );

	@linux/android_power.h

12 #i‚de‡
_LINUX_ANDROID_POWER_H


13 
	#_LINUX_ANDROID_POWER_H


	)

15 
	~<löux/li°.h
>

19 
li°_hód
 
	mlök
;

20 
	mlock_cou¡
;

21 
	mÊags
;

22 c⁄° *
	m«me
;

23 
	mexpúes
;

24 } 
	t™droid_su•íd_lock_t
;

26 
	#ANDROID_SUSPEND_LOCK_FLAG_COUNTED
 (1U << 0)

	)

27 
	#ANDROID_SUSPEND_LOCK_FLAG_USER_READABLE
 (1U << 1)

	)

28 
	#ANDROID_SUSPEND_LOCK_FLAG_USER_SET
 (1U << 2)

	)

29 
	#ANDROID_SUSPEND_LOCK_FLAG_USER_CLEAR
 (1U << 3)

	)

30 
	#ANDROID_SUSPEND_LOCK_FLAG_USER_INC
 (1U << 4)

	)

31 
	#ANDROID_SUSPEND_LOCK_FLAG_USER_DEC
 (1U << 5)

	)

32 
	#ANDROID_SUSPEND_LOCK_FLAG_USER_VISIBLE_MASK
 (0x1fU << 1)

	)

33 
	#ANDROID_SUSPEND_LOCK_AUTO_EXPIRE
 (1U << 6)

	)

35 
™droid_óæy_su•íd
 
	t™droid_óæy_su•íd_t
;

36 
	s™droid_óæy_su•íd


38 
li°_hód
 
	mlök
;

39 
	mÀvñ
;

40 (*
	msu•íd
)(
™droid_óæy_su•íd_t
 *
	mh
);

41 (*
	mªsume
)(
™droid_óæy_su•íd_t
 *
	mh
);

45 
	mANDROID_CHARGING_STATE_UNKNOWN
,

46 
	mANDROID_CHARGING_STATE_DISCHARGE
,

47 
	mANDROID_CHARGING_STATE_MAINTAIN
,

48 
	mANDROID_CHARGING_STATE_SLOW
,

49 
	mANDROID_CHARGING_STATE_NORMAL
,

50 
	mANDROID_CHARGING_STATE_FAST
,

51 
	mANDROID_CHARGING_STATE_OVERHEAT


52 } 
	t™droid_ch¨gög_°©e_t
;

	@linux/apm_bios.h

12 #i‚de‡
_LINUX_APM_H


13 
	#_LINUX_APM_H


	)

15 
	t≠m_evít_t
;

16 
	t≠m_evítöfo_t
;

18 
	#APM_STATE_READY
 0x0000

	)

19 
	#APM_STATE_STANDBY
 0x0001

	)

20 
	#APM_STATE_SUSPEND
 0x0002

	)

21 
	#APM_STATE_OFF
 0x0003

	)

22 
	#APM_STATE_BUSY
 0x0004

	)

23 
	#APM_STATE_REJECT
 0x0005

	)

24 
	#APM_STATE_OEM_SYS
 0x0020

	)

25 
	#APM_STATE_OEM_DEV
 0x0040

	)

27 
	#APM_STATE_DISABLE
 0x0000

	)

28 
	#APM_STATE_ENABLE
 0x0001

	)

30 
	#APM_STATE_DISENGAGE
 0x0000

	)

31 
	#APM_STATE_ENGAGE
 0x0001

	)

33 
	#APM_SYS_STANDBY
 0x0001

	)

34 
	#APM_SYS_SUSPEND
 0x0002

	)

35 
	#APM_NORMAL_RESUME
 0x0003

	)

36 
	#APM_CRITICAL_RESUME
 0x0004

	)

37 
	#APM_LOW_BATTERY
 0x0005

	)

38 
	#APM_POWER_STATUS_CHANGE
 0x0006

	)

39 
	#APM_UPDATE_TIME
 0x0007

	)

40 
	#APM_CRITICAL_SUSPEND
 0x0008

	)

41 
	#APM_USER_STANDBY
 0x0009

	)

42 
	#APM_USER_SUSPEND
 0x000a

	)

43 
	#APM_STANDBY_RESUME
 0x000b

	)

44 
	#APM_CAPABILITY_CHANGE
 0x000c

	)

46 
	#APM_SUCCESS
 0x00

	)

47 
	#APM_DISABLED
 0x01

	)

48 
	#APM_CONNECTED
 0x02

	)

49 
	#APM_NOT_CONNECTED
 0x03

	)

50 
	#APM_16_CONNECTED
 0x05

	)

51 
	#APM_16_UNSUPPORTED
 0x06

	)

52 
	#APM_32_CONNECTED
 0x07

	)

53 
	#APM_32_UNSUPPORTED
 0x08

	)

54 
	#APM_BAD_DEVICE
 0x09

	)

55 
	#APM_BAD_PARAM
 0x0a

	)

56 
	#APM_NOT_ENGAGED
 0x0b

	)

57 
	#APM_BAD_FUNCTION
 0x0c

	)

58 
	#APM_RESUME_DISABLED
 0x0d

	)

59 
	#APM_NO_ERROR
 0x53

	)

60 
	#APM_BAD_STATE
 0x60

	)

61 
	#APM_NO_EVENTS
 0x80

	)

62 
	#APM_NOT_PRESENT
 0x86

	)

64 
	#APM_DEVICE_BIOS
 0x0000

	)

65 
	#APM_DEVICE_ALL
 0x0001

	)

66 
	#APM_DEVICE_DISPLAY
 0x0100

	)

67 
	#APM_DEVICE_STORAGE
 0x0200

	)

68 
	#APM_DEVICE_PARALLEL
 0x0300

	)

69 
	#APM_DEVICE_SERIAL
 0x0400

	)

70 
	#APM_DEVICE_NETWORK
 0x0500

	)

71 
	#APM_DEVICE_PCMCIA
 0x0600

	)

72 
	#APM_DEVICE_BATTERY
 0x8000

	)

73 
	#APM_DEVICE_OEM
 0xe000

	)

74 
	#APM_DEVICE_OLD_ALL
 0xffff

	)

75 
	#APM_DEVICE_CLASS
 0x00ff

	)

76 
	#APM_DEVICE_MASK
 0xff00

	)

78 
	#APM_MAX_BATTERIES
 2

	)

80 
	#APM_CAP_GLOBAL_STANDBY
 0x0001

	)

81 
	#APM_CAP_GLOBAL_SUSPEND
 0x0002

	)

82 
	#APM_CAP_RESUME_STANDBY_TIMER
 0x0004

	)

83 
	#APM_CAP_RESUME_SUSPEND_TIMER
 0x0008

	)

84 
	#APM_CAP_RESUME_STANDBY_RING
 0x0010

	)

85 
	#APM_CAP_RESUME_SUSPEND_RING
 0x0020

	)

86 
	#APM_CAP_RESUME_STANDBY_PCMCIA
 0x0040

	)

87 
	#APM_CAP_RESUME_SUSPEND_PCMCIA
 0x0080

	)

89 
	~<löux/io˘l.h
>

91 
	#APM_IOC_STANDBY
 
	`_IO
('A', 1)

	)

92 
	#APM_IOC_SUSPEND
 
	`_IO
('A', 2)

	)

	@linux/ashmem.h

12 #i‚de‡
_LINUX_ASHMEM_H


13 
	#_LINUX_ASHMEM_H


	)

15 
	~<löux/limôs.h
>

16 
	~<löux/io˘l.h
>

18 
	#ASHMEM_NAME_LEN
 256

	)

20 
	#ASHMEM_NAME_DEF
 "dev/ashmem"

	)

22 
	#ASHMEM_NOT_PURGED
 0

	)

23 
	#ASHMEM_WAS_PURGED
 1

	)

25 
	#ASHMEM_IS_UNPINNED
 0

	)

26 
	#ASHMEM_IS_PINNED
 1

	)

28 
	sashmem_pö
 {

29 
__u32
 
	moff£t
;

30 
__u32
 
	mÀn
;

33 
	#__ASHMEMIOC
 0x77

	)

35 
	#ASHMEM_SET_NAME
 
	`_IOW
(
__ASHMEMIOC
, 1, [
ASHMEM_NAME_LEN
])

	)

36 
	#ASHMEM_GET_NAME
 
	`_IOR
(
__ASHMEMIOC
, 2, [
ASHMEM_NAME_LEN
])

	)

37 
	#ASHMEM_SET_SIZE
 
	`_IOW
(
__ASHMEMIOC
, 3, 
size_t
)

	)

38 
	#ASHMEM_GET_SIZE
 
	`_IO
(
__ASHMEMIOC
, 4)

	)

39 
	#ASHMEM_SET_PROT_MASK
 
	`_IOW
(
__ASHMEMIOC
, 5, )

	)

40 
	#ASHMEM_GET_PROT_MASK
 
	`_IO
(
__ASHMEMIOC
, 6)

	)

41 
	#ASHMEM_PIN
 
	`_IOW
(
__ASHMEMIOC
, 7, 
ashmem_pö
)

	)

42 
	#ASHMEM_UNPIN
 
	`_IOW
(
__ASHMEMIOC
, 8, 
ashmem_pö
)

	)

43 
	#ASHMEM_GET_PIN_STATUS
 
	`_IO
(
__ASHMEMIOC
, 9)

	)

44 
	#ASHMEM_PURGE_ALL_CACHES
 
	`_IO
(
__ASHMEMIOC
, 10)

	)

	@linux/ata.h

12 #i‚de‡
__LINUX_ATA_H__


13 
	#__LINUX_ATA_H__


	)

15 
	~<löux/ty≥s.h
>

17 
	#ATA_DMA_BOUNDARY
 0xffffUL

	)

18 
	#ATA_DMA_MASK
 0xffffffffULL

	)

22 
	mATA_MAX_DEVICES
 = 2,

23 
	mATA_MAX_PRD
 = 256,

24 
	mATA_SECT_SIZE
 = 512,

26 
	mATA_ID_WORDS
 = 256,

27 
	mATA_ID_SERNO_OFS
 = 10,

28 
	mATA_ID_FW_REV_OFS
 = 23,

29 
	mATA_ID_PROD_OFS
 = 27,

30 
	mATA_ID_OLD_PIO_MODES
 = 51,

31 
	mATA_ID_FIELD_VALID
 = 53,

32 
	mATA_ID_MWDMA_MODES
 = 63,

33 
	mATA_ID_PIO_MODES
 = 64,

34 
	mATA_ID_EIDE_DMA_MIN
 = 65,

35 
	mATA_ID_EIDE_PIO
 = 67,

36 
	mATA_ID_EIDE_PIO_IORDY
 = 68,

37 
	mATA_ID_UDMA_MODES
 = 88,

38 
	mATA_ID_MAJOR_VER
 = 80,

39 
	mATA_ID_PIO4
 = (1 << 1),

41 
	mATA_PCI_CTL_OFS
 = 2,

42 
	mATA_SERNO_LEN
 = 20,

43 
	mATA_UDMA0
 = (1 << 0),

44 
	mATA_UDMA1
 = 
ATA_UDMA0
 | (1 << 1),

45 
	mATA_UDMA2
 = 
ATA_UDMA1
 | (1 << 2),

46 
	mATA_UDMA3
 = 
ATA_UDMA2
 | (1 << 3),

47 
	mATA_UDMA4
 = 
ATA_UDMA3
 | (1 << 4),

48 
	mATA_UDMA5
 = 
ATA_UDMA4
 | (1 << 5),

49 
	mATA_UDMA6
 = 
ATA_UDMA5
 | (1 << 6),

50 
	mATA_UDMA7
 = 
ATA_UDMA6
 | (1 << 7),

52 
	mATA_UDMA_MASK_40C
 = 
ATA_UDMA2
,

54 
	mATA_PRD_SZ
 = 8,

55 
	mATA_PRD_TBL_SZ
 = (
ATA_MAX_PRD
 * 
ATA_PRD_SZ
),

56 
	mATA_PRD_EOT
 = (1 << 31),

58 
	mATA_DMA_TABLE_OFS
 = 4,

59 
	mATA_DMA_STATUS
 = 2,

60 
	mATA_DMA_CMD
 = 0,

61 
	mATA_DMA_WR
 = (1 << 3),

62 
	mATA_DMA_START
 = (1 << 0),

63 
	mATA_DMA_INTR
 = (1 << 2),

64 
	mATA_DMA_ERR
 = (1 << 1),

65 
	mATA_DMA_ACTIVE
 = (1 << 0),

67 
	mATA_HOB
 = (1 << 7),

68 
	mATA_NIEN
 = (1 << 1),

69 
	mATA_LBA
 = (1 << 6),

70 
	mATA_DEV1
 = (1 << 4),

71 
	mATA_DEVICE_OBS
 = (1 << 7) | (1 << 5),

72 
	mATA_DEVCTL_OBS
 = (1 << 3),

73 
	mATA_BUSY
 = (1 << 7),

74 
	mATA_DRDY
 = (1 << 6),

75 
	mATA_DF
 = (1 << 5),

76 
	mATA_DRQ
 = (1 << 3),

77 
	mATA_ERR
 = (1 << 0),

78 
	mATA_SRST
 = (1 << 2),

79 
	mATA_ICRC
 = (1 << 7),

80 
	mATA_UNC
 = (1 << 6),

81 
	mATA_IDNF
 = (1 << 4),

82 
	mATA_ABORTED
 = (1 << 2),

84 
	mATA_REG_DATA
 = 0x00,

85 
	mATA_REG_ERR
 = 0x01,

86 
	mATA_REG_NSECT
 = 0x02,

87 
	mATA_REG_LBAL
 = 0x03,

88 
	mATA_REG_LBAM
 = 0x04,

89 
	mATA_REG_LBAH
 = 0x05,

90 
	mATA_REG_DEVICE
 = 0x06,

91 
	mATA_REG_STATUS
 = 0x07,

93 
	mATA_REG_FEATURE
 = 
ATA_REG_ERR
,

94 
	mATA_REG_CMD
 = 
ATA_REG_STATUS
,

95 
	mATA_REG_BYTEL
 = 
ATA_REG_LBAM
,

96 
	mATA_REG_BYTEH
 = 
ATA_REG_LBAH
,

97 
	mATA_REG_DEVSEL
 = 
ATA_REG_DEVICE
,

98 
	mATA_REG_IRQ
 = 
ATA_REG_NSECT
,

100 
	mATA_CMD_CHK_POWER
 = 0xE5,

101 
	mATA_CMD_STANDBY
 = 0xE2,

102 
	mATA_CMD_IDLE
 = 0xE3,

103 
	mATA_CMD_EDD
 = 0x90,

104 
	mATA_CMD_FLUSH
 = 0xE7,

105 
	mATA_CMD_FLUSH_EXT
 = 0xEA,

106 
	mATA_CMD_ID_ATA
 = 0xEC,

107 
	mATA_CMD_ID_ATAPI
 = 0xA1,

108 
	mATA_CMD_READ
 = 0xC8,

109 
	mATA_CMD_READ_EXT
 = 0x25,

110 
	mATA_CMD_WRITE
 = 0xCA,

111 
	mATA_CMD_WRITE_EXT
 = 0x35,

112 
	mATA_CMD_WRITE_FUA_EXT
 = 0x3D,

113 
	mATA_CMD_FPDMA_READ
 = 0x60,

114 
	mATA_CMD_FPDMA_WRITE
 = 0x61,

115 
	mATA_CMD_PIO_READ
 = 0x20,

116 
	mATA_CMD_PIO_READ_EXT
 = 0x24,

117 
	mATA_CMD_PIO_WRITE
 = 0x30,

118 
	mATA_CMD_PIO_WRITE_EXT
 = 0x34,

119 
	mATA_CMD_READ_MULTI
 = 0xC4,

120 
	mATA_CMD_READ_MULTI_EXT
 = 0x29,

121 
	mATA_CMD_WRITE_MULTI
 = 0xC5,

122 
	mATA_CMD_WRITE_MULTI_EXT
 = 0x39,

123 
	mATA_CMD_WRITE_MULTI_FUA_EXT
 = 0xCE,

124 
	mATA_CMD_SET_FEATURES
 = 0xEF,

125 
	mATA_CMD_PACKET
 = 0xA0,

126 
	mATA_CMD_VERIFY
 = 0x40,

127 
	mATA_CMD_VERIFY_EXT
 = 0x42,

128 
	mATA_CMD_STANDBYNOW1
 = 0xE0,

129 
	mATA_CMD_IDLEIMMEDIATE
 = 0xE1,

130 
	mATA_CMD_INIT_DEV_PARAMS
 = 0x91,

131 
	mATA_CMD_READ_NATIVE_MAX
 = 0xF8,

132 
	mATA_CMD_READ_NATIVE_MAX_EXT
 = 0x27,

133 
	mATA_CMD_READ_LOG_EXT
 = 0x2f,

135 
	mATA_LOG_SATA_NCQ
 = 0x10,

137 
	mSETFEATURES_XFER
 = 0x03,

138 
	mXFER_UDMA_7
 = 0x47,

139 
	mXFER_UDMA_6
 = 0x46,

140 
	mXFER_UDMA_5
 = 0x45,

141 
	mXFER_UDMA_4
 = 0x44,

142 
	mXFER_UDMA_3
 = 0x43,

143 
	mXFER_UDMA_2
 = 0x42,

144 
	mXFER_UDMA_1
 = 0x41,

145 
	mXFER_UDMA_0
 = 0x40,

146 
	mXFER_MW_DMA_2
 = 0x22,

147 
	mXFER_MW_DMA_1
 = 0x21,

148 
	mXFER_MW_DMA_0
 = 0x20,

149 
	mXFER_SW_DMA_2
 = 0x12,

150 
	mXFER_SW_DMA_1
 = 0x11,

151 
	mXFER_SW_DMA_0
 = 0x10,

152 
	mXFER_PIO_4
 = 0x0C,

153 
	mXFER_PIO_3
 = 0x0B,

154 
	mXFER_PIO_2
 = 0x0A,

155 
	mXFER_PIO_1
 = 0x09,

156 
	mXFER_PIO_0
 = 0x08,

157 
	mXFER_PIO_SLOW
 = 0x00,

159 
	mSETFEATURES_WC_ON
 = 0x02,

160 
	mSETFEATURES_WC_OFF
 = 0x82,

162 
	mATAPI_PKT_DMA
 = (1 << 0),

163 
	mATAPI_DMADIR
 = (1 << 2),

164 
	mATAPI_CDB_LEN
 = 16,

166 
	mATA_CBL_NONE
 = 0,

167 
	mATA_CBL_PATA40
 = 1,

168 
	mATA_CBL_PATA80
 = 2,

169 
	mATA_CBL_PATA_UNK
 = 3,

170 
	mATA_CBL_SATA
 = 4,

172 
	mSCR_STATUS
 = 0,

173 
	mSCR_ERROR
 = 1,

174 
	mSCR_CONTROL
 = 2,

175 
	mSCR_ACTIVE
 = 3,

176 
	mSCR_NOTIFICATION
 = 4,

178 
	mSERR_DATA_RECOVERED
 = (1 << 0),

179 
	mSERR_COMM_RECOVERED
 = (1 << 1),

180 
	mSERR_DATA
 = (1 << 8),

181 
	mSERR_PERSISTENT
 = (1 << 9),

182 
	mSERR_PROTOCOL
 = (1 << 10),

183 
	mSERR_INTERNAL
 = (1 << 11),

184 
	mSERR_PHYRDY_CHG
 = (1 << 16),

185 
	mSERR_DEV_XCHG
 = (1 << 26),

187 
	mATA_TFLAG_LBA48
 = (1 << 0),

188 
	mATA_TFLAG_ISADDR
 = (1 << 1),

189 
	mATA_TFLAG_DEVICE
 = (1 << 2),

190 
	mATA_TFLAG_WRITE
 = (1 << 3),

191 
	mATA_TFLAG_LBA
 = (1 << 4),

192 
	mATA_TFLAG_FUA
 = (1 << 5),

193 
	mATA_TFLAG_POLLING
 = (1 << 6),

196 
	e©a_tf_¥Ÿocﬁs
 {

198 
	mATA_PROT_UNKNOWN
,

199 
	mATA_PROT_NODATA
,

200 
	mATA_PROT_PIO
,

201 
	mATA_PROT_DMA
,

202 
	mATA_PROT_NCQ
,

203 
	mATA_PROT_ATAPI
,

204 
	mATA_PROT_ATAPI_NODATA
,

205 
	mATA_PROT_ATAPI_DMA
,

208 
	e©a_io˘ls
 {

209 
	mATA_IOC_GET_IO32
 = 0x309,

210 
	mATA_IOC_SET_IO32
 = 0x324,

213 
	s©a_¥d
 {

214 
u32
 
	maddr
;

215 
u32
 
	mÊags_Àn
;

218 
	s©a_èskfûe
 {

219 
	mÊags
;

220 
u8
 
	m¥Ÿocﬁ
;

222 
u8
 
	m˘l
;

224 
u8
 
	mhob_„©uª
;

225 
u8
 
	mhob_n£˘
;

226 
u8
 
	mhob_lbÆ
;

227 
u8
 
	mhob_lbam
;

228 
u8
 
	mhob_lbah
;

230 
u8
 
	m„©uª
;

231 
u8
 
	mn£˘
;

232 
u8
 
	mlbÆ
;

233 
u8
 
	mlbam
;

234 
u8
 
	mlbah
;

236 
u8
 
	mdevi˚
;

238 
u8
 
	mcomm™d
;

241 
	#©a_id_is_©a
(
id
Ë(((id)[0] & (1 << 15)Ë=0)

	)

242 
	#©a_id_is_cÁ
(
id
Ë((id)[0] =0x848A)

	)

243 
	#©a_id_is_ßè
(
id
Ë((id)[93] =0)

	)

244 
	#©a_id_øhód_íabÀd
(
id
Ë((id)[85] & (1 << 6))

	)

245 
	#©a_id_wˇche_íabÀd
(
id
Ë((id)[85] & (1 << 5))

	)

246 
	#©a_id_h∑_íabÀd
(
id
Ë((id)[85] & (1 << 10))

	)

247 
	#©a_id_has_fua
(
id
Ë((id)[84] & (1 << 6))

	)

248 
	#©a_id_has_Êush
(
id
Ë((id)[83] & (1 << 12))

	)

249 
	#©a_id_has_Êush_ext
(
id
Ë((id)[83] & (1 << 13))

	)

250 
	#©a_id_has_lba48
(
id
Ë((id)[83] & (1 << 10))

	)

251 
	#©a_id_has_h∑
(
id
Ë((id)[82] & (1 << 10))

	)

252 
	#©a_id_has_wˇche
(
id
Ë((id)[82] & (1 << 5))

	)

253 
	#©a_id_has_pm
(
id
Ë((id)[82] & (1 << 3))

	)

254 
	#©a_id_has_lba
(
id
Ë((id)[49] & (1 << 9))

	)

255 
	#©a_id_has_dma
(
id
Ë((id)[49] & (1 << 8))

	)

256 
	#©a_id_has_ncq
(
id
Ë((id)[76] & (1 << 8))

	)

257 
	#©a_id_queue_dïth
(
id
Ë(((id)[75] & 0x1fË+ 1)

	)

258 
	#©a_id_ªmovóbÀ
(
id
Ë((id)[0] & (1 << 7))

	)

259 
	#©a_id_has_dw‹d_io
(
id
Ë((id)[50] & (1 << 0))

	)

260 
	#©a_id_u32
(
id
,
n
Ë(((
u32
Ë(id)[“Ë+ 1] << 16Ë| ((u32Ë(id)[“)]))

	)

261 
	#©a_id_u64
(
id
,
n
Ë–((
u64
Ë(id)[“Ë+ 3] << 48Ë| ((u64Ë(id)[“Ë+ 2] << 32Ë| ((u64Ë(id)[“Ë+ 1] << 16Ë| ((u64Ë(id)[“Ë+ 0]Ë)

	)

263 
	#©a_id_cdb_öå
(
id
Ë(((id)[0] & 0x60Ë=0x20)

	)

	@linux/atm.h

12 #i‚de‡
_LINUX_ATM_H


13 
	#_LINUX_ATM_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/©m≠i.h
>

17 
	~<löux/©mßp.h
>

18 
	~<löux/©mioc.h
>

20 
	#ATM_CELL_SIZE
 53

	)

21 
	#ATM_CELL_PAYLOAD
 48

	)

22 
	#ATM_AAL0_SDU
 52

	)

23 
	#ATM_MAX_AAL34_PDU
 65535

	)

24 
	#ATM_AAL5_TRAILER
 8

	)

25 
	#ATM_MAX_AAL5_PDU
 65535

	)

26 
	#ATM_MAX_CDV
 9999

	)

27 
	#ATM_NOT_RSV_VCI
 32

	)

29 
	#ATM_MAX_VPI
 255

	)

30 
	#ATM_MAX_VPI_NNI
 4096

	)

31 
	#ATM_MAX_VCI
 65535

	)

33 
	#ATM_NO_AAL
 0

	)

34 
	#ATM_AAL0
 13

	)

35 
	#ATM_AAL1
 1

	)

36 
	#ATM_AAL2
 2

	)

37 
	#ATM_AAL34
 3

	)

38 
	#ATM_AAL5
 5

	)

40 
	#__SO_ENCODE
(
l
,
n
,
t
Ë(((÷Ë& 0x1FFË<< 22Ë| (“Ë<< 16Ë| —))

	)

41 
	#__SO_LEVEL_MATCH
(
c
,
m
Ë(((cË>> 22Ë=((mË& 0x1FF))

	)

42 
	#__SO_NUMBER
(
c
Ë(((cË>> 16Ë& 0x3f)

	)

43 
	#__SO_SIZE
(
c
Ë((cË& 0x3fff)

	)

45 
	#SO_SETCLP
 
	`__SO_ENCODE
(
SOL_ATM
,0,)

	)

47 
	#SO_CIRANGE
 
	`__SO_ENCODE
(
SOL_ATM
,1,
©m_cú™ge
)

	)

49 
	#SO_ATMQOS
 
	`__SO_ENCODE
(
SOL_ATM
,2,
©m_qos
)

	)

51 
	#SO_ATMSAP
 
	`__SO_ENCODE
(
SOL_ATM
,3,
©m_ßp
)

	)

53 
	#SO_ATMPVC
 
	`__SO_ENCODE
(
SOL_ATM
,4,
sockaddr_©mpvc
)

	)

55 
	#SO_MULTIPOINT
 
	`__SO_ENCODE
(
SOL_ATM
, 5, )

	)

57 
	#ATM_HDR_GFC_MASK
 0xf0000000

	)

58 
	#ATM_HDR_GFC_SHIFT
 28

	)

59 
	#ATM_HDR_VPI_MASK
 0x0ff00000

	)

60 
	#ATM_HDR_VPI_SHIFT
 20

	)

61 
	#ATM_HDR_VCI_MASK
 0x000ffff0

	)

62 
	#ATM_HDR_VCI_SHIFT
 4

	)

63 
	#ATM_HDR_PTI_MASK
 0x0000000e

	)

64 
	#ATM_HDR_PTI_SHIFT
 1

	)

65 
	#ATM_HDR_CLP
 0x00000001

	)

67 
	#ATM_PTI_US0
 0

	)

68 
	#ATM_PTI_US1
 1

	)

69 
	#ATM_PTI_UCES0
 2

	)

70 
	#ATM_PTI_UCES1
 3

	)

71 
	#ATM_PTI_SEGF5
 4

	)

72 
	#ATM_PTI_E2EF5
 5

	)

73 
	#ATM_PTI_RSV_RM
 6

	)

74 
	#ATM_PTI_RSV
 7

	)

76 
	#ATM_NONE
 0

	)

77 
	#ATM_UBR
 1

	)

78 
	#ATM_CBR
 2

	)

79 
	#ATM_VBR
 3

	)

80 
	#ATM_ABR
 4

	)

81 
	#ATM_ANYCLASS
 5

	)

83 
	#ATM_MAX_PCR
 -1

	)

85 
	s©m_åaÂrm
 {

86 
	måaffic_˛ass
;

87 
	mmax_p¸
;

88 
	mp¸
;

89 
	mmö_p¸
;

90 
	mmax_cdv
;

91 
	mmax_sdu
;

93 
	mi¸
;

94 
	mtbe
;

95 
	m‰â
 : 24;

96 
	mrif
 : 4;

97 
	mrdf
 : 4;

98 
	mƒm_¥es
 :1;

99 
	måm_¥es
 :1;

100 
	madtf_¥es
 :1;

101 
	mcdf_¥es
 :1;

102 
	mƒm
 :3;

103 
	måm
 :3;

104 
	madtf
 :10;

105 
	mcdf
 :3;

106 
	m•¨e
 :9;

109 
	s©m_qos
 {

110 
©m_åaÂrm
 
	mtxç
;

111 
©m_åaÂrm
 
rxç
 
	m__ATM_API_ALIGN
;

113 
Øl
 
	m__ATM_API_ALIGN
;

116 
	#ATM_ITF_ANY
 -1

	)

117 
	#ATM_VPI_ANY
 -1

	)

118 
	#ATM_VCI_ANY
 -1

	)

119 
	#ATM_VPI_UNSPEC
 -2

	)

120 
	#ATM_VCI_UNSPEC
 -2

	)

122 
	ssockaddr_©mpvc
 {

123 
	mßp_Ámûy
;

125 
	môf
;

126 
	mvpi
;

127 
	mvci
;

128 } 
ßp_addr
 
	m__ATM_API_ALIGN
;

131 
	#ATM_ESA_LEN
 20

	)

132 
	#ATM_E164_LEN
 12

	)

134 
	#ATM_AFI_DCC
 0x39

	)

135 
	#ATM_AFI_ICD
 0x47

	)

136 
	#ATM_AFI_E164
 0x45

	)

137 
	#ATM_AFI_LOCAL
 0x49

	)

139 
	#ATM_AFI_DCC_GROUP
 0xBD

	)

140 
	#ATM_AFI_ICD_GROUP
 0xC5

	)

141 
	#ATM_AFI_E164_GROUP
 0xC3

	)

142 
	#ATM_AFI_LOCAL_GROUP
 0xC7

	)

144 
	#ATM_LIJ_NONE
 0

	)

145 
	#ATM_LIJ
 1

	)

146 
	#ATM_LIJ_RPJ
 2

	)

147 
	#ATM_LIJ_NJ
 3

	)

149 
	ssockaddr_©msvc
 {

150 
	mßs_Ámûy
;

152 
	m¥v
[
ATM_ESA_LEN
];

153 
	mpub
[
ATM_E164_LEN
+1];

155 
	mlij_ty≥
;

156 
uöt32_t
 
	mlij_id
;

157 } 
ßs_addr
 
	m__ATM_API_ALIGN
;

160 
	t©m_backíd_t
;

	@linux/atmapi.h

12 #i‚de‡
_LINUX_ATMAPI_H


13 
	#_LINUX_ATMAPI_H


	)

15 #i‡
deföed
(
__•¨c__
Ë|| deföed(
__ü64__
)

17 
	#__ATM_API_ALIGN
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

19 
	#__ATM_API_ALIGN


	)

22 °ru˘ { 
	m_
[8]; } 
	t__ATM_API_ALIGN
 
	t©m_k±r_t
;

	@linux/atmdev.h

12 #i‚de‡
LINUX_ATMDEV_H


13 
	#LINUX_ATMDEV_H


	)

15 
	~<löux/©m≠i.h
>

16 
	~<löux/©m.h
>

17 
	~<löux/©mioc.h
>

19 
	#ESI_LEN
 6

	)

21 
	#ATM_OC3_PCR
 (155520000/270*260/8/53)

	)

23 
	#ATM_25_PCR
 ((25600000/8-8000)/54)

	)

25 
	#ATM_OC12_PCR
 (622080000/1080*1040/8/53)

	)

27 
	#ATM_DS3_PCR
 (8000*12)

	)

29 
	#__AAL_STAT_ITEMS
 
	`__HANDLE_ITEM
(
tx
); __HANDLE_ITEM(
tx_îr
); __HANDLE_ITEM(
rx
); __HANDLE_ITEM(
rx_îr
); __HANDLE_ITEM(
rx_dr›
);

	)

31 
	s©m_Øl_°©s
 {

32 
	#__HANDLE_ITEM
(
i
Ë
	)
i

33 
	m__AAL_STAT_ITEMS


34 #unde‡
__HANDLE_ITEM


37 
	s©m_dev_°©s
 {

38 
©m_Øl_°©s
 
	mØl0
;

39 
©m_Øl_°©s
 
	mØl34
;

40 
©m_Øl_°©s
 
	mØl5
;

41 } 
	g__ATM_API_ALIGN
;

43 
	#ATM_GETLINKRATE
 
	`_IOW
('a',
ATMIOC_ITF
+1,
©mif_sioc
)

	)

45 
	#ATM_GETNAMES
 
	`_IOW
('a',
ATMIOC_ITF
+3,
©m_iobuf
)

	)

47 
	#ATM_GETTYPE
 
	`_IOW
('a',
ATMIOC_ITF
+4,
©mif_sioc
)

	)

49 
	#ATM_GETESI
 
	`_IOW
('a',
ATMIOC_ITF
+5,
©mif_sioc
)

	)

51 
	#ATM_GETADDR
 
	`_IOW
('a',
ATMIOC_ITF
+6,
©mif_sioc
)

	)

53 
	#ATM_RSTADDR
 
	`_IOW
('a',
ATMIOC_ITF
+7,
©mif_sioc
)

	)

55 
	#ATM_ADDADDR
 
	`_IOW
('a',
ATMIOC_ITF
+8,
©mif_sioc
)

	)

57 
	#ATM_DELADDR
 
	`_IOW
('a',
ATMIOC_ITF
+9,
©mif_sioc
)

	)

59 
	#ATM_GETCIRANGE
 
	`_IOW
('a',
ATMIOC_ITF
+10,
©mif_sioc
)

	)

61 
	#ATM_SETCIRANGE
 
	`_IOW
('a',
ATMIOC_ITF
+11,
©mif_sioc
)

	)

63 
	#ATM_SETESI
 
	`_IOW
('a',
ATMIOC_ITF
+12,
©mif_sioc
)

	)

65 
	#ATM_SETESIF
 
	`_IOW
('a',
ATMIOC_ITF
+13,
©mif_sioc
)

	)

67 
	#ATM_ADDLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+14, 
©mif_sioc
)

	)

69 
	#ATM_DELLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+15, 
©mif_sioc
)

	)

71 
	#ATM_GETLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+16, 
©mif_sioc
)

	)

73 
	#ATM_GETSTAT
 
	`_IOW
('a',
ATMIOC_SARCOM
+0,
©mif_sioc
)

	)

75 
	#ATM_GETSTATZ
 
	`_IOW
('a',
ATMIOC_SARCOM
+1,
©mif_sioc
)

	)

77 
	#ATM_GETLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+2,
©mif_sioc
)

	)

79 
	#ATM_SETLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+3,
©mif_sioc
)

	)

81 
	#ATM_QUERYLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+4,
©mif_sioc
)

	)

83 
	#ATM_SETSC
 
	`_IOW
('a',
ATMIOC_SPECIAL
+1,)

	)

85 
	#ATM_SETBACKEND
 
	`_IOW
('a',
ATMIOC_SPECIAL
+2,
©m_backíd_t
)

	)

87 
	#ATM_NEWBACKENDIF
 
	`_IOW
('a',
ATMIOC_SPECIAL
+3,
©m_backíd_t
)

	)

89 
	#ATM_ADDPARTY
 
	`_IOW
('a', 
ATMIOC_SPECIAL
+4,
©m_iobuf
)

	)

91 
	#ATM_DROPPARTY
 
	`_IOW
('a', 
ATMIOC_SPECIAL
+5,)

	)

93 
	#ATM_BACKEND_RAW
 0

	)

94 
	#ATM_BACKEND_PPP
 1

	)

95 
	#ATM_BACKEND_BR2684
 2

	)

97 
	#ATM_ITFTYP_LEN
 8

	)

99 
	#__ATM_LM_NONE
 0

	)

100 
	#__ATM_LM_AAL
 1

	)

101 
	#__ATM_LM_ATM
 2

	)

103 
	#__ATM_LM_PHY
 8

	)

104 
	#__ATM_LM_ANALOG
 16

	)

106 
	#__ATM_LM_MKLOC
(
n
Ë(“))

	)

107 
	#__ATM_LM_MKRMT
(
n
Ë(“Ë<< 8)

	)

109 
	#__ATM_LM_XTLOC
(
n
Ë(“Ë& 0xff)

	)

110 
	#__ATM_LM_XTRMT
(
n
Ë((“Ë>> 8Ë& 0xff)

	)

112 
	#ATM_LM_NONE
 0

	)

114 
	#ATM_LM_LOC_AAL
 
	`__ATM_LM_MKLOC
(
__ATM_LM_AAL
)

	)

115 
	#ATM_LM_LOC_ATM
 
	`__ATM_LM_MKLOC
(
__ATM_LM_ATM
)

	)

116 
	#ATM_LM_LOC_PHY
 
	`__ATM_LM_MKLOC
(
__ATM_LM_PHY
)

	)

117 
	#ATM_LM_LOC_ANALOG
 
	`__ATM_LM_MKLOC
(
__ATM_LM_ANALOG
)

	)

119 
	#ATM_LM_RMT_AAL
 
	`__ATM_LM_MKRMT
(
__ATM_LM_AAL
)

	)

120 
	#ATM_LM_RMT_ATM
 
	`__ATM_LM_MKRMT
(
__ATM_LM_ATM
)

	)

121 
	#ATM_LM_RMT_PHY
 
	`__ATM_LM_MKRMT
(
__ATM_LM_PHY
)

	)

122 
	#ATM_LM_RMT_ANALOG
 
	`__ATM_LM_MKRMT
(
__ATM_LM_ANALOG
)

	)

124 
	s©m_iobuf
 {

125 
	mÀngth
;

126 
__u£r
 *
	mbuf„r
;

129 
	#ATM_CI_MAX
 -1

	)

131 
	s©m_cú™ge
 {

132 sig√d 
	mvpi_bôs
;

133 sig√d 
	mvci_bôs
;

136 
	#ATM_SC_RX
 1024

	)

137 
	#ATM_SC_TX
 2048

	)

139 
	#ATM_BACKLOG_DEFAULT
 32

	)

141 
	#ATM_MF_IMMED
 1

	)

142 
	#ATM_MF_INC_RSV
 2

	)

143 
	#ATM_MF_INC_SHP
 4

	)

144 
	#ATM_MF_DEC_RSV
 8

	)

145 
	#ATM_MF_DEC_SHP
 16

	)

146 
	#ATM_MF_BWD
 32

	)

148 
	#ATM_MF_SET
 (
ATM_MF_INC_RSV
 | 
ATM_MF_INC_SHP
 | 
ATM_MF_DEC_RSV
 | 
ATM_MF_DEC_SHP
 | 
ATM_MF_BWD
)

	)

150 
	#ATM_VS_IDLE
 0

	)

151 
	#ATM_VS_CONNECTED
 1

	)

152 
	#ATM_VS_CLOSING
 2

	)

153 
	#ATM_VS_LISTEN
 3

	)

154 
	#ATM_VS_INUSE
 4

	)

155 
	#ATM_VS_BOUND
 5

	)

157 
	#ATM_VS2TXT_MAP
 "IDLE", "CONNECTED", "CLOSING", "LISTEN", "INUSE", "BOUND"

	)

159 
	#ATM_VF2TXT_MAP
 "ADDR", "READY", "PARTIAL", "REGIS", "RELEASED", "HASQOS", "LISTEN", "META", "256", "512", "1024", "2048", "SESSION", "HASSAP", "BOUND", "CLOSE"

	)

	@linux/atmioc.h

12 #i‚de‡
_LINUX_ATMIOC_H


13 
	#_LINUX_ATMIOC_H


	)

15 
	~<asm/io˘l.h
>

17 
	#ATMIOC_PHYCOM
 0x00

	)

18 
	#ATMIOC_PHYCOM_END
 0x0f

	)

19 
	#ATMIOC_PHYTYP
 0x10

	)

20 
	#ATMIOC_PHYTYP_END
 0x2f

	)

21 
	#ATMIOC_PHYPRV
 0x30

	)

22 
	#ATMIOC_PHYPRV_END
 0x4f

	)

23 
	#ATMIOC_SARCOM
 0x50

	)

24 
	#ATMIOC_SARCOM_END
 0x50

	)

25 
	#ATMIOC_SARPRV
 0x60

	)

26 
	#ATMIOC_SARPRV_END
 0x7f

	)

27 
	#ATMIOC_ITF
 0x80

	)

28 
	#ATMIOC_ITF_END
 0x8f

	)

29 
	#ATMIOC_BACKEND
 0x90

	)

30 
	#ATMIOC_BACKEND_END
 0xaf

	)

32 
	#ATMIOC_AREQUIPA
 0xc0

	)

33 
	#ATMIOC_LANE
 0xd0

	)

34 
	#ATMIOC_MPOA
 0xd8

	)

35 
	#ATMIOC_CLIP
 0xe0

	)

36 
	#ATMIOC_CLIP_END
 0xef

	)

37 
	#ATMIOC_SPECIAL
 0xf0

	)

38 
	#ATMIOC_SPECIAL_END
 0xff

	)

	@linux/atmppp.h

12 #i‚de‡
_LINUX_ATMPPP_H


13 
	#_LINUX_ATMPPP_H


	)

15 
	~<löux/©m.h
>

17 
	#PPPOATM_ENCAPS_AUTODETECT
 (0)

	)

18 
	#PPPOATM_ENCAPS_VC
 (1)

	)

19 
	#PPPOATM_ENCAPS_LLC
 (2)

	)

21 
	s©m_backíd_µp
 {

22 
©m_backíd_t
 
	mbackíd_num
;

23 
	míˇps
;

	@linux/atmsap.h

12 #i‚de‡
_LINUX_ATMSAP_H


13 
	#_LINUX_ATMSAP_H


	)

15 
	~<löux/©m≠i.h
>

17 
	#ATM_L2_NONE
 0

	)

18 
	#ATM_L2_ISO1745
 0x01

	)

19 
	#ATM_L2_Q291
 0x02

	)

20 
	#ATM_L2_X25_LL
 0x06

	)

21 
	#ATM_L2_X25_ML
 0x07

	)

22 
	#ATM_L2_LAPB
 0x08

	)

23 
	#ATM_L2_HDLC_ARM
 0x09

	)

24 
	#ATM_L2_HDLC_NRM
 0x0a

	)

25 
	#ATM_L2_HDLC_ABM
 0x0b

	)

26 
	#ATM_L2_ISO8802
 0x0c

	)

27 
	#ATM_L2_X75
 0x0d

	)

28 
	#ATM_L2_Q922
 0x0e

	)

29 
	#ATM_L2_USER
 0x10

	)

30 
	#ATM_L2_ISO7776
 0x11

	)

32 
	#ATM_L3_NONE
 0

	)

33 
	#ATM_L3_X25
 0x06

	)

34 
	#ATM_L3_ISO8208
 0x07

	)

35 
	#ATM_L3_X223
 0x08

	)

36 
	#ATM_L3_ISO8473
 0x09

	)

37 
	#ATM_L3_T70
 0x0a

	)

38 
	#ATM_L3_TR9577
 0x0b

	)

39 
	#ATM_L3_H310
 0x0c

	)

40 
	#ATM_L3_H321
 0x0d

	)

41 
	#ATM_L3_USER
 0x10

	)

43 
	#ATM_HL_NONE
 0

	)

44 
	#ATM_HL_ISO
 0x01

	)

45 
	#ATM_HL_USER
 0x02

	)

46 
	#ATM_HL_HLP
 0x03

	)

47 
	#ATM_HL_VENDOR
 0x04

	)

49 
	#ATM_IMD_NONE
 0

	)

50 
	#ATM_IMD_NORMAL
 1

	)

51 
	#ATM_IMD_EXTENDED
 2

	)

53 
	#ATM_TT_NONE
 0

	)

54 
	#ATM_TT_RX
 1

	)

55 
	#ATM_TT_TX
 2

	)

56 
	#ATM_TT_RXTX
 3

	)

58 
	#ATM_MC_NONE
 0

	)

59 
	#ATM_MC_TS
 1

	)

60 
	#ATM_MC_TS_FEC
 2

	)

61 
	#ATM_MC_PS
 3

	)

62 
	#ATM_MC_PS_FEC
 4

	)

63 
	#ATM_MC_H221
 5

	)

65 
	#ATM_MAX_HLI
 8

	)

67 
	s©m_bŒi
 {

68 
	ml2_¥Ÿo
;

71 
	mmode
;

73 
	mwödow
;

74 } 
	môu
;

75 
	mu£r
;

76 } 
	ml2
;

77 
	ml3_¥Ÿo
;

80 
	mmode
;

82 
	mdef_size
;

84 
	mwödow
;

85 } 
	môu
;

86 
	mu£r
;

88 
	mãrm_ty≥
;

89 
	mfw_mpx_ˇp
;

91 
	mbw_mpx_ˇp
;

93 } 
	mh310
;

95 
	mùi
;

96 
	m¢≠
[5];

98 } 
	må9577
;

99 } 
	ml3
;

100 } 
	g__ATM_API_ALIGN
;

102 
	s©m_bhli
 {

103 
	mhl_ty≥
;

104 
	mhl_Àngth
;

106 
	mhl_öfo
[
ATM_MAX_HLI
];

109 
	#ATM_MAX_BLLI
 3

	)

111 
	s©m_ßp
 {

112 
©m_bhli
 
	mbhli
;

113 
©m_bŒi
 
	mbŒi
[
ATM_MAX_BLLI
] 
	m__ATM_API_ALIGN
;

	@linux/attribute_container.h

12 #i‚de‡
_ATTRIBUTE_CONTAINER_H_


13 
	#_ATTRIBUTE_CONTAINER_H_


	)

15 
	~<löux/devi˚.h
>

16 
	~<löux/li°.h
>

17 
	~<löux/kli°.h
>

18 
	~<löux/•ölock.h
>

20 
	s©åibuã_c⁄èöî
 {

21 
li°_hód
 
	mnode
;

22 
kli°
 
	mc⁄èöîs
;

23 
˛ass
 *
	m˛ass
;

24 
˛ass_devi˚_©åibuã
 **
	m©ås
;

25 (*
	mm©ch
)(
	m©åibuã_c⁄èöî
 *, 
	mdevi˚
 *);

26 
	#ATTRIBUTE_CONTAINER_NO_CLASSDEVS
 0x01

	)

27 
	mÊags
;

30 
©åibuã_c⁄èöî
 *
©åibuã_c⁄èöî_˛assdev_to_c⁄èöî
(
˛ass_devi˚
 *);

31 
˛ass_devi˚
 *
©åibuã_c⁄èöî_föd_˛ass_devi˚
(
©åibuã_c⁄èöî
 *, 
devi˚
 *);

32 
˛ass_devi˚_©åibuã
 **
©åibuã_c⁄èöî_˛assdev_to_©ås
(c⁄° 
˛ass_devi˚
 *
˛assdev
);

	@linux/auto_fs.h

12 #i‚de‡
_LINUX_AUTO_FS_H


13 
	#_LINUX_AUTO_FS_H


	)

15 
	~<löux/io˘l.h
>

17 
	#AUTOFS_PROTO_VERSION
 3

	)

19 
	#AUTOFS_MAX_PROTO_VERSION
 
AUTOFS_PROTO_VERSION


	)

20 
	#AUTOFS_MIN_PROTO_VERSION
 
AUTOFS_PROTO_VERSION


	)

22 #i‡
deföed
(
__•¨c__
Ë|| deföed(
__mùs__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__powîpc__
Ë|| deföed(
__s390__
)

23 
	tautofs_wqt_t
;

25 
	tautofs_wqt_t
;

28 
	#autofs_±y≥_missög
 0

	)

29 
	#autofs_±y≥_expúe
 1

	)

31 
	sautofs_∑ckë_hdr
 {

32 
	m¥Ÿo_vîsi⁄
;

33 
	mty≥
;

36 
	sautofs_∑ckë_missög
 {

37 
autofs_∑ckë_hdr
 
	mhdr
;

38 
autofs_wqt_t
 
	mwaô_queue_tokí
;

39 
	mÀn
;

40 
	m«me
[
NAME_MAX
+1];

43 
	sautofs_∑ckë_expúe
 {

44 
autofs_∑ckë_hdr
 
	mhdr
;

45 
	mÀn
;

46 
	m«me
[
NAME_MAX
+1];

49 
	#AUTOFS_IOC_READY
 
	`_IO
(0x93,0x60)

	)

50 
	#AUTOFS_IOC_FAIL
 
	`_IO
(0x93,0x61)

	)

51 
	#AUTOFS_IOC_CATATONIC
 
	`_IO
(0x93,0x62)

	)

52 
	#AUTOFS_IOC_PROTOVER
 
	`_IOR
(0x93,0x63,)

	)

53 
	#AUTOFS_IOC_SETTIMEOUT
 
	`_IOWR
(0x93,0x64,)

	)

54 
	#AUTOFS_IOC_EXPIRE
 
	`_IOR
(0x93,0x65,
autofs_∑ckë_expúe
)

	)

	@linux/autoconf.h

12 #i‚de‡
LINUX_AUTOCONF_CRAP_GOES_HERE


13 
	#LINUX_AUTOCONF_CRAP_GOES_HERE


	)

15 
	#AUTOCONF_INCLUDED


	)

	@linux/auxvec.h

12 #i‚de‡
_LINUX_AUXVEC_H


13 
	#_LINUX_AUXVEC_H


	)

15 
	~<asm/auxvec.h
>

17 
	#AT_NULL
 0

	)

18 
	#AT_IGNORE
 1

	)

19 
	#AT_EXECFD
 2

	)

20 
	#AT_PHDR
 3

	)

21 
	#AT_PHENT
 4

	)

22 
	#AT_PHNUM
 5

	)

23 
	#AT_PAGESZ
 6

	)

24 
	#AT_BASE
 7

	)

25 
	#AT_FLAGS
 8

	)

26 
	#AT_ENTRY
 9

	)

27 
	#AT_NOTELF
 10

	)

28 
	#AT_UID
 11

	)

29 
	#AT_EUID
 12

	)

30 
	#AT_GID
 13

	)

31 
	#AT_EGID
 14

	)

32 
	#AT_PLATFORM
 15

	)

33 
	#AT_HWCAP
 16

	)

34 
	#AT_CLKTCK
 17

	)

36 
	#AT_SECURE
 23

	)

38 
	#AT_VECTOR_SIZE
 44

	)

	@linux/backing-dev.h

12 #i‚de‡
_LINUX_BACKING_DEV_H


13 
	#_LINUX_BACKING_DEV_H


	)

15 
	~<asm/©omic.h
>

17 
	ebdi_°©e
 {

18 
	mBDI_pdÊush
,

19 
	mBDI_wrôe_c⁄ge°ed
,

20 
	mBDI_ªad_c⁄ge°ed
,

21 
	mBDI_unu£d
,

24 (
	tc⁄ge°ed_‚
)(*, );

26 
	sbackög_dev_öfo
 {

27 
ø_∑ges
;

28 
°©e
;

29 
ˇ∑bûôõs
;

30 
c⁄ge°ed_‚
 *congested_fn;

31 *
c⁄ge°ed_d©a
;

32 (*
u≈lug_io_‚
)(
backög_dev_öfo
 *, 
∑ge
 *);

33 *
u≈lug_io_d©a
;

36 
	#BDI_CAP_NO_ACCT_DIRTY
 0x00000001

	)

37 
	#BDI_CAP_NO_WRITEBACK
 0x00000002

	)

38 
	#BDI_CAP_MAP_COPY
 0x00000004

	)

39 
	#BDI_CAP_MAP_DIRECT
 0x00000008

	)

40 
	#BDI_CAP_READ_MAP
 0x00000010

	)

41 
	#BDI_CAP_WRITE_MAP
 0x00000020

	)

42 
	#BDI_CAP_EXEC_MAP
 0x00000040

	)

43 
	#BDI_CAP_VMFLAGS
 (
BDI_CAP_READ_MAP
 | 
BDI_CAP_WRITE_MAP
 | 
BDI_CAP_EXEC_MAP
)

	)

45 #i‡
	`deföed
(
VM_MAYREAD
Ë&& 
BDI_CAP_READ_MAP
 !(VM_MAYREAD || 
BDI_CAP_WRITE_MAP
 !(
VM_MAYWRITE
 || 
BDI_CAP_EXEC_MAP
 !
VM_MAYEXEC
))

46 #îr‹ 
∂ó£
 
ch™ge
 
backög_dev_öfo
::
ˇ∑bûôõs
 
Êags


49 
	#bdi_ˇp_wrôeback_dúty
(
bdi
Ë(!((bdi)->
ˇ∑bûôõs
 & 
BDI_CAP_NO_WRITEBACK
))

	)

50 
	#bdi_ˇp_accou¡_dúty
(
bdi
Ë(!((bdi)->
ˇ∑bûôõs
 & 
BDI_CAP_NO_ACCT_DIRTY
))

	)

51 
	#m≠pög_ˇp_wrôeback_dúty
(
m≠pög
Ë
	`bdi_ˇp_wrôeback_dúty
((m≠pög)->
backög_dev_öfo
)

	)

52 
	#m≠pög_ˇp_accou¡_dúty
(
m≠pög
Ë
	`bdi_ˇp_accou¡_dúty
((m≠pög)->
backög_dev_öfo
)

	)

	@linux/binder.h

12 #i‚de‡
_LINUX_BINDER_H


13 
	#_LINUX_BINDER_H


	)

15 
	~<löux/io˘l.h
>

17 
	#B_PACK_CHARS
(
c1
, 
c2
, 
c3
, 
c4
Ë((((c1)<<24)Ë| (((c2)<<16)Ë| (((c3)<<8)Ë| (c4))

	)

18 
	#B_TYPE_LARGE
 0x85

	)

21 
	mBINDER_TYPE_BINDER
 = 
B_PACK_CHARS
('s', 'b', '*', 
B_TYPE_LARGE
),

22 
	mBINDER_TYPE_WEAK_BINDER
 = 
B_PACK_CHARS
('w', 'b', '*', 
B_TYPE_LARGE
),

23 
	mBINDER_TYPE_HANDLE
 = 
B_PACK_CHARS
('s', 'h', '*', 
B_TYPE_LARGE
),

24 
	mBINDER_TYPE_WEAK_HANDLE
 = 
B_PACK_CHARS
('w', 'h', '*', 
B_TYPE_LARGE
),

25 
	mBINDER_TYPE_FD
 = 
B_PACK_CHARS
('f', 'd', '*', 
B_TYPE_LARGE
),

29 
	mFLAT_BINDER_FLAG_PRIORITY_MASK
 = 0xff,

30 
	mFLAT_BINDER_FLAG_ACCEPTS_FDS
 = 0x100,

33 
	sÊ©_bödî_obje˘
 {

35 
	mty≥
;

36 
	mÊags
;

39 *
	mbödî
;

40 sig√d 
	mh™dÀ
;

43 *
	mcookõ
;

46 
	sbödî_wrôe_ªad
 {

47 sig√d 
	mwrôe_size
;

48 sig√d 
	mwrôe_c⁄sumed
;

49 
	mwrôe_buf„r
;

50 sig√d 
	mªad_size
;

51 sig√d 
	mªad_c⁄sumed
;

52 
	mªad_buf„r
;

55 
	sbödî_vîsi⁄
 {

57 sig√d 
	m¥Ÿocﬁ_vîsi⁄
;

60 
	#BINDER_CURRENT_PROTOCOL_VERSION
 7

	)

62 
	#BINDER_WRITE_READ
 
	`_IOWR
('b', 1, 
bödî_wrôe_ªad
)

	)

63 
	#BINDER_SET_IDLE_TIMEOUT
 
	`_IOW
('b', 3, 
öt64_t
)

	)

64 
	#BINDER_SET_MAX_THREADS
 
	`_IOW
('b', 5, 
size_t
)

	)

65 
	#BINDER_SET_IDLE_PRIORITY
 
	`_IOW
('b', 6, )

	)

66 
	#BINDER_SET_CONTEXT_MGR
 
	`_IOW
('b', 7, )

	)

67 
	#BINDER_THREAD_EXIT
 
	`_IOW
('b', 8, )

	)

68 
	#BINDER_VERSION
 
	`_IOWR
('b', 9, 
bödî_vîsi⁄
)

	)

70 
	eå™ß˘i⁄_Êags
 {

71 
	mTF_ONE_WAY
 = 0x01,

72 
	mTF_ROOT_OBJECT
 = 0x04,

73 
	mTF_STATUS_CODE
 = 0x08,

74 
	mTF_ACCEPT_FDS
 = 0x10,

77 
	sbödî_å™ß˘i⁄_d©a
 {

80 
size_t
 
	mh™dÀ
;

81 *
	m±r
;

82 } 
	mèrgë
;

83 *
	mcookõ
;

84 
	mcode
;

86 
	mÊags
;

87 
pid_t
 
	m£ndî_pid
;

88 
uid_t
 
	m£ndî_euid
;

89 
size_t
 
	md©a_size
;

90 
size_t
 
	moff£ts_size
;

95 c⁄° *
	mbuf„r
;

97 c⁄° *
	moff£ts
;

98 } 
	m±r
;

99 
uöt8_t
 
	mbuf
[8];

100 } 
	md©a
;

103 
	sbödî_±r_cookõ
 {

104 *
	m±r
;

105 *
	mcookõ
;

108 
	sbödî_¥i_desc
 {

109 
	m¥i‹ôy
;

110 
	mdesc
;

113 
	sbödî_¥i_±r_cookõ
 {

114 
	m¥i‹ôy
;

115 *
	m±r
;

116 *
	mcookõ
;

119 
	eBödîDrivîRëu∫PrŸocﬁ
 {

120 
	mBR_ERROR
 = 
_IOR_BAD
('r', 0, ),

122 
	mBR_OK
 = 
_IO
('r', 1),

124 
	mBR_TRANSACTION
 = 
_IOR_BAD
('r', 2, 
bödî_å™ß˘i⁄_d©a
),

125 
	mBR_REPLY
 = 
_IOR_BAD
('r', 3, 
bödî_å™ß˘i⁄_d©a
),

127 
	mBR_ACQUIRE_RESULT
 = 
_IOR_BAD
('r', 4, ),

129 
	mBR_DEAD_REPLY
 = 
_IO
('r', 5),

131 
	mBR_TRANSACTION_COMPLETE
 = 
_IO
('r', 6),

133 
	mBR_INCREFS
 = 
_IOR_BAD
('r', 7, 
bödî_±r_cookõ
),

134 
	mBR_ACQUIRE
 = 
_IOR_BAD
('r', 8, 
bödî_±r_cookõ
),

135 
	mBR_RELEASE
 = 
_IOR_BAD
('r', 9, 
bödî_±r_cookõ
),

136 
	mBR_DECREFS
 = 
_IOR_BAD
('r', 10, 
bödî_±r_cookõ
),

138 
	mBR_ATTEMPT_ACQUIRE
 = 
_IOR_BAD
('r', 11, 
bödî_¥i_±r_cookõ
),

140 
	mBR_NOOP
 = 
_IO
('r', 12),

142 
	mBR_SPAWN_LOOPER
 = 
_IO
('r', 13),

144 
	mBR_FINISHED
 = 
_IO
('r', 14),

146 
	mBR_DEAD_BINDER
 = 
_IOR_BAD
('r', 15, *),

148 
	mBR_CLEAR_DEATH_NOTIFICATION_DONE
 = 
_IOR_BAD
('r', 16, *),

150 
	mBR_FAILED_REPLY
 = 
_IO
('r', 17),

154 
	eBödîDrivîComm™dPrŸocﬁ
 {

155 
	mBC_TRANSACTION
 = 
_IOW_BAD
('c', 0, 
bödî_å™ß˘i⁄_d©a
),

156 
	mBC_REPLY
 = 
_IOW_BAD
('c', 1, 
bödî_å™ß˘i⁄_d©a
),

158 
	mBC_ACQUIRE_RESULT
 = 
_IOW_BAD
('c', 2, ),

160 
	mBC_FREE_BUFFER
 = 
_IOW_BAD
('c', 3, ),

162 
	mBC_INCREFS
 = 
_IOW_BAD
('c', 4, ),

163 
	mBC_ACQUIRE
 = 
_IOW_BAD
('c', 5, ),

164 
	mBC_RELEASE
 = 
_IOW_BAD
('c', 6, ),

165 
	mBC_DECREFS
 = 
_IOW_BAD
('c', 7, ),

167 
	mBC_INCREFS_DONE
 = 
_IOW_BAD
('c', 8, 
bödî_±r_cookõ
),

168 
	mBC_ACQUIRE_DONE
 = 
_IOW_BAD
('c', 9, 
bödî_±r_cookõ
),

170 
	mBC_ATTEMPT_ACQUIRE
 = 
_IOW_BAD
('c', 10, 
bödî_¥i_desc
),

172 
	mBC_REGISTER_LOOPER
 = 
_IO
('c', 11),

174 
	mBC_ENTER_LOOPER
 = 
_IO
('c', 12),

175 
	mBC_EXIT_LOOPER
 = 
_IO
('c', 13),

177 
	mBC_REQUEST_DEATH_NOTIFICATION
 = 
_IOW_BAD
('c', 14, 
bödî_±r_cookõ
),

179 
	mBC_CLEAR_DEATH_NOTIFICATION
 = 
_IOW_BAD
('c', 15, 
bödî_±r_cookõ
),

181 
	mBC_DEAD_BINDER_DONE
 = 
_IOW_BAD
('c', 16, *),

	@linux/binfmts.h

12 #i‚de‡
_LINUX_BINFMTS_H


13 
	#_LINUX_BINFMTS_H


	)

15 
	~<löux/ˇ∑bûôy.h
>

17 
	g±_ªgs
;

19 
	#MAX_ARG_PAGES
 32

	)

21 
	#BINPRM_BUF_SIZE
 128

	)

	@linux/bio.h

12 #i‚de‡
__LINUX_BIO_H


13 
	#__LINUX_BIO_H


	)

15 
	~<löux/highmem.h
>

16 
	~<löux/mempoﬁ.h
>

17 
	~<löux/i›rio.h
>

19 
	~<asm/io.h
>

21 #i‡
deföed
(
BIO_VMERGE_MAX_SIZE
Ë&& deföed(
BIO_VMERGE_BOUNDARY
)

22 
	#BIOVEC_VIRT_START_SIZE
(
x
Ë(
	`bvec_to_phys
(xË& (
BIO_VMERGE_BOUNDARY
 - 1))

	)

23 
	#BIOVEC_VIRT_OVERSIZE
(
x
Ë((xË> 
BIO_VMERGE_MAX_SIZE
)

	)

25 
	#BIOVEC_VIRT_START_SIZE
(
x
Ë0

	)

26 
	#BIOVEC_VIRT_OVERSIZE
(
x
Ë0

	)

29 #i‚de‡
BIO_VMERGE_BOUNDARY


30 
	#BIO_VMERGE_BOUNDARY
 0

	)

33 
	#BIO_DEBUG


	)

35 #ifde‡
BIO_DEBUG


36 
	#BIO_BUG_ON
 
BUG_ON


	)

38 
	#BIO_BUG_ON


	)

41 
	#BIO_MAX_PAGES
 256

	)

42 
	#BIO_MAX_SIZE
 (
BIO_MAX_PAGES
 << 
PAGE_CACHE_SHIFT
)

	)

43 
	#BIO_MAX_SECTORS
 (
BIO_MAX_SIZE
 >> 9)

	)

45 
	sbio_vec
 {

46 
∑ge
 *
	mbv_∑ge
;

47 
	mbv_Àn
;

48 
	mbv_off£t
;

51 
	gbio_£t
;

52 
	gbio
;

53 (
	tbio_íd_io_t
Ë(
	tbio
 *, , );

54 (
	tbio_de°ru˘‹_t
Ë(
	tbio
 *);

56 
	sbio
 {

57 
£˘‹_t
 
bi_£˘‹
;

58 
bio
 *
bi_√xt
;

59 
block_devi˚
 *
bi_bdev
;

60 
bi_Êags
;

61 
bi_rw
;

63 
bi_v˙t
;

64 
bi_idx
;

66 
bi_phys_£gmíts
;

68 
bi_hw_£gmíts
;

70 
bi_size
;

72 
bi_hw_‰⁄t_size
;

73 
bi_hw_back_size
;

75 
bi_max_vecs
;

77 
bio_vec
 *
bi_io_vec
;

79 
bio_íd_io_t
 *
bi_íd_io
;

80 
©omic_t
 
bi_˙t
;

82 *
bi_¥iv©e
;

84 
bio_de°ru˘‹_t
 *
bi_de°ru˘‹
;

87 
	#BIO_UPTODATE
 0

	)

88 
	#BIO_RW_BLOCK
 1

	)

89 
	#BIO_EOF
 2

	)

90 
	#BIO_SEG_VALID
 3

	)

91 
	#BIO_CLONED
 4

	)

92 
	#BIO_BOUNCED
 5

	)

93 
	#BIO_USER_MAPPED
 6

	)

94 
	#BIO_EOPNOTSUPP
 7

	)

95 
	#bio_Êagged
(
bio
, 
Êag
Ë((bio)->
bi_Êags
 & (1 << (Êag)))

	)

97 
	#BIO_POOL_BITS
 (4)

	)

98 
	#BIO_POOL_OFFSET
 (
BITS_PER_LONG
 - 
BIO_POOL_BITS
)

	)

99 
	#BIO_POOL_MASK
 (1UL << 
BIO_POOL_OFFSET
)

	)

100 
	#BIO_POOL_IDX
(
bio
Ë((bio)->
bi_Êags
 >> 
BIO_POOL_OFFSET
)

	)

102 
	#BIO_RW
 0

	)

103 
	#BIO_RW_AHEAD
 1

	)

104 
	#BIO_RW_BARRIER
 2

	)

105 
	#BIO_RW_FAILFAST
 3

	)

106 
	#BIO_RW_SYNC
 4

	)

108 
	#BIO_PRIO_SHIFT
 (8 * (Ë- 
IOPRIO_BITS
)

	)

109 
	#bio_¥io
(
bio
Ë((bio)->
bi_rw
 >> 
BIO_PRIO_SHIFT
)

	)

110 
	#bio_¥io_vÆid
(
bio
Ë
	`i›rio_vÆid
(
	`bio_¥io
(bio))

	)

112 
	#bio_£t_¥io
(
bio
, 
¥io
Ëdÿ{ 
	`WARN_ON
’riÿ>(1 << 
IOPRIO_BITS
)); (bio)->
bi_rw
 &((1UL << 
BIO_PRIO_SHIFT
Ë- 1); (bio)->bi_rw |((Ë’rioË<< BIO_PRIO_SHIFT); 
	}
} 0)

	)

114 
	#bio_iovec_idx
(
bio
, 
idx
Ë(&((bio)->
bi_io_vec
[(idx)]))

	)

115 
	#bio_iovec
(
bio
Ë
	`bio_iovec_idx
((bio), (bio)->
bi_idx
)

	)

116 
	#bio_∑ge
(
bio
Ë
	`bio_iovec
((bio))->
bv_∑ge


	)

117 
	#bio_off£t
(
bio
Ë
	`bio_iovec
((bio))->
bv_off£t


	)

118 
	#bio_£gmíts
(
bio
Ë((bio)->
bi_v˙t
 - (bio)->
bi_idx
)

	)

119 
	#bio_£˘‹s
(
bio
Ë((bio)->
bi_size
 >> 9)

	)

120 
	#bio_cur_£˘‹s
(
bio
Ë(
	`bio_iovec
(bio)->
bv_Àn
 >> 9)

	)

121 
	#bio_d©a
(
bio
Ë(
	`∑ge_addªss
(
	`bio_∑ge
((bio))Ë+ 
	`bio_off£t
((bio)))

	)

122 
	#bio_b¨rõr
(
bio
Ë((bio)->
bi_rw
 & (1 << 
BIO_RW_BARRIER
))

	)

123 
	#bio_sync
(
bio
Ë((bio)->
bi_rw
 & (1 << 
BIO_RW_SYNC
))

	)

124 
	#bio_ÁûÁ°
(
bio
Ë((bio)->
bi_rw
 & (1 << 
BIO_RW_FAILFAST
))

	)

125 
	#bio_rw_ahód
(
bio
Ë((bio)->
bi_rw
 & (1 << 
BIO_RW_AHEAD
))

	)

127 
	#bio_to_phys
(
bio
Ë(
	`∑ge_to_phys
(
	`bio_∑ge
((bio))Ë+ (Ë
	`bio_off£t
((bio)))

	)

128 
	#bvec_to_phys
(
bv
Ë(
	`∑ge_to_phys
((bv)->
bv_∑ge
Ë+ (Ë(bv)->
bv_off£t
)

	)

130 
	#__bio_km≠_©omic
(
bio
, 
idx
, 
kmty≥
Ë(
	`km≠_©omic
(
	`bio_iovec_idx
((bio), (idx))->
bv_∑ge
, kmty≥Ë+ bio_iovec_idx((bio), (idx))->
bv_off£t
)

	)

132 
	#__bio_kunm≠_©omic
(
addr
, 
kmty≥
Ë
	`kunm≠_©omic
◊ddr, kmty≥)

	)

134 
	#__BVEC_END
(
bio
Ë
	`bio_iovec_idx
((bio), (bio)->
bi_v˙t
 - 1)

	)

135 
	#__BVEC_START
(
bio
Ë
	`bio_iovec_idx
((bio), (bio)->
bi_idx
)

	)

137 #i‚de‡
BIOVEC_PHYS_MERGEABLE


138 
	#BIOVEC_PHYS_MERGEABLE
(
vec1
, 
vec2
Ë((
	`bvec_to_phys
((vec1)Ë+ (vec1)->
bv_Àn
Ë=bvec_to_phys((vec2)))

	)

141 
	#BIOVEC_VIRT_MERGEABLE
(
vec1
, 
vec2
Ë((((
	`bvec_to_phys
((vec1)Ë+ (vec1)->
bv_Àn
Ë| bvec_to_phys((vec2))Ë& (
BIO_VMERGE_BOUNDARY
 - 1)Ë=0)

	)

142 
	#__BIO_SEG_BOUNDARY
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1Ë| (mask)Ë=((◊ddr2Ë- 1Ë| (mask)))

	)

143 
	#BIOVEC_SEG_BOUNDARY
(
q
, 
b1
, 
b2
Ë
	`__BIO_SEG_BOUNDARY
(
	`bvec_to_phys
((b1)), bvec_to_phys((b2)Ë+ (b2)->
bv_Àn
, (q)->
£g_bound¨y_mask
)

	)

144 
	#BIO_SEG_BOUNDARY
(
q
, 
b1
, 
b2
Ë
	`BIOVEC_SEG_BOUNDARY
((q), 
	`__BVEC_END
((b1)), 
	`__BVEC_START
((b2)))

	)

146 
	#bio_io_îr‹
(
bio
, 
byãs
Ë
	`bio_ídio
((bio), (byãs), -
EIO
)

	)

148 
	#__bio_f‹_óch_£gmít
(
bvl
, 
bio
, 
i
, 
°¨t_idx
Ëbv»
	`bio_iovec_idx
((bio), (°¨t_idx)), i = (°¨t_idx); i < (bio)->
bi_v˙t
; bvl++, i++)

	)

150 
	#bio_f‹_óch_£gmít
(
bvl
, 
bio
, 
i
Ë
	`__bio_f‹_óch_£gmít
(bvl, bio, i, (bio)->
bi_idx
)

	)

152 
	#bio_gë
(
bio
Ë
	`©omic_öc
(&(bio)->
bi_˙t
)

	)

154 
	sbio_∑ú
 {

155 
bio
 
	mbio1
, 
	mbio2
;

156 
bio_vec
 
	mbv1
, 
	mbv2
;

157 
©omic_t
 
	m˙t
;

158 
	mîr‹
;

161 
	gªque°_queue
;

163 
	gsg_iovec
;

165 
	#bvec_km≠_úq
(
bvec
, 
Êags
Ë(
	`∑ge_addªss
((bvec)->
bv_∑ge
Ë+ (bvec)->
bv_off£t
)

	)

166 
	#bvec_kunm≠_úq
(
buf
, 
Êags
Ëdÿ{ *(ÊagsË0; } 0)

	)

168 
	#__bio_kunm≠_úq
(
buf
, 
Êags
Ë
	`bvec_kunm≠_úq
(buf, fœgs)

	)

169 
	#bio_km≠_úq
(
bio
, 
Êags
Ë
	`__bio_km≠_úq
((bio), (bio)->
bi_idx
, (Êags))

	)

170 
	#bio_kunm≠_úq
(
buf
,
Êags
Ë
	`__bio_kunm≠_úq
(buf, fœgs)

	)

	@linux/bitmap.h

12 #i‚de‡
__LINUX_BITMAP_H


13 
	#__LINUX_BITMAP_H


	)

15 #i‚de‡
__ASSEMBLY__


17 
	~<löux/ty≥s.h
>

18 
	~<löux/bô›s.h
>

19 
	~<löux/°rög.h
>

21 
	#BITMAP_LAST_WORD_MASK
(
nbôs
Ë–(“bôsË% 
BITS_PER_LONG
Ë? (1UL<<(“bôsË% BITS_PER_LONG))-1 : ~0UL )

	)

	@linux/bitops.h

12 #i‚de‡
_LINUX_BITOPS_H


13 
	#_LINUX_BITOPS_H


	)

14 
	~<asm/ty≥s.h
>

16 
	~<asm/bô›s.h
>

	@linux/blkdev.h

12 #i‚de‡
_LINUX_BLKDEV_H


13 
	#_LINUX_BLKDEV_H


	)

15 
	~<löux/maj‹.h
>

16 
	~<löux/gíhd.h
>

17 
	~<löux/li°.h
>

18 
	~<löux/timî.h
>

19 
	~<löux/w‹kqueue.h
>

20 
	~<löux/∑gem≠.h
>

21 
	~<löux/backög-dev.h
>

22 
	~<löux/waô.h
>

23 
	~<löux/mempoﬁ.h
>

24 
	~<löux/bio.h
>

25 
	~<löux/moduÀ.h
>

26 
	~<löux/°rögify.h
>

28 
	~<asm/sˇâîli°.h
>

30 
	gscsi_io˘l_comm™d
;

32 
	gªque°_queue
;

33 
ªque°_queue
 
	tªque°_queue_t
;

34 
	gñev©‹_queue
;

35 
ñev©‹_queue
 
	tñev©‹_t
;

36 
	gªque°_pm_°©e
;

37 
	gblk_åa˚
;

39 
	#BLKDEV_MIN_RQ
 4

	)

40 
	#BLKDEV_MAX_RQ
 128

	)

42 
	sas_io_c⁄ãxt
 {

43 
•ölock_t
 
	mlock
;

45 (*
	mdt‹
)(
as_io_c⁄ãxt
 *
	maic
);

46 (*
	mexô
)(
as_io_c⁄ãxt
 *
	maic
);

48 
	m°©e
;

49 
©omic_t
 
	mƒ_queued
;

50 
©omic_t
 
	mƒ_di•©ched
;

52 
	mœ°_íd_ªque°
;

53 
	mâime_tŸÆ
;

54 
	mâime_ßm∂es
;

55 
	mâime_món
;

57 
	m£ek_ßm∂es
;

58 
£˘‹_t
 
	mœ°_ªque°_pos
;

59 
u64
 
	m£ek_tŸÆ
;

60 
£˘‹_t
 
	m£ek_món
;

63 
	gcfq_queue
;

64 
	scfq_io_c⁄ãxt
 {

65 
rb_node
 
	mrb_node
;

66 *
	mkey
;

68 
cfq_queue
 *
	mcfqq
[2];

70 
io_c⁄ãxt
 *
	mioc
;

72 
	mœ°_íd_ªque°
;

73 
£˘‹_t
 
	mœ°_ªque°_pos
;

74 
	mœ°_queue
;

76 
	mâime_tŸÆ
;

77 
	mâime_ßm∂es
;

78 
	mâime_món
;

80 
	m£ek_ßm∂es
;

81 
u64
 
	m£ek_tŸÆ
;

82 
£˘‹_t
 
	m£ek_món
;

84 
li°_hód
 
	mqueue_li°
;

86 (*
	mdt‹
)(
	mio_c⁄ãxt
 *);

87 (*
	mexô
)(
	mio_c⁄ãxt
 *);

90 
	sio_c⁄ãxt
 {

91 
©omic_t
 
	mªfcou¡
;

92 
èsk_°ru˘
 *
	mèsk
;

94 (*
	m£t_i›rio
)(
	mio_c⁄ãxt
 *, );

96 
	mœ°_waôed
;

97 
	mƒ_b©ch_ªque°s
;

99 
as_io_c⁄ãxt
 *
	maic
;

100 
rb_roŸ
 
	mcic_roŸ
;

103 
io_c⁄ãxt
 *
cuºít_io_c⁄ãxt
(
gÂ_t
 
gÂ_Êags
);

104 
io_c⁄ãxt
 *
gë_io_c⁄ãxt
(
gÂ_t
 
gÂ_Êags
);

106 
	gªque°
;

107 (
	trq_íd_io_‚
)(
	tªque°
 *, );

109 
	sªque°_li°
 {

110 
cou¡
[2];

111 
°¨ved
[2];

112 
ñv¥iv
;

113 
mempoﬁ_t
 *
rq_poﬁ
;

114 
waô_queue_hód_t
 
waô
[2];

117 
	#BLK_MAX_CDB
 16

	)

119 
	sªque°
 {

120 
li°_hód
 
queuñi°
;

121 
li°_hód
 
d⁄ñi°
;

123 
Êags
;

125 
£˘‹_t
 
£˘‹
;

126 
ƒ_£˘‹s
;

128 
cuºít_ƒ_£˘‹s
;

130 
£˘‹_t
 
h¨d_£˘‹
;

131 
h¨d_ƒ_£˘‹s
;

133 
h¨d_cur_£˘‹s
;

135 
bio
 *bio;

136 
bio
 *
biŸaû
;

138 *
ñev©‹_¥iv©e
;

139 *
com∂ëi⁄_d©a
;

141 
rq_°©us
;

142 
îr‹s
;

143 
gídisk
 *
rq_disk
;

144 
°¨t_time
;

146 
ƒ_phys_£gmíts
;

148 
ƒ_hw_£gmíts
;

150 
i›rio
;

152 
èg
;

154 
ªf_cou¡
;

155 
ªque°_queue_t
 *
q
;

156 
ªque°_li°
 *
æ
;

158 
com∂ëi⁄
 *
waôög
;

159 *
•ecül
;

160 *
buf„r
;

162 
cmd_Àn
;

163 
cmd
[
BLK_MAX_CDB
];

165 
d©a_Àn
;

166 
£n£_Àn
;

167 *
d©a
;

168 *
£n£
;

170 
timeout
;

171 
ªåõs
;

173 
rq_íd_io_‚
 *
íd_io
;

174 *
íd_io_d©a
;

177 
	erq_Êag_bôs
 {

178 
__REQ_RW
,

179 
__REQ_FAILFAST
,

180 
__REQ_SORTED
,

181 
__REQ_SOFTBARRIER
,

182 
__REQ_HARDBARRIER
,

183 
__REQ_FUA
,

184 
__REQ_CMD
,

185 
__REQ_NOMERGE
,

186 
__REQ_STARTED
,

187 
__REQ_DONTPREP
,

188 
__REQ_QUEUED
,

189 
__REQ_ELVPRIV
,

191 
__REQ_PC
,

192 
__REQ_BLOCK_PC
,

193 
__REQ_SENSE
,

195 
__REQ_FAILED
,

196 
__REQ_QUIET
,

197 
__REQ_SPECIAL
,

198 
__REQ_DRIVE_CMD
,

199 
__REQ_DRIVE_TASK
,

200 
__REQ_DRIVE_TASKFILE
,

201 
__REQ_PREEMPT
,

202 
__REQ_PM_SUSPEND
,

203 
__REQ_PM_RESUME
,

204 
__REQ_PM_SHUTDOWN
,

205 
__REQ_ORDERED_COLOR
,

206 
__REQ_RW_SYNC
,

207 
__REQ_NR_BITS
,

210 
	#REQ_RW
 (1 << 
__REQ_RW
)

	)

211 
	#REQ_FAILFAST
 (1 << 
__REQ_FAILFAST
)

	)

212 
	#REQ_SORTED
 (1 << 
__REQ_SORTED
)

	)

213 
	#REQ_SOFTBARRIER
 (1 << 
__REQ_SOFTBARRIER
)

	)

214 
	#REQ_HARDBARRIER
 (1 << 
__REQ_HARDBARRIER
)

	)

215 
	#REQ_FUA
 (1 << 
__REQ_FUA
)

	)

216 
	#REQ_CMD
 (1 << 
__REQ_CMD
)

	)

217 
	#REQ_NOMERGE
 (1 << 
__REQ_NOMERGE
)

	)

218 
	#REQ_STARTED
 (1 << 
__REQ_STARTED
)

	)

219 
	#REQ_DONTPREP
 (1 << 
__REQ_DONTPREP
)

	)

220 
	#REQ_QUEUED
 (1 << 
__REQ_QUEUED
)

	)

221 
	#REQ_ELVPRIV
 (1 << 
__REQ_ELVPRIV
)

	)

222 
	#REQ_PC
 (1 << 
__REQ_PC
)

	)

223 
	#REQ_BLOCK_PC
 (1 << 
__REQ_BLOCK_PC
)

	)

224 
	#REQ_SENSE
 (1 << 
__REQ_SENSE
)

	)

225 
	#REQ_FAILED
 (1 << 
__REQ_FAILED
)

	)

226 
	#REQ_QUIET
 (1 << 
__REQ_QUIET
)

	)

227 
	#REQ_SPECIAL
 (1 << 
__REQ_SPECIAL
)

	)

228 
	#REQ_DRIVE_CMD
 (1 << 
__REQ_DRIVE_CMD
)

	)

229 
	#REQ_DRIVE_TASK
 (1 << 
__REQ_DRIVE_TASK
)

	)

230 
	#REQ_DRIVE_TASKFILE
 (1 << 
__REQ_DRIVE_TASKFILE
)

	)

231 
	#REQ_PREEMPT
 (1 << 
__REQ_PREEMPT
)

	)

232 
	#REQ_PM_SUSPEND
 (1 << 
__REQ_PM_SUSPEND
)

	)

233 
	#REQ_PM_RESUME
 (1 << 
__REQ_PM_RESUME
)

	)

234 
	#REQ_PM_SHUTDOWN
 (1 << 
__REQ_PM_SHUTDOWN
)

	)

235 
	#REQ_ORDERED_COLOR
 (1 << 
__REQ_ORDERED_COLOR
)

	)

236 
	#REQ_RW_SYNC
 (1 << 
__REQ_RW_SYNC
)

	)

238 
	sªque°_pm_°©e


241 
pm_°ï
;

243 
u32
 
pm_°©e
;

244 * 
d©a
;

247 
	~<löux/ñev©‹.h
>

249 (
	tmîge_ªque°_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *,

250 
	tbio
 *);

251 (
	tmîge_ªque°s_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *,

252 
	tªque°
 *);

253 (
	tªque°_‚_¥oc
Ë(
	tªque°_queue_t
 *
	tq
);

254 (
	tmake_ªque°_‚
Ë(
	tªque°_queue_t
 *
	tq
, 
	tbio
 *bio);

255 (
	t¥ï_rq_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

256 (
	tu≈lug_‚
Ë(
	tªque°_queue_t
 *);

258 
bio_vec
;

259 (
	tmîge_bvec_‚
Ë(
	tªque°_queue_t
 *, 
	tbio
 *, 
	tbio_vec
 *);

260 (
	ta˘ivôy_‚
Ë(*
	td©a
, 
	trw
);

261 (
	tissue_Êush_‚
Ë(
	tªque°_queue_t
 *, 
	tgídisk
 *, 
	t£˘‹_t
 *);

262 (
	t¥ï¨e_Êush_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

263 (
	tso·úq_d⁄e_‚
)(
	tªque°
 *);

265 
	eblk_queue_°©e
 {

266 
Queue_down
,

267 
Queue_up
,

270 
	sblk_queue_èg
 {

271 
ªque°
 **
èg_ödex
;

272 *
èg_m≠
;

273 
li°_hód
 
busy_li°
;

274 
busy
;

275 
max_dïth
;

276 
ªÆ_max_dïth
;

277 
©omic_t
 
ªf˙t
;

280 
	sªque°_queue


283 
li°_hód
 
queue_hód
;

284 
ªque°
 *
œ°_mîge
;

285 
ñev©‹_t
 *
ñev©‹
;

287 
ªque°_li°
 
rq
;

289 
ªque°_‚_¥oc
 *
ªque°_‚
;

290 
mîge_ªque°_‚
 *
back_mîge_‚
;

291 
mîge_ªque°_‚
 *
‰⁄t_mîge_‚
;

292 
mîge_ªque°s_‚
 *merge_requests_fn;

293 
make_ªque°_‚
 *make_request_fn;

294 
¥ï_rq_‚
 *prep_rq_fn;

295 
u≈lug_‚
 *unplug_fn;

296 
mîge_bvec_‚
 *merge_bvec_fn;

297 
a˘ivôy_‚
 *activity_fn;

298 
issue_Êush_‚
 *issue_flush_fn;

299 
¥ï¨e_Êush_‚
 *prepare_flush_fn;

300 
so·úq_d⁄e_‚
 *softirq_done_fn;

302 
£˘‹_t
 
íd_£˘‹
;

303 
ªque°
 *
bound¨y_rq
;

305 
timî_li°
 
u≈lug_timî
;

306 
u≈lug_thªsh
;

307 
u≈lug_dñay
;

308 
w‹k_°ru˘
 
u≈lug_w‹k
;

310 
backög_dev_öfo
 backing_dev_info;

312 *
queued©a
;

314 *
a˘ivôy_d©a
;

316 
boun˚_p‚
;

317 
gÂ_t
 
boun˚_gÂ
;

319 
queue_Êags
;

321 
•ölock_t
 
__queue_lock
;

322 
•ölock_t
 *
queue_lock
;

324 
kobje˘
 
kobj
;

326 
ƒ_ªque°s
;

327 
ƒ_c⁄ge°i⁄_⁄
;

328 
ƒ_c⁄ge°i⁄_off
;

329 
ƒ_b©chög
;

331 
max_£˘‹s
;

332 
max_hw_£˘‹s
;

333 
max_phys_£gmíts
;

334 
max_hw_£gmíts
;

335 
h¨d£˘_size
;

336 
max_£gmít_size
;

338 
£g_bound¨y_mask
;

339 
dma_Æignmít
;

341 
blk_queue_èg
 *
queue_ègs
;

343 
ƒ_s‹ãd
;

344 
ö_Êight
;

346 
sg_timeout
;

347 
sg_ª£rved_size
;

348 
node
;

350 
blk_åa˚
 *blk_trace;

352 
‹dîed
, 
√xt_‹dîed
, 
‹d£q
;

353 
‹dîr
, 
‹dcﬁ‹
;

354 
ªque°
 
¥e_Êush_rq
, 
b¨_rq
, 
po°_Êush_rq
;

355 
ªque°
 *
‹ig_b¨_rq
;

356 
bi_size
;

358 
muãx
 
sysfs_lock
;

361 
	#RQ_INACTIVE
 (-1)

	)

362 
	#RQ_ACTIVE
 1

	)

364 
	#QUEUE_FLAG_CLUSTER
 0

	)

365 
	#QUEUE_FLAG_QUEUED
 1

	)

366 
	#QUEUE_FLAG_STOPPED
 2

	)

367 
	#QUEUE_FLAG_READFULL
 3

	)

368 
	#QUEUE_FLAG_WRITEFULL
 4

	)

369 
	#QUEUE_FLAG_DEAD
 5

	)

370 
	#QUEUE_FLAG_REENTER
 6

	)

371 
	#QUEUE_FLAG_PLUGGED
 7

	)

372 
	#QUEUE_FLAG_ELVSWITCH
 8

	)

376 
QUEUE_ORDERED_NONE
 = 0x00,

377 
QUEUE_ORDERED_DRAIN
 = 0x01,

378 
QUEUE_ORDERED_TAG
 = 0x02,

380 
QUEUE_ORDERED_PREFLUSH
 = 0x10,

381 
QUEUE_ORDERED_POSTFLUSH
 = 0x20,

382 
QUEUE_ORDERED_FUA
 = 0x40,

384 
QUEUE_ORDERED_DRAIN_FLUSH
 = 
QUEUE_ORDERED_DRAIN
 |

385 
QUEUE_ORDERED_PREFLUSH
 | 
QUEUE_ORDERED_POSTFLUSH
,

386 
QUEUE_ORDERED_DRAIN_FUA
 = 
QUEUE_ORDERED_DRAIN
 |

387 
QUEUE_ORDERED_PREFLUSH
 | 
QUEUE_ORDERED_FUA
,

388 
QUEUE_ORDERED_TAG_FLUSH
 = 
QUEUE_ORDERED_TAG
 |

389 
QUEUE_ORDERED_PREFLUSH
 | 
QUEUE_ORDERED_POSTFLUSH
,

390 
QUEUE_ORDERED_TAG_FUA
 = 
QUEUE_ORDERED_TAG
 |

391 
QUEUE_ORDERED_PREFLUSH
 | 
QUEUE_ORDERED_FUA
,

393 
QUEUE_ORDSEQ_STARTED
 = 0x01,

394 
QUEUE_ORDSEQ_DRAIN
 = 0x02,

395 
QUEUE_ORDSEQ_PREFLUSH
 = 0x04,

396 
QUEUE_ORDSEQ_BAR
 = 0x08,

397 
QUEUE_ORDSEQ_POSTFLUSH
 = 0x10,

398 
QUEUE_ORDSEQ_DONE
 = 0x20,

401 
	#blk_queue_∂ugged
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_PLUGGED
, &(q)->
queue_Êags
)

	)

402 
	#blk_queue_ègged
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_QUEUED
, &(q)->
queue_Êags
)

	)

403 
	#blk_queue_°›≥d
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_STOPPED
, &(q)->
queue_Êags
)

	)

404 
	#blk_queue_Êushög
(
q
Ë((q)->
‹d£q
)

	)

406 
	#blk_fs_ªque°
(
rq
Ë(‘q)->
Êags
 & 
REQ_CMD
)

	)

407 
	#blk_pc_ªque°
(
rq
Ë(‘q)->
Êags
 & 
REQ_BLOCK_PC
)

	)

408 
	#blk_n‹ëry_ªque°
(
rq
Ë(‘q)->
Êags
 & 
REQ_FAILFAST
)

	)

409 
	#blk_rq_°¨ãd
(
rq
Ë(‘q)->
Êags
 & 
REQ_STARTED
)

	)

411 
	#blk_accou¡_rq
(
rq
Ë(
	`blk_rq_°¨ãd
‘qË&& 
	`blk_fs_ªque°
‘q))

	)

413 
	#blk_pm_su•íd_ªque°
(
rq
Ë(‘q)->
Êags
 & 
REQ_PM_SUSPEND
)

	)

414 
	#blk_pm_ªsume_ªque°
(
rq
Ë(‘q)->
Êags
 & 
REQ_PM_RESUME
)

	)

415 
	#blk_pm_ªque°
(
rq
Ë(‘q)->
Êags
 & (
REQ_PM_SUSPEND
 | 
REQ_PM_RESUME
))

	)

417 
	#blk_s‹ãd_rq
(
rq
Ë(‘q)->
Êags
 & 
REQ_SORTED
)

	)

418 
	#blk_b¨rõr_rq
(
rq
Ë(‘q)->
Êags
 & 
REQ_HARDBARRIER
)

	)

419 
	#blk_fua_rq
(
rq
Ë(‘q)->
Êags
 & 
REQ_FUA
)

	)

421 
	#li°_íåy_rq
(
±r
Ë
	`li°_íåy
(’å), 
ªque°
, 
queuñi°
)

	)

423 
	#rq_d©a_dú
(
rq
Ë(‘q)->
Êags
 & 1)

	)

425 
	#RQ_NOMERGE_FLAGS
 (
REQ_NOMERGE
 | 
REQ_STARTED
 | 
REQ_HARDBARRIER
 | 
REQ_SOFTBARRIER
)

	)

426 
	#rq_mîgóbÀ
(
rq
Ë(!(‘q)->
Êags
 & 
RQ_NOMERGE_FLAGS
Ë&& 
	`blk_fs_ªque°
(‘q)))

	)

427 
	#blk_queue_hóda˘ive
(
q
, 
hód_a˘ive
)

	)

428 
	#BLKPREP_OK
 0

	)

429 
	#BLKPREP_KILL
 1

	)

430 
	#BLKPREP_DEFER
 2

	)

432 
	#BLK_BOUNCE_HIGH
 ((
u64
)
blk_max_low_p‚
 << 
PAGE_SHIFT
)

	)

433 
	#BLK_BOUNCE_ANY
 ((
u64
)
blk_max_p‚
 << 
PAGE_SHIFT
)

	)

434 
	#BLK_BOUNCE_ISA
 (
ISA_DMA_THRESHOLD
)

	)

436 
	#rq_f‹_óch_bio
(
_bio
, 
rq
Ëi‡(‘q->
bio
)Ë_biÿ‘q)->bio; _bio; _biÿ_bio->
bi_√xt
)

	)

438 
	#íd_io_îr‹
(
u±od©e
Ë(
	`u∆ikñy
((u±od©eË<0))

	)

440 
	#blk_queue_èg_dïth
(
q
Ë((q)->
queue_ègs
->
busy
)

	)

441 
	#blk_queue_èg_queue
(
q
Ë((q)->
queue_ègs
->
busy
 < (q)->queue_ègs->
max_dïth
)

	)

442 
	#blk_rq_ègged
(
rq
Ë(‘q)->
Êags
 & 
REQ_QUEUED
)

	)

444 
	#MAX_PHYS_SEGMENTS
 128

	)

445 
	#MAX_HW_SEGMENTS
 128

	)

446 
	#SAFE_MAX_SECTORS
 255

	)

447 
	#BLK_DEF_MAX_SECTORS
 1024

	)

449 
	#MAX_SEGMENT_SIZE
 65536

	)

451 
	#blkdev_íåy_to_ªque°
(
íåy
Ë
	`li°_íåy
(”¡ry), 
ªque°
, 
queuñi°
)

	)

453 
	#blk_föished_io
(
n£˘s
Ëdÿ{ 
	}
} 0)

	)

454 
	#blk_°¨ãd_io
(
n£˘s
Ëdÿ{ } 0)

	)

456 
	#£˘‹_div
(
n
, 
b
)–{ 
_ªs
; _ª†“Ë% (b); (nË/(b); _ªs; } )

	)

458 
	#MODULE_ALIAS_BLOCKDEV
(
maj‹
,
mö‹
Ë
	`MODULE_ALIAS
("block-maj‹-" 
	`__°rögify
(maj‹Ë"-" __°rögify(mö‹))

	)

459 
	#MODULE_ALIAS_BLOCKDEV_MAJOR
(
maj‹
Ë
	`MODULE_ALIAS
("block-maj‹-" 
	`__°rögify
(maj‹Ë"-*")

	)

	@linux/blkpg.h

12 #i‚de‡
_LINUX_BLKPG_H


13 
	#_LINUX_BLKPG_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/io˘l.h
>

18 
	#BLKPG
 
	`_IO
(0x12,105)

	)

20 
	sblkpg_io˘l_¨g
 {

21 
	m›
;

22 
	mÊags
;

23 
	md©Æí
;

24 
__u£r
 *
	md©a
;

27 
	#BLKPG_ADD_PARTITION
 1

	)

28 
	#BLKPG_DEL_PARTITION
 2

	)

30 
	#BLKPG_DEVNAMELTH
 64

	)

31 
	#BLKPG_VOLNAMELTH
 64

	)

33 
	sblkpg_∑πôi⁄
 {

34 
	m°¨t
;

35 
	mÀngth
;

36 
	m≤o
;

37 
	mdev«me
[
BLKPG_DEVNAMELTH
];

38 
	mvﬁ«me
[
BLKPG_VOLNAMELTH
];

	@linux/blockgroup_lock.h

12 #i‚de‡
_LINUX_BLOCKGROUP_LOCK_H


13 
	#_LINUX_BLOCKGROUP_LOCK_H


	)

15 
	~<löux/•ölock.h
>

16 
	~<löux/ˇche.h
>

18 
	#NR_BG_LOCKS
 1

	)

20 
	sbgl_lock
 {

21 
•ölock_t
 
	mlock
;

22 } 
	g____ˇchñöe_Æig√d_ö_smp
;

24 
	sblockgroup_lock
 {

25 
bgl_lock
 
	mlocks
[
NR_BG_LOCKS
];

28 
	#sb_bgl_lock
(
sb
, 
block_group
Ë(&(sb)->
s_blockgroup_lock
.
locks
[(block_groupË& (
NR_BG_LOCKS
-1)].
lock
)

	)

	@linux/byteorder/big_endian.h

12 #i‚de‡
_LINUX_BYTEORDER_BIG_ENDIAN_H


13 
	#_LINUX_BYTEORDER_BIG_ENDIAN_H


	)

15 #i‚de‡
__BIG_ENDIAN


16 
	#__BIG_ENDIAN
 4321

	)

18 #i‚de‡
__BIG_ENDIAN_BITFIELD


19 
	#__BIG_ENDIAN_BITFIELD


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/byã‹dî/swab.h
>

25 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__f‹˚
 
__be32
)(
__u32
)(x))

	)

26 
	#__c⁄°™t_¡ohl
(
x
Ë((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

27 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__f‹˚
 
__be16
)(
__u16
)(x))

	)

28 
	#__c⁄°™t_¡ohs
(
x
Ë((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

29 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)
	`___c⁄°™t_swab64
((x)))

	)

30 
	#__c⁄°™t_À64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

31 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)
	`___c⁄°™t_swab32
((x)))

	)

32 
	#__c⁄°™t_À32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

33 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)
	`___c⁄°™t_swab16
((x)))

	)

34 
	#__c⁄°™t_À16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

35 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)(
__u64
)(x))

	)

36 
	#__c⁄°™t_be64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

37 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)(
__u32
)(x))

	)

38 
	#__c⁄°™t_be32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

39 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)(
__u16
)(x))

	)

40 
	#__c⁄°™t_be16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

41 
	#__˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)
	`__swab64
((x)))

	)

42 
	#__À64_to_˝u
(
x
Ë
	`__swab64
((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

43 
	#__˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)
	`__swab32
((x)))

	)

44 
	#__À32_to_˝u
(
x
Ë
	`__swab32
((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

45 
	#__˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)
	`__swab16
((x)))

	)

46 
	#__À16_to_˝u
(
x
Ë
	`__swab16
((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

47 
	#__˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)(
__u64
)(x))

	)

48 
	#__be64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

49 
	#__˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)(
__u32
)(x))

	)

50 
	#__be32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

51 
	#__˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)(
__u16
)(x))

	)

52 
	#__be16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

54 
	#__˝u_to_À64s
(
x
Ë
	`__swab64s
((x))

	)

55 
	#__À64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

56 
	#__˝u_to_À32s
(
x
Ë
	`__swab32s
((x))

	)

57 
	#__À32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

58 
	#__˝u_to_À16s
(
x
Ë
	`__swab16s
((x))

	)

59 
	#__À16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

60 
	#__˝u_to_be64s
(
x
Ëdÿ{} 0)

	)

61 
	#__be64_to_˝us
(
x
Ëdÿ{} 0)

	)

62 
	#__˝u_to_be32s
(
x
Ëdÿ{} 0)

	)

63 
	#__be32_to_˝us
(
x
Ëdÿ{} 0)

	)

64 
	#__˝u_to_be16s
(
x
Ëdÿ{} 0)

	)

65 
	#__be16_to_˝us
(
x
Ëdÿ{} 0)

	)

66 
	~<löux/byã‹dî/gíîic.h
>

	@linux/byteorder/generic.h

12 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


13 
	#_LINUX_BYTEORDER_GENERIC_H


	)

	@linux/byteorder/little_endian.h

12 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


13 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

15 #i‚de‡
__LITTLE_ENDIAN


16 
	#__LITTLE_ENDIAN
 1234

	)

18 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


19 
	#__LITTLE_ENDIAN_BITFIELD


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/byã‹dî/swab.h
>

25 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__f‹˚
 
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

26 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__f‹˚
 
__be32
)(x))

	)

27 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__f‹˚
 
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

28 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__f‹˚
 
__be16
)(x))

	)

29 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)(
__u64
)(x))

	)

30 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

31 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)(
__u32
)(x))

	)

32 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

33 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)(
__u16
)(x))

	)

34 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

35 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

36 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

37 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

38 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

39 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

40 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

41 
	#__˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)(
__u64
)(x))

	)

42 
	#__À64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

43 
	#__˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)(
__u32
)(x))

	)

44 
	#__À32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

45 
	#__˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)(
__u16
)(x))

	)

46 
	#__À16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

47 
	#__˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)
	`__swab64
((x)))

	)

48 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

49 
	#__˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)
	`__swab32
((x)))

	)

50 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

51 
	#__˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)
	`__swab16
((x)))

	)

52 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

54 
	#__˝u_to_À64s
(
x
Ëdÿ{} 0)

	)

55 
	#__À64_to_˝us
(
x
Ëdÿ{} 0)

	)

56 
	#__˝u_to_À32s
(
x
Ëdÿ{} 0)

	)

57 
	#__À32_to_˝us
(
x
Ëdÿ{} 0)

	)

58 
	#__˝u_to_À16s
(
x
Ëdÿ{} 0)

	)

59 
	#__À16_to_˝us
(
x
Ëdÿ{} 0)

	)

60 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

61 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

62 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

63 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

64 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

65 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

66 
	~<löux/byã‹dî/gíîic.h
>

	@linux/byteorder/swab.h

12 #i‚de‡
_LINUX_BYTEORDER_SWAB_H


13 
	#_LINUX_BYTEORDER_SWAB_H


	)

15 
	~<löux/compûî.h
>

17 
	#___swab16
(
x
Ë({ 
__u16
 
__x
 = (x); ((__u16)–(((__u16)(__xË& (__u16)0x00ffUË<< 8Ë| (((__u16)(__xË& (__u16)0xff00UË>> 8Ë)); })

	)

19 
	#___swab32
(
x
Ë({ 
__u32
 
__x
 = (x); ((__u32)–(((__u32)(__xË& (__u32)0x000000ffULË<< 24Ë| (((__u32)(__xË& (__u32)0x0000ff00ULË<< 8Ë| (((__u32)(__xË& (__u32)0x00ff0000ULË>> 8Ë| (((__u32)(__xË& (__u32)0xff000000ULË>> 24Ë)); })

	)

21 
	#___swab64
(
x
Ë({ 
__u64
 
__x
 = (x); ((__u64)–(__u64)(((__u64)(__xË& (__u64)0x00000000000000ffULLË<< 56Ë| (__u64)(((__u64)(__xË& (__u64)0x000000000000ff00ULLË<< 40Ë| (__u64)(((__u64)(__xË& (__u64)0x0000000000ff0000ULLË<< 24Ë| (__u64)(((__u64)(__xË& (__u64)0x00000000ff000000ULLË<< 8Ë| (__u64)(((__u64)(__xË& (__u64)0x000000ff00000000ULLË>> 8Ë| (__u64)(((__u64)(__xË& (__u64)0x0000ff0000000000ULLË>> 24Ë| (__u64)(((__u64)(__xË& (__u64)0x00ff000000000000ULLË>> 40Ë| (__u64)(((__u64)(__xË& (__u64)0xff00000000000000ULLË>> 56Ë)); })

	)

23 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)–(((__u16)(xË& (__u16)0x00ffUË<< 8Ë| (((__u16)(xË& (__u16)0xff00UË>> 8Ë))

	)

24 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)–(((__u32)(xË& (__u32)0x000000ffULË<< 24Ë| (((__u32)(xË& (__u32)0x0000ff00ULË<< 8Ë| (((__u32)(xË& (__u32)0x00ff0000ULË>> 8Ë| (((__u32)(xË& (__u32)0xff000000ULË>> 24Ë))

	)

25 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)–(__u64)(((__u64)(xË& (__u64)0x00000000000000ffULLË<< 56Ë| (__u64)(((__u64)(xË& (__u64)0x000000000000ff00ULLË<< 40Ë| (__u64)(((__u64)(xË& (__u64)0x0000000000ff0000ULLË<< 24Ë| (__u64)(((__u64)(xË& (__u64)0x00000000ff000000ULLË<< 8Ë| (__u64)(((__u64)(xË& (__u64)0x000000ff00000000ULLË>> 8Ë| (__u64)(((__u64)(xË& (__u64)0x0000ff0000000000ULLË>> 24Ë| (__u64)(((__u64)(xË& (__u64)0x00ff000000000000ULLË>> 40Ë| (__u64)(((__u64)(xË& (__u64)0xff00000000000000ULLË>> 56Ë))

	)

27 #i‚de‡
__¨ch__swab16


28 
	#__¨ch__swab16
(
x
Ë({ 
__u16
 
__tmp
 = (xË; 
	`___swab16
(__tmp); })

	)

30 #i‚de‡
__¨ch__swab32


31 
	#__¨ch__swab32
(
x
Ë({ 
__u32
 
__tmp
 = (xË; 
	`___swab32
(__tmp); })

	)

33 #i‚de‡
__¨ch__swab64


34 
	#__¨ch__swab64
(
x
Ë({ 
__u64
 
__tmp
 = (xË; 
	`___swab64
(__tmp); })

	)

37 #i‚de‡
__¨ch__swab16p


38 
	#__¨ch__swab16p
(
x
Ë
	`__¨ch__swab16
(*(x))

	)

40 #i‚de‡
__¨ch__swab32p


41 
	#__¨ch__swab32p
(
x
Ë
	`__¨ch__swab32
(*(x))

	)

43 #i‚de‡
__¨ch__swab64p


44 
	#__¨ch__swab64p
(
x
Ë
	`__¨ch__swab64
(*(x))

	)

47 #i‚de‡
__¨ch__swab16s


48 
	#__¨ch__swab16s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab16p
((x)); } 0)

	)

50 #i‚de‡
__¨ch__swab32s


51 
	#__¨ch__swab32s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab32p
((x)); } 0)

	)

53 #i‚de‡
__¨ch__swab64s


54 
	#__¨ch__swab64s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab64p
((x)); } 0)

	)

57 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__OPTIMIZE__
)

58 
	#__swab16
(
x
Ë(
	`__buûtö_c⁄°™t_p
((
__u16
)(x)Ë? 
	`___swab16
((x)Ë: 
	`__fswab16
((x)))

	)

59 
	#__swab32
(
x
Ë(
	`__buûtö_c⁄°™t_p
((
__u32
)(x)Ë? 
	`___swab32
((x)Ë: 
	`__fswab32
((x)))

	)

60 
	#__swab64
(
x
Ë(
	`__buûtö_c⁄°™t_p
((
__u64
)(x)Ë? 
	`___swab64
((x)Ë: 
	`__fswab64
((x)))

	)

62 
	#__swab16
(
x
Ë
	`__fswab16
(x)

	)

63 
	#__swab32
(
x
Ë
	`__fswab32
(x)

	)

64 
	#__swab64
(
x
Ë
	`__fswab64
(x)

	)

67 #ifde‡
__BYTEORDER_HAS_U64__


68 #ifde‡
__SWAB_64_THRU_32__


	@linux/byteorder/swabb.h

12 #i‚de‡
_LINUX_BYTEORDER_SWABB_H


13 
	#_LINUX_BYTEORDER_SWABB_H


	)

15 
	#___swahw32
(
x
Ë({ 
__u32
 
__x
 = (x); ((__u32)–(((__u32)(__xË& (__u32)0x0000ffffULË<< 16Ë| (((__u32)(__xË& (__u32)0xffff0000ULË>> 16Ë)); })

	)

16 
	#___swahb32
(
x
Ë({ 
__u32
 
__x
 = (x); ((__u32)–(((__u32)(__xË& (__u32)0x00ff00ffULË<< 8Ë| (((__u32)(__xË& (__u32)0xff00ff00ULË>> 8Ë)); })

	)

18 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)–(((__u32)(xË& (__u32)0x0000ffffULË<< 16Ë| (((__u32)(xË& (__u32)0xffff0000ULË>> 16Ë))

	)

19 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)–(((__u32)(xË& (__u32)0x00ff00ffULË<< 8Ë| (((__u32)(xË& (__u32)0xff00ff00ULË>> 8Ë))

	)

21 #i‚de‡
__¨ch__swahw32


22 
	#__¨ch__swahw32
(
x
Ë
	`___swahw32
(x)

	)

24 #i‚de‡
__¨ch__swahb32


25 
	#__¨ch__swahb32
(
x
Ë
	`___swahb32
(x)

	)

28 #i‚de‡
__¨ch__swahw32p


29 
	#__¨ch__swahw32p
(
x
Ë
	`__swahw32
(*(x))

	)

31 #i‚de‡
__¨ch__swahb32p


32 
	#__¨ch__swahb32p
(
x
Ë
	`__swahb32
(*(x))

	)

35 #i‚de‡
__¨ch__swahw32s


36 
	#__¨ch__swahw32s
(
x
Ëdÿ{ *(xË
	`__swahw32p
((x)); } 0)

	)

38 #i‚de‡
__¨ch__swahb32s


39 
	#__¨ch__swahb32s
(
x
Ëdÿ{ *(xË
	`__swahb32p
((x)); } 0)

	)

42 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__OPTIMIZE__
)

43 
	#__swahw32
(
x
Ë(
	`__buûtö_c⁄°™t_p
((
__u32
)(x)Ë? 
	`___swahw32
((x)Ë: 
	`__fswahw32
((x)))

	)

44 
	#__swahb32
(
x
Ë(
	`__buûtö_c⁄°™t_p
((
__u32
)(x)Ë? 
	`___swahb32
((x)Ë: 
	`__fswahb32
((x)))

	)

46 
	#__swahw32
(
x
Ë
	`__fswahw32
(x)

	)

47 
	#__swahb32
(
x
Ë
	`__fswahb32
(x)

	)

50 #ifde‡
__BYTEORDER_HAS_U64__


	@linux/cache.h

12 #i‚de‡
__LINUX_CACHE_H


13 
	#__LINUX_CACHE_H


	)

15 
	~<löux/kî√l.h
>

16 
	~<asm/ˇche.h
>

18 #i‚de‡
L1_CACHE_ALIGN


19 
	#L1_CACHE_ALIGN
(
x
Ë
	`ALIGN
(x, 
L1_CACHE_BYTES
)

	)

22 #i‚de‡
SMP_CACHE_BYTES


23 
	#SMP_CACHE_BYTES
 
L1_CACHE_BYTES


	)

26 #i‚de‡
__ªad_mo°ly


27 
	#__ªad_mo°ly


	)

30 #i‚de‡
____ˇchñöe_Æig√d


31 
	#____ˇchñöe_Æig√d
 
	`__©åibuã__
((
	`__Æig√d__
(
SMP_CACHE_BYTES
)))

	)

34 #i‚de‡
____ˇchñöe_Æig√d_ö_smp


35 
	#____ˇchñöe_Æig√d_ö_smp


	)

38 #i‚de‡
__ˇchñöe_Æig√d


39 
	#__ˇchñöe_Æig√d
 
	`__©åibuã__
((
	`__Æig√d__
(
SMP_CACHE_BYTES
), 
	`__£˘i⁄__
(".d©a.ˇchñöe_Æig√d")))

	)

42 #i‚de‡
__ˇchñöe_Æig√d_ö_smp


43 
	#__ˇchñöe_Æig√d_ö_smp


	)

46 #i‚de‡
INTERNODE_CACHE_SHIFT


47 
	#INTERNODE_CACHE_SHIFT
 
L1_CACHE_SHIFT


	)

50 #i‚de‡
____ˇchñöe_öã∫odólig√d_ö_smp


51 
	#____ˇchñöe_öã∫odólig√d_ö_smp


	)

	@linux/calc64.h

12 #i‚de‡
_LINUX_CALC64_H


13 
	#_LINUX_CALC64_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<asm/div64.h
>

18 #i‚de‡
div_l⁄g_l⁄g_ªm


19 
	#div_l⁄g_l⁄g_ªm
(
dividíd
, 
divis‹
, 
ªmaödî
Ë
	`do_div_Œr
((dividíd), divis‹,Ñemaödî)

	)

	@linux/capability.h

12 #i‚de‡
_LINUX_CAPABILITY_H


13 
	#_LINUX_CAPABILITY_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/compûî.h
>

18 
	#_LINUX_CAPABILITY_VERSION
 0x19980330

	)

20 
	s__u£r_ˇp_hódî_°ru˘
 {

21 
__u32
 
	mvîsi⁄
;

22 
	mpid
;

23 } 
	t__u£r
 *
	tˇp_u£r_hódî_t
;

25 
	s__u£r_ˇp_d©a_°ru˘
 {

26 
__u32
 
	mef„˘ive
;

27 
__u32
 
	m≥rmôãd
;

28 
__u32
 
	möhîôabÀ
;

29 } 
	t__u£r
 *
	tˇp_u£r_d©a_t
;

31 
	#CAP_CHOWN
 0

	)

33 
	#CAP_DAC_OVERRIDE
 1

	)

35 
	#CAP_DAC_READ_SEARCH
 2

	)

37 
	#CAP_FOWNER
 3

	)

39 
	#CAP_FSETID
 4

	)

41 
	#CAP_FS_MASK
 0x1f

	)

43 
	#CAP_KILL
 5

	)

45 
	#CAP_SETGID
 6

	)

47 
	#CAP_SETUID
 7

	)

49 
	#CAP_SETPCAP
 8

	)

51 
	#CAP_LINUX_IMMUTABLE
 9

	)

53 
	#CAP_NET_BIND_SERVICE
 10

	)

55 
	#CAP_NET_BROADCAST
 11

	)

57 
	#CAP_NET_ADMIN
 12

	)

59 
	#CAP_NET_RAW
 13

	)

61 
	#CAP_IPC_LOCK
 14

	)

63 
	#CAP_IPC_OWNER
 15

	)

65 
	#CAP_SYS_MODULE
 16

	)

67 
	#CAP_SYS_RAWIO
 17

	)

69 
	#CAP_SYS_CHROOT
 18

	)

71 
	#CAP_SYS_PTRACE
 19

	)

73 
	#CAP_SYS_PACCT
 20

	)

75 
	#CAP_SYS_ADMIN
 21

	)

77 
	#CAP_SYS_BOOT
 22

	)

79 
	#CAP_SYS_NICE
 23

	)

81 
	#CAP_SYS_RESOURCE
 24

	)

83 
	#CAP_SYS_TIME
 25

	)

85 
	#CAP_SYS_TTY_CONFIG
 26

	)

87 
	#CAP_MKNOD
 27

	)

89 
	#CAP_LEASE
 28

	)

91 
	#CAP_AUDIT_WRITE
 29

	)

93 
	#CAP_AUDIT_CONTROL
 30

	)

	@linux/capi.h

12 #i‚de‡
__LINUX_CAPI_H__


13 
	#__LINUX_CAPI_H__


	)

15 
	~<asm/ty≥s.h
>

16 
	~<löux/io˘l.h
>

17 
	~<löux/kî√lˇpi.h
>

19 
	sˇpi_ªgi°î_∑øms
 {

20 
__u32
 
	mÀvñ3˙t
;

21 
__u32
 
	md©ablk˙t
;

22 
__u32
 
	md©ablkÀn
;

23 } 
	tˇpi_ªgi°î_∑øms
;

25 
	#CAPI_REGISTER
 
	`_IOW
('C',0x01,
ˇpi_ªgi°î_∑øms
)

	)

27 
	#CAPI_MANUFACTURER_LEN
 64

	)

29 
	#CAPI_GET_MANUFACTURER
 
	`_IOWR
('C',0x06,)

	)

31 
	sˇpi_vîsi⁄
 {

32 
__u32
 
	mmaj‹vîsi⁄
;

33 
__u32
 
	mmö‹vîsi⁄
;

34 
__u32
 
	mmaj‹m™uvîsi⁄
;

35 
__u32
 
	mmö‹m™uvîsi⁄
;

36 } 
	tˇpi_vîsi⁄
;

38 
	#CAPI_GET_VERSION
 
	`_IOWR
('C',0x07,
ˇpi_vîsi⁄
)

	)

40 
	#CAPI_SERIAL_LEN
 8

	)

41 
	#CAPI_GET_SERIAL
 
	`_IOWR
('C',0x08,)

	)

43 
	sˇpi_¥ofûe
 {

44 
__u16
 
	mnc⁄åﬁÀr
;

45 
__u16
 
	mnbch™√l
;

46 
__u32
 
	mg›ti⁄s
;

47 
__u32
 
	msuµ‹t1
;

48 
__u32
 
	msuµ‹t2
;

49 
__u32
 
	msuµ‹t3
;

50 
__u32
 
	mª£rved
[6];

51 
__u32
 
	mm™u
[5];

52 } 
	tˇpi_¥ofûe
;

54 
	#CAPI_GET_PROFILE
 
	`_IOWR
('C',0x09,
ˇpi_¥ofûe
)

	)

56 
	sˇpi_m™uÁ˘uªr_cmd
 {

57 
	mcmd
;

58 
__u£r
 *
	md©a
;

59 } 
	tˇpi_m™uÁ˘uªr_cmd
;

61 
	#CAPI_MANUFACTURER_CMD
 
	`_IOWR
('C',0x20, 
ˇpi_m™uÁ˘uªr_cmd
)

	)

63 
	#CAPI_GET_ERRCODE
 
	`_IOR
('C',0x21, 
__u16
)

	)

65 
	#CAPI_INSTALLED
 
	`_IOR
('C',0x22, 
__u16
)

	)

67 
	uˇpi_io˘l_°ru˘
 {

68 
__u32
 
	mc⁄å
;

69 
ˇpi_ªgi°î_∑øms
 
	mΩ¨ams
;

70 
__u8
 
	mm™uÁ˘uªr
[
CAPI_MANUFACTURER_LEN
];

71 
ˇpi_vîsi⁄
 
	mvîsi⁄
;

72 
__u8
 
	m£rül
[
CAPI_SERIAL_LEN
];

73 
ˇpi_¥ofûe
 
	m¥ofûe
;

74 
ˇpi_m™uÁ˘uªr_cmd
 
	mcmd
;

75 
__u16
 
	mîrcode
;

76 } 
	tˇpi_io˘l_°ru˘
;

78 
	#CAPIFLAG_HIGHJACKING
 0x0001

	)

80 
	#CAPI_GET_FLAGS
 
	`_IOR
('C',0x23, )

	)

81 
	#CAPI_SET_FLAGS
 
	`_IOR
('C',0x24, )

	)

82 
	#CAPI_CLR_FLAGS
 
	`_IOR
('C',0x25, )

	)

84 
	#CAPI_NCCI_OPENCOUNT
 
	`_IOR
('C',0x26, )

	)

86 
	#CAPI_NCCI_GETUNIT
 
	`_IOR
('C',0x27, )

	)

	@linux/cdev.h

12 #i‚de‡
_LINUX_CDEV_H


13 
	#_LINUX_CDEV_H


	)

	@linux/cdrom.h

12 #i‚de‡
_LINUX_CDROM_H


13 
	#_LINUX_CDROM_H


	)

15 
	~<asm/byã‹dî.h
>

17 
	#EDRIVE_CANT_DO_THIS
 
EOPNOTSUPP


	)

19 
	#CDROMPAUSE
 0x5301

	)

20 
	#CDROMRESUME
 0x5302

	)

21 
	#CDROMPLAYMSF
 0x5303

	)

22 
	#CDROMPLAYTRKIND
 0x5304

	)

23 
	#CDROMREADTOCHDR
 0x5305

	)

24 
	#CDROMREADTOCENTRY
 0x5306

	)

25 
	#CDROMSTOP
 0x5307

	)

26 
	#CDROMSTART
 0x5308

	)

27 
	#CDROMEJECT
 0x5309

	)

28 
	#CDROMVOLCTRL
 0x530a

	)

29 
	#CDROMSUBCHNL
 0x530b

	)

30 
	#CDROMREADMODE2
 0x530c

	)

31 
	#CDROMREADMODE1
 0x530d

	)

32 
	#CDROMREADAUDIO
 0x530e

	)

33 
	#CDROMEJECT_SW
 0x530f

	)

34 
	#CDROMMULTISESSION
 0x5310

	)

35 
	#CDROM_GET_MCN
 0x5311

	)

36 
	#CDROM_GET_UPC
 
CDROM_GET_MCN


	)

37 
	#CDROMRESET
 0x5312

	)

38 
	#CDROMVOLREAD
 0x5313

	)

39 
	#CDROMREADRAW
 0x5314

	)

41 
	#CDROMREADCOOKED
 0x5315

	)

42 
	#CDROMSEEK
 0x5316

	)

44 
	#CDROMPLAYBLK
 0x5317

	)

46 
	#CDROMREADALL
 0x5318

	)

48 
	#CDROMGETSPINDOWN
 0x531d

	)

49 
	#CDROMSETSPINDOWN
 0x531e

	)

51 
	#CDROMCLOSETRAY
 0x5319

	)

52 
	#CDROM_SET_OPTIONS
 0x5320

	)

53 
	#CDROM_CLEAR_OPTIONS
 0x5321

	)

54 
	#CDROM_SELECT_SPEED
 0x5322

	)

55 
	#CDROM_SELECT_DISC
 0x5323

	)

56 
	#CDROM_MEDIA_CHANGED
 0x5325

	)

57 
	#CDROM_DRIVE_STATUS
 0x5326

	)

58 
	#CDROM_DISC_STATUS
 0x5327

	)

59 
	#CDROM_CHANGER_NSLOTS
 0x5328

	)

60 
	#CDROM_LOCKDOOR
 0x5329

	)

61 
	#CDROM_DEBUG
 0x5330

	)

62 
	#CDROM_GET_CAPABILITY
 0x5331

	)

64 
	#CDROMAUDIOBUFSIZ
 0x5382

	)

66 
	#DVD_READ_STRUCT
 0x5390

	)

67 
	#DVD_WRITE_STRUCT
 0x5391

	)

68 
	#DVD_AUTH
 0x5392

	)

70 
	#CDROM_SEND_PACKET
 0x5393

	)

71 
	#CDROM_NEXT_WRITABLE
 0x5394

	)

72 
	#CDROM_LAST_WRITTEN
 0x5395

	)

74 
	scdrom_msf0


76 
__u8
 
	mmöuã
;

77 
__u8
 
	m£c⁄d
;

78 
__u8
 
	m‰ame
;

81 
	ucdrom_addr


83 
cdrom_msf0
 
	mmsf
;

84 
	mlba
;

87 
	scdrom_msf


89 
__u8
 
	mcdmsf_mö0
;

90 
__u8
 
	mcdmsf_£c0
;

91 
__u8
 
	mcdmsf_‰ame0
;

92 
__u8
 
	mcdmsf_mö1
;

93 
__u8
 
	mcdmsf_£c1
;

94 
__u8
 
	mcdmsf_‰ame1
;

97 
	scdrom_ti


99 
__u8
 
	mcdti_åk0
;

100 
__u8
 
	mcdti_öd0
;

101 
__u8
 
	mcdti_åk1
;

102 
__u8
 
	mcdti_öd1
;

105 
	scdrom_tochdr


107 
__u8
 
	mcdth_åk0
;

108 
__u8
 
	mcdth_åk1
;

111 
	scdrom_vﬁ˘æ


113 
__u8
 
	mch™√l0
;

114 
__u8
 
	mch™√l1
;

115 
__u8
 
	mch™√l2
;

116 
__u8
 
	mch™√l3
;

119 
	scdrom_subch∆


121 
__u8
 
	mcdsc_f‹m©
;

122 
__u8
 
	mcdsc_audio°©us
;

123 
__u8
 
	mcdsc_adr
: 4;

124 
__u8
 
	mcdsc_˘æ
: 4;

125 
__u8
 
	mcdsc_åk
;

126 
__u8
 
	mcdsc_öd
;

127 
cdrom_addr
 
	mcdsc_abßddr
;

128 
cdrom_addr
 
	mcdsc_ªœddr
;

131 
	scdrom_to˚¡ry


133 
__u8
 
	mcdã_åack
;

134 
__u8
 
	mcdã_adr
 :4;

135 
__u8
 
	mcdã_˘æ
 :4;

136 
__u8
 
	mcdã_f‹m©
;

137 
cdrom_addr
 
	mcdã_addr
;

138 
__u8
 
	mcdã_d©amode
;

141 
	scdrom_ªad


143 
	mcdªad_lba
;

144 *
	mcdªad_buÁddr
;

145 
	mcdªad_buÊí
;

148 
	scdrom_ªad_audio


150 
cdrom_addr
 
	maddr
;

151 
__u8
 
	maddr_f‹m©
;

152 
	mn‰ames
;

153 
__u8
 
__u£r
 *
	mbuf
;

156 
	scdrom_mu…i£ssi⁄


158 
cdrom_addr
 
	maddr
;

159 
__u8
 
	mxa_Êag
;

160 
__u8
 
	maddr_f‹m©
;

163 
	scdrom_m˙


165 
__u8
 
	mmedium_ˇèlog_numbî
[14];

168 
	scdrom_blk


170 
	m‰om
;

171 
	mÀn
;

174 
	#CDROM_PACKET_SIZE
 12

	)

176 
	#CGC_DATA_UNKNOWN
 0

	)

177 
	#CGC_DATA_WRITE
 1

	)

178 
	#CGC_DATA_READ
 2

	)

179 
	#CGC_DATA_NONE
 3

	)

181 
	scdrom_gíîic_comm™d


183 
	mcmd
[
CDROM_PACKET_SIZE
];

184 
__u£r
 *
	mbuf„r
;

185 
	mbuÊí
;

186 
	m°©
;

187 
ªque°_£n£
 
__u£r
 *
	m£n£
;

188 
	md©a_dúe˘i⁄
;

189 
	mquõt
;

190 
	mtimeout
;

191 
__u£r
 *
	mª£rved
[1];

194 
	#CD_MINS
 74

	)

195 
	#CD_SECS
 60

	)

196 
	#CD_FRAMES
 75

	)

197 
	#CD_SYNC_SIZE
 12

	)

198 
	#CD_MSF_OFFSET
 150

	)

199 
	#CD_CHUNK_SIZE
 24

	)

200 
	#CD_NUM_OF_CHUNKS
 98

	)

201 
	#CD_FRAMESIZE_SUB
 96

	)

202 
	#CD_HEAD_SIZE
 4

	)

203 
	#CD_SUBHEAD_SIZE
 8

	)

204 
	#CD_EDC_SIZE
 4

	)

205 
	#CD_ZERO_SIZE
 8

	)

206 
	#CD_ECC_SIZE
 276

	)

207 
	#CD_FRAMESIZE
 2048

	)

208 
	#CD_FRAMESIZE_RAW
 2352

	)

209 
	#CD_FRAMESIZE_RAWER
 2646

	)

211 
	#CD_FRAMESIZE_RAW1
 (
CD_FRAMESIZE_RAW
-
CD_SYNC_SIZE
)

	)

212 
	#CD_FRAMESIZE_RAW0
 (
CD_FRAMESIZE_RAW
-
CD_SYNC_SIZE
-
CD_HEAD_SIZE
)

	)

214 
	#CD_XA_HEAD
 (
CD_HEAD_SIZE
+
CD_SUBHEAD_SIZE
)

	)

215 
	#CD_XA_TAIL
 (
CD_EDC_SIZE
+
CD_ECC_SIZE
)

	)

216 
	#CD_XA_SYNC_HEAD
 (
CD_SYNC_SIZE
+
CD_XA_HEAD
)

	)

218 
	#CDROM_LBA
 0x01

	)

219 
	#CDROM_MSF
 0x02

	)

221 
	#CDROM_DATA_TRACK
 0x04

	)

223 
	#CDROM_LEADOUT
 0xAA

	)

225 
	#CDROM_AUDIO_INVALID
 0x00

	)

226 
	#CDROM_AUDIO_PLAY
 0x11

	)

227 
	#CDROM_AUDIO_PAUSED
 0x12

	)

228 
	#CDROM_AUDIO_COMPLETED
 0x13

	)

229 
	#CDROM_AUDIO_ERROR
 0x14

	)

230 
	#CDROM_AUDIO_NO_STATUS
 0x15

	)

232 
	#CDC_CLOSE_TRAY
 0x1

	)

233 
	#CDC_OPEN_TRAY
 0x2

	)

234 
	#CDC_LOCK
 0x4

	)

235 
	#CDC_SELECT_SPEED
 0x8

	)

236 
	#CDC_SELECT_DISC
 0x10

	)

237 
	#CDC_MULTI_SESSION
 0x20

	)

238 
	#CDC_MCN
 0x40

	)

239 
	#CDC_MEDIA_CHANGED
 0x80

	)

240 
	#CDC_PLAY_AUDIO
 0x100

	)

241 
	#CDC_RESET
 0x200

	)

242 
	#CDC_DRIVE_STATUS
 0x800

	)

243 
	#CDC_GENERIC_PACKET
 0x1000

	)

244 
	#CDC_CD_R
 0x2000

	)

245 
	#CDC_CD_RW
 0x4000

	)

246 
	#CDC_DVD
 0x8000

	)

247 
	#CDC_DVD_R
 0x10000

	)

248 
	#CDC_DVD_RAM
 0x20000

	)

249 
	#CDC_MO_DRIVE
 0x40000

	)

250 
	#CDC_MRW
 0x80000

	)

251 
	#CDC_MRW_W
 0x100000

	)

252 
	#CDC_RAM
 0x200000

	)

254 
	#CDS_NO_INFO
 0

	)

255 
	#CDS_NO_DISC
 1

	)

256 
	#CDS_TRAY_OPEN
 2

	)

257 
	#CDS_DRIVE_NOT_READY
 3

	)

258 
	#CDS_DISC_OK
 4

	)

260 
	#CDS_AUDIO
 100

	)

261 
	#CDS_DATA_1
 101

	)

262 
	#CDS_DATA_2
 102

	)

263 
	#CDS_XA_2_1
 103

	)

264 
	#CDS_XA_2_2
 104

	)

265 
	#CDS_MIXED
 105

	)

267 
	#CDO_AUTO_CLOSE
 0x1

	)

268 
	#CDO_AUTO_EJECT
 0x2

	)

269 
	#CDO_USE_FFLAGS
 0x4

	)

270 
	#CDO_LOCK
 0x8

	)

271 
	#CDO_CHECK_TYPE
 0x10

	)

273 
	#CDSL_NONE
 ((Ë(~0U>>1)-1)

	)

274 
	#CDSL_CURRENT
 ((Ë(~0U>>1))

	)

276 
	#CD_PART_MAX
 64

	)

277 
	#CD_PART_MASK
 (
CD_PART_MAX
 - 1)

	)

279 
	#GPCMD_BLANK
 0xa1

	)

280 
	#GPCMD_CLOSE_TRACK
 0x5b

	)

281 
	#GPCMD_FLUSH_CACHE
 0x35

	)

282 
	#GPCMD_FORMAT_UNIT
 0x04

	)

283 
	#GPCMD_GET_CONFIGURATION
 0x46

	)

284 
	#GPCMD_GET_EVENT_STATUS_NOTIFICATION
 0x4a

	)

285 
	#GPCMD_GET_PERFORMANCE
 0xac

	)

286 
	#GPCMD_INQUIRY
 0x12

	)

287 
	#GPCMD_LOAD_UNLOAD
 0xa6

	)

288 
	#GPCMD_MECHANISM_STATUS
 0xbd

	)

289 
	#GPCMD_MODE_SELECT_10
 0x55

	)

290 
	#GPCMD_MODE_SENSE_10
 0x5a

	)

291 
	#GPCMD_PAUSE_RESUME
 0x4b

	)

292 
	#GPCMD_PLAY_AUDIO_10
 0x45

	)

293 
	#GPCMD_PLAY_AUDIO_MSF
 0x47

	)

294 
	#GPCMD_PLAY_AUDIO_TI
 0x48

	)

295 
	#GPCMD_PLAY_CD
 0xbc

	)

296 
	#GPCMD_PREVENT_ALLOW_MEDIUM_REMOVAL
 0x1e

	)

297 
	#GPCMD_READ_10
 0x28

	)

298 
	#GPCMD_READ_12
 0xa8

	)

299 
	#GPCMD_READ_BUFFER_CAPACITY
 0x5c

	)

300 
	#GPCMD_READ_CDVD_CAPACITY
 0x25

	)

301 
	#GPCMD_READ_CD
 0xbe

	)

302 
	#GPCMD_READ_CD_MSF
 0xb9

	)

303 
	#GPCMD_READ_DISC_INFO
 0x51

	)

304 
	#GPCMD_READ_DVD_STRUCTURE
 0xad

	)

305 
	#GPCMD_READ_FORMAT_CAPACITIES
 0x23

	)

306 
	#GPCMD_READ_HEADER
 0x44

	)

307 
	#GPCMD_READ_TRACK_RZONE_INFO
 0x52

	)

308 
	#GPCMD_READ_SUBCHANNEL
 0x42

	)

309 
	#GPCMD_READ_TOC_PMA_ATIP
 0x43

	)

310 
	#GPCMD_REPAIR_RZONE_TRACK
 0x58

	)

311 
	#GPCMD_REPORT_KEY
 0xa4

	)

312 
	#GPCMD_REQUEST_SENSE
 0x03

	)

313 
	#GPCMD_RESERVE_RZONE_TRACK
 0x53

	)

314 
	#GPCMD_SEND_CUE_SHEET
 0x5d

	)

315 
	#GPCMD_SCAN
 0xba

	)

316 
	#GPCMD_SEEK
 0x2b

	)

317 
	#GPCMD_SEND_DVD_STRUCTURE
 0xbf

	)

318 
	#GPCMD_SEND_EVENT
 0xa2

	)

319 
	#GPCMD_SEND_KEY
 0xa3

	)

320 
	#GPCMD_SEND_OPC
 0x54

	)

321 
	#GPCMD_SET_READ_AHEAD
 0xa7

	)

322 
	#GPCMD_SET_STREAMING
 0xb6

	)

323 
	#GPCMD_START_STOP_UNIT
 0x1b

	)

324 
	#GPCMD_STOP_PLAY_SCAN
 0x4e

	)

325 
	#GPCMD_TEST_UNIT_READY
 0x00

	)

326 
	#GPCMD_VERIFY_10
 0x2f

	)

327 
	#GPCMD_WRITE_10
 0x2a

	)

328 
	#GPCMD_WRITE_AND_VERIFY_10
 0x2e

	)

330 
	#GPCMD_SET_SPEED
 0xbb

	)

332 
	#GPCMD_PLAYAUDIO_TI
 0x48

	)

334 
	#GPCMD_GET_MEDIA_STATUS
 0xda

	)

336 
	#GPMODE_VENDOR_PAGE
 0x00

	)

337 
	#GPMODE_R_W_ERROR_PAGE
 0x01

	)

338 
	#GPMODE_WRITE_PARMS_PAGE
 0x05

	)

339 
	#GPMODE_WCACHING_PAGE
 0x08

	)

340 
	#GPMODE_AUDIO_CTL_PAGE
 0x0e

	)

341 
	#GPMODE_POWER_PAGE
 0x1a

	)

342 
	#GPMODE_FAULT_FAIL_PAGE
 0x1c

	)

343 
	#GPMODE_TO_PROTECT_PAGE
 0x1d

	)

344 
	#GPMODE_CAPABILITIES_PAGE
 0x2a

	)

345 
	#GPMODE_ALL_PAGES
 0x3f

	)

347 
	#GPMODE_CDROM_PAGE
 0x0d

	)

349 
	#DVD_STRUCT_PHYSICAL
 0x00

	)

350 
	#DVD_STRUCT_COPYRIGHT
 0x01

	)

351 
	#DVD_STRUCT_DISCKEY
 0x02

	)

352 
	#DVD_STRUCT_BCA
 0x03

	)

353 
	#DVD_STRUCT_MANUFACT
 0x04

	)

355 
	sdvd_œyî
 {

356 
__u8
 
	mbook_vîsi⁄
 : 4;

357 
__u8
 
	mbook_ty≥
 : 4;

358 
__u8
 
	mmö_øã
 : 4;

359 
__u8
 
	mdisc_size
 : 4;

360 
__u8
 
	mœyî_ty≥
 : 4;

361 
__u8
 
	måack_∑th
 : 1;

362 
__u8
 
	m∆ayîs
 : 2;

363 
__u8
 
	måack_dísôy
 : 4;

364 
__u8
 
	mlöór_dísôy
 : 4;

365 
__u8
 
	mbˇ
 : 1;

366 
__u32
 
	m°¨t_£˘‹
;

367 
__u32
 
	míd_£˘‹
;

368 
__u32
 
	míd_£˘‹_l0
;

371 
	#DVD_LAYERS
 4

	)

373 
	sdvd_physiˇl
 {

374 
__u8
 
	mty≥
;

375 
__u8
 
	mœyî_num
;

376 
dvd_œyî
 
	mœyî
[
DVD_LAYERS
];

379 
	sdvd_c›yright
 {

380 
__u8
 
	mty≥
;

382 
__u8
 
	mœyî_num
;

383 
__u8
 
	m˝°
;

384 
__u8
 
	mrmi
;

387 
	sdvd_disckey
 {

388 
__u8
 
	mty≥
;

390 
	magid
 : 2;

391 
__u8
 
	mvÆue
[2048];

394 
	sdvd_bˇ
 {

395 
__u8
 
	mty≥
;

397 
	mÀn
;

398 
__u8
 
	mvÆue
[188];

401 
	sdvd_m™uÁ˘
 {

402 
__u8
 
	mty≥
;

404 
__u8
 
	mœyî_num
;

405 
	mÀn
;

406 
__u8
 
	mvÆue
[2048];

410 
__u8
 
	mty≥
;

412 
dvd_physiˇl
 
	mphysiˇl
;

413 
dvd_c›yright
 
	mc›yright
;

414 
dvd_disckey
 
	mdisckey
;

415 
dvd_bˇ
 
	mbˇ
;

416 
dvd_m™uÁ˘
 
	mm™uÁ˘
;

417 } 
	tdvd_°ru˘
;

419 
	#DVD_LU_SEND_AGID
 0

	)

420 
	#DVD_HOST_SEND_CHALLENGE
 1

	)

421 
	#DVD_LU_SEND_KEY1
 2

	)

422 
	#DVD_LU_SEND_CHALLENGE
 3

	)

423 
	#DVD_HOST_SEND_KEY2
 4

	)

425 
	#DVD_AUTH_ESTABLISHED
 5

	)

426 
	#DVD_AUTH_FAILURE
 6

	)

428 
	#DVD_LU_SEND_TITLE_KEY
 7

	)

429 
	#DVD_LU_SEND_ASF
 8

	)

430 
	#DVD_INVALIDATE_AGID
 9

	)

431 
	#DVD_LU_SEND_RPC_STATE
 10

	)

432 
	#DVD_HOST_SEND_RPC_STATE
 11

	)

434 
__u8
 
	tdvd_key
[5];

435 
__u8
 
	tdvd_chÆÀnge
[10];

437 
	sdvd_lu_£nd_agid
 {

438 
__u8
 
	mty≥
;

439 
	magid
 : 2;

442 
	sdvd_ho°_£nd_chÆÀnge
 {

443 
__u8
 
	mty≥
;

444 
	magid
 : 2;

446 
dvd_chÆÀnge
 
	mchÆ
;

449 
	sdvd_£nd_key
 {

450 
__u8
 
	mty≥
;

451 
	magid
 : 2;

453 
dvd_key
 
	mkey
;

456 
	sdvd_lu_£nd_chÆÀnge
 {

457 
__u8
 
	mty≥
;

458 
	magid
 : 2;

460 
dvd_chÆÀnge
 
	mchÆ
;

463 
	#DVD_CPM_NO_COPYRIGHT
 0

	)

464 
	#DVD_CPM_COPYRIGHTED
 1

	)

466 
	#DVD_CP_SEC_NONE
 0

	)

467 
	#DVD_CP_SEC_EXIST
 1

	)

469 
	#DVD_CGMS_UNRESTRICTED
 0

	)

470 
	#DVD_CGMS_SINGLE
 2

	)

471 
	#DVD_CGMS_RESTRICTED
 3

	)

473 
	sdvd_lu_£nd_tôÀ_key
 {

474 
__u8
 
	mty≥
;

475 
	magid
 : 2;

477 
dvd_key
 
	mtôÀ_key
;

478 
	mlba
;

479 
	m˝m
 : 1;

480 
	m˝_£c
 : 1;

481 
	mcgms
 : 2;

484 
	sdvd_lu_£nd_asf
 {

485 
__u8
 
	mty≥
;

486 
	magid
 : 2;

488 
	masf
 : 1;

491 
	sdvd_ho°_£nd_Ωc°©e
 {

492 
__u8
 
	mty≥
;

493 
__u8
 
	mpdrc
;

496 
	sdvd_lu_£nd_Ωc°©e
 {

497 
__u8
 
	mty≥
 : 2;

498 
__u8
 
	mvø
 : 3;

499 
__u8
 
	mucˇ
 : 3;

500 
__u8
 
	mªgi⁄_mask
;

501 
__u8
 
	mΩc_scheme
;

505 
__u8
 
	mty≥
;

507 
dvd_lu_£nd_agid
 
	mlß
;

508 
dvd_ho°_£nd_chÆÀnge
 
	mhsc
;

509 
dvd_£nd_key
 
	mlsk
;

510 
dvd_lu_£nd_chÆÀnge
 
	mlsc
;

511 
dvd_£nd_key
 
	mhsk
;

512 
dvd_lu_£nd_tôÀ_key
 
	ml°k
;

513 
dvd_lu_£nd_asf
 
	mlßsf
;

514 
dvd_ho°_£nd_Ωc°©e
 
	mhΩcs
;

515 
dvd_lu_£nd_Ωc°©e
 
	mÃpcs
;

516 } 
	tdvd_authöfo
;

518 
	sªque°_£n£
 {

519 #ifde‡
__BIG_ENDIAN_BITFIELD


520 
__u8
 
	mvÆid
 : 1;

521 
__u8
 
	mîr‹_code
 : 7;

522 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

523 
__u8
 
	mîr‹_code
 : 7;

524 
__u8
 
	mvÆid
 : 1;

526 
__u8
 
	m£gmít_numbî
;

527 #ifde‡
__BIG_ENDIAN_BITFIELD


528 
__u8
 
	mª£rved1
 : 2;

529 
__u8
 
	mûi
 : 1;

530 
__u8
 
	mª£rved2
 : 1;

531 
__u8
 
	m£n£_key
 : 4;

532 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

533 
__u8
 
	m£n£_key
 : 4;

534 
__u8
 
	mª£rved2
 : 1;

535 
__u8
 
	mûi
 : 1;

536 
__u8
 
	mª£rved1
 : 2;

538 
__u8
 
	möf‹m©i⁄
[4];

539 
__u8
 
	madd_£n£_Àn
;

540 
__u8
 
	mcomm™d_öfo
[4];

541 
__u8
 
	masc
;

542 
__u8
 
	mascq
;

543 
__u8
 
	m‰uc
;

544 
__u8
 
	msks
[3];

545 
__u8
 
	masb
[46];

548 
	#CDF_RWRT
 0x0020

	)

549 
	#CDF_HWDM
 0x0024

	)

550 
	#CDF_MRW
 0x0028

	)

552 
	#CDM_MRW_NOTMRW
 0

	)

553 
	#CDM_MRW_BGFORMAT_INACTIVE
 1

	)

554 
	#CDM_MRW_BGFORMAT_ACTIVE
 2

	)

555 
	#CDM_MRW_BGFORMAT_COMPLETE
 3

	)

557 
	#MRW_LBA_DMA
 0

	)

558 
	#MRW_LBA_GAA
 1

	)

560 
	#MRW_MODE_PC_PRE1
 0x2c

	)

561 
	#MRW_MODE_PC
 0x03

	)

563 
	smrw_„©uª_desc
 {

564 
__u16
 
	m„©uª_code
;

565 #ifde‡
__BIG_ENDIAN_BITFIELD


566 
__u8
 
	mª£rved1
 : 2;

567 
__u8
 
	m„©uª_vîsi⁄
 : 4;

568 
__u8
 
	m≥rsi°ít
 : 1;

569 
__u8
 
	mcuº
 : 1;

570 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

571 
__u8
 
	mcuº
 : 1;

572 
__u8
 
	m≥rsi°ít
 : 1;

573 
__u8
 
	m„©uª_vîsi⁄
 : 4;

574 
__u8
 
	mª£rved1
 : 2;

576 
__u8
 
	madd_Àn
;

577 #ifde‡
__BIG_ENDIAN_BITFIELD


578 
__u8
 
	mª£rved2
 : 7;

579 
__u8
 
	mwrôe
 : 1;

580 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

581 
__u8
 
	mwrôe
 : 1;

582 
__u8
 
	mª£rved2
 : 7;

584 
__u8
 
	mª£rved3
;

585 
__u8
 
	mª£rved4
;

586 
__u8
 
	mª£rved5
;

589 
	srwπ_„©uª_desc
 {

590 
__u16
 
	m„©uª_code
;

591 #ifde‡
__BIG_ENDIAN_BITFIELD


592 
__u8
 
	mª£rved1
 : 2;

593 
__u8
 
	m„©uª_vîsi⁄
 : 4;

594 
__u8
 
	m≥rsi°ít
 : 1;

595 
__u8
 
	mcuº
 : 1;

596 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

597 
__u8
 
	mcuº
 : 1;

598 
__u8
 
	m≥rsi°ít
 : 1;

599 
__u8
 
	m„©uª_vîsi⁄
 : 4;

600 
__u8
 
	mª£rved1
 : 2;

602 
__u8
 
	madd_Àn
;

603 
__u32
 
	mœ°_lba
;

604 
__u32
 
	mblock_size
;

605 
__u16
 
	mblockög
;

606 #ifde‡
__BIG_ENDIAN_BITFIELD


607 
__u8
 
	mª£rved2
 : 7;

608 
__u8
 
	m∑ge_¥e£¡
 : 1;

609 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

610 
__u8
 
	m∑ge_¥e£¡
 : 1;

611 
__u8
 
	mª£rved2
 : 7;

613 
__u8
 
	mª£rved3
;

617 
__u16
 
	mdisc_öf‹m©i⁄_Àngth
;

618 #ifde‡
__BIG_ENDIAN_BITFIELD


619 
__u8
 
	mª£rved1
 : 3;

620 
__u8
 
	mîaßbÀ
 : 1;

621 
__u8
 
	mb‹dî_°©us
 : 2;

622 
__u8
 
	mdisc_°©us
 : 2;

623 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

624 
__u8
 
	mdisc_°©us
 : 2;

625 
__u8
 
	mb‹dî_°©us
 : 2;

626 
__u8
 
	mîaßbÀ
 : 1;

627 
__u8
 
	mª£rved1
 : 3;

631 
__u8
 
	mn_fú°_åack
;

632 
__u8
 
	mn_£ssi⁄s_lsb
;

633 
__u8
 
	mfú°_åack_lsb
;

634 
__u8
 
	mœ°_åack_lsb
;

635 #ifde‡
__BIG_ENDIAN_BITFIELD


636 
__u8
 
	mdid_v
 : 1;

637 
__u8
 
	mdbc_v
 : 1;

638 
__u8
 
	muru
 : 1;

639 
__u8
 
	mª£rved2
 : 2;

640 
__u8
 
	mdbô
 : 1;

641 
__u8
 
	mmrw_°©us
 : 2;

642 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

643 
__u8
 
	mmrw_°©us
 : 2;

644 
__u8
 
	mdbô
 : 1;

645 
__u8
 
	mª£rved2
 : 2;

646 
__u8
 
	muru
 : 1;

647 
__u8
 
	mdbc_v
 : 1;

648 
__u8
 
	mdid_v
 : 1;

650 
__u8
 
	mdisc_ty≥
;

651 
__u8
 
	mn_£ssi⁄s_msb
;

652 
__u8
 
	mfú°_åack_msb
;

653 
__u8
 
	mœ°_åack_msb
;

654 
__u32
 
	mdisc_id
;

655 
__u32
 
	mÀad_ö
;

656 
__u32
 
	mÀad_out
;

657 
__u8
 
	mdisc_b¨_code
[8];

658 
__u8
 
	mª£rved3
;

659 
__u8
 
	mn_›c
;

660 } 
	tdisc_öf‹m©i⁄
;

663 
__u16
 
	måack_öf‹m©i⁄_Àngth
;

664 
__u8
 
	måack_lsb
;

665 
__u8
 
	m£ssi⁄_lsb
;

666 
__u8
 
	mª£rved1
;

667 #ifde‡
__BIG_ENDIAN_BITFIELD


668 
__u8
 
	mª£rved2
 : 2;

669 
__u8
 
	mdamage
 : 1;

670 
__u8
 
	mc›y
 : 1;

671 
__u8
 
	måack_mode
 : 4;

672 
__u8
 
	mπ
 : 1;

673 
__u8
 
	mbœnk
 : 1;

674 
__u8
 
	m∑ckë
 : 1;

675 
__u8
 
	mÂ
 : 1;

676 
__u8
 
	md©a_mode
 : 4;

677 
__u8
 
	mª£rved3
 : 6;

678 
__u8
 
	mÃa_v
 : 1;

679 
__u8
 
	mnwa_v
 : 1;

680 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

681 
__u8
 
	måack_mode
 : 4;

682 
__u8
 
	mc›y
 : 1;

683 
__u8
 
	mdamage
 : 1;

684 
__u8
 
	mª£rved2
 : 2;

685 
__u8
 
	md©a_mode
 : 4;

686 
__u8
 
	mÂ
 : 1;

687 
__u8
 
	m∑ckë
 : 1;

688 
__u8
 
	mbœnk
 : 1;

689 
__u8
 
	mπ
 : 1;

690 
__u8
 
	mnwa_v
 : 1;

691 
__u8
 
	mÃa_v
 : 1;

692 
__u8
 
	mª£rved3
 : 6;

694 
__u32
 
	måack_°¨t
;

695 
__u32
 
	m√xt_wrôabÀ
;

696 
__u32
 
	m‰ì_blocks
;

697 
__u32
 
	mfixed_∑ckë_size
;

698 
__u32
 
	måack_size
;

699 
__u32
 
	mœ°_ªc_addªss
;

700 } 
	tåack_öf‹m©i⁄
;

702 
	s„©uª_hódî
 {

703 
__u32
 
	md©a_Àn
;

704 
__u8
 
	mª£rved1
;

705 
__u8
 
	mª£rved2
;

706 
__u16
 
	mcuº_¥ofûe
;

709 
	smode_∑ge_hódî
 {

710 
__u16
 
	mmode_d©a_Àngth
;

711 
__u8
 
	mmedium_ty≥
;

712 
__u8
 
	mª£rved1
;

713 
__u8
 
	mª£rved2
;

714 
__u8
 
	mª£rved3
;

715 
__u16
 
	mdesc_Àngth
;

	@linux/circ_buf.h

12 #i‚de‡
_LINUX_CIRC_BUF_H


13 
	#_LINUX_CIRC_BUF_H
 1

	)

15 
	scúc_buf
 {

16 *
	mbuf
;

17 
	mhód
;

18 
	mèû
;

21 
	#CIRC_CNT
(
hód
,
èû
,
size
Ë(((hódË- (èû)Ë& ((size)-1))

	)

23 
	#CIRC_SPACE
(
hód
,
èû
,
size
Ë
	`CIRC_CNT
(—aû),((hód)+1),(size))

	)

25 
	#CIRC_CNT_TO_END
(
hód
,
èû
,
size
Ë({
íd
 = (sizeË- (èû); 
n
 = ((hódË+ÉndË& ((size)-1);Ç <Énd ?Ç :Énd;})

	)

27 
	#CIRC_SPACE_TO_END
(
hód
,
èû
,
size
Ë({
íd
 = (sizeË- 1 - (hód); 
n
 = (íd + (èû)Ë& ((size)-1);Ç <íd ?Ç :Énd+1;})

	)

	@linux/clk.h

12 #i‚de‡
__LINUX_CLK_H


13 
	#__LINUX_CLK_H


	)

15 
	gdevi˚
;

17 
	g˛k
;

19 
˛k
 *
˛k_gë
(
devi˚
 *
dev
, c⁄° *
id
);

21 
˛k
 *
˛k_gë_∑ª¡
(clk *clk);

	@linux/coda.h

12 #i‚de‡
_CODA_HEADER_


13 
	#_CODA_HEADER_


	)

15 #i‡
deföed
(
__NëBSD__
Ë|| (deföed(
DJGPP
Ë|| deföed(
__CYGWIN32__
)Ë&& !deföed(
KERNEL
)

16 
	~<sys/ty≥s.h
>

19 #i‚de‡
CODA_MAXSYMLINKS


20 
	#CODA_MAXSYMLINKS
 10

	)

23 #i‡
deföed
(
DJGPP
Ë|| deföed(
__CYGWIN32__
)

24 #ifde‡
KERNEL


25 
	tu_l⁄g
;

26 
	tu_öt
;

27 
	tu_sh‹t
;

28 
u_l⁄g
 
	töo_t
;

29 
u_l⁄g
 
	tdev_t
;

30 * 
	tˇddr_t
;

31 #ifde‡
DOS


32 
	t__öt64
 
	tu_quad_t
;

34 
	tu_quad_t
;

37 
	#ölöe


	)

39 
	stime•ec
 {

40 
	mts_£c
;

41 
	mts_n£c
;

44 
	~<sys/time.h
>

45 
	tu_quad_t
;

49 #ifde‡
__löux__


50 
	~<löux/time.h
>

51 
	#cdev_t
 
u_quad_t


	)

52 #i‡!
deföed
(
_UQUAD_T_
Ë&& (!deföed(
__GLIBC__
) || __GLIBC__ < 2)

53 
	#_UQUAD_T_
 1

	)

54 
	tu_quad_t
;

57 
	#cdev_t
 
dev_t


	)

60 #ifde‡
__CYGWIN32__


61 
	stime•ec
 {

62 
time_t
 
	mtv_£c
;

63 
	mtv_n£c
;

67 #i‚de‡
__BIT_TYPES_DEFINED__


68 
	#__BIT_TYPES_DEFINED__


	)

69 sig√d 
	töt8_t
;

70 
	tu_öt8_t
;

71 
	töt16_t
;

72 
	tu_öt16_t
;

73 
	töt32_t
;

74 
	tu_öt32_t
;

77 
	#CODA_MAXNAMLEN
 255

	)

78 
	#CODA_MAXPATHLEN
 1024

	)

79 
	#CODA_MAXSYMLINK
 10

	)

81 
	#C_O_READ
 0x001

	)

82 
	#C_O_WRITE
 0x002

	)

83 
	#C_O_TRUNC
 0x010

	)

84 
	#C_O_EXCL
 0x100

	)

85 
	#C_O_CREAT
 0x200

	)

87 
	#C_M_READ
 00400

	)

88 
	#C_M_WRITE
 00200

	)

90 
	#C_A_C_OK
 8

	)

91 
	#C_A_R_OK
 4

	)

92 
	#C_A_W_OK
 2

	)

93 
	#C_A_X_OK
 1

	)

94 
	#C_A_F_OK
 0

	)

96 #i‚de‡
_VENUS_DIRENT_T_


97 
	#_VENUS_DIRENT_T_
 1

	)

98 
	svíus_dúít
 {

99 
u_öt32_t
 
	md_fûío
;

100 
u_öt16_t
 
	md_ª˛í
;

101 
u_öt8_t
 
	md_ty≥
;

102 
u_öt8_t
 
	md_«mÀn
;

103 
	md_«me
[
CODA_MAXNAMLEN
 + 1];

105 #unde‡
DIRSIZ


106 
	#DIRSIZ
(
dp
Ë(( (
víus_dúít
Ë- (
CODA_MAXNAMLEN
+1)Ë+ (((dp)->
d_«mÀn
+1 + 3Ë&~ 3))

	)

108 
	#CDT_UNKNOWN
 0

	)

109 
	#CDT_FIFO
 1

	)

110 
	#CDT_CHR
 2

	)

111 
	#CDT_DIR
 4

	)

112 
	#CDT_BLK
 6

	)

113 
	#CDT_REG
 8

	)

114 
	#CDT_LNK
 10

	)

115 
	#CDT_SOCK
 12

	)

116 
	#CDT_WHT
 14

	)

118 
	#IFTOCDT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

119 
	#CDTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

123 #i‚de‡
_VUID_T_


124 
	#_VUID_T_


	)

125 
u_öt32_t
 
	tvuid_t
;

126 
u_öt32_t
 
	tvgid_t
;

129 
	sCodaFid
 {

130 
u_öt32_t
 
	m›aque
[4];

133 
	#coda_f2i
(
fid
Ë(fid ? (fid->
›aque
[3] ^ (fid->›aque[2]<<10Ë^ (fid->›aque[1]<<20Ë^ fid->›aque[0]Ë: 0)

	)

135 #i‚de‡
_VENUS_VATTR_T_


136 
	#_VENUS_VATTR_T_


	)

138 
	ecoda_vty≥
 { 
	mC_VNON
, 
	mC_VREG
, 
	mC_VDIR
, 
	mC_VBLK
, 
	mC_VCHR
, 
	mC_VLNK
, 
	mC_VSOCK
, 
	mC_VFIFO
, 
	mC_VBAD
 };

140 
	scoda_v©å
 {

141 
	mva_ty≥
;

142 
u_sh‹t
 
	mva_mode
;

143 
	mva_∆ök
;

144 
vuid_t
 
	mva_uid
;

145 
vgid_t
 
	mva_gid
;

146 
	mva_fûeid
;

147 
u_quad_t
 
	mva_size
;

148 
	mva_blocksize
;

149 
time•ec
 
	mva_©ime
;

150 
time•ec
 
	mva_mtime
;

151 
time•ec
 
	mva_˘ime
;

152 
u_l⁄g
 
	mva_gí
;

153 
u_l⁄g
 
	mva_Êags
;

154 
cdev_t
 
	mva_rdev
;

155 
u_quad_t
 
	mva_byãs
;

156 
u_quad_t
 
	mva_fûîev
;

161 
	scoda_°©fs
 {

162 
öt32_t
 
	mf_blocks
;

163 
öt32_t
 
	mf_b‰ì
;

164 
öt32_t
 
	mf_bavaû
;

165 
öt32_t
 
	mf_fûes
;

166 
öt32_t
 
	mf_f‰ì
;

169 
	#CODA_ROOT
 2

	)

170 
	#CODA_OPEN_BY_FD
 3

	)

171 
	#CODA_OPEN
 4

	)

172 
	#CODA_CLOSE
 5

	)

173 
	#CODA_IOCTL
 6

	)

174 
	#CODA_GETATTR
 7

	)

175 
	#CODA_SETATTR
 8

	)

176 
	#CODA_ACCESS
 9

	)

177 
	#CODA_LOOKUP
 10

	)

178 
	#CODA_CREATE
 11

	)

179 
	#CODA_REMOVE
 12

	)

180 
	#CODA_LINK
 13

	)

181 
	#CODA_RENAME
 14

	)

182 
	#CODA_MKDIR
 15

	)

183 
	#CODA_RMDIR
 16

	)

184 
	#CODA_SYMLINK
 18

	)

185 
	#CODA_READLINK
 19

	)

186 
	#CODA_FSYNC
 20

	)

187 
	#CODA_VGET
 22

	)

188 
	#CODA_SIGNAL
 23

	)

189 
	#CODA_REPLACE
 24

	)

190 
	#CODA_FLUSH
 25

	)

191 
	#CODA_PURGEUSER
 26

	)

192 
	#CODA_ZAPFILE
 27

	)

193 
	#CODA_ZAPDIR
 28

	)

194 
	#CODA_PURGEFID
 30

	)

195 
	#CODA_OPEN_BY_PATH
 31

	)

196 
	#CODA_RESOLVE
 32

	)

197 
	#CODA_REINTEGRATE
 33

	)

198 
	#CODA_STATFS
 34

	)

199 
	#CODA_STORE
 35

	)

200 
	#CODA_RELEASE
 36

	)

201 
	#CODA_NCALLS
 37

	)

203 
	#DOWNCALL
(
›code
Ë(›codê>
CODA_REPLACE
 && opcodê<
CODA_PURGEFID
)

	)

205 
	#VC_MAXDATASIZE
 8192

	)

206 
	#VC_MAXMSGSIZE
 (
öputArgs
)+(
ouçutArgs
Ë+ 
VC_MAXDATASIZE


	)

208 
	#CIOC_KERNEL_VERSION
 
	`_IOWR
('c', 10, 
size_t
)

	)

210 
	#CODA_KERNEL_VERSION
 3

	)

212 
	scoda_ö_hdr
 {

213 
u_öt32_t
 
	m›code
;

214 
u_öt32_t
 
	munique
;

215 
pid_t
 
	mpid
;

216 
pid_t
 
	mpgid
;

217 
vuid_t
 
	muid
;

220 
	scoda_out_hdr
 {

221 
u_öt32_t
 
	m›code
;

222 
u_öt32_t
 
	munique
;

223 
u_öt32_t
 
	mªsu…
;

226 
	scoda_roŸ_out
 {

227 
coda_out_hdr
 
	moh
;

228 
CodaFid
 
	mVFid
;

231 
	scoda_roŸ_ö
 {

232 
coda_ö_hdr
 
	mö
;

235 
	scoda_›í_ö
 {

236 
coda_ö_hdr
 
	mih
;

237 
CodaFid
 
	mVFid
;

238 
	mÊags
;

241 
	scoda_›í_out
 {

242 
coda_out_hdr
 
	moh
;

243 
cdev_t
 
	mdev
;

244 
öo_t
 
	möode
;

247 
	scoda_°‹e_ö
 {

248 
coda_ö_hdr
 
	mih
;

249 
CodaFid
 
	mVFid
;

250 
	mÊags
;

253 
	scoda_°‹e_out
 {

254 
coda_out_hdr
 
	mout
;

257 
	scoda_ªÀa£_ö
 {

258 
coda_ö_hdr
 
	mih
;

259 
CodaFid
 
	mVFid
;

260 
	mÊags
;

263 
	scoda_ªÀa£_out
 {

264 
coda_out_hdr
 
	mout
;

267 
	scoda_˛o£_ö
 {

268 
coda_ö_hdr
 
	mih
;

269 
CodaFid
 
	mVFid
;

270 
	mÊags
;

273 
	scoda_˛o£_out
 {

274 
coda_out_hdr
 
	mout
;

277 
	scoda_io˘l_ö
 {

278 
coda_ö_hdr
 
	mih
;

279 
CodaFid
 
	mVFid
;

280 
	mcmd
;

281 
	mÀn
;

282 
	mrwÊag
;

283 *
	md©a
;

286 
	scoda_io˘l_out
 {

287 
coda_out_hdr
 
	moh
;

288 
	mÀn
;

289 
ˇddr_t
 
	md©a
;

292 
	scoda_gë©å_ö
 {

293 
coda_ö_hdr
 
	mih
;

294 
CodaFid
 
	mVFid
;

297 
	scoda_gë©å_out
 {

298 
coda_out_hdr
 
	moh
;

299 
coda_v©å
 
	m©å
;

302 
	scoda_£èâr_ö
 {

303 
coda_ö_hdr
 
	mih
;

304 
CodaFid
 
	mVFid
;

305 
coda_v©å
 
	m©å
;

308 
	scoda_£èâr_out
 {

309 
coda_out_hdr
 
	mout
;

312 
	scoda_ac˚ss_ö
 {

313 
coda_ö_hdr
 
	mih
;

314 
CodaFid
 
	mVFid
;

315 
	mÊags
;

318 
	scoda_ac˚ss_out
 {

319 
coda_out_hdr
 
	mout
;

322 
	#CLU_CASE_SENSITIVE
 0x01

	)

323 
	#CLU_CASE_INSENSITIVE
 0x02

	)

325 
	scoda_lookup_ö
 {

326 
coda_ö_hdr
 
	mih
;

327 
CodaFid
 
	mVFid
;

328 
	m«me
;

329 
	mÊags
;

332 
	scoda_lookup_out
 {

333 
coda_out_hdr
 
	moh
;

334 
CodaFid
 
	mVFid
;

335 
	mvty≥
;

338 
	scoda_¸óã_ö
 {

339 
coda_ö_hdr
 
	mih
;

340 
CodaFid
 
	mVFid
;

341 
coda_v©å
 
	m©å
;

342 
	mex˛
;

343 
	mmode
;

344 
	m«me
;

347 
	scoda_¸óã_out
 {

348 
coda_out_hdr
 
	moh
;

349 
CodaFid
 
	mVFid
;

350 
coda_v©å
 
	m©å
;

353 
	scoda_ªmove_ö
 {

354 
coda_ö_hdr
 
	mih
;

355 
CodaFid
 
	mVFid
;

356 
	m«me
;

359 
	scoda_ªmove_out
 {

360 
coda_out_hdr
 
	mout
;

363 
	scoda_lök_ö
 {

364 
coda_ö_hdr
 
	mih
;

365 
CodaFid
 
	msour˚Fid
;

366 
CodaFid
 
	mde°Fid
;

367 
	mäame
;

370 
	scoda_lök_out
 {

371 
coda_out_hdr
 
	mout
;

374 
	scoda_ª«me_ö
 {

375 
coda_ö_hdr
 
	mih
;

376 
CodaFid
 
	msour˚Fid
;

377 
	m§˙ame
;

378 
CodaFid
 
	mde°Fid
;

379 
	mde°«me
;

382 
	scoda_ª«me_out
 {

383 
coda_out_hdr
 
	mout
;

386 
	scoda_mkdú_ö
 {

387 
coda_ö_hdr
 
	mih
;

388 
CodaFid
 
	mVFid
;

389 
coda_v©å
 
	m©å
;

390 
	m«me
;

393 
	scoda_mkdú_out
 {

394 
coda_out_hdr
 
	moh
;

395 
CodaFid
 
	mVFid
;

396 
coda_v©å
 
	m©å
;

399 
	scoda_rmdú_ö
 {

400 
coda_ö_hdr
 
	mih
;

401 
CodaFid
 
	mVFid
;

402 
	m«me
;

405 
	scoda_rmdú_out
 {

406 
coda_out_hdr
 
	mout
;

409 
	scoda_symlök_ö
 {

410 
coda_ö_hdr
 
	mih
;

411 
CodaFid
 
	mVFid
;

412 
	m§˙ame
;

413 
coda_v©å
 
	m©å
;

414 
	mäame
;

417 
	scoda_symlök_out
 {

418 
coda_out_hdr
 
	mout
;

421 
	scoda_ªadlök_ö
 {

422 
coda_ö_hdr
 
	mih
;

423 
CodaFid
 
	mVFid
;

426 
	scoda_ªadlök_out
 {

427 
coda_out_hdr
 
	moh
;

428 
	mcou¡
;

429 
ˇddr_t
 
	md©a
;

432 
	scoda_fsync_ö
 {

433 
coda_ö_hdr
 
	mih
;

434 
CodaFid
 
	mVFid
;

437 
	scoda_fsync_out
 {

438 
coda_out_hdr
 
	mout
;

441 
	scoda_vgë_ö
 {

442 
coda_ö_hdr
 
	mih
;

443 
CodaFid
 
	mVFid
;

446 
	scoda_vgë_out
 {

447 
coda_out_hdr
 
	moh
;

448 
CodaFid
 
	mVFid
;

449 
	mvty≥
;

452 
	scoda_purgeu£r_out
 {

453 
coda_out_hdr
 
	moh
;

454 
vuid_t
 
	muid
;

457 
	scoda_z≠fûe_out
 {

458 
coda_out_hdr
 
	moh
;

459 
CodaFid
 
	mCodaFid
;

462 
	scoda_z≠dú_out
 {

463 
coda_out_hdr
 
	moh
;

464 
CodaFid
 
	mCodaFid
;

467 
	scoda_purgefid_out
 {

468 
coda_out_hdr
 
	moh
;

469 
CodaFid
 
	mCodaFid
;

472 
	scoda_ª∂a˚_out
 {

473 
coda_out_hdr
 
	moh
;

474 
CodaFid
 
	mNewFid
;

475 
CodaFid
 
	mOldFid
;

478 
	scoda_›í_by_fd_ö
 {

479 
coda_ö_hdr
 
	mih
;

480 
CodaFid
 
	mVFid
;

481 
	mÊags
;

484 
	scoda_›í_by_fd_out
 {

485 
coda_out_hdr
 
	moh
;

486 
	mfd
;

490 
	scoda_›í_by_∑th_ö
 {

491 
coda_ö_hdr
 
	mih
;

492 
CodaFid
 
	mVFid
;

493 
	mÊags
;

496 
	scoda_›í_by_∑th_out
 {

497 
coda_out_hdr
 
	moh
;

498 
	m∑th
;

501 
	scoda_°©fs_ö
 {

502 
coda_ö_hdr
 
	mö
;

505 
	scoda_°©fs_out
 {

506 
coda_out_hdr
 
	moh
;

507 
coda_°©fs
 
	m°©
;

510 
	#CODA_NOCACHE
 0x80000000

	)

512 
	uöputArgs
 {

513 
coda_ö_hdr
 
	mih
;

514 
coda_›í_ö
 
	mcoda_›í
;

515 
coda_°‹e_ö
 
	mcoda_°‹e
;

516 
coda_ªÀa£_ö
 
	mcoda_ªÀa£
;

517 
coda_˛o£_ö
 
	mcoda_˛o£
;

518 
coda_io˘l_ö
 
	mcoda_io˘l
;

519 
coda_gë©å_ö
 
	mcoda_gë©å
;

520 
coda_£èâr_ö
 
	mcoda_£èâr
;

521 
coda_ac˚ss_ö
 
	mcoda_ac˚ss
;

522 
coda_lookup_ö
 
	mcoda_lookup
;

523 
coda_¸óã_ö
 
	mcoda_¸óã
;

524 
coda_ªmove_ö
 
	mcoda_ªmove
;

525 
coda_lök_ö
 
	mcoda_lök
;

526 
coda_ª«me_ö
 
	mcoda_ª«me
;

527 
coda_mkdú_ö
 
	mcoda_mkdú
;

528 
coda_rmdú_ö
 
	mcoda_rmdú
;

529 
coda_symlök_ö
 
	mcoda_symlök
;

530 
coda_ªadlök_ö
 
	mcoda_ªadlök
;

531 
coda_fsync_ö
 
	mcoda_fsync
;

532 
coda_vgë_ö
 
	mcoda_vgë
;

533 
coda_›í_by_fd_ö
 
	mcoda_›í_by_fd
;

534 
coda_›í_by_∑th_ö
 
	mcoda_›í_by_∑th
;

535 
coda_°©fs_ö
 
	mcoda_°©fs
;

538 
	uouçutArgs
 {

539 
coda_out_hdr
 
	moh
;

540 
coda_roŸ_out
 
	mcoda_roŸ
;

541 
coda_›í_out
 
	mcoda_›í
;

542 
coda_io˘l_out
 
	mcoda_io˘l
;

543 
coda_gë©å_out
 
	mcoda_gë©å
;

544 
coda_lookup_out
 
	mcoda_lookup
;

545 
coda_¸óã_out
 
	mcoda_¸óã
;

546 
coda_mkdú_out
 
	mcoda_mkdú
;

547 
coda_ªadlök_out
 
	mcoda_ªadlök
;

548 
coda_vgë_out
 
	mcoda_vgë
;

549 
coda_purgeu£r_out
 
	mcoda_purgeu£r
;

550 
coda_z≠fûe_out
 
	mcoda_z≠fûe
;

551 
coda_z≠dú_out
 
	mcoda_z≠dú
;

552 
coda_purgefid_out
 
	mcoda_purgefid
;

553 
coda_ª∂a˚_out
 
	mcoda_ª∂a˚
;

554 
coda_›í_by_fd_out
 
	mcoda_›í_by_fd
;

555 
coda_›í_by_∑th_out
 
	mcoda_›í_by_∑th
;

556 
coda_°©fs_out
 
	mcoda_°©fs
;

559 
	ucoda_downˇŒs
 {

561 
coda_purgeu£r_out
 
	mpurgeu£r
;

562 
coda_z≠fûe_out
 
	mz≠fûe
;

563 
coda_z≠dú_out
 
	mz≠dú
;

564 
coda_purgefid_out
 
	mpurgefid
;

565 
coda_ª∂a˚_out
 
	mª∂a˚
;

568 
	#PIOCPARM_MASK
 0x0000ffff

	)

569 
	sVi˚Io˘l
 {

570 
__u£r
 *
	mö
;

571 
__u£r
 *
	mout
;

572 
u_sh‹t
 
	mö_size
;

573 
u_sh‹t
 
	mout_size
;

576 
	sPio˘lD©a
 {

577 c⁄° 
__u£r
 *
	m∑th
;

578 
	mfﬁlow
;

579 
Vi˚Io˘l
 
	mvi
;

582 
	#CODA_CONTROL
 ".CONTROL"

	)

583 
	#CODA_CONTROLLEN
 8

	)

584 
	#CTL_INO
 -1

	)

586 
	#CODA_MOUNT_VERSION
 1

	)

588 
	scoda_mou¡_d©a
 {

589 
	mvîsi⁄
;

590 
	mfd
;

	@linux/coda_fs_i.h

12 #i‚de‡
_LINUX_CODA_FS_I


13 
	#_LINUX_CODA_FS_I


	)

	@linux/compat.h

12 #i‚de‡
_LINUX_COMPAT_H


13 
	#_LINUX_COMPAT_H


	)

	@linux/compiler-gcc.h

12 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

14 
	#RELOC_HIDE
(
±r
, 
off
Ë({ 
__±r
; 
	`__asm__
 ("" : "Ù"(__±rË: "0"’å)); (
	`ty≥of
’å)Ë(__±∏+ (off)); })

	)

16 
	#ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

17 
	#__ölöe__
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

18 
	#__ölöe
 
__ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

19 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

20 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

21 
	#__©åibuã_puª__
 
	`__©åibuã__
((
puª
))

	)

22 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
((
__c⁄°__
))

	)

	@linux/compiler.h

12 #i‚de‡
__LINUX_COMPILER_H


13 
	#__LINUX_COMPILER_H


	)

15 #i‚de‡
__ASSEMBLY__


17 
	#__u£r


	)

18 
	#__kî√l


	)

19 
	#__ß„


	)

20 
	#__f‹˚


	)

21 
	#__noˇ°


	)

22 
	#__iomem


	)

23 
	#__chk_u£r_±r
(
x
Ë()0

	)

24 
	#__chk_io_±r
(
x
Ë()0

	)

25 
	#__buûtö_w¨nög
(
x
, 
y
...Ë(1)

	)

26 
	#__acquúes
(
x
)

	)

27 
	#__ªÀa£s
(
x
)

	)

28 
	#__acquúe
(
x
Ë()0

	)

29 
	#__ªÀa£
(
x
Ë()0

	)

30 
	#__c⁄d_lock
(
x
Ë(x)

	)

34 #i‚de‡
__©åibuã_c⁄°__


35 
	#__©åibuã_c⁄°__


	)

	@linux/completion.h

12 #i‚de‡
__LINUX_COMPLETION_H


13 
	#__LINUX_COMPLETION_H


	)

15 
	~<löux/waô.h
>

17 
	scom∂ëi⁄
 {

18 
	md⁄e
;

19 
waô_queue_hód_t
 
	mwaô
;

22 
	#COMPLETION_INITIALIZER
(
w‹k
Ë{ 0, 
	`__WAIT_QUEUE_HEAD_INITIALIZER
((w‹k).
waô
Ë}

	)

24 
	#COMPLETION_INITIALIZER_ONSTACK
(
w‹k
Ë({ 
	`öô_com∂ëi⁄
(&w‹k); w‹k; })

	)

26 
	#DECLARE_COMPLETION
(
w‹k
Ë
com∂ëi⁄
 w‹k = 
	`COMPLETION_INITIALIZER
(w‹k)

	)

28 
	#DECLARE_COMPLETION_ONSTACK
(
w‹k
Ë
	`DECLARE_COMPLETION
(w‹k)

	)

30 
	#INIT_COMPLETION
(
x
Ë((x).
d⁄e
 = 0)

	)

	@linux/config.h

12 #i‚de‡
_LINUX_CONFIG_H


13 
	#_LINUX_CONFIG_H


	)

15 
	~<löux/autoc⁄f.h
>

	@linux/console_struct.h

12 
	~<löux/waô.h
>

13 
	~<löux/vt.h
>

15 
	gvt_°ru˘
;

17 
	#NPAR
 16

	)

19 
	svc_d©a
 {

20 
	mvc_num
;

21 
	mvc_cﬁs
;

22 
	mvc_rows
;

23 
	mvc_size_row
;

24 
	mvc_sˇn_löes
;

25 
	mvc_‹igö
;

26 
	mvc_s¸_íd
;

27 
	mvc_visibÀ_‹igö
;

28 
	mvc_t›
, 
	mvc_bŸtom
;

29 c⁄° 
c⁄sw
 *
	mvc_sw
;

30 *
	mvc_s¸ìnbuf
;

31 
	mvc_s¸ìnbuf_size
;

32 
	mvc_mode
;

34 
	mvc_©å
;

35 
	mvc_def_cﬁ‹
;

36 
	mvc_cﬁ‹
;

37 
	mvc_s_cﬁ‹
;

38 
	mvc_ulcﬁ‹
;

39 
	mvc_hÆfcﬁ‹
;

41 
	mvc_curs‹_ty≥
;

42 
	mvc_com∂emít_mask
;

43 
	mvc_s_com∂emít_mask
;

44 
	mvc_x
, 
	mvc_y
;

45 
	mvc_ßved_x
, 
	mvc_ßved_y
;

46 
	mvc_pos
;

48 
	mvc_hi_f⁄t_mask
;

49 
c⁄sﬁe_f⁄t
 
	mvc_f⁄t
;

50 
	mvc_video_îa£_ch¨
;

52 
	mvc_°©e
;

53 
	mvc_≈¨
,
	mvc_∑r
[
NPAR
];

54 
ây_°ru˘
 *
	mvc_ây
;

56 
vt_mode
 
	mvt_mode
;

57 
	mvt_pid
;

58 
	mvt_√wvt
;

59 
waô_queue_hód_t
 
	m∑°e_waô
;

61 
	mvc_ch¨£t
 : 1;

62 
	mvc_s_ch¨£t
 : 1;

63 
	mvc_di•_˘æ
 : 1;

64 
	mvc_toggÀ_mëa
 : 1;

65 
	mvc_decs˙m
 : 1;

66 
	mvc_decom
 : 1;

67 
	mvc_deˇwm
 : 1;

68 
	mvc_deccm
 : 1;

69 
	mvc_decim
 : 1;

70 
	mvc_deccﬁm
 : 1;

72 
	mvc_öãnsôy
 : 2;

73 
	mvc_undîlöe
 : 1;

74 
	mvc_blök
 : 1;

75 
	mvc_ªvî£
 : 1;

76 
	mvc_s_öãnsôy
 : 2;

77 
	mvc_s_undîlöe
 : 1;

78 
	mvc_s_blök
 : 1;

79 
	mvc_s_ªvî£
 : 1;

81 
	mvc_ques
 : 1;

82 
	mvc_√ed_wøp
 : 1;

83 
	mvc_ˇn_do_cﬁ‹
 : 1;

84 
	mvc_ªp‹t_mou£
 : 2;

85 
	mvc_kmÆlo˚d
 : 1;

86 
	mvc_utf
 : 1;

87 
	mvc_utf_cou¡
;

88 
	mvc_utf_ch¨
;

89 
	mvc_èb_°›
[8];

90 
	mvc_∑Àâe
[16*3];

91 * 
	mvc_å™¶©e
;

92 
	mvc_G0_ch¨£t
;

93 
	mvc_G1_ch¨£t
;

94 
	mvc_ßved_G0
;

95 
	mvc_ßved_G1
;

96 
	mvc_bñl_pôch
;

97 
	mvc_bñl_duøti⁄
;

98 
vc_d©a
 **
	mvc_di•œy_fg
;

99 
	mvc_uni_∑gedú
;

100 *
	mvc_uni_∑gedú_loc
;

104 
	svc
 {

105 
vc_d©a
 *
	md
;

109 
	#CUR_DEF
 0

	)

110 
	#CUR_NONE
 1

	)

111 
	#CUR_UNDERLINE
 2

	)

112 
	#CUR_LOWER_THIRD
 3

	)

113 
	#CUR_LOWER_HALF
 4

	)

114 
	#CUR_TWO_THIRDS
 5

	)

115 
	#CUR_BLOCK
 6

	)

116 
	#CUR_HWMASK
 0x0f

	)

117 
	#CUR_SWMASK
 0xfff0

	)

119 
	#CUR_DEFAULT
 
CUR_UNDERLINE


	)

121 
	#CON_IS_VISIBLE
(
c⁄p
Ë(*c⁄p->
vc_di•œy_fg
 =c⁄p)

	)

	@linux/cpu.h

12 #i‚de‡
_LINUX_CPU_H_


13 
	#_LINUX_CPU_H_


	)

15 
	~<löux/sysdev.h
>

16 
	~<löux/node.h
>

17 
	~<löux/compûî.h
>

18 
	~<löux/˝umask.h
>

19 
	~<asm/£m≠h‹e.h
>

21 
	s˝u
 {

22 
	mnode_id
;

23 
	mno_c⁄åﬁ
;

24 
sys_devi˚
 
	msysdev
;

27 
	gnŸifõr_block
;

29 
	#lock_˝u_hŸ∂ug
(Ëdÿ{ } 0)

	)

30 
	#u∆ock_˝u_hŸ∂ug
(Ëdÿ{ } 0)

	)

31 
	#lock_˝u_hŸ∂ug_öãºu±ibÀ
(Ë0

	)

32 
	#hŸ˝u_nŸifõr
(
‚
, 
¥i
Ëdÿ{ } 0)

	)

33 
	#ªgi°î_hŸ˝u_nŸifõr
(
nb
Ëdÿ{ } 0)

	)

34 
	#uƒegi°î_hŸ˝u_nŸifõr
(
nb
Ëdÿ{ } 0)

	)

	@linux/cpumask.h

12 #i‚de‡
__LINUX_CPUMASK_H


13 
	#__LINUX_CPUMASK_H


	)

15 
	~<löux/kî√l.h
>

16 
	~<löux/thªads.h
>

17 
	~<löux/bôm≠.h
>

19 °ru˘ { 
DECLARE_BITMAP
(
bôs
, 
NR_CPUS
); } 
	t˝umask_t
;

21 
	#˝u_£t
(
˝u
, 
d°
Ë
	`__˝u_£t
((˝u), &(d°))

	)

22 
	#˝u_˛ór
(
˝u
, 
d°
Ë
	`__˝u_˛ór
((˝u), &(d°))

	)

23 
	#˝us_£èŒ
(
d°
Ë
	`__˝us_£èŒ
(&(d°), 
NR_CPUS
)

	)

24 
	#˝us_˛ór
(
d°
Ë
	`__˝us_˛ór
(&(d°), 
NR_CPUS
)

	)

25 
	#˝u_is£t
(
˝u
, 
˝umask
Ë
	`ã°_bô
((˝u), (˝umask).
bôs
)

	)

26 
	#˝u_ã°_™d_£t
(
˝u
, 
˝umask
Ë
	`__˝u_ã°_™d_£t
((˝u), &(˝umask))

	)

27 
	#˝us_™d
(
d°
, 
§c1
, 
§c2
Ë
	`__˝us_™d
(&(d°), &(§c1), &(§c2), 
NR_CPUS
)

	)

28 
	#˝us_‹
(
d°
, 
§c1
, 
§c2
Ë
	`__˝us_‹
(&(d°), &(§c1), &(§c2), 
NR_CPUS
)

	)

29 
	#˝us_x‹
(
d°
, 
§c1
, 
§c2
Ë
	`__˝us_x‹
(&(d°), &(§c1), &(§c2), 
NR_CPUS
)

	)

30 
	#˝us_™dnŸ
(
d°
, 
§c1
, 
§c2
Ë
	`__˝us_™dnŸ
(&(d°), &(§c1), &(§c2), 
NR_CPUS
)

	)

31 
	#˝us_com∂emít
(
d°
, 
§c
Ë
	`__˝us_com∂emít
(&(d°), &(§c), 
NR_CPUS
)

	)

32 
	#˝us_equÆ
(
§c1
, 
§c2
Ë
	`__˝us_equÆ
(&(§c1), &(§c2), 
NR_CPUS
)

	)

33 
	#˝us_öãr£˘s
(
§c1
, 
§c2
Ë
	`__˝us_öãr£˘s
(&(§c1), &(§c2), 
NR_CPUS
)

	)

34 
	#˝us_sub£t
(
§c1
, 
§c2
Ë
	`__˝us_sub£t
(&(§c1), &(§c2), 
NR_CPUS
)

	)

35 
	#˝us_em±y
(
§c
Ë
	`__˝us_em±y
(&(§c), 
NR_CPUS
)

	)

36 
	#˝us_fuŒ
(
˝umask
Ë
	`__˝us_fuŒ
(&(˝umask), 
NR_CPUS
)

	)

37 
	#˝us_weight
(
˝umask
Ë
	`__˝us_weight
(&(˝umask), 
NR_CPUS
)

	)

38 
	#˝us_shi·_right
(
d°
, 
§c
, 
n
Ë
	`__˝us_shi·_right
(&(d°), &(§c), (n), 
NR_CPUS
)

	)

39 
	#˝us_shi·_À·
(
d°
, 
§c
, 
n
Ë
	`__˝us_shi·_À·
(&(d°), &(§c), (n), 
NR_CPUS
)

	)

40 
	#fú°_˝u
(
§c
Ë0

	)

41 
	#√xt_˝u
(
n
, 
§c
Ë1

	)

42 
	#˝umask_of_˝u
(
˝u
Ë({ 
	`ty≥of
(
_unu£d_˝umask_¨g_
Ë
m
; i‡((mË=()Ë{ m.
bôs
[0] = 1UL<<(˝u); } { 
	`˝us_˛ór
(m); 
	`˝u_£t
((˝u), m); } m; })

	)

43 
	#CPU_MASK_LAST_WORD
 
	`BITMAP_LAST_WORD_MASK
(
NR_CPUS
)

	)

44 #i‡
NR_CPUS
 <
BITS_PER_LONG


45 
	#CPU_MASK_ALL
 (
˝umask_t
Ë{ { [
	`BITS_TO_LONGS
(
NR_CPUS
)-1] = 
CPU_MASK_LAST_WORD
 } }

	)

47 
	#CPU_MASK_ALL
 (
˝umask_t
Ë{ { [0 ... 
	`BITS_TO_LONGS
(
NR_CPUS
)-2] = ~0UL, [BITS_TO_LONGS(NR_CPUS)-1] = 
CPU_MASK_LAST_WORD
 } }

	)

49 
	#CPU_MASK_NONE
 (
˝umask_t
Ë{ { [0 ... 
	`BITS_TO_LONGS
(
NR_CPUS
)-1] = 0UL } }

	)

50 
	#CPU_MASK_CPU0
 (
˝umask_t
Ë{ { [0] = 1UL } }

	)

51 
	#˝us_addr
(
§c
Ë((§c).
bôs
)

	)

52 
	#˝umask_s˙¥ötf
(
buf
, 
Àn
, 
§c
Ë
	`__˝umask_s˙¥ötf
((buf), (Àn), &(§c), 
NR_CPUS
)

	)

53 
	#˝umask_∑r£
(
ubuf
, 
uÀn
, 
d°
Ë
	`__˝umask_∑r£
((ubuf), (uÀn), &(d°), 
NR_CPUS
)

	)

54 
	#˝uli°_s˙¥ötf
(
buf
, 
Àn
, 
§c
Ë
	`__˝uli°_s˙¥ötf
((buf), (Àn), &(§c), 
NR_CPUS
)

	)

55 
	#˝uli°_∑r£
(
buf
, 
d°
Ë
	`__˝uli°_∑r£
((buf), &(d°), 
NR_CPUS
)

	)

56 
	#˝u_ªm≠
(
ﬁdbô
, 
ﬁd
, 
√w
Ë
	`__˝u_ªm≠
((ﬁdbô), &(ﬁd), &“ew), 
NR_CPUS
)

	)

57 
	#˝us_ªm≠
(
d°
, 
§c
, 
ﬁd
, 
√w
Ë
	`__˝us_ªm≠
(&(d°), &(§c), &(ﬁd), &“ew), 
NR_CPUS
)

	)

58 #i‡
NR_CPUS
 > 1

59 
	#f‹_óch_˝u_mask
(
˝u
, 
mask
Ë(˝uË
	`fú°_˝u
(mask); (˝uË< 
NR_CPUS
; (˝uË
	`√xt_˝u
((˝u), (mask)))

	)

61 
	#f‹_óch_˝u_mask
(
˝u
, 
mask
Ë(˝uË0; (˝uË< 1; (˝u)++, ()mask)

	)

64 #i‡
NR_CPUS
 > 1

65 
	#num_⁄löe_˝us
(Ë
	`˝us_weight
(
˝u_⁄löe_m≠
)

	)

66 
	#num_possibÀ_˝us
(Ë
	`˝us_weight
(
˝u_possibÀ_m≠
)

	)

67 
	#num_¥e£¡_˝us
(Ë
	`˝us_weight
(
˝u_¥e£¡_m≠
)

	)

68 
	#˝u_⁄löe
(
˝u
Ë
	`˝u_is£t
((˝u), 
˝u_⁄löe_m≠
)

	)

69 
	#˝u_possibÀ
(
˝u
Ë
	`˝u_is£t
((˝u), 
˝u_possibÀ_m≠
)

	)

70 
	#˝u_¥e£¡
(
˝u
Ë
	`˝u_is£t
((˝u), 
˝u_¥e£¡_m≠
)

	)

72 
	#num_⁄löe_˝us
(Ë1

	)

73 
	#num_possibÀ_˝us
(Ë1

	)

74 
	#num_¥e£¡_˝us
(Ë1

	)

75 
	#˝u_⁄löe
(
˝u
Ë((˝uË=0)

	)

76 
	#˝u_possibÀ
(
˝u
Ë((˝uË=0)

	)

77 
	#˝u_¥e£¡
(
˝u
Ë((˝uË=0)

	)

80 
	#highe°_possibÀ_¥o˚ss‹_id
(Ë0

	)

81 
	#™y_⁄löe_˝u
(
mask
Ë0

	)

83 
	#f‹_óch_possibÀ_˝u
(
˝u
Ë
	`f‹_óch_˝u_mask
((˝u), 
˝u_possibÀ_m≠
)

	)

84 
	#f‹_óch_⁄löe_˝u
(
˝u
Ë
	`f‹_óch_˝u_mask
((˝u), 
˝u_⁄löe_m≠
)

	)

85 
	#f‹_óch_¥e£¡_˝u
(
˝u
Ë
	`f‹_óch_˝u_mask
((˝u), 
˝u_¥e£¡_m≠
)

	)

	@linux/ctype.h

12 #i‚de‡
_LINUX_CTYPE_H


13 
	#_LINUX_CTYPE_H


	)

15 
	#_U
 0x01

	)

16 
	#_L
 0x02

	)

17 
	#_D
 0x04

	)

18 
	#_C
 0x08

	)

19 
	#_P
 0x10

	)

20 
	#_S
 0x20

	)

21 
	#_X
 0x40

	)

22 
	#_SP
 0x80

	)

24 
	#__ismask
(
x
Ë(
_˘y≥
[()()(x)])

	)

26 
	#iß um
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
|
_D
)Ë!0)

	)

27 
	#ißÕha
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
)Ë!0)

	)

28 
	#is˙ål
(
c
Ë((
	`__ismask
(c)&(
_C
)Ë!0)

	)

29 
	#isdigô
(
c
Ë((
	`__ismask
(c)&(
_D
)Ë!0)

	)

30 
	#isgøph
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
)Ë!0)

	)

31 
	#i¶owî
(
c
Ë((
	`__ismask
(c)&(
_L
)Ë!0)

	)

32 
	#i•röt
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
|
_SP
)Ë!0)

	)

33 
	#i•un˘
(
c
Ë((
	`__ismask
(c)&(
_P
)Ë!0)

	)

34 
	#is•a˚
(
c
Ë((
	`__ismask
(c)&(
_S
)Ë!0)

	)

35 
	#isuµî
(
c
Ë((
	`__ismask
(c)&(
_U
)Ë!0)

	)

36 
	#isxdigô
(
c
Ë((
	`__ismask
(c)&(
_D
|
_X
)Ë!0)

	)

38 
	#ißscii
(
c
Ë((()(c))<=0x7f)

	)

39 
	#tﬂscii
(
c
Ë((()(c))&0x7f)

	)

41 
	#tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

42 
	#touµî
(
c
Ë
	`__touµî
(c)

	)

	@linux/dccp.h

12 #i‚de‡
_LINUX_DCCP_H


13 
	#_LINUX_DCCP_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<asm/byã‹dî.h
>

18 
	sdc˝_hdr
 {

19 
__be16
 
	mdc˝h_•‹t
,

20 
	mdc˝h_dp‹t
;

21 
__u8
 
	mdc˝h_doff
;

22 #ifde‡
__LITTLE_ENDIAN_BITFIELD


23 
__u8
 
	mdc˝h_cscov
:4,

24 
	mdc˝h_ccvÆ
:4;

25 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

26 
__u8
 
	mdc˝h_ccvÆ
:4,

27 
	mdc˝h_cscov
:4;

31 
__u16
 
	mdc˝h_checksum
;

32 #ifde‡
__LITTLE_ENDIAN_BITFIELD


33 
__u8
 
	mdc˝h_x
:1,

34 
	mdc˝h_ty≥
:4,

35 
	mdc˝h_ª£rved
:3;

36 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

37 
__u8
 
	mdc˝h_ª£rved
:3,

38 
	mdc˝h_ty≥
:4,

39 
	mdc˝h_x
:1;

43 
__u8
 
	mdc˝h_£q2
;

44 
__be16
 
	mdc˝h_£q
;

47 
	sdc˝_hdr_ext
 {

48 
__be32
 
	mdc˝h_£q_low
;

51 
	sdc˝_hdr_ªque°
 {

52 
__be32
 
	mdc˝h_ªq_£rvi˚
;

55 
	sdc˝_hdr_ack_bôs
 {

56 
__be16
 
	mdc˝h_ª£rved1
;

57 
__be16
 
	mdc˝h_ack_ƒ_high
;

58 
__be32
 
	mdc˝h_ack_ƒ_low
;

61 
	sdc˝_hdr_ª•⁄£
 {

62 
dc˝_hdr_ack_bôs
 
	mdc˝h_ª•_ack
;

63 
__be32
 
	mdc˝h_ª•_£rvi˚
;

66 
	sdc˝_hdr_ª£t
 {

67 
dc˝_hdr_ack_bôs
 
	mdc˝h_ª£t_ack
;

68 
__u8
 
	mdc˝h_ª£t_code
,

69 
	mdc˝h_ª£t_d©a
[3];

72 
	edc˝_pkt_ty≥
 {

73 
	mDCCP_PKT_REQUEST
 = 0,

74 
	mDCCP_PKT_RESPONSE
,

75 
	mDCCP_PKT_DATA
,

76 
	mDCCP_PKT_ACK
,

77 
	mDCCP_PKT_DATAACK
,

78 
	mDCCP_PKT_CLOSEREQ
,

79 
	mDCCP_PKT_CLOSE
,

80 
	mDCCP_PKT_RESET
,

81 
	mDCCP_PKT_SYNC
,

82 
	mDCCP_PKT_SYNCACK
,

83 
	mDCCP_PKT_INVALID
,

86 
	#DCCP_NR_PKT_TYPES
 
DCCP_PKT_INVALID


	)

89 
	mDCCPO_PADDING
 = 0,

90 
	mDCCPO_MANDATORY
 = 1,

91 
	mDCCPO_MIN_RESERVED
 = 3,

92 
	mDCCPO_MAX_RESERVED
 = 31,

93 
	mDCCPO_CHANGE_L
 = 32,

94 
	mDCCPO_CONFIRM_L
 = 33,

95 
	mDCCPO_CHANGE_R
 = 34,

96 
	mDCCPO_CONFIRM_R
 = 35,

97 
	mDCCPO_NDP_COUNT
 = 37,

98 
	mDCCPO_ACK_VECTOR_0
 = 38,

99 
	mDCCPO_ACK_VECTOR_1
 = 39,

100 
	mDCCPO_TIMESTAMP
 = 41,

101 
	mDCCPO_TIMESTAMP_ECHO
 = 42,

102 
	mDCCPO_ELAPSED_TIME
 = 43,

103 
	mDCCPO_MAX
 = 45,

104 
	mDCCPO_MIN_CCID_SPECIFIC
 = 128,

105 
	mDCCPO_MAX_CCID_SPECIFIC
 = 255,

109 
	mDCCPF_RESERVED
 = 0,

110 
	mDCCPF_CCID
 = 1,

111 
	mDCCPF_SEQUENCE_WINDOW
 = 3,

112 
	mDCCPF_ACK_RATIO
 = 5,

113 
	mDCCPF_SEND_ACK_VECTOR
 = 6,

114 
	mDCCPF_SEND_NDP_COUNT
 = 7,

116 
	mDCCPF_MIN_CCID_SPECIFIC
 = 128,

117 
	mDCCPF_MAX_CCID_SPECIFIC
 = 255,

120 
	sdc˝_so_„©
 {

121 
__u8
 
	mdc˝sf_„©
;

122 
__u8
 *
	mdc˝sf_vÆ
;

123 
__u8
 
	mdc˝sf_Àn
;

126 
	#DCCP_SOCKOPT_PACKET_SIZE
 1

	)

127 
	#DCCP_SOCKOPT_SERVICE
 2

	)

128 
	#DCCP_SOCKOPT_CHANGE_L
 3

	)

129 
	#DCCP_SOCKOPT_CHANGE_R
 4

	)

130 
	#DCCP_SOCKOPT_CCID_RX_INFO
 128

	)

131 
	#DCCP_SOCKOPT_CCID_TX_INFO
 192

	)

133 
	#DCCP_SERVICE_LIST_MAX_LEN
 32

	)

	@linux/debug_locks.h

12 #i‚de‡
__LINUX_DEBUG_LOCKING_H


13 
	#__LINUX_DEBUG_LOCKING_H


	)

15 
	gèsk_°ru˘
;

17 
	#_RET_IP_
 ()
	`__buûtö_ªtu∫_addªss
(0)

	)

18 
	#_THIS_IP_
 ({ 
__œbñ__
 
__hîe
; __hîe: ()&&__hîe; })

	)

20 
	#DEBUG_LOCKS_WARN_ON
(
c
Ë({ 
__ªt
 = 0; i‡(
	`u∆ikñy
(c)Ë{ i‡(
	`debug_locks_off
()Ë
	`WARN_ON
(1); __ªà1; } __ªt; })

	)

22 
	#SMP_DEBUG_LOCKS_WARN_ON
(
c
Ëdÿ{ } 0)

	)

24 
	#lockög_£l·e°
(Ëdÿ{ } 0)

	)

	@linux/delay.h

12 #i‚de‡
_LINUX_DELAY_H


13 
	#_LINUX_DELAY_H


	)

15 
	~<asm/dñay.h
>

17 #i‚de‡
MAX_UDELAY_MS


18 
	#MAX_UDELAY_MS
 5

	)

21 #i‚de‡
mdñay


22 
	#mdñay
(
n
Ë–(
	`__buûtö_c⁄°™t_p
“Ë&& (n)<=
MAX_UDELAY_MS
Ë? 
	`udñay
(“)*1000Ë: ({
__ms
=“); __ms--Ëudñay(1000);}))

	)

25 #i‚de‡
ndñay


26 
	#ndñay
(
x
Ë
	`udñay
(((x)+999)/1000)

	)

	@linux/device.h

12 #i‚de‡
_DEVICE_H_


13 
	#_DEVICE_H_


	)

15 
	~<löux/i›‹t.h
>

16 
	~<löux/kobje˘.h
>

17 
	~<löux/kli°.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/ty≥s.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/pm.h
>

22 
	~<asm/£m≠h‹e.h
>

23 
	~<asm/©omic.h
>

25 
	#DEVICE_NAME_SIZE
 50

	)

26 
	#DEVICE_NAME_HALF
 
	`__°rögify
(20)

	)

27 
	#DEVICE_ID_SIZE
 32

	)

28 
	#BUS_ID_SIZE
 
KOBJ_NAME_LEN


	)

30 
	gdevi˚
;

31 
	gdevi˚_drivî
;

32 
	g˛ass
;

33 
	g˛ass_devi˚
;

35 
	sbus_ty≥
 {

36 c⁄° * 
	m«me
;

38 
subsy°em
 
	msubsys
;

39 
k£t
 
	mdrivîs
;

40 
k£t
 
	mdevi˚s
;

41 
kli°
 
	mkli°_devi˚s
;

42 
kli°
 
	mkli°_drivîs
;

44 
bus_©åibuã
 * 
	mbus_©ås
;

45 
devi˚_©åibuã
 * 
	mdev_©ås
;

46 
drivî_©åibuã
 * 
	mdrv_©ås
;

48 (*
	mm©ch
)(
devi˚
 * 
	mdev
, 
devi˚_drivî
 * 
	mdrv
);

49 (*
	muevít
)(
devi˚
 *
	mdev
, **
	mívp
,

50 
	mnum_ívp
, *
	mbuf„r
, 
	mbuf„r_size
);

51 (*
	m¥obe
)(
devi˚
 * 
	mdev
);

52 (*
	mªmove
)(
devi˚
 * 
	mdev
);

53 (*
	mshutdown
)(
devi˚
 * 
	mdev
);

54 (*
	msu•íd
)(
devi˚
 * 
	mdev
, 
pm_mesßge_t
 
	m°©e
);

55 (*
	mªsume
)(
devi˚
 * 
	mdev
);

58 
devi˚
 * 
bus_föd_devi˚
(
bus_ty≥
 *
bus
, devi˚ *
°¨t
,

59 *
d©a
, (*
m©ch
)(
devi˚
 *, *));

61 
	sbus_©åibuã
 {

62 
©åibuã
 
©å
;

63 
	`ssize_t
 (*
show
)(
bus_ty≥
 *, * 
buf
);

64 
	`ssize_t
 (*
°‹e
)(
bus_ty≥
 *, c⁄° * 
buf
, 
size_t
 
cou¡
);

67 
	#BUS_ATTR
(
_«me
,
_mode
,
_show
,
_°‹e
Ë
bus_©åibuã
 
bus_©å_
##_«mê
	`__ATTR
(_«me,_mode,_show,_°‹e)

	)

69 
	sdevi˚_drivî
 {

70 c⁄° * 
«me
;

71 
bus_ty≥
 * 
bus
;

73 
com∂ëi⁄
 
u∆ﬂded
;

74 
kobje˘
 
kobj
;

75 
kli°
 
kli°_devi˚s
;

76 
kli°_node
 
knode_bus
;

78 
moduÀ
 * 
ow√r
;

80 (*
¥obe
Ë(
devi˚
 * 
dev
);

81 (*
ªmove
Ë(
devi˚
 * 
dev
);

82 (*
shutdown
Ë(
devi˚
 * 
dev
);

83 (*
su•íd
Ë(
devi˚
 * 
dev
, 
pm_mesßge_t
 
°©e
);

84 (*
ªsume
Ë(
devi˚
 * 
dev
);

87 
	sdrivî_©åibuã
 {

88 
©åibuã
 
©å
;

89 
	`ssize_t
 (*
show
)(
devi˚_drivî
 *, * 
buf
);

90 
	`ssize_t
 (*
°‹e
)(
devi˚_drivî
 *, c⁄° * 
buf
, 
size_t
 
cou¡
);

93 
	#DRIVER_ATTR
(
_«me
,
_mode
,
_show
,
_°‹e
Ë
drivî_©åibuã
 
drivî_©å_
##_«mê
	`__ATTR
(_«me,_mode,_show,_°‹e)

	)

95 
devi˚
 * 
	`drivî_föd_devi˚
(
devi˚_drivî
 *
drv
,

96 
devi˚
 *
°¨t
, *
d©a
,

97 (*
m©ch
)(
devi˚
 *, *));

99 
˛ass
 
	s
{

100 c⁄° * 
«me
;

101 
moduÀ
 * 
ow√r
;

103 
subsy°em
 
subsys
;

104 
li°_hód
 
chûdªn
;

105 
li°_hód
 
devi˚s
;

106 
li°_hód
 
öãrÁ˚s
;

107 
£m≠h‹e
 
£m
;

109 
˛ass_©åibuã
 * 
˛ass_©ås
;

110 
˛ass_devi˚_©åibuã
 * 
˛ass_dev_©ås
;

112 (*
uevít
)(
˛ass_devi˚
 *
dev
, **
ívp
,

113 
num_ívp
, *
buf„r
, 
buf„r_size
);

115 (*
ªÀa£
)(
˛ass_devi˚
 *
dev
);

116 (*
˛ass_ªÀa£
)(
˛ass
 *class);

119 
	s˛ass_©åibuã
 {

120 
©åibuã
 
©å
;

121 
	`ssize_t
 (*
show
)(
˛ass
 *, * 
buf
);

122 
	`ssize_t
 (*
°‹e
)(
˛ass
 *, c⁄° * 
buf
, 
size_t
 
cou¡
);

125 
	#CLASS_ATTR
(
_«me
,
_mode
,
_show
,
_°‹e
Ë
˛ass_©åibuã
 
˛ass_©å_
##_«mê
	`__ATTR
(_«me,_mode,_show,_°‹e)

	)

127 
	s˛ass_devi˚_©åibuã
 {

128 
©åibuã
 
©å
;

129 
	`ssize_t
 (*
show
)(
˛ass_devi˚
 *, * 
buf
);

130 
	`ssize_t
 (*
°‹e
)(
˛ass_devi˚
 *, c⁄° * 
buf
, 
size_t
 
cou¡
);

133 
	#CLASS_DEVICE_ATTR
(
_«me
,
_mode
,
_show
,
_°‹e
Ë
˛ass_devi˚_©åibuã
 
˛ass_devi˚_©å_
##_«mê
	`__ATTR
(_«me,_mode,_show,_°‹e)

	)

135 
	s˛ass_devi˚
 {

136 
li°_hód
 
node
;

138 
kobje˘
 
kobj
;

139 
˛ass
 * class;

140 
dev_t
 
devt
;

141 
˛ass_devi˚_©åibuã
 *
devt_©å
;

142 
˛ass_devi˚_©åibuã
 
uevít_©å
;

143 
devi˚
 * 
dev
;

144 * 
˛ass_d©a
;

145 
˛ass_devi˚
 *
∑ª¡
;

146 
©åibuã_group
 ** 
groups
;

148 (*
ªÀa£
)(
˛ass_devi˚
 *
dev
);

149 (*
uevít
)(
˛ass_devi˚
 *
dev
, **
ívp
,

150 
num_ívp
, *
buf„r
, 
buf„r_size
);

151 
˛ass_id
[
BUS_ID_SIZE
];

154 
	s˛ass_öãrÁ˚
 {

155 
li°_hód
 
node
;

156 
˛ass
 *class;

158 (*
add
Ë(
˛ass_devi˚
 *, 
˛ass_öãrÁ˚
 *);

159 (*
ªmove
Ë(
˛ass_devi˚
 *, 
˛ass_öãrÁ˚
 *);

162 
	sdevi˚_©åibuã
 {

163 
©åibuã
 
©å
;

164 
	`ssize_t
 (*
show
)(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
,

165 *
buf
);

166 
	`ssize_t
 (*
°‹e
)(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
,

167 c⁄° *
buf
, 
size_t
 
cou¡
);

170 
	#DEVICE_ATTR
(
_«me
,
_mode
,
_show
,
_°‹e
Ë
devi˚_©åibuã
 
dev_©å_
##_«mê
	`__ATTR
(_«me,_mode,_show,_°‹e)

	)

172 
	sdevi˚
 {

173 
kli°
 
kli°_chûdªn
;

174 
kli°_node
 
knode_∑ª¡
;

175 
kli°_node
 
knode_drivî
;

176 
kli°_node
 
knode_bus
;

177 
devi˚
 * 
∑ª¡
;

179 
kobje˘
 
kobj
;

180 
bus_id
[
BUS_ID_SIZE
];

181 
devi˚_©åibuã
 
uevít_©å
;

182 
devi˚_©åibuã
 *
devt_©å
;

184 
£m≠h‹e
 
£m
;

186 
bus_ty≥
 * 
bus
;

187 
devi˚_drivî
 *
drivî
;

188 *
drivî_d©a
;

189 *
∂©f‹m_d©a
;

190 *
fúmw¨e_d©a
;

191 
dev_pm_öfo
 
powî
;

193 
u64
 *
dma_mask
;

194 
u64
 
cohîít_dma_mask
;

196 
li°_hód
 
dma_poﬁs
;

198 
dma_cohîít_mem
 *
dma_mem
;

200 
li°_hód
 
node
;

201 
˛ass
 *class;

202 
dev_t
 
devt
;

204 (*
ªÀa£
)(
devi˚
 * 
dev
);

207 
	#dev_¥ötk
(
Àvñ
, 
dev
, 
f‹m©
, 
¨g
...Ë
	`¥ötk
÷evñ "%†%s: " f‹m© , 
	`dev_drivî_°rög
(devË, (dev)->
bus_id
 , ##árg)

	)

209 #ifde‡
DEBUG


210 
	#dev_dbg
(
dev
, 
f‹m©
, 
¨g
...Ë
	`dev_¥ötk
(
KERN_DEBUG
 , dev , f‹m© , ##árg)

	)

212 
	#dev_dbg
(
dev
, 
f‹m©
, 
¨g
...Ëdÿ{ ()(dev); 
	}
} 0)

	)

215 
	#dev_îr
(
dev
, 
f‹m©
, 
¨g
...Ë
	`dev_¥ötk
(
KERN_ERR
 , dev , f‹m© , ##árg)

	)

216 
	#dev_öfo
(
dev
, 
f‹m©
, 
¨g
...Ë
	`dev_¥ötk
(
KERN_INFO
 , dev , f‹m© , ##árg)

	)

217 
	#dev_w¨n
(
dev
, 
f‹m©
, 
¨g
...Ë
	`dev_¥ötk
(
KERN_WARNING
 , dev , f‹m© , ##árg)

	)

218 
	#dev_nŸi˚
(
dev
, 
f‹m©
, 
¨g
...Ë
	`dev_¥ötk
(
KERN_NOTICE
 , dev , f‹m© , ##árg)

	)

220 
	#MODULE_ALIAS_CHARDEV
(
maj‹
,
mö‹
Ë
	`MODULE_ALIAS
("ch¨-maj‹-" 
	`__°rögify
(maj‹Ë"-" __°rögify(mö‹))

	)

221 
	#MODULE_ALIAS_CHARDEV_MAJOR
(
maj‹
Ë
	`MODULE_ALIAS
("ch¨-maj‹-" 
	`__°rögify
(maj‹Ë"-*")

	)

	@linux/dirent.h

12 #i‚de‡
_LINUX_DIRENT_H


13 
	#_LINUX_DIRENT_H


	)

15 
	sdúít
 {

16 
	md_öo
;

17 
__kî√l_off_t
 
	md_off
;

18 
	md_ª˛í
;

19 
	md_«me
[256];

22 
	sdúít64
 {

23 
__u64
 
	md_öo
;

24 
__s64
 
	md_off
;

25 
	md_ª˛í
;

26 
	md_ty≥
;

27 
	md_«me
[256];

	@linux/dm-ioctl.h

12 #i‚de‡
_LINUX_DM_IOCTL_V4_H


13 
	#_LINUX_DM_IOCTL_V4_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#DM_DIR
 "m≠≥r"

	)

18 
	#DM_MAX_TYPE_NAME
 16

	)

19 
	#DM_NAME_LEN
 128

	)

20 
	#DM_UUID_LEN
 129

	)

22 
	sdm_io˘l
 {

24 
uöt32_t
 
	mvîsi⁄
[3];

25 
uöt32_t
 
	md©a_size
;

27 
uöt32_t
 
	md©a_°¨t
;

29 
uöt32_t
 
	mèrgë_cou¡
;

30 
öt32_t
 
	m›í_cou¡
;

31 
uöt32_t
 
	mÊags
;

32 
uöt32_t
 
	mevít_ƒ
;

33 
uöt32_t
 
	m∑ddög
;

35 
uöt64_t
 
	mdev
;

37 
	m«me
[
DM_NAME_LEN
];

38 
	muuid
[
DM_UUID_LEN
];

39 
	md©a
[7];

42 
	sdm_èrgë_•ec
 {

43 
uöt64_t
 
	m£˘‹_°¨t
;

44 
uöt64_t
 
	mÀngth
;

45 
öt32_t
 
	m°©us
;

47 
uöt32_t
 
	m√xt
;

49 
	mèrgë_ty≥
[
DM_MAX_TYPE_NAME
];

53 
	sdm_èrgë_dïs
 {

54 
uöt32_t
 
	mcou¡
;

55 
uöt32_t
 
	m∑ddög
;

56 
uöt64_t
 
	mdev
[0];

59 
	sdm_«me_li°
 {

60 
uöt64_t
 
	mdev
;

61 
uöt32_t
 
	m√xt
;

62 
	m«me
[0];

65 
	sdm_èrgë_vîsi⁄s
 {

66 
uöt32_t
 
	m√xt
;

67 
uöt32_t
 
	mvîsi⁄
[3];

69 
	m«me
[0];

72 
	sdm_èrgë_msg
 {

73 
uöt64_t
 
	m£˘‹
;

75 
	mmesßge
[0];

80 
	mDM_VERSION_CMD
 = 0,

81 
	mDM_REMOVE_ALL_CMD
,

82 
	mDM_LIST_DEVICES_CMD
,

84 
	mDM_DEV_CREATE_CMD
,

85 
	mDM_DEV_REMOVE_CMD
,

86 
	mDM_DEV_RENAME_CMD
,

87 
	mDM_DEV_SUSPEND_CMD
,

88 
	mDM_DEV_STATUS_CMD
,

89 
	mDM_DEV_WAIT_CMD
,

91 
	mDM_TABLE_LOAD_CMD
,

92 
	mDM_TABLE_CLEAR_CMD
,

93 
	mDM_TABLE_DEPS_CMD
,

94 
	mDM_TABLE_STATUS_CMD
,

96 
	mDM_LIST_VERSIONS_CMD
,

97 
	mDM_TARGET_MSG_CMD
,

98 
	mDM_DEV_SET_GEOMETRY_CMD


101 
	#DM_IOCTL
 0xfd

	)

103 
	#DM_VERSION
 
	`_IOWR
(
DM_IOCTL
, 
DM_VERSION_CMD
, 
dm_io˘l
)

	)

104 
	#DM_REMOVE_ALL
 
	`_IOWR
(
DM_IOCTL
, 
DM_REMOVE_ALL_CMD
, 
dm_io˘l
)

	)

105 
	#DM_LIST_DEVICES
 
	`_IOWR
(
DM_IOCTL
, 
DM_LIST_DEVICES_CMD
, 
dm_io˘l
)

	)

107 
	#DM_DEV_CREATE
 
	`_IOWR
(
DM_IOCTL
, 
DM_DEV_CREATE_CMD
, 
dm_io˘l
)

	)

108 
	#DM_DEV_REMOVE
 
	`_IOWR
(
DM_IOCTL
, 
DM_DEV_REMOVE_CMD
, 
dm_io˘l
)

	)

109 
	#DM_DEV_RENAME
 
	`_IOWR
(
DM_IOCTL
, 
DM_DEV_RENAME_CMD
, 
dm_io˘l
)

	)

110 
	#DM_DEV_SUSPEND
 
	`_IOWR
(
DM_IOCTL
, 
DM_DEV_SUSPEND_CMD
, 
dm_io˘l
)

	)

111 
	#DM_DEV_STATUS
 
	`_IOWR
(
DM_IOCTL
, 
DM_DEV_STATUS_CMD
, 
dm_io˘l
)

	)

112 
	#DM_DEV_WAIT
 
	`_IOWR
(
DM_IOCTL
, 
DM_DEV_WAIT_CMD
, 
dm_io˘l
)

	)

114 
	#DM_TABLE_LOAD
 
	`_IOWR
(
DM_IOCTL
, 
DM_TABLE_LOAD_CMD
, 
dm_io˘l
)

	)

115 
	#DM_TABLE_CLEAR
 
	`_IOWR
(
DM_IOCTL
, 
DM_TABLE_CLEAR_CMD
, 
dm_io˘l
)

	)

116 
	#DM_TABLE_DEPS
 
	`_IOWR
(
DM_IOCTL
, 
DM_TABLE_DEPS_CMD
, 
dm_io˘l
)

	)

117 
	#DM_TABLE_STATUS
 
	`_IOWR
(
DM_IOCTL
, 
DM_TABLE_STATUS_CMD
, 
dm_io˘l
)

	)

119 
	#DM_LIST_VERSIONS
 
	`_IOWR
(
DM_IOCTL
, 
DM_LIST_VERSIONS_CMD
, 
dm_io˘l
)

	)

121 
	#DM_TARGET_MSG
 
	`_IOWR
(
DM_IOCTL
, 
DM_TARGET_MSG_CMD
, 
dm_io˘l
)

	)

122 
	#DM_DEV_SET_GEOMETRY
 
	`_IOWR
(
DM_IOCTL
, 
DM_DEV_SET_GEOMETRY_CMD
, 
dm_io˘l
)

	)

124 
	#DM_VERSION_MAJOR
 4

	)

125 
	#DM_VERSION_MINOR
 14

	)

126 
	#DM_VERSION_PATCHLEVEL
 0

	)

127 
	#DM_VERSION_EXTRA
 "-io˘»(2008-04-23)"

	)

129 
	#DM_READONLY_FLAG
 (1 << 0)

	)

130 
	#DM_SUSPEND_FLAG
 (1 << 1)

	)

131 
	#DM_PERSISTENT_DEV_FLAG
 (1 << 3)

	)

133 
	#DM_STATUS_TABLE_FLAG
 (1 << 4)

	)

135 
	#DM_ACTIVE_PRESENT_FLAG
 (1 << 5)

	)

136 
	#DM_INACTIVE_PRESENT_FLAG
 (1 << 6)

	)

138 
	#DM_BUFFER_FULL_FLAG
 (1 << 8)

	)

140 
	#DM_SKIP_BDGET_FLAG
 (1 << 9)

	)

142 
	#DM_SKIP_LOCKFS_FLAG
 (1 << 10)

	)

144 
	#DM_NOFLUSH_FLAG
 (1 << 11)

	)

	@linux/dma-mapping.h

12 #i‚de‡
_ASM_LINUX_DMA_MAPPING_H


13 
	#_ASM_LINUX_DMA_MAPPING_H


	)

15 
	~<löux/devi˚.h
>

16 
	~<löux/îr.h
>

18 
	edma_d©a_dúe˘i⁄
 {

19 
	mDMA_BIDIRECTIONAL
 = 0,

20 
	mDMA_TO_DEVICE
 = 1,

21 
	mDMA_FROM_DEVICE
 = 2,

22 
	mDMA_NONE
 = 3,

25 
	#DMA_64BIT_MASK
 0xffffffffffffffffULL

	)

26 
	#DMA_48BIT_MASK
 0x0000ffffffffffffULL

	)

27 
	#DMA_40BIT_MASK
 0x000000ffffffffffULL

	)

28 
	#DMA_39BIT_MASK
 0x0000007fffffffffULL

	)

29 
	#DMA_32BIT_MASK
 0x00000000ffffffffULL

	)

30 
	#DMA_31BIT_MASK
 0x000000007fffffffULL

	)

31 
	#DMA_30BIT_MASK
 0x000000003fffffffULL

	)

32 
	#DMA_29BIT_MASK
 0x000000001fffffffULL

	)

33 
	#DMA_28BIT_MASK
 0x000000000fffffffULL

	)

34 
	#DMA_24BIT_MASK
 0x0000000000ffffffULL

	)

36 
	~<asm/dma-m≠pög.h
>

38 
	#dma_sync_sögÀ
 
dma_sync_sögÀ_f‹_˝u


	)

39 
	#dma_sync_sg
 
dma_sync_sg_f‹_˝u


	)

41 
	#DMA_MEMORY_MAP
 0x01

	)

42 
	#DMA_MEMORY_IO
 0x02

	)

43 
	#DMA_MEMORY_INCLUDES_CHILDREN
 0x04

	)

44 
	#DMA_MEMORY_EXCLUSIVE
 0x08

	)

46 #i‚de‡
ARCH_HAS_DMA_DECLARE_COHERENT_MEMORY


	@linux/dmaengine.h

12 #i‚de‡
DMAENGINE_H


13 
	#DMAENGINE_H


	)

	@linux/efs_dir.h

12 #i‚de‡
__EFS_DIR_H__


13 
	#__EFS_DIR_H__


	)

15 
	#EFS_DIRBSIZE_BITS
 
EFS_BLOCKSIZE_BITS


	)

16 
	#EFS_DIRBSIZE
 (1 << 
EFS_DIRBSIZE_BITS
)

	)

18 
	sefs_díåy
 {

19 
__be32
 
	möode
;

20 
	m«mñí
;

21 
	m«me
[3];

24 
	#EFS_DENTSIZE
 ((
efs_díåy
Ë- 3 + 1)

	)

25 
	#EFS_MAXNAMELEN
 ((1 << ((Ë* 8)Ë- 1)

	)

27 
	#EFS_DIRBLK_HEADERSIZE
 4

	)

28 
	#EFS_DIRBLK_MAGIC
 0xbìf

	)

30 
	sefs_dú
 {

31 
__be16
 
	mmagic
;

32 
	mfú°u£d
;

33 
	m¶Ÿs
;

35 
	m•a˚
[
EFS_DIRBSIZE
 - 
EFS_DIRBLK_HEADERSIZE
];

38 
	#EFS_MAXENTS
 ((
EFS_DIRBSIZE
 - 
EFS_DIRBLK_HEADERSIZE
Ë/ (
EFS_DENTSIZE
 + ()))

	)

40 
	#EFS_SLOTAT
(
dú
, 
¶Ÿ
Ë
	`EFS_REALOFF
((dú)->
•a˚
[¶Ÿ])

	)

42 
	#EFS_REALOFF
(
off£t
Ë((off£à<< 1))

	)

	@linux/efs_fs_i.h

12 #i‚de‡
__EFS_FS_I_H__


13 
	#__EFS_FS_I_H__


	)

15 
öt32_t
 
	tefs_block_t
;

16 
uöt32_t
 
	tefs_öo_t
;

18 
	#EFS_DIRECTEXTENTS
 12

	)

20 
	uexã¡_u
 {

21 
	møw
[8];

22 
	sexã¡_s
 {

23 
	mex_magic
:8;

24 
	mex_bn
:24;

25 
	mex_Àngth
:8;

26 
	mex_off£t
:24;

27 } 
	mcooked
;

28 } 
	tefs_exã¡
;

30 
	sedevs
 {

31 
__be16
 
	modev
;

32 
__be32
 
	mndev
;

33 } 
	tefs_devs
;

35 
	sefs_döode
 {

36 
__be16
 
	mdi_mode
;

37 
__be16
 
	mdi_∆ök
;

38 
__be16
 
	mdi_uid
;

39 
__be16
 
	mdi_gid
;

40 
__be32
 
	mdi_size
;

41 
__be32
 
	mdi_©ime
;

42 
__be32
 
	mdi_mtime
;

43 
__be32
 
	mdi_˘ime
;

44 
__be32
 
	mdi_gí
;

45 
__be16
 
	mdi_numexã¡s
;

46 
u_ch¨
 
	mdi_vîsi⁄
;

47 
u_ch¨
 
	mdi_•¨e
;

48 
	udi_addr
 {

49 
efs_exã¡
 
	mdi_exã¡s
[
EFS_DIRECTEXTENTS
];

50 
efs_devs
 
	mdi_dev
;

51 } 
	mdi_u
;

54 
	sefs_öode_öfo
 {

55 
	mnumexã¡s
;

56 
	mœ°exã¡
;

58 
efs_exã¡
 
	mexã¡s
[
EFS_DIRECTEXTENTS
];

59 
öode
 
	mvfs_öode
;

	@linux/efs_fs_sb.h

12 #i‚de‡
__EFS_FS_SB_H__


13 
	#__EFS_FS_SB_H__


	)

15 
	#EFS_SUPER_MAGIC
 0x414A53

	)

17 
	#EFS_MAGIC
 0x072959

	)

18 
	#EFS_NEWMAGIC
 0x07295a

	)

20 
	#IS_EFS_MAGIC
(
x
Ë((x =
EFS_MAGIC
Ë|| (x =
EFS_NEWMAGIC
))

	)

22 
	#EFS_SUPER
 1

	)

23 
	#EFS_ROOTINODE
 2

	)

25 
	sefs_su≥r
 {

26 
__be32
 
	mfs_size
;

27 
__be32
 
	mfs_fú°cg
;

28 
__be32
 
	mfs_cgfsize
;

29 
__be16
 
	mfs_cgisize
;

30 
__be16
 
	mfs_£˘‹s
;

31 
__be16
 
	mfs_hóds
;

32 
__be16
 
	mfs_ncg
;

33 
__be16
 
	mfs_dúty
;

34 
__be32
 
	mfs_time
;

35 
__be32
 
	mfs_magic
;

36 
	mfs_‚ame
[6];

37 
	mfs_Âack
[6];

38 
__be32
 
	mfs_bmsize
;

39 
__be32
 
	mfs_t‰ì
;

40 
__be32
 
	mfs_töode
;

41 
__be32
 
	mfs_bmblock
;

42 
__be32
 
	mfs_ª∂sb
;

43 
__be32
 
	mfs_œ°üŒoc
;

44 
	mfs_•¨e
[20];

45 
__be32
 
	mfs_checksum
;

48 
	sefs_sb_öfo
 {

49 
__u32
 
	mfs_magic
;

50 
__u32
 
	mfs_°¨t
;

51 
__u32
 
	mfú°_block
;

52 
__u32
 
	mtŸÆ_blocks
;

53 
__u32
 
	mgroup_size
;

54 
__u32
 
	md©a_‰ì
;

55 
__u32
 
	möode_‰ì
;

56 
__u16
 
	möode_blocks
;

57 
__u16
 
	mtŸÆ_groups
;

	@linux/elevator.h

12 #i‚de‡
_LINUX_ELEVATOR_H


13 
	#_LINUX_ELEVATOR_H


	)

15 (
	tñev©‹_mîge_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 **,

16 
	tbio
 *);

18 (
	tñev©‹_mîge_ªq_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *, request *);

20 (
	tñev©‹_mîged_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

22 (
	tñev©‹_di•©ch_‚
Ë(
	tªque°_queue_t
 *, );

24 (
	tñev©‹_add_ªq_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

25 (
	tñev©‹_queue_em±y_‚
Ë(
	tªque°_queue_t
 *);

26 
ªque°
 *(
	tñev©‹_ªque°_li°_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

27 (
	tñev©‹_com∂ëed_ªq_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

28 (
	tñev©‹_may_queue_‚
Ë(
	tªque°_queue_t
 *, , 
	tbio
 *);

30 (
	tñev©‹_£t_ªq_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *, 
	tbio
 *, 
	tgÂ_t
);

31 (
	tñev©‹_put_ªq_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

32 (
	tñev©‹_a˘iv©e_ªq_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

33 (
	tñev©‹_dó˘iv©e_ªq_‚
Ë(
	tªque°_queue_t
 *, 
	tªque°
 *);

35 *(
	tñev©‹_öô_‚
Ë(
	tªque°_queue_t
 *, 
	tñev©‹_t
 *);

36 (
	tñev©‹_exô_‚
Ë(
	tñev©‹_t
 *);

38 
	sñev©‹_›s


40 
ñev©‹_mîge_‚
 *elevator_merge_fn;

41 
ñev©‹_mîged_‚
 *elevator_merged_fn;

42 
ñev©‹_mîge_ªq_‚
 *elevator_merge_req_fn;

44 
ñev©‹_di•©ch_‚
 *elevator_dispatch_fn;

45 
ñev©‹_add_ªq_‚
 *elevator_add_req_fn;

46 
ñev©‹_a˘iv©e_ªq_‚
 *elevator_activate_req_fn;

47 
ñev©‹_dó˘iv©e_ªq_‚
 *elevator_deactivate_req_fn;

49 
ñev©‹_queue_em±y_‚
 *elevator_queue_empty_fn;

50 
ñev©‹_com∂ëed_ªq_‚
 *elevator_completed_req_fn;

52 
ñev©‹_ªque°_li°_‚
 *
ñev©‹_f‹mî_ªq_‚
;

53 
ñev©‹_ªque°_li°_‚
 *
ñev©‹_œâî_ªq_‚
;

55 
ñev©‹_£t_ªq_‚
 *elevator_set_req_fn;

56 
ñev©‹_put_ªq_‚
 *elevator_put_req_fn;

58 
ñev©‹_may_queue_‚
 *elevator_may_queue_fn;

60 
ñev©‹_öô_‚
 *elevator_init_fn;

61 
ñev©‹_exô_‚
 *elevator_exit_fn;

62 (*
åim
)(
io_c⁄ãxt
 *);

65 
	#ELV_NAME_MAX
 (16)

	)

67 
	sñv_fs_íåy
 {

68 
©åibuã
 
©å
;

69 
	`ssize_t
 (*
show
)(
ñev©‹_t
 *, *);

70 
	`ssize_t
 (*
°‹e
)(
ñev©‹_t
 *, c⁄° *, 
size_t
);

73 
	sñev©‹_ty≥


75 
li°_hód
 
li°
;

76 
ñev©‹_›s
 
›s
;

77 
ñev©‹_ty≥
 *elevator_type;

78 
ñv_fs_íåy
 *
ñev©‹_©ås
;

79 
ñev©‹_«me
[
ELV_NAME_MAX
];

80 
moduÀ
 *
ñev©‹_ow√r
;

83 
	sñev©‹_queue


85 
ñev©‹_›s
 *
›s
;

86 *
ñev©‹_d©a
;

87 
kobje˘
 
kobj
;

88 
ñev©‹_ty≥
 *elevator_type;

89 
muãx
 
sysfs_lock
;

92 
	#ELEVATOR_NO_MERGE
 0

	)

93 
	#ELEVATOR_FRONT_MERGE
 1

	)

94 
	#ELEVATOR_BACK_MERGE
 2

	)

96 
	#ELEVATOR_INSERT_FRONT
 1

	)

97 
	#ELEVATOR_INSERT_BACK
 2

	)

98 
	#ELEVATOR_INSERT_SORT
 3

	)

99 
	#ELEVATOR_INSERT_REQUEUE
 4

	)

102 
ELV_MQUEUE_MAY
,

103 
ELV_MQUEUE_NO
,

104 
ELV_MQUEUE_MUST
,

107 
	#rq_íd_£˘‹
(
rq
Ë(‘q)->
£˘‹
 + (rq)->
ƒ_£˘‹s
)

	)

	@linux/elf-em.h

12 #i‚de‡
_LINUX_ELF_EM_H


13 
	#_LINUX_ELF_EM_H


	)

15 
	#EM_NONE
 0

	)

16 
	#EM_M32
 1

	)

17 
	#EM_SPARC
 2

	)

18 
	#EM_386
 3

	)

19 
	#EM_68K
 4

	)

20 
	#EM_88K
 5

	)

21 
	#EM_486
 6

	)

22 
	#EM_860
 7

	)

23 
	#EM_MIPS
 8

	)

25 
	#EM_MIPS_RS3_LE
 10

	)

26 
	#EM_MIPS_RS4_BE
 10

	)

28 
	#EM_PARISC
 15

	)

29 
	#EM_SPARC32PLUS
 18

	)

30 
	#EM_PPC
 20

	)

31 
	#EM_PPC64
 21

	)

32 
	#EM_SH
 42

	)

33 
	#EM_SPARCV9
 43

	)

34 
	#EM_IA_64
 50

	)

35 
	#EM_X86_64
 62

	)

36 
	#EM_S390
 22

	)

37 
	#EM_CRIS
 76

	)

38 
	#EM_V850
 87

	)

39 
	#EM_M32R
 88

	)

40 
	#EM_H8_300
 46

	)

41 
	#EM_FRV
 0x5441

	)

43 
	#EM_ALPHA
 0x9026

	)

45 
	#EM_CYGNUS_V850
 0x9080

	)

47 
	#EM_CYGNUS_M32R
 0x9041

	)

49 
	#EM_S390_OLD
 0xA390

	)

	@linux/elf.h

12 #i‚de‡
_LINUX_ELF_H


13 
	#_LINUX_ELF_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/auxvec.h
>

17 
	~<löux/ñf-em.h
>

18 
	~<asm/ñf.h
>

20 #i‚de‡
ñf_ªad_im∂õs_exec


22 
	#ñf_ªad_im∂õs_exec
(
ex
, 
have_±_gnu_°ack
Ë0

	)

25 
__u32
 
	tElf32_Addr
;

26 
__u16
 
	tElf32_HÆf
;

27 
__u32
 
	tElf32_Off
;

28 
__s32
 
	tElf32_Sw‹d
;

29 
__u32
 
	tElf32_W‹d
;

31 
__u64
 
	tElf64_Addr
;

32 
__u16
 
	tElf64_HÆf
;

33 
__s16
 
	tElf64_SHÆf
;

34 
__u64
 
	tElf64_Off
;

35 
__s32
 
	tElf64_Sw‹d
;

36 
__u32
 
	tElf64_W‹d
;

37 
__u64
 
	tElf64_Xw‹d
;

38 
__s64
 
	tElf64_Sxw‹d
;

40 
	#PT_NULL
 0

	)

41 
	#PT_LOAD
 1

	)

42 
	#PT_DYNAMIC
 2

	)

43 
	#PT_INTERP
 3

	)

44 
	#PT_NOTE
 4

	)

45 
	#PT_SHLIB
 5

	)

46 
	#PT_PHDR
 6

	)

47 
	#PT_TLS
 7

	)

48 
	#PT_LOOS
 0x60000000

	)

49 
	#PT_HIOS
 0x6fffffff

	)

50 
	#PT_LOPROC
 0x70000000

	)

51 
	#PT_HIPROC
 0x7fffffff

	)

52 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

54 
	#PT_GNU_STACK
 (
PT_LOOS
 + 0x474e551)

	)

56 
	#ET_NONE
 0

	)

57 
	#ET_REL
 1

	)

58 
	#ET_EXEC
 2

	)

59 
	#ET_DYN
 3

	)

60 
	#ET_CORE
 4

	)

61 
	#ET_LOPROC
 0xff00

	)

62 
	#ET_HIPROC
 0xffff

	)

64 
	#DT_NULL
 0

	)

65 
	#DT_NEEDED
 1

	)

66 
	#DT_PLTRELSZ
 2

	)

67 
	#DT_PLTGOT
 3

	)

68 
	#DT_HASH
 4

	)

69 
	#DT_STRTAB
 5

	)

70 
	#DT_SYMTAB
 6

	)

71 
	#DT_RELA
 7

	)

72 
	#DT_RELASZ
 8

	)

73 
	#DT_RELAENT
 9

	)

74 
	#DT_STRSZ
 10

	)

75 
	#DT_SYMENT
 11

	)

76 
	#DT_INIT
 12

	)

77 
	#DT_FINI
 13

	)

78 
	#DT_SONAME
 14

	)

79 
	#DT_RPATH
 15

	)

80 
	#DT_SYMBOLIC
 16

	)

81 
	#DT_REL
 17

	)

82 
	#DT_RELSZ
 18

	)

83 
	#DT_RELENT
 19

	)

84 
	#DT_PLTREL
 20

	)

85 
	#DT_DEBUG
 21

	)

86 
	#DT_TEXTREL
 22

	)

87 
	#DT_JMPREL
 23

	)

88 
	#DT_LOPROC
 0x70000000

	)

89 
	#DT_HIPROC
 0x7fffffff

	)

91 
	#STB_LOCAL
 0

	)

92 
	#STB_GLOBAL
 1

	)

93 
	#STB_WEAK
 2

	)

95 
	#STT_NOTYPE
 0

	)

96 
	#STT_OBJECT
 1

	)

97 
	#STT_FUNC
 2

	)

98 
	#STT_SECTION
 3

	)

99 
	#STT_FILE
 4

	)

100 
	#STT_COMMON
 5

	)

101 
	#STT_TLS
 6

	)

103 
	#ELF_ST_BIND
(
x
Ë((xË>> 4)

	)

104 
	#ELF_ST_TYPE
(
x
Ë(((ËxË& 0xf)

	)

105 
	#ELF32_ST_BIND
(
x
Ë
	`ELF_ST_BIND
(x)

	)

106 
	#ELF32_ST_TYPE
(
x
Ë
	`ELF_ST_TYPE
(x)

	)

107 
	#ELF64_ST_BIND
(
x
Ë
	`ELF_ST_BIND
(x)

	)

108 
	#ELF64_ST_TYPE
(
x
Ë
	`ELF_ST_TYPE
(x)

	)

110 
	sdy«mic
{

111 
Elf32_Sw‹d
 
	md_èg
;

113 
Elf32_Sw‹d
 
	md_vÆ
;

114 
Elf32_Addr
 
	md_±r
;

115 } 
	md_un
;

116 } 
	tElf32_Dyn
;

119 
Elf64_Sxw‹d
 
	md_èg
;

121 
Elf64_Xw‹d
 
	md_vÆ
;

122 
Elf64_Addr
 
	md_±r
;

123 } 
	md_un
;

124 } 
	tElf64_Dyn
;

126 
	#ELF32_R_SYM
(
x
Ë((xË>> 8)

	)

127 
	#ELF32_R_TYPE
(
x
Ë((xË& 0xff)

	)

129 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

130 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

132 
	sñf32_ªl
 {

133 
Elf32_Addr
 
	mr_off£t
;

134 
Elf32_W‹d
 
	mr_öfo
;

135 } 
	tElf32_Rñ
;

137 
	sñf64_ªl
 {

138 
Elf64_Addr
 
	mr_off£t
;

139 
Elf64_Xw‹d
 
	mr_öfo
;

140 } 
	tElf64_Rñ
;

142 
	sñf32_ªœ
{

143 
Elf32_Addr
 
	mr_off£t
;

144 
Elf32_W‹d
 
	mr_öfo
;

145 
Elf32_Sw‹d
 
	mr_addíd
;

146 } 
	tElf32_Rña
;

148 
	sñf64_ªœ
 {

149 
Elf64_Addr
 
	mr_off£t
;

150 
Elf64_Xw‹d
 
	mr_öfo
;

151 
Elf64_Sxw‹d
 
	mr_addíd
;

152 } 
	tElf64_Rña
;

154 
	sñf32_sym
{

155 
Elf32_W‹d
 
	m°_«me
;

156 
Elf32_Addr
 
	m°_vÆue
;

157 
Elf32_W‹d
 
	m°_size
;

158 
	m°_öfo
;

159 
	m°_Ÿhî
;

160 
Elf32_HÆf
 
	m°_shndx
;

161 } 
	tElf32_Sym
;

163 
	sñf64_sym
 {

164 
Elf64_W‹d
 
	m°_«me
;

165 
	m°_öfo
;

166 
	m°_Ÿhî
;

167 
Elf64_HÆf
 
	m°_shndx
;

168 
Elf64_Addr
 
	m°_vÆue
;

169 
Elf64_Xw‹d
 
	m°_size
;

170 } 
	tElf64_Sym
;

172 
	#EI_NIDENT
 16

	)

174 
	sñf32_hdr
{

175 
	me_idít
[
EI_NIDENT
];

176 
Elf32_HÆf
 
	me_ty≥
;

177 
Elf32_HÆf
 
	me_machöe
;

178 
Elf32_W‹d
 
	me_vîsi⁄
;

179 
Elf32_Addr
 
	me_íåy
;

180 
Elf32_Off
 
	me_phoff
;

181 
Elf32_Off
 
	me_shoff
;

182 
Elf32_W‹d
 
	me_Êags
;

183 
Elf32_HÆf
 
	me_ehsize
;

184 
Elf32_HÆf
 
	me_phítsize
;

185 
Elf32_HÆf
 
	me_phnum
;

186 
Elf32_HÆf
 
	me_shítsize
;

187 
Elf32_HÆf
 
	me_shnum
;

188 
Elf32_HÆf
 
	me_sh°∫dx
;

189 } 
	tElf32_Ehdr
;

191 
	sñf64_hdr
 {

192 
	me_idít
[16];

193 
Elf64_HÆf
 
	me_ty≥
;

194 
Elf64_HÆf
 
	me_machöe
;

195 
Elf64_W‹d
 
	me_vîsi⁄
;

196 
Elf64_Addr
 
	me_íåy
;

197 
Elf64_Off
 
	me_phoff
;

198 
Elf64_Off
 
	me_shoff
;

199 
Elf64_W‹d
 
	me_Êags
;

200 
Elf64_HÆf
 
	me_ehsize
;

201 
Elf64_HÆf
 
	me_phítsize
;

202 
Elf64_HÆf
 
	me_phnum
;

203 
Elf64_HÆf
 
	me_shítsize
;

204 
Elf64_HÆf
 
	me_shnum
;

205 
Elf64_HÆf
 
	me_sh°∫dx
;

206 } 
	tElf64_Ehdr
;

208 
	#PF_R
 0x4

	)

209 
	#PF_W
 0x2

	)

210 
	#PF_X
 0x1

	)

212 
	sñf32_phdr
{

213 
Elf32_W‹d
 
	mp_ty≥
;

214 
Elf32_Off
 
	mp_off£t
;

215 
Elf32_Addr
 
	mp_vaddr
;

216 
Elf32_Addr
 
	mp_∑ddr
;

217 
Elf32_W‹d
 
	mp_fûesz
;

218 
Elf32_W‹d
 
	mp_memsz
;

219 
Elf32_W‹d
 
	mp_Êags
;

220 
Elf32_W‹d
 
	mp_Æign
;

221 } 
	tElf32_Phdr
;

223 
	sñf64_phdr
 {

224 
Elf64_W‹d
 
	mp_ty≥
;

225 
Elf64_W‹d
 
	mp_Êags
;

226 
Elf64_Off
 
	mp_off£t
;

227 
Elf64_Addr
 
	mp_vaddr
;

228 
Elf64_Addr
 
	mp_∑ddr
;

229 
Elf64_Xw‹d
 
	mp_fûesz
;

230 
Elf64_Xw‹d
 
	mp_memsz
;

231 
Elf64_Xw‹d
 
	mp_Æign
;

232 } 
	tElf64_Phdr
;

234 
	#SHT_NULL
 0

	)

235 
	#SHT_PROGBITS
 1

	)

236 
	#SHT_SYMTAB
 2

	)

237 
	#SHT_STRTAB
 3

	)

238 
	#SHT_RELA
 4

	)

239 
	#SHT_HASH
 5

	)

240 
	#SHT_DYNAMIC
 6

	)

241 
	#SHT_NOTE
 7

	)

242 
	#SHT_NOBITS
 8

	)

243 
	#SHT_REL
 9

	)

244 
	#SHT_SHLIB
 10

	)

245 
	#SHT_DYNSYM
 11

	)

246 
	#SHT_NUM
 12

	)

247 
	#SHT_LOPROC
 0x70000000

	)

248 
	#SHT_HIPROC
 0x7fffffff

	)

249 
	#SHT_LOUSER
 0x80000000

	)

250 
	#SHT_HIUSER
 0xffffffff

	)

252 
	#SHF_WRITE
 0x1

	)

253 
	#SHF_ALLOC
 0x2

	)

254 
	#SHF_EXECINSTR
 0x4

	)

255 
	#SHF_MASKPROC
 0xf0000000

	)

257 
	#SHN_UNDEF
 0

	)

258 
	#SHN_LORESERVE
 0xff00

	)

259 
	#SHN_LOPROC
 0xff00

	)

260 
	#SHN_HIPROC
 0xff1f

	)

261 
	#SHN_ABS
 0xfff1

	)

262 
	#SHN_COMMON
 0xfff2

	)

263 
	#SHN_HIRESERVE
 0xffff

	)

266 
Elf32_W‹d
 
	msh_«me
;

267 
Elf32_W‹d
 
	msh_ty≥
;

268 
Elf32_W‹d
 
	msh_Êags
;

269 
Elf32_Addr
 
	msh_addr
;

270 
Elf32_Off
 
	msh_off£t
;

271 
Elf32_W‹d
 
	msh_size
;

272 
Elf32_W‹d
 
	msh_lök
;

273 
Elf32_W‹d
 
	msh_öfo
;

274 
Elf32_W‹d
 
	msh_addølign
;

275 
Elf32_W‹d
 
	msh_ítsize
;

276 } 
	tElf32_Shdr
;

278 
	sñf64_shdr
 {

279 
Elf64_W‹d
 
	msh_«me
;

280 
Elf64_W‹d
 
	msh_ty≥
;

281 
Elf64_Xw‹d
 
	msh_Êags
;

282 
Elf64_Addr
 
	msh_addr
;

283 
Elf64_Off
 
	msh_off£t
;

284 
Elf64_Xw‹d
 
	msh_size
;

285 
Elf64_W‹d
 
	msh_lök
;

286 
Elf64_W‹d
 
	msh_öfo
;

287 
Elf64_Xw‹d
 
	msh_addølign
;

288 
Elf64_Xw‹d
 
	msh_ítsize
;

289 } 
	tElf64_Shdr
;

291 
	#EI_MAG0
 0

	)

292 
	#EI_MAG1
 1

	)

293 
	#EI_MAG2
 2

	)

294 
	#EI_MAG3
 3

	)

295 
	#EI_CLASS
 4

	)

296 
	#EI_DATA
 5

	)

297 
	#EI_VERSION
 6

	)

298 
	#EI_OSABI
 7

	)

299 
	#EI_PAD
 8

	)

301 
	#ELFMAG0
 0x7f

	)

302 
	#ELFMAG1
 'E'

	)

303 
	#ELFMAG2
 'L'

	)

304 
	#ELFMAG3
 'F'

	)

305 
	#ELFMAG
 "\177ELF"

	)

306 
	#SELFMAG
 4

	)

308 
	#ELFCLASSNONE
 0

	)

309 
	#ELFCLASS32
 1

	)

310 
	#ELFCLASS64
 2

	)

311 
	#ELFCLASSNUM
 3

	)

313 
	#ELFDATANONE
 0

	)

314 
	#ELFDATA2LSB
 1

	)

315 
	#ELFDATA2MSB
 2

	)

317 
	#EV_NONE
 0

	)

318 
	#EV_CURRENT
 1

	)

319 
	#EV_NUM
 2

	)

321 
	#ELFOSABI_NONE
 0

	)

322 
	#ELFOSABI_LINUX
 3

	)

324 #i‚de‡
ELF_OSABI


325 
	#ELF_OSABI
 
ELFOSABI_NONE


	)

328 
	#NT_PRSTATUS
 1

	)

329 
	#NT_PRFPREG
 2

	)

330 
	#NT_PRPSINFO
 3

	)

331 
	#NT_TASKSTRUCT
 4

	)

332 
	#NT_AUXV
 6

	)

333 
	#NT_PRXFPREG
 0x46e62b7f

	)

335 
	sñf32_nŸe
 {

336 
Elf32_W‹d
 
	mn_«mesz
;

337 
Elf32_W‹d
 
	mn_descsz
;

338 
Elf32_W‹d
 
	mn_ty≥
;

339 } 
	tElf32_Nhdr
;

341 
	sñf64_nŸe
 {

342 
Elf64_W‹d
 
	mn_«mesz
;

343 
Elf64_W‹d
 
	mn_descsz
;

344 
Elf64_W‹d
 
	mn_ty≥
;

345 } 
	tElf64_Nhdr
;

347 #i‡
ELF_CLASS
 =
ELFCLASS32


349 
	#ñfhdr
 
ñf32_hdr


	)

350 
	#ñf_phdr
 
ñf32_phdr


	)

351 
	#ñf_nŸe
 
ñf32_nŸe


	)

355 
	#ñfhdr
 
ñf64_hdr


	)

356 
	#ñf_phdr
 
ñf64_phdr


	)

357 
	#ñf_nŸe
 
ñf64_nŸe


	)

	@linux/err.h

12 #i‚de‡
_LINUX_ERR_H


13 
	#_LINUX_ERR_H


	)

15 
	~<löux/compûî.h
>

17 
	~<asm/î∫o.h
>

19 
	#MAX_ERRNO
 4095

	)

21 
	#IS_ERR_VALUE
(
x
Ë
	`u∆ikñy
((xË>()-
MAX_ERRNO
)

	)

	@linux/errno.h

12 #i‚de‡
_LINUX_ERRNO_H


13 
	#_LINUX_ERRNO_H


	)

15 
	~<asm/î∫o.h
>

	@linux/errqueue.h

12 #i‚de‡
_LINUX_ERRQUEUE_H


13 
	#_LINUX_ERRQUEUE_H
 1

	)

15 
	ssock_exãnded_îr


17 
__u32
 
	mì_î∫o
;

18 
__u8
 
	mì_‹igö
;

19 
__u8
 
	mì_ty≥
;

20 
__u8
 
	mì_code
;

21 
__u8
 
	mì_∑d
;

22 
__u32
 
	mì_öfo
;

23 
__u32
 
	mì_d©a
;

26 
	#SO_EE_ORIGIN_NONE
 0

	)

27 
	#SO_EE_ORIGIN_LOCAL
 1

	)

28 
	#SO_EE_ORIGIN_ICMP
 2

	)

29 
	#SO_EE_ORIGIN_ICMP6
 3

	)

31 
	#SO_EE_OFFENDER
(
ì
Ë((
sockaddr
*)(”e)+1))

	)

	@linux/etherdevice.h

12 #i‚de‡
_LINUX_ETHERDEVICE_H


13 
	#_LINUX_ETHERDEVICE_H


	)

15 
	~<löux/if_ëhî.h
>

16 
	~<löux/√tdevi˚.h
>

17 
	~<löux/øndom.h
>

	@linux/ext2_fs.h

12 #i‚de‡
_LINUX_EXT2_FS_H


13 
	#_LINUX_EXT2_FS_H


	)

15 
	~<löux/ty≥s.h
>

17 #unde‡
EXT2FS_DEBUG


19 
	#EXT2_PREALLOCATE


	)

20 
	#EXT2_DEFAULT_PREALLOC_BLOCKS
 8

	)

22 
	#EXT2FS_DATE
 "95/08/09"

	)

23 
	#EXT2FS_VERSION
 "0.5b"

	)

25 #ifde‡
EXT2FS_DEBUG


26 
	#ext2_debug
(
f
, 
a
...Ë{ 
	`¥ötk
 ("EXT2-f†DEBUG (%s, %d): %s:", 
__FILE__
, 
__LINE__
, 
__FUNCTION__
);Örötk (f, ##á); }

	)

28 
	#ext2_debug
(
f
, 
a
...)

	)

31 
	#EXT2_BAD_INO
 1

	)

32 
	#EXT2_ROOT_INO
 2

	)

33 
	#EXT2_BOOT_LOADER_INO
 5

	)

34 
	#EXT2_UNDEL_DIR_INO
 6

	)

36 
	#EXT2_GOOD_OLD_FIRST_INO
 11

	)

38 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

40 
	#EXT2_SB
(
sb
Ë(sb)

	)

42 
	#EXT2_LINK_MAX
 32000

	)

44 
	#EXT2_MIN_BLOCK_SIZE
 1024

	)

45 
	#EXT2_MAX_BLOCK_SIZE
 4096

	)

46 
	#EXT2_MIN_BLOCK_LOG_SIZE
 10

	)

47 
	#EXT2_BLOCK_SIZE
(
s
Ë(
EXT2_MIN_BLOCK_SIZE
 << (s)->
s_log_block_size
)

	)

48 
	#EXT2_ADDR_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/  (
__u32
))

	)

49 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_log_block_size
 + 10)

	)

50 
	#EXT2_INODE_SIZE
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
Ë? 
EXT2_GOOD_OLD_INODE_SIZE
 : (s)->
s_öode_size
)

	)

51 
	#EXT2_FIRST_INO
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
Ë? 
EXT2_GOOD_OLD_FIRST_INO
 : (s)->
s_fú°_öo
)

	)

53 
	#EXT2_MIN_FRAG_SIZE
 1024

	)

54 
	#EXT2_MAX_FRAG_SIZE
 4096

	)

55 
	#EXT2_MIN_FRAG_LOG_SIZE
 10

	)

56 
	#EXT2_FRAG_SIZE
(
s
Ë(
EXT2_MIN_FRAG_SIZE
 << (s)->
s_log_‰ag_size
)

	)

57 
	#EXT2_FRAGS_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ 
	`EXT2_FRAG_SIZE
(s))

	)

59 
	sext2_group_desc


61 
__À32
 
	mbg_block_bôm≠
;

62 
__À32
 
	mbg_öode_bôm≠
;

63 
__À32
 
	mbg_öode_èbÀ
;

64 
__À16
 
	mbg_‰ì_blocks_cou¡
;

65 
__À16
 
	mbg_‰ì_öodes_cou¡
;

66 
__À16
 
	mbg_u£d_dús_cou¡
;

67 
__À16
 
	mbg_∑d
;

68 
__À32
 
	mbg_ª£rved
[3];

71 
	#EXT2_BLOCKS_PER_GROUP
(
s
Ë((s)->
s_blocks_≥r_group
)

	)

72 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/  (
ext2_group_desc
))

	)

73 
	#EXT2_INODES_PER_GROUP
(
s
Ë((s)->
s_öodes_≥r_group
)

	)

75 
	#EXT2_NDIR_BLOCKS
 12

	)

76 
	#EXT2_IND_BLOCK
 
EXT2_NDIR_BLOCKS


	)

77 
	#EXT2_DIND_BLOCK
 (
EXT2_IND_BLOCK
 + 1)

	)

78 
	#EXT2_TIND_BLOCK
 (
EXT2_DIND_BLOCK
 + 1)

	)

79 
	#EXT2_N_BLOCKS
 (
EXT2_TIND_BLOCK
 + 1)

	)

81 
	#EXT2_SECRM_FL
 0x00000001

	)

82 
	#EXT2_UNRM_FL
 0x00000002

	)

83 
	#EXT2_COMPR_FL
 0x00000004

	)

84 
	#EXT2_SYNC_FL
 0x00000008

	)

85 
	#EXT2_IMMUTABLE_FL
 0x00000010

	)

86 
	#EXT2_APPEND_FL
 0x00000020

	)

87 
	#EXT2_NODUMP_FL
 0x00000040

	)

88 
	#EXT2_NOATIME_FL
 0x00000080

	)

90 
	#EXT2_DIRTY_FL
 0x00000100

	)

91 
	#EXT2_COMPRBLK_FL
 0x00000200

	)

92 
	#EXT2_NOCOMP_FL
 0x00000400

	)

93 
	#EXT2_ECOMPR_FL
 0x00000800

	)

95 
	#EXT2_BTREE_FL
 0x00001000

	)

96 
	#EXT2_INDEX_FL
 0x00001000

	)

97 
	#EXT2_IMAGIC_FL
 0x00002000

	)

98 
	#EXT2_JOURNAL_DATA_FL
 0x00004000

	)

99 
	#EXT2_NOTAIL_FL
 0x00008000

	)

100 
	#EXT2_DIRSYNC_FL
 0x00010000

	)

101 
	#EXT2_TOPDIR_FL
 0x00020000

	)

102 
	#EXT2_RESERVED_FL
 0x80000000

	)

104 
	#EXT2_FL_USER_VISIBLE
 0x0003DFFF

	)

105 
	#EXT2_FL_USER_MODIFIABLE
 0x000380FF

	)

107 
	#EXT2_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

108 
	#EXT2_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

109 
	#EXT2_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

110 
	#EXT2_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

112 
	sext2_öode
 {

113 
__À16
 
	mi_mode
;

114 
__À16
 
	mi_uid
;

115 
__À32
 
	mi_size
;

116 
__À32
 
	mi_©ime
;

117 
__À32
 
	mi_˘ime
;

118 
__À32
 
	mi_mtime
;

119 
__À32
 
	mi_dtime
;

120 
__À16
 
	mi_gid
;

121 
__À16
 
	mi_löks_cou¡
;

122 
__À32
 
	mi_blocks
;

123 
__À32
 
	mi_Êags
;

126 
__À32
 
	ml_i_ª£rved1
;

127 } 
	mlöux1
;

129 
__À32
 
	mh_i_å™¶©‹
;

130 } 
	mhurd1
;

132 
__À32
 
	mm_i_ª£rved1
;

133 } 
	mmasix1
;

134 } 
	mosd1
;

135 
__À32
 
	mi_block
[
EXT2_N_BLOCKS
];

136 
__À32
 
	mi_gíî©i⁄
;

137 
__À32
 
	mi_fûe_a˛
;

138 
__À32
 
	mi_dú_a˛
;

139 
__À32
 
	mi_Áddr
;

142 
__u8
 
	ml_i_‰ag
;

143 
__u8
 
	ml_i_fsize
;

144 
__u16
 
	mi_∑d1
;

145 
__À16
 
	ml_i_uid_high
;

146 
__À16
 
	ml_i_gid_high
;

147 
__u32
 
	ml_i_ª£rved2
;

148 } 
	mlöux2
;

150 
__u8
 
	mh_i_‰ag
;

151 
__u8
 
	mh_i_fsize
;

152 
__À16
 
	mh_i_mode_high
;

153 
__À16
 
	mh_i_uid_high
;

154 
__À16
 
	mh_i_gid_high
;

155 
__À32
 
	mh_i_auth‹
;

156 } 
	mhurd2
;

158 
__u8
 
	mm_i_‰ag
;

159 
__u8
 
	mm_i_fsize
;

160 
__u16
 
	mm_∑d1
;

161 
__u32
 
	mm_i_ª£rved2
[2];

162 } 
	mmasix2
;

163 } 
	mosd2
;

166 
	#i_size_high
 
i_dú_a˛


	)

168 #ifde‡
__löux__


169 
	#i_ª£rved1
 
osd1
.
löux1
.
l_i_ª£rved1


	)

170 
	#i_‰ag
 
osd2
.
löux2
.
l_i_‰ag


	)

171 
	#i_fsize
 
osd2
.
löux2
.
l_i_fsize


	)

172 
	#i_uid_low
 
i_uid


	)

173 
	#i_gid_low
 
i_gid


	)

174 
	#i_uid_high
 
osd2
.
löux2
.
l_i_uid_high


	)

175 
	#i_gid_high
 
osd2
.
löux2
.
l_i_gid_high


	)

176 
	#i_ª£rved2
 
osd2
.
löux2
.
l_i_ª£rved2


	)

179 #ifde‡
__hurd__


180 
	#i_å™¶©‹
 
osd1
.
hurd1
.
h_i_å™¶©‹


	)

181 
	#i_‰ag
 
osd2
.
hurd2
.
h_i_‰ag
;

	)

182 
	#i_fsize
 
osd2
.
hurd2
.
h_i_fsize
;

	)

183 
	#i_uid_high
 
osd2
.
hurd2
.
h_i_uid_high


	)

184 
	#i_gid_high
 
osd2
.
hurd2
.
h_i_gid_high


	)

185 
	#i_auth‹
 
osd2
.
hurd2
.
h_i_auth‹


	)

188 #ifde‡
__masix__


189 
	#i_ª£rved1
 
osd1
.
masix1
.
m_i_ª£rved1


	)

190 
	#i_‰ag
 
osd2
.
masix2
.
m_i_‰ag


	)

191 
	#i_fsize
 
osd2
.
masix2
.
m_i_fsize


	)

192 
	#i_ª£rved2
 
osd2
.
masix2
.
m_i_ª£rved2


	)

195 
	#EXT2_VALID_FS
 0x0001

	)

196 
	#EXT2_ERROR_FS
 0x0002

	)

198 
	#EXT2_MOUNT_CHECK
 0x000001

	)

199 
	#EXT2_MOUNT_OLDALLOC
 0x000002

	)

200 
	#EXT2_MOUNT_GRPID
 0x000004

	)

201 
	#EXT2_MOUNT_DEBUG
 0x000008

	)

202 
	#EXT2_MOUNT_ERRORS_CONT
 0x000010

	)

203 
	#EXT2_MOUNT_ERRORS_RO
 0x000020

	)

204 
	#EXT2_MOUNT_ERRORS_PANIC
 0x000040

	)

205 
	#EXT2_MOUNT_MINIX_DF
 0x000080

	)

206 
	#EXT2_MOUNT_NOBH
 0x000100

	)

207 
	#EXT2_MOUNT_NO_UID32
 0x000200

	)

208 
	#EXT2_MOUNT_XATTR_USER
 0x004000

	)

209 
	#EXT2_MOUNT_POSIX_ACL
 0x008000

	)

210 
	#EXT2_MOUNT_XIP
 0x010000

	)

211 
	#EXT2_MOUNT_USRQUOTA
 0x020000

	)

212 
	#EXT2_MOUNT_GRPQUOTA
 0x040000

	)

214 
	#˛ór_›t
(
o
, 
›t
Ëÿ&~
EXT2_MOUNT_
##
	)
opt

215 
	#£t_›t
(
o
, 
›t
Ëÿ|
EXT2_MOUNT_
##
	)
opt

216 
	#ã°_›t
(
sb
, 
›t
Ë(
	`EXT2_SB
(sb)->
s_mou¡_›t
 & 
EXT2_MOUNT_
##›t)

	)

218 
	#EXT2_DFL_MAX_MNT_COUNT
 20

	)

219 
	#EXT2_DFL_CHECKINTERVAL
 0

	)

221 
	#EXT2_ERRORS_CONTINUE
 1

	)

222 
	#EXT2_ERRORS_RO
 2

	)

223 
	#EXT2_ERRORS_PANIC
 3

	)

224 
	#EXT2_ERRORS_DEFAULT
 
EXT2_ERRORS_CONTINUE


	)

226 
	sext2_su≥r_block
 {

227 
__À32
 
	ms_öodes_cou¡
;

228 
__À32
 
	ms_blocks_cou¡
;

229 
__À32
 
	ms_r_blocks_cou¡
;

230 
__À32
 
	ms_‰ì_blocks_cou¡
;

231 
__À32
 
	ms_‰ì_öodes_cou¡
;

232 
__À32
 
	ms_fú°_d©a_block
;

233 
__À32
 
	ms_log_block_size
;

234 
__À32
 
	ms_log_‰ag_size
;

235 
__À32
 
	ms_blocks_≥r_group
;

236 
__À32
 
	ms_‰ags_≥r_group
;

237 
__À32
 
	ms_öodes_≥r_group
;

238 
__À32
 
	ms_mtime
;

239 
__À32
 
	ms_wtime
;

240 
__À16
 
	ms_m¡_cou¡
;

241 
__À16
 
	ms_max_m¡_cou¡
;

242 
__À16
 
	ms_magic
;

243 
__À16
 
	ms_°©e
;

244 
__À16
 
	ms_îr‹s
;

245 
__À16
 
	ms_mö‹_ªv_Àvñ
;

246 
__À32
 
	ms_œ°check
;

247 
__À32
 
	ms_checköãrvÆ
;

248 
__À32
 
	ms_¸ót‹_os
;

249 
__À32
 
	ms_ªv_Àvñ
;

250 
__À16
 
	ms_def_ªsuid
;

251 
__À16
 
	ms_def_ªsgid
;

253 
__À32
 
	ms_fú°_öo
;

254 
__À16
 
	ms_öode_size
;

255 
__À16
 
	ms_block_group_ƒ
;

256 
__À32
 
	ms_„©uª_com∑t
;

257 
__À32
 
	ms_„©uª_öcom∑t
;

258 
__À32
 
	ms_„©uª_ro_com∑t
;

259 
__u8
 
	ms_uuid
[16];

260 
	ms_vﬁume_«me
[16];

261 
	ms_œ°_mou¡ed
[64];

262 
__À32
 
	ms_Æg‹ôhm_ußge_bôm≠
;

264 
__u8
 
	ms_¥óŒoc_blocks
;

265 
__u8
 
	ms_¥óŒoc_dú_blocks
;

266 
__u16
 
	ms_∑ddög1
;

268 
__u8
 
	ms_jou∫Æ_uuid
[16];

269 
__u32
 
	ms_jou∫Æ_öum
;

270 
__u32
 
	ms_jou∫Æ_dev
;

271 
__u32
 
	ms_œ°_‹ph™
;

272 
__u32
 
	ms_hash_£ed
[4];

273 
__u8
 
	ms_def_hash_vîsi⁄
;

274 
__u8
 
	ms_ª£rved_ch¨_∑d
;

275 
__u16
 
	ms_ª£rved_w‹d_∑d
;

276 
__À32
 
	ms_deÁu…_mou¡_›ts
;

277 
__À32
 
	ms_fú°_mëa_bg
;

278 
__u32
 
	ms_ª£rved
[190];

281 
	#EXT2_OS_LINUX
 0

	)

282 
	#EXT2_OS_HURD
 1

	)

283 
	#EXT2_OS_MASIX
 2

	)

284 
	#EXT2_OS_FREEBSD
 3

	)

285 
	#EXT2_OS_LITES
 4

	)

287 
	#EXT2_GOOD_OLD_REV
 0

	)

288 
	#EXT2_DYNAMIC_REV
 1

	)

290 
	#EXT2_CURRENT_REV
 
EXT2_GOOD_OLD_REV


	)

291 
	#EXT2_MAX_SUPP_REV
 
EXT2_DYNAMIC_REV


	)

293 
	#EXT2_GOOD_OLD_INODE_SIZE
 128

	)

295 
	#EXT2_HAS_COMPAT_FEATURE
(
sb
,
mask
Ë–
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_com∑t
 & 
	`˝u_to_À32
(maskË)

	)

296 
	#EXT2_HAS_RO_COMPAT_FEATURE
(
sb
,
mask
Ë–
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_ro_com∑t
 & 
	`˝u_to_À32
(maskË)

	)

297 
	#EXT2_HAS_INCOMPAT_FEATURE
(
sb
,
mask
Ë–
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_öcom∑t
 & 
	`˝u_to_À32
(maskË)

	)

298 
	#EXT2_SET_COMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_com∑t
 |
	`˝u_to_À32
(mask)

	)

299 
	#EXT2_SET_RO_COMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_ro_com∑t
 |
	`˝u_to_À32
(mask)

	)

300 
	#EXT2_SET_INCOMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_öcom∑t
 |
	`˝u_to_À32
(mask)

	)

301 
	#EXT2_CLEAR_COMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_com∑t
 &~
	`˝u_to_À32
(mask)

	)

302 
	#EXT2_CLEAR_RO_COMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_ro_com∑t
 &~
	`˝u_to_À32
(mask)

	)

303 
	#EXT2_CLEAR_INCOMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT2_SB
(sb)->
s_es
->
s_„©uª_öcom∑t
 &~
	`˝u_to_À32
(mask)

	)

305 
	#EXT2_FEATURE_COMPAT_DIR_PREALLOC
 0x0001

	)

306 
	#EXT2_FEATURE_COMPAT_IMAGIC_INODES
 0x0002

	)

307 
	#EXT3_FEATURE_COMPAT_HAS_JOURNAL
 0x0004

	)

308 
	#EXT2_FEATURE_COMPAT_EXT_ATTR
 0x0008

	)

309 
	#EXT2_FEATURE_COMPAT_RESIZE_INO
 0x0010

	)

310 
	#EXT2_FEATURE_COMPAT_DIR_INDEX
 0x0020

	)

311 
	#EXT2_FEATURE_COMPAT_ANY
 0xffffffff

	)

313 
	#EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
 0x0001

	)

314 
	#EXT2_FEATURE_RO_COMPAT_LARGE_FILE
 0x0002

	)

315 
	#EXT2_FEATURE_RO_COMPAT_BTREE_DIR
 0x0004

	)

316 
	#EXT2_FEATURE_RO_COMPAT_ANY
 0xffffffff

	)

318 
	#EXT2_FEATURE_INCOMPAT_COMPRESSION
 0x0001

	)

319 
	#EXT2_FEATURE_INCOMPAT_FILETYPE
 0x0002

	)

320 
	#EXT3_FEATURE_INCOMPAT_RECOVER
 0x0004

	)

321 
	#EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
 0x0008

	)

322 
	#EXT2_FEATURE_INCOMPAT_META_BG
 0x0010

	)

323 
	#EXT2_FEATURE_INCOMPAT_ANY
 0xffffffff

	)

325 
	#EXT2_FEATURE_COMPAT_SUPP
 
EXT2_FEATURE_COMPAT_EXT_ATTR


	)

326 
	#EXT2_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
| 
EXT2_FEATURE_INCOMPAT_META_BG
)

	)

327 
	#EXT2_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
| 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
| 
EXT2_FEATURE_RO_COMPAT_BTREE_DIR
)

	)

328 
	#EXT2_FEATURE_RO_COMPAT_UNSUPPORTED
 ~
EXT2_FEATURE_RO_COMPAT_SUPP


	)

329 
	#EXT2_FEATURE_INCOMPAT_UNSUPPORTED
 ~
EXT2_FEATURE_INCOMPAT_SUPP


	)

331 
	#EXT2_DEF_RESUID
 0

	)

332 
	#EXT2_DEF_RESGID
 0

	)

334 
	#EXT2_DEFM_DEBUG
 0x0001

	)

335 
	#EXT2_DEFM_BSDGROUPS
 0x0002

	)

336 
	#EXT2_DEFM_XATTR_USER
 0x0004

	)

337 
	#EXT2_DEFM_ACL
 0x0008

	)

338 
	#EXT2_DEFM_UID16
 0x0010

	)

340 
	#EXT3_DEFM_JMODE
 0x0060

	)

341 
	#EXT3_DEFM_JMODE_DATA
 0x0020

	)

342 
	#EXT3_DEFM_JMODE_ORDERED
 0x0040

	)

343 
	#EXT3_DEFM_JMODE_WBACK
 0x0060

	)

345 
	#EXT2_NAME_LEN
 255

	)

347 
	sext2_dú_íåy
 {

348 
__À32
 
	möode
;

349 
__À16
 
	mªc_Àn
;

350 
__À16
 
	m«me_Àn
;

351 
	m«me
[
EXT2_NAME_LEN
];

354 
	sext2_dú_íåy_2
 {

355 
__À32
 
	möode
;

356 
__À16
 
	mªc_Àn
;

357 
__u8
 
	m«me_Àn
;

358 
__u8
 
	mfûe_ty≥
;

359 
	m«me
[
EXT2_NAME_LEN
];

363 
	mEXT2_FT_UNKNOWN
,

364 
	mEXT2_FT_REG_FILE
,

365 
	mEXT2_FT_DIR
,

366 
	mEXT2_FT_CHRDEV
,

367 
	mEXT2_FT_BLKDEV
,

368 
	mEXT2_FT_FIFO
,

369 
	mEXT2_FT_SOCK
,

370 
	mEXT2_FT_SYMLINK
,

371 
	mEXT2_FT_MAX


374 
	#EXT2_DIR_PAD
 4

	)

375 
	#EXT2_DIR_ROUND
 (
EXT2_DIR_PAD
 - 1)

	)

376 
	#EXT2_DIR_REC_LEN
(
«me_Àn
Ë((“ame_ÀnË+ 8 + 
EXT2_DIR_ROUND
Ë& ~EXT2_DIR_ROUND)

	)

	@linux/ext3_fs.h

12 #i‚de‡
_LINUX_EXT3_FS_H


13 
	#_LINUX_EXT3_FS_H


	)

15 
	~<löux/ty≥s.h
>

17 #unde‡
EXT3FS_DEBUG


19 
	#EXT3_DEFAULT_RESERVE_BLOCKS
 8

	)

21 
	#EXT3_MAX_RESERVE_BLOCKS
 1027

	)

22 
	#EXT3_RESERVE_WINDOW_NOT_ALLOCATED
 0

	)

24 
	#CONFIG_EXT3_INDEX


	)

26 #ifde‡
EXT3FS_DEBUG


27 
	#ext3_debug
(
f
, 
a
...Ëdÿ{ 
	`¥ötk
 (
KERN_DEBUG
 "EXT3-f†DEBUG (%s, %d): %s:", 
__FILE__
, 
__LINE__
, 
__FUNCTION__
);Örötk (KERN_DEBUG f, ##á); } 0)

	)

29 
	#ext3_debug
(
f
, 
a
...Ëdÿ{} 0)

	)

32 
	#EXT3_BAD_INO
 1

	)

33 
	#EXT3_ROOT_INO
 2

	)

34 
	#EXT3_BOOT_LOADER_INO
 5

	)

35 
	#EXT3_UNDEL_DIR_INO
 6

	)

36 
	#EXT3_RESIZE_INO
 7

	)

37 
	#EXT3_JOURNAL_INO
 8

	)

39 
	#EXT3_GOOD_OLD_FIRST_INO
 11

	)

41 
	#EXT3_SUPER_MAGIC
 0xEF53

	)

43 
	#EXT3_LINK_MAX
 32000

	)

45 
	#EXT3_MIN_BLOCK_SIZE
 1024

	)

46 
	#EXT3_MAX_BLOCK_SIZE
 4096

	)

47 
	#EXT3_MIN_BLOCK_LOG_SIZE
 10

	)

48 
	#EXT3_BLOCK_SIZE
(
s
Ë(
EXT3_MIN_BLOCK_SIZE
 << (s)->
s_log_block_size
)

	)

49 
	#EXT3_ADDR_PER_BLOCK
(
s
Ë(
	`EXT3_BLOCK_SIZE
(sË/  (
__u32
))

	)

50 
	#EXT3_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_log_block_size
 + 10)

	)

51 
	#EXT3_INODE_SIZE
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT3_GOOD_OLD_REV
Ë? 
EXT3_GOOD_OLD_INODE_SIZE
 : (s)->
s_öode_size
)

	)

52 
	#EXT3_FIRST_INO
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT3_GOOD_OLD_REV
Ë? 
EXT3_GOOD_OLD_FIRST_INO
 : (s)->
s_fú°_öo
)

	)

54 
	#EXT3_MIN_FRAG_SIZE
 1024

	)

55 
	#EXT3_MAX_FRAG_SIZE
 4096

	)

56 
	#EXT3_MIN_FRAG_LOG_SIZE
 10

	)

57 
	#EXT3_FRAG_SIZE
(
s
Ë(
EXT3_MIN_FRAG_SIZE
 << (s)->
s_log_‰ag_size
)

	)

58 
	#EXT3_FRAGS_PER_BLOCK
(
s
Ë(
	`EXT3_BLOCK_SIZE
(sË/ 
	`EXT3_FRAG_SIZE
(s))

	)

60 
	sext3_group_desc


62 
__À32
 
	mbg_block_bôm≠
;

63 
__À32
 
	mbg_öode_bôm≠
;

64 
__À32
 
	mbg_öode_èbÀ
;

65 
__À16
 
	mbg_‰ì_blocks_cou¡
;

66 
__À16
 
	mbg_‰ì_öodes_cou¡
;

67 
__À16
 
	mbg_u£d_dús_cou¡
;

68 
__u16
 
	mbg_∑d
;

69 
__À32
 
	mbg_ª£rved
[3];

72 
	#EXT3_BLOCKS_PER_GROUP
(
s
Ë((s)->
s_blocks_≥r_group
)

	)

73 
	#EXT3_DESC_PER_BLOCK
(
s
Ë(
	`EXT3_BLOCK_SIZE
(sË/  (
ext3_group_desc
))

	)

74 
	#EXT3_INODES_PER_GROUP
(
s
Ë((s)->
s_öodes_≥r_group
)

	)

76 
	#EXT3_NDIR_BLOCKS
 12

	)

77 
	#EXT3_IND_BLOCK
 
EXT3_NDIR_BLOCKS


	)

78 
	#EXT3_DIND_BLOCK
 (
EXT3_IND_BLOCK
 + 1)

	)

79 
	#EXT3_TIND_BLOCK
 (
EXT3_DIND_BLOCK
 + 1)

	)

80 
	#EXT3_N_BLOCKS
 (
EXT3_TIND_BLOCK
 + 1)

	)

82 
	#EXT3_SECRM_FL
 0x00000001

	)

83 
	#EXT3_UNRM_FL
 0x00000002

	)

84 
	#EXT3_COMPR_FL
 0x00000004

	)

85 
	#EXT3_SYNC_FL
 0x00000008

	)

86 
	#EXT3_IMMUTABLE_FL
 0x00000010

	)

87 
	#EXT3_APPEND_FL
 0x00000020

	)

88 
	#EXT3_NODUMP_FL
 0x00000040

	)

89 
	#EXT3_NOATIME_FL
 0x00000080

	)

91 
	#EXT3_DIRTY_FL
 0x00000100

	)

92 
	#EXT3_COMPRBLK_FL
 0x00000200

	)

93 
	#EXT3_NOCOMPR_FL
 0x00000400

	)

94 
	#EXT3_ECOMPR_FL
 0x00000800

	)

96 
	#EXT3_INDEX_FL
 0x00001000

	)

97 
	#EXT3_IMAGIC_FL
 0x00002000

	)

98 
	#EXT3_JOURNAL_DATA_FL
 0x00004000

	)

99 
	#EXT3_NOTAIL_FL
 0x00008000

	)

100 
	#EXT3_DIRSYNC_FL
 0x00010000

	)

101 
	#EXT3_TOPDIR_FL
 0x00020000

	)

102 
	#EXT3_RESERVED_FL
 0x80000000

	)

104 
	#EXT3_FL_USER_VISIBLE
 0x0003DFFF

	)

105 
	#EXT3_FL_USER_MODIFIABLE
 0x000380FF

	)

107 
	#EXT3_STATE_JDATA
 0x00000001

	)

108 
	#EXT3_STATE_NEW
 0x00000002

	)

109 
	#EXT3_STATE_XATTR
 0x00000004

	)

111 
	sext3_√w_group_öput
 {

112 
__u32
 
	mgroup
;

113 
__u32
 
	mblock_bôm≠
;

114 
__u32
 
	möode_bôm≠
;

115 
__u32
 
	möode_èbÀ
;

116 
__u32
 
	mblocks_cou¡
;

117 
__u16
 
	mª£rved_blocks
;

118 
__u16
 
	munu£d
;

121 
	sext3_√w_group_d©a
 {

122 
__u32
 
	mgroup
;

123 
__u32
 
	mblock_bôm≠
;

124 
__u32
 
	möode_bôm≠
;

125 
__u32
 
	möode_èbÀ
;

126 
__u32
 
	mblocks_cou¡
;

127 
__u16
 
	mª£rved_blocks
;

128 
__u16
 
	munu£d
;

129 
__u32
 
	m‰ì_blocks_cou¡
;

132 
	#EXT3_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

133 
	#EXT3_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

134 
	#EXT3_IOC_GETVERSION
 
	`_IOR
('f', 3, )

	)

135 
	#EXT3_IOC_SETVERSION
 
	`_IOW
('f', 4, )

	)

136 
	#EXT3_IOC_GROUP_EXTEND
 
	`_IOW
('f', 7, )

	)

137 
	#EXT3_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext3_√w_group_öput
)

	)

138 
	#EXT3_IOC_GETVERSION_OLD
 
	`_IOR
('v', 1, )

	)

139 
	#EXT3_IOC_SETVERSION_OLD
 
	`_IOW
('v', 2, )

	)

140 
	#EXT3_IOC_GETRSVSZ
 
	`_IOR
('f', 5, )

	)

141 
	#EXT3_IOC_SETRSVSZ
 
	`_IOW
('f', 6, )

	)

143 
	sext3_mou¡_›ti⁄s
 {

144 
	ms_mou¡_›t
;

145 
uid_t
 
	ms_ªsuid
;

146 
gid_t
 
	ms_ªsgid
;

147 
	ms_commô_öãrvÆ
;

150 
	sext3_öode
 {

151 
__À16
 
	mi_mode
;

152 
__À16
 
	mi_uid
;

153 
__À32
 
	mi_size
;

154 
__À32
 
	mi_©ime
;

155 
__À32
 
	mi_˘ime
;

156 
__À32
 
	mi_mtime
;

157 
__À32
 
	mi_dtime
;

158 
__À16
 
	mi_gid
;

159 
__À16
 
	mi_löks_cou¡
;

160 
__À32
 
	mi_blocks
;

161 
__À32
 
	mi_Êags
;

164 
__u32
 
	ml_i_ª£rved1
;

165 } 
	mlöux1
;

167 
__u32
 
	mh_i_å™¶©‹
;

168 } 
	mhurd1
;

170 
__u32
 
	mm_i_ª£rved1
;

171 } 
	mmasix1
;

172 } 
	mosd1
;

173 
__À32
 
	mi_block
[
EXT3_N_BLOCKS
];

174 
__À32
 
	mi_gíî©i⁄
;

175 
__À32
 
	mi_fûe_a˛
;

176 
__À32
 
	mi_dú_a˛
;

177 
__À32
 
	mi_Áddr
;

180 
__u8
 
	ml_i_‰ag
;

181 
__u8
 
	ml_i_fsize
;

182 
__u16
 
	mi_∑d1
;

183 
__À16
 
	ml_i_uid_high
;

184 
__À16
 
	ml_i_gid_high
;

185 
__u32
 
	ml_i_ª£rved2
;

186 } 
	mlöux2
;

188 
__u8
 
	mh_i_‰ag
;

189 
__u8
 
	mh_i_fsize
;

190 
__u16
 
	mh_i_mode_high
;

191 
__u16
 
	mh_i_uid_high
;

192 
__u16
 
	mh_i_gid_high
;

193 
__u32
 
	mh_i_auth‹
;

194 } 
	mhurd2
;

196 
__u8
 
	mm_i_‰ag
;

197 
__u8
 
	mm_i_fsize
;

198 
__u16
 
	mm_∑d1
;

199 
__u32
 
	mm_i_ª£rved2
[2];

200 } 
	mmasix2
;

201 } 
	mosd2
;

202 
__À16
 
	mi_exåa_isize
;

203 
__À16
 
	mi_∑d1
;

206 
	#i_size_high
 
i_dú_a˛


	)

208 #ifde‡
__löux__


209 
	#i_ª£rved1
 
osd1
.
löux1
.
l_i_ª£rved1


	)

210 
	#i_‰ag
 
osd2
.
löux2
.
l_i_‰ag


	)

211 
	#i_fsize
 
osd2
.
löux2
.
l_i_fsize


	)

212 
	#i_uid_low
 
i_uid


	)

213 
	#i_gid_low
 
i_gid


	)

214 
	#i_uid_high
 
osd2
.
löux2
.
l_i_uid_high


	)

215 
	#i_gid_high
 
osd2
.
löux2
.
l_i_gid_high


	)

216 
	#i_ª£rved2
 
osd2
.
löux2
.
l_i_ª£rved2


	)

218 #ñi‡
deföed
(
__GNU__
)

220 
	#i_å™¶©‹
 
osd1
.
hurd1
.
h_i_å™¶©‹


	)

221 
	#i_‰ag
 
osd2
.
hurd2
.
h_i_‰ag
;

	)

222 
	#i_fsize
 
osd2
.
hurd2
.
h_i_fsize
;

	)

223 
	#i_uid_high
 
osd2
.
hurd2
.
h_i_uid_high


	)

224 
	#i_gid_high
 
osd2
.
hurd2
.
h_i_gid_high


	)

225 
	#i_auth‹
 
osd2
.
hurd2
.
h_i_auth‹


	)

227 #ñi‡
deföed
(
__masix__
)

229 
	#i_ª£rved1
 
osd1
.
masix1
.
m_i_ª£rved1


	)

230 
	#i_‰ag
 
osd2
.
masix2
.
m_i_‰ag


	)

231 
	#i_fsize
 
osd2
.
masix2
.
m_i_fsize


	)

232 
	#i_ª£rved2
 
osd2
.
masix2
.
m_i_ª£rved2


	)

236 
	#EXT3_VALID_FS
 0x0001

	)

237 
	#EXT3_ERROR_FS
 0x0002

	)

238 
	#EXT3_ORPHAN_FS
 0x0004

	)

240 
	#EXT3_MOUNT_CHECK
 0x00001

	)

241 
	#EXT3_MOUNT_OLDALLOC
 0x00002

	)

242 
	#EXT3_MOUNT_GRPID
 0x00004

	)

243 
	#EXT3_MOUNT_DEBUG
 0x00008

	)

244 
	#EXT3_MOUNT_ERRORS_CONT
 0x00010

	)

245 
	#EXT3_MOUNT_ERRORS_RO
 0x00020

	)

246 
	#EXT3_MOUNT_ERRORS_PANIC
 0x00040

	)

247 
	#EXT3_MOUNT_MINIX_DF
 0x00080

	)

248 
	#EXT3_MOUNT_NOLOAD
 0x00100

	)

249 
	#EXT3_MOUNT_ABORT
 0x00200

	)

250 
	#EXT3_MOUNT_DATA_FLAGS
 0x00C00

	)

251 
	#EXT3_MOUNT_JOURNAL_DATA
 0x00400

	)

252 
	#EXT3_MOUNT_ORDERED_DATA
 0x00800

	)

253 
	#EXT3_MOUNT_WRITEBACK_DATA
 0x00C00

	)

254 
	#EXT3_MOUNT_UPDATE_JOURNAL
 0x01000

	)

255 
	#EXT3_MOUNT_NO_UID32
 0x02000

	)

256 
	#EXT3_MOUNT_XATTR_USER
 0x04000

	)

257 
	#EXT3_MOUNT_POSIX_ACL
 0x08000

	)

258 
	#EXT3_MOUNT_RESERVATION
 0x10000

	)

259 
	#EXT3_MOUNT_BARRIER
 0x20000

	)

260 
	#EXT3_MOUNT_NOBH
 0x40000

	)

261 
	#EXT3_MOUNT_QUOTA
 0x80000

	)

262 
	#EXT3_MOUNT_USRQUOTA
 0x100000

	)

263 
	#EXT3_MOUNT_GRPQUOTA
 0x200000

	)

265 #i‚de‡
_LINUX_EXT2_FS_H


266 
	#˛ór_›t
(
o
, 
›t
Ëÿ&~
EXT3_MOUNT_
##
	)
opt

267 
	#£t_›t
(
o
, 
›t
Ëÿ|
EXT3_MOUNT_
##
	)
opt

268 
	#ã°_›t
(
sb
, 
›t
Ë(
	`EXT3_SB
(sb)->
s_mou¡_›t
 & 
EXT3_MOUNT_
##›t)

	)

270 
	#EXT2_MOUNT_NOLOAD
 
EXT3_MOUNT_NOLOAD


	)

271 
	#EXT2_MOUNT_ABORT
 
EXT3_MOUNT_ABORT


	)

272 
	#EXT2_MOUNT_DATA_FLAGS
 
EXT3_MOUNT_DATA_FLAGS


	)

275 
	#ext3_£t_bô
 
ext2_£t_bô


	)

276 
	#ext3_£t_bô_©omic
 
ext2_£t_bô_©omic


	)

277 
	#ext3_˛ór_bô
 
ext2_˛ór_bô


	)

278 
	#ext3_˛ór_bô_©omic
 
ext2_˛ór_bô_©omic


	)

279 
	#ext3_ã°_bô
 
ext2_ã°_bô


	)

280 
	#ext3_föd_fú°_zîo_bô
 
ext2_föd_fú°_zîo_bô


	)

281 
	#ext3_föd_√xt_zîo_bô
 
ext2_föd_√xt_zîo_bô


	)

283 
	#EXT3_DFL_MAX_MNT_COUNT
 20

	)

284 
	#EXT3_DFL_CHECKINTERVAL
 0

	)

286 
	#EXT3_ERRORS_CONTINUE
 1

	)

287 
	#EXT3_ERRORS_RO
 2

	)

288 
	#EXT3_ERRORS_PANIC
 3

	)

289 
	#EXT3_ERRORS_DEFAULT
 
EXT3_ERRORS_CONTINUE


	)

291 
	sext3_su≥r_block
 {

292 
__À32
 
	ms_öodes_cou¡
;

293 
__À32
 
	ms_blocks_cou¡
;

294 
__À32
 
	ms_r_blocks_cou¡
;

295 
__À32
 
	ms_‰ì_blocks_cou¡
;

296 
__À32
 
	ms_‰ì_öodes_cou¡
;

297 
__À32
 
	ms_fú°_d©a_block
;

298 
__À32
 
	ms_log_block_size
;

299 
__À32
 
	ms_log_‰ag_size
;

300 
__À32
 
	ms_blocks_≥r_group
;

301 
__À32
 
	ms_‰ags_≥r_group
;

302 
__À32
 
	ms_öodes_≥r_group
;

303 
__À32
 
	ms_mtime
;

304 
__À32
 
	ms_wtime
;

305 
__À16
 
	ms_m¡_cou¡
;

306 
__À16
 
	ms_max_m¡_cou¡
;

307 
__À16
 
	ms_magic
;

308 
__À16
 
	ms_°©e
;

309 
__À16
 
	ms_îr‹s
;

310 
__À16
 
	ms_mö‹_ªv_Àvñ
;

311 
__À32
 
	ms_œ°check
;

312 
__À32
 
	ms_checköãrvÆ
;

313 
__À32
 
	ms_¸ót‹_os
;

314 
__À32
 
	ms_ªv_Àvñ
;

315 
__À16
 
	ms_def_ªsuid
;

316 
__À16
 
	ms_def_ªsgid
;

318 
__À32
 
	ms_fú°_öo
;

319 
__À16
 
	ms_öode_size
;

320 
__À16
 
	ms_block_group_ƒ
;

321 
__À32
 
	ms_„©uª_com∑t
;

322 
__À32
 
	ms_„©uª_öcom∑t
;

323 
__À32
 
	ms_„©uª_ro_com∑t
;

324 
__u8
 
	ms_uuid
[16];

325 
	ms_vﬁume_«me
[16];

326 
	ms_œ°_mou¡ed
[64];

327 
__À32
 
	ms_Æg‹ôhm_ußge_bôm≠
;

329 
__u8
 
	ms_¥óŒoc_blocks
;

330 
__u8
 
	ms_¥óŒoc_dú_blocks
;

331 
__u16
 
	ms_ª£rved_gdt_blocks
;

333 
__u8
 
	ms_jou∫Æ_uuid
[16];

334 
__À32
 
	ms_jou∫Æ_öum
;

335 
__À32
 
	ms_jou∫Æ_dev
;

336 
__À32
 
	ms_œ°_‹ph™
;

337 
__À32
 
	ms_hash_£ed
[4];

338 
__u8
 
	ms_def_hash_vîsi⁄
;

339 
__u8
 
	ms_ª£rved_ch¨_∑d
;

340 
__u16
 
	ms_ª£rved_w‹d_∑d
;

341 
__À32
 
	ms_deÁu…_mou¡_›ts
;

342 
__À32
 
	ms_fú°_mëa_bg
;

343 
__u32
 
	ms_ª£rved
[190];

346 
	#EXT3_SB
(
sb
Ë(sb)

	)

348 
	#NEXT_ORPHAN
(
öode
Ë
	`EXT3_I
(öode)->
i_dtime


	)

350 
	#EXT3_OS_LINUX
 0

	)

351 
	#EXT3_OS_HURD
 1

	)

352 
	#EXT3_OS_MASIX
 2

	)

353 
	#EXT3_OS_FREEBSD
 3

	)

354 
	#EXT3_OS_LITES
 4

	)

356 
	#EXT3_GOOD_OLD_REV
 0

	)

357 
	#EXT3_DYNAMIC_REV
 1

	)

359 
	#EXT3_CURRENT_REV
 
EXT3_GOOD_OLD_REV


	)

360 
	#EXT3_MAX_SUPP_REV
 
EXT3_DYNAMIC_REV


	)

362 
	#EXT3_GOOD_OLD_INODE_SIZE
 128

	)

364 
	#EXT3_HAS_COMPAT_FEATURE
(
sb
,
mask
Ë–
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_com∑t
 & 
	`˝u_to_À32
(maskË)

	)

365 
	#EXT3_HAS_RO_COMPAT_FEATURE
(
sb
,
mask
Ë–
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_ro_com∑t
 & 
	`˝u_to_À32
(maskË)

	)

366 
	#EXT3_HAS_INCOMPAT_FEATURE
(
sb
,
mask
Ë–
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_öcom∑t
 & 
	`˝u_to_À32
(maskË)

	)

367 
	#EXT3_SET_COMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_com∑t
 |
	`˝u_to_À32
(mask)

	)

368 
	#EXT3_SET_RO_COMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_ro_com∑t
 |
	`˝u_to_À32
(mask)

	)

369 
	#EXT3_SET_INCOMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_öcom∑t
 |
	`˝u_to_À32
(mask)

	)

370 
	#EXT3_CLEAR_COMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_com∑t
 &~
	`˝u_to_À32
(mask)

	)

371 
	#EXT3_CLEAR_RO_COMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_ro_com∑t
 &~
	`˝u_to_À32
(mask)

	)

372 
	#EXT3_CLEAR_INCOMPAT_FEATURE
(
sb
,
mask
Ë
	`EXT3_SB
(sb)->
s_es
->
s_„©uª_öcom∑t
 &~
	`˝u_to_À32
(mask)

	)

374 
	#EXT3_FEATURE_COMPAT_DIR_PREALLOC
 0x0001

	)

375 
	#EXT3_FEATURE_COMPAT_IMAGIC_INODES
 0x0002

	)

376 
	#EXT3_FEATURE_COMPAT_HAS_JOURNAL
 0x0004

	)

377 
	#EXT3_FEATURE_COMPAT_EXT_ATTR
 0x0008

	)

378 
	#EXT3_FEATURE_COMPAT_RESIZE_INODE
 0x0010

	)

379 
	#EXT3_FEATURE_COMPAT_DIR_INDEX
 0x0020

	)

381 
	#EXT3_FEATURE_RO_COMPAT_SPARSE_SUPER
 0x0001

	)

382 
	#EXT3_FEATURE_RO_COMPAT_LARGE_FILE
 0x0002

	)

383 
	#EXT3_FEATURE_RO_COMPAT_BTREE_DIR
 0x0004

	)

385 
	#EXT3_FEATURE_INCOMPAT_COMPRESSION
 0x0001

	)

386 
	#EXT3_FEATURE_INCOMPAT_FILETYPE
 0x0002

	)

387 
	#EXT3_FEATURE_INCOMPAT_RECOVER
 0x0004

	)

388 
	#EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
 0x0008

	)

389 
	#EXT3_FEATURE_INCOMPAT_META_BG
 0x0010

	)

391 
	#EXT3_FEATURE_COMPAT_SUPP
 
EXT2_FEATURE_COMPAT_EXT_ATTR


	)

392 
	#EXT3_FEATURE_INCOMPAT_SUPP
 (
EXT3_FEATURE_INCOMPAT_FILETYPE
| 
EXT3_FEATURE_INCOMPAT_RECOVER
| 
EXT3_FEATURE_INCOMPAT_META_BG
)

	)

393 
	#EXT3_FEATURE_RO_COMPAT_SUPP
 (
EXT3_FEATURE_RO_COMPAT_SPARSE_SUPER
| 
EXT3_FEATURE_RO_COMPAT_LARGE_FILE
| 
EXT3_FEATURE_RO_COMPAT_BTREE_DIR
)

	)

395 
	#EXT3_DEF_RESUID
 0

	)

396 
	#EXT3_DEF_RESGID
 0

	)

398 
	#EXT3_DEFM_DEBUG
 0x0001

	)

399 
	#EXT3_DEFM_BSDGROUPS
 0x0002

	)

400 
	#EXT3_DEFM_XATTR_USER
 0x0004

	)

401 
	#EXT3_DEFM_ACL
 0x0008

	)

402 
	#EXT3_DEFM_UID16
 0x0010

	)

403 
	#EXT3_DEFM_JMODE
 0x0060

	)

404 
	#EXT3_DEFM_JMODE_DATA
 0x0020

	)

405 
	#EXT3_DEFM_JMODE_ORDERED
 0x0040

	)

406 
	#EXT3_DEFM_JMODE_WBACK
 0x0060

	)

408 
	#EXT3_NAME_LEN
 255

	)

410 
	sext3_dú_íåy
 {

411 
__À32
 
	möode
;

412 
__À16
 
	mªc_Àn
;

413 
__À16
 
	m«me_Àn
;

414 
	m«me
[
EXT3_NAME_LEN
];

417 
	sext3_dú_íåy_2
 {

418 
__À32
 
	möode
;

419 
__À16
 
	mªc_Àn
;

420 
__u8
 
	m«me_Àn
;

421 
__u8
 
	mfûe_ty≥
;

422 
	m«me
[
EXT3_NAME_LEN
];

425 
	#EXT3_FT_UNKNOWN
 0

	)

426 
	#EXT3_FT_REG_FILE
 1

	)

427 
	#EXT3_FT_DIR
 2

	)

428 
	#EXT3_FT_CHRDEV
 3

	)

429 
	#EXT3_FT_BLKDEV
 4

	)

430 
	#EXT3_FT_FIFO
 5

	)

431 
	#EXT3_FT_SOCK
 6

	)

432 
	#EXT3_FT_SYMLINK
 7

	)

434 
	#EXT3_FT_MAX
 8

	)

436 
	#EXT3_DIR_PAD
 4

	)

437 
	#EXT3_DIR_ROUND
 (
EXT3_DIR_PAD
 - 1)

	)

438 
	#EXT3_DIR_REC_LEN
(
«me_Àn
Ë((“ame_ÀnË+ 8 + 
EXT3_DIR_ROUND
Ë& ~EXT3_DIR_ROUND)

	)

440 
	#is_dx
(
dú
Ë0

	)

441 
	#EXT3_DIR_LINK_MAX
(
dú
Ë((dú)->
i_∆ök
 >
EXT3_LINK_MAX
)

	)

442 
	#EXT3_DIR_LINK_EMPTY
(
dú
Ë((dú)->
i_∆ök
 =2)

	)

444 
	#DX_HASH_LEGACY
 0

	)

445 
	#DX_HASH_HALF_MD4
 1

	)

446 
	#DX_HASH_TEA
 2

	)

	@linux/fadvise.h

12 #i‚de‡
FADVISE_H_INCLUDED


13 
	#FADVISE_H_INCLUDED


	)

15 
	#POSIX_FADV_NORMAL
 0

	)

16 
	#POSIX_FADV_RANDOM
 1

	)

17 
	#POSIX_FADV_SEQUENTIAL
 2

	)

18 
	#POSIX_FADV_WILLNEED
 3

	)

20 #ifde‡
__s390x__


21 
	#POSIX_FADV_DONTNEED
 6

	)

22 
	#POSIX_FADV_NOREUSE
 7

	)

24 
	#POSIX_FADV_DONTNEED
 4

	)

25 
	#POSIX_FADV_NOREUSE
 5

	)

	@linux/fb.h

12 #i‚de‡
_LINUX_FB_H


13 
	#_LINUX_FB_H


	)

15 
	~<asm/ty≥s.h
>

17 
	#FB_MAJOR
 29

	)

18 
	#FB_MAX
 32

	)

20 
	#FBIOGET_VSCREENINFO
 0x4600

	)

21 
	#FBIOPUT_VSCREENINFO
 0x4601

	)

22 
	#FBIOGET_FSCREENINFO
 0x4602

	)

23 
	#FBIOGETCMAP
 0x4604

	)

24 
	#FBIOPUTCMAP
 0x4605

	)

25 
	#FBIOPAN_DISPLAY
 0x4606

	)

26 
	#FBIO_CURSOR
 
	`_IOWR
('F', 0x08, 
fb_curs‹
)

	)

28 
	#FBIOGET_CON2FBMAP
 0x460F

	)

29 
	#FBIOPUT_CON2FBMAP
 0x4610

	)

30 
	#FBIOBLANK
 0x4611

	)

31 
	#FBIOGET_VBLANK
 
	`_IOR
('F', 0x12, 
fb_vbœnk
)

	)

32 
	#FBIO_ALLOC
 0x4613

	)

33 
	#FBIO_FREE
 0x4614

	)

34 
	#FBIOGET_GLYPH
 0x4615

	)

35 
	#FBIOGET_HWCINFO
 0x4616

	)

36 
	#FBIOPUT_MODEINFO
 0x4617

	)

37 
	#FBIOGET_DISPINFO
 0x4618

	)

39 
	#FB_TYPE_PACKED_PIXELS
 0

	)

40 
	#FB_TYPE_PLANES
 1

	)

41 
	#FB_TYPE_INTERLEAVED_PLANES
 2

	)

42 
	#FB_TYPE_TEXT
 3

	)

43 
	#FB_TYPE_VGA_PLANES
 4

	)

45 
	#FB_AUX_TEXT_MDA
 0

	)

46 
	#FB_AUX_TEXT_CGA
 1

	)

47 
	#FB_AUX_TEXT_S3_MMIO
 2

	)

48 
	#FB_AUX_TEXT_MGA_STEP16
 3

	)

49 
	#FB_AUX_TEXT_MGA_STEP8
 4

	)

51 
	#FB_AUX_VGA_PLANES_VGA4
 0

	)

52 
	#FB_AUX_VGA_PLANES_CFB4
 1

	)

53 
	#FB_AUX_VGA_PLANES_CFB8
 2

	)

55 
	#FB_VISUAL_MONO01
 0

	)

56 
	#FB_VISUAL_MONO10
 1

	)

57 
	#FB_VISUAL_TRUECOLOR
 2

	)

58 
	#FB_VISUAL_PSEUDOCOLOR
 3

	)

59 
	#FB_VISUAL_DIRECTCOLOR
 4

	)

60 
	#FB_VISUAL_STATIC_PSEUDOCOLOR
 5

	)

62 
	#FB_ACCEL_NONE
 0

	)

63 
	#FB_ACCEL_ATARIBLITT
 1

	)

64 
	#FB_ACCEL_AMIGABLITT
 2

	)

65 
	#FB_ACCEL_S3_TRIO64
 3

	)

66 
	#FB_ACCEL_NCR_77C32BLT
 4

	)

67 
	#FB_ACCEL_S3_VIRGE
 5

	)

68 
	#FB_ACCEL_ATI_MACH64GX
 6

	)

69 
	#FB_ACCEL_DEC_TGA
 7

	)

70 
	#FB_ACCEL_ATI_MACH64CT
 8

	)

71 
	#FB_ACCEL_ATI_MACH64VT
 9

	)

72 
	#FB_ACCEL_ATI_MACH64GT
 10

	)

73 
	#FB_ACCEL_SUN_CREATOR
 11

	)

74 
	#FB_ACCEL_SUN_CGSIX
 12

	)

75 
	#FB_ACCEL_SUN_LEO
 13

	)

76 
	#FB_ACCEL_IMS_TWINTURBO
 14

	)

77 
	#FB_ACCEL_3DLABS_PERMEDIA2
 15

	)

78 
	#FB_ACCEL_MATROX_MGA2064W
 16

	)

79 
	#FB_ACCEL_MATROX_MGA1064SG
 17

	)

80 
	#FB_ACCEL_MATROX_MGA2164W
 18

	)

81 
	#FB_ACCEL_MATROX_MGA2164W_AGP
 19

	)

82 
	#FB_ACCEL_MATROX_MGAG100
 20

	)

83 
	#FB_ACCEL_MATROX_MGAG200
 21

	)

84 
	#FB_ACCEL_SUN_CG14
 22

	)

85 
	#FB_ACCEL_SUN_BWTWO
 23

	)

86 
	#FB_ACCEL_SUN_CGTHREE
 24

	)

87 
	#FB_ACCEL_SUN_TCX
 25

	)

88 
	#FB_ACCEL_MATROX_MGAG400
 26

	)

89 
	#FB_ACCEL_NV3
 27

	)

90 
	#FB_ACCEL_NV4
 28

	)

91 
	#FB_ACCEL_NV5
 29

	)

92 
	#FB_ACCEL_CT_6555x
 30

	)

93 
	#FB_ACCEL_3DFX_BANSHEE
 31

	)

94 
	#FB_ACCEL_ATI_RAGE128
 32

	)

95 
	#FB_ACCEL_IGS_CYBER2000
 33

	)

96 
	#FB_ACCEL_IGS_CYBER2010
 34

	)

97 
	#FB_ACCEL_IGS_CYBER5000
 35

	)

98 
	#FB_ACCEL_SIS_GLAMOUR
 36

	)

99 
	#FB_ACCEL_3DLABS_PERMEDIA3
 37

	)

100 
	#FB_ACCEL_ATI_RADEON
 38

	)

101 
	#FB_ACCEL_I810
 39

	)

102 
	#FB_ACCEL_SIS_GLAMOUR_2
 40

	)

103 
	#FB_ACCEL_SIS_XABRE
 41

	)

104 
	#FB_ACCEL_I830
 42

	)

105 
	#FB_ACCEL_NV_10
 43

	)

106 
	#FB_ACCEL_NV_20
 44

	)

107 
	#FB_ACCEL_NV_30
 45

	)

108 
	#FB_ACCEL_NV_40
 46

	)

109 
	#FB_ACCEL_XGI_VOLARI_V
 47

	)

110 
	#FB_ACCEL_XGI_VOLARI_Z
 48

	)

111 
	#FB_ACCEL_OMAP1610
 49

	)

112 
	#FB_ACCEL_NEOMAGIC_NM2070
 90

	)

113 
	#FB_ACCEL_NEOMAGIC_NM2090
 91

	)

114 
	#FB_ACCEL_NEOMAGIC_NM2093
 92

	)

115 
	#FB_ACCEL_NEOMAGIC_NM2097
 93

	)

116 
	#FB_ACCEL_NEOMAGIC_NM2160
 94

	)

117 
	#FB_ACCEL_NEOMAGIC_NM2200
 95

	)

118 
	#FB_ACCEL_NEOMAGIC_NM2230
 96

	)

119 
	#FB_ACCEL_NEOMAGIC_NM2360
 97

	)

120 
	#FB_ACCEL_NEOMAGIC_NM2380
 98

	)

122 
	#FB_ACCEL_SAVAGE4
 0x80

	)

123 
	#FB_ACCEL_SAVAGE3D
 0x81

	)

124 
	#FB_ACCEL_SAVAGE3D_MV
 0x82

	)

125 
	#FB_ACCEL_SAVAGE2000
 0x83

	)

126 
	#FB_ACCEL_SAVAGE_MX_MV
 0x84

	)

127 
	#FB_ACCEL_SAVAGE_MX
 0x85

	)

128 
	#FB_ACCEL_SAVAGE_IX_MV
 0x86

	)

129 
	#FB_ACCEL_SAVAGE_IX
 0x87

	)

130 
	#FB_ACCEL_PROSAVAGE_PM
 0x88

	)

131 
	#FB_ACCEL_PROSAVAGE_KM
 0x89

	)

132 
	#FB_ACCEL_S3TWISTER_P
 0x8a

	)

133 
	#FB_ACCEL_S3TWISTER_K
 0x8b

	)

134 
	#FB_ACCEL_SUPERSAVAGE
 0x8c

	)

135 
	#FB_ACCEL_PROSAVAGE_DDR
 0x8d

	)

136 
	#FB_ACCEL_PROSAVAGE_DDRK
 0x8e

	)

138 
	sfb_fix_s¸ìnöfo
 {

139 
	mid
[16];

140 
	msmem_°¨t
;

142 
__u32
 
	msmem_Àn
;

143 
__u32
 
	mty≥
;

144 
__u32
 
	mty≥_aux
;

145 
__u32
 
	mvisuÆ
;

146 
__u16
 
	mx∑n°ï
;

147 
__u16
 
	my∑n°ï
;

148 
__u16
 
	mywøp°ï
;

149 
__u32
 
	mlöe_Àngth
;

150 
	mmmio_°¨t
;

152 
__u32
 
	mmmio_Àn
;

153 
__u32
 
	mac˚l
;

155 
__u16
 
	mª£rved
[3];

158 
	sfb_bôfõld
 {

159 
__u32
 
	moff£t
;

160 
__u32
 
	mÀngth
;

161 
__u32
 
	mmsb_right
;

165 
	#FB_NONSTD_HAM
 1

	)

167 
	#FB_ACTIVATE_NOW
 0

	)

168 
	#FB_ACTIVATE_NXTOPEN
 1

	)

169 
	#FB_ACTIVATE_TEST
 2

	)

170 
	#FB_ACTIVATE_MASK
 15

	)

172 
	#FB_ACTIVATE_VBL
 16

	)

173 
	#FB_CHANGE_CMAP_VBL
 32

	)

174 
	#FB_ACTIVATE_ALL
 64

	)

175 
	#FB_ACTIVATE_FORCE
 128

	)

176 
	#FB_ACTIVATE_INV_MODE
 256

	)

178 
	#FB_ACCELF_TEXT
 1

	)

180 
	#FB_SYNC_HOR_HIGH_ACT
 1

	)

181 
	#FB_SYNC_VERT_HIGH_ACT
 2

	)

182 
	#FB_SYNC_EXT
 4

	)

183 
	#FB_SYNC_COMP_HIGH_ACT
 8

	)

184 
	#FB_SYNC_BROADCAST
 16

	)

186 
	#FB_SYNC_ON_GREEN
 32

	)

188 
	#FB_VMODE_NONINTERLACED
 0

	)

189 
	#FB_VMODE_INTERLACED
 1

	)

190 
	#FB_VMODE_DOUBLE
 2

	)

191 
	#FB_VMODE_MASK
 255

	)

193 
	#FB_VMODE_YWRAP
 256

	)

194 
	#FB_VMODE_SMOOTH_XPAN
 512

	)

195 
	#FB_VMODE_CONUPDATE
 512

	)

197 
	#FB_ROTATE_UR
 0

	)

198 
	#FB_ROTATE_CW
 1

	)

199 
	#FB_ROTATE_UD
 2

	)

200 
	#FB_ROTATE_CCW
 3

	)

202 
	#PICOS2KHZ
(
a
Ë(1000000000UL/◊))

	)

203 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

205 
	sfb_v¨_s¸ìnöfo
 {

206 
__u32
 
	mxªs
;

207 
__u32
 
	myªs
;

208 
__u32
 
	mxªs_vútuÆ
;

209 
__u32
 
	myªs_vútuÆ
;

210 
__u32
 
	mxoff£t
;

211 
__u32
 
	myoff£t
;

213 
__u32
 
	mbôs_≥r_pixñ
;

214 
__u32
 
	mgøysˇÀ
;

216 
fb_bôfõld
 
	mªd
;

217 
fb_bôfõld
 
	mgªí
;

218 
fb_bôfõld
 
	mblue
;

219 
fb_bôfõld
 
	må™•
;

221 
__u32
 
	mn⁄°d
;

223 
__u32
 
	ma˘iv©e
;

225 
__u32
 
	mheight
;

226 
__u32
 
	mwidth
;

228 
__u32
 
	mac˚l_Êags
;

230 
__u32
 
	mpix˛ock
;

231 
__u32
 
	mÀ·_m¨gö
;

232 
__u32
 
	mright_m¨gö
;

233 
__u32
 
	muµî_m¨gö
;

234 
__u32
 
	mlowî_m¨gö
;

235 
__u32
 
	mhsync_Àn
;

236 
__u32
 
	mvsync_Àn
;

237 
__u32
 
	msync
;

238 
__u32
 
	mvmode
;

239 
__u32
 
	mrŸ©e
;

240 
__u32
 
	mª£rved
[5];

243 
	sfb_cm≠
 {

244 
__u32
 
	m°¨t
;

245 
__u32
 
	mÀn
;

246 
__u16
 *
	mªd
;

247 
__u16
 *
	mgªí
;

248 
__u16
 *
	mblue
;

249 
__u16
 *
	må™•
;

252 
	sfb_c⁄2fbm≠
 {

253 
__u32
 
	mc⁄sﬁe
;

254 
__u32
 
	m‰amebuf„r
;

257 
	#VESA_NO_BLANKING
 0

	)

258 
	#VESA_VSYNC_SUSPEND
 1

	)

259 
	#VESA_HSYNC_SUSPEND
 2

	)

260 
	#VESA_POWERDOWN
 3

	)

264 
	mFB_BLANK_UNBLANK
 = 
VESA_NO_BLANKING
,

266 
	mFB_BLANK_NORMAL
 = 
VESA_NO_BLANKING
 + 1,

268 
	mFB_BLANK_VSYNC_SUSPEND
 = 
VESA_VSYNC_SUSPEND
 + 1,

270 
	mFB_BLANK_HSYNC_SUSPEND
 = 
VESA_HSYNC_SUSPEND
 + 1,

272 
	mFB_BLANK_POWERDOWN
 = 
VESA_POWERDOWN
 + 1

275 
	#FB_VBLANK_VBLANKING
 0x001

	)

276 
	#FB_VBLANK_HBLANKING
 0x002

	)

277 
	#FB_VBLANK_HAVE_VBLANK
 0x004

	)

278 
	#FB_VBLANK_HAVE_HBLANK
 0x008

	)

279 
	#FB_VBLANK_HAVE_COUNT
 0x010

	)

280 
	#FB_VBLANK_HAVE_VCOUNT
 0x020

	)

281 
	#FB_VBLANK_HAVE_HCOUNT
 0x040

	)

282 
	#FB_VBLANK_VSYNCING
 0x080

	)

283 
	#FB_VBLANK_HAVE_VSYNC
 0x100

	)

285 
	sfb_vbœnk
 {

286 
__u32
 
	mÊags
;

287 
__u32
 
	mcou¡
;

288 
__u32
 
	mvcou¡
;

289 
__u32
 
	mhcou¡
;

290 
__u32
 
	mª£rved
[4];

293 
	#ROP_COPY
 0

	)

294 
	#ROP_XOR
 1

	)

296 
	sfb_c›y¨ó
 {

297 
__u32
 
	mdx
;

298 
__u32
 
	mdy
;

299 
__u32
 
	mwidth
;

300 
__u32
 
	mheight
;

301 
__u32
 
	msx
;

302 
__u32
 
	msy
;

305 
	sfb_fûÃe˘
 {

306 
__u32
 
	mdx
;

307 
__u32
 
	mdy
;

308 
__u32
 
	mwidth
;

309 
__u32
 
	mheight
;

310 
__u32
 
	mcﬁ‹
;

311 
__u32
 
	mr›
;

314 
	sfb_image
 {

315 
__u32
 
	mdx
;

316 
__u32
 
	mdy
;

317 
__u32
 
	mwidth
;

318 
__u32
 
	mheight
;

319 
__u32
 
	mfg_cﬁ‹
;

320 
__u32
 
	mbg_cﬁ‹
;

321 
__u8
 
	mdïth
;

322 c⁄° *
	md©a
;

323 
fb_cm≠
 
	mcm≠
;

326 
	#FB_CUR_SETIMAGE
 0x01

	)

327 
	#FB_CUR_SETPOS
 0x02

	)

328 
	#FB_CUR_SETHOT
 0x04

	)

329 
	#FB_CUR_SETCMAP
 0x08

	)

330 
	#FB_CUR_SETSHAPE
 0x10

	)

331 
	#FB_CUR_SETSIZE
 0x20

	)

332 
	#FB_CUR_SETALL
 0xFF

	)

334 
	sfbcuΩos
 {

335 
__u16
 
	mx
, 
	my
;

338 
	sfb_curs‹
 {

339 
__u16
 
	m£t
;

340 
__u16
 
	míabÀ
;

341 
__u16
 
	mr›
;

342 c⁄° *
	mmask
;

343 
fbcuΩos
 
	mhŸ
;

344 
fb_image
 
	mimage
;

	@linux/fcntl.h

12 #i‚de‡
_LINUX_FCNTL_H


13 
	#_LINUX_FCNTL_H


	)

15 
	~<asm/f˙é.h
>

17 
	#F_SETLEASE
 (
F_LINUX_SPECIFIC_BASE
+0)

	)

18 
	#F_GETLEASE
 (
F_LINUX_SPECIFIC_BASE
+1)

	)

20 
	#F_NOTIFY
 (
F_LINUX_SPECIFIC_BASE
+2)

	)

22 
	#DN_ACCESS
 0x00000001

	)

23 
	#DN_MODIFY
 0x00000002

	)

24 
	#DN_CREATE
 0x00000004

	)

25 
	#DN_DELETE
 0x00000008

	)

26 
	#DN_RENAME
 0x00000010

	)

27 
	#DN_ATTRIB
 0x00000020

	)

28 
	#DN_MULTISHOT
 0x80000000

	)

30 
	#AT_FDCWD
 -100

	)

31 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

32 
	#AT_REMOVEDIR
 0x200

	)

33 
	#AT_SYMLINK_FOLLOW
 0x400

	)

	@linux/fd.h

12 #i‚de‡
_LINUX_FD_H


13 
	#_LINUX_FD_H


	)

15 
	~<löux/io˘l.h
>

16 
	~<löux/compûî.h
>

18 
	sÊ›py_°ru˘
 {

19 
	msize
,

20 
	m£˘
,

21 
	mhód
,

22 
	måack
,

23 
	m°ªtch
;

24 
	#FD_STRETCH
 1

	)

25 
	#FD_SWAPSIDES
 2

	)

26 
	#FD_ZEROBASED
 4

	)

28 
	mg≠
,

30 
	møã
,

31 
	#FD_2M
 0x4

	)

32 
	#FD_SIZECODEMASK
 0x38

	)

33 
	#FD_SIZECODE
(
Ê›py
Ë(((((Ê›py)->
øã
&
FD_SIZECODEMASK
)>> 3)+ 2Ë%8)

	)

34 
	#FD_SECTSIZE
(
Ê›py
Ë–(Ê›py)->
øã
 & 
FD_2M
 ? 512 : 128 << 
	`FD_SIZECODE
(Ê›pyË)

	)

35 
	#FD_PERP
 0x40

	)

37 
	m•ec1
,

38 
	mfmt_g≠
;

39 c⁄° * 
	m«me
;

42 
	#FDCLRPRM
 
	`_IO
(2, 0x41)

	)

44 
	#FDSETPRM
 
	`_IOW
(2, 0x42, 
Ê›py_°ru˘
)

	)

45 
	#FDSETMEDIAPRM
 
FDSETPRM


	)

47 
	#FDDEFPRM
 
	`_IOW
(2, 0x43, 
Ê›py_°ru˘
)

	)

48 
	#FDGETPRM
 
	`_IOR
(2, 0x04, 
Ê›py_°ru˘
)

	)

49 
	#FDDEFMEDIAPRM
 
FDDEFPRM


	)

50 
	#FDGETMEDIAPRM
 
FDGETPRM


	)

52 
	#FDMSGON
 
	`_IO
(2,0x45)

	)

53 
	#FDMSGOFF
 
	`_IO
(2,0x46)

	)

55 
	#FD_FILL_BYTE
 0xF6

	)

57 
	sf‹m©_des¸
 {

58 
	mdevi˚
,
	mhód
,
	måack
;

61 
	#FDFMTBEG
 
	`_IO
(2,0x47)

	)

63 
	#FDFMTTRK
 
	`_IOW
(2,0x48, 
f‹m©_des¸
)

	)

65 
	#FDFMTEND
 
	`_IO
(2,0x49)

	)

67 
	sÊ›py_max_îr‹s
 {

69 
	mab‹t
,

70 
	mªad_åack
,

71 
	mª£t
,

72 
	mªˇl
,

74 
	mªp‹tög
;

78 
	#FDSETEMSGTRESH
 
	`_IO
(2,0x4a)

	)

80 
	#FDFLUSH
 
	`_IO
(2,0x4b)

	)

82 
	#FDSETMAXERRS
 
	`_IOW
(2, 0x4c, 
Ê›py_max_îr‹s
)

	)

83 
	#FDGETMAXERRS
 
	`_IOR
(2, 0x0e, 
Ê›py_max_îr‹s
)

	)

85 
	tÊ›py_drive_«me
[16];

86 
	#FDGETDRVTYP
 
	`_IOR
(2, 0x0f, 
Ê›py_drive_«me
)

	)

88 
	sÊ›py_drive_∑øms
 {

89 sig√d 
	mcmos
;

91 
	mmax_då
;

92 
	mh…
;

93 
	mhut
;

94 
	m§t
;

96 
	m•öup
;

97 
	m•ödown
;

98 
	m•ödown_off£t
;

99 
	m£À˘_dñay
;

100 
	mΩs
;

101 
	måacks
;

102 
	mtimeout
;

104 
	möãæóve_£˘
;

106 
Ê›py_max_îr‹s
 
	mmax_îr‹s
;

108 
	mÊags
;

110 
	#FTD_MSG
 0x10

	)

111 
	#FD_BROKEN_DCL
 0x20

	)

112 
	#FD_DEBUG
 0x02

	)

113 
	#FD_SILENT_DCL_CLEAR
 0x4

	)

114 
	#FD_INVERTED_DCL
 0x80

	)

116 
	mªad_åack
;

118 
	mautodëe˘
[8];

120 
	mcheck‰eq
;

121 
	m«tive_f‹m©
;

125 
	mFD_NEED_TWADDLE_BIT
,

126 
	mFD_VERIFY_BIT
,

127 
	mFD_DISK_NEWCHANGE_BIT
,

128 
	mFD_UNUSED_BIT
,

129 
	mFD_DISK_CHANGED_BIT
,

130 
	mFD_DISK_WRITABLE_BIT


133 
	#FDSETDRVPRM
 
	`_IOW
(2, 0x90, 
Ê›py_drive_∑øms
)

	)

134 
	#FDGETDRVPRM
 
	`_IOR
(2, 0x11, 
Ê›py_drive_∑øms
)

	)

136 
	sÊ›py_drive_°ru˘
 {

137 
	mÊags
;

139 
	#FD_NEED_TWADDLE
 (1 << 
FD_NEED_TWADDLE_BIT
)

	)

140 
	#FD_VERIFY
 (1 << 
FD_VERIFY_BIT
)

	)

141 
	#FD_DISK_NEWCHANGE
 (1 << 
FD_DISK_NEWCHANGE_BIT
)

	)

142 
	#FD_DISK_CHANGED
 (1 << 
FD_DISK_CHANGED_BIT
)

	)

143 
	#FD_DISK_WRITABLE
 (1 << 
FD_DISK_WRITABLE_BIT
)

	)

145 
	m•öup_d©e
;

146 
	m£À˘_d©e
;

147 
	mfú°_ªad_d©e
;

148 
	m¥obed_f‹m©
;

149 
	måack
;

150 
	mmaxblock
;

151 
	mmaxåack
;

152 
	mgíî©i⁄
;

154 
	mkìp_d©a
;

156 
	mfd_ªf
;

157 
	mfd_devi˚
;

158 
	mœ°_checked
;

160 *
	mdmabuf
;

161 
	mbufblocks
;

164 
	#FDGETDRVSTAT
 
	`_IOR
(2, 0x12, 
Ê›py_drive_°ru˘
)

	)

165 
	#FDPOLLDRVSTAT
 
	`_IOR
(2, 0x13, 
Ê›py_drive_°ru˘
)

	)

167 
	eª£t_mode
 {

168 
	mFD_RESET_IF_NEEDED
,

169 
	mFD_RESET_IF_RAWCMD
,

170 
	mFD_RESET_ALWAYS


172 
	#FDRESET
 
	`_IO
(2, 0x54)

	)

174 
	sÊ›py_fdc_°©e
 {

175 
	m•ec1
;

176 
	m•ec2
;

177 
	mdå
;

178 
	mvîsi⁄
;

179 
	md‹
;

180 
	maddªss
;

181 
	møwcmd
:2;

182 
	mª£t
:1;

183 
	m√ed_c⁄figuª
:1;

184 
	m≥Ω_mode
:2;

185 
	mhas_fifo
:1;

186 
	mdrivî_vîsi⁄
;

187 
	#FD_DRIVER_VERSION
 0x100

	)

189 
	måack
[4];

193 
	#FDGETFDCSTAT
 
	`_IOR
(2, 0x15, 
Ê›py_fdc_°©e
)

	)

195 
	sÊ›py_wrôe_îr‹s
 {

197 
	mwrôe_îr‹s
;

199 
	mfú°_îr‹_£˘‹
;

200 
	mfú°_îr‹_gíî©i⁄
;

201 
	mœ°_îr‹_£˘‹
;

202 
	mœ°_îr‹_gíî©i⁄
;

204 
	mbad√ss
;

207 
	#FDWERRORCLR
 
	`_IO
(2, 0x56)

	)

209 
	#FDWERRORGET
 
	`_IOR
(2, 0x17, 
Ê›py_wrôe_îr‹s
)

	)

211 
	#FDHAVEBATCHEDRAWCMD


	)

213 
	sÊ›py_øw_cmd
 {

214 
	mÊags
;

215 
	#FD_RAW_READ
 1

	)

216 
	#FD_RAW_WRITE
 2

	)

217 
	#FD_RAW_NO_MOTOR
 4

	)

218 
	#FD_RAW_DISK_CHANGE
 4

	)

219 
	#FD_RAW_INTR
 8

	)

220 
	#FD_RAW_SPIN
 0x10

	)

221 
	#FD_RAW_NO_MOTOR_AFTER
 0x20

	)

222 
	#FD_RAW_NEED_DISK
 0x40

	)

223 
	#FD_RAW_NEED_SEEK
 0x80

	)

225 
	#FD_RAW_MORE
 0x100

	)

226 
	#FD_RAW_STOP_IF_FAILURE
 0x200

	)

227 
	#FD_RAW_STOP_IF_SUCCESS
 0x400

	)

228 
	#FD_RAW_SOFTFAILURE
 0x800

	)

230 
	#FD_RAW_FAILURE
 0x10000

	)

231 
	#FD_RAW_HARDFAILURE
 0x20000

	)

233 
__u£r
 *
	md©a
;

234 *
	mkî√l_d©a
;

235 
Ê›py_øw_cmd
 *
	m√xt
;

236 
	mÀngth
;

237 
	mphys_Àngth
;

238 
	mbuf„r_Àngth
;

240 
	møã
;

241 
	mcmd_cou¡
;

242 
	mcmd
[16];

243 
	mª∂y_cou¡
;

244 
	mª∂y
[16];

245 
	måack
;

246 
	mªsu…code
;

248 
	mª£rved1
;

249 
	mª£rved2
;

252 
	#FDRAWCMD
 
	`_IO
(2, 0x58)

	)

254 
	#FDTWADDLE
 
	`_IO
(2, 0x59)

	)

256 
	#FDEJECT
 
	`_IO
(2, 0x5a)

	)

	@linux/file.h

12 #i‚de‡
__LINUX_FILE_H


13 
	#__LINUX_FILE_H


	)

15 
	~<asm/©omic.h
>

16 
	~<löux/posix_ty≥s.h
>

17 
	~<löux/compûî.h
>

18 
	~<löux/•ölock.h
>

19 
	~<löux/rcupd©e.h
>

20 
	~<löux/ty≥s.h
>

22 
	#NR_OPEN_DEFAULT
 
BITS_PER_LONG


	)

24 
	sembedded_fd_£t
 {

25 
	mfds_bôs
[1];

28 
	#EMBEDDED_FD_SET_SIZE
 (
BITS_PER_BYTE
 * (
embedded_fd_£t
))

	)

30 
	sfdèbÀ
 {

31 
	mmax_fds
;

32 
	mmax_fd£t
;

33 
fûe
 ** 
	mfd
;

34 
fd_£t
 *
	m˛o£_⁄_exec
;

35 
fd_£t
 *
	m›í_fds
;

36 
rcu_hód
 
	mrcu
;

37 
fûes_°ru˘
 *
	m‰ì_fûes
;

38 
fdèbÀ
 *
	m√xt
;

41 
	sfûes_°ru˘
 {

43 
©omic_t
 
	mcou¡
;

44 
fdèbÀ
 *
	mfdt
;

45 
fdèbÀ
 
	mfdèb
;

47 
•ölock_t
 
fûe_lock
 
	m____ˇchñöe_Æig√d_ö_smp
;

48 
	m√xt_fd
;

49 
embedded_fd_£t
 
	m˛o£_⁄_exec_öô
;

50 
embedded_fd_£t
 
	m›í_fds_öô
;

51 
fûe
 * 
	mfd_¨øy
[
NR_OPEN_DEFAULT
];

54 
	#fûes_fdèbÀ
(
fûes
Ë(
	`rcu_dîe„ªn˚
((fûes)->
fdt
))

	)

56 
	gkmem_ˇche
;

58 
	#fcheck
(
fd
Ë
	`fcheck_fûes
(
cuºít
->
fûes
, fd)

	)

60 
	gèsk_°ru˘
;

62 
fûes_°ru˘
 *
gë_fûes_°ru˘
(
èsk_°ru˘
 *);

	@linux/filter.h

12 #i‚de‡
__LINUX_FILTER_H__


13 
	#__LINUX_FILTER_H__


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/ty≥s.h
>

18 
	#BPF_MAJOR_VERSION
 1

	)

19 
	#BPF_MINOR_VERSION
 1

	)

21 
	ssock_fûãr


23 
__u16
 
	mcode
;

24 
__u8
 
	mjt
;

25 
__u8
 
	mjf
;

26 
__u32
 
	mk
;

29 
	ssock_Ârog


31 
	mÀn
;

32 
sock_fûãr
 
__u£r
 *
	mfûãr
;

35 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

36 
	#BPF_LD
 0x00

	)

37 
	#BPF_LDX
 0x01

	)

38 
	#BPF_ST
 0x02

	)

39 
	#BPF_STX
 0x03

	)

40 
	#BPF_ALU
 0x04

	)

41 
	#BPF_JMP
 0x05

	)

42 
	#BPF_RET
 0x06

	)

43 
	#BPF_MISC
 0x07

	)

45 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

46 
	#BPF_W
 0x00

	)

47 
	#BPF_H
 0x08

	)

48 
	#BPF_B
 0x10

	)

49 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

50 
	#BPF_IMM
 0x00

	)

51 
	#BPF_ABS
 0x20

	)

52 
	#BPF_IND
 0x40

	)

53 
	#BPF_MEM
 0x60

	)

54 
	#BPF_LEN
 0x80

	)

55 
	#BPF_MSH
 0xa0

	)

57 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

58 
	#BPF_ADD
 0x00

	)

59 
	#BPF_SUB
 0x10

	)

60 
	#BPF_MUL
 0x20

	)

61 
	#BPF_DIV
 0x30

	)

62 
	#BPF_OR
 0x40

	)

63 
	#BPF_AND
 0x50

	)

64 
	#BPF_LSH
 0x60

	)

65 
	#BPF_RSH
 0x70

	)

66 
	#BPF_NEG
 0x80

	)

67 
	#BPF_JA
 0x00

	)

68 
	#BPF_JEQ
 0x10

	)

69 
	#BPF_JGT
 0x20

	)

70 
	#BPF_JGE
 0x30

	)

71 
	#BPF_JSET
 0x40

	)

72 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

73 
	#BPF_K
 0x00

	)

74 
	#BPF_X
 0x08

	)

76 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

77 
	#BPF_A
 0x10

	)

79 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

80 
	#BPF_TAX
 0x00

	)

81 
	#BPF_TXA
 0x80

	)

83 #i‚de‡
BPF_MAXINSNS


84 
	#BPF_MAXINSNS
 4096

	)

87 #i‚de‡
BPF_STMT


88 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

90 #i‚de‡
BPF_JUMP


91 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

94 
	#BPF_MEMWORDS
 16

	)

96 
	#SKF_AD_OFF
 (-0x1000)

	)

97 
	#SKF_AD_PROTOCOL
 0

	)

98 
	#SKF_AD_PKTTYPE
 4

	)

99 
	#SKF_AD_IFINDEX
 8

	)

100 
	#SKF_AD_MAX
 12

	)

101 
	#SKF_NET_OFF
 (-0x100000)

	)

102 
	#SKF_LL_OFF
 (-0x200000)

	)

	@linux/fs.h

12 #i‚de‡
_LINUX_FS_H


13 
	#_LINUX_FS_H


	)

15 
	~<löux/limôs.h
>

16 
	~<löux/io˘l.h
>

18 #unde‡
NR_OPEN


19 
	#NR_OPEN
 (1024*1024)

	)

20 
	#INR_OPEN
 1024

	)

22 
	#BLOCK_SIZE_BITS
 10

	)

23 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

25 
	#SEEK_SET
 0

	)

26 
	#SEEK_CUR
 1

	)

27 
	#SEEK_END
 2

	)

29 
	sfûes_°©_°ru˘
 {

30 
	mƒ_fûes
;

31 
	mƒ_‰ì_fûes
;

32 
	mmax_fûes
;

35 
	söodes_°©_t
 {

36 
	mƒ_öodes
;

37 
	mƒ_unu£d
;

38 
	mdummy
[5];

41 
	#NR_FILE
 8192

	)

43 
	#MAY_EXEC
 1

	)

44 
	#MAY_WRITE
 2

	)

45 
	#MAY_READ
 4

	)

46 
	#MAY_APPEND
 8

	)

48 
	#FMODE_READ
 1

	)

49 
	#FMODE_WRITE
 2

	)

51 
	#FMODE_LSEEK
 4

	)

52 
	#FMODE_PREAD
 8

	)

53 
	#FMODE_PWRITE
 
FMODE_PREAD


	)

55 
	#FMODE_EXEC
 16

	)

57 
	#RW_MASK
 1

	)

58 
	#RWA_MASK
 2

	)

59 
	#READ
 0

	)

60 
	#WRITE
 1

	)

61 
	#READA
 2

	)

62 
	#SWRITE
 3

	)

63 
	#SPECIAL
 4

	)

64 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNC
))

	)

65 
	#WRITE_SYNC
 (
WRITE
 | (1 << 
BIO_RW_SYNC
))

	)

66 
	#WRITE_BARRIER
 ((1 << 
BIO_RW
Ë| (1 << 
BIO_RW_BARRIER
))

	)

68 
	#SEL_IN
 1

	)

69 
	#SEL_OUT
 2

	)

70 
	#SEL_EX
 4

	)

72 
	#FS_REQUIRES_DEV
 1

	)

73 
	#FS_BINARY_MOUNTDATA
 2

	)

74 
	#FS_REVAL_DOT
 16384

	)

75 
	#FS_ODD_RENAME
 32768

	)

77 
	#MS_RDONLY
 1

	)

78 
	#MS_NOSUID
 2

	)

79 
	#MS_NODEV
 4

	)

80 
	#MS_NOEXEC
 8

	)

81 
	#MS_SYNCHRONOUS
 16

	)

82 
	#MS_REMOUNT
 32

	)

83 
	#MS_MANDLOCK
 64

	)

84 
	#MS_DIRSYNC
 128

	)

85 
	#MS_NOATIME
 1024

	)

86 
	#MS_NODIRATIME
 2048

	)

87 
	#MS_BIND
 4096

	)

88 
	#MS_MOVE
 8192

	)

89 
	#MS_REC
 16384

	)

90 
	#MS_VERBOSE
 32768

	)

91 
	#MS_SILENT
 32768

	)

92 
	#MS_POSIXACL
 (1<<16)

	)

93 
	#MS_UNBINDABLE
 (1<<17)

	)

94 
	#MS_PRIVATE
 (1<<18)

	)

95 
	#MS_SLAVE
 (1<<19)

	)

96 
	#MS_SHARED
 (1<<20)

	)

97 
	#MS_ACTIVE
 (1<<30)

	)

98 
	#MS_NOUSER
 (1<<31)

	)

100 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
)

	)

102 
	#MS_MGC_VAL
 0xC0ED0000

	)

103 
	#MS_MGC_MSK
 0xffff0000

	)

105 
	#S_SYNC
 1

	)

106 
	#S_NOATIME
 2

	)

107 
	#S_APPEND
 4

	)

108 
	#S_IMMUTABLE
 8

	)

109 
	#S_DEAD
 16

	)

110 
	#S_NOQUOTA
 32

	)

111 
	#S_DIRSYNC
 64

	)

112 
	#S_NOCMTIME
 128

	)

113 
	#S_SWAPFILE
 256

	)

114 
	#S_PRIVATE
 512

	)

116 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

118 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

119 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
Ë|| ((öode)->
i_Êags
 & 
S_SYNC
))

	)

120 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
Ë|| ((öode)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

121 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

123 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

124 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

125 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

126 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

128 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

129 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

130 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

131 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

133 
	#BLKROSET
 
	`_IO
(0x12,93)

	)

134 
	#BLKROGET
 
	`_IO
(0x12,94)

	)

135 
	#BLKRRPART
 
	`_IO
(0x12,95)

	)

136 
	#BLKGETSIZE
 
	`_IO
(0x12,96)

	)

137 
	#BLKFLSBUF
 
	`_IO
(0x12,97)

	)

138 
	#BLKRASET
 
	`_IO
(0x12,98)

	)

139 
	#BLKRAGET
 
	`_IO
(0x12,99)

	)

140 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

141 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

142 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

143 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

144 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

146 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

147 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

148 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
)

	)

149 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

150 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

151 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

152 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

154 
	#BMAP_IOCTL
 1

	)

155 
	#FIBMAP
 
	`_IO
(0x00,1)

	)

156 
	#FIGETBSZ
 
	`_IO
(0x00,2)

	)

158 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

159 
	#SYNC_FILE_RANGE_WRITE
 2

	)

160 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@linux/ftape.h

12 #i‚de‡
_FTAPE_H


13 
	#_FTAPE_H


	)

15 
	#FTAPE_VERSION
 "·≠êv3.04d 25/11/97"

	)

17 
	~<löux/ty≥s.h
>

18 
	~<löux/mtio.h
>

20 
	#FT_SECTOR
(
x
Ë(x+1)

	)

21 
	#FT_SECTOR_SIZE
 1024

	)

22 
	#FT_SECTORS_PER_SEGMENT
 32

	)

23 
	#FT_ECC_SECTORS
 3

	)

24 
	#FT_SEGMENT_SIZE
 ((
FT_SECTORS_PER_SEGMENT
 - 
FT_ECC_SECTORS
Ë* 
FT_SECTOR_SIZE
)

	)

25 
	#FT_BUFF_SIZE
 (
FT_SECTORS_PER_SEGMENT
 * 
FT_SECTOR_SIZE
)

	)

27 
	#FTAPE_SEL_A
 0

	)

28 
	#FTAPE_SEL_B
 1

	)

29 
	#FTAPE_SEL_C
 2

	)

30 
	#FTAPE_SEL_D
 3

	)

31 
	#FTAPE_SEL_MASK
 3

	)

32 
	#FTAPE_SEL
(
unô
Ë((unôË& 
FTAPE_SEL_MASK
)

	)

33 
	#FTAPE_NO_REWIND
 4

	)

37 
__u8
 
	mîr‹
;

38 
__u8
 
	mcomm™d
;

39 } 
	mîr‹
;

40 
	m•a˚
;

41 } 
	t·_drive_îr‹
;

44 
__u8
 
	mdrive_°©us
;

45 
__u8
 
	mdrive_c⁄fig
;

46 
__u8
 
	mè≥_°©us
;

47 } 
	m°©us
;

48 
	m•a˚
;

49 } 
	t·_drive_°©us
;

	@linux/futex.h

12 #i‚de‡
_LINUX_FUTEX_H


13 
	#_LINUX_FUTEX_H


	)

15 
	~<löux/sched.h
>

17 
	#FUTEX_WAIT
 0

	)

18 
	#FUTEX_WAKE
 1

	)

19 
	#FUTEX_FD
 2

	)

20 
	#FUTEX_REQUEUE
 3

	)

21 
	#FUTEX_CMP_REQUEUE
 4

	)

22 
	#FUTEX_WAKE_OP
 5

	)

23 
	#FUTEX_LOCK_PI
 6

	)

24 
	#FUTEX_UNLOCK_PI
 7

	)

25 
	#FUTEX_TRYLOCK_PI
 8

	)

27 
	srobu°_li°
 {

28 
robu°_li°
 
__u£r
 *
	m√xt
;

31 
	srobu°_li°_hód
 {

33 
robu°_li°
 
	mli°
;

35 
	mfuãx_off£t
;

37 
robu°_li°
 
__u£r
 *
	mli°_›_≥ndög
;

40 
	#FUTEX_WAITERS
 0x80000000

	)

42 
	#FUTEX_OWNER_DIED
 0x40000000

	)

44 
	#FUTEX_TID_MASK
 0x3fffffff

	)

46 
	#ROBUST_LIST_LIMIT
 2048

	)

48 
	#FUTEX_OP_SET
 0

	)

49 
	#FUTEX_OP_ADD
 1

	)

50 
	#FUTEX_OP_OR
 2

	)

51 
	#FUTEX_OP_ANDN
 3

	)

52 
	#FUTEX_OP_XOR
 4

	)

53 
	#FUTEX_OP_OPARG_SHIFT
 8

	)

54 
	#FUTEX_OP_CMP_EQ
 0

	)

55 
	#FUTEX_OP_CMP_NE
 1

	)

56 
	#FUTEX_OP_CMP_LT
 2

	)

57 
	#FUTEX_OP_CMP_LE
 3

	)

58 
	#FUTEX_OP_CMP_GT
 4

	)

59 
	#FUTEX_OP_CMP_GE
 5

	)

60 
	#FUTEX_OP
(
›
, 
›¨g
, 
cmp
, 
cm∑rg
Ë(((› & 0xfË<< 28Ë| ((cm∞& 0xfË<< 24Ë| ((›¨g & 0xfffË<< 12Ë| (cm∑rg & 0xfff))

	)

	@linux/genhd.h

12 #i‚de‡
_LINUX_GENHD_H


13 
	#_LINUX_GENHD_H


	)

15 
	~<löux/ty≥s.h
>

19 
	mDOS_EXTENDED_PARTITION
 = 5,

20 
	mLINUX_EXTENDED_PARTITION
 = 0x85,

21 
	mWIN98_EXTENDED_PARTITION
 = 0x0f,

23 
	mLINUX_SWAP_PARTITION
 = 0x82,

24 
	mLINUX_RAID_PARTITION
 = 0xfd,

26 
	mSOLARIS_X86_PARTITION
 = 
LINUX_SWAP_PARTITION
,

27 
	mNEW_SOLARIS_X86_PARTITION
 = 0xbf,

29 
	mDM6_AUX1PARTITION
 = 0x51,

30 
	mDM6_AUX3PARTITION
 = 0x53,

31 
	mDM6_PARTITION
 = 0x54,

32 
	mEZD_PARTITION
 = 0x55,

34 
	mFREEBSD_PARTITION
 = 0xa5,

35 
	mOPENBSD_PARTITION
 = 0xa6,

36 
	mNETBSD_PARTITION
 = 0xa9,

37 
	mBSDI_PARTITION
 = 0xb7,

38 
	mMINIX_PARTITION
 = 0x81,

39 
	mUNIXWARE_PARTITION
 = 0x63,

42 
	s∑πôi⁄
 {

43 
	mboŸ_öd
;

44 
	mhód
;

45 
	m£˘‹
;

46 
	mcyl
;

47 
	msys_öd
;

48 
	míd_hód
;

49 
	míd_£˘‹
;

50 
	míd_cyl
;

51 
	m°¨t_£˘
;

52 
	mƒ_£˘s
;

53 } 
__©åibuã__
((
∑cked
));

	@linux/gfp.h

12 #i‚de‡
__LINUX_GFP_H


13 
	#__LINUX_GFP_H


	)

15 
	~<löux/mmz⁄e.h
>

16 
	~<löux/°ddef.h
>

17 
	~<löux/lökage.h
>

19 
	gvm_¨ó_°ru˘
;

21 
	#__GFP_DMA
 ((
__f‹˚
 
gÂ_t
)0x01u)

	)

22 
	#__GFP_HIGHMEM
 ((
__f‹˚
 
gÂ_t
)0x02u)

	)

23 #i‡
BITS_PER_LONG
 < 64

24 
	#__GFP_DMA32
 ((
__f‹˚
 
gÂ_t
)0x00)

	)

26 
	#__GFP_DMA32
 ((
__f‹˚
 
gÂ_t
)0x04)

	)

29 
	#__GFP_WAIT
 ((
__f‹˚
 
gÂ_t
)0x10u)

	)

30 
	#__GFP_HIGH
 ((
__f‹˚
 
gÂ_t
)0x20u)

	)

31 
	#__GFP_IO
 ((
__f‹˚
 
gÂ_t
)0x40u)

	)

32 
	#__GFP_FS
 ((
__f‹˚
 
gÂ_t
)0x80u)

	)

33 
	#__GFP_COLD
 ((
__f‹˚
 
gÂ_t
)0x100u)

	)

34 
	#__GFP_NOWARN
 ((
__f‹˚
 
gÂ_t
)0x200u)

	)

35 
	#__GFP_REPEAT
 ((
__f‹˚
 
gÂ_t
)0x400u)

	)

36 
	#__GFP_NOFAIL
 ((
__f‹˚
 
gÂ_t
)0x800u)

	)

37 
	#__GFP_NORETRY
 ((
__f‹˚
 
gÂ_t
)0x1000u)

	)

38 
	#__GFP_NO_GROW
 ((
__f‹˚
 
gÂ_t
)0x2000u)

	)

39 
	#__GFP_COMP
 ((
__f‹˚
 
gÂ_t
)0x4000u)

	)

40 
	#__GFP_ZERO
 ((
__f‹˚
 
gÂ_t
)0x8000u)

	)

41 
	#__GFP_NOMEMALLOC
 ((
__f‹˚
 
gÂ_t
)0x10000u)

	)

42 
	#__GFP_HARDWALL
 ((
__f‹˚
 
gÂ_t
)0x20000u)

	)

44 
	#__GFP_BITS_SHIFT
 20

	)

45 
	#__GFP_BITS_MASK
 ((
__f‹˚
 
gÂ_t
)((1 << 
__GFP_BITS_SHIFT
Ë- 1))

	)

47 
	#GFP_LEVEL_MASK
 (
__GFP_WAIT
|
__GFP_HIGH
|
__GFP_IO
|
__GFP_FS
| 
__GFP_COLD
|
__GFP_NOWARN
|
__GFP_REPEAT
| 
__GFP_NOFAIL
|
__GFP_NORETRY
|
__GFP_NO_GROW
|
__GFP_COMP
| 
__GFP_NOMEMALLOC
|
__GFP_HARDWALL
)

	)

49 
	#GFP_NOWAIT
 (
GFP_ATOMIC
 & ~
__GFP_HIGH
)

	)

51 
	#GFP_ATOMIC
 (
__GFP_HIGH
)

	)

52 
	#GFP_NOIO
 (
__GFP_WAIT
)

	)

53 
	#GFP_NOFS
 (
__GFP_WAIT
 | 
__GFP_IO
)

	)

54 
	#GFP_KERNEL
 (
__GFP_WAIT
 | 
__GFP_IO
 | 
__GFP_FS
)

	)

55 
	#GFP_USER
 (
__GFP_WAIT
 | 
__GFP_IO
 | 
__GFP_FS
 | 
__GFP_HARDWALL
)

	)

56 
	#GFP_HIGHUSER
 (
__GFP_WAIT
 | 
__GFP_IO
 | 
__GFP_FS
 | 
__GFP_HARDWALL
 | 
__GFP_HIGHMEM
)

	)

58 
	#GFP_DMA
 
__GFP_DMA


	)

60 
	#GFP_DMA32
 
__GFP_DMA32


	)

62 #i‚de‡
HAVE_ARCH_FREE_PAGE


65 
	#Æloc_∑ges
(
gÂ_mask
, 
‹dî
Ë
	`Æloc_∑ges_node
(
	`numa_node_id
(), gÂ_mask, ordî)

	)

66 
	#Æloc_∑ge_vma
(
gÂ_mask
, 
vma
, 
addr
Ë
	`Æloc_∑ges
(gÂ_mask, 0)

	)

67 
	#Æloc_∑ge
(
gÂ_mask
Ë
	`Æloc_∑ges
(gÂ_mask, 0)

	)

69 
	#__gë_‰ì_∑ge
(
gÂ_mask
Ë
	`__gë_‰ì_∑ges
((gÂ_mask),0)

	)

71 
	#__gë_dma_∑ges
(
gÂ_mask
, 
‹dî
Ë
	`__gë_‰ì_∑ges
((gÂ_maskË| 
GFP_DMA
,(‹dî))

	)

73 
	#__‰ì_∑ge
(
∑ge
Ë
	`__‰ì_∑ges
(’age), 0)

	)

74 
	#‰ì_∑ge
(
addr
Ë
	`‰ì_∑ges
(◊ddr),0)

	)

	@linux/hardirq.h

12 #i‚de‡
LINUX_HARDIRQ_H


13 
	#LINUX_HARDIRQ_H


	)

15 
	~<löux/¥ìm±.h
>

16 
	~<löux/smp_lock.h
>

17 
	~<löux/lockdï.h
>

18 
	~<asm/h¨dúq.h
>

19 
	~<asm/sy°em.h
>

21 
	#PREEMPT_BITS
 8

	)

22 
	#SOFTIRQ_BITS
 8

	)

24 #i‚de‡
HARDIRQ_BITS


25 
	#HARDIRQ_BITS
 12

	)

27 #i‡1 << 
HARDIRQ_BITS
 < 
NR_IRQS


28 #îr‹ 
HARDIRQ_BITS
 
is
 
too
 
low
!

32 
	#PREEMPT_SHIFT
 0

	)

33 
	#SOFTIRQ_SHIFT
 (
PREEMPT_SHIFT
 + 
PREEMPT_BITS
)

	)

34 
	#HARDIRQ_SHIFT
 (
SOFTIRQ_SHIFT
 + 
SOFTIRQ_BITS
)

	)

36 
	#__IRQ_MASK
(
x
Ë((1UL << (x))-1)

	)

38 
	#PREEMPT_MASK
 (
	`__IRQ_MASK
(
PREEMPT_BITS
Ë<< 
PREEMPT_SHIFT
)

	)

39 
	#SOFTIRQ_MASK
 (
	`__IRQ_MASK
(
SOFTIRQ_BITS
Ë<< 
SOFTIRQ_SHIFT
)

	)

40 
	#HARDIRQ_MASK
 (
	`__IRQ_MASK
(
HARDIRQ_BITS
Ë<< 
HARDIRQ_SHIFT
)

	)

42 
	#PREEMPT_OFFSET
 (1UL << 
PREEMPT_SHIFT
)

	)

43 
	#SOFTIRQ_OFFSET
 (1UL << 
SOFTIRQ_SHIFT
)

	)

44 
	#HARDIRQ_OFFSET
 (1UL << 
HARDIRQ_SHIFT
)

	)

46 #i‡
PREEMPT_ACTIVE
 < 1 << 
HARDIRQ_SHIFT
 + 
HARDIRQ_BITS


47 #îr‹ 
PREEMPT_ACTIVE
 
is
 
too
 
low
!

50 
	#h¨dúq_cou¡
(Ë(
	`¥ìm±_cou¡
(Ë& 
HARDIRQ_MASK
)

	)

51 
	#so·úq_cou¡
(Ë(
	`¥ìm±_cou¡
(Ë& 
SOFTIRQ_MASK
)

	)

52 
	#úq_cou¡
(Ë(
	`¥ìm±_cou¡
(Ë& (
HARDIRQ_MASK
 | 
SOFTIRQ_MASK
))

	)

54 
	#ö_úq
(Ë(
	`h¨dúq_cou¡
())

	)

55 
	#ö_so·úq
(Ë(
	`so·úq_cou¡
())

	)

56 
	#ö_öãºu±
(Ë(
	`úq_cou¡
())

	)

58 
	#ö_©omic
(Ë((
	`¥ìm±_cou¡
(Ë& ~
PREEMPT_ACTIVE
Ë!0)

	)

60 
	#¥ìm±ibÀ
(Ë0

	)

61 
	#IRQ_EXIT_OFFSET
 
HARDIRQ_OFFSET


	)

63 
	#synchr⁄ize_úq
(
úq
Ë
	`b¨rõr
()

	)

65 
	gèsk_°ru˘
;

67 
	#úq_íãr
(Ëdÿ{ 
	`accou¡_sy°em_vtime
(
cuºít
); 
	`add_¥ìm±_cou¡
(
HARDIRQ_OFFSET
); 
	`åa˚_h¨dúq_íãr
(); } 0)

	)

68 
	#__úq_exô
(Ëdÿ{ 
	`åa˚_h¨dúq_exô
(); 
	`accou¡_sy°em_vtime
(
cuºít
); 
	`sub_¥ìm±_cou¡
(
HARDIRQ_OFFSET
); } 0)

	)

70 
	#nmi_íãr
(Ëdÿ{ 
	`lockdï_off
(); 
	`úq_íãr
(); } 0)

	)

71 
	#nmi_exô
(Ëdÿ{ 
	`__úq_exô
(); 
	`lockdï_⁄
(); } 0)

	)

	@linux/hdlc/ioctl.h

12 #i‚de‡
__HDLC_IOCTL_H__


13 
	#__HDLC_IOCTL_H__


	)

16 
	m˛ock_øã
;

17 
	m˛ock_ty≥
;

18 
	mlo›back
;

19 } 
	tsync_£rül_£âögs
;

22 
	m˛ock_øã
;

23 
	m˛ock_ty≥
;

24 
	mlo›back
;

25 
	m¶Ÿ_m≠
;

26 } 
	tã1_£âögs
;

29 
	mícodög
;

30 
	m∑rôy
;

31 } 
	tøw_hdlc_¥Ÿo
;

34 
	mt391
;

35 
	mt392
;

36 
	mn391
;

37 
	mn392
;

38 
	mn393
;

39 
	mlmi
;

40 
	md˚
;

41 } 
	t‰_¥Ÿo
;

44 
	mdlci
;

45 } 
	t‰_¥Ÿo_pvc
;

48 
	mdlci
;

49 
	mma°î
[
IFNAMSIZ
];

50 }
	t‰_¥Ÿo_pvc_öfo
;

53 
	möãrvÆ
;

54 
	mtimeout
;

55 } 
	tcisco_¥Ÿo
;

	@linux/hdreg.h

12 #i‚de‡
_LINUX_HDREG_H


13 
	#_LINUX_HDREG_H


	)

15 
	#HDIO_DRIVE_CMD_HDR_SIZE
 (4 * (
u8
))

	)

16 
	#HDIO_DRIVE_HOB_HDR_SIZE
 (8 * (
u8
))

	)

17 
	#HDIO_DRIVE_TASK_HDR_SIZE
 (8 * (
u8
))

	)

19 
	#IDE_DRIVE_TASK_INVALID
 -1

	)

20 
	#IDE_DRIVE_TASK_NO_DATA
 0

	)

21 
	#IDE_DRIVE_TASK_SET_XFER
 1

	)

23 
	#IDE_DRIVE_TASK_IN
 2

	)

25 
	#IDE_DRIVE_TASK_OUT
 3

	)

26 
	#IDE_DRIVE_TASK_RAW_WRITE
 4

	)

28 
	#IDE_TASKFILE_STD_IN_FLAGS
 0xFE

	)

29 
	#IDE_HOB_STD_IN_FLAGS
 0x3C

	)

30 
	#IDE_TASKFILE_STD_OUT_FLAGS
 0xFE

	)

31 
	#IDE_HOB_STD_OUT_FLAGS
 0x3C

	)

33 
	tèsk_i‹eg_t
;

34 
	tßè_i‹eg_t
;

36 
	uide_ªg_vÆid_s
 {

37 
	mÆl
 : 16;

39 
	md©a
 : 1;

40 
	mîr‹_„©uª
 : 1;

41 
	m£˘‹
 : 1;

42 
	mn£˘‹
 : 1;

43 
	mlcyl
 : 1;

44 
	mhcyl
 : 1;

45 
	m£À˘
 : 1;

46 
	m°©us_comm™d
 : 1;

48 
	md©a_hob
 : 1;

49 
	mîr‹_„©uª_hob
 : 1;

50 
	m£˘‹_hob
 : 1;

51 
	mn£˘‹_hob
 : 1;

52 
	mlcyl_hob
 : 1;

53 
	mhcyl_hob
 : 1;

54 
	m£À˘_hob
 : 1;

55 
	mc⁄åﬁ_hob
 : 1;

56 } 
	mb
;

57 } 
	tide_ªg_vÆid_t
;

59 
	side_èsk_ªque°_s
 {

60 
èsk_i‹eg_t
 
	mio_p‹ts
[8];

61 
èsk_i‹eg_t
 
	mhob_p‹ts
[8];

62 
ide_ªg_vÆid_t
 
	mout_Êags
;

63 
ide_ªg_vÆid_t
 
	mö_Êags
;

64 
	md©a_pha£
;

65 
	mªq_cmd
;

66 
	mout_size
;

67 
	mö_size
;

68 } 
	tide_èsk_ªque°_t
;

70 
	side_io˘l_ªque°_s
 {

71 
ide_èsk_ªque°_t
 *
	mèsk_ªque°
;

72 *
	mout_buf„r
;

73 *
	mö_buf„r
;

74 } 
	tide_io˘l_ªque°_t
;

76 
	shd_drive_cmd_hdr
 {

77 
èsk_i‹eg_t
 
	mcomm™d
;

78 
èsk_i‹eg_t
 
	m£˘‹_numbî
;

79 
èsk_i‹eg_t
 
	m„©uª
;

80 
èsk_i‹eg_t
 
	m£˘‹_cou¡
;

83 
	shd_drive_èsk_hdr
 {

84 
èsk_i‹eg_t
 
	md©a
;

85 
èsk_i‹eg_t
 
	m„©uª
;

86 
èsk_i‹eg_t
 
	m£˘‹_cou¡
;

87 
èsk_i‹eg_t
 
	m£˘‹_numbî
;

88 
èsk_i‹eg_t
 
	mlow_cylödî
;

89 
èsk_i‹eg_t
 
	mhigh_cylödî
;

90 
èsk_i‹eg_t
 
	mdevi˚_hód
;

91 
èsk_i‹eg_t
 
	mcomm™d
;

92 } 
	tèsk_°ru˘_t
;

94 
	shd_drive_hob_hdr
 {

95 
èsk_i‹eg_t
 
	md©a
;

96 
èsk_i‹eg_t
 
	m„©uª
;

97 
èsk_i‹eg_t
 
	m£˘‹_cou¡
;

98 
èsk_i‹eg_t
 
	m£˘‹_numbî
;

99 
èsk_i‹eg_t
 
	mlow_cylödî
;

100 
èsk_i‹eg_t
 
	mhigh_cylödî
;

101 
èsk_i‹eg_t
 
	mdevi˚_hód
;

102 
èsk_i‹eg_t
 
	mc⁄åﬁ
;

103 } 
	thob_°ru˘_t
;

105 
	#TASKFILE_INVALID
 0x7fff

	)

106 
	#TASKFILE_48
 0x8000

	)

108 
	#TASKFILE_NO_DATA
 0x0000

	)

110 
	#TASKFILE_IN
 0x0001

	)

111 
	#TASKFILE_MULTI_IN
 0x0002

	)

113 
	#TASKFILE_OUT
 0x0004

	)

114 
	#TASKFILE_MULTI_OUT
 0x0008

	)

115 
	#TASKFILE_IN_OUT
 0x0010

	)

117 
	#TASKFILE_IN_DMA
 0x0020

	)

118 
	#TASKFILE_OUT_DMA
 0x0040

	)

119 
	#TASKFILE_IN_DMAQ
 0x0080

	)

120 
	#TASKFILE_OUT_DMAQ
 0x0100

	)

122 
	#TASKFILE_P_IN
 0x0200

	)

123 
	#TASKFILE_P_OUT
 0x0400

	)

124 
	#TASKFILE_P_IN_DMA
 0x0800

	)

125 
	#TASKFILE_P_OUT_DMA
 0x1000

	)

126 
	#TASKFILE_P_IN_DMAQ
 0x2000

	)

127 
	#TASKFILE_P_OUT_DMAQ
 0x4000

	)

129 
	#WIN_NOP
 0x00

	)

131 
	#CFA_REQ_EXT_ERROR_CODE
 0x03

	)

133 
	#WIN_SRST
 0x08

	)

134 
	#WIN_DEVICE_RESET
 0x08

	)

136 
	#WIN_RECAL
 0x10

	)

137 
	#WIN_RESTORE
 
WIN_RECAL


	)

139 
	#WIN_READ
 0x20

	)

140 
	#WIN_READ_ONCE
 0x21

	)

141 
	#WIN_READ_LONG
 0x22

	)

142 
	#WIN_READ_LONG_ONCE
 0x23

	)

143 
	#WIN_READ_EXT
 0x24

	)

144 
	#WIN_READDMA_EXT
 0x25

	)

145 
	#WIN_READDMA_QUEUED_EXT
 0x26

	)

146 
	#WIN_READ_NATIVE_MAX_EXT
 0x27

	)

148 
	#WIN_MULTREAD_EXT
 0x29

	)

150 
	#WIN_WRITE
 0x30

	)

151 
	#WIN_WRITE_ONCE
 0x31

	)

152 
	#WIN_WRITE_LONG
 0x32

	)

153 
	#WIN_WRITE_LONG_ONCE
 0x33

	)

154 
	#WIN_WRITE_EXT
 0x34

	)

155 
	#WIN_WRITEDMA_EXT
 0x35

	)

156 
	#WIN_WRITEDMA_QUEUED_EXT
 0x36

	)

157 
	#WIN_SET_MAX_EXT
 0x37

	)

158 
	#CFA_WRITE_SECT_WO_ERASE
 0x38

	)

159 
	#WIN_MULTWRITE_EXT
 0x39

	)

161 
	#WIN_WRITE_VERIFY
 0x3C

	)

163 
	#WIN_VERIFY
 0x40

	)

164 
	#WIN_VERIFY_ONCE
 0x41

	)

165 
	#WIN_VERIFY_EXT
 0x42

	)

167 
	#WIN_FORMAT
 0x50

	)

169 
	#WIN_INIT
 0x60

	)

171 
	#WIN_SEEK
 0x70

	)

173 
	#CFA_TRANSLATE_SECTOR
 0x87

	)

174 
	#WIN_DIAGNOSE
 0x90

	)

175 
	#WIN_SPECIFY
 0x91

	)

176 
	#WIN_DOWNLOAD_MICROCODE
 0x92

	)

177 
	#WIN_STANDBYNOW2
 0x94

	)

178 
	#WIN_STANDBY2
 0x96

	)

179 
	#WIN_SETIDLE2
 0x97

	)

180 
	#WIN_CHECKPOWERMODE2
 0x98

	)

181 
	#WIN_SLEEPNOW2
 0x99

	)

183 
	#WIN_PACKETCMD
 0xA0

	)

184 
	#WIN_PIDENTIFY
 0xA1

	)

185 
	#WIN_QUEUED_SERVICE
 0xA2

	)

186 
	#WIN_SMART
 0xB0

	)

187 
	#CFA_ERASE_SECTORS
 0xC0

	)

188 
	#WIN_MULTREAD
 0xC4

	)

189 
	#WIN_MULTWRITE
 0xC5

	)

190 
	#WIN_SETMULT
 0xC6

	)

191 
	#WIN_READDMA_QUEUED
 0xC7

	)

192 
	#WIN_READDMA
 0xC8

	)

193 
	#WIN_READDMA_ONCE
 0xC9

	)

194 
	#WIN_WRITEDMA
 0xCA

	)

195 
	#WIN_WRITEDMA_ONCE
 0xCB

	)

196 
	#WIN_WRITEDMA_QUEUED
 0xCC

	)

197 
	#CFA_WRITE_MULTI_WO_ERASE
 0xCD

	)

198 
	#WIN_GETMEDIASTATUS
 0xDA

	)

199 
	#WIN_ACKMEDIACHANGE
 0xDB

	)

200 
	#WIN_POSTBOOT
 0xDC

	)

201 
	#WIN_PREBOOT
 0xDD

	)

202 
	#WIN_DOORLOCK
 0xDE

	)

203 
	#WIN_DOORUNLOCK
 0xDF

	)

204 
	#WIN_STANDBYNOW1
 0xE0

	)

205 
	#WIN_IDLEIMMEDIATE
 0xE1

	)

206 
	#WIN_STANDBY
 0xE2

	)

207 
	#WIN_SETIDLE1
 0xE3

	)

208 
	#WIN_READ_BUFFER
 0xE4

	)

209 
	#WIN_CHECKPOWERMODE1
 0xE5

	)

210 
	#WIN_SLEEPNOW1
 0xE6

	)

211 
	#WIN_FLUSH_CACHE
 0xE7

	)

212 
	#WIN_WRITE_BUFFER
 0xE8

	)

213 
	#WIN_WRITE_SAME
 0xE9

	)

215 
	#WIN_FLUSH_CACHE_EXT
 0xEA

	)

216 
	#WIN_IDENTIFY
 0xEC

	)

217 
	#WIN_MEDIAEJECT
 0xED

	)

218 
	#WIN_IDENTIFY_DMA
 0xEE

	)

219 
	#WIN_SETFEATURES
 0xEF

	)

220 
	#EXABYTE_ENABLE_NEST
 0xF0

	)

221 
	#WIN_SECURITY_SET_PASS
 0xF1

	)

222 
	#WIN_SECURITY_UNLOCK
 0xF2

	)

223 
	#WIN_SECURITY_ERASE_PREPARE
 0xF3

	)

224 
	#WIN_SECURITY_ERASE_UNIT
 0xF4

	)

225 
	#WIN_SECURITY_FREEZE_LOCK
 0xF5

	)

226 
	#WIN_SECURITY_DISABLE
 0xF6

	)

227 
	#WIN_READ_NATIVE_MAX
 0xF8

	)

228 
	#WIN_SET_MAX
 0xF9

	)

229 
	#DISABLE_SEAGATE
 0xFB

	)

231 
	#SMART_READ_VALUES
 0xD0

	)

232 
	#SMART_READ_THRESHOLDS
 0xD1

	)

233 
	#SMART_AUTOSAVE
 0xD2

	)

234 
	#SMART_SAVE
 0xD3

	)

235 
	#SMART_IMMEDIATE_OFFLINE
 0xD4

	)

236 
	#SMART_READ_LOG_SECTOR
 0xD5

	)

237 
	#SMART_WRITE_LOG_SECTOR
 0xD6

	)

238 
	#SMART_WRITE_THRESHOLDS
 0xD7

	)

239 
	#SMART_ENABLE
 0xD8

	)

240 
	#SMART_DISABLE
 0xD9

	)

241 
	#SMART_STATUS
 0xDA

	)

242 
	#SMART_AUTO_OFFLINE
 0xDB

	)

244 
	#SMART_LCYL_PASS
 0x4F

	)

245 
	#SMART_HCYL_PASS
 0xC2

	)

247 
	#SETFEATURES_EN_8BIT
 0x01

	)

248 
	#SETFEATURES_EN_WCACHE
 0x02

	)

249 
	#SETFEATURES_DIS_DEFECT
 0x04

	)

250 
	#SETFEATURES_EN_APM
 0x05

	)

251 
	#SETFEATURES_EN_SAME_R
 0x22

	)

252 
	#SETFEATURES_DIS_MSN
 0x31

	)

253 
	#SETFEATURES_DIS_RETRY
 0x33

	)

254 
	#SETFEATURES_EN_AAM
 0x42

	)

255 
	#SETFEATURES_RW_LONG
 0x44

	)

256 
	#SETFEATURES_SET_CACHE
 0x54

	)

257 
	#SETFEATURES_DIS_RLA
 0x55

	)

258 
	#SETFEATURES_EN_RI
 0x5D

	)

259 
	#SETFEATURES_EN_SI
 0x5E

	)

260 
	#SETFEATURES_DIS_RPOD
 0x66

	)

261 
	#SETFEATURES_DIS_ECC
 0x77

	)

262 
	#SETFEATURES_DIS_8BIT
 0x81

	)

263 
	#SETFEATURES_DIS_WCACHE
 0x82

	)

264 
	#SETFEATURES_EN_DEFECT
 0x84

	)

265 
	#SETFEATURES_DIS_APM
 0x85

	)

266 
	#SETFEATURES_EN_ECC
 0x88

	)

267 
	#SETFEATURES_EN_MSN
 0x95

	)

268 
	#SETFEATURES_EN_RETRY
 0x99

	)

269 
	#SETFEATURES_EN_RLA
 0xAA

	)

270 
	#SETFEATURES_PREFETCH
 0xAB

	)

271 
	#SETFEATURES_EN_REST
 0xAC

	)

272 
	#SETFEATURES_4B_RW_LONG
 0xBB

	)

273 
	#SETFEATURES_DIS_AAM
 0xC2

	)

274 
	#SETFEATURES_EN_RPOD
 0xCC

	)

275 
	#SETFEATURES_DIS_RI
 0xDD

	)

276 
	#SETFEATURES_EN_SAME_M
 0xDD

	)

277 
	#SETFEATURES_DIS_SI
 0xDE

	)

279 
	#SECURITY_SET_PASSWORD
 0xBA

	)

280 
	#SECURITY_UNLOCK
 0xBB

	)

281 
	#SECURITY_ERASE_PREPARE
 0xBC

	)

282 
	#SECURITY_ERASE_UNIT
 0xBD

	)

283 
	#SECURITY_FREEZE_LOCK
 0xBE

	)

284 
	#SECURITY_DISABLE_PASSWORD
 0xBF

	)

286 
	shd_geomëry
 {

287 
	mhóds
;

288 
	m£˘‹s
;

289 
	mcylödîs
;

290 
	m°¨t
;

293 
	#HDIO_GETGEO
 0x0301

	)

294 
	#HDIO_GET_UNMASKINTR
 0x0302

	)

295 
	#HDIO_GET_MULTCOUNT
 0x0304

	)

296 
	#HDIO_GET_QDMA
 0x0305

	)

298 
	#HDIO_SET_XFER
 0x0306

	)

300 
	#HDIO_OBSOLETE_IDENTITY
 0x0307

	)

301 
	#HDIO_GET_KEEPSETTINGS
 0x0308

	)

302 
	#HDIO_GET_32BIT
 0x0309

	)

303 
	#HDIO_GET_NOWERR
 0x030a

	)

304 
	#HDIO_GET_DMA
 0x030b

	)

305 
	#HDIO_GET_NICE
 0x030c

	)

306 
	#HDIO_GET_IDENTITY
 0x030d

	)

307 
	#HDIO_GET_WCACHE
 0x030e

	)

308 
	#HDIO_GET_ACOUSTIC
 0x030f

	)

309 
	#HDIO_GET_ADDRESS
 0x0310

	)

311 
	#HDIO_GET_BUSSTATE
 0x031a

	)

312 
	#HDIO_TRISTATE_HWIF
 0x031b

	)

313 
	#HDIO_DRIVE_RESET
 0x031c

	)

314 
	#HDIO_DRIVE_TASKFILE
 0x031d

	)

315 
	#HDIO_DRIVE_TASK
 0x031e

	)

316 
	#HDIO_DRIVE_CMD
 0x031f

	)

317 
	#HDIO_DRIVE_CMD_AEB
 
HDIO_DRIVE_TASK


	)

319 
	#HDIO_SET_MULTCOUNT
 0x0321

	)

320 
	#HDIO_SET_UNMASKINTR
 0x0322

	)

321 
	#HDIO_SET_KEEPSETTINGS
 0x0323

	)

322 
	#HDIO_SET_32BIT
 0x0324

	)

323 
	#HDIO_SET_NOWERR
 0x0325

	)

324 
	#HDIO_SET_DMA
 0x0326

	)

325 
	#HDIO_SET_PIO_MODE
 0x0327

	)

326 
	#HDIO_SCAN_HWIF
 0x0328

	)

327 
	#HDIO_SET_NICE
 0x0329

	)

328 
	#HDIO_UNREGISTER_HWIF
 0x032a

	)

329 
	#HDIO_SET_WCACHE
 0x032b

	)

330 
	#HDIO_SET_ACOUSTIC
 0x032c

	)

331 
	#HDIO_SET_BUSSTATE
 0x032d

	)

332 
	#HDIO_SET_QDMA
 0x032e

	)

333 
	#HDIO_SET_ADDRESS
 0x032f

	)

336 
	mBUSSTATE_OFF
 = 0,

337 
	mBUSSTATE_ON
,

338 
	mBUSSTATE_TRISTATE


341 
	#__NEW_HD_DRIVE_ID


	)

343 
	shd_driveid
 {

344 
	mc⁄fig
;

345 
	mcyls
;

346 
	mª£rved2
;

347 
	mhóds
;

348 
	måack_byãs
;

349 
	m£˘‹_byãs
;

350 
	m£˘‹s
;

351 
	mvíd‹0
;

352 
	mvíd‹1
;

353 
	mvíd‹2
;

354 
	m£rül_no
[20];

355 
	mbuf_ty≥
;

356 
	mbuf_size
;

357 
	mecc_byãs
;

358 
	mfw_ªv
[8];

359 
	mmodñ
[40];

360 
	mmax_mu…£˘
;

361 
	mvíd‹3
;

362 
	mdw‹d_io
;

363 
	mvíd‹4
;

364 
	mˇ∑bûôy
;

365 
	mª£rved50
;

366 
	mvíd‹5
;

367 
	mtPIO
;

368 
	mvíd‹6
;

369 
	mtDMA
;

370 
	mfõld_vÆid
;

371 
	mcur_cyls
;

372 
	mcur_hóds
;

373 
	mcur_£˘‹s
;

374 
	mcur_ˇ∑côy0
;

375 
	mcur_ˇ∑côy1
;

376 
	mmu…£˘
;

377 
	mmu…£˘_vÆid
;

378 
	mlba_ˇ∑côy
;

379 
	mdma_1w‹d
;

380 
	mdma_mw‹d
;

381 
	meide_pio_modes
;

382 
	meide_dma_mö
;

383 
	meide_dma_time
;

384 
	meide_pio
;

385 
	meide_pio_i‹dy
;

386 
	mw‹ds69_70
[2];

388 
	mw‹ds71_74
[4];

389 
	mqueue_dïth
;

390 
	mw‹ds76_79
[4];

391 
	mmaj‹_ªv_num
;

392 
	mmö‹_ªv_num
;

393 
	mcomm™d_£t_1
;

394 
	mcomm™d_£t_2
;

395 
	mcfs£
;

396 
	mcfs_íabÀ_1
;

397 
	mcfs_íabÀ_2
;

398 
	mcsf_deÁu…
;

399 
	mdma_u…ø
;

400 
	må£uc
;

401 
	måsEuc
;

402 
	mCurAPMvÆues
;

403 
	mm¥c
;

404 
	mhw_c⁄fig
;

405 
	macou°ic
;

406 
	mm§qs
;

407 
	msx„π
;

408 
	mßl
;

409 
	m•g
;

410 
	mlba_ˇ∑côy_2
;

411 
	mw‹ds104_125
[22];

412 
	mœ°_lun
;

413 
	mw‹d127
;

414 
	mdlf
;

415 
	mcsfo
;

416 
	mw‹ds130_155
[26];

417 
	mw‹d156
;

418 
	mw‹ds157_159
[3];

419 
	mcÁ_powî
;

420 
	mw‹ds161_175
[15];

421 
	mw‹ds176_205
[30];

422 
	mw‹ds206_254
[49];

423 
	möãgrôy_w‹d
;

426 
	#IDE_NICE_DSC_OVERLAP
 (0)

	)

427 
	#IDE_NICE_ATAPI_OVERLAP
 (1)

	)

428 
	#IDE_NICE_0
 (2)

	)

429 
	#IDE_NICE_1
 (3)

	)

430 
	#IDE_NICE_2
 (4)

	)

	@linux/hdsmart.h

12 #i‚de‡
_LINUX_HDSMART_H


13 
	#_LINUX_HDSMART_H


	)

15 
	#OFFLINE_FULL_SCAN
 0

	)

16 
	#SHORT_SELF_TEST
 1

	)

17 
	#EXTEND_SELF_TEST
 2

	)

18 
	#SHORT_CAPTIVE_SELF_TEST
 129

	)

19 
	#EXTEND_CAPTIVE_SELF_TEST
 130

	)

21 
	s©a_sm¨t_©åibuã_s
 {

22 
	mid
;

23 
	m°©us_Êag
;

24 
	mn‹mÆized
;

25 
	mw‹£_n‹mÆ
;

26 
	møw
[6];

27 
	mª£rv
;

28 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_©åibuã_t
;

30 
	s©a_sm¨t_vÆues_s
 {

31 
	mªvnumbî
;

32 
©a_sm¨t_©åibuã_t
 
	mvíd‹_©åibuãs
 [30];

33 
	mofÊöe_d©a_cﬁÀ˘i⁄_°©us
;

34 
	m£lf_ã°_exec_°©us
;

35 
	mtŸÆ_time_to_com∂ëe_off_löe
;

36 
	mvíd‹_•ecific_366
;

37 
	mofÊöe_d©a_cﬁÀ˘i⁄_ˇ∑bûôy
;

38 
	msm¨t_ˇ∑bûôy
;

39 
	mîr‹log_ˇ∑bûôy
;

40 
	mvíd‹_•ecific_371
;

41 
	msh‹t_ã°_com∂ëi⁄_time
;

42 
	mexãnd_ã°_com∂ëi⁄_time
;

43 
	mª£rved_374_385
 [12];

44 
	mvíd‹_•ecific_386_509
 [125];

45 
	mchksum
;

46 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_vÆues_t
;

48 
	s©a_sm¨t_thªshﬁd_íåy_s
 {

49 
	mid
;

50 
	mn‹mÆized_thªshﬁd
;

51 
	mª£rved
[10];

52 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_thªshﬁd_íåy_t
;

54 
	s©a_sm¨t_thªshﬁds_s
 {

55 
	mªvnumbî
;

56 
©a_sm¨t_thªshﬁd_íåy_t
 
	mthªs_íåõs
[30];

57 
	mª£rved
[149];

58 
	mchksum
;

59 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_thªshﬁds_t
;

61 
	s©a_sm¨t_îr‹log_comm™d_°ru˘_s
 {

62 
	mdevi˚c⁄åﬁªg
;

63 
	m„©uª§eg
;

64 
	m£˘‹_cou¡
;

65 
	m£˘‹_numbî
;

66 
	mcylödî_low
;

67 
	mcylödî_high
;

68 
	mdrive_hód
;

69 
	mcomm™dªg
;

70 
	mtime°amp
;

71 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_îr‹log_comm™d_°ru˘_t
;

73 
	s©a_sm¨t_îr‹log_îr‹_°ru˘_s
 {

74 
	mîr‹_c⁄dôi⁄
;

75 
	mexãnded_îr‹
[14];

76 
	m°©e
;

77 
	mtime°amp
;

78 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_îr‹log_îr‹_°ru˘_t
;

80 
	s©a_sm¨t_îr‹log_°ru˘_s
 {

81 
©a_sm¨t_îr‹log_comm™d_°ru˘_t
 
	mcomm™ds
[6];

82 
©a_sm¨t_îr‹log_îr‹_°ru˘_t
 
	mîr‹_°ru˘
;

83 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_îr‹log_°ru˘_t
;

85 
	s©a_sm¨t_îr‹log_s
 {

86 
	mªvnumbî
;

87 
	mîr‹_log_poöãr
;

88 
©a_sm¨t_îr‹log_°ru˘_t
 
	mîr‹log_°ru˘
[5];

89 
	m©a_îr‹_cou¡
;

90 
	mn⁄_Áèl_cou¡
;

91 
	mdrive_timeout_cou¡
;

92 
	mª£rved
[53];

93 
	mchksum
;

94 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_îr‹log_t
;

96 
	s©a_sm¨t_£l·e°log_°ru˘_s
 {

97 
	m£l·e°numbî
;

98 
	m£l·e°°©us
;

99 
	mtime°amp
;

100 
	m£l·e°Áûuªcheckpoöt
;

101 
	mlbafú°Áûuª
;

102 
	mvíd‹•ecific
[15];

103 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_£l·e°log_°ru˘_t
;

105 
	s©a_sm¨t_£l·e°log_s
 {

106 
	mªvnumbî
;

107 
©a_sm¨t_£l·e°log_°ru˘_t
 
	m£l·e°_°ru˘
[21];

108 
	mvíd‹•ecific
[2];

109 
	mmo°ª˚¡ã°
;

110 
	mª£vîed
[2];

111 
	mchksum
;

112 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t©a_sm¨t_£l·e°log_t
;

	@linux/highmem.h

12 #i‚de‡
_LINUX_HIGHMEM_H


13 
	#_LINUX_HIGHMEM_H


	)

15 
	~<löux/fs.h
>

16 
	~<löux/mm.h
>

18 
	~<asm/ˇcheÊush.h
>

20 #i‚de‡
ARCH_HAS_FLUSH_ANON_PAGE


22 #i‚de‡
ARCH_HAS_FLUSH_KERNEL_DCACHE_PAGE


24 
	#kunm≠
(
∑ge
Ëdÿ{ (Ë’age); } 0)

	)

25 
	#km≠_©omic
(
∑ge
, 
idx
Ë
	`∑ge_addªss
’age)

	)

26 
	#kunm≠_©omic
(
addr
, 
idx
Ëdÿ{ } 0)

	)

27 
	#km≠_©omic_p‚
(
p‚
, 
idx
Ë
	`∑ge_addªss
(
	`p‚_to_∑ge
’‚))

	)

28 
	#km≠_©omic_to_∑ge
(
±r
Ë
	`vút_to_∑ge
’å)

	)

29 #i‚de‡
__HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE


	@linux/hil.h

12 #i‚de‡
_HIL_H_


13 
	#_HIL_H_


	)

15 
	~<asm/ty≥s.h
>

17 
	#HIL_CLOCK
 8
MHZ


	)

18 
	#HIL_EK1_CLOCK
 30
HZ


	)

19 
	#HIL_EK2_CLOCK
 60
HZ


	)

21 
	#HIL_TIMEOUT_DEV
 5

	)

22 
	#HIL_TIMEOUT_DEVS
 10

	)

23 
	#HIL_TIMEOUT_NORESP
 10

	)

24 
	#HIL_TIMEOUT_DEVS_DATA
 16

	)

25 
	#HIL_TIMEOUT_SELFTEST
 200

	)

27 
	#HIL_WIRE_PACKET_LEN
 15

	)

28 
	ehû_wúe_bôpos
 {

29 
	mHIL_WIRE_START
 = 0,

30 
	mHIL_WIRE_ADDR2
,

31 
	mHIL_WIRE_ADDR1
,

32 
	mHIL_WIRE_ADDR0
,

33 
	mHIL_WIRE_COMMAND
,

34 
	mHIL_WIRE_DATA7
,

35 
	mHIL_WIRE_DATA6
,

36 
	mHIL_WIRE_DATA5
,

37 
	mHIL_WIRE_DATA4
,

38 
	mHIL_WIRE_DATA3
,

39 
	mHIL_WIRE_DATA2
,

40 
	mHIL_WIRE_DATA1
,

41 
	mHIL_WIRE_DATA0
,

42 
	mHIL_WIRE_PARITY
,

43 
	mHIL_WIRE_STOP


46 
	ehû_pkt_bôpos
 {

47 
	mHIL_PKT_CMD
 = 0x00000800,

48 
	mHIL_PKT_ADDR2
 = 0x00000400,

49 
	mHIL_PKT_ADDR1
 = 0x00000200,

50 
	mHIL_PKT_ADDR0
 = 0x00000100,

51 
	mHIL_PKT_ADDR_MASK
 = 0x00000700,

52 
	mHIL_PKT_ADDR_SHIFT
 = 8,

53 
	mHIL_PKT_DATA7
 = 0x00000080,

54 
	mHIL_PKT_DATA6
 = 0x00000040,

55 
	mHIL_PKT_DATA5
 = 0x00000020,

56 
	mHIL_PKT_DATA4
 = 0x00000010,

57 
	mHIL_PKT_DATA3
 = 0x00000008,

58 
	mHIL_PKT_DATA2
 = 0x00000004,

59 
	mHIL_PKT_DATA1
 = 0x00000002,

60 
	mHIL_PKT_DATA0
 = 0x00000001,

61 
	mHIL_PKT_DATA_MASK
 = 0x000000FF,

62 
	mHIL_PKT_DATA_SHIFT
 = 0

65 
	ehû_îr‹_bôpos
 {

66 
	mHIL_ERR_OB
 = 0x00000800,

67 
	mHIL_ERR_INT
 = 0x00010000,

68 
	mHIL_ERR_NMI
 = 0x00020000,

69 
	mHIL_ERR_LERR
 = 0x00040000,

70 
	mHIL_ERR_PERR
 = 0x01000000,

71 
	mHIL_ERR_FERR
 = 0x02000000,

72 
	mHIL_ERR_FOF
 = 0x04000000

75 
	ehû_c⁄åﬁ_bôpos
 {

76 
	mHIL_CTRL_TEST
 = 0x00010000,

77 
	mHIL_CTRL_IPF
 = 0x00040000,

78 
	mHIL_CTRL_APE
 = 0x02000000

81 
	#HIL_DO_ALTER_CTRL
 0x40000000

	)

82 
	#HIL_CTRL_ONLY
 0xc0000000

	)

84 
u32
 
	thû_∑ckë
;

86 
	ehû_comm™d
 {

87 
	mHIL_CMD_IFC
 = 0x00,

88 
	mHIL_CMD_EPT
 = 0x01,

89 
	mHIL_CMD_ELB
 = 0x02,

90 
	mHIL_CMD_IDD
 = 0x03,

91 
	mHIL_CMD_DSR
 = 0x04,

92 
	mHIL_CMD_PST
 = 0x05,

93 
	mHIL_CMD_RRG
 = 0x06,

94 
	mHIL_CMD_WRG
 = 0x07,

95 
	mHIL_CMD_ACF
 = 0x08,

96 
	mHIL_CMDID_ACF
 = 0x07,

97 
	mHIL_CMD_POL
 = 0x10,

98 
	mHIL_CMDCT_POL
 = 0x0f,

99 
	mHIL_CMD_RPL
 = 0x20,

100 
	mHIL_CMDCT_RPL
 = 0x0f,

101 
	mHIL_CMD_RNM
 = 0x30,

102 
	mHIL_CMD_RST
 = 0x31,

103 
	mHIL_CMD_EXD
 = 0x32,

104 
	mHIL_CMD_RSC
 = 0x33,

106 
	mHIL_CMD_DKA
 = 0x3d,

107 
	mHIL_CMD_EK1
 = 0x3e,

108 
	mHIL_CMD_EK2
 = 0x3f,

109 
	mHIL_CMD_PR1
 = 0x40,

110 
	mHIL_CMD_PR2
 = 0x41,

111 
	mHIL_CMD_PR3
 = 0x42,

112 
	mHIL_CMD_PR4
 = 0x43,

113 
	mHIL_CMD_PR5
 = 0x44,

114 
	mHIL_CMD_PR6
 = 0x45,

115 
	mHIL_CMD_PR7
 = 0x46,

116 
	mHIL_CMD_PRM
 = 0x47,

117 
	mHIL_CMD_AK1
 = 0x48,

118 
	mHIL_CMD_AK2
 = 0x49,

119 
	mHIL_CMD_AK3
 = 0x4a,

120 
	mHIL_CMD_AK4
 = 0x4b,

121 
	mHIL_CMD_AK5
 = 0x4c,

122 
	mHIL_CMD_AK6
 = 0x4d,

123 
	mHIL_CMD_AK7
 = 0x4e,

124 
	mHIL_CMD_ACK
 = 0x4f,

126 
	mHIL_CMD_RIO
 = 0xfa,

127 
	mHIL_CMD_SHR
 = 0xfb,

128 
	mHIL_CMD_TER
 = 0xfc,

129 
	mHIL_CMD_CAE
 = 0xfd,

130 
	mHIL_CMD_DHR
 = 0xfe,

134 
	#HIL_IDD_DID_TYPE_MASK
 0xe0

	)

135 
	#HIL_IDD_DID_TYPE_KB_INTEGRAL
 0xa0

	)

136 
	#HIL_IDD_DID_TYPE_KB_ITF
 0xc0

	)

137 
	#HIL_IDD_DID_TYPE_KB_RSVD
 0xe0

	)

138 
	#HIL_IDD_DID_TYPE_KB_LANG_MASK
 0x1f

	)

139 
	#HIL_IDD_DID_KBLANG_USE_ESD
 0x00

	)

140 
	#HIL_IDD_DID_TYPE_ABS
 0x80

	)

141 
	#HIL_IDD_DID_ABS_RSVD1_MASK
 0xf8

	)

142 
	#HIL_IDD_DID_ABS_RSVD1
 0x98

	)

143 
	#HIL_IDD_DID_ABS_TABLET_MASK
 0xf8

	)

144 
	#HIL_IDD_DID_ABS_TABLET
 0x90

	)

145 
	#HIL_IDD_DID_ABS_TSCREEN_MASK
 0xfc

	)

146 
	#HIL_IDD_DID_ABS_TSCREEN
 0x8c

	)

147 
	#HIL_IDD_DID_ABS_RSVD2_MASK
 0xfc

	)

148 
	#HIL_IDD_DID_ABS_RSVD2
 0x88

	)

149 
	#HIL_IDD_DID_ABS_RSVD3_MASK
 0xfc

	)

150 
	#HIL_IDD_DID_ABS_RSVD3
 0x80

	)

151 
	#HIL_IDD_DID_TYPE_REL
 0x60

	)

152 
	#HIL_IDD_DID_REL_RSVD1_MASK
 0xf0

	)

153 
	#HIL_IDD_DID_REL_RSVD1
 0x70

	)

154 
	#HIL_IDD_DID_REL_RSVD2_MASK
 0xfc

	)

155 
	#HIL_IDD_DID_REL_RSVD2
 0x6c

	)

156 
	#HIL_IDD_DID_REL_MOUSE_MASK
 0xfc

	)

157 
	#HIL_IDD_DID_REL_MOUSE
 0x68

	)

158 
	#HIL_IDD_DID_REL_QUAD_MASK
 0xf8

	)

159 
	#HIL_IDD_DID_REL_QUAD
 0x60

	)

160 
	#HIL_IDD_DID_TYPE_CHAR
 0x40

	)

161 
	#HIL_IDD_DID_CHAR_BARCODE_MASK
 0xfc

	)

162 
	#HIL_IDD_DID_CHAR_BARCODE
 0x5c

	)

163 
	#HIL_IDD_DID_CHAR_RSVD1_MASK
 0xfc

	)

164 
	#HIL_IDD_DID_CHAR_RSVD1
 0x58

	)

165 
	#HIL_IDD_DID_CHAR_RSVD2_MASK
 0xf8

	)

166 
	#HIL_IDD_DID_CHAR_RSVD2
 0x50

	)

167 
	#HIL_IDD_DID_CHAR_RSVD3_MASK
 0xf0

	)

168 
	#HIL_IDD_DID_CHAR_RSVD3
 0x40

	)

169 
	#HIL_IDD_DID_TYPE_OTHER
 0x20

	)

170 
	#HIL_IDD_DID_OTHER_RSVD1_MASK
 0xf0

	)

171 
	#HIL_IDD_DID_OTHER_RSVD1
 0x30

	)

172 
	#HIL_IDD_DID_OTHER_BARCODE_MASK
 0xfc

	)

173 
	#HIL_IDD_DID_OTHER_BARCODE
 0x2c

	)

174 
	#HIL_IDD_DID_OTHER_RSVD2_MASK
 0xfc

	)

175 
	#HIL_IDD_DID_OTHER_RSVD2
 0x28

	)

176 
	#HIL_IDD_DID_OTHER_RSVD3_MASK
 0xf8

	)

177 
	#HIL_IDD_DID_OTHER_RSVD3
 0x20

	)

178 
	#HIL_IDD_DID_TYPE_KEYPAD
 0x00

	)

180 
	#HIL_IDD_HEADER_AXSET_MASK
 0x03

	)

181 
	#HIL_IDD_HEADER_RSC
 0x04

	)

182 
	#HIL_IDD_HEADER_EXD
 0x08

	)

183 
	#HIL_IDD_HEADER_IOD
 0x10

	)

184 
	#HIL_IDD_HEADER_16BIT
 0x20

	)

185 
	#HIL_IDD_HEADER_ABS
 0x40

	)

186 
	#HIL_IDD_HEADER_2X_AXIS
 0x80

	)

188 
	#HIL_IDD_IOD_NBUTTON_MASK
 0x07

	)

189 
	#HIL_IDD_IOD_PROXIMITY
 0x08

	)

190 
	#HIL_IDD_IOD_PROMPT_MASK
 0x70

	)

191 
	#HIL_IDD_IOD_PROMPT_SHIFT
 4

	)

192 
	#HIL_IDD_IOD_PROMPT
 0x80

	)

194 
	#HIL_IDD_NUM_AXES_PER_SET
(
hódî_∑ckë
Ë((hódî_∑ckëË& 
HIL_IDD_HEADER_AXSET_MASK
)

	)

196 
	#HIL_IDD_NUM_AXSETS
(
hódî_∑ckë
Ë(2 - !((hódî_∑ckëË& 
HIL_IDD_HEADER_2X_AXIS
))

	)

198 
	#HIL_IDD_LEN
(
hódî_∑ckë
Ë((4 - !(hódî_∑ckë & 
HIL_IDD_HEADER_IOD
Ë- 2 * !(
	`HIL_IDD_NUM_AXES_PER_SET
(hódî_∑ckë))Ë+ 2 * HIL_IDD_NUM_AXES_PER_SET(hódî_∑ckëË* !!((hódî_∑ckëË& 
HIL_IDD_HEADER_ABS
))

	)

200 
	#HIL_IDD_AXIS_COUNTS_PER_M
(
hódî_±r
Ë(!(
	`HIL_IDD_NUM_AXSETS
(*(hódî_±r))Ë? -1 : (((*(hódî_±∏+ 1Ë& 
HIL_PKT_DATA_MASK
Ë+ ((*(hódî_±∏+ 2Ë& HIL_PKT_DATA_MASK)Ë<< 8Ë* ((*(hódî_±rË& 
HIL_IDD_HEADER_16BIT
Ë? 100 : 1)))

	)

202 
	#HIL_IDD_AXIS_MAX
(
hódî_±r
, 
__axnum
Ë((!(*(hódî_±rË& 
HIL_IDD_HEADER_ABS
Ë|| (
	`HIL_IDD_NUM_AXES_PER_SET
(*(hódî_±r)Ë<__axnum)Ë? 0 : ((
HIL_PKT_DATA_MASK
 & *((hódî_±rË+ 3 + 2 * __axnum)Ë+ ((HIL_PKT_DATA_MASK & *((hódî_±rË+ 4 + 2 * __axnum)Ë<< 8)))

	)

204 
	#HIL_IDD_IOD
(
hódî_±r
Ë(*(hódî_±∏+ 
	`HIL_IDD_LEN
((*hódî_±r)Ë- 1))

	)

206 
	#HIL_IDD_HAS_GEN_PROMPT
(
hódî_±r
Ë((*hódî_±∏& 
HIL_IDD_HEADER_IOD
Ë&& (
	`HIL_IDD_IOD
(hódî_±rË& 
HIL_IDD_IOD_PROMPT
))

	)

208 
	#HIL_IDD_HAS_GEN_PROXIMITY
(
hódî_±r
Ë((*hódî_±∏& 
HIL_IDD_HEADER_IOD
Ë&& (
	`HIL_IDD_IOD
(hódî_±rË& 
HIL_IDD_IOD_PROXIMITY
))

	)

210 
	#HIL_IDD_NUM_BUTTONS
(
hódî_±r
Ë((*hódî_±∏& 
HIL_IDD_HEADER_IOD
Ë? (
	`HIL_IDD_IOD
(hódî_±rË& 
HIL_IDD_IOD_NBUTTON_MASK
Ë: 0)

	)

212 
	#HIL_IDD_NUM_PROMPTS
(
hódî_±r
Ë((*hódî_±∏& 
HIL_IDD_HEADER_IOD
Ë? ((
	`HIL_IDD_IOD
(hódî_±rË& 
HIL_IDD_IOD_NPROMPT_MASK
Ë>> 
HIL_IDD_IOD_PROMPT_SHIFT
Ë: 0)

	)

214 
	#HIL_EXD_HEADER_WRG
 0x03

	)

215 
	#HIL_EXD_HEADER_WRG_TYPE1
 0x01

	)

216 
	#HIL_EXD_HEADER_WRG_TYPE2
 0x02

	)

217 
	#HIL_EXD_HEADER_RRG
 0x04

	)

218 
	#HIL_EXD_HEADER_RNM
 0x10

	)

219 
	#HIL_EXD_HEADER_RST
 0x20

	)

220 
	#HIL_EXD_HEADER_LOCALE
 0x40

	)

222 
	#HIL_EXD_NUM_RRG
(
hódî_±r
Ë((*hódî_±∏& 
HIL_EXD_HEADER_RRG
Ë? (*(hódî_±∏+ 1Ë& 
HIL_PKT_DATA_MASK
Ë: 0)

	)

224 
	#HIL_EXD_NUM_WWG
(
hódî_±r
Ë((*hódî_±∏& 
HIL_EXD_HEADER_WRG
Ë? (*(hódî_±∏+ 2 - !(*hódî_±∏& 
HIL_EXD_HEADER_RRG
)Ë& 
HIL_PKT_DATA_MASK
Ë: 0)

	)

226 
	#HIL_EXD_LEN
(
hódî_±r
Ë(!!(*hódî_±∏& 
HIL_EXD_HEADER_RRG
Ë+ !!(*hódî_±∏& 
HIL_EXD_HEADER_WRG
Ë+ !!(*hódî_±∏& 
HIL_EXD_HEADER_LOCALE
Ë+ 2 * !!(*hódî_±∏& 
HIL_EXD_HEADER_WRG_TYPE2
Ë+ 1)

	)

228 
	#HIL_EXD_LOCALE
(
hódî_±r
Ë(!(*hódî_±∏& 
HIL_EXD_HEADER_LOCALE
Ë? -1 : (*(hódî_±∏+ 
	`HIL_EXD_LEN
(hódî_±rË- 1Ë& 
HIL_PKT_DATA_MASK
))

	)

230 
	#HIL_EXD_WRG_TYPE2_LEN
(
hódî_±r
Ë(!(*hódî_±∏& 
HIL_EXD_HEADER_WRG_TYPE2
Ë? -1 : (*(hódî_±∏+ 
	`HIL_EXD_LEN
(hódî_±rË- 2 - !!(*hódî_±∏& 
HIL_EXD_HEADER_LOCALE
)Ë& 
HIL_PKT_DATA_MASK
Ë+ ((*(hódî_±∏+ HIL_EXD_LEN(hódî_±rË- 1 - !!(*hódî_±∏& HIL_EXD_HEADER_LOCALE)Ë& HIL_PKT_DATA_MASKË<< 8))

	)

232 
	#HIL_LOCALE_MAX
 0x1f

	)

234 
	#HIL_LOCALE_MAP
 "", "", "", "swiss.‰ích", "p‹tugue£", "¨abic", "hebªw", "íglish.ˇ«dün", "turkish", "gªek", "thai", "ôÆün", "k‹ón", "dutch", "swedish", "gîm™", "chöe£", "chöe£", "swiss.‰ích", "•™ish", "swiss.gîm™", "Êemish", "fönish", "íglish.uk", "‰ích.ˇ«dün", "swiss.gîm™", "n‹wegün", "‰ích", "d™ish", "j≠™e£", "•™ish", "íglish.us"

	)

236 
	#HIL_KEYCODES_SET1_TBLSIZE
 128

	)

237 
	#HIL_KEYCODES_SET1
 
KEY_5
, 
KEY_RESERVED
, 
KEY_RIGHTALT
, 
KEY_LEFTALT
, 
KEY_RIGHTSHIFT
, 
KEY_LEFTSHIFT
, 
KEY_LEFTCTRL
, 
KEY_SYSRQ
, 
KEY_KP4
, 
KEY_KP8
, 
KEY_KP5
, 
KEY_KP9
, 
KEY_KP6
, 
KEY_KP7
, 
KEY_KPCOMMA
, 
KEY_KPENTER
, 
KEY_KP1
, 
KEY_KPSLASH
, 
KEY_KP2
, 
KEY_KPPLUS
, 
KEY_KP3
, 
KEY_KPASTERISK
, 
KEY_KP0
, 
KEY_KPMINUS
, 
KEY_B
, 
KEY_V
, 
KEY_C
, 
KEY_X
, 
KEY_Z
, KEY_RESERVED, KEY_RESERVED, 
KEY_ESC
, 
KEY_6
, 
KEY_F10
, 
KEY_3
, 
KEY_F11
, 
KEY_KPDOT
, 
KEY_F9
, 
KEY_TAB
 , 
KEY_F12
, 
KEY_H
, 
KEY_G
, 
KEY_F
, 
KEY_D
, 
KEY_S
, 
KEY_A
, KEY_RESERVED, 
KEY_CAPSLOCK
, 
KEY_U
, 
KEY_Y
, 
KEY_T
, 
KEY_R
, 
KEY_E
, 
KEY_W
, 
KEY_Q
, KEY_TAB, 
KEY_7
, KEY_6, KEY_5, 
KEY_4
, KEY_3, 
KEY_2
, 
KEY_1
, 
KEY_GRAVE
, 
KEY_F13
, 
KEY_F14
, 
KEY_F15
, 
KEY_F16
, 
KEY_F17
, 
KEY_F18
, 
KEY_F19
, 
KEY_F20
, 
KEY_MENU
, 
KEY_F4
, 
KEY_F3
, 
KEY_F2
, 
KEY_F1
, 
KEY_VOLUMEUP
, 
KEY_STOP
, 
KEY_SENDFILE
, KEY_SYSRQ, 
KEY_F5
, 
KEY_F6
, 
KEY_F7
, 
KEY_F8
, 
KEY_VOLUMEDOWN
, 
KEY_DEL_EOL
, 
KEY_DEL_EOS
, 
KEY_8
, 
KEY_9
, 
KEY_0
, 
KEY_MINUS
, 
KEY_EQUAL
, 
KEY_BACKSPACE
, 
KEY_INS_LINE
, 
KEY_DEL_LINE
, 
KEY_I
, 
KEY_O
, 
KEY_P
, 
KEY_LEFTBRACE
, 
KEY_RIGHTBRACE
, 
KEY_BACKSLASH
, 
KEY_INSERT
, 
KEY_DELETE
, 
KEY_J
, 
KEY_K
, 
KEY_L
, 
KEY_SEMICOLON
, 
KEY_APOSTROPHE
, 
KEY_ENTER
, 
KEY_HOME
, 
KEY_PAGEUP
, 
KEY_M
, 
KEY_COMMA
, 
KEY_DOT
, 
KEY_SLASH
, KEY_BACKSLASH, 
KEY_SELECT
, 
KEY_102ND
, 
KEY_PAGEDOWN
, 
KEY_N
, 
KEY_SPACE
, 
KEY_NEXT
, KEY_RESERVED, 
KEY_LEFT
, 
KEY_DOWN
, 
KEY_UP
, 
KEY_RIGHT


	)

239 
	#HIL_KEYCODES_SET3_TBLSIZE
 128

	)

240 
	#HIL_KEYCODES_SET3
 
KEY_RESERVED
, 
KEY_ESC
, 
KEY_1
, 
KEY_2
, 
KEY_3
, 
KEY_4
, 
KEY_5
, 
KEY_6
, 
KEY_7
, 
KEY_8
, 
KEY_9
, 
KEY_0
, 
KEY_MINUS
, 
KEY_EQUAL
, 
KEY_BACKSPACE
, 
KEY_TAB
, 
KEY_Q
, 
KEY_W
, 
KEY_E
, 
KEY_R
, 
KEY_T
, 
KEY_Y
, 
KEY_U
, 
KEY_I
, 
KEY_O
, 
KEY_P
, 
KEY_LEFTBRACE
, 
KEY_RIGHTBRACE
, 
KEY_ENTER
, 
KEY_LEFTCTRL
, 
KEY_A
, 
KEY_S
, 
KEY_D
, 
KEY_F
, 
KEY_G
, 
KEY_H
, 
KEY_J
, 
KEY_K
, 
KEY_L
, 
KEY_SEMICOLON
, 
KEY_APOSTROPHE
,
KEY_GRAVE
, 
KEY_LEFTSHIFT
, 
KEY_BACKSLASH
, 
KEY_Z
, 
KEY_X
, 
KEY_C
, 
KEY_V
, 
KEY_B
, 
KEY_N
, 
KEY_M
, 
KEY_COMMA
, 
KEY_DOT
, 
KEY_SLASH
, 
KEY_RIGHTSHIFT
, 
KEY_KPASTERISK
, 
KEY_LEFTALT
, 
KEY_SPACE
, 
KEY_CAPSLOCK
, 
KEY_F1
, 
KEY_F2
, 
KEY_F3
, 
KEY_F4
, 
KEY_F5
, 
KEY_F6
, 
KEY_F7
, 
KEY_F8
, 
KEY_F9
, 
KEY_F10
, 
KEY_NUMLOCK
, 
KEY_SCROLLLOCK
, 
KEY_KP7
, 
KEY_KP8
, 
KEY_KP9
, 
KEY_KPMINUS
, 
KEY_KP4
, 
KEY_KP5
, 
KEY_KP6
, 
KEY_KPPLUS
, 
KEY_KP1
, 
KEY_KP2
, 
KEY_KP3
, 
KEY_KP0
, 
KEY_KPDOT
, 
KEY_SYSRQ
, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, 
KEY_UP
, 
KEY_LEFT
, 
KEY_DOWN
, 
KEY_RIGHT
, 
KEY_HOME
, 
KEY_PAGEUP
, 
KEY_END
, 
KEY_PAGEDOWN
, 
KEY_INSERT
, 
KEY_DELETE
, 
KEY_102ND
, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_F1, KEY_F2, KEY_F3, KEY_F4, KEY_F5, KEY_F6, KEY_F7, KEY_F8, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, KEY_RESERVED, 
	)
KEY_RESERVED

242 
	#HIL_POL_NUM_AXES_MASK
 0x03

	)

243 
	#HIL_POL_CTS
 0x04

	)

244 
	#HIL_POL_STATUS_PENDING
 0x08

	)

245 
	#HIL_POL_CHARTYPE_MASK
 0x70

	)

246 
	#HIL_POL_CHARTYPE_NONE
 0x00

	)

247 
	#HIL_POL_CHARTYPE_RSVD1
 0x10

	)

248 
	#HIL_POL_CHARTYPE_ASCII
 0x20

	)

249 
	#HIL_POL_CHARTYPE_BINARY
 0x30

	)

250 
	#HIL_POL_CHARTYPE_SET1
 0x40

	)

251 
	#HIL_POL_CHARTYPE_RSVD2
 0x50

	)

252 
	#HIL_POL_CHARTYPE_SET2
 0x60

	)

253 
	#HIL_POL_CHARTYPE_SET3
 0x70

	)

254 
	#HIL_POL_AXIS_ALT
 0x80

	)

	@linux/i2c.h

12 #i‚de‡
_LINUX_I2C_H


13 
	#_LINUX_I2C_H


	)

15 
	~<löux/ty≥s.h
>

17 
	si2c_msg
 {

18 
__u16
 
	maddr
;

19 
__u16
 
	mÊags
;

20 
	#I2C_M_TEN
 0x10

	)

21 
	#I2C_M_RD
 0x01

	)

22 
	#I2C_M_NOSTART
 0x4000

	)

23 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

24 
	#I2C_M_IGNORE_NAK
 0x1000

	)

25 
	#I2C_M_NO_RD_ACK
 0x0800

	)

26 
__u16
 
	mÀn
;

27 
__u8
 *
	mbuf
;

30 
	#I2C_FUNC_I2C
 0x00000001

	)

31 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

32 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

33 
	#I2C_FUNC_SMBUS_HWPEC_CALC
 0x00000008

	)

34 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

35 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

36 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

37 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

38 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

39 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

40 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

41 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

42 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

43 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

44 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

45 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

46 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

47 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK_2
 0x10000000

	)

48 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2
 0x20000000

	)

50 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

51 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

52 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

53 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

54 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

55 
	#I2C_FUNC_SMBUS_I2C_BLOCK_2
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK_2
 | 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2
)

	)

57 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | 
I2C_FUNC_SMBUS_BYTE
 | 
I2C_FUNC_SMBUS_BYTE_DATA
 | 
I2C_FUNC_SMBUS_WORD_DATA
 | 
I2C_FUNC_SMBUS_PROC_CALL
 | 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | 
I2C_FUNC_SMBUS_I2C_BLOCK
)

	)

59 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

60 
	ui2c_smbus_d©a
 {

61 
__u8
 
	mbyã
;

62 
__u16
 
	mw‹d
;

63 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

67 
	#I2C_SMBUS_READ
 1

	)

68 
	#I2C_SMBUS_WRITE
 0

	)

70 
	#I2C_SMBUS_QUICK
 0

	)

71 
	#I2C_SMBUS_BYTE
 1

	)

72 
	#I2C_SMBUS_BYTE_DATA
 2

	)

73 
	#I2C_SMBUS_WORD_DATA
 3

	)

74 
	#I2C_SMBUS_PROC_CALL
 4

	)

75 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

76 
	#I2C_SMBUS_I2C_BLOCK_DATA
 6

	)

77 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

79 
	#I2C_RETRIES
 0x0701

	)

81 
	#I2C_TIMEOUT
 0x0702

	)

83 
	#I2C_SLAVE
 0x0703

	)

85 
	#I2C_SLAVE_FORCE
 0x0706

	)

87 
	#I2C_TENBIT
 0x0704

	)

89 
	#I2C_FUNCS
 0x0705

	)

90 
	#I2C_RDWR
 0x0707

	)

91 
	#I2C_PEC
 0x0708

	)

93 
	#I2C_SMBUS
 0x0720

	)

	@linux/icmp.h

12 #i‚de‡
_LINUX_ICMP_H


13 
	#_LINUX_ICMP_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#ICMP_ECHOREPLY
 0

	)

18 
	#ICMP_DEST_UNREACH
 3

	)

19 
	#ICMP_SOURCE_QUENCH
 4

	)

20 
	#ICMP_REDIRECT
 5

	)

21 
	#ICMP_ECHO
 8

	)

22 
	#ICMP_TIME_EXCEEDED
 11

	)

23 
	#ICMP_PARAMETERPROB
 12

	)

24 
	#ICMP_TIMESTAMP
 13

	)

25 
	#ICMP_TIMESTAMPREPLY
 14

	)

26 
	#ICMP_INFO_REQUEST
 15

	)

27 
	#ICMP_INFO_REPLY
 16

	)

28 
	#ICMP_ADDRESS
 17

	)

29 
	#ICMP_ADDRESSREPLY
 18

	)

30 
	#NR_ICMP_TYPES
 18

	)

32 
	#ICMP_NET_UNREACH
 0

	)

33 
	#ICMP_HOST_UNREACH
 1

	)

34 
	#ICMP_PROT_UNREACH
 2

	)

35 
	#ICMP_PORT_UNREACH
 3

	)

36 
	#ICMP_FRAG_NEEDED
 4

	)

37 
	#ICMP_SR_FAILED
 5

	)

38 
	#ICMP_NET_UNKNOWN
 6

	)

39 
	#ICMP_HOST_UNKNOWN
 7

	)

40 
	#ICMP_HOST_ISOLATED
 8

	)

41 
	#ICMP_NET_ANO
 9

	)

42 
	#ICMP_HOST_ANO
 10

	)

43 
	#ICMP_NET_UNR_TOS
 11

	)

44 
	#ICMP_HOST_UNR_TOS
 12

	)

45 
	#ICMP_PKT_FILTERED
 13

	)

46 
	#ICMP_PREC_VIOLATION
 14

	)

47 
	#ICMP_PREC_CUTOFF
 15

	)

48 
	#NR_ICMP_UNREACH
 15

	)

50 
	#ICMP_REDIR_NET
 0

	)

51 
	#ICMP_REDIR_HOST
 1

	)

52 
	#ICMP_REDIR_NETTOS
 2

	)

53 
	#ICMP_REDIR_HOSTTOS
 3

	)

55 
	#ICMP_EXC_TTL
 0

	)

56 
	#ICMP_EXC_FRAGTIME
 1

	)

58 
	sicmphdr
 {

59 
__u8
 
	mty≥
;

60 
__u8
 
	mcode
;

61 
__u16
 
	mchecksum
;

64 
__u16
 
	mid
;

65 
__u16
 
	m£quí˚
;

66 } 
	mecho
;

67 
__u32
 
	mg©eway
;

69 
__u16
 
	m__löux_unu£d
;

70 
__u16
 
	mmtu
;

71 } 
	m‰ag
;

72 } 
	mun
;

75 
	#ICMP_FILTER
 1

	)

77 
	sicmp_fûãr
 {

78 
__u32
 
	md©a
;

	@linux/if.h

12 #i‚de‡
_LINUX_IF_H


13 
	#_LINUX_IF_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/sockë.h
>

17 
	~<löux/compûî.h
>

19 
	#IFNAMSIZ
 16

	)

20 
	~<löux/hdlc/io˘l.h
>

22 
	#IFF_UP
 0x1

	)

23 
	#IFF_BROADCAST
 0x2

	)

24 
	#IFF_DEBUG
 0x4

	)

25 
	#IFF_LOOPBACK
 0x8

	)

26 
	#IFF_POINTOPOINT
 0x10

	)

27 
	#IFF_NOTRAILERS
 0x20

	)

28 
	#IFF_RUNNING
 0x40

	)

29 
	#IFF_NOARP
 0x80

	)

30 
	#IFF_PROMISC
 0x100

	)

31 
	#IFF_ALLMULTI
 0x200

	)

33 
	#IFF_MASTER
 0x400

	)

34 
	#IFF_SLAVE
 0x800

	)

36 
	#IFF_MULTICAST
 0x1000

	)

38 
	#IFF_PORTSEL
 0x2000

	)

39 
	#IFF_AUTOMEDIA
 0x4000

	)

40 
	#IFF_DYNAMIC
 0x8000

	)

42 
	#IFF_LOWER_UP
 0x10000

	)

43 
	#IFF_DORMANT
 0x20000

	)

45 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
| 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

47 
	#IFF_802_1Q_VLAN
 0x1

	)

48 
	#IFF_EBRIDGE
 0x2

	)

49 
	#IFF_SLAVE_INACTIVE
 0x4

	)

50 
	#IFF_MASTER_8023AD
 0x8

	)

51 
	#IFF_MASTER_ALB
 0x10

	)

53 
	#IF_GET_IFACE
 0x0001

	)

54 
	#IF_GET_PROTO
 0x0002

	)

56 
	#IF_IFACE_V35
 0x1000

	)

57 
	#IF_IFACE_V24
 0x1001

	)

58 
	#IF_IFACE_X21
 0x1002

	)

59 
	#IF_IFACE_T1
 0x1003

	)

60 
	#IF_IFACE_E1
 0x1004

	)

61 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

62 
	#IF_IFACE_X21D
 0x1006

	)

64 
	#IF_PROTO_HDLC
 0x2000

	)

65 
	#IF_PROTO_PPP
 0x2001

	)

66 
	#IF_PROTO_CISCO
 0x2002

	)

67 
	#IF_PROTO_FR
 0x2003

	)

68 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

69 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

70 
	#IF_PROTO_X25
 0x2006

	)

71 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

72 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

73 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

74 
	#IF_PROTO_FR_PVC
 0x200A

	)

75 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

76 
	#IF_PROTO_RAW
 0x200C

	)

79 
	mIF_OPER_UNKNOWN
,

80 
	mIF_OPER_NOTPRESENT
,

81 
	mIF_OPER_DOWN
,

82 
	mIF_OPER_LOWERLAYERDOWN
,

83 
	mIF_OPER_TESTING
,

84 
	mIF_OPER_DORMANT
,

85 
	mIF_OPER_UP
,

89 
	mIF_LINK_MODE_DEFAULT
,

90 
	mIF_LINK_MODE_DORMANT
,

93 
	sifm≠


95 
	mmem_°¨t
;

96 
	mmem_íd
;

97 
	mba£_addr
;

98 
	múq
;

99 
	mdma
;

100 
	mp‹t
;

104 
	sif_£âögs


106 
	mty≥
;

107 
	msize
;

110 
øw_hdlc_¥Ÿo
 
__u£r
 *
	møw_hdlc
;

111 
cisco_¥Ÿo
 
__u£r
 *
	mcisco
;

112 
‰_¥Ÿo
 
__u£r
 *
	m‰
;

113 
‰_¥Ÿo_pvc
 
__u£r
 *
	m‰_pvc
;

114 
‰_¥Ÿo_pvc_öfo
 
__u£r
 *
	m‰_pvc_öfo
;

116 
sync_£rül_£âögs
 
__u£r
 *
	msync
;

117 
ã1_£âögs
 
__u£r
 *
	mã1
;

118 } 
	mifs_ifsu
;

121 
	si‰eq


123 
	#IFHWADDRLEN
 6

	)

126 
	mi‰n_«me
[
IFNAMSIZ
];

127 } 
	mi‰_i‰n
;

130 
sockaddr
 
	mi‰u_addr
;

131 
sockaddr
 
	mi‰u_d°addr
;

132 
sockaddr
 
	mi‰u_brﬂdaddr
;

133 
sockaddr
 
	mi‰u_√tmask
;

134 
sockaddr
 
	mi‰u_hwaddr
;

135 
	mi‰u_Êags
;

136 
	mi‰u_ivÆue
;

137 
	mi‰u_mtu
;

138 
ifm≠
 
	mi‰u_m≠
;

139 
	mi‰u_¶ave
[
IFNAMSIZ
];

140 
	mi‰u_√w«me
[
IFNAMSIZ
];

141 
__u£r
 * 
	mi‰u_d©a
;

142 
if_£âögs
 
	mi‰u_£âögs
;

143 } 
	mi‰_i‰u
;

146 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

147 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

148 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

149 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

150 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

151 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

152 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

153 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

154 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

155 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

156 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

157 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

158 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

160 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

161 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

162 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

164 
	sifc⁄f


166 
	mifc_Àn
;

169 
__u£r
 *
	mifcu_buf
;

170 
i‰eq
 
__u£r
 *
	mifcu_ªq
;

171 } 
	mifc_ifcu
;

173 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

174 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@linux/if_arcnet.h

12 #i‚de‡
_LINUX_IF_ARCNET_H


13 
	#_LINUX_IF_ARCNET_H


	)

15 
	~<löux/if_ëhî.h
>

17 
	#ARC_P_IP
 212

	)

18 
	#ARC_P_IPV6
 196

	)

19 
	#ARC_P_ARP
 213

	)

20 
	#ARC_P_RARP
 214

	)

21 
	#ARC_P_IPX
 250

	)

22 
	#ARC_P_NOVELL_EC
 236

	)

24 
	#ARC_P_IP_RFC1051
 240

	)

25 
	#ARC_P_ARP_RFC1051
 241

	)

27 
	#ARC_P_ETHER
 232

	)

29 
	#ARC_P_DATAPOINT_BOOT
 0

	)

30 
	#ARC_P_DATAPOINT_MOUNT
 1

	)

31 
	#ARC_P_POWERLAN_BEACON
 8

	)

32 
	#ARC_P_POWERLAN_BEACON2
 243

	)

33 
	#ARC_P_LANSOFT
 251

	)

34 
	#ARC_P_ATALK
 0xDD

	)

36 
	#ARCNET_ALEN
 1

	)

38 
	s¨c_rfc1201


40 
uöt8_t
 
	m¥Ÿo
;

41 
uöt8_t
 
	m•lô_Êag
;

42 
uöt16_t
 
	m£quí˚
;

43 
uöt8_t
 
	m∑ylﬂd
[0];

45 
	#RFC1201_HDR_SIZE
 4

	)

47 
	s¨c_rfc1051


49 
uöt8_t
 
	m¥Ÿo
;

50 
uöt8_t
 
	m∑ylﬂd
[0];

52 
	#RFC1051_HDR_SIZE
 1

	)

54 
	s¨c_ëh_íˇp


56 
uöt8_t
 
	m¥Ÿo
;

57 
ëhhdr
 
	mëh
;

58 
uöt8_t
 
	m∑ylﬂd
[0];

60 
	#ETH_ENCAP_HDR_SIZE
 14

	)

62 
	s¨c_ˇp


64 
uöt8_t
 
	m¥Ÿo
;

65 
uöt8_t
 
	mcookõ
[()];

67 
uöt8_t
 
	mack
;

68 
uöt8_t
 
	møw
[0];

69 } 
	mmes
;

72 
	s¨c_h¨dw¨e


74 
uöt8_t
 
	msour˚
,

75 
	mde°
,

76 
	moff£t
[2];

78 
	#ARC_HDR_SIZE
 4

	)

80 
	s¨chdr


83 
¨c_h¨dw¨e
 
	mh¨d
;

86 
¨c_rfc1201
 
	mrfc1201
;

87 
¨c_rfc1051
 
	mrfc1051
;

88 
¨c_ëh_íˇp
 
	mëh_íˇp
;

89 
¨c_ˇp
 
	mˇp
;

90 
uöt8_t
 
	møw
[0];

91 } 
	mso·
;

	@linux/if_arp.h

12 #i‚de‡
_LINUX_IF_ARP_H


13 
	#_LINUX_IF_ARP_H


	)

15 
	~<löux/√tdevi˚.h
>

17 
	#ARPHRD_NETROM
 0

	)

18 
	#ARPHRD_ETHER
 1

	)

19 
	#ARPHRD_EETHER
 2

	)

20 
	#ARPHRD_AX25
 3

	)

21 
	#ARPHRD_PRONET
 4

	)

22 
	#ARPHRD_CHAOS
 5

	)

23 
	#ARPHRD_IEEE802
 6

	)

24 
	#ARPHRD_ARCNET
 7

	)

25 
	#ARPHRD_APPLETLK
 8

	)

26 
	#ARPHRD_DLCI
 15

	)

27 
	#ARPHRD_ATM
 19

	)

28 
	#ARPHRD_METRICOM
 23

	)

29 
	#ARPHRD_IEEE1394
 24

	)

30 
	#ARPHRD_EUI64
 27

	)

31 
	#ARPHRD_INFINIBAND
 32

	)

33 
	#ARPHRD_SLIP
 256

	)

34 
	#ARPHRD_CSLIP
 257

	)

35 
	#ARPHRD_SLIP6
 258

	)

36 
	#ARPHRD_CSLIP6
 259

	)

37 
	#ARPHRD_RSRVD
 260

	)

38 
	#ARPHRD_ADAPT
 264

	)

39 
	#ARPHRD_ROSE
 270

	)

40 
	#ARPHRD_X25
 271

	)

41 
	#ARPHRD_HWX25
 272

	)

42 
	#ARPHRD_PPP
 512

	)

43 
	#ARPHRD_CISCO
 513

	)

44 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

45 
	#ARPHRD_LAPB
 516

	)

46 
	#ARPHRD_DDCMP
 517

	)

47 
	#ARPHRD_RAWHDLC
 518

	)

49 
	#ARPHRD_TUNNEL
 768

	)

50 
	#ARPHRD_TUNNEL6
 769

	)

51 
	#ARPHRD_FRAD
 770

	)

52 
	#ARPHRD_SKIP
 771

	)

53 
	#ARPHRD_LOOPBACK
 772

	)

54 
	#ARPHRD_LOCALTLK
 773

	)

55 
	#ARPHRD_FDDI
 774

	)

56 
	#ARPHRD_BIF
 775

	)

57 
	#ARPHRD_SIT
 776

	)

58 
	#ARPHRD_IPDDP
 777

	)

59 
	#ARPHRD_IPGRE
 778

	)

60 
	#ARPHRD_PIMREG
 779

	)

61 
	#ARPHRD_HIPPI
 780

	)

62 
	#ARPHRD_ASH
 781

	)

63 
	#ARPHRD_ECONET
 782

	)

64 
	#ARPHRD_IRDA
 783

	)

66 
	#ARPHRD_FCPP
 784

	)

67 
	#ARPHRD_FCAL
 785

	)

68 
	#ARPHRD_FCPL
 786

	)

69 
	#ARPHRD_FCFABRIC
 787

	)

71 
	#ARPHRD_IEEE802_TR
 800

	)

72 
	#ARPHRD_IEEE80211
 801

	)

73 
	#ARPHRD_IEEE80211_PRISM
 802

	)

74 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

76 
	#ARPHRD_VOID
 0xFFFF

	)

77 
	#ARPHRD_NONE
 0xFFFE

	)

79 
	#ARPOP_REQUEST
 1

	)

80 
	#ARPOP_REPLY
 2

	)

81 
	#ARPOP_RREQUEST
 3

	)

82 
	#ARPOP_RREPLY
 4

	)

83 
	#ARPOP_InREQUEST
 8

	)

84 
	#ARPOP_InREPLY
 9

	)

85 
	#ARPOP_NAK
 10

	)

87 
	s¨¥eq
 {

88 
sockaddr
 
	m¨p_∑
;

89 
sockaddr
 
	m¨p_ha
;

90 
	m¨p_Êags
;

91 
sockaddr
 
	m¨p_√tmask
;

92 
	m¨p_dev
[16];

95 
	s¨¥eq_ﬁd
 {

96 
sockaddr
 
	m¨p_∑
;

97 
sockaddr
 
	m¨p_ha
;

98 
	m¨p_Êags
;

99 
sockaddr
 
	m¨p_√tmask
;

102 
	#ATF_COM
 0x02

	)

103 
	#ATF_PERM
 0x04

	)

104 
	#ATF_PUBL
 0x08

	)

105 
	#ATF_USETRAILERS
 0x10

	)

106 
	#ATF_NETMASK
 0x20

	)

107 
	#ATF_DONTPUB
 0x40

	)

109 
	s¨phdr


111 
	m¨_hrd
;

112 
	m¨_¥o
;

113 
	m¨_h 
;

114 
	m¨_∂n
;

115 
	m¨_›
;

	@linux/if_bridge.h

12 #i‚de‡
_LINUX_IF_BRIDGE_H


13 
	#_LINUX_IF_BRIDGE_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#SYSFS_BRIDGE_ATTR
 "bridge"

	)

18 
	#SYSFS_BRIDGE_FDB
 "brf‹w¨d"

	)

19 
	#SYSFS_BRIDGE_PORT_SUBDIR
 "brif"

	)

20 
	#SYSFS_BRIDGE_PORT_ATTR
 "bΩ‹t"

	)

21 
	#SYSFS_BRIDGE_PORT_LINK
 "bridge"

	)

23 
	#BRCTL_VERSION
 1

	)

25 
	#BRCTL_GET_VERSION
 0

	)

26 
	#BRCTL_GET_BRIDGES
 1

	)

27 
	#BRCTL_ADD_BRIDGE
 2

	)

28 
	#BRCTL_DEL_BRIDGE
 3

	)

29 
	#BRCTL_ADD_IF
 4

	)

30 
	#BRCTL_DEL_IF
 5

	)

31 
	#BRCTL_GET_BRIDGE_INFO
 6

	)

32 
	#BRCTL_GET_PORT_LIST
 7

	)

33 
	#BRCTL_SET_BRIDGE_FORWARD_DELAY
 8

	)

34 
	#BRCTL_SET_BRIDGE_HELLO_TIME
 9

	)

35 
	#BRCTL_SET_BRIDGE_MAX_AGE
 10

	)

36 
	#BRCTL_SET_AGEING_TIME
 11

	)

37 
	#BRCTL_SET_GC_INTERVAL
 12

	)

38 
	#BRCTL_GET_PORT_INFO
 13

	)

39 
	#BRCTL_SET_BRIDGE_STP_STATE
 14

	)

40 
	#BRCTL_SET_BRIDGE_PRIORITY
 15

	)

41 
	#BRCTL_SET_PORT_PRIORITY
 16

	)

42 
	#BRCTL_SET_PATH_COST
 17

	)

43 
	#BRCTL_GET_FDB_ENTRIES
 18

	)

45 
	#BR_STATE_DISABLED
 0

	)

46 
	#BR_STATE_LISTENING
 1

	)

47 
	#BR_STATE_LEARNING
 2

	)

48 
	#BR_STATE_FORWARDING
 3

	)

49 
	#BR_STATE_BLOCKING
 4

	)

51 
	s__bridge_öfo


53 
__u64
 
	mdesig«ãd_roŸ
;

54 
__u64
 
	mbridge_id
;

55 
__u32
 
	mroŸ_∑th_co°
;

56 
__u32
 
	mmax_age
;

57 
__u32
 
	mhñlo_time
;

58 
__u32
 
	mf‹w¨d_dñay
;

59 
__u32
 
	mbridge_max_age
;

60 
__u32
 
	mbridge_hñlo_time
;

61 
__u32
 
	mbridge_f‹w¨d_dñay
;

62 
__u8
 
	mt›ﬁogy_ch™ge
;

63 
__u8
 
	mt›ﬁogy_ch™ge_dëe˘ed
;

64 
__u8
 
	mroŸ_p‹t
;

65 
__u8
 
	m°p_íabÀd
;

66 
__u32
 
	mageög_time
;

67 
__u32
 
	mgc_öãrvÆ
;

68 
__u32
 
	mhñlo_timî_vÆue
;

69 
__u32
 
	mt˙_timî_vÆue
;

70 
__u32
 
	mt›ﬁogy_ch™ge_timî_vÆue
;

71 
__u32
 
	mgc_timî_vÆue
;

74 
	s__p‹t_öfo


76 
__u64
 
	mdesig«ãd_roŸ
;

77 
__u64
 
	mdesig«ãd_bridge
;

78 
__u16
 
	mp‹t_id
;

79 
__u16
 
	mdesig«ãd_p‹t
;

80 
__u32
 
	m∑th_co°
;

81 
__u32
 
	mdesig«ãd_co°
;

82 
__u8
 
	m°©e
;

83 
__u8
 
	mt›_ch™ge_ack
;

84 
__u8
 
	mc⁄fig_≥ndög
;

85 
__u8
 
	munu£d0
;

86 
__u32
 
	mmesßge_age_timî_vÆue
;

87 
__u32
 
	mf‹w¨d_dñay_timî_vÆue
;

88 
__u32
 
	mhﬁd_timî_vÆue
;

91 
	s__fdb_íåy


93 
__u8
 
	mmac_addr
[6];

94 
__u8
 
	mp‹t_no
;

95 
__u8
 
	mis_loˇl
;

96 
__u32
 
	mageög_timî_vÆue
;

97 
__u32
 
	munu£d
;

	@linux/if_ether.h

12 #i‚de‡
_LINUX_IF_ETHER_H


13 
	#_LINUX_IF_ETHER_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#ETH_ALEN
 6

	)

18 
	#ETH_HLEN
 14

	)

19 
	#ETH_ZLEN
 60

	)

20 
	#ETH_DATA_LEN
 1500

	)

21 
	#ETH_FRAME_LEN
 1514

	)

23 
	#ETH_P_LOOP
 0x0060

	)

24 
	#ETH_P_PUP
 0x0200

	)

25 
	#ETH_P_PUPAT
 0x0201

	)

26 
	#ETH_P_IP
 0x0800

	)

27 
	#ETH_P_X25
 0x0805

	)

28 
	#ETH_P_ARP
 0x0806

	)

29 
	#ETH_P_BPQ
 0x08FF

	)

30 
	#ETH_P_IEEEPUP
 0x0a00

	)

31 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

32 
	#ETH_P_DEC
 0x6000

	)

33 
	#ETH_P_DNA_DL
 0x6001

	)

34 
	#ETH_P_DNA_RC
 0x6002

	)

35 
	#ETH_P_DNA_RT
 0x6003

	)

36 
	#ETH_P_LAT
 0x6004

	)

37 
	#ETH_P_DIAG
 0x6005

	)

38 
	#ETH_P_CUST
 0x6006

	)

39 
	#ETH_P_SCA
 0x6007

	)

40 
	#ETH_P_RARP
 0x8035

	)

41 
	#ETH_P_ATALK
 0x809B

	)

42 
	#ETH_P_AARP
 0x80F3

	)

43 
	#ETH_P_8021Q
 0x8100

	)

44 
	#ETH_P_IPX
 0x8137

	)

45 
	#ETH_P_IPV6
 0x86DD

	)

46 
	#ETH_P_SLOW
 0x8809

	)

47 
	#ETH_P_WCCP
 0x883E

	)

48 
	#ETH_P_PPP_DISC
 0x8863

	)

49 
	#ETH_P_PPP_SES
 0x8864

	)

50 
	#ETH_P_MPLS_UC
 0x8847

	)

51 
	#ETH_P_MPLS_MC
 0x8848

	)

52 
	#ETH_P_ATMMPOA
 0x884c

	)

53 
	#ETH_P_ATMFATE
 0x8884

	)

54 
	#ETH_P_AOE
 0x88A2

	)

55 
	#ETH_P_TIPC
 0x88CA

	)

57 
	#ETH_P_802_3
 0x0001

	)

58 
	#ETH_P_AX25
 0x0002

	)

59 
	#ETH_P_ALL
 0x0003

	)

60 
	#ETH_P_802_2
 0x0004

	)

61 
	#ETH_P_SNAP
 0x0005

	)

62 
	#ETH_P_DDCMP
 0x0006

	)

63 
	#ETH_P_WAN_PPP
 0x0007

	)

64 
	#ETH_P_PPP_MP
 0x0008

	)

65 
	#ETH_P_LOCALTALK
 0x0009

	)

66 
	#ETH_P_PPPTALK
 0x0010

	)

67 
	#ETH_P_TR_802_2
 0x0011

	)

68 
	#ETH_P_MOBITEX
 0x0015

	)

69 
	#ETH_P_CONTROL
 0x0016

	)

70 
	#ETH_P_IRDA
 0x0017

	)

71 
	#ETH_P_ECONET
 0x0018

	)

72 
	#ETH_P_HDLC
 0x0019

	)

73 
	#ETH_P_ARCNET
 0x001A

	)

75 
	sëhhdr
 {

76 
	mh_de°
[
ETH_ALEN
];

77 
	mh_sour˚
[
ETH_ALEN
];

78 
__be16
 
	mh_¥Ÿo
;

79 } 
__©åibuã__
((
∑cked
));

	@linux/if_fc.h

12 #i‚de‡
_LINUX_IF_FC_H


13 
	#_LINUX_IF_FC_H


	)

15 
	#FC_ALEN
 6

	)

16 
	#FC_HLEN
 ((
fch_hdr
)+(
f˛lc
))

	)

17 
	#FC_ID_LEN
 3

	)

19 
	#EXTENDED_SAP
 0xAA

	)

20 
	#UI_CMD
 0x03

	)

22 
	sfch_hdr
 {

23 
__u8
 
	mdaddr
[
FC_ALEN
];

24 
__u8
 
	mßddr
[
FC_ALEN
];

27 
	sf˛lc
 {

28 
__u8
 
	mdßp
;

29 
__u8
 
	msßp
;

30 
__u8
 
	mŒc
;

31 
__u8
 
	m¥Ÿid
[3];

32 
__be16
 
	mëhîty≥
;

	@linux/if_fddi.h

12 #i‚de‡
_LINUX_IF_FDDI_H


13 
	#_LINUX_IF_FDDI_H


	)

15 
	#FDDI_K_ALEN
 6

	)

16 
	#FDDI_K_8022_HLEN
 16

	)

17 
	#FDDI_K_SNAP_HLEN
 21

	)

18 
	#FDDI_K_8022_ZLEN
 16

	)

19 
	#FDDI_K_SNAP_ZLEN
 21

	)

20 
	#FDDI_K_8022_DLEN
 4475

	)

21 
	#FDDI_K_SNAP_DLEN
 4470

	)

22 
	#FDDI_K_LLC_ZLEN
 13

	)

23 
	#FDDI_K_LLC_LEN
 4491

	)

25 
	#FDDI_FC_K_VOID
 0x00

	)

26 
	#FDDI_FC_K_NON_RESTRICTED_TOKEN
 0x80

	)

27 
	#FDDI_FC_K_RESTRICTED_TOKEN
 0xC0

	)

28 
	#FDDI_FC_K_SMT_MIN
 0x41

	)

29 
	#FDDI_FC_K_SMT_MAX
 0x4F

	)

30 
	#FDDI_FC_K_MAC_MIN
 0xC1

	)

31 
	#FDDI_FC_K_MAC_MAX
 0xCF

	)

32 
	#FDDI_FC_K_ASYNC_LLC_MIN
 0x50

	)

33 
	#FDDI_FC_K_ASYNC_LLC_DEF
 0x54

	)

34 
	#FDDI_FC_K_ASYNC_LLC_MAX
 0x5F

	)

35 
	#FDDI_FC_K_SYNC_LLC_MIN
 0xD0

	)

36 
	#FDDI_FC_K_SYNC_LLC_MAX
 0xD7

	)

37 
	#FDDI_FC_K_IMPLEMENTOR_MIN
 0x60

	)

38 
	#FDDI_FC_K_IMPLEMENTOR_MAX
 0x6F

	)

39 
	#FDDI_FC_K_RESERVED_MIN
 0x70

	)

40 
	#FDDI_FC_K_RESERVED_MAX
 0x7F

	)

42 
	#FDDI_EXTENDED_SAP
 0xAA

	)

43 
	#FDDI_UI_CMD
 0x03

	)

45 
	sfddi_8022_1_hdr


47 
__u8
 
	mdßp
;

48 
__u8
 
	msßp
;

49 
__u8
 
	m˘æ
;

50 } 
__©åibuã__
 ((
∑cked
));

52 
	sfddi_8022_2_hdr


54 
__u8
 
	mdßp
;

55 
__u8
 
	msßp
;

56 
__u8
 
	m˘æ_1
;

57 
__u8
 
	m˘æ_2
;

58 } 
__©åibuã__
 ((
∑cked
));

60 
	#FDDI_K_OUI_LEN
 3

	)

61 
	sfddi_¢≠_hdr


63 
__u8
 
	mdßp
;

64 
__u8
 
	msßp
;

65 
__u8
 
	m˘æ
;

66 
__u8
 
	moui
[
FDDI_K_OUI_LEN
];

67 
__be16
 
	mëhîty≥
;

68 } 
__©åibuã__
 ((
∑cked
));

70 
	sfddihdr


72 
__u8
 
	mfc
;

73 
__u8
 
	mdaddr
[
FDDI_K_ALEN
];

74 
__u8
 
	mßddr
[
FDDI_K_ALEN
];

77 
fddi_8022_1_hdr
 
	mŒc_8022_1
;

78 
fddi_8022_2_hdr
 
	mŒc_8022_2
;

79 
fddi_¢≠_hdr
 
	mŒc_¢≠
;

80 } 
	mhdr
;

81 } 
__©åibuã__
 ((
∑cked
));

	@linux/if_hippi.h

12 #i‚de‡
_LINUX_IF_HIPPI_H


13 
	#_LINUX_IF_HIPPI_H


	)

15 
	~<asm/byã‹dî.h
>

17 
	#HIPPI_ALEN
 6

	)

18 
	#HIPPI_HLEN
 (
hùpi_hdr
)

	)

19 
	#HIPPI_ZLEN
 0

	)

20 
	#HIPPI_DATA_LEN
 65280

	)

21 
	#HIPPI_FRAME_LEN
 (
HIPPI_DATA_LEN
 + 
HIPPI_HLEN
)

	)

23 
	#HIPPI_EXTENDED_SAP
 0xAA

	)

24 
	#HIPPI_UI_CMD
 0x03

	)

26 
	shù√t_°©i°ics


28 
	mrx_∑ckës
;

29 
	mtx_∑ckës
;

30 
	mrx_îr‹s
;

31 
	mtx_îr‹s
;

32 
	mrx_dr›≥d
;

33 
	mtx_dr›≥d
;

35 
	mrx_Àngth_îr‹s
;

36 
	mrx_ovî_îr‹s
;

37 
	mrx_¸c_îr‹s
;

38 
	mrx_‰ame_îr‹s
;

39 
	mrx_fifo_îr‹s
;

40 
	mrx_mis£d_îr‹s
;

42 
	mtx_ab‹ãd_îr‹s
;

43 
	mtx_ˇºõr_îr‹s
;

44 
	mtx_fifo_îr‹s
;

45 
	mtx_hóπbót_îr‹s
;

46 
	mtx_wödow_îr‹s
;

49 
	shùpi_Â_hdr


51 
__be32
 
	mfixed
;

52 
__be32
 
	md2_size
;

53 } 
__©åibuã__
 ((
∑cked
));

55 
	shùpi_À_hdr


57 #ifde‡
__BIG_ENDIAN_BITFIELD


58 
__u8
 
	mfc
:3;

59 
__u8
 
	mdoubÀ_wide
:1;

60 
__u8
 
	mmesßge_ty≥
:4;

61 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

62 
__u8
 
	mmesßge_ty≥
:4;

63 
__u8
 
	mdoubÀ_wide
:1;

64 
__u8
 
	mfc
:3;

66 
__u8
 
	mde°_swôch_addr
[3];

67 #ifde‡
__BIG_ENDIAN_BITFIELD


68 
__u8
 
	mde°_addr_ty≥
:4,

69 
	m§c_addr_ty≥
:4;

70 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

71 
__u8
 
	m§c_addr_ty≥
:4,

72 
	mde°_addr_ty≥
:4;

74 
__u8
 
	m§c_swôch_addr
[3];

75 
__u16
 
	mª£rved
;

76 
__u8
 
	mdaddr
[
HIPPI_ALEN
];

77 
__u16
 
	mloˇŒy_admöi°îed
;

78 
__u8
 
	mßddr
[
HIPPI_ALEN
];

79 } 
__©åibuã__
 ((
∑cked
));

81 
	#HIPPI_OUI_LEN
 3

	)

83 
	shùpi_¢≠_hdr


85 
__u8
 
	mdßp
;

86 
__u8
 
	msßp
;

87 
__u8
 
	m˘æ
;

88 
__u8
 
	moui
[
HIPPI_OUI_LEN
];

89 
__be16
 
	mëhîty≥
;

90 } 
__©åibuã__
 ((
∑cked
));

92 
	shùpi_hdr


94 
hùpi_Â_hdr
 
	mÂ
;

95 
hùpi_À_hdr
 
	mÀ
;

96 
hùpi_¢≠_hdr
 
	m¢≠
;

97 } 
__©åibuã__
 ((
∑cked
));

	@linux/if_packet.h

12 #i‚de‡
__LINUX_IF_PACKET_H


13 
	#__LINUX_IF_PACKET_H


	)

15 
	ssockaddr_pkt


17 
	m•kt_Ámûy
;

18 
	m•kt_devi˚
[14];

19 
	m•kt_¥Ÿocﬁ
;

22 
	ssockaddr_Œ


24 
	m¶l_Ámûy
;

25 
	m¶l_¥Ÿocﬁ
;

26 
	m¶l_ifödex
;

27 
	m¶l_h©y≥
;

28 
	m¶l_pkây≥
;

29 
	m¶l_hÆí
;

30 
	m¶l_addr
[8];

33 
	#PACKET_HOST
 0

	)

34 
	#PACKET_BROADCAST
 1

	)

35 
	#PACKET_MULTICAST
 2

	)

36 
	#PACKET_OTHERHOST
 3

	)

37 
	#PACKET_OUTGOING
 4

	)

39 
	#PACKET_LOOPBACK
 5

	)

40 
	#PACKET_FASTROUTE
 6

	)

42 
	#PACKET_ADD_MEMBERSHIP
 1

	)

43 
	#PACKET_DROP_MEMBERSHIP
 2

	)

44 
	#PACKET_RECV_OUTPUT
 3

	)

46 
	#PACKET_RX_RING
 5

	)

47 
	#PACKET_STATISTICS
 6

	)

48 
	#PACKET_COPY_THRESH
 7

	)

50 
	sçackë_°©s


52 
	mç_∑ckës
;

53 
	mç_dr›s
;

56 
	sçackë_hdr


58 
	mç_°©us
;

59 
	#TP_STATUS_KERNEL
 0

	)

60 
	#TP_STATUS_USER
 1

	)

61 
	#TP_STATUS_COPY
 2

	)

62 
	#TP_STATUS_LOSING
 4

	)

63 
	#TP_STATUS_CSUMNOTREADY
 8

	)

64 
	mç_Àn
;

65 
	mç_¢≠Àn
;

66 
	mç_mac
;

67 
	mç_√t
;

68 
	mç_£c
;

69 
	mç_u£c
;

72 
	#TPACKET_ALIGNMENT
 16

	)

73 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

74 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

76 
	sçackë_ªq


78 
	mç_block_size
;

79 
	mç_block_ƒ
;

80 
	mç_‰ame_size
;

81 
	mç_‰ame_ƒ
;

84 
	s∑ckë_mªq


86 
	mmr_ifödex
;

87 
	mmr_ty≥
;

88 
	mmr_Æí
;

89 
	mmr_addªss
[8];

92 
	#PACKET_MR_MULTICAST
 0

	)

93 
	#PACKET_MR_PROMISC
 1

	)

94 
	#PACKET_MR_ALLMULTI
 2

	)

	@linux/if_ppp.h

12 #i‚de‡
_IF_PPP_H_


13 
	#_IF_PPP_H_


	)

15 
	~<löux/compûî.h
>

17 
	#PPP_MTU
 1500

	)

18 
	#PPP_MAXMRU
 65000

	)

19 
	#PROTO_IPX
 0x002b

	)

20 
	#PROTO_DNA_RT
 0x0027

	)

22 
	#SC_COMP_PROT
 0x00000001

	)

23 
	#SC_COMP_AC
 0x00000002

	)

24 
	#SC_COMP_TCP
 0x00000004

	)

25 
	#SC_NO_TCP_CCID
 0x00000008

	)

26 
	#SC_REJ_COMP_AC
 0x00000010

	)

27 
	#SC_REJ_COMP_TCP
 0x00000020

	)

28 
	#SC_CCP_OPEN
 0x00000040

	)

29 
	#SC_CCP_UP
 0x00000080

	)

30 
	#SC_ENABLE_IP
 0x00000100

	)

31 
	#SC_LOOP_TRAFFIC
 0x00000200

	)

32 
	#SC_MULTILINK
 0x00000400

	)

33 
	#SC_MP_SHORTSEQ
 0x00000800

	)

34 
	#SC_COMP_RUN
 0x00001000

	)

35 
	#SC_DECOMP_RUN
 0x00002000

	)

36 
	#SC_MP_XSHORTSEQ
 0x00004000

	)

37 
	#SC_DEBUG
 0x00010000

	)

38 
	#SC_LOG_INPKT
 0x00020000

	)

39 
	#SC_LOG_OUTPKT
 0x00040000

	)

40 
	#SC_LOG_RAWIN
 0x00080000

	)

41 
	#SC_LOG_FLUSH
 0x00100000

	)

42 
	#SC_SYNC
 0x00200000

	)

43 
	#SC_MUST_COMP
 0x00400000

	)

44 
	#SC_MASK
 0x0f600fff

	)

46 
	#SC_XMIT_BUSY
 0x10000000

	)

47 
	#SC_RCV_ODDP
 0x08000000

	)

48 
	#SC_RCV_EVNP
 0x04000000

	)

49 
	#SC_RCV_B7_1
 0x02000000

	)

50 
	#SC_RCV_B7_0
 0x01000000

	)

51 
	#SC_DC_FERROR
 0x00800000

	)

52 
	#SC_DC_ERROR
 0x00400000

	)

54 
	s≈io˘l
 {

55 
	m¥Ÿocﬁ
;

56 
NPmode
 
	mmode
;

59 
	sµp_›ti⁄_d©a
 {

60 
__u8
 
__u£r
 *
	m±r
;

61 
__u32
 
	mÀngth
;

62 
	må™smô
;

65 
	siÂµ°©§eq
 {

66 
i‰eq
 
	mb
;

67 
µp_°©s
 
	m°©s
;

70 
	siÂµc°©§eq
 {

71 
i‰eq
 
	mb
;

72 
µp_comp_°©s
 
	m°©s
;

75 
	#i‰__«me
 
b
.
i‰_i‰n
.
i‰n_«me


	)

76 
	#°©s_±r
 
b
.
i‰_i‰u
.
i‰u_d©a


	)

78 
	#PPPIOCGFLAGS
 
	`_IOR
('t', 90, )

	)

79 
	#PPPIOCSFLAGS
 
	`_IOW
('t', 89, )

	)

80 
	#PPPIOCGASYNCMAP
 
	`_IOR
('t', 88, )

	)

81 
	#PPPIOCSASYNCMAP
 
	`_IOW
('t', 87, )

	)

82 
	#PPPIOCGUNIT
 
	`_IOR
('t', 86, )

	)

83 
	#PPPIOCGRASYNCMAP
 
	`_IOR
('t', 85, )

	)

84 
	#PPPIOCSRASYNCMAP
 
	`_IOW
('t', 84, )

	)

85 
	#PPPIOCGMRU
 
	`_IOR
('t', 83, )

	)

86 
	#PPPIOCSMRU
 
	`_IOW
('t', 82, )

	)

87 
	#PPPIOCSMAXCID
 
	`_IOW
('t', 81, )

	)

88 
	#PPPIOCGXASYNCMAP
 
	`_IOR
('t', 80, 
ext_accm
)

	)

89 
	#PPPIOCSXASYNCMAP
 
	`_IOW
('t', 79, 
ext_accm
)

	)

90 
	#PPPIOCXFERUNIT
 
	`_IO
('t', 78)

	)

91 
	#PPPIOCSCOMPRESS
 
	`_IOW
('t', 77, 
µp_›ti⁄_d©a
)

	)

92 
	#PPPIOCGNPMODE
 
	`_IOWR
('t', 76, 
≈io˘l
)

	)

93 
	#PPPIOCSNPMODE
 
	`_IOW
('t', 75, 
≈io˘l
)

	)

94 
	#PPPIOCSPASS
 
	`_IOW
('t', 71, 
sock_Ârog
)

	)

95 
	#PPPIOCSACTIVE
 
	`_IOW
('t', 70, 
sock_Ârog
)

	)

96 
	#PPPIOCGDEBUG
 
	`_IOR
('t', 65, )

	)

97 
	#PPPIOCSDEBUG
 
	`_IOW
('t', 64, )

	)

98 
	#PPPIOCGIDLE
 
	`_IOR
('t', 63, 
µp_idÀ
)

	)

99 
	#PPPIOCNEWUNIT
 
	`_IOWR
('t', 62, )

	)

100 
	#PPPIOCATTACH
 
	`_IOW
('t', 61, )

	)

101 
	#PPPIOCDETACH
 
	`_IOW
('t', 60, )

	)

102 
	#PPPIOCSMRRU
 
	`_IOW
('t', 59, )

	)

103 
	#PPPIOCCONNECT
 
	`_IOW
('t', 58, )

	)

104 
	#PPPIOCDISCONN
 
	`_IO
('t', 57)

	)

105 
	#PPPIOCATTCHAN
 
	`_IOW
('t', 56, )

	)

106 
	#PPPIOCGCHAN
 
	`_IOR
('t', 55, )

	)

108 
	#SIOCGPPPSTATS
 (
SIOCDEVPRIVATE
 + 0)

	)

109 
	#SIOCGPPPVER
 (
SIOCDEVPRIVATE
 + 1)

	)

110 
	#SIOCGPPPCSTATS
 (
SIOCDEVPRIVATE
 + 2)

	)

112 #i‚de‡
i‰_mtu


113 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mëric


	)

	@linux/if_tr.h

12 #i‚de‡
_LINUX_IF_TR_H


13 
	#_LINUX_IF_TR_H


	)

15 
	~<asm/byã‹dî.h
>

17 
	#TR_ALEN
 6

	)

18 
	#TR_HLEN
 ((
åh_hdr
)+(
åŒc
))

	)

19 
	#AC
 0x10

	)

20 
	#LLC_FRAME
 0x40

	)

22 
	#EXTENDED_SAP
 0xAA

	)

23 
	#UI_CMD
 0x03

	)

25 
	såh_hdr
 {

26 
__u8
 
	mac
;

27 
__u8
 
	mfc
;

28 
__u8
 
	mdaddr
[
TR_ALEN
];

29 
__u8
 
	mßddr
[
TR_ALEN
];

30 
__be16
 
	mrcf
;

31 
__be16
 
	mr£g
[8];

34 
	såŒc
 {

35 
__u8
 
	mdßp
;

36 
__u8
 
	msßp
;

37 
__u8
 
	mŒc
;

38 
__u8
 
	m¥Ÿid
[3];

39 
__be16
 
	mëhîty≥
;

42 
	så_°©i°ics
 {

43 
	mrx_∑ckës
;

44 
	mtx_∑ckës
;

45 
	mrx_byãs
;

46 
	mtx_byãs
;

47 
	mrx_îr‹s
;

48 
	mtx_îr‹s
;

49 
	mrx_dr›≥d
;

50 
	mtx_dr›≥d
;

51 
	mmu…iˇ°
;

52 
	må™smô_cﬁlisi⁄
;

54 
	mlöe_îr‹s
;

55 
	möã∫Æ_îr‹s
;

56 
	mbur°_îr‹s
;

57 
	mA_C_îr‹s
;

58 
	mab‹t_dñimôîs
;

59 
	mlo°_‰ames
;

60 
	mªcv_c⁄ge°_cou¡
;

61 
	m‰ame_c›õd_îr‹s
;

62 
	m‰equícy_îr‹s
;

63 
	mtokí_îr‹s
;

64 
	mdummy1
;

67 
	#TR_RII
 0x80

	)

68 
	#TR_RCF_DIR_BIT
 0x80

	)

69 
	#TR_RCF_LEN_MASK
 0x1f00

	)

70 
	#TR_RCF_BROADCAST
 0x8000

	)

71 
	#TR_RCF_LIMITED_BROADCAST
 0xC000

	)

72 
	#TR_RCF_FRAME2K
 0x20

	)

73 
	#TR_RCF_BROADCAST_MASK
 0xC000

	)

74 
	#TR_MAXRIFLEN
 18

	)

	@linux/if_tun.h

12 #i‚de‡
__IF_TUN_H


13 
	#__IF_TUN_H


	)

15 
	#TUN_READQ_SIZE
 500

	)

17 
	#TUN_TUN_DEV
 0x0001

	)

18 
	#TUN_TAP_DEV
 0x0002

	)

19 
	#TUN_TYPE_MASK
 0x000f

	)

21 
	#TUN_FASYNC
 0x0010

	)

22 
	#TUN_NOCHECKSUM
 0x0020

	)

23 
	#TUN_NO_PI
 0x0040

	)

24 
	#TUN_ONE_QUEUE
 0x0080

	)

25 
	#TUN_PERSIST
 0x0100

	)

27 
	#TUNSETNOCSUM
 
	`_IOW
('T', 200, )

	)

28 
	#TUNSETDEBUG
 
	`_IOW
('T', 201, )

	)

29 
	#TUNSETIFF
 
	`_IOW
('T', 202, )

	)

30 
	#TUNSETPERSIST
 
	`_IOW
('T', 203, )

	)

31 
	#TUNSETOWNER
 
	`_IOW
('T', 204, )

	)

32 
	#TUNSETLINK
 
	`_IOW
('T', 205, )

	)

34 
	#IFF_TUN
 0x0001

	)

35 
	#IFF_TAP
 0x0002

	)

36 
	#IFF_NO_PI
 0x1000

	)

37 
	#IFF_ONE_QUEUE
 0x2000

	)

39 
	stun_pi
 {

40 
	mÊags
;

41 
	m¥Ÿo
;

43 
	#TUN_PKT_STRIP
 0x0001

	)

	@linux/if_vlan.h

12 #i‚de‡
_LINUX_IF_VLAN_H_


13 
	#_LINUX_IF_VLAN_H_


	)

15 
	evœn_io˘l_cmds
 {

16 
	mADD_VLAN_CMD
,

17 
	mDEL_VLAN_CMD
,

18 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

19 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

20 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

21 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

22 
	mSET_VLAN_NAME_TYPE_CMD
,

23 
	mSET_VLAN_FLAG_CMD
,

24 
	mGET_VLAN_REALDEV_NAME_CMD
,

25 
	mGET_VLAN_VID_CMD


28 
	evœn_«me_ty≥s
 {

29 
	mVLAN_NAME_TYPE_PLUS_VID
,

30 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

31 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

32 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

33 
	mVLAN_NAME_TYPE_HIGHEST


36 
	svœn_io˘l_¨gs
 {

37 
	mcmd
;

38 
	mdevi˚1
[24];

41 
	mdevi˚2
[24];

42 
	mVID
;

43 
	mskb_¥i‹ôy
;

44 
	m«me_ty≥
;

45 
	mböd_ty≥
;

46 
	mÊag
;

47 } 
	mu
;

49 
	mvœn_qos
;

	@linux/in.h

12 #i‚de‡
_LINUX_IN_H


13 
	#_LINUX_IN_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/sockë.h
>

19 
	mIPPROTO_IP
 = 0,

20 
	mIPPROTO_ICMP
 = 1,

21 
	mIPPROTO_IGMP
 = 2,

22 
	mIPPROTO_IPIP
 = 4,

23 
	mIPPROTO_TCP
 = 6,

24 
	mIPPROTO_EGP
 = 8,

25 
	mIPPROTO_PUP
 = 12,

26 
	mIPPROTO_UDP
 = 17,

27 
	mIPPROTO_IDP
 = 22,

28 
	mIPPROTO_DCCP
 = 33,

29 
	mIPPROTO_RSVP
 = 46,

30 
	mIPPROTO_GRE
 = 47,

32 
	mIPPROTO_IPV6
 = 41,

34 
	mIPPROTO_ESP
 = 50,

35 
	mIPPROTO_AH
 = 51,

36 
	mIPPROTO_PIM
 = 103,

38 
	mIPPROTO_COMP
 = 108,

39 
	mIPPROTO_SCTP
 = 132,

41 
	mIPPROTO_RAW
 = 255,

42 
	mIPPROTO_MAX


45 
	sö_addr
 {

46 
__u32
 
	ms_addr
;

49 
	#IP_TOS
 1

	)

50 
	#IP_TTL
 2

	)

51 
	#IP_HDRINCL
 3

	)

52 
	#IP_OPTIONS
 4

	)

53 
	#IP_ROUTER_ALERT
 5

	)

54 
	#IP_RECVOPTS
 6

	)

55 
	#IP_RETOPTS
 7

	)

56 
	#IP_PKTINFO
 8

	)

57 
	#IP_PKTOPTIONS
 9

	)

58 
	#IP_MTU_DISCOVER
 10

	)

59 
	#IP_RECVERR
 11

	)

60 
	#IP_RECVTTL
 12

	)

61 
	#IP_RECVTOS
 13

	)

62 
	#IP_MTU
 14

	)

63 
	#IP_FREEBIND
 15

	)

64 
	#IP_IPSEC_POLICY
 16

	)

65 
	#IP_XFRM_POLICY
 17

	)

66 
	#IP_PASSSEC
 18

	)

68 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

70 
	#IP_PMTUDISC_DONT
 0

	)

71 
	#IP_PMTUDISC_WANT
 1

	)

72 
	#IP_PMTUDISC_DO
 2

	)

74 
	#IP_MULTICAST_IF
 32

	)

75 
	#IP_MULTICAST_TTL
 33

	)

76 
	#IP_MULTICAST_LOOP
 34

	)

77 
	#IP_ADD_MEMBERSHIP
 35

	)

78 
	#IP_DROP_MEMBERSHIP
 36

	)

79 
	#IP_UNBLOCK_SOURCE
 37

	)

80 
	#IP_BLOCK_SOURCE
 38

	)

81 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

82 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

83 
	#IP_MSFILTER
 41

	)

84 
	#MCAST_JOIN_GROUP
 42

	)

85 
	#MCAST_BLOCK_SOURCE
 43

	)

86 
	#MCAST_UNBLOCK_SOURCE
 44

	)

87 
	#MCAST_LEAVE_GROUP
 45

	)

88 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

89 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

90 
	#MCAST_MSFILTER
 48

	)

92 
	#MCAST_EXCLUDE
 0

	)

93 
	#MCAST_INCLUDE
 1

	)

95 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

96 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

98 
	sù_mªq


100 
ö_addr
 
	mimr_mu…üddr
;

101 
ö_addr
 
	mimr_öãrÁ˚
;

104 
	sù_mªqn


106 
ö_addr
 
	mimr_mu…üddr
;

107 
ö_addr
 
	mimr_addªss
;

108 
	mimr_ifödex
;

111 
	sù_mªq_sour˚
 {

112 
__u32
 
	mimr_mu…üddr
;

113 
__u32
 
	mimr_öãrÁ˚
;

114 
__u32
 
	mimr_sour˚addr
;

117 
	sù_msfûãr
 {

118 
__u32
 
	mimsf_mu…üddr
;

119 
__u32
 
	mimsf_öãrÁ˚
;

120 
__u32
 
	mimsf_fmode
;

121 
__u32
 
	mimsf_num§c
;

122 
__u32
 
	mimsf_¶i°
[1];

125 
	#IP_MSFILTER_SIZE
(
num§c
Ë((
ù_msfûãr
Ë- (
__u32
Ë+ (num§cË* (__u32))

	)

127 
	sgroup_ªq


129 
__u32
 
	mgr_öãrÁ˚
;

130 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

133 
	sgroup_sour˚_ªq


135 
__u32
 
	mg§_öãrÁ˚
;

136 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

137 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

140 
	sgroup_fûãr


142 
__u32
 
	mgf_öãrÁ˚
;

143 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

144 
__u32
 
	mgf_fmode
;

145 
__u32
 
	mgf_num§c
;

146 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

149 
	#GROUP_FILTER_SIZE
(
num§c
Ë((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
Ë+ (num§cË* (__kî√l_sockaddr_°‹age))

	)

151 
	sö_pktöfo


153 
	mùi_ifödex
;

154 
ö_addr
 
	mùi_•ec_d°
;

155 
ö_addr
 
	mùi_addr
;

158 
	#__SOCK_SIZE__
 16

	)

159 
	ssockaddr_ö
 {

160 
ß_Ámûy_t
 
	msö_Ámûy
;

161 
	msö_p‹t
;

162 
ö_addr
 
	msö_addr
;

164 
	m__∑d
[
__SOCK_SIZE__
 - () -

165 (Ë- (
ö_addr
)];

167 
	#sö_zîo
 
__∑d


	)

169 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

170 
	#IN_CLASSA_NET
 0xff000000

	)

171 
	#IN_CLASSA_NSHIFT
 24

	)

172 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

173 
	#IN_CLASSA_MAX
 128

	)

175 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

176 
	#IN_CLASSB_NET
 0xffff0000

	)

177 
	#IN_CLASSB_NSHIFT
 16

	)

178 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

179 
	#IN_CLASSB_MAX
 65536

	)

181 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

182 
	#IN_CLASSC_NET
 0xffffff00

	)

183 
	#IN_CLASSC_NSHIFT
 8

	)

184 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

186 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

187 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

188 
	#IN_MULTICAST_NET
 0xF0000000

	)

190 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

191 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

193 
	#INADDR_ANY
 ((Ë0x00000000)

	)

195 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

197 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

199 
	#IN_LOOPBACKNET
 127

	)

201 
	#INADDR_LOOPBACK
 0x7f000001

	)

202 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

204 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

205 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

206 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

209 
	~<asm/byã‹dî.h
>

	@linux/in6.h

12 #i‚de‡
_LINUX_IN6_H


13 
	#_LINUX_IN6_H


	)

15 
	~<löux/ty≥s.h
>

17 
	sö6_addr


21 
__u8
 
	mu6_addr8
[16];

22 
__u16
 
	mu6_addr16
[8];

23 
__u32
 
	mu6_addr32
[4];

24 } 
	mö6_u
;

25 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

26 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

27 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

30 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

32 
	ssockaddr_ö6
 {

33 
	msö6_Ámûy
;

34 
__u16
 
	msö6_p‹t
;

35 
__u32
 
	msö6_Êowöfo
;

36 
ö6_addr
 
	msö6_addr
;

37 
__u32
 
	msö6_sc›e_id
;

40 
	sùv6_mªq
 {

42 
ö6_addr
 
	mùv6mr_mu…üddr
;

44 
	mùv6mr_ifödex
;

47 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

49 
	sö6_Êowœbñ_ªq


51 
ö6_addr
 
	mÊr_d°
;

52 
__u32
 
	mÊr_œbñ
;

53 
__u8
 
	mÊr_a˘i⁄
;

54 
__u8
 
	mÊr_sh¨e
;

55 
__u16
 
	mÊr_Êags
;

56 
__u16
 
	mÊr_expúes
;

57 
__u16
 
	mÊr_lögî
;

58 
__u32
 
	m__Êr_∑d
;

62 
	#IPV6_FL_A_GET
 0

	)

63 
	#IPV6_FL_A_PUT
 1

	)

64 
	#IPV6_FL_A_RENEW
 2

	)

66 
	#IPV6_FL_F_CREATE
 1

	)

67 
	#IPV6_FL_F_EXCL
 2

	)

69 
	#IPV6_FL_S_NONE
 0

	)

70 
	#IPV6_FL_S_EXCL
 1

	)

71 
	#IPV6_FL_S_PROCESS
 2

	)

72 
	#IPV6_FL_S_USER
 3

	)

73 
	#IPV6_FL_S_ANY
 255

	)

75 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

76 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

78 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

79 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

80 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

81 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

82 
	#IPV6_PRIORITY_BULK
 0x0400

	)

83 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

84 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

85 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

86 
	#IPV6_PRIORITY_8
 0x0800

	)

87 
	#IPV6_PRIORITY_9
 0x0900

	)

88 
	#IPV6_PRIORITY_10
 0x0a00

	)

89 
	#IPV6_PRIORITY_11
 0x0b00

	)

90 
	#IPV6_PRIORITY_12
 0x0c00

	)

91 
	#IPV6_PRIORITY_13
 0x0d00

	)

92 
	#IPV6_PRIORITY_14
 0x0e00

	)

93 
	#IPV6_PRIORITY_15
 0x0f00

	)

95 
	#IPPROTO_HOPOPTS
 0

	)

96 
	#IPPROTO_ROUTING
 43

	)

97 
	#IPPROTO_FRAGMENT
 44

	)

98 
	#IPPROTO_ICMPV6
 58

	)

99 
	#IPPROTO_NONE
 59

	)

100 
	#IPPROTO_DSTOPTS
 60

	)

102 
	#IPV6_TLV_PAD0
 0

	)

103 
	#IPV6_TLV_PADN
 1

	)

104 
	#IPV6_TLV_ROUTERALERT
 5

	)

105 
	#IPV6_TLV_JUMBO
 194

	)

107 
	#IPV6_ADDRFORM
 1

	)

108 
	#IPV6_2292PKTINFO
 2

	)

109 
	#IPV6_2292HOPOPTS
 3

	)

110 
	#IPV6_2292DSTOPTS
 4

	)

111 
	#IPV6_2292RTHDR
 5

	)

112 
	#IPV6_2292PKTOPTIONS
 6

	)

113 
	#IPV6_CHECKSUM
 7

	)

114 
	#IPV6_2292HOPLIMIT
 8

	)

115 
	#IPV6_NEXTHOP
 9

	)

116 
	#IPV6_AUTHHDR
 10

	)

117 
	#IPV6_FLOWINFO
 11

	)

119 
	#IPV6_UNICAST_HOPS
 16

	)

120 
	#IPV6_MULTICAST_IF
 17

	)

121 
	#IPV6_MULTICAST_HOPS
 18

	)

122 
	#IPV6_MULTICAST_LOOP
 19

	)

123 
	#IPV6_ADD_MEMBERSHIP
 20

	)

124 
	#IPV6_DROP_MEMBERSHIP
 21

	)

125 
	#IPV6_ROUTER_ALERT
 22

	)

126 
	#IPV6_MTU_DISCOVER
 23

	)

127 
	#IPV6_MTU
 24

	)

128 
	#IPV6_RECVERR
 25

	)

129 
	#IPV6_V6ONLY
 26

	)

130 
	#IPV6_JOIN_ANYCAST
 27

	)

131 
	#IPV6_LEAVE_ANYCAST
 28

	)

133 
	#IPV6_PMTUDISC_DONT
 0

	)

134 
	#IPV6_PMTUDISC_WANT
 1

	)

135 
	#IPV6_PMTUDISC_DO
 2

	)

137 
	#IPV6_FLOWLABEL_MGR
 32

	)

138 
	#IPV6_FLOWINFO_SEND
 33

	)

140 
	#IPV6_IPSEC_POLICY
 34

	)

141 
	#IPV6_XFRM_POLICY
 35

	)

143 
	#IPV6_RECVPKTINFO
 49

	)

144 
	#IPV6_PKTINFO
 50

	)

145 
	#IPV6_RECVHOPLIMIT
 51

	)

146 
	#IPV6_HOPLIMIT
 52

	)

147 
	#IPV6_RECVHOPOPTS
 53

	)

148 
	#IPV6_HOPOPTS
 54

	)

149 
	#IPV6_RTHDRDSTOPTS
 55

	)

150 
	#IPV6_RECVRTHDR
 56

	)

151 
	#IPV6_RTHDR
 57

	)

152 
	#IPV6_RECVDSTOPTS
 58

	)

153 
	#IPV6_DSTOPTS
 59

	)

155 
	#IPV6_RECVTCLASS
 66

	)

156 
	#IPV6_TCLASS
 67

	)

	@linux/init.h

12 #i‚de‡
_LINUX_INIT_H


13 
	#_LINUX_INIT_H


	)

15 
	~<löux/compûî.h
>

17 
	#__öô
 
	`__©åibuã__
 ((
	`__£˘i⁄__
 (".öô.ãxt")))

	)

18 
	#__öôd©a
 
	`__©åibuã__
 ((
	`__£˘i⁄__
 (".öô.d©a")))

	)

19 
	#__exôd©a
 
	`__©åibuã__
 ((
	`__£˘i⁄__
(".exô.d©a")))

	)

20 
	#__exô_ˇŒ
 
__©åibuã_u£d__
 
	`__©åibuã__
 ((
	`__£˘i⁄__
 (".exôˇŒ.exô")))

	)

22 #ifde‡
MODULE


23 
	#__exô
 
	`__©åibuã__
 ((
	`__£˘i⁄__
(".exô.ãxt")))

	)

25 
	#__exô
 
__©åibuã_u£d__
 
	`__©åibuã__
 ((
	`__£˘i⁄__
(".exô.ãxt")))

	)

28 
	#__INIT
 .
£˘i⁄
 ".öô.ãxt","ax"

	)

29 
	#__FINIT
 .
¥evious


	)

30 
	#__INITDATA
 .
£˘i⁄
 ".öô.d©a","aw"

	)

32 #i‚de‡
__ASSEMBLY__


34 (*
	töôˇŒ_t
)();

35 (*
	texôˇŒ_t
)();

39 #i‚de‡
MODULE


41 #i‚de‡
__ASSEMBLY__


43 
	#__deföe_öôˇŒ
(
Àvñ
,
‚
Ë
öôˇŒ_t
 
__öôˇŒ_
##‚ 
__©åibuã_u£d__
 
	`__©åibuã__
((
	`__£˘i⁄__
(".öôˇŒ"Üevñ ".öô"))Ë
	)
fn

45 
	#c‹e_öôˇŒ
(
‚
Ë
	`__deföe_öôˇŒ
("1",‚)

	)

46 
	#po°c‹e_öôˇŒ
(
‚
Ë
	`__deföe_öôˇŒ
("2",‚)

	)

47 
	#¨ch_öôˇŒ
(
‚
Ë
	`__deföe_öôˇŒ
("3",‚)

	)

48 
	#subsys_öôˇŒ
(
‚
Ë
	`__deföe_öôˇŒ
("4",‚)

	)

49 
	#fs_öôˇŒ
(
‚
Ë
	`__deföe_öôˇŒ
("5",‚)

	)

50 
	#devi˚_öôˇŒ
(
‚
Ë
	`__deföe_öôˇŒ
("6",‚)

	)

51 
	#œã_öôˇŒ
(
‚
Ë
	`__deföe_öôˇŒ
("7",‚)

	)

53 
	#__öôˇŒ
(
‚
Ë
	`devi˚_öôˇŒ
(‚)

	)

55 
	#__exôˇŒ
(
‚
Ë
exôˇŒ_t
 
__exôˇŒ_
##‚ 
__exô_ˇŒ
 = 
	)
fn

57 
	#c⁄sﬁe_öôˇŒ
(
‚
Ë
öôˇŒ_t
 
__öôˇŒ_
##‚ 
__©åibuã_u£d__
 
	`__©åibuã__
((
	`__£˘i⁄__
(".c⁄_öôˇŒ.öô")))=
	)
fn

59 
	#£curôy_öôˇŒ
(
‚
Ë
öôˇŒ_t
 
__öôˇŒ_
##‚ 
__©åibuã_u£d__
 
	`__©åibuã__
((
	`__£˘i⁄__
(".£curôy_öôˇŒ.öô"))Ë
	)
fn

61 
	sobs_kî√l_∑øm
 {

62 c⁄° *
°r
;

63 (*
£tup_func
)(*);

64 
óæy
;

67 
	#__£tup_∑øm
(
°r
, 
unique_id
, 
‚
, 
óæy
Ë
__£tup_°r_
##unique_id[] 
__öôd©a
 = så; 
obs_kî√l_∑øm
 
__£tup_
##unique_id 
__©åibuã_u£d__
 
	`__©åibuã__
((
	`__£˘i⁄__
(".öô.£tup"))Ë__©åibuã__((
	`Æig√d
((())))Ë{ __£tup_°r_##unique_id, fn,É¨ly 
	}

	)
}

69 
	#__£tup_nuŒ_∑øm
(
°r
, 
unique_id
Ë
	`__£tup_∑øm
(°r, unique_id, 
NULL
, 0)

	)

71 
	#__£tup
(
°r
, 
‚
Ë
	`__£tup_∑øm
(°r, fn, fn, 0)

	)

73 
	#__obsﬁëe_£tup
(
°r
Ë
	`__£tup_nuŒ_∑øm
(°r, 
__LINE__
)

	)

75 
	#óæy_∑øm
(
°r
, 
‚
Ë
	`__£tup_∑øm
(°r, fn, fn, 1)

	)

79 
	#moduÀ_öô
(
x
Ë
	`__öôˇŒ
(x);

	)

81 
	#moduÀ_exô
(
x
Ë
	`__exôˇŒ
(x);

	)

85 
	#c‹e_öôˇŒ
(
‚
Ë
	`moduÀ_öô
(‚)

	)

86 
	#po°c‹e_öôˇŒ
(
‚
Ë
	`moduÀ_öô
(‚)

	)

87 
	#¨ch_öôˇŒ
(
‚
Ë
	`moduÀ_öô
(‚)

	)

88 
	#subsys_öôˇŒ
(
‚
Ë
	`moduÀ_öô
(‚)

	)

89 
	#fs_öôˇŒ
(
‚
Ë
	`moduÀ_öô
(‚)

	)

90 
	#devi˚_öôˇŒ
(
‚
Ë
	`moduÀ_öô
(‚)

	)

91 
	#œã_öôˇŒ
(
‚
Ë
	`moduÀ_öô
(‚)

	)

93 
	#£curôy_öôˇŒ
(
‚
Ë
	`moduÀ_öô
(‚)

	)

95 
	#moduÀ_öô
(
öô‚
Ë
ölöe
 
öôˇŒ_t
 
	`__öôã°
(Ë{  inô‚; } 
	`öô_moduÀ
(Ë
	`__©åibuã__
((
	`Æüs
(#öô‚)));

	)

97 
	#moduÀ_exô
(
exô‚
Ë
ölöe
 
exôˇŒ_t
 
	`__exôã°
(Ë{ Éxô‚; } 
	`˛ónup_moduÀ
(Ë
	`__©åibuã__
((
	`Æüs
(#exô‚)));

	)

99 
	#__£tup_∑øm
(
°r
, 
unique_id
, 
‚
)

	)

100 
	#__£tup_nuŒ_∑øm
(
°r
, 
unique_id
)

	)

101 
	#__£tup
(
°r
, 
func
)

	)

102 
	#__obsﬁëe_£tup
(
°r
)

	)

105 
	#__noßved©a
 
	`__©åibuã__
 ((
	`__£˘i⁄__
 (".d©a.noßve")))

	)

107 
	#__öô_‹_moduÀ
 
__öô


	)

108 
	#__öôd©a_‹_moduÀ
 
__öôd©a


	)

110 
	#__devöô
 
__öô


	)

111 
	#__devöôd©a
 
__öôd©a


	)

112 
	#__devexô
 
__exô


	)

113 
	#__devexôd©a
 
__exôd©a


	)

115 
	#__˝uöô
 
__öô


	)

116 
	#__˝uöôd©a
 
__öôd©a


	)

117 
	#__˝uexô
 
__exô


	)

118 
	#__˝uexôd©a
 
__exôd©a


	)

120 
	#__memöô
 
__öô


	)

121 
	#__memöôd©a
 
__öôd©a


	)

122 
	#__memexô
 
__exô


	)

123 
	#__memexôd©a
 
__exôd©a


	)

125 #ifde‡
MODULE


126 
	#__devexô_p
(
x
Ë
	)
x

128 
	#__devexô_p
(
x
Ë
NULL


	)

131 #ifde‡
MODULE


132 
	#__exô_p
(
x
Ë
	)
x

134 
	#__exô_p
(
x
Ë
NULL


	)

	@linux/inotify.h

12 #i‚de‡
_LINUX_INOTIFY_H


13 
	#_LINUX_INOTIFY_H


	)

15 
	~<löux/ty≥s.h
>

17 
	söŸify_evít
 {

18 
__s32
 
	mwd
;

19 
__u32
 
	mmask
;

20 
__u32
 
	mcookõ
;

21 
__u32
 
	mÀn
;

22 
	m«me
[0];

25 
	#IN_ACCESS
 0x00000001

	)

26 
	#IN_MODIFY
 0x00000002

	)

27 
	#IN_ATTRIB
 0x00000004

	)

28 
	#IN_CLOSE_WRITE
 0x00000008

	)

29 
	#IN_CLOSE_NOWRITE
 0x00000010

	)

30 
	#IN_OPEN
 0x00000020

	)

31 
	#IN_MOVED_FROM
 0x00000040

	)

32 
	#IN_MOVED_TO
 0x00000080

	)

33 
	#IN_CREATE
 0x00000100

	)

34 
	#IN_DELETE
 0x00000200

	)

35 
	#IN_DELETE_SELF
 0x00000400

	)

36 
	#IN_MOVE_SELF
 0x00000800

	)

38 
	#IN_UNMOUNT
 0x00002000

	)

39 
	#IN_Q_OVERFLOW
 0x00004000

	)

40 
	#IN_IGNORED
 0x00008000

	)

42 
	#IN_CLOSE
 (
IN_CLOSE_WRITE
 | 
IN_CLOSE_NOWRITE
)

	)

43 
	#IN_MOVE
 (
IN_MOVED_FROM
 | 
IN_MOVED_TO
)

	)

45 
	#IN_ONLYDIR
 0x01000000

	)

46 
	#IN_DONT_FOLLOW
 0x02000000

	)

47 
	#IN_MASK_ADD
 0x20000000

	)

48 
	#IN_ISDIR
 0x40000000

	)

49 
	#IN_ONESHOT
 0x80000000

	)

51 
	#IN_ALL_EVENTS
 (
IN_ACCESS
 | 
IN_MODIFY
 | 
IN_ATTRIB
 | 
IN_CLOSE_WRITE
 | 
IN_CLOSE_NOWRITE
 | 
IN_OPEN
 | 
IN_MOVED_FROM
 | 
IN_MOVED_TO
 | 
IN_DELETE
 | 
IN_CREATE
 | 
IN_DELETE_SELF
 | 
IN_MOVE_SELF
)

	)

	@linux/input.h

12 #i‚de‡
_INPUT_H


13 
	#_INPUT_H


	)

15 
	~<sys/time.h
>

16 
	~<sys/io˘l.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<asm/ty≥s.h
>

20 
	söput_evít
 {

21 
timevÆ
 
	mtime
;

22 
__u16
 
	mty≥
;

23 
__u16
 
	mcode
;

24 
__s32
 
	mvÆue
;

27 
	#EV_VERSION
 0x010000

	)

29 
	söput_id
 {

30 
__u16
 
	mbu°y≥
;

31 
__u16
 
	mvíd‹
;

32 
__u16
 
	m¥odu˘
;

33 
__u16
 
	mvîsi⁄
;

36 
	söput_absöfo
 {

37 
__s32
 
	mvÆue
;

38 
__s32
 
	mmöimum
;

39 
__s32
 
	mmaximum
;

40 
__s32
 
	mfuzz
;

41 
__s32
 
	mÊ©
;

44 
	#EVIOCGVERSION
 
	`_IOR
('E', 0x01, )

	)

45 
	#EVIOCGID
 
	`_IOR
('E', 0x02, 
öput_id
)

	)

46 
	#EVIOCGREP
 
	`_IOR
('E', 0x03, [2])

	)

47 
	#EVIOCSREP
 
	`_IOW
('E', 0x03, [2])

	)

48 
	#EVIOCGKEYCODE
 
	`_IOR
('E', 0x04, [2])

	)

49 
	#EVIOCSKEYCODE
 
	`_IOW
('E', 0x04, [2])

	)

51 
	#EVIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x06,Üí)

	)

52 
	#EVIOCGPHYS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x07,Üí)

	)

53 
	#EVIOCGUNIQ
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x08,Üí)

	)

55 
	#EVIOCGKEY
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x18,Üí)

	)

56 
	#EVIOCGLED
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x19,Üí)

	)

57 
	#EVIOCGSND
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1a,Üí)

	)

58 
	#EVIOCGSW
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1b,Üí)

	)

60 
	#EVIOCGBIT
(
ev
,
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x20 +Év,Üí)

	)

61 
	#EVIOCGABS
(
abs
Ë
	`_IOR
('E', 0x40 +ábs, 
öput_absöfo
)

	)

62 
	#EVIOCSABS
(
abs
Ë
	`_IOW
('E', 0xc0 +ábs, 
öput_absöfo
)

	)

64 
	#EVIOCSFF
 
	`_IOC
(
_IOC_WRITE
, 'E', 0x80, (
ff_ef„˘
))

	)

65 
	#EVIOCRMFF
 
	`_IOW
('E', 0x81, )

	)

66 
	#EVIOCGEFFECTS
 
	`_IOR
('E', 0x84, )

	)

68 
	#EVIOCGRAB
 
	`_IOW
('E', 0x90, )

	)

70 
	#EV_SYN
 0x00

	)

71 
	#EV_KEY
 0x01

	)

72 
	#EV_REL
 0x02

	)

73 
	#EV_ABS
 0x03

	)

74 
	#EV_MSC
 0x04

	)

75 
	#EV_SW
 0x05

	)

76 
	#EV_LED
 0x11

	)

77 
	#EV_SND
 0x12

	)

78 
	#EV_REP
 0x14

	)

79 
	#EV_FF
 0x15

	)

80 
	#EV_PWR
 0x16

	)

81 
	#EV_FF_STATUS
 0x17

	)

82 
	#EV_MAX
 0x1f

	)

84 
	#SYN_REPORT
 0

	)

85 
	#SYN_CONFIG
 1

	)

87 
	#KEY_RESERVED
 0

	)

88 
	#KEY_ESC
 1

	)

89 
	#KEY_1
 2

	)

90 
	#KEY_2
 3

	)

91 
	#KEY_3
 4

	)

92 
	#KEY_4
 5

	)

93 
	#KEY_5
 6

	)

94 
	#KEY_6
 7

	)

95 
	#KEY_7
 8

	)

96 
	#KEY_8
 9

	)

97 
	#KEY_9
 10

	)

98 
	#KEY_0
 11

	)

99 
	#KEY_MINUS
 12

	)

100 
	#KEY_EQUAL
 13

	)

101 
	#KEY_BACKSPACE
 14

	)

102 
	#KEY_TAB
 15

	)

103 
	#KEY_Q
 16

	)

104 
	#KEY_W
 17

	)

105 
	#KEY_E
 18

	)

106 
	#KEY_R
 19

	)

107 
	#KEY_T
 20

	)

108 
	#KEY_Y
 21

	)

109 
	#KEY_U
 22

	)

110 
	#KEY_I
 23

	)

111 
	#KEY_O
 24

	)

112 
	#KEY_P
 25

	)

113 
	#KEY_LEFTBRACE
 26

	)

114 
	#KEY_RIGHTBRACE
 27

	)

115 
	#KEY_ENTER
 28

	)

116 
	#KEY_LEFTCTRL
 29

	)

117 
	#KEY_A
 30

	)

118 
	#KEY_S
 31

	)

119 
	#KEY_D
 32

	)

120 
	#KEY_F
 33

	)

121 
	#KEY_G
 34

	)

122 
	#KEY_H
 35

	)

123 
	#KEY_J
 36

	)

124 
	#KEY_K
 37

	)

125 
	#KEY_L
 38

	)

126 
	#KEY_SEMICOLON
 39

	)

127 
	#KEY_APOSTROPHE
 40

	)

128 
	#KEY_GRAVE
 41

	)

129 
	#KEY_LEFTSHIFT
 42

	)

130 
	#KEY_BACKSLASH
 43

	)

131 
	#KEY_Z
 44

	)

132 
	#KEY_X
 45

	)

133 
	#KEY_C
 46

	)

134 
	#KEY_V
 47

	)

135 
	#KEY_B
 48

	)

136 
	#KEY_N
 49

	)

137 
	#KEY_M
 50

	)

138 
	#KEY_COMMA
 51

	)

139 
	#KEY_DOT
 52

	)

140 
	#KEY_SLASH
 53

	)

141 
	#KEY_RIGHTSHIFT
 54

	)

142 
	#KEY_KPASTERISK
 55

	)

143 
	#KEY_LEFTALT
 56

	)

144 
	#KEY_SPACE
 57

	)

145 
	#KEY_CAPSLOCK
 58

	)

146 
	#KEY_F1
 59

	)

147 
	#KEY_F2
 60

	)

148 
	#KEY_F3
 61

	)

149 
	#KEY_F4
 62

	)

150 
	#KEY_F5
 63

	)

151 
	#KEY_F6
 64

	)

152 
	#KEY_F7
 65

	)

153 
	#KEY_F8
 66

	)

154 
	#KEY_F9
 67

	)

155 
	#KEY_F10
 68

	)

156 
	#KEY_NUMLOCK
 69

	)

157 
	#KEY_SCROLLLOCK
 70

	)

158 
	#KEY_KP7
 71

	)

159 
	#KEY_KP8
 72

	)

160 
	#KEY_KP9
 73

	)

161 
	#KEY_KPMINUS
 74

	)

162 
	#KEY_KP4
 75

	)

163 
	#KEY_KP5
 76

	)

164 
	#KEY_KP6
 77

	)

165 
	#KEY_KPPLUS
 78

	)

166 
	#KEY_KP1
 79

	)

167 
	#KEY_KP2
 80

	)

168 
	#KEY_KP3
 81

	)

169 
	#KEY_KP0
 82

	)

170 
	#KEY_KPDOT
 83

	)

172 
	#KEY_ZENKAKUHANKAKU
 85

	)

173 
	#KEY_102ND
 86

	)

174 
	#KEY_F11
 87

	)

175 
	#KEY_F12
 88

	)

176 
	#KEY_RO
 89

	)

177 
	#KEY_KATAKANA
 90

	)

178 
	#KEY_HIRAGANA
 91

	)

179 
	#KEY_HENKAN
 92

	)

180 
	#KEY_KATAKANAHIRAGANA
 93

	)

181 
	#KEY_MUHENKAN
 94

	)

182 
	#KEY_KPJPCOMMA
 95

	)

183 
	#KEY_KPENTER
 96

	)

184 
	#KEY_RIGHTCTRL
 97

	)

185 
	#KEY_KPSLASH
 98

	)

186 
	#KEY_SYSRQ
 99

	)

187 
	#KEY_RIGHTALT
 100

	)

188 
	#KEY_LINEFEED
 101

	)

189 
	#KEY_HOME
 102

	)

190 
	#KEY_UP
 103

	)

191 
	#KEY_PAGEUP
 104

	)

192 
	#KEY_LEFT
 105

	)

193 
	#KEY_RIGHT
 106

	)

194 
	#KEY_END
 107

	)

195 
	#KEY_DOWN
 108

	)

196 
	#KEY_PAGEDOWN
 109

	)

197 
	#KEY_INSERT
 110

	)

198 
	#KEY_DELETE
 111

	)

199 
	#KEY_MACRO
 112

	)

200 
	#KEY_MUTE
 113

	)

201 
	#KEY_VOLUMEDOWN
 114

	)

202 
	#KEY_VOLUMEUP
 115

	)

203 
	#KEY_POWER
 116

	)

204 
	#KEY_KPEQUAL
 117

	)

205 
	#KEY_KPPLUSMINUS
 118

	)

206 
	#KEY_PAUSE
 119

	)

208 
	#KEY_KPCOMMA
 121

	)

209 
	#KEY_HANGEUL
 122

	)

210 
	#KEY_HANGUEL
 
KEY_HANGEUL


	)

211 
	#KEY_HANJA
 123

	)

212 
	#KEY_YEN
 124

	)

213 
	#KEY_LEFTMETA
 125

	)

214 
	#KEY_RIGHTMETA
 126

	)

215 
	#KEY_COMPOSE
 127

	)

217 
	#KEY_STOP
 128

	)

218 
	#KEY_AGAIN
 129

	)

219 
	#KEY_PROPS
 130

	)

220 
	#KEY_UNDO
 131

	)

221 
	#KEY_FRONT
 132

	)

222 
	#KEY_COPY
 133

	)

223 
	#KEY_OPEN
 134

	)

224 
	#KEY_PASTE
 135

	)

225 
	#KEY_FIND
 136

	)

226 
	#KEY_CUT
 137

	)

227 
	#KEY_HELP
 138

	)

228 
	#KEY_MENU
 139

	)

229 
	#KEY_CALC
 140

	)

230 
	#KEY_SETUP
 141

	)

231 
	#KEY_SLEEP
 142

	)

232 
	#KEY_WAKEUP
 143

	)

233 
	#KEY_FILE
 144

	)

234 
	#KEY_SENDFILE
 145

	)

235 
	#KEY_DELETEFILE
 146

	)

236 
	#KEY_XFER
 147

	)

237 
	#KEY_PROG1
 148

	)

238 
	#KEY_PROG2
 149

	)

239 
	#KEY_WWW
 150

	)

240 
	#KEY_MSDOS
 151

	)

241 
	#KEY_COFFEE
 152

	)

242 
	#KEY_DIRECTION
 153

	)

243 
	#KEY_CYCLEWINDOWS
 154

	)

244 
	#KEY_MAIL
 155

	)

245 
	#KEY_BOOKMARKS
 156

	)

246 
	#KEY_COMPUTER
 157

	)

247 
	#KEY_BACK
 158

	)

248 
	#KEY_FORWARD
 159

	)

249 
	#KEY_CLOSECD
 160

	)

250 
	#KEY_EJECTCD
 161

	)

251 
	#KEY_EJECTCLOSECD
 162

	)

252 
	#KEY_NEXTSONG
 163

	)

253 
	#KEY_PLAYPAUSE
 164

	)

254 
	#KEY_PREVIOUSSONG
 165

	)

255 
	#KEY_STOPCD
 166

	)

256 
	#KEY_RECORD
 167

	)

257 
	#KEY_REWIND
 168

	)

258 
	#KEY_PHONE
 169

	)

259 
	#KEY_ISO
 170

	)

260 
	#KEY_CONFIG
 171

	)

261 
	#KEY_HOMEPAGE
 172

	)

262 
	#KEY_REFRESH
 173

	)

263 
	#KEY_EXIT
 174

	)

264 
	#KEY_MOVE
 175

	)

265 
	#KEY_EDIT
 176

	)

266 
	#KEY_SCROLLUP
 177

	)

267 
	#KEY_SCROLLDOWN
 178

	)

268 
	#KEY_KPLEFTPAREN
 179

	)

269 
	#KEY_KPRIGHTPAREN
 180

	)

270 
	#KEY_NEW
 181

	)

271 
	#KEY_REDO
 182

	)

273 
	#KEY_F13
 183

	)

274 
	#KEY_F14
 184

	)

275 
	#KEY_F15
 185

	)

276 
	#KEY_F16
 186

	)

277 
	#KEY_F17
 187

	)

278 
	#KEY_F18
 188

	)

279 
	#KEY_F19
 189

	)

280 
	#KEY_F20
 190

	)

281 
	#KEY_F21
 191

	)

282 
	#KEY_F22
 192

	)

283 
	#KEY_F23
 193

	)

284 
	#KEY_F24
 194

	)

286 
	#KEY_PLAYCD
 200

	)

287 
	#KEY_PAUSECD
 201

	)

288 
	#KEY_PROG3
 202

	)

289 
	#KEY_PROG4
 203

	)

290 
	#KEY_SUSPEND
 205

	)

291 
	#KEY_CLOSE
 206

	)

292 
	#KEY_PLAY
 207

	)

293 
	#KEY_FASTFORWARD
 208

	)

294 
	#KEY_BASSBOOST
 209

	)

295 
	#KEY_PRINT
 210

	)

296 
	#KEY_HP
 211

	)

297 
	#KEY_CAMERA
 212

	)

298 
	#KEY_SOUND
 213

	)

299 
	#KEY_QUESTION
 214

	)

300 
	#KEY_EMAIL
 215

	)

301 
	#KEY_CHAT
 216

	)

302 
	#KEY_SEARCH
 217

	)

303 
	#KEY_CONNECT
 218

	)

304 
	#KEY_FINANCE
 219

	)

305 
	#KEY_SPORT
 220

	)

306 
	#KEY_SHOP
 221

	)

307 
	#KEY_ALTERASE
 222

	)

308 
	#KEY_CANCEL
 223

	)

309 
	#KEY_BRIGHTNESSDOWN
 224

	)

310 
	#KEY_BRIGHTNESSUP
 225

	)

311 
	#KEY_MEDIA
 226

	)

313 
	#KEY_STAR
 227

	)

314 
	#KEY_SHARP
 228

	)

315 
	#KEY_SOFT1
 229

	)

316 
	#KEY_SOFT2
 230

	)

317 
	#KEY_SEND
 231

	)

318 
	#KEY_CENTER
 232

	)

319 
	#KEY_HEADSETHOOK
 233

	)

320 
	#KEY_0_5
 234

	)

321 
	#KEY_2_5
 235

	)

323 
	#KEY_SWITCHVIDEOMODE
 236

	)

324 
	#KEY_KBDILLUMTOGGLE
 237

	)

325 
	#KEY_KBDILLUMDOWN
 238

	)

326 
	#KEY_KBDILLUMUP
 239

	)

328 
	#KEY_SEND
 231

	)

329 
	#KEY_REPLY
 232

	)

330 
	#KEY_FORWARDMAIL
 233

	)

331 
	#KEY_SAVE
 234

	)

332 
	#KEY_DOCUMENTS
 235

	)

334 
	#KEY_BATTERY
 236

	)

336 
	#KEY_UNKNOWN
 240

	)

338 
	#BTN_MISC
 0x100

	)

339 
	#BTN_0
 0x100

	)

340 
	#BTN_1
 0x101

	)

341 
	#BTN_2
 0x102

	)

342 
	#BTN_3
 0x103

	)

343 
	#BTN_4
 0x104

	)

344 
	#BTN_5
 0x105

	)

345 
	#BTN_6
 0x106

	)

346 
	#BTN_7
 0x107

	)

347 
	#BTN_8
 0x108

	)

348 
	#BTN_9
 0x109

	)

350 
	#BTN_MOUSE
 0x110

	)

351 
	#BTN_LEFT
 0x110

	)

352 
	#BTN_RIGHT
 0x111

	)

353 
	#BTN_MIDDLE
 0x112

	)

354 
	#BTN_SIDE
 0x113

	)

355 
	#BTN_EXTRA
 0x114

	)

356 
	#BTN_FORWARD
 0x115

	)

357 
	#BTN_BACK
 0x116

	)

358 
	#BTN_TASK
 0x117

	)

360 
	#BTN_JOYSTICK
 0x120

	)

361 
	#BTN_TRIGGER
 0x120

	)

362 
	#BTN_THUMB
 0x121

	)

363 
	#BTN_THUMB2
 0x122

	)

364 
	#BTN_TOP
 0x123

	)

365 
	#BTN_TOP2
 0x124

	)

366 
	#BTN_PINKIE
 0x125

	)

367 
	#BTN_BASE
 0x126

	)

368 
	#BTN_BASE2
 0x127

	)

369 
	#BTN_BASE3
 0x128

	)

370 
	#BTN_BASE4
 0x129

	)

371 
	#BTN_BASE5
 0x12a

	)

372 
	#BTN_BASE6
 0x12b

	)

373 
	#BTN_DEAD
 0x12f

	)

375 
	#BTN_GAMEPAD
 0x130

	)

376 
	#BTN_A
 0x130

	)

377 
	#BTN_B
 0x131

	)

378 
	#BTN_C
 0x132

	)

379 
	#BTN_X
 0x133

	)

380 
	#BTN_Y
 0x134

	)

381 
	#BTN_Z
 0x135

	)

382 
	#BTN_TL
 0x136

	)

383 
	#BTN_TR
 0x137

	)

384 
	#BTN_TL2
 0x138

	)

385 
	#BTN_TR2
 0x139

	)

386 
	#BTN_SELECT
 0x13a

	)

387 
	#BTN_START
 0x13b

	)

388 
	#BTN_MODE
 0x13c

	)

389 
	#BTN_THUMBL
 0x13d

	)

390 
	#BTN_THUMBR
 0x13e

	)

392 
	#BTN_DIGI
 0x140

	)

393 
	#BTN_TOOL_PEN
 0x140

	)

394 
	#BTN_TOOL_RUBBER
 0x141

	)

395 
	#BTN_TOOL_BRUSH
 0x142

	)

396 
	#BTN_TOOL_PENCIL
 0x143

	)

397 
	#BTN_TOOL_AIRBRUSH
 0x144

	)

398 
	#BTN_TOOL_FINGER
 0x145

	)

399 
	#BTN_TOOL_MOUSE
 0x146

	)

400 
	#BTN_TOOL_LENS
 0x147

	)

401 
	#BTN_TOUCH
 0x14a

	)

402 
	#BTN_STYLUS
 0x14b

	)

403 
	#BTN_STYLUS2
 0x14c

	)

404 
	#BTN_TOOL_DOUBLETAP
 0x14d

	)

405 
	#BTN_TOOL_TRIPLETAP
 0x14e

	)

407 
	#BTN_WHEEL
 0x150

	)

408 
	#BTN_GEAR_DOWN
 0x150

	)

409 
	#BTN_GEAR_UP
 0x151

	)

411 
	#KEY_OK
 0x160

	)

412 
	#KEY_SELECT
 0x161

	)

413 
	#KEY_GOTO
 0x162

	)

414 
	#KEY_CLEAR
 0x163

	)

415 
	#KEY_POWER2
 0x164

	)

416 
	#KEY_OPTION
 0x165

	)

417 
	#KEY_INFO
 0x166

	)

418 
	#KEY_TIME
 0x167

	)

419 
	#KEY_VENDOR
 0x168

	)

420 
	#KEY_ARCHIVE
 0x169

	)

421 
	#KEY_PROGRAM
 0x16a

	)

422 
	#KEY_CHANNEL
 0x16b

	)

423 
	#KEY_FAVORITES
 0x16c

	)

424 
	#KEY_EPG
 0x16d

	)

425 
	#KEY_PVR
 0x16e

	)

426 
	#KEY_MHP
 0x16f

	)

427 
	#KEY_LANGUAGE
 0x170

	)

428 
	#KEY_TITLE
 0x171

	)

429 
	#KEY_SUBTITLE
 0x172

	)

430 
	#KEY_ANGLE
 0x173

	)

431 
	#KEY_ZOOM
 0x174

	)

432 
	#KEY_MODE
 0x175

	)

433 
	#KEY_KEYBOARD
 0x176

	)

434 
	#KEY_SCREEN
 0x177

	)

435 
	#KEY_PC
 0x178

	)

436 
	#KEY_TV
 0x179

	)

437 
	#KEY_TV2
 0x17a

	)

438 
	#KEY_VCR
 0x17b

	)

439 
	#KEY_VCR2
 0x17c

	)

440 
	#KEY_SAT
 0x17d

	)

441 
	#KEY_SAT2
 0x17e

	)

442 
	#KEY_CD
 0x17f

	)

443 
	#KEY_TAPE
 0x180

	)

444 
	#KEY_RADIO
 0x181

	)

445 
	#KEY_TUNER
 0x182

	)

446 
	#KEY_PLAYER
 0x183

	)

447 
	#KEY_TEXT
 0x184

	)

448 
	#KEY_DVD
 0x185

	)

449 
	#KEY_AUX
 0x186

	)

450 
	#KEY_MP3
 0x187

	)

451 
	#KEY_AUDIO
 0x188

	)

452 
	#KEY_VIDEO
 0x189

	)

453 
	#KEY_DIRECTORY
 0x18a

	)

454 
	#KEY_LIST
 0x18b

	)

455 
	#KEY_MEMO
 0x18c

	)

456 
	#KEY_CALENDAR
 0x18d

	)

457 
	#KEY_RED
 0x18e

	)

458 
	#KEY_GREEN
 0x18f

	)

459 
	#KEY_YELLOW
 0x190

	)

460 
	#KEY_BLUE
 0x191

	)

461 
	#KEY_CHANNELUP
 0x192

	)

462 
	#KEY_CHANNELDOWN
 0x193

	)

463 
	#KEY_FIRST
 0x194

	)

464 
	#KEY_LAST
 0x195

	)

465 
	#KEY_AB
 0x196

	)

466 
	#KEY_NEXT
 0x197

	)

467 
	#KEY_RESTART
 0x198

	)

468 
	#KEY_SLOW
 0x199

	)

469 
	#KEY_SHUFFLE
 0x19a

	)

470 
	#KEY_BREAK
 0x19b

	)

471 
	#KEY_PREVIOUS
 0x19c

	)

472 
	#KEY_DIGITS
 0x19d

	)

473 
	#KEY_TEEN
 0x19e

	)

474 
	#KEY_TWEN
 0x19f

	)

476 
	#KEY_DEL_EOL
 0x1c0

	)

477 
	#KEY_DEL_EOS
 0x1c1

	)

478 
	#KEY_INS_LINE
 0x1c2

	)

479 
	#KEY_DEL_LINE
 0x1c3

	)

481 
	#KEY_FN
 0x1d0

	)

482 
	#KEY_FN_ESC
 0x1d1

	)

483 
	#KEY_FN_F1
 0x1d2

	)

484 
	#KEY_FN_F2
 0x1d3

	)

485 
	#KEY_FN_F3
 0x1d4

	)

486 
	#KEY_FN_F4
 0x1d5

	)

487 
	#KEY_FN_F5
 0x1d6

	)

488 
	#KEY_FN_F6
 0x1d7

	)

489 
	#KEY_FN_F7
 0x1d8

	)

490 
	#KEY_FN_F8
 0x1d9

	)

491 
	#KEY_FN_F9
 0x1da

	)

492 
	#KEY_FN_F10
 0x1db

	)

493 
	#KEY_FN_F11
 0x1dc

	)

494 
	#KEY_FN_F12
 0x1dd

	)

495 
	#KEY_FN_1
 0x1de

	)

496 
	#KEY_FN_2
 0x1df

	)

497 
	#KEY_FN_D
 0x1e0

	)

498 
	#KEY_FN_E
 0x1e1

	)

499 
	#KEY_FN_F
 0x1e2

	)

500 
	#KEY_FN_S
 0x1e3

	)

501 
	#KEY_FN_B
 0x1e4

	)

503 
	#KEY_BRL_DOT1
 0x1f1

	)

504 
	#KEY_BRL_DOT2
 0x1f2

	)

505 
	#KEY_BRL_DOT3
 0x1f3

	)

506 
	#KEY_BRL_DOT4
 0x1f4

	)

507 
	#KEY_BRL_DOT5
 0x1f5

	)

508 
	#KEY_BRL_DOT6
 0x1f6

	)

509 
	#KEY_BRL_DOT7
 0x1f7

	)

510 
	#KEY_BRL_DOT8
 0x1f8

	)

512 
	#KEY_MIN_INTERESTING
 
KEY_MUTE


	)

513 
	#KEY_MAX
 0x1ff

	)

515 
	#REL_X
 0x00

	)

516 
	#REL_Y
 0x01

	)

517 
	#REL_Z
 0x02

	)

518 
	#REL_RX
 0x03

	)

519 
	#REL_RY
 0x04

	)

520 
	#REL_RZ
 0x05

	)

521 
	#REL_HWHEEL
 0x06

	)

522 
	#REL_DIAL
 0x07

	)

523 
	#REL_WHEEL
 0x08

	)

524 
	#REL_MISC
 0x09

	)

525 
	#REL_MAX
 0x0f

	)

527 
	#ABS_X
 0x00

	)

528 
	#ABS_Y
 0x01

	)

529 
	#ABS_Z
 0x02

	)

530 
	#ABS_RX
 0x03

	)

531 
	#ABS_RY
 0x04

	)

532 
	#ABS_RZ
 0x05

	)

533 
	#ABS_THROTTLE
 0x06

	)

534 
	#ABS_RUDDER
 0x07

	)

535 
	#ABS_WHEEL
 0x08

	)

536 
	#ABS_GAS
 0x09

	)

537 
	#ABS_BRAKE
 0x0a

	)

538 
	#ABS_HAT0X
 0x10

	)

539 
	#ABS_HAT0Y
 0x11

	)

540 
	#ABS_HAT1X
 0x12

	)

541 
	#ABS_HAT1Y
 0x13

	)

542 
	#ABS_HAT2X
 0x14

	)

543 
	#ABS_HAT2Y
 0x15

	)

544 
	#ABS_HAT3X
 0x16

	)

545 
	#ABS_HAT3Y
 0x17

	)

546 
	#ABS_PRESSURE
 0x18

	)

547 
	#ABS_DISTANCE
 0x19

	)

548 
	#ABS_TILT_X
 0x1a

	)

549 
	#ABS_TILT_Y
 0x1b

	)

550 
	#ABS_TOOL_WIDTH
 0x1c

	)

551 
	#ABS_VOLUME
 0x20

	)

552 
	#ABS_MISC
 0x28

	)

553 
	#ABS_MAX
 0x3f

	)

555 
	#SW_LID
 0x00

	)

556 
	#SW_TABLET_MODE
 0x01

	)

557 
	#SW_HEADPHONE_INSERT
 0x02

	)

558 
	#SW_MAX
 0x0f

	)

560 
	#MSC_SERIAL
 0x00

	)

561 
	#MSC_PULSELED
 0x01

	)

562 
	#MSC_GESTURE
 0x02

	)

563 
	#MSC_RAW
 0x03

	)

564 
	#MSC_SCAN
 0x04

	)

565 
	#MSC_MAX
 0x07

	)

567 
	#LED_NUML
 0x00

	)

568 
	#LED_CAPSL
 0x01

	)

569 
	#LED_SCROLLL
 0x02

	)

570 
	#LED_COMPOSE
 0x03

	)

571 
	#LED_KANA
 0x04

	)

572 
	#LED_SLEEP
 0x05

	)

573 
	#LED_SUSPEND
 0x06

	)

574 
	#LED_MUTE
 0x07

	)

575 
	#LED_MISC
 0x08

	)

576 
	#LED_MAIL
 0x09

	)

577 
	#LED_CHARGING
 0x0a

	)

578 
	#LED_MAX
 0x0f

	)

580 
	#REP_DELAY
 0x00

	)

581 
	#REP_PERIOD
 0x01

	)

582 
	#REP_MAX
 0x01

	)

584 
	#SND_CLICK
 0x00

	)

585 
	#SND_BELL
 0x01

	)

586 
	#SND_TONE
 0x02

	)

587 
	#SND_MAX
 0x07

	)

589 
	#ID_BUS
 0

	)

590 
	#ID_VENDOR
 1

	)

591 
	#ID_PRODUCT
 2

	)

592 
	#ID_VERSION
 3

	)

594 
	#BUS_PCI
 0x01

	)

595 
	#BUS_ISAPNP
 0x02

	)

596 
	#BUS_USB
 0x03

	)

597 
	#BUS_HIL
 0x04

	)

598 
	#BUS_BLUETOOTH
 0x05

	)

600 
	#BUS_ISA
 0x10

	)

601 
	#BUS_I8042
 0x11

	)

602 
	#BUS_XTKBD
 0x12

	)

603 
	#BUS_RS232
 0x13

	)

604 
	#BUS_GAMEPORT
 0x14

	)

605 
	#BUS_PARPORT
 0x15

	)

606 
	#BUS_AMIGA
 0x16

	)

607 
	#BUS_ADB
 0x17

	)

608 
	#BUS_I2C
 0x18

	)

609 
	#BUS_HOST
 0x19

	)

610 
	#BUS_GSC
 0x1A

	)

612 
	#FF_STATUS_STOPPED
 0x00

	)

613 
	#FF_STATUS_PLAYING
 0x01

	)

614 
	#FF_STATUS_MAX
 0x01

	)

616 
	sff_ª∂ay
 {

617 
__u16
 
	mÀngth
;

618 
__u16
 
	mdñay
;

621 
	sff_åiggî
 {

622 
__u16
 
	mbuâ⁄
;

623 
__u16
 
	möãrvÆ
;

626 
	sff_ívñ›e
 {

627 
__u16
 
	m©èck_Àngth
;

628 
__u16
 
	m©èck_Àvñ
;

629 
__u16
 
	mÁde_Àngth
;

630 
__u16
 
	mÁde_Àvñ
;

633 
	sff_c⁄°™t_ef„˘
 {

634 
__s16
 
	mÀvñ
;

635 
ff_ívñ›e
 
	mívñ›e
;

638 
	sff_ømp_ef„˘
 {

639 
__s16
 
	m°¨t_Àvñ
;

640 
__s16
 
	míd_Àvñ
;

641 
ff_ívñ›e
 
	mívñ›e
;

644 
	sff_c⁄dôi⁄_ef„˘
 {

645 
__u16
 
	mright_ßtuøti⁄
;

646 
__u16
 
	mÀ·_ßtuøti⁄
;

648 
__s16
 
	mright_c€ff
;

649 
__s16
 
	mÀ·_c€ff
;

651 
__u16
 
	mdódb™d
;

652 
__s16
 
	m˚¡î
;

656 
	sff_≥riodic_ef„˘
 {

657 
__u16
 
	mwavef‹m
;

658 
__u16
 
	m≥riod
;

659 
__s16
 
	mmagnôude
;

660 
__s16
 
	moff£t
;

661 
__u16
 
	mpha£
;

663 
ff_ívñ›e
 
	mívñ›e
;

665 
__u32
 
	mcu°om_Àn
;

666 
__s16
 *
	mcu°om_d©a
;

670 
	sff_rumbÀ_ef„˘
 {

671 
__u16
 
	m°r⁄g_magnôude
;

672 
__u16
 
	mwók_magnôude
;

675 
	sff_ef„˘
 {

676 
__u16
 
	mty≥
;

678 
__s16
 
	mid
;

680 
__u16
 
	mdúe˘i⁄
;

682 
ff_åiggî
 
	måiggî
;

683 
ff_ª∂ay
 
	mª∂ay
;

686 
ff_c⁄°™t_ef„˘
 
	mc⁄°™t
;

687 
ff_ømp_ef„˘
 
	mømp
;

688 
ff_≥riodic_ef„˘
 
	m≥riodic
;

689 
ff_c⁄dôi⁄_ef„˘
 
	mc⁄dôi⁄
[2];

690 
ff_rumbÀ_ef„˘
 
	mrumbÀ
;

691 } 
	mu
;

694 
	#FF_RUMBLE
 0x50

	)

695 
	#FF_PERIODIC
 0x51

	)

696 
	#FF_CONSTANT
 0x52

	)

697 
	#FF_SPRING
 0x53

	)

698 
	#FF_FRICTION
 0x54

	)

699 
	#FF_DAMPER
 0x55

	)

700 
	#FF_INERTIA
 0x56

	)

701 
	#FF_RAMP
 0x57

	)

703 
	#FF_SQUARE
 0x58

	)

704 
	#FF_TRIANGLE
 0x59

	)

705 
	#FF_SINE
 0x5a

	)

706 
	#FF_SAW_UP
 0x5b

	)

707 
	#FF_SAW_DOWN
 0x5c

	)

708 
	#FF_CUSTOM
 0x5d

	)

710 
	#FF_GAIN
 0x60

	)

711 
	#FF_AUTOCENTER
 0x61

	)

713 
	#FF_MAX
 0x7f

	)

	@linux/interrupt.h

12 #i‚de‡
_LINUX_INTERRUPT_H


13 
	#_LINUX_INTERRUPT_H


	)

15 
	~<löux/kî√l.h
>

16 
	~<löux/lökage.h
>

17 
	~<löux/bô›s.h
>

18 
	~<löux/¥ìm±.h
>

19 
	~<löux/˝umask.h
>

20 
	~<löux/úqªtu∫.h
>

21 
	~<löux/h¨dúq.h
>

22 
	~<löux/sched.h
>

23 
	~<löux/úqÊags.h
>

24 
	~<asm/©omic.h
>

25 
	~<asm/±ø˚.h
>

26 
	~<asm/sy°em.h
>

28 
	#IRQF_TRIGGER_NONE
 0x00000000

	)

29 
	#IRQF_TRIGGER_RISING
 0x00000001

	)

30 
	#IRQF_TRIGGER_FALLING
 0x00000002

	)

31 
	#IRQF_TRIGGER_HIGH
 0x00000004

	)

32 
	#IRQF_TRIGGER_LOW
 0x00000008

	)

33 
	#IRQF_TRIGGER_MASK
 (
IRQF_TRIGGER_HIGH
 | 
IRQF_TRIGGER_LOW
 | 
IRQF_TRIGGER_RISING
 | 
IRQF_TRIGGER_FALLING
)

	)

34 
	#IRQF_TRIGGER_PROBE
 0x00000010

	)

36 
	#IRQF_DISABLED
 0x00000020

	)

37 
	#IRQF_SAMPLE_RANDOM
 0x00000040

	)

38 
	#IRQF_SHARED
 0x00000080

	)

39 
	#IRQF_PROBE_SHARED
 0x00000100

	)

40 
	#IRQF_TIMER
 0x00000200

	)

41 
	#IRQF_PERCPU
 0x00000400

	)

43 
	#SA_INTERRUPT
 
IRQF_DISABLED


	)

44 
	#SA_SAMPLE_RANDOM
 
IRQF_SAMPLE_RANDOM


	)

45 
	#SA_SHIRQ
 
IRQF_SHARED


	)

46 
	#SA_PROBEIRQ
 
IRQF_PROBE_SHARED


	)

47 
	#SA_PERCPU
 
IRQF_PERCPU


	)

49 
	#SA_TRIGGER_LOW
 
IRQF_TRIGGER_LOW


	)

50 
	#SA_TRIGGER_HIGH
 
IRQF_TRIGGER_HIGH


	)

51 
	#SA_TRIGGER_FALLING
 
IRQF_TRIGGER_FALLING


	)

52 
	#SA_TRIGGER_RISING
 
IRQF_TRIGGER_RISING


	)

53 
	#SA_TRIGGER_MASK
 
IRQF_TRIGGER_MASK


	)

55 
	súqa˘i⁄
 {

56 
úqªtu∫_t
 (*
h™dÀr
)(, *, 
	m±_ªgs
 *);

57 
	mÊags
;

58 
˝umask_t
 
	mmask
;

59 c⁄° *
	m«me
;

60 *
	mdev_id
;

61 
úqa˘i⁄
 *
	m√xt
;

62 
	múq
;

63 
¥oc_dú_íåy
 *
	mdú
;

66 
	#loˇl_úq_íabÀ_ö_h¨dúq
(Ë
	`loˇl_úq_íabÀ
()

	)

68 
	#dißbÀ_úq_nosync_lockdï
(
úq
Ë
	`dißbÀ_úq_nosync
(úq)

	)

69 
	#dißbÀ_úq_lockdï
(
úq
Ë
	`dißbÀ_úq
(úq)

	)

70 
	#íabÀ_úq_lockdï
(
úq
Ë
	`íabÀ_úq
(úq)

	)

72 #i‚de‡
__ARCH_SET_SOFTIRQ_PENDING


73 
	#£t_so·úq_≥ndög
(
x
Ë(
	`loˇl_so·úq_≥ndög
(Ë(x))

	)

74 
	#‹_so·úq_≥ndög
(
x
Ë(
	`loˇl_so·úq_≥ndög
(Ë|(x))

	)

77 
	#ßve_Êags
(
x
Ë
	`ßve_Êags
(&x)

	)

78 
	#ßve_™d_˛i
(
x
Ë
	`ßve_™d_˛i
(&x)

	)

82 
	mHI_SOFTIRQ
=0,

83 
	mTIMER_SOFTIRQ
,

84 
	mNET_TX_SOFTIRQ
,

85 
	mNET_RX_SOFTIRQ
,

86 
	mBLOCK_SOFTIRQ
,

87 
	mTASKLET_SOFTIRQ


90 
	sso·úq_a˘i⁄


92 (*
	ma˘i⁄
)(
	mso·úq_a˘i⁄
 *);

93 *
	md©a
;

96 
	#__øi£_so·úq_úqoff
(
ƒ
Ëdÿ{ 
	`‹_so·úq_≥ndög
(1UL << (ƒ)); } 0)

	)

98 
	sèskÀt_°ru˘


100 
èskÀt_°ru˘
 *
	m√xt
;

101 
	m°©e
;

102 
©omic_t
 
	mcou¡
;

103 (*
	mfunc
)();

104 
	md©a
;

107 
	#DECLARE_TASKLET
(
«me
, 
func
, 
d©a
Ë
èskÀt_°ru˘
Çamê{ 
NULL
, 0, 
	`ATOMIC_INIT
(0), func, d©®}

	)

109 
	#DECLARE_TASKLET_DISABLED
(
«me
, 
func
, 
d©a
Ë
èskÀt_°ru˘
Çamê{ 
NULL
, 0, 
	`ATOMIC_INIT
(1), func, d©®}

	)

113 
	mTASKLET_STATE_SCHED
,

114 
	mTASKLET_STATE_RUN


117 
	#èskÀt_åylock
(
t
Ë1

	)

118 
	#èskÀt_u∆ock_waô
(
t
Ëdÿ{ } 0)

	)

119 
	#èskÀt_u∆ock
(
t
Ëdÿ{ } 0)

	)

	@linux/ioctl.h

12 #i‚de‡
_LINUX_IOCTL_H


13 
	#_LINUX_IOCTL_H


	)

15 
	~<asm/io˘l.h
>

	@linux/ioport.h

12 #i‚de‡
_LINUX_IOPORT_H


13 
	#_LINUX_IOPORT_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/ty≥s.h
>

18 
	sªsour˚
 {

19 
ªsour˚_size_t
 
	m°¨t
;

20 
ªsour˚_size_t
 
	míd
;

21 c⁄° *
	m«me
;

22 
	mÊags
;

23 
ªsour˚
 *
	m∑ª¡
, *
	msiblög
, *
	mchûd
;

26 
	sªsour˚_li°
 {

27 
ªsour˚_li°
 *
	m√xt
;

28 
ªsour˚
 *
	mªs
;

29 
pci_dev
 *
	mdev
;

32 
	#IORESOURCE_BITS
 0x000000ff

	)

34 
	#IORESOURCE_IO
 0x00000100

	)

35 
	#IORESOURCE_MEM
 0x00000200

	)

36 
	#IORESOURCE_IRQ
 0x00000400

	)

37 
	#IORESOURCE_DMA
 0x00000800

	)

39 
	#IORESOURCE_PREFETCH
 0x00001000

	)

40 
	#IORESOURCE_READONLY
 0x00002000

	)

41 
	#IORESOURCE_CACHEABLE
 0x00004000

	)

42 
	#IORESOURCE_RANGELENGTH
 0x00008000

	)

43 
	#IORESOURCE_SHADOWABLE
 0x00010000

	)

44 
	#IORESOURCE_BUS_HAS_VGA
 0x00080000

	)

46 
	#IORESOURCE_DISABLED
 0x10000000

	)

47 
	#IORESOURCE_UNSET
 0x20000000

	)

48 
	#IORESOURCE_AUTO
 0x40000000

	)

49 
	#IORESOURCE_BUSY
 0x80000000

	)

51 
	#IORESOURCE_IRQ_HIGHEDGE
 (1<<0)

	)

52 
	#IORESOURCE_IRQ_LOWEDGE
 (1<<1)

	)

53 
	#IORESOURCE_IRQ_HIGHLEVEL
 (1<<2)

	)

54 
	#IORESOURCE_IRQ_LOWLEVEL
 (1<<3)

	)

55 
	#IORESOURCE_IRQ_SHAREABLE
 (1<<4)

	)

57 
	#IORESOURCE_DMA_TYPE_MASK
 (3<<0)

	)

58 
	#IORESOURCE_DMA_8BIT
 (0<<0)

	)

59 
	#IORESOURCE_DMA_8AND16BIT
 (1<<0)

	)

60 
	#IORESOURCE_DMA_16BIT
 (2<<0)

	)

62 
	#IORESOURCE_DMA_MASTER
 (1<<2)

	)

63 
	#IORESOURCE_DMA_BYTE
 (1<<3)

	)

64 
	#IORESOURCE_DMA_WORD
 (1<<4)

	)

66 
	#IORESOURCE_DMA_SPEED_MASK
 (3<<6)

	)

67 
	#IORESOURCE_DMA_COMPATIBLE
 (0<<6)

	)

68 
	#IORESOURCE_DMA_TYPEA
 (1<<6)

	)

69 
	#IORESOURCE_DMA_TYPEB
 (2<<6)

	)

70 
	#IORESOURCE_DMA_TYPEF
 (3<<6)

	)

72 
	#IORESOURCE_MEM_WRITEABLE
 (1<<0)

	)

73 
	#IORESOURCE_MEM_CACHEABLE
 (1<<1)

	)

74 
	#IORESOURCE_MEM_RANGELENGTH
 (1<<2)

	)

75 
	#IORESOURCE_MEM_TYPE_MASK
 (3<<3)

	)

76 
	#IORESOURCE_MEM_8BIT
 (0<<3)

	)

77 
	#IORESOURCE_MEM_16BIT
 (1<<3)

	)

78 
	#IORESOURCE_MEM_8AND16BIT
 (2<<3)

	)

79 
	#IORESOURCE_MEM_32BIT
 (3<<3)

	)

80 
	#IORESOURCE_MEM_SHADOWABLE
 (1<<5)

	)

81 
	#IORESOURCE_MEM_EXPANSIONROM
 (1<<6)

	)

83 
	#IORESOURCE_ROM_ENABLE
 (1<<0)

	)

84 
	#IORESOURCE_ROM_SHADOW
 (1<<1)

	)

85 
	#IORESOURCE_ROM_COPY
 (1<<2)

	)

87 
	#ªque°_ªgi⁄
(
°¨t
,
n
,
«me
Ë
	`__ªque°_ªgi⁄
(&
i›‹t_ªsour˚
, (°¨t), (n), («me))

	)

88 
	#ªque°_mem_ªgi⁄
(
°¨t
,
n
,
«me
Ë
	`__ªque°_ªgi⁄
(&
iomem_ªsour˚
, (°¨t), (n), («me))

	)

89 
	#ª«me_ªgi⁄
(
ªgi⁄
, 
√w«me
Ëdÿ{ (ªgi⁄)->
«me
 = (√w«me); } 0)

	)

91 
	#ªÀa£_ªgi⁄
(
°¨t
,
n
Ë
	`__ªÀa£_ªgi⁄
(&
i›‹t_ªsour˚
, (°¨t), (n))

	)

92 
	#check_mem_ªgi⁄
(
°¨t
,
n
Ë
	`__check_ªgi⁄
(&
iomem_ªsour˚
, (°¨t), (n))

	)

93 
	#ªÀa£_mem_ªgi⁄
(
°¨t
,
n
Ë
	`__ªÀa£_ªgi⁄
(&
iomem_ªsour˚
, (°¨t), (n))

	)

	@linux/ioprio.h

12 #i‚de‡
IOPRIO_H


13 
	#IOPRIO_H


	)

15 
	~<löux/sched.h
>

17 
	#IOPRIO_BITS
 (16)

	)

18 
	#IOPRIO_CLASS_SHIFT
 (13)

	)

19 
	#IOPRIO_PRIO_MASK
 ((1UL << 
IOPRIO_CLASS_SHIFT
Ë- 1)

	)

21 
	#IOPRIO_PRIO_CLASS
(
mask
Ë((maskË>> 
IOPRIO_CLASS_SHIFT
)

	)

22 
	#IOPRIO_PRIO_DATA
(
mask
Ë((maskË& 
IOPRIO_PRIO_MASK
)

	)

23 
	#IOPRIO_PRIO_VALUE
(
˛ass
, 
d©a
Ë(((˛assË<< 
IOPRIO_CLASS_SHIFT
Ë| d©a)

	)

25 
	#i›rio_vÆid
(
mask
Ë(
	`IOPRIO_PRIO_CLASS
((mask)Ë!
IOPRIO_CLASS_NONE
)

	)

28 
	mIOPRIO_CLASS_NONE
,

29 
	mIOPRIO_CLASS_RT
,

30 
	mIOPRIO_CLASS_BE
,

31 
	mIOPRIO_CLASS_IDLE
,

34 
	#IOPRIO_BE_NR
 (8)

	)

37 
	mIOPRIO_WHO_PROCESS
 = 1,

38 
	mIOPRIO_WHO_PGRP
,

39 
	mIOPRIO_WHO_USER
,

42 
	#IOPRIO_NORM
 (4)

	)

	@linux/ip.h

12 #i‚de‡
_LINUX_IP_H


13 
	#_LINUX_IP_H


	)

14 
	~<löux/ty≥s.h
>

15 
	~<asm/byã‹dî.h
>

17 
	#IPTOS_TOS_MASK
 0x1E

	)

18 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

19 
	#IPTOS_LOWDELAY
 0x10

	)

20 
	#IPTOS_THROUGHPUT
 0x08

	)

21 
	#IPTOS_RELIABILITY
 0x04

	)

22 
	#IPTOS_MINCOST
 0x02

	)

24 
	#IPTOS_PREC_MASK
 0xE0

	)

25 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

26 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

27 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

28 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

29 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

30 
	#IPTOS_PREC_FLASH
 0x60

	)

31 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

32 
	#IPTOS_PREC_PRIORITY
 0x20

	)

33 
	#IPTOS_PREC_ROUTINE
 0x00

	)

35 
	#IPOPT_COPY
 0x80

	)

36 
	#IPOPT_CLASS_MASK
 0x60

	)

37 
	#IPOPT_NUMBER_MASK
 0x1f

	)

39 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

40 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

41 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

43 
	#IPOPT_CONTROL
 0x00

	)

44 
	#IPOPT_RESERVED1
 0x20

	)

45 
	#IPOPT_MEASUREMENT
 0x40

	)

46 
	#IPOPT_RESERVED2
 0x60

	)

48 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

49 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

50 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

51 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

52 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

53 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

54 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

55 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

56 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPVERSION
 4

	)

59 
	#MAXTTL
 255

	)

60 
	#IPDEFTTL
 64

	)

62 
	#IPOPT_OPTVAL
 0

	)

63 
	#IPOPT_OLEN
 1

	)

64 
	#IPOPT_OFFSET
 2

	)

65 
	#IPOPT_MINOFF
 4

	)

66 
	#MAX_IPOPTLEN
 40

	)

67 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

68 
	#IPOPT_EOL
 
IPOPT_END


	)

69 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

71 
	#IPOPT_TS_TSONLY
 0

	)

72 
	#IPOPT_TS_TSANDADDR
 1

	)

73 
	#IPOPT_TS_PRESPEC
 3

	)

75 
	sùhdr
 {

76 #ifde‡
__LITTLE_ENDIAN_BITFIELD


77 
__u8
 
	mihl
:4,

78 
	mvîsi⁄
:4;

79 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

80 
__u8
 
	mvîsi⁄
:4,

81 
	mihl
:4;

85 
__u8
 
	mtos
;

86 
__be16
 
	mtŸ_Àn
;

87 
__be16
 
	mid
;

88 
__be16
 
	m‰ag_off
;

89 
__u8
 
	mâl
;

90 
__u8
 
	m¥Ÿocﬁ
;

91 
__u16
 
	mcheck
;

92 
__be32
 
	mßddr
;

93 
__be32
 
	mdaddr
;

97 
	sù_auth_hdr
 {

98 
__u8
 
	m√xthdr
;

99 
__u8
 
	mhdæí
;

100 
__u16
 
	mª£rved
;

101 
__u32
 
	m•i
;

102 
__u32
 
	m£q_no
;

103 
__u8
 
	mauth_d©a
[0];

106 
	sù_e•_hdr
 {

107 
__u32
 
	m•i
;

108 
__u32
 
	m£q_no
;

109 
__u8
 
	míc_d©a
[0];

112 
	sù_comp_hdr
 {

113 
__u8
 
	m√xthdr
;

114 
__u8
 
	mÊags
;

115 
__u16
 
	m˝i
;

	@linux/ipc.h

12 #i‚de‡
_LINUX_IPC_H


13 
	#_LINUX_IPC_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#IPC_PRIVATE
 ((
__kî√l_key_t
Ë0)

	)

19 
	sùc_≥rm


21 
__kî√l_key_t
 
	mkey
;

22 
__kî√l_uid_t
 
	muid
;

23 
__kî√l_gid_t
 
	mgid
;

24 
__kî√l_uid_t
 
	mcuid
;

25 
__kî√l_gid_t
 
	mcgid
;

26 
__kî√l_mode_t
 
	mmode
;

27 
	m£q
;

30 
	~<asm/ùcbuf.h
>

32 
	#IPC_CREAT
 00001000

	)

33 
	#IPC_EXCL
 00002000

	)

34 
	#IPC_NOWAIT
 00004000

	)

36 
	#IPC_DIPC
 00010000

	)

37 
	#IPC_OWN
 00020000

	)

39 
	#IPC_RMID
 0

	)

40 
	#IPC_SET
 1

	)

41 
	#IPC_STAT
 2

	)

42 
	#IPC_INFO
 3

	)

44 
	#IPC_OLD
 0

	)

45 
	#IPC_64
 0x0100

	)

	@linux/ipmi_msgdefs.h

12 #i‚de‡
__LINUX_IPMI_MSGDEFS_H


13 
	#__LINUX_IPMI_MSGDEFS_H


	)

15 
	#IPMI_NETFN_SENSOR_EVENT_REQUEST
 0x04

	)

16 
	#IPMI_NETFN_SENSOR_EVENT_RESPONSE
 0x05

	)

17 
	#IPMI_GET_EVENT_RECEIVER_CMD
 0x01

	)

19 
	#IPMI_NETFN_APP_REQUEST
 0x06

	)

20 
	#IPMI_NETFN_APP_RESPONSE
 0x07

	)

21 
	#IPMI_GET_DEVICE_ID_CMD
 0x01

	)

22 
	#IPMI_CLEAR_MSG_FLAGS_CMD
 0x30

	)

23 
	#IPMI_GET_DEVICE_GUID_CMD
 0x08

	)

24 
	#IPMI_GET_MSG_FLAGS_CMD
 0x31

	)

25 
	#IPMI_SEND_MSG_CMD
 0x34

	)

26 
	#IPMI_GET_MSG_CMD
 0x33

	)

27 
	#IPMI_SET_BMC_GLOBAL_ENABLES_CMD
 0x2e

	)

28 
	#IPMI_GET_BMC_GLOBAL_ENABLES_CMD
 0x2f

	)

29 
	#IPMI_READ_EVENT_MSG_BUFFER_CMD
 0x35

	)

30 
	#IPMI_GET_CHANNEL_INFO_CMD
 0x42

	)

32 
	#IPMI_NETFN_STORAGE_REQUEST
 0x0a

	)

33 
	#IPMI_NETFN_STORAGE_RESPONSE
 0x0b

	)

34 
	#IPMI_ADD_SEL_ENTRY_CMD
 0x44

	)

36 
	#IPMI_BMC_SLAVE_ADDR
 0x20

	)

38 
	#IPMI_MAX_MSG_LENGTH
 272

	)

40 
	#IPMI_CC_NO_ERROR
 0x00

	)

41 
	#IPMI_NODE_BUSY_ERR
 0xc0

	)

42 
	#IPMI_INVALID_COMMAND_ERR
 0xc1

	)

43 
	#IPMI_ERR_MSG_TRUNCATED
 0xc6

	)

44 
	#IPMI_LOST_ARBITRATION_ERR
 0x81

	)

45 
	#IPMI_ERR_UNSPECIFIED
 0xff

	)

47 
	#IPMI_CHANNEL_PROTOCOL_IPMB
 1

	)

48 
	#IPMI_CHANNEL_PROTOCOL_ICMB
 2

	)

49 
	#IPMI_CHANNEL_PROTOCOL_SMBUS
 4

	)

50 
	#IPMI_CHANNEL_PROTOCOL_KCS
 5

	)

51 
	#IPMI_CHANNEL_PROTOCOL_SMIC
 6

	)

52 
	#IPMI_CHANNEL_PROTOCOL_BT10
 7

	)

53 
	#IPMI_CHANNEL_PROTOCOL_BT15
 8

	)

54 
	#IPMI_CHANNEL_PROTOCOL_TMODE
 9

	)

56 
	#IPMI_CHANNEL_MEDIUM_IPMB
 1

	)

57 
	#IPMI_CHANNEL_MEDIUM_ICMB10
 2

	)

58 
	#IPMI_CHANNEL_MEDIUM_ICMB09
 3

	)

59 
	#IPMI_CHANNEL_MEDIUM_8023LAN
 4

	)

60 
	#IPMI_CHANNEL_MEDIUM_ASYNC
 5

	)

61 
	#IPMI_CHANNEL_MEDIUM_OTHER_LAN
 6

	)

62 
	#IPMI_CHANNEL_MEDIUM_PCI_SMBUS
 7

	)

63 
	#IPMI_CHANNEL_MEDIUM_SMBUS1
 8

	)

64 
	#IPMI_CHANNEL_MEDIUM_SMBUS2
 9

	)

65 
	#IPMI_CHANNEL_MEDIUM_USB1
 10

	)

66 
	#IPMI_CHANNEL_MEDIUM_USB2
 11

	)

67 
	#IPMI_CHANNEL_MEDIUM_SYSINTF
 12

	)

	@linux/ipmi_smi.h

12 #i‚de‡
__LINUX_IPMI_SMI_H


13 
	#__LINUX_IPMI_SMI_H


	)

15 
	~<löux/ùmi_msgdefs.h
>

16 
	~<löux/¥oc_fs.h
>

17 
	~<löux/moduÀ.h
>

18 
	~<löux/devi˚.h
>

19 
	~<löux/∂©f‹m_devi˚.h
>

20 
	~<löux/ùmi_smi.h
>

22 
ùmi_smi
 *
	tùmi_smi_t
;

24 
	sùmi_smi_msg


26 
li°_hód
 
	mlök
;

28 
	mmsgid
;

29 *
	mu£r_d©a
;

31 
	md©a_size
;

32 
	md©a
[
IPMI_MAX_MSG_LENGTH
];

34 
	mr•_size
;

35 
	mr•
[
IPMI_MAX_MSG_LENGTH
];

37 (*
	md⁄e
)(
ùmi_smi_msg
 *
	mmsg
);

40 
	sùmi_smi_h™dÀrs


42 
moduÀ
 *
	mow√r
;

44 (*
	m°¨t_¥o˚ssög
)(*
	m£nd_öfo
,

45 
ùmi_smi_t
 
	m√w_ötf
);

47 (*
	m£ndî
)(*
	m£nd_öfo
,

48 
ùmi_smi_msg
 *
	mmsg
,

49 
	m¥i‹ôy
);

51 (*
	mªque°_evíts
)(*
	m£nd_öfo
);

53 (*
	m£t_run_to_com∂ëi⁄
)(*
	m£nd_öfo
, 
	mrun_to_com∂ëi⁄
);

55 (*
	mpﬁl
)(*
	m£nd_öfo
);

57 (*
	möc_u£cou¡
)(*
	m£nd_öfo
);

58 (*
	mdec_u£cou¡
)(*
	m£nd_öfo
);

61 
	sùmi_devi˚_id
 {

62 
	mdevi˚_id
;

63 
	mdevi˚_ªvisi⁄
;

64 
	mfúmw¨e_ªvisi⁄_1
;

65 
	mfúmw¨e_ªvisi⁄_2
;

66 
	mùmi_vîsi⁄
;

67 
	maddôi⁄Æ_devi˚_suµ‹t
;

68 
	mm™uÁ˘uªr_id
;

69 
	m¥odu˘_id
;

70 
	maux_fúmw¨e_ªvisi⁄
[4];

71 
	maux_fúmw¨e_ªvisi⁄_£t
 : 1;

74 
	#ùmi_vîsi⁄_maj‹
(
v
Ë((v)->
ùmi_vîsi⁄
 & 0xf)

	)

75 
	#ùmi_vîsi⁄_mö‹
(
v
Ë((v)->
ùmi_vîsi⁄
 >> 4)

	)

77 
ùmi_smi_msg
 *
ùmi_Æloc_smi_msg
();

	@linux/ipv6.h

12 #i‚de‡
_IPV6_H


13 
	#_IPV6_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/ö6.h
>

17 
	~<asm/byã‹dî.h
>

19 
	#IPV6_MIN_MTU
 1280

	)

21 
	sö6_pktöfo
 {

22 
ö6_addr
 
	mùi6_addr
;

23 
	mùi6_ifödex
;

26 
	sù6_mtuöfo
 {

27 
sockaddr_ö6
 
	mù6m_addr
;

28 
__u32
 
	mù6m_mtu
;

31 
	sö6_i‰eq
 {

32 
ö6_addr
 
	mi‰6_addr
;

33 
__u32
 
	mi‰6_¥efixÀn
;

34 
	mi‰6_ifödex
;

37 
	#IPV6_SRCRT_STRICT
 0x01

	)

38 
	#IPV6_SRCRT_TYPE_0
 0

	)

39 
	#IPV6_SRCRT_TYPE_2
 2

	)

41 
	sùv6_π_hdr
 {

42 
__u8
 
	m√xthdr
;

43 
__u8
 
	mhdæí
;

44 
__u8
 
	mty≥
;

45 
__u8
 
	m£gmíts_À·
;

49 
	sùv6_›t_hdr
 {

50 
__u8
 
	m√xthdr
;

51 
__u8
 
	mhdæí
;

53 } 
__©åibuã__
((
∑cked
));

55 
	#ùv6_de°›t_hdr
 
ùv6_›t_hdr


	)

56 
	#ùv6_h››t_hdr
 
ùv6_›t_hdr


	)

58 
	sπ0_hdr
 {

59 
ùv6_π_hdr
 
	mπ_hdr
;

60 
__u32
 
	mª£rved
;

61 
ö6_addr
 
	maddr
[0];

63 
	#π0_ty≥
 
π_hdr
.
ty≥


	)

66 
	sπ2_hdr
 {

67 
ùv6_π_hdr
 
	mπ_hdr
;

68 
__u32
 
	mª£rved
;

69 
ö6_addr
 
	maddr
;

71 
	#π2_ty≥
 
π_hdr
.
ty≥


	)

74 
	sùv6_de°›t_hao
 {

75 
__u8
 
	mty≥
;

76 
__u8
 
	mÀngth
;

77 
ö6_addr
 
	maddr
;

78 } 
__©åibuã__
((
∑cked
));

80 
	sùv6hdr
 {

81 #ifde‡
__LITTLE_ENDIAN_BITFIELD


82 
__u8
 
	m¥i‹ôy
:4,

83 
	mvîsi⁄
:4;

84 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

85 
__u8
 
	mvîsi⁄
:4,

86 
	m¥i‹ôy
:4;

90 
__u8
 
	mÊow_lbl
[3];

92 
__be16
 
	m∑ylﬂd_Àn
;

93 
__u8
 
	m√xthdr
;

94 
__u8
 
	mh›_limô
;

96 
ö6_addr
 
	mßddr
;

97 
ö6_addr
 
	mdaddr
;

101 
	mDEVCONF_FORWARDING
 = 0,

102 
	mDEVCONF_HOPLIMIT
,

103 
	mDEVCONF_MTU6
,

104 
	mDEVCONF_ACCEPT_RA
,

105 
	mDEVCONF_ACCEPT_REDIRECTS
,

106 
	mDEVCONF_AUTOCONF
,

107 
	mDEVCONF_DAD_TRANSMITS
,

108 
	mDEVCONF_RTR_SOLICITS
,

109 
	mDEVCONF_RTR_SOLICIT_INTERVAL
,

110 
	mDEVCONF_RTR_SOLICIT_DELAY
,

111 
	mDEVCONF_USE_TEMPADDR
,

112 
	mDEVCONF_TEMP_VALID_LFT
,

113 
	mDEVCONF_TEMP_PREFERED_LFT
,

114 
	mDEVCONF_REGEN_MAX_RETRY
,

115 
	mDEVCONF_MAX_DESYNC_FACTOR
,

116 
	mDEVCONF_MAX_ADDRESSES
,

117 
	mDEVCONF_FORCE_MLD_VERSION
,

118 
	mDEVCONF_ACCEPT_RA_DEFRTR
,

119 
	mDEVCONF_ACCEPT_RA_PINFO
,

120 
	mDEVCONF_ACCEPT_RA_RTR_PREF
,

121 
	mDEVCONF_RTR_PROBE_INTERVAL
,

122 
	mDEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
,

123 
	mDEVCONF_PROXY_NDP
,

124 
	mDEVCONF_OPTIMISTIC_DAD
,

125 
	mDEVCONF_ACCEPT_SOURCE_ROUTE
,

126 
	mDEVCONF_MC_FORWARDING
,

127 
	mDEVCONF_DISABLE_IPV6
,

128 
	mDEVCONF_ACCEPT_DAD
,

129 
	mDEVCONF_FORCE_TLLAO
,

130 
	mDEVCONF_MAX


	@linux/ipx.h

12 #i‚de‡
_IPX_H_


13 
	#_IPX_H_


	)

14 
	~<löux/sockios.h
>

15 
	~<löux/sockë.h
>

16 
	#IPX_NODE_LEN
 6

	)

17 
	#IPX_MTU
 576

	)

19 
	ssockaddr_ùx
 {

20 
ß_Ámûy_t
 
	msùx_Ámûy
;

21 
__u16
 
	msùx_p‹t
;

22 
__u32
 
	msùx_√tw‹k
;

23 
	msùx_node
[
IPX_NODE_LEN
];

24 
__u8
 
	msùx_ty≥
;

25 
	msùx_zîo
;

28 
	#sùx_•ecül
 
sùx_p‹t


	)

29 
	#sùx_a˘i⁄
 
sùx_zîo


	)

30 
	#IPX_DLTITF
 0

	)

31 
	#IPX_CRTITF
 1

	)

33 
	sùx_rouã_deföôi⁄
 {

34 
__u32
 
	mùx_√tw‹k
;

35 
__u32
 
	mùx_rouãr_√tw‹k
;

36 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

39 
	sùx_öãrÁ˚_deföôi⁄
 {

40 
__u32
 
	mùx_√tw‹k
;

41 
	mùx_devi˚
[16];

42 
	mùx_dlök_ty≥
;

43 
	#IPX_FRAME_NONE
 0

	)

44 
	#IPX_FRAME_SNAP
 1

	)

45 
	#IPX_FRAME_8022
 2

	)

46 
	#IPX_FRAME_ETHERII
 3

	)

47 
	#IPX_FRAME_8023
 4

	)

48 
	#IPX_FRAME_TR_8022
 5

	)

49 
	mùx_•ecül
;

50 
	#IPX_SPECIAL_NONE
 0

	)

51 
	#IPX_PRIMARY
 1

	)

52 
	#IPX_INTERNAL
 2

	)

53 
	mùx_node
[
IPX_NODE_LEN
];

56 
	sùx_c⁄fig_d©a
 {

57 
	mùxcfg_auto_£À˘_¥im¨y
;

58 
	mùxcfg_auto_¸óã_öãrÁ˚s
;

61 
	sùx_rouã_def
 {

62 
__u32
 
	mùx_√tw‹k
;

63 
__u32
 
	mùx_rouãr_√tw‹k
;

64 
	#IPX_ROUTE_NO_ROUTER
 0

	)

65 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

66 
	mùx_devi˚
[16];

67 
	mùx_Êags
;

68 
	#IPX_RT_SNAP
 8

	)

69 
	#IPX_RT_8022
 4

	)

70 
	#IPX_RT_BLUEBOOK
 2

	)

71 
	#IPX_RT_ROUTED
 1

	)

74 
	#SIOCAIPXITFCRT
 (
SIOCPROTOPRIVATE
)

	)

75 
	#SIOCAIPXPRISLT
 (
SIOCPROTOPRIVATE
 + 1)

	)

76 
	#SIOCIPXCFGDATA
 (
SIOCPROTOPRIVATE
 + 2)

	)

77 
	#SIOCIPXNCPCONN
 (
SIOCPROTOPRIVATE
 + 3)

	)

	@linux/irq.h

12 #i‚de‡
_LINUX_IRQ_H


13 
	#_LINUX_IRQ_H


	)

15 
	~<löux/smp.h
>

17 
	~<löux/lökage.h
>

18 
	~<löux/ˇche.h
>

19 
	~<löux/•ölock.h
>

20 
	~<löux/˝umask.h
>

21 
	~<löux/úqªtu∫.h
>

23 
	~<asm/úq.h
>

24 
	~<asm/±ø˚.h
>

26 
	#IRQ_TYPE_NONE
 0x00000000

	)

27 
	#IRQ_TYPE_EDGE_RISING
 0x00000001

	)

28 
	#IRQ_TYPE_EDGE_FALLING
 0x00000002

	)

29 
	#IRQ_TYPE_EDGE_BOTH
 (
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
)

	)

30 
	#IRQ_TYPE_LEVEL_HIGH
 0x00000004

	)

31 
	#IRQ_TYPE_LEVEL_LOW
 0x00000008

	)

32 
	#IRQ_TYPE_SENSE_MASK
 0x0000000f

	)

33 
	#IRQ_TYPE_PROBE
 0x00000010

	)

35 
	#IRQ_INPROGRESS
 0x00010000

	)

36 
	#IRQ_DISABLED
 0x00020000

	)

37 
	#IRQ_PENDING
 0x00040000

	)

38 
	#IRQ_REPLAY
 0x00080000

	)

39 
	#IRQ_AUTODETECT
 0x00100000

	)

40 
	#IRQ_WAITING
 0x00200000

	)

41 
	#IRQ_LEVEL
 0x00400000

	)

42 
	#IRQ_MASKED
 0x00800000

	)

43 
	#IRQ_PER_CPU
 0x01000000

	)

44 
	#CHECK_IRQ_PER_CPU
(
v¨
Ë0

	)

46 
	#IRQ_NOPROBE
 0x02000000

	)

47 
	#IRQ_NOREQUEST
 0x04000000

	)

48 
	#IRQ_NOAUTOEN
 0x08000000

	)

49 
	#IRQ_DELAYED_DISABLE
 0x10000000

	)

50 
	#IRQ_WAKEUP
 0x20000000

	)

52 
	g¥oc_dú_íåy
;

54 
	súq_chù
 {

55 c⁄° *
	m«me
;

56 (*
	m°¨tup
)(
	múq
);

57 (*
	mshutdown
)(
	múq
);

58 (*
	míabÀ
)(
	múq
);

59 (*
	mdißbÀ
)(
	múq
);

61 (*
	mack
)(
	múq
);

62 (*
	mmask
)(
	múq
);

63 (*
	mmask_ack
)(
	múq
);

64 (*
	munmask
)(
	múq
);

65 (*
	meoi
)(
	múq
);

67 (*
	míd
)(
	múq
);

68 (*
	m£t_afföôy
)(
	múq
, 
˝umask_t
 
	mde°
);

69 (*
	mªåiggî
)(
	múq
);

70 (*
	m£t_ty≥
)(
	múq
, 
	mÊow_ty≥
);

71 (*
	m£t_wake
)(
	múq
, 
	m⁄
);

73 c⁄° *
	mty≥«me
;

76 
	súq_desc
 {

77 
Á°ˇŒ
 (*
h™dÀ_úq
)(
	múq
,

78 
úq_desc
 *
	mdesc
,

79 
±_ªgs
 *
	mªgs
);

80 
úq_chù
 *
	mchù
;

81 *
	mh™dÀr_d©a
;

82 *
	mchù_d©a
;

83 
úqa˘i⁄
 *
	ma˘i⁄
;

84 
	m°©us
;

86 
	mdïth
;

87 
	mwake_dïth
;

88 
	múq_cou¡
;

89 
	múqs_unh™dÀd
;

90 
•ölock_t
 
	mlock
;

91 } 
	g____ˇchñöe_Æig√d
;

93 
	#hw_öãºu±_ty≥
 
úq_chù


	)

94 
úq_chù
 
	thw_úq_c⁄åﬁÀr
;

95 
	#no_úq_ty≥
 
no_úq_chù


	)

96 
úq_desc
 
	túq_desc_t
;

98 
	~<asm/hw_úq.h
>

	@linux/irq_cpustat.h

12 #i‚de‡
__úq_˝u°©_h


13 
	#__úq_˝u°©_h


	)

15 #i‚de‡
__ARCH_IRQ_STAT


17 
	#__IRQ_STAT
(
˝u
, 
membî
Ë(
úq_°©
[˝u].membî)

	)

20 
	#loˇl_so·úq_≥ndög
(Ë
	`__IRQ_STAT
(
	`smp_¥o˚ss‹_id
(), 
__so·úq_≥ndög
)

	)

22 
	#nmi_cou¡
(
˝u
Ë
	`__IRQ_STAT
((˝u), 
__nmi_cou¡
)

	)

	@linux/irqflags.h

12 #i‚de‡
_LINUX_TRACE_IRQFLAGS_H


13 
	#_LINUX_TRACE_IRQFLAGS_H


	)

15 
	#åa˚_h¨dúqs_⁄
(Ëdÿ{ } 0)

	)

16 
	#åa˚_h¨dúqs_off
(Ëdÿ{ } 0)

	)

17 
	#åa˚_so·úqs_⁄
(
ù
Ëdÿ{ } 0)

	)

18 
	#åa˚_so·úqs_off
(
ù
Ëdÿ{ } 0)

	)

19 
	#åa˚_h¨dúq_c⁄ãxt
(
p
Ë0

	)

20 
	#åa˚_so·úq_c⁄ãxt
(
p
Ë0

	)

21 
	#åa˚_h¨dúqs_íabÀd
(
p
Ë0

	)

22 
	#åa˚_so·úqs_íabÀd
(
p
Ë0

	)

23 
	#åa˚_h¨dúq_íãr
(Ëdÿ{ } 0)

	)

24 
	#åa˚_h¨dúq_exô
(Ëdÿ{ } 0)

	)

25 
	#åa˚_so·úq_íãr
(Ëdÿ{ } 0)

	)

26 
	#åa˚_so·úq_exô
(Ëdÿ{ } 0)

	)

27 
	#INIT_TRACE_IRQFLAGS


	)

29 
	#øw_loˇl_úq_dißbÀ
(Ë
	`loˇl_úq_dißbÀ
()

	)

30 
	#øw_loˇl_úq_íabÀ
(Ë
	`loˇl_úq_íabÀ
()

	)

31 
	#øw_loˇl_úq_ßve
(
Êags
Ë
	`loˇl_úq_ßve
(Êags)

	)

32 
	#øw_loˇl_úq_ª°‹e
(
Êags
Ë
	`loˇl_úq_ª°‹e
(Êags)

	)

	@linux/irqreturn.h

12 #i‚de‡
_LINUX_IRQRETURN_H


13 
	#_LINUX_IRQRETURN_H


	)

15 
	túqªtu∫_t
;

17 
	#IRQ_NONE
 (0)

	)

18 
	#IRQ_HANDLED
 (1)

	)

19 
	#IRQ_RETVAL
(
x
Ë((xË!0)

	)

	@linux/jbd.h

12 #i‚de‡
_LINUX_JBD_H


13 
	#_LINUX_JBD_H


	)

15 
	~"jfs_com∑t.h
"

16 
	#JFS_DEBUG


	)

17 
	#jfs_debug
 
jbd_debug


	)

19 
	#jou∫Æ_oom_ªåy
 1

	)

21 #unde‡
JBD_PARANOID_IOFAIL


23 
	#JBD_DEFAULT_MAX_COMMIT_AGE
 5

	)

25 
	#jbd_debug
(
f
, 
a
...)

	)

27 
	#jbd_kmÆloc
(
size
, 
Êags
Ë
	`__jbd_kmÆloc
(
__FUNCTION__
, (size), (Êags), 
jou∫Æ_oom_ªåy
)

	)

28 
	#jbd_ªp_kmÆloc
(
size
, 
Êags
Ë
	`__jbd_kmÆloc
(
__FUNCTION__
, (size), (Êags), 1)

	)

30 
	#JFS_MIN_JOURNAL_BLOCKS
 1024

	)

32 
	#JFS_MAGIC_NUMBER
 0xc03b3998U

	)

34 
	#JFS_DESCRIPTOR_BLOCK
 1

	)

35 
	#JFS_COMMIT_BLOCK
 2

	)

36 
	#JFS_SUPERBLOCK_V1
 3

	)

37 
	#JFS_SUPERBLOCK_V2
 4

	)

38 
	#JFS_REVOKE_BLOCK
 5

	)

40 
	sjou∫Æ_hódî_s


42 
__be32
 
	mh_magic
;

43 
__be32
 
	mh_blockty≥
;

44 
__be32
 
	mh_£quí˚
;

45 } 
	tjou∫Æ_hódî_t
;

47 
	sjou∫Æ_block_èg_s


49 
__be32
 
	mt_blockƒ
;

50 
__be32
 
	mt_Êags
;

51 } 
	tjou∫Æ_block_èg_t
;

53 
	sjou∫Æ_ªvoke_hódî_s


55 
jou∫Æ_hódî_t
 
	mr_hódî
;

56 
__be32
 
	mr_cou¡
;

57 } 
	tjou∫Æ_ªvoke_hódî_t
;

59 
	#JFS_FLAG_ESCAPE
 1

	)

60 
	#JFS_FLAG_SAME_UUID
 2

	)

61 
	#JFS_FLAG_DELETED
 4

	)

62 
	#JFS_FLAG_LAST_TAG
 8

	)

64 
	sjou∫Æ_su≥rblock_s


67 
jou∫Æ_hódî_t
 
	ms_hódî
;

69 
__be32
 
	ms_blocksize
;

70 
__be32
 
	ms_maxÀn
;

71 
__be32
 
	ms_fú°
;

73 
__be32
 
	ms_£quí˚
;

74 
__be32
 
	ms_°¨t
;

76 
__be32
 
	ms_î∫o
;

78 
__be32
 
	ms_„©uª_com∑t
;

79 
__be32
 
	ms_„©uª_öcom∑t
;

80 
__be32
 
	ms_„©uª_ro_com∑t
;

82 
__u8
 
	ms_uuid
[16];

84 
__be32
 
	ms_ƒ_u£rs
;

86 
__be32
 
	ms_dynsu≥r
;

88 
__be32
 
	ms_max_å™ß˘i⁄
;

89 
__be32
 
	ms_max_å™s_d©a
;

91 
__u32
 
	ms_∑ddög
[44];

93 
__u8
 
	ms_u£rs
[16*48];

95 } 
	tjou∫Æ_su≥rblock_t
;

97 
	#JFS_HAS_COMPAT_FEATURE
(
j
,
mask
Ë((j)->
j_f‹m©_vîsi⁄
 >2 && ((j)->
j_su≥rblock
->
s_„©uª_com∑t
 & 
	`˝u_to_be32
((mask))))

	)

98 
	#JFS_HAS_RO_COMPAT_FEATURE
(
j
,
mask
Ë((j)->
j_f‹m©_vîsi⁄
 >2 && ((j)->
j_su≥rblock
->
s_„©uª_ro_com∑t
 & 
	`˝u_to_be32
((mask))))

	)

99 
	#JFS_HAS_INCOMPAT_FEATURE
(
j
,
mask
Ë((j)->
j_f‹m©_vîsi⁄
 >2 && ((j)->
j_su≥rblock
->
s_„©uª_öcom∑t
 & 
	`˝u_to_be32
((mask))))

	)

101 
	#JFS_FEATURE_INCOMPAT_REVOKE
 0x00000001

	)

103 
	#JFS_KNOWN_COMPAT_FEATURES
 0

	)

104 
	#JFS_KNOWN_ROCOMPAT_FEATURES
 0

	)

105 
	#JFS_KNOWN_INCOMPAT_FEATURES
 
JFS_FEATURE_INCOMPAT_REVOKE


	)

107 
	#BJ_N⁄e
 0

	)

108 
	#BJ_SyncD©a
 1

	)

109 
	#BJ_Mëad©a
 2

	)

110 
	#BJ_F‹gë
 3

	)

111 
	#BJ_IO
 4

	)

112 
	#BJ_Shadow
 5

	)

113 
	#BJ_LogCé
 6

	)

114 
	#BJ_Re£rved
 7

	)

115 
	#BJ_Locked
 8

	)

116 
	#BJ_Ty≥s
 9

	)

	@linux/jiffies.h

12 #i‚de‡
_LINUX_JIFFIES_H


13 
	#_LINUX_JIFFIES_H


	)

15 
	~<löux/ˇlc64.h
>

16 
	~<löux/kî√l.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/time.h
>

19 
	~<löux/timex.h
>

20 
	~<asm/∑øm.h
>

22 #i‡
HZ
 >= (12 && HZ < 24)

23 
	#SHIFT_HZ
 4

	)

24 #ñi‡
HZ
 >= 24 && HZ < 48

25 
	#SHIFT_HZ
 5

	)

26 #ñi‡
HZ
 >= 48 && HZ < 96

27 
	#SHIFT_HZ
 6

	)

28 #ñi‡
HZ
 >= 96 && HZ < 192

29 
	#SHIFT_HZ
 7

	)

30 #ñi‡
HZ
 >= 192 && HZ < 384

31 
	#SHIFT_HZ
 8

	)

32 #ñi‡
HZ
 >= 384 && HZ < 768

33 
	#SHIFT_HZ
 9

	)

34 #ñi‡
HZ
 >= 768 && HZ < 1536

35 
	#SHIFT_HZ
 10

	)

37 #îr‹ 
You
 
lo£
.

40 
	#LATCH
 ((
CLOCK_TICK_RATE
 + 
HZ
/2Ë/ HZ)

	)

42 
	#LATCH_HPET
 ((
HPET_TICK_RATE
 + 
HZ
/2Ë/ HZ)

	)

44 
	#SH_DIV
(
NOM
,
DEN
,
LSH
Ë–(((NOMË/ (DEN)Ë<< (LSH)Ë+ ((((NOMË% (DEN)Ë<< (LSH)Ë+ (DENË/ 2Ë/ (DEN))

	)

46 
	#ACTHZ
 (
	`SH_DIV
 (
CLOCK_TICK_RATE
, 
LATCH
, 8))

	)

48 
	#ACTHZ_HPET
 (
	`SH_DIV
 (
HPET_TICK_RATE
, 
LATCH_HPET
, 8))

	)

50 
	#TICK_NSEC
 (
	`SH_DIV
 (1000000UL * 1000, 
ACTHZ
, 8))

	)

52 
	#TICK_NSEC_HPET
 (
	`SH_DIV
(1000000UL * 1000, 
ACTHZ_HPET
, 8))

	)

54 
	#TICK_USEC
 ((1000000UL + 
USER_HZ
/2Ë/ USER_HZ)

	)

56 
	#TICK_USEC_TO_NSEC
(
TUSEC
Ë(
	`SH_DIV
 (TUSEC * 
USER_HZ
 * 1000, 
ACTHZ
, 8))

	)

58 
	#__jiffy_d©a
 
	`__©åibuã__
((
	`£˘i⁄
(".d©a")))

	)

60 #i‡
BITS_PER_LONG
 < 64

64 
	#time_a·î
(
a
,
b
Ë(
	`ty≥check
(,áË&&Åy≥check(, bË&& (()(bË- ()◊Ë< 0))

	)

65 
	#time_bef‹e
(
a
,
b
Ë
	`time_a·î
(b,a)

	)

66 
	#time_a·î_eq
(
a
,
b
Ë(
	`ty≥check
(,áË&&Åy≥check(, bË&& (()◊Ë- ()(bË>0))

	)

67 
	#time_bef‹e_eq
(
a
,
b
Ë
	`time_a·î_eq
(b,a)

	)

68 
	#INITIAL_JIFFIES
 (()(Ë(-300*
HZ
))

	)

69 
	#MAX_JIFFY_OFFSET
 ((~0UL >> 1)-1)

	)

70 
	#SEC_JIFFIE_SC
 (31 - 
SHIFT_HZ
)

	)

71 #i‡!((
NSEC_PER_SEC
 << 2Ë/ 
TICK_NSEC
 << 
SEC_JIFFIE_SC
 - 2 & 0x80000000)

72 #unde‡
SEC_JIFFIE_SC


73 
	#SEC_JIFFIE_SC
 (32 - 
SHIFT_HZ
)

	)

75 
	#NSEC_JIFFIE_SC
 (
SEC_JIFFIE_SC
 + 29)

	)

76 
	#USEC_JIFFIE_SC
 (
SEC_JIFFIE_SC
 + 19)

	)

77 
	#SEC_CONVERSION
 (()((((
u64
)
NSEC_PER_SEC
 << 
SEC_JIFFIE_SC
Ë+ 
TICK_NSEC
 -1Ë/ (u64)TICK_NSEC))

	)

78 
	#NSEC_CONVERSION
 (()((((
u64
)1 << 
NSEC_JIFFIE_SC
Ë+ 
TICK_NSEC
 -1Ë/ (u64)TICK_NSEC))

	)

79 
	#USEC_CONVERSION
 (()((((
u64
)
NSEC_PER_USEC
 << 
USEC_JIFFIE_SC
Ë+ 
TICK_NSEC
 -1Ë/ (u64)TICK_NSEC))

	)

80 
	#USEC_ROUND
 (
u64
)(((u64)1 << 
USEC_JIFFIE_SC
Ë- 1)

	)

81 #i‡
BITS_PER_LONG
 < 64

82 
	#MAX_SEC_IN_JIFFIES
 ()((
u64
)((u64)
MAX_JIFFY_OFFSET
 * 
TICK_NSEC
Ë/ 
NSEC_PER_SEC
)

	)

84 
	#MAX_SEC_IN_JIFFIES
 (
	`SH_DIV
((
MAX_JIFFY_OFFSET
 >> 
SEC_JIFFIE_SC
Ë* 
TICK_NSEC
, 
NSEC_PER_SEC
, 1Ë- 1)

	)

86 #i‡
HZ
 <(
MSEC_PER_SEC
 && !(MSEC_PER_SEC % HZ))

87 #ñi‡
HZ
 > 
MSEC_PER_SEC
 && !(HZ % MSEC_PER_SEC)

90 #i‡
HZ
 <(
USEC_PER_SEC
 && !(USEC_PER_SEC % HZ))

91 #ñi‡
HZ
 > 
USEC_PER_SEC
 && !(HZ % USEC_PER_SEC)

94 #i‡
HZ
 <(
MSEC_PER_SEC
 && !(MSEC_PER_SEC % HZ))

95 #ñi‡
HZ
 > 
MSEC_PER_SEC
 && !(HZ % MSEC_PER_SEC)

98 #i‡
HZ
 <(
USEC_PER_SEC
 && !(USEC_PER_SEC % HZ))

99 #ñi‡
HZ
 > 
USEC_PER_SEC
 && !(HZ % USEC_PER_SEC)

102 #i‡
TICK_NSEC
 % 
NSEC_PER_SEC
 / 
USER_HZ
 == 0

105 #i‡
HZ
 % 
USER_HZ
 == 0

108 #i‡
TICK_NSEC
 % 
NSEC_PER_SEC
 / 
USER_HZ
 == 0

111 #i‡
NSEC_PER_SEC
 % 
USER_HZ
 == 0

112 #ñi‡(
USER_HZ
 % 512) == 0

	@linux/kd.h

12 #i‚de‡
_LINUX_KD_H


13 
	#_LINUX_KD_H


	)

14 
	~<löux/ty≥s.h
>

15 
	~<löux/compûî.h
>

17 
	#GIO_FONT
 0x4B60

	)

18 
	#PIO_FONT
 0x4B61

	)

20 
	#GIO_FONTX
 0x4B6B

	)

21 
	#PIO_FONTX
 0x4B6C

	)

22 
	sc⁄sﬁef⁄tdesc
 {

23 
	mch¨cou¡
;

24 
	mch¨height
;

25 
__u£r
 *
	mch¨d©a
;

28 
	#PIO_FONTRESET
 0x4B6D

	)

30 
	#GIO_CMAP
 0x4B70

	)

31 
	#PIO_CMAP
 0x4B71

	)

33 
	#KIOCSOUND
 0x4B2F

	)

34 
	#KDMKTONE
 0x4B30

	)

36 
	#KDGETLED
 0x4B31

	)

37 
	#KDSETLED
 0x4B32

	)

38 
	#LED_SCR
 0x01

	)

39 
	#LED_NUM
 0x02

	)

40 
	#LED_CAP
 0x04

	)

42 
	#KDGKBTYPE
 0x4B33

	)

43 
	#KB_84
 0x01

	)

44 
	#KB_101
 0x02

	)

45 
	#KB_OTHER
 0x03

	)

47 
	#KDADDIO
 0x4B34

	)

48 
	#KDDELIO
 0x4B35

	)

49 
	#KDENABIO
 0x4B36

	)

50 
	#KDDISABIO
 0x4B37

	)

52 
	#KDSETMODE
 0x4B3A

	)

53 
	#KD_TEXT
 0x00

	)

54 
	#KD_GRAPHICS
 0x01

	)

55 
	#KD_TEXT0
 0x02

	)

56 
	#KD_TEXT1
 0x03

	)

57 
	#KDGETMODE
 0x4B3B

	)

59 
	#KDMAPDISP
 0x4B3C

	)

60 
	#KDUNMAPDISP
 0x4B3D

	)

62 
	ts¸nm≠_t
;

63 
	#E_TABSZ
 256

	)

64 
	#GIO_SCRNMAP
 0x4B40

	)

65 
	#PIO_SCRNMAP
 0x4B41

	)

66 
	#GIO_UNISCRNMAP
 0x4B69

	)

67 
	#PIO_UNISCRNMAP
 0x4B6A

	)

69 
	#GIO_UNIMAP
 0x4B66

	)

70 
	sunùaú
 {

71 
	municode
;

72 
	mf⁄ços
;

74 
	sunim≠desc
 {

75 
	míåy_˘
;

76 
unùaú
 
__u£r
 *
	míåõs
;

78 
	#PIO_UNIMAP
 0x4B67

	)

79 
	#PIO_UNIMAPCLR
 0x4B68

	)

80 
	sunim≠öô
 {

81 
	madvi£d_hashsize
;

82 
	madvi£d_hash°ï
;

83 
	madvi£d_hashÀvñ
;

86 
	#UNI_DIRECT_BASE
 0xF000

	)

87 
	#UNI_DIRECT_MASK
 0x01FF

	)

89 
	#K_RAW
 0x00

	)

90 
	#K_XLATE
 0x01

	)

91 
	#K_MEDIUMRAW
 0x02

	)

92 
	#K_UNICODE
 0x03

	)

93 
	#KDGKBMODE
 0x4B44

	)

94 
	#KDSKBMODE
 0x4B45

	)

96 
	#K_METABIT
 0x03

	)

97 
	#K_ESCPREFIX
 0x04

	)

98 
	#KDGKBMETA
 0x4B62

	)

99 
	#KDSKBMETA
 0x4B63

	)

101 
	#K_SCROLLLOCK
 0x01

	)

102 
	#K_NUMLOCK
 0x02

	)

103 
	#K_CAPSLOCK
 0x04

	)

104 
	#KDGKBLED
 0x4B64

	)

105 
	#KDSKBLED
 0x4B65

	)

107 
	skbíåy
 {

108 
	mkb_èbÀ
;

109 
	mkb_ödex
;

110 
	mkb_vÆue
;

112 
	#K_NORMTAB
 0x00

	)

113 
	#K_SHIFTTAB
 0x01

	)

114 
	#K_ALTTAB
 0x02

	)

115 
	#K_ALTSHIFTTAB
 0x03

	)

117 
	#KDGKBENT
 0x4B46

	)

118 
	#KDSKBENT
 0x4B47

	)

120 
	skb£¡ry
 {

121 
	mkb_func
;

122 
	mkb_°rög
[512];

124 
	#KDGKBSENT
 0x4B48

	)

125 
	#KDSKBSENT
 0x4B49

	)

127 
	skbdü¸
 {

128 
	mdü¸
, 
	mba£
, 
	mªsu…
;

130 
	skbdü¸s
 {

131 
	mkb_˙t
;

132 
kbdü¸
 
	mkbdü¸
[256];

134 
	#KDGKBDIACR
 0x4B4A

	)

135 
	#KDSKBDIACR
 0x4B4B

	)

137 
	skbkeycode
 {

138 
	msˇncode
, 
	mkeycode
;

140 
	#KDGETKEYCODE
 0x4B4C

	)

141 
	#KDSETKEYCODE
 0x4B4D

	)

143 
	#KDSIGACCEPT
 0x4B4E

	)

145 
	skbd_ª≥©
 {

146 
	mdñay
;

147 
	m≥riod
;

151 
	#KDKBDREP
 0x4B52

	)

153 
	#KDFONTOP
 0x4B72

	)

155 
	sc⁄sﬁe_f⁄t_›
 {

156 
	m›
;

157 
	mÊags
;

158 
	mwidth
, 
	mheight
;

159 
	mch¨cou¡
;

160 
__u£r
 *
	md©a
;

163 
	sc⁄sﬁe_f⁄t
 {

164 
	mwidth
, 
	mheight
;

165 
	mch¨cou¡
;

166 *
	md©a
;

169 
	#KD_FONT_OP_SET
 0

	)

170 
	#KD_FONT_OP_GET
 1

	)

171 
	#KD_FONT_OP_SET_DEFAULT
 2

	)

172 
	#KD_FONT_OP_COPY
 3

	)

174 
	#KD_FONT_FLAG_DONT_RECALC
 1

	)

	@linux/kdev_t.h

12 #i‚de‡
_LINUX_KDEV_T_H


13 
	#_LINUX_KDEV_T_H


	)

15 
	#MAJOR
(
dev
Ë((dev)>>8)

	)

16 
	#MINOR
(
dev
Ë((devË& 0xff)

	)

17 
	#MKDEV
(
ma
,
mi
Ë((ma)<<8 | (mi))

	)

	@linux/kernel.h

12 #i‚de‡
_LINUX_KERNEL_H


13 
	#_LINUX_KERNEL_H


	)

15 
	#SI_LOAD_SHIFT
 16

	)

16 
	ssysöfo
 {

17 
	mu±ime
;

18 
	mlﬂds
[3];

19 
	mtŸÆøm
;

20 
	m‰ìøm
;

21 
	msh¨edøm
;

22 
	mbuf„ºam
;

23 
	mtŸÆsw≠
;

24 
	m‰ìsw≠
;

25 
	m¥ocs
;

26 
	m∑d
;

27 
	mtŸÆhigh
;

28 
	m‰ìhigh
;

29 
	mmem_unô
;

30 
	m_f
[20-2*()-()];

33 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

35 
	#BUILD_BUG_ON_ZERO
(
e
Ë(([1 - 2 * !!”)]Ë- 1)

	)

37 
	#__FUNCTION__
 (
__func__
)

	)

	@linux/kernel_stat.h

12 #i‚de‡
_LINUX_KERNEL_STAT_H


13 
	#_LINUX_KERNEL_STAT_H


	)

15 
	~<asm/úq.h
>

16 
	~<löux/smp.h
>

17 
	~<löux/thªads.h
>

18 
	~<löux/≥r˝u.h
>

19 
	~<löux/˝umask.h
>

20 
	~<asm/˝utime.h
>

22 
	s˝u_ußge_°©
 {

23 
˝utime64_t
 
	mu£r
;

24 
˝utime64_t
 
	mni˚
;

25 
˝utime64_t
 
	msy°em
;

26 
˝utime64_t
 
	mso·úq
;

27 
˝utime64_t
 
	múq
;

28 
˝utime64_t
 
	midÀ
;

29 
˝utime64_t
 
	miowaô
;

30 
˝utime64_t
 
	m°ól
;

33 
	skî√l_°©
 {

34 
˝u_ußge_°©
 
	m˝u°©
;

35 
	múqs
[
NR_IRQS
];

38 
	#k°©_˝u
(
˝u
Ë
	`≥r_˝u
(
k°©
, cpu)

	)

40 
	#k°©_this_˝u
 
	`__gë_˝u_v¨
(
k°©
)

	)

	@linux/kernelcapi.h

12 #i‚de‡
__KERNELCAPI_H__


13 
	#__KERNELCAPI_H__


	)

15 
	#CAPI_MAXAPPL
 240

	)

16 
	#CAPI_MAXCONTR
 32

	)

17 
	#CAPI_MAXDATAWINDOW
 8

	)

19 
	skˇpi_Êagdef
 {

20 
	mc⁄å
;

21 
	mÊag
;

22 } 
	tkˇpi_Êagdef
;

24 
	skˇpi_ˇrddef
 {

25 
	mdrivî
[32];

26 
	mp‹t
;

27 
	múq
;

28 
	mmemba£
;

29 
	mˇrdƒ
;

30 } 
	tkˇpi_ˇrddef
;

32 
	#KCAPI_CMD_TRACE
 10

	)

33 
	#KCAPI_CMD_ADDCARD
 11

	)

35 
	#KCAPI_TRACE_OFF
 0

	)

36 
	#KCAPI_TRACE_SHORT_NO_DATA
 1

	)

37 
	#KCAPI_TRACE_FULL_NO_DATA
 2

	)

38 
	#KCAPI_TRACE_SHORT
 3

	)

39 
	#KCAPI_TRACE_FULL
 4

	)

	@linux/kexec.h

12 #i‚de‡
LINUX_KEXEC_H


13 
	#LINUX_KEXEC_H


	)

15 
	g±_ªgs
;

16 
	gèsk_°ru˘
;

	@linux/key.h

12 #i‚de‡
_LINUX_KEY_H


13 
	#_LINUX_KEY_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/li°.h
>

17 
	~<löux/rbåì.h
>

18 
	~<löux/rcupd©e.h
>

19 
	~<asm/©omic.h
>

	@linux/keyboard.h

12 #i‚de‡
__LINUX_KEYBOARD_H


13 
	#__LINUX_KEYBOARD_H


	)

15 
	~<löux/waô.h
>

17 
	#KG_SHIFT
 0

	)

18 
	#KG_CTRL
 2

	)

19 
	#KG_ALT
 3

	)

20 
	#KG_ALTGR
 1

	)

21 
	#KG_SHIFTL
 4

	)

22 
	#KG_KANASHIFT
 4

	)

23 
	#KG_SHIFTR
 5

	)

24 
	#KG_CTRLL
 6

	)

25 
	#KG_CTRLR
 7

	)

26 
	#KG_CAPSSHIFT
 8

	)

28 
	#NR_SHIFT
 9

	)

30 
	#NR_KEYS
 256

	)

31 
	#MAX_NR_KEYMAPS
 256

	)

33 
	#MAX_NR_OF_USER_KEYMAPS
 256

	)

35 
	#MAX_NR_FUNC
 256

	)

37 
	#KT_LATIN
 0

	)

38 
	#KT_LETTER
 11

	)

39 
	#KT_FN
 1

	)

40 
	#KT_SPEC
 2

	)

41 
	#KT_PAD
 3

	)

42 
	#KT_DEAD
 4

	)

43 
	#KT_CONS
 5

	)

44 
	#KT_CUR
 6

	)

45 
	#KT_SHIFT
 7

	)

46 
	#KT_META
 8

	)

47 
	#KT_ASCII
 9

	)

48 
	#KT_LOCK
 10

	)

49 
	#KT_SLOCK
 12

	)

50 
	#KT_BRL
 14

	)

52 
	#K
(
t
,
v
Ë((—)<<8)|(v))

	)

53 
	#KTYP
(
x
Ë((xË>> 8)

	)

54 
	#KVAL
(
x
Ë((xË& 0xff)

	)

56 
	#K_F1
 
	`K
(
KT_FN
,0)

	)

57 
	#K_F2
 
	`K
(
KT_FN
,1)

	)

58 
	#K_F3
 
	`K
(
KT_FN
,2)

	)

59 
	#K_F4
 
	`K
(
KT_FN
,3)

	)

60 
	#K_F5
 
	`K
(
KT_FN
,4)

	)

61 
	#K_F6
 
	`K
(
KT_FN
,5)

	)

62 
	#K_F7
 
	`K
(
KT_FN
,6)

	)

63 
	#K_F8
 
	`K
(
KT_FN
,7)

	)

64 
	#K_F9
 
	`K
(
KT_FN
,8)

	)

65 
	#K_F10
 
	`K
(
KT_FN
,9)

	)

66 
	#K_F11
 
	`K
(
KT_FN
,10)

	)

67 
	#K_F12
 
	`K
(
KT_FN
,11)

	)

68 
	#K_F13
 
	`K
(
KT_FN
,12)

	)

69 
	#K_F14
 
	`K
(
KT_FN
,13)

	)

70 
	#K_F15
 
	`K
(
KT_FN
,14)

	)

71 
	#K_F16
 
	`K
(
KT_FN
,15)

	)

72 
	#K_F17
 
	`K
(
KT_FN
,16)

	)

73 
	#K_F18
 
	`K
(
KT_FN
,17)

	)

74 
	#K_F19
 
	`K
(
KT_FN
,18)

	)

75 
	#K_F20
 
	`K
(
KT_FN
,19)

	)

76 
	#K_FIND
 
	`K
(
KT_FN
,20)

	)

77 
	#K_INSERT
 
	`K
(
KT_FN
,21)

	)

78 
	#K_REMOVE
 
	`K
(
KT_FN
,22)

	)

79 
	#K_SELECT
 
	`K
(
KT_FN
,23)

	)

80 
	#K_PGUP
 
	`K
(
KT_FN
,24)

	)

81 
	#K_PGDN
 
	`K
(
KT_FN
,25)

	)

82 
	#K_MACRO
 
	`K
(
KT_FN
,26)

	)

83 
	#K_HELP
 
	`K
(
KT_FN
,27)

	)

84 
	#K_DO
 
	`K
(
KT_FN
,28)

	)

85 
	#K_PAUSE
 
	`K
(
KT_FN
,29)

	)

86 
	#K_F21
 
	`K
(
KT_FN
,30)

	)

87 
	#K_F22
 
	`K
(
KT_FN
,31)

	)

88 
	#K_F23
 
	`K
(
KT_FN
,32)

	)

89 
	#K_F24
 
	`K
(
KT_FN
,33)

	)

90 
	#K_F25
 
	`K
(
KT_FN
,34)

	)

91 
	#K_F26
 
	`K
(
KT_FN
,35)

	)

92 
	#K_F27
 
	`K
(
KT_FN
,36)

	)

93 
	#K_F28
 
	`K
(
KT_FN
,37)

	)

94 
	#K_F29
 
	`K
(
KT_FN
,38)

	)

95 
	#K_F30
 
	`K
(
KT_FN
,39)

	)

96 
	#K_F31
 
	`K
(
KT_FN
,40)

	)

97 
	#K_F32
 
	`K
(
KT_FN
,41)

	)

98 
	#K_F33
 
	`K
(
KT_FN
,42)

	)

99 
	#K_F34
 
	`K
(
KT_FN
,43)

	)

100 
	#K_F35
 
	`K
(
KT_FN
,44)

	)

101 
	#K_F36
 
	`K
(
KT_FN
,45)

	)

102 
	#K_F37
 
	`K
(
KT_FN
,46)

	)

103 
	#K_F38
 
	`K
(
KT_FN
,47)

	)

104 
	#K_F39
 
	`K
(
KT_FN
,48)

	)

105 
	#K_F40
 
	`K
(
KT_FN
,49)

	)

106 
	#K_F41
 
	`K
(
KT_FN
,50)

	)

107 
	#K_F42
 
	`K
(
KT_FN
,51)

	)

108 
	#K_F43
 
	`K
(
KT_FN
,52)

	)

109 
	#K_F44
 
	`K
(
KT_FN
,53)

	)

110 
	#K_F45
 
	`K
(
KT_FN
,54)

	)

111 
	#K_F46
 
	`K
(
KT_FN
,55)

	)

112 
	#K_F47
 
	`K
(
KT_FN
,56)

	)

113 
	#K_F48
 
	`K
(
KT_FN
,57)

	)

114 
	#K_F49
 
	`K
(
KT_FN
,58)

	)

115 
	#K_F50
 
	`K
(
KT_FN
,59)

	)

116 
	#K_F51
 
	`K
(
KT_FN
,60)

	)

117 
	#K_F52
 
	`K
(
KT_FN
,61)

	)

118 
	#K_F53
 
	`K
(
KT_FN
,62)

	)

119 
	#K_F54
 
	`K
(
KT_FN
,63)

	)

120 
	#K_F55
 
	`K
(
KT_FN
,64)

	)

121 
	#K_F56
 
	`K
(
KT_FN
,65)

	)

122 
	#K_F57
 
	`K
(
KT_FN
,66)

	)

123 
	#K_F58
 
	`K
(
KT_FN
,67)

	)

124 
	#K_F59
 
	`K
(
KT_FN
,68)

	)

125 
	#K_F60
 
	`K
(
KT_FN
,69)

	)

126 
	#K_F61
 
	`K
(
KT_FN
,70)

	)

127 
	#K_F62
 
	`K
(
KT_FN
,71)

	)

128 
	#K_F63
 
	`K
(
KT_FN
,72)

	)

129 
	#K_F64
 
	`K
(
KT_FN
,73)

	)

130 
	#K_F65
 
	`K
(
KT_FN
,74)

	)

131 
	#K_F66
 
	`K
(
KT_FN
,75)

	)

132 
	#K_F67
 
	`K
(
KT_FN
,76)

	)

133 
	#K_F68
 
	`K
(
KT_FN
,77)

	)

134 
	#K_F69
 
	`K
(
KT_FN
,78)

	)

135 
	#K_F70
 
	`K
(
KT_FN
,79)

	)

136 
	#K_F71
 
	`K
(
KT_FN
,80)

	)

137 
	#K_F72
 
	`K
(
KT_FN
,81)

	)

138 
	#K_F73
 
	`K
(
KT_FN
,82)

	)

139 
	#K_F74
 
	`K
(
KT_FN
,83)

	)

140 
	#K_F75
 
	`K
(
KT_FN
,84)

	)

141 
	#K_F76
 
	`K
(
KT_FN
,85)

	)

142 
	#K_F77
 
	`K
(
KT_FN
,86)

	)

143 
	#K_F78
 
	`K
(
KT_FN
,87)

	)

144 
	#K_F79
 
	`K
(
KT_FN
,88)

	)

145 
	#K_F80
 
	`K
(
KT_FN
,89)

	)

146 
	#K_F81
 
	`K
(
KT_FN
,90)

	)

147 
	#K_F82
 
	`K
(
KT_FN
,91)

	)

148 
	#K_F83
 
	`K
(
KT_FN
,92)

	)

149 
	#K_F84
 
	`K
(
KT_FN
,93)

	)

150 
	#K_F85
 
	`K
(
KT_FN
,94)

	)

151 
	#K_F86
 
	`K
(
KT_FN
,95)

	)

152 
	#K_F87
 
	`K
(
KT_FN
,96)

	)

153 
	#K_F88
 
	`K
(
KT_FN
,97)

	)

154 
	#K_F89
 
	`K
(
KT_FN
,98)

	)

155 
	#K_F90
 
	`K
(
KT_FN
,99)

	)

156 
	#K_F91
 
	`K
(
KT_FN
,100)

	)

157 
	#K_F92
 
	`K
(
KT_FN
,101)

	)

158 
	#K_F93
 
	`K
(
KT_FN
,102)

	)

159 
	#K_F94
 
	`K
(
KT_FN
,103)

	)

160 
	#K_F95
 
	`K
(
KT_FN
,104)

	)

161 
	#K_F96
 
	`K
(
KT_FN
,105)

	)

162 
	#K_F97
 
	`K
(
KT_FN
,106)

	)

163 
	#K_F98
 
	`K
(
KT_FN
,107)

	)

164 
	#K_F99
 
	`K
(
KT_FN
,108)

	)

165 
	#K_F100
 
	`K
(
KT_FN
,109)

	)

166 
	#K_F101
 
	`K
(
KT_FN
,110)

	)

167 
	#K_F102
 
	`K
(
KT_FN
,111)

	)

168 
	#K_F103
 
	`K
(
KT_FN
,112)

	)

169 
	#K_F104
 
	`K
(
KT_FN
,113)

	)

170 
	#K_F105
 
	`K
(
KT_FN
,114)

	)

171 
	#K_F106
 
	`K
(
KT_FN
,115)

	)

172 
	#K_F107
 
	`K
(
KT_FN
,116)

	)

173 
	#K_F108
 
	`K
(
KT_FN
,117)

	)

174 
	#K_F109
 
	`K
(
KT_FN
,118)

	)

175 
	#K_F110
 
	`K
(
KT_FN
,119)

	)

176 
	#K_F111
 
	`K
(
KT_FN
,120)

	)

177 
	#K_F112
 
	`K
(
KT_FN
,121)

	)

178 
	#K_F113
 
	`K
(
KT_FN
,122)

	)

179 
	#K_F114
 
	`K
(
KT_FN
,123)

	)

180 
	#K_F115
 
	`K
(
KT_FN
,124)

	)

181 
	#K_F116
 
	`K
(
KT_FN
,125)

	)

182 
	#K_F117
 
	`K
(
KT_FN
,126)

	)

183 
	#K_F118
 
	`K
(
KT_FN
,127)

	)

184 
	#K_F119
 
	`K
(
KT_FN
,128)

	)

185 
	#K_F120
 
	`K
(
KT_FN
,129)

	)

186 
	#K_F121
 
	`K
(
KT_FN
,130)

	)

187 
	#K_F122
 
	`K
(
KT_FN
,131)

	)

188 
	#K_F123
 
	`K
(
KT_FN
,132)

	)

189 
	#K_F124
 
	`K
(
KT_FN
,133)

	)

190 
	#K_F125
 
	`K
(
KT_FN
,134)

	)

191 
	#K_F126
 
	`K
(
KT_FN
,135)

	)

192 
	#K_F127
 
	`K
(
KT_FN
,136)

	)

193 
	#K_F128
 
	`K
(
KT_FN
,137)

	)

194 
	#K_F129
 
	`K
(
KT_FN
,138)

	)

195 
	#K_F130
 
	`K
(
KT_FN
,139)

	)

196 
	#K_F131
 
	`K
(
KT_FN
,140)

	)

197 
	#K_F132
 
	`K
(
KT_FN
,141)

	)

198 
	#K_F133
 
	`K
(
KT_FN
,142)

	)

199 
	#K_F134
 
	`K
(
KT_FN
,143)

	)

200 
	#K_F135
 
	`K
(
KT_FN
,144)

	)

201 
	#K_F136
 
	`K
(
KT_FN
,145)

	)

202 
	#K_F137
 
	`K
(
KT_FN
,146)

	)

203 
	#K_F138
 
	`K
(
KT_FN
,147)

	)

204 
	#K_F139
 
	`K
(
KT_FN
,148)

	)

205 
	#K_F140
 
	`K
(
KT_FN
,149)

	)

206 
	#K_F141
 
	`K
(
KT_FN
,150)

	)

207 
	#K_F142
 
	`K
(
KT_FN
,151)

	)

208 
	#K_F143
 
	`K
(
KT_FN
,152)

	)

209 
	#K_F144
 
	`K
(
KT_FN
,153)

	)

210 
	#K_F145
 
	`K
(
KT_FN
,154)

	)

211 
	#K_F146
 
	`K
(
KT_FN
,155)

	)

212 
	#K_F147
 
	`K
(
KT_FN
,156)

	)

213 
	#K_F148
 
	`K
(
KT_FN
,157)

	)

214 
	#K_F149
 
	`K
(
KT_FN
,158)

	)

215 
	#K_F150
 
	`K
(
KT_FN
,159)

	)

216 
	#K_F151
 
	`K
(
KT_FN
,160)

	)

217 
	#K_F152
 
	`K
(
KT_FN
,161)

	)

218 
	#K_F153
 
	`K
(
KT_FN
,162)

	)

219 
	#K_F154
 
	`K
(
KT_FN
,163)

	)

220 
	#K_F155
 
	`K
(
KT_FN
,164)

	)

221 
	#K_F156
 
	`K
(
KT_FN
,165)

	)

222 
	#K_F157
 
	`K
(
KT_FN
,166)

	)

223 
	#K_F158
 
	`K
(
KT_FN
,167)

	)

224 
	#K_F159
 
	`K
(
KT_FN
,168)

	)

225 
	#K_F160
 
	`K
(
KT_FN
,169)

	)

226 
	#K_F161
 
	`K
(
KT_FN
,170)

	)

227 
	#K_F162
 
	`K
(
KT_FN
,171)

	)

228 
	#K_F163
 
	`K
(
KT_FN
,172)

	)

229 
	#K_F164
 
	`K
(
KT_FN
,173)

	)

230 
	#K_F165
 
	`K
(
KT_FN
,174)

	)

231 
	#K_F166
 
	`K
(
KT_FN
,175)

	)

232 
	#K_F167
 
	`K
(
KT_FN
,176)

	)

233 
	#K_F168
 
	`K
(
KT_FN
,177)

	)

234 
	#K_F169
 
	`K
(
KT_FN
,178)

	)

235 
	#K_F170
 
	`K
(
KT_FN
,179)

	)

236 
	#K_F171
 
	`K
(
KT_FN
,180)

	)

237 
	#K_F172
 
	`K
(
KT_FN
,181)

	)

238 
	#K_F173
 
	`K
(
KT_FN
,182)

	)

239 
	#K_F174
 
	`K
(
KT_FN
,183)

	)

240 
	#K_F175
 
	`K
(
KT_FN
,184)

	)

241 
	#K_F176
 
	`K
(
KT_FN
,185)

	)

242 
	#K_F177
 
	`K
(
KT_FN
,186)

	)

243 
	#K_F178
 
	`K
(
KT_FN
,187)

	)

244 
	#K_F179
 
	`K
(
KT_FN
,188)

	)

245 
	#K_F180
 
	`K
(
KT_FN
,189)

	)

246 
	#K_F181
 
	`K
(
KT_FN
,190)

	)

247 
	#K_F182
 
	`K
(
KT_FN
,191)

	)

248 
	#K_F183
 
	`K
(
KT_FN
,192)

	)

249 
	#K_F184
 
	`K
(
KT_FN
,193)

	)

250 
	#K_F185
 
	`K
(
KT_FN
,194)

	)

251 
	#K_F186
 
	`K
(
KT_FN
,195)

	)

252 
	#K_F187
 
	`K
(
KT_FN
,196)

	)

253 
	#K_F188
 
	`K
(
KT_FN
,197)

	)

254 
	#K_F189
 
	`K
(
KT_FN
,198)

	)

255 
	#K_F190
 
	`K
(
KT_FN
,199)

	)

256 
	#K_F191
 
	`K
(
KT_FN
,200)

	)

257 
	#K_F192
 
	`K
(
KT_FN
,201)

	)

258 
	#K_F193
 
	`K
(
KT_FN
,202)

	)

259 
	#K_F194
 
	`K
(
KT_FN
,203)

	)

260 
	#K_F195
 
	`K
(
KT_FN
,204)

	)

261 
	#K_F196
 
	`K
(
KT_FN
,205)

	)

262 
	#K_F197
 
	`K
(
KT_FN
,206)

	)

263 
	#K_F198
 
	`K
(
KT_FN
,207)

	)

264 
	#K_F199
 
	`K
(
KT_FN
,208)

	)

265 
	#K_F200
 
	`K
(
KT_FN
,209)

	)

266 
	#K_F201
 
	`K
(
KT_FN
,210)

	)

267 
	#K_F202
 
	`K
(
KT_FN
,211)

	)

268 
	#K_F203
 
	`K
(
KT_FN
,212)

	)

269 
	#K_F204
 
	`K
(
KT_FN
,213)

	)

270 
	#K_F205
 
	`K
(
KT_FN
,214)

	)

271 
	#K_F206
 
	`K
(
KT_FN
,215)

	)

272 
	#K_F207
 
	`K
(
KT_FN
,216)

	)

273 
	#K_F208
 
	`K
(
KT_FN
,217)

	)

274 
	#K_F209
 
	`K
(
KT_FN
,218)

	)

275 
	#K_F210
 
	`K
(
KT_FN
,219)

	)

276 
	#K_F211
 
	`K
(
KT_FN
,220)

	)

277 
	#K_F212
 
	`K
(
KT_FN
,221)

	)

278 
	#K_F213
 
	`K
(
KT_FN
,222)

	)

279 
	#K_F214
 
	`K
(
KT_FN
,223)

	)

280 
	#K_F215
 
	`K
(
KT_FN
,224)

	)

281 
	#K_F216
 
	`K
(
KT_FN
,225)

	)

282 
	#K_F217
 
	`K
(
KT_FN
,226)

	)

283 
	#K_F218
 
	`K
(
KT_FN
,227)

	)

284 
	#K_F219
 
	`K
(
KT_FN
,228)

	)

285 
	#K_F220
 
	`K
(
KT_FN
,229)

	)

286 
	#K_F221
 
	`K
(
KT_FN
,230)

	)

287 
	#K_F222
 
	`K
(
KT_FN
,231)

	)

288 
	#K_F223
 
	`K
(
KT_FN
,232)

	)

289 
	#K_F224
 
	`K
(
KT_FN
,233)

	)

290 
	#K_F225
 
	`K
(
KT_FN
,234)

	)

291 
	#K_F226
 
	`K
(
KT_FN
,235)

	)

292 
	#K_F227
 
	`K
(
KT_FN
,236)

	)

293 
	#K_F228
 
	`K
(
KT_FN
,237)

	)

294 
	#K_F229
 
	`K
(
KT_FN
,238)

	)

295 
	#K_F230
 
	`K
(
KT_FN
,239)

	)

296 
	#K_F231
 
	`K
(
KT_FN
,240)

	)

297 
	#K_F232
 
	`K
(
KT_FN
,241)

	)

298 
	#K_F233
 
	`K
(
KT_FN
,242)

	)

299 
	#K_F234
 
	`K
(
KT_FN
,243)

	)

300 
	#K_F235
 
	`K
(
KT_FN
,244)

	)

301 
	#K_F236
 
	`K
(
KT_FN
,245)

	)

302 
	#K_F237
 
	`K
(
KT_FN
,246)

	)

303 
	#K_F238
 
	`K
(
KT_FN
,247)

	)

304 
	#K_F239
 
	`K
(
KT_FN
,248)

	)

305 
	#K_F240
 
	`K
(
KT_FN
,249)

	)

306 
	#K_F241
 
	`K
(
KT_FN
,250)

	)

307 
	#K_F242
 
	`K
(
KT_FN
,251)

	)

308 
	#K_F243
 
	`K
(
KT_FN
,252)

	)

309 
	#K_F244
 
	`K
(
KT_FN
,253)

	)

310 
	#K_F245
 
	`K
(
KT_FN
,254)

	)

311 
	#K_UNDO
 
	`K
(
KT_FN
,255)

	)

313 
	#K_HOLE
 
	`K
(
KT_SPEC
,0)

	)

314 
	#K_ENTER
 
	`K
(
KT_SPEC
,1)

	)

315 
	#K_SH_REGS
 
	`K
(
KT_SPEC
,2)

	)

316 
	#K_SH_MEM
 
	`K
(
KT_SPEC
,3)

	)

317 
	#K_SH_STAT
 
	`K
(
KT_SPEC
,4)

	)

318 
	#K_BREAK
 
	`K
(
KT_SPEC
,5)

	)

319 
	#K_CONS
 
	`K
(
KT_SPEC
,6)

	)

320 
	#K_CAPS
 
	`K
(
KT_SPEC
,7)

	)

321 
	#K_NUM
 
	`K
(
KT_SPEC
,8)

	)

322 
	#K_HOLD
 
	`K
(
KT_SPEC
,9)

	)

323 
	#K_SCROLLFORW
 
	`K
(
KT_SPEC
,10)

	)

324 
	#K_SCROLLBACK
 
	`K
(
KT_SPEC
,11)

	)

325 
	#K_BOOT
 
	`K
(
KT_SPEC
,12)

	)

326 
	#K_CAPSON
 
	`K
(
KT_SPEC
,13)

	)

327 
	#K_COMPOSE
 
	`K
(
KT_SPEC
,14)

	)

328 
	#K_SAK
 
	`K
(
KT_SPEC
,15)

	)

329 
	#K_DECRCONSOLE
 
	`K
(
KT_SPEC
,16)

	)

330 
	#K_INCRCONSOLE
 
	`K
(
KT_SPEC
,17)

	)

331 
	#K_SPAWNCONSOLE
 
	`K
(
KT_SPEC
,18)

	)

332 
	#K_BARENUMLOCK
 
	`K
(
KT_SPEC
,19)

	)

334 
	#K_ALLOCATED
 
	`K
(
KT_SPEC
,126)

	)

335 
	#K_NOSUCHMAP
 
	`K
(
KT_SPEC
,127)

	)

337 
	#K_P0
 
	`K
(
KT_PAD
,0)

	)

338 
	#K_P1
 
	`K
(
KT_PAD
,1)

	)

339 
	#K_P2
 
	`K
(
KT_PAD
,2)

	)

340 
	#K_P3
 
	`K
(
KT_PAD
,3)

	)

341 
	#K_P4
 
	`K
(
KT_PAD
,4)

	)

342 
	#K_P5
 
	`K
(
KT_PAD
,5)

	)

343 
	#K_P6
 
	`K
(
KT_PAD
,6)

	)

344 
	#K_P7
 
	`K
(
KT_PAD
,7)

	)

345 
	#K_P8
 
	`K
(
KT_PAD
,8)

	)

346 
	#K_P9
 
	`K
(
KT_PAD
,9)

	)

347 
	#K_PPLUS
 
	`K
(
KT_PAD
,10)

	)

348 
	#K_PMINUS
 
	`K
(
KT_PAD
,11)

	)

349 
	#K_PSTAR
 
	`K
(
KT_PAD
,12)

	)

350 
	#K_PSLASH
 
	`K
(
KT_PAD
,13)

	)

351 
	#K_PENTER
 
	`K
(
KT_PAD
,14)

	)

352 
	#K_PCOMMA
 
	`K
(
KT_PAD
,15)

	)

353 
	#K_PDOT
 
	`K
(
KT_PAD
,16)

	)

354 
	#K_PPLUSMINUS
 
	`K
(
KT_PAD
,17)

	)

355 
	#K_PPARENL
 
	`K
(
KT_PAD
,18)

	)

356 
	#K_PPARENR
 
	`K
(
KT_PAD
,19)

	)

358 
	#NR_PAD
 20

	)

360 
	#K_DGRAVE
 
	`K
(
KT_DEAD
,0)

	)

361 
	#K_DACUTE
 
	`K
(
KT_DEAD
,1)

	)

362 
	#K_DCIRCM
 
	`K
(
KT_DEAD
,2)

	)

363 
	#K_DTILDE
 
	`K
(
KT_DEAD
,3)

	)

364 
	#K_DDIERE
 
	`K
(
KT_DEAD
,4)

	)

365 
	#K_DCEDIL
 
	`K
(
KT_DEAD
,5)

	)

367 
	#NR_DEAD
 6

	)

369 
	#K_DOWN
 
	`K
(
KT_CUR
,0)

	)

370 
	#K_LEFT
 
	`K
(
KT_CUR
,1)

	)

371 
	#K_RIGHT
 
	`K
(
KT_CUR
,2)

	)

372 
	#K_UP
 
	`K
(
KT_CUR
,3)

	)

374 
	#K_SHIFT
 
	`K
(
KT_SHIFT
,
KG_SHIFT
)

	)

375 
	#K_CTRL
 
	`K
(
KT_SHIFT
,
KG_CTRL
)

	)

376 
	#K_ALT
 
	`K
(
KT_SHIFT
,
KG_ALT
)

	)

377 
	#K_ALTGR
 
	`K
(
KT_SHIFT
,
KG_ALTGR
)

	)

378 
	#K_SHIFTL
 
	`K
(
KT_SHIFT
,
KG_SHIFTL
)

	)

379 
	#K_SHIFTR
 
	`K
(
KT_SHIFT
,
KG_SHIFTR
)

	)

380 
	#K_CTRLL
 
	`K
(
KT_SHIFT
,
KG_CTRLL
)

	)

381 
	#K_CTRLR
 
	`K
(
KT_SHIFT
,
KG_CTRLR
)

	)

382 
	#K_CAPSSHIFT
 
	`K
(
KT_SHIFT
,
KG_CAPSSHIFT
)

	)

384 
	#K_ASC0
 
	`K
(
KT_ASCII
,0)

	)

385 
	#K_ASC1
 
	`K
(
KT_ASCII
,1)

	)

386 
	#K_ASC2
 
	`K
(
KT_ASCII
,2)

	)

387 
	#K_ASC3
 
	`K
(
KT_ASCII
,3)

	)

388 
	#K_ASC4
 
	`K
(
KT_ASCII
,4)

	)

389 
	#K_ASC5
 
	`K
(
KT_ASCII
,5)

	)

390 
	#K_ASC6
 
	`K
(
KT_ASCII
,6)

	)

391 
	#K_ASC7
 
	`K
(
KT_ASCII
,7)

	)

392 
	#K_ASC8
 
	`K
(
KT_ASCII
,8)

	)

393 
	#K_ASC9
 
	`K
(
KT_ASCII
,9)

	)

394 
	#K_HEX0
 
	`K
(
KT_ASCII
,10)

	)

395 
	#K_HEX1
 
	`K
(
KT_ASCII
,11)

	)

396 
	#K_HEX2
 
	`K
(
KT_ASCII
,12)

	)

397 
	#K_HEX3
 
	`K
(
KT_ASCII
,13)

	)

398 
	#K_HEX4
 
	`K
(
KT_ASCII
,14)

	)

399 
	#K_HEX5
 
	`K
(
KT_ASCII
,15)

	)

400 
	#K_HEX6
 
	`K
(
KT_ASCII
,16)

	)

401 
	#K_HEX7
 
	`K
(
KT_ASCII
,17)

	)

402 
	#K_HEX8
 
	`K
(
KT_ASCII
,18)

	)

403 
	#K_HEX9
 
	`K
(
KT_ASCII
,19)

	)

404 
	#K_HEXa
 
	`K
(
KT_ASCII
,20)

	)

405 
	#K_HEXb
 
	`K
(
KT_ASCII
,21)

	)

406 
	#K_HEXc
 
	`K
(
KT_ASCII
,22)

	)

407 
	#K_HEXd
 
	`K
(
KT_ASCII
,23)

	)

408 
	#K_HEXe
 
	`K
(
KT_ASCII
,24)

	)

409 
	#K_HEXf
 
	`K
(
KT_ASCII
,25)

	)

411 
	#NR_ASCII
 26

	)

413 
	#K_SHIFTLOCK
 
	`K
(
KT_LOCK
,
KG_SHIFT
)

	)

414 
	#K_CTRLLOCK
 
	`K
(
KT_LOCK
,
KG_CTRL
)

	)

415 
	#K_ALTLOCK
 
	`K
(
KT_LOCK
,
KG_ALT
)

	)

416 
	#K_ALTGRLOCK
 
	`K
(
KT_LOCK
,
KG_ALTGR
)

	)

417 
	#K_SHIFTLLOCK
 
	`K
(
KT_LOCK
,
KG_SHIFTL
)

	)

418 
	#K_SHIFTRLOCK
 
	`K
(
KT_LOCK
,
KG_SHIFTR
)

	)

419 
	#K_CTRLLLOCK
 
	`K
(
KT_LOCK
,
KG_CTRLL
)

	)

420 
	#K_CTRLRLOCK
 
	`K
(
KT_LOCK
,
KG_CTRLR
)

	)

422 
	#K_SHIFT_SLOCK
 
	`K
(
KT_SLOCK
,
KG_SHIFT
)

	)

423 
	#K_CTRL_SLOCK
 
	`K
(
KT_SLOCK
,
KG_CTRL
)

	)

424 
	#K_ALT_SLOCK
 
	`K
(
KT_SLOCK
,
KG_ALT
)

	)

425 
	#K_ALTGR_SLOCK
 
	`K
(
KT_SLOCK
,
KG_ALTGR
)

	)

426 
	#K_SHIFTL_SLOCK
 
	`K
(
KT_SLOCK
,
KG_SHIFTL
)

	)

427 
	#K_SHIFTR_SLOCK
 
	`K
(
KT_SLOCK
,
KG_SHIFTR
)

	)

428 
	#K_CTRLL_SLOCK
 
	`K
(
KT_SLOCK
,
KG_CTRLL
)

	)

429 
	#K_CTRLR_SLOCK
 
	`K
(
KT_SLOCK
,
KG_CTRLR
)

	)

431 
	#NR_LOCK
 8

	)

433 
	#K_BRL_BLANK
 
	`K
(
KT_BRL
, 0)

	)

434 
	#K_BRL_DOT1
 
	`K
(
KT_BRL
, 1)

	)

435 
	#K_BRL_DOT2
 
	`K
(
KT_BRL
, 2)

	)

436 
	#K_BRL_DOT3
 
	`K
(
KT_BRL
, 3)

	)

437 
	#K_BRL_DOT4
 
	`K
(
KT_BRL
, 4)

	)

438 
	#K_BRL_DOT5
 
	`K
(
KT_BRL
, 5)

	)

439 
	#K_BRL_DOT6
 
	`K
(
KT_BRL
, 6)

	)

440 
	#K_BRL_DOT7
 
	`K
(
KT_BRL
, 7)

	)

441 
	#K_BRL_DOT8
 
	`K
(
KT_BRL
, 8)

	)

443 
	#NR_BRL
 9

	)

445 
	#MAX_DIACR
 256

	)

	@linux/keychord.h

12 #i‚de‡
__LINUX_KEYCHORD_H_


13 
	#__LINUX_KEYCHORD_H_


	)

15 
	~<löux/öput.h
>

17 
	#KEYCHORD_VERSION
 1

	)

19 
	söput_keych‹d
 {

21 
__u16
 
	mvîsi⁄
;

23 
__u16
 
	mid
;

25 
__u16
 
	mcou¡
;

27 
__u16
 
	mkeycodes
[];

	@linux/klist.h

12 #i‚de‡
_LINUX_KLIST_H


13 
	#_LINUX_KLIST_H


	)

15 
	~<löux/•ölock.h
>

16 
	~<löux/com∂ëi⁄.h
>

17 
	~<löux/kªf.h
>

18 
	~<löux/li°.h
>

20 
	gkli°_node
;

21 
	skli°
 {

22 
•ölock_t
 
	mk_lock
;

23 
li°_hód
 
	mk_li°
;

24 (*
	mgë
)(
	mkli°_node
 *);

25 (*
	mput
)(
	mkli°_node
 *);

28 
	skli°_node
 {

29 
kli°
 * 
	mn_kli°
;

30 
li°_hód
 
	mn_node
;

31 
kªf
 
	mn_ªf
;

32 
com∂ëi⁄
 
	mn_ªmoved
;

35 
	skli°_ôî
 {

36 
kli°
 * 
	mi_kli°
;

37 
li°_hód
 * 
	mi_hód
;

38 
kli°_node
 * 
	mi_cur
;

	@linux/kmod.h

12 #i‚de‡
__LINUX_KMOD_H__


13 
	#__LINUX_KMOD_H__


	)

15 
	~<löux/°ddef.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/compûî.h
>

19 
	#KMOD_PATH_LEN
 256

	)

21 
	#åy_thí_ªque°_moduÀ
(
x
, 
mod
...Ë((xË?: (
	`ªque°_moduÀ
(mod), (x)))

	)

	@linux/kobject.h

12 #i‚de‡
_KOBJECT_H_


13 
	#_KOBJECT_H_


	)

	@linux/kref.h

12 #i‚de‡
_KREF_H_


13 
	#_KREF_H_


	)

	@linux/ktime.h

12 #i‚de‡
_LINUX_KTIME_H


13 
	#_LINUX_KTIME_H


	)

15 
	~<löux/time.h
>

16 
	~<löux/jiffõs.h
>

19 
s64
 
	mtv64
;

20 #i‡
BITS_PER_LONG
 !(64 && !
deföed
(
CONFIG_KTIME_SCALAR
))

22 #ifde‡
__BIG_ENDIAN


23 
s32
 
	m£c
, 
	mn£c
;

25 
s32
 
	mn£c
, 
	m£c
;

27 } 
	mtv
;

29 } 
	tktime_t
;

31 
	#KTIME_MAX
 ((
s64
)~((
u64
)1 << 63))

	)

32 
	#KTIME_SEC_MAX
 (
KTIME_MAX
 / 
NSEC_PER_SEC
)

	)

34 #i‡
BITS_PER_LONG
 == 64

36 #i‡
BITS_PER_LONG
 == 64

38 
	#ktime_sub
(
lhs
, 
rhs
Ë({ (
ktime_t
){ .
tv64
 = (lhs).tv64 - (rhs).tv64 }; })

	)

39 
	#ktime_add
(
lhs
, 
rhs
Ë({ (
ktime_t
){ .
tv64
 = (lhs).tv64 + (rhs).tv64 }; })

	)

40 
	#ktime_add_ns
(
kt
, 
nsvÆ
Ë({ (
ktime_t
){ .
tv64
 = (kt).tv64 + (nsvÆË}; })

	)

41 
	#ktime_to_time•ec
(
kt
Ë
	`ns_to_time•ec
((kt).
tv64
)

	)

42 
	#ktime_to_timevÆ
(
kt
Ë
	`ns_to_timevÆ
((kt).
tv64
)

	)

43 
	#ktime_to_ns
(
kt
Ë((kt).
tv64
)

	)

47 
	#KTIME_REALTIME_RES
 (
ktime_t
){ .
tv64
 = 
TICK_NSEC
 }

	)

48 
	#KTIME_MONOTONIC_RES
 (
ktime_t
){ .
tv64
 = 
TICK_NSEC
 }

	)

50 
	#ktime_gë_ªÆ_ts
(
ts
Ë
	`gën°imeofday
—s)

	)

	@linux/limits.h

12 #i‚de‡
_LINUX_LIMITS_H


13 
	#_LINUX_LIMITS_H


	)

15 
	#NR_OPEN
 1024

	)

17 
	#NGROUPS_MAX
 65536

	)

18 
	#ARG_MAX
 131072

	)

19 
	#CHILD_MAX
 999

	)

20 
	#OPEN_MAX
 256

	)

21 
	#LINK_MAX
 127

	)

22 
	#MAX_CANON
 255

	)

23 
	#MAX_INPUT
 255

	)

24 
	#NAME_MAX
 255

	)

25 
	#PATH_MAX
 4096

	)

26 
	#PIPE_BUF
 4096

	)

27 
	#XATTR_NAME_MAX
 255

	)

28 
	#XATTR_SIZE_MAX
 65536

	)

29 
	#XATTR_LIST_MAX
 65536

	)

31 
	#RTSIG_MAX
 32

	)

	@linux/linkage.h

12 #i‚de‡
_LINUX_LINKAGE_H


13 
	#_LINUX_LINKAGE_H


	)

15 
	~<asm/lökage.h
>

17 #ifde‡
__˝lu•lus


18 
	#CPP_ASMLINKAGE
 "C"

	)

20 
	#CPP_ASMLINKAGE


	)

23 #i‚de‡
asmlökage


24 
	#asmlökage
 
CPP_ASMLINKAGE


	)

27 #i‚de‡
¥evít_èû_ˇŒ


28 
	#¥evít_èû_ˇŒ
(
ªt
Ëdÿ{ } 0)

	)

31 #i‚de‡
__ALIGN


32 
	#__ALIGN
 .
Æign
 4,0x90

	)

33 
	#__ALIGN_STR
 ".Æig¿4,0x90"

	)

36 #ifde‡
__ASSEMBLY__


38 
	#ALIGN
 
__ALIGN


	)

39 
	#ALIGN_STR
 
__ALIGN_STR


	)

41 #i‚de‡
ENTRY


42 
	#ENTRY
(
«me
Ë.
globl
Çame; 
ALIGN
;Çame:

	)

45 
	#KPROBE_ENTRY
(
«me
Ë.
£˘i⁄
 .
k¥obes
.
ãxt
, "ax"; 
	`ENTRY
“ame)

	)

47 #i‚de‡
END


48 
	#END
(
«me
Ë.
size
Çame, .-
	)
name

51 #i‚de‡
ENDPROC


52 
	#ENDPROC
(
«me
Ë.
ty≥
Çame, @
fun˘i⁄
; 
	`END
“ame)

	)

57 
	#NORET_TYPE


	)

58 
	#ATTRIB_NORET
 
	`__©åibuã__
((
n‹ëu∫
))

	)

59 
	#NORET_AND
 
n‹ëu∫
,

	)

61 #i‚de‡
FASTCALL


62 
	#FASTCALL
(
x
Ë
	)
x

63 
	#Á°ˇŒ


	)

	@linux/list.h

12 #i‚de‡
_LINUX_LIST_H


13 
	#_LINUX_LIST_H


	)

	@linux/lockd/nlm.h

12 #i‚de‡
LINUX_LOCKD_NLM_H


13 
	#LINUX_LOCKD_NLM_H


	)

15 
	#NLM_OFFSET_MAX
 ((
s32
Ë0x7fffffff)

	)

16 
	#NLM4_OFFSET_MAX
 ((
s64
Ë((~(
u64
)0Ë>> 1))

	)

19 
	mNLM_LCK_GRANTED
 = 0,

20 
	mNLM_LCK_DENIED
 = 1,

21 
	mNLM_LCK_DENIED_NOLOCKS
 = 2,

22 
	mNLM_LCK_BLOCKED
 = 3,

23 
	mNLM_LCK_DENIED_GRACE_PERIOD
 = 4,

26 
	#NLM_PROGRAM
 100021

	)

28 
	#NLMPROC_NULL
 0

	)

29 
	#NLMPROC_TEST
 1

	)

30 
	#NLMPROC_LOCK
 2

	)

31 
	#NLMPROC_CANCEL
 3

	)

32 
	#NLMPROC_UNLOCK
 4

	)

33 
	#NLMPROC_GRANTED
 5

	)

34 
	#NLMPROC_TEST_MSG
 6

	)

35 
	#NLMPROC_LOCK_MSG
 7

	)

36 
	#NLMPROC_CANCEL_MSG
 8

	)

37 
	#NLMPROC_UNLOCK_MSG
 9

	)

38 
	#NLMPROC_GRANTED_MSG
 10

	)

39 
	#NLMPROC_TEST_RES
 11

	)

40 
	#NLMPROC_LOCK_RES
 12

	)

41 
	#NLMPROC_CANCEL_RES
 13

	)

42 
	#NLMPROC_UNLOCK_RES
 14

	)

43 
	#NLMPROC_GRANTED_RES
 15

	)

44 
	#NLMPROC_NSM_NOTIFY
 16

	)

45 
	#NLMPROC_SHARE
 20

	)

46 
	#NLMPROC_UNSHARE
 21

	)

47 
	#NLMPROC_NM_LOCK
 22

	)

48 
	#NLMPROC_FREE_ALL
 23

	)

	@linux/lockd/xdr.h

12 #i‚de‡
LOCKD_XDR_H


13 
	#LOCKD_XDR_H


	)

15 
	~<löux/fs.h
>

16 
	~<löux/nfs.h
>

17 
	~<löux/suƒpc/xdr.h
>

19 
	#NLM_MAXCOOKIELEN
 32

	)

20 
	#NLM_MAXSTRLEN
 1024

	)

22 
	#∆m_gø¡ed
 
	`__c⁄°™t_ht⁄l
(
NLM_LCK_GRANTED
)

	)

23 
	#∆m_lck_díõd
 
	`__c⁄°™t_ht⁄l
(
NLM_LCK_DENIED
)

	)

24 
	#∆m_lck_díõd_nﬁocks
 
	`__c⁄°™t_ht⁄l
(
NLM_LCK_DENIED_NOLOCKS
)

	)

25 
	#∆m_lck_blocked
 
	`__c⁄°™t_ht⁄l
(
NLM_LCK_BLOCKED
)

	)

26 
	#∆m_lck_díõd_gø˚_≥riod
 
	`__c⁄°™t_ht⁄l
(
NLM_LCK_DENIED_GRACE_PERIOD
)

	)

28 
	s∆m_lock
 {

29 * 
	mˇŒî
;

30 
	mÀn
;

31 
nfs_fh
 
	mfh
;

32 
xdr_√tobj
 
	moh
;

33 
u32
 
	msvid
;

34 
fûe_lock
 
	mÊ
;

37 
	s∆m_cookõ


39 
	md©a
[
NLM_MAXCOOKIELEN
];

40 
	mÀn
;

43 
	s∆m_¨gs
 {

44 
∆m_cookõ
 
	mcookõ
;

45 
∆m_lock
 
	mlock
;

46 
u32
 
	mblock
;

47 
u32
 
	mª˛aim
;

48 
u32
 
	m°©e
;

49 
u32
 
	mm⁄ô‹
;

50 
u32
 
	mfsm_ac˚ss
;

51 
u32
 
	mfsm_mode
;

54 
∆m_¨gs
 
	t∆m_¨gs
;

56 
	s∆m_ªs
 {

57 
∆m_cookõ
 
	mcookõ
;

58 
u32
 
	m°©us
;

59 
∆m_lock
 
	mlock
;

62 
	s∆m_ªboŸ
 {

63 * 
	mm⁄
;

64 
	mÀn
;

65 
u32
 
	m°©e
;

66 
u32
 
	maddr
;

67 
u32
 
	mvîs
;

68 
u32
 
	m¥Ÿo
;

71 
	#NLMSVC_XDRSIZE
 (
∆m_¨gs
)

	)

	@linux/lockdep.h

12 #i‚de‡
__LINUX_LOCKDEP_H


13 
	#__LINUX_LOCKDEP_H


	)

15 
	~<löux/lökage.h
>

16 
	~<löux/li°.h
>

17 
	~<löux/debug_locks.h
>

18 
	~<löux/°ackåa˚.h
>

20 
	#lock_acquúe
(
l
, 
s
, 
t
, 
r
, 
c
, 
i
Ëdÿ{ } 0)

	)

21 
	#lock_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

22 
	#lockdï_öô
(Ëdÿ{ } 0)

	)

23 
	#lockdï_öfo
(Ëdÿ{ } 0)

	)

24 
	#lockdï_öô_m≠
(
lock
, 
«me
, 
key
Ëdÿ{ ()(key); } 0)

	)

25 
	#lockdï_£t_˛ass
(
lock
, 
key
Ëdÿ{ ()(key); } 0)

	)

26 
	#lockdï_£t_˛ass_™d_«me
(
lock
, 
key
, 
«me
Ëdÿ{ ()(key); } 0)

	)

27 
	#INIT_LOCKDEP


	)

28 
	#lockdï_ª£t
(Ëdÿ{ 
debug_locks
 = 1; } 0)

	)

29 
	#lockdï_‰ì_key_ønge
(
°¨t
, 
size
Ëdÿ{ } 0)

	)

31 
	#óæy_öô_úq_lock_˛ass
(Ëdÿ{ } 0)

	)

33 
	#óæy_boŸ_úqs_off
(Ëdÿ{ } 0)

	)

34 
	#óæy_boŸ_úqs_⁄
(Ëdÿ{ } 0)

	)

36 
	#SINGLE_DEPTH_NESTING
 1

	)

38 
	#•ö_acquúe
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

39 
	#•ö_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

41 
	#rwlock_acquúe
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

42 
	#rwlock_acquúe_ªad
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

43 
	#rwlock_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

45 
	#muãx_acquúe
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

46 
	#muãx_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

48 
	#rw£m_acquúe
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

49 
	#rw£m_acquúe_ªad
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

50 
	#rw£m_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

	@linux/loop.h

12 #i‚de‡
_LINUX_LOOP_H


13 
	#_LINUX_LOOP_H


	)

15 
	#LO_NAME_SIZE
 64

	)

16 
	#LO_KEY_SIZE
 32

	)

19 
	mLO_FLAGS_READ_ONLY
 = 1,

20 
	mLO_FLAGS_USE_AOPS
 = 2,

23 
	~<asm/posix_ty≥s.h
>

24 
	~<asm/ty≥s.h
>

26 
	slo›_öfo
 {

27 
	mlo_numbî
;

28 
__kî√l_ﬁd_dev_t
 
	mlo_devi˚
;

29 
	mlo_öode
;

30 
__kî√l_ﬁd_dev_t
 
	mlo_rdevi˚
;

31 
	mlo_off£t
;

32 
	mlo_í¸y±_ty≥
;

33 
	mlo_í¸y±_key_size
;

34 
	mlo_Êags
;

35 
	mlo_«me
[
LO_NAME_SIZE
];

36 
	mlo_í¸y±_key
[
LO_KEY_SIZE
];

37 
	mlo_öô
[2];

38 
	mª£rved
[4];

41 
	slo›_öfo64
 {

42 
__u64
 
	mlo_devi˚
;

43 
__u64
 
	mlo_öode
;

44 
__u64
 
	mlo_rdevi˚
;

45 
__u64
 
	mlo_off£t
;

46 
__u64
 
	mlo_sizñimô
;

47 
__u32
 
	mlo_numbî
;

48 
__u32
 
	mlo_í¸y±_ty≥
;

49 
__u32
 
	mlo_í¸y±_key_size
;

50 
__u32
 
	mlo_Êags
;

51 
__u8
 
	mlo_fûe_«me
[
LO_NAME_SIZE
];

52 
__u8
 
	mlo_¸y±_«me
[
LO_NAME_SIZE
];

53 
__u8
 
	mlo_í¸y±_key
[
LO_KEY_SIZE
];

54 
__u64
 
	mlo_öô
[2];

57 
	#LO_CRYPT_NONE
 0

	)

58 
	#LO_CRYPT_XOR
 1

	)

59 
	#LO_CRYPT_DES
 2

	)

60 
	#LO_CRYPT_FISH2
 3

	)

61 
	#LO_CRYPT_BLOW
 4

	)

62 
	#LO_CRYPT_CAST128
 5

	)

63 
	#LO_CRYPT_IDEA
 6

	)

64 
	#LO_CRYPT_DUMMY
 9

	)

65 
	#LO_CRYPT_SKIPJACK
 10

	)

66 
	#LO_CRYPT_CRYPTOAPI
 18

	)

67 
	#MAX_LO_CRYPT
 20

	)

69 
	#LOOP_SET_FD
 0x4C00

	)

70 
	#LOOP_CLR_FD
 0x4C01

	)

71 
	#LOOP_SET_STATUS
 0x4C02

	)

72 
	#LOOP_GET_STATUS
 0x4C03

	)

73 
	#LOOP_SET_STATUS64
 0x4C04

	)

74 
	#LOOP_GET_STATUS64
 0x4C05

	)

75 
	#LOOP_CHANGE_FD
 0x4C06

	)

	@linux/magic.h

12 #i‚de‡
__LINUX_MAGIC_H__


13 
	#__LINUX_MAGIC_H__


	)

15 
	#ADFS_SUPER_MAGIC
 0xadf5

	)

16 
	#AFFS_SUPER_MAGIC
 0xadff

	)

17 
	#AFS_SUPER_MAGIC
 0x5346414F

	)

18 
	#AUTOFS_SUPER_MAGIC
 0x0187

	)

19 
	#CODA_SUPER_MAGIC
 0x73757245

	)

20 
	#EFS_SUPER_MAGIC
 0x414A53

	)

21 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

22 
	#EXT3_SUPER_MAGIC
 0xEF53

	)

23 
	#EXT4_SUPER_MAGIC
 0xEF53

	)

24 
	#HPFS_SUPER_MAGIC
 0xf995e849

	)

25 
	#ISOFS_SUPER_MAGIC
 0x9660

	)

26 
	#JFFS2_SUPER_MAGIC
 0x72b6

	)

27 
	#ANON_INODE_FS_MAGIC
 0x09041934

	)

29 
	#MINIX_SUPER_MAGIC
 0x137F

	)

30 
	#MINIX_SUPER_MAGIC2
 0x138F

	)

31 
	#MINIX2_SUPER_MAGIC
 0x2468

	)

32 
	#MINIX2_SUPER_MAGIC2
 0x2478

	)

33 
	#MINIX3_SUPER_MAGIC
 0x4d5a

	)

35 
	#MSDOS_SUPER_MAGIC
 0x4d44

	)

36 
	#NCP_SUPER_MAGIC
 0x564c

	)

37 
	#NFS_SUPER_MAGIC
 0x6969

	)

38 
	#OPENPROM_SUPER_MAGIC
 0x9Á1

	)

39 
	#PROC_SUPER_MAGIC
 0x9Á0

	)

40 
	#QNX4_SUPER_MAGIC
 0x002f

	)

42 
	#REISERFS_SUPER_MAGIC
 0x52654973

	)

44 
	#REISERFS_SUPER_MAGIC_STRING
 "ReIsErFs"

	)

45 
	#REISER2FS_SUPER_MAGIC_STRING
 "ReIsEr2Fs"

	)

46 
	#REISER2FS_JR_SUPER_MAGIC_STRING
 "ReIsEr3Fs"

	)

48 
	#SMB_SUPER_MAGIC
 0x517B

	)

49 
	#USBDEVICE_SUPER_MAGIC
 0x9Á2

	)

50 
	#CGROUP_SUPER_MAGIC
 0x27e0eb

	)

52 
	#FUTEXFS_SUPER_MAGIC
 0xBAD1DEA

	)

53 
	#INOTIFYFS_SUPER_MAGIC
 0x2BAD1DEA

	)

	@linux/major.h

12 #i‚de‡
_LINUX_MAJOR_H


13 
	#_LINUX_MAJOR_H


	)

15 
	#UNNAMED_MAJOR
 0

	)

16 
	#MEM_MAJOR
 1

	)

17 
	#RAMDISK_MAJOR
 1

	)

18 
	#FLOPPY_MAJOR
 2

	)

19 
	#PTY_MASTER_MAJOR
 2

	)

20 
	#IDE0_MAJOR
 3

	)

21 
	#HD_MAJOR
 
IDE0_MAJOR


	)

22 
	#PTY_SLAVE_MAJOR
 3

	)

23 
	#TTY_MAJOR
 4

	)

24 
	#TTYAUX_MAJOR
 5

	)

25 
	#LP_MAJOR
 6

	)

26 
	#VCS_MAJOR
 7

	)

27 
	#LOOP_MAJOR
 7

	)

28 
	#SCSI_DISK0_MAJOR
 8

	)

29 
	#SCSI_TAPE_MAJOR
 9

	)

30 
	#MD_MAJOR
 9

	)

31 
	#MISC_MAJOR
 10

	)

32 
	#SCSI_CDROM_MAJOR
 11

	)

33 
	#MUX_MAJOR
 11

	)

34 
	#XT_DISK_MAJOR
 13

	)

35 
	#INPUT_MAJOR
 13

	)

36 
	#SOUND_MAJOR
 14

	)

37 
	#CDU31A_CDROM_MAJOR
 15

	)

38 
	#JOYSTICK_MAJOR
 15

	)

39 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

40 
	#OPTICS_CDROM_MAJOR
 17

	)

41 
	#SANYO_CDROM_MAJOR
 18

	)

42 
	#CYCLADES_MAJOR
 19

	)

43 
	#CYCLADESAUX_MAJOR
 20

	)

44 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

45 
	#MFM_ACORN_MAJOR
 21

	)

46 
	#SCSI_GENERIC_MAJOR
 21

	)

47 
	#IDE1_MAJOR
 22

	)

48 
	#DIGICU_MAJOR
 22

	)

49 
	#DIGI_MAJOR
 23

	)

50 
	#MITSUMI_CDROM_MAJOR
 23

	)

51 
	#CDU535_CDROM_MAJOR
 24

	)

52 
	#STL_SERIALMAJOR
 24

	)

53 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

54 
	#STL_CALLOUTMAJOR
 25

	)

55 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

56 
	#QIC117_TAPE_MAJOR
 27

	)

57 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

58 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

59 
	#STL_SIOMEMMAJOR
 28

	)

60 
	#ACSI_MAJOR
 28

	)

61 
	#AZTECH_CDROM_MAJOR
 29

	)

62 
	#GRAPHDEV_MAJOR
 29

	)

63 
	#CM206_CDROM_MAJOR
 32

	)

64 
	#IDE2_MAJOR
 33

	)

65 
	#IDE3_MAJOR
 34

	)

66 
	#Z8530_MAJOR
 34

	)

67 
	#XPRAM_MAJOR
 35

	)

68 
	#NETLINK_MAJOR
 36

	)

69 
	#PS2ESDI_MAJOR
 36

	)

70 
	#IDETAPE_MAJOR
 37

	)

71 
	#Z2RAM_MAJOR
 37

	)

72 
	#APBLOCK_MAJOR
 38

	)

73 
	#DDV_MAJOR
 39

	)

74 
	#NBD_MAJOR
 43

	)

75 
	#RISCOM8_NORMAL_MAJOR
 48

	)

76 
	#DAC960_MAJOR
 48

	)

77 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

78 
	#MKISS_MAJOR
 55

	)

79 
	#DSP56K_MAJOR
 55

	)

81 
	#IDE4_MAJOR
 56

	)

82 
	#IDE5_MAJOR
 57

	)

84 
	#SCSI_DISK1_MAJOR
 65

	)

85 
	#SCSI_DISK2_MAJOR
 66

	)

86 
	#SCSI_DISK3_MAJOR
 67

	)

87 
	#SCSI_DISK4_MAJOR
 68

	)

88 
	#SCSI_DISK5_MAJOR
 69

	)

89 
	#SCSI_DISK6_MAJOR
 70

	)

90 
	#SCSI_DISK7_MAJOR
 71

	)

92 
	#COMPAQ_SMART2_MAJOR
 72

	)

93 
	#COMPAQ_SMART2_MAJOR1
 73

	)

94 
	#COMPAQ_SMART2_MAJOR2
 74

	)

95 
	#COMPAQ_SMART2_MAJOR3
 75

	)

96 
	#COMPAQ_SMART2_MAJOR4
 76

	)

97 
	#COMPAQ_SMART2_MAJOR5
 77

	)

98 
	#COMPAQ_SMART2_MAJOR6
 78

	)

99 
	#COMPAQ_SMART2_MAJOR7
 79

	)

101 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

102 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

104 
	#AURORA_MAJOR
 79

	)

106 
	#I2O_MAJOR
 80

	)

108 
	#SHMIQ_MAJOR
 85

	)

109 
	#SCSI_CHANGER_MAJOR
 86

	)

111 
	#IDE6_MAJOR
 88

	)

112 
	#IDE7_MAJOR
 89

	)

113 
	#IDE8_MAJOR
 90

	)

114 
	#IDE9_MAJOR
 91

	)

116 
	#DASD_MAJOR
 94

	)

118 
	#MDISK_MAJOR
 95

	)

120 
	#UBD_MAJOR
 98

	)

122 
	#PP_MAJOR
 99

	)

123 
	#JSFD_MAJOR
 99

	)

125 
	#PHONE_MAJOR
 100

	)

127 
	#COMPAQ_CISS_MAJOR
 104

	)

128 
	#COMPAQ_CISS_MAJOR1
 105

	)

129 
	#COMPAQ_CISS_MAJOR2
 106

	)

130 
	#COMPAQ_CISS_MAJOR3
 107

	)

131 
	#COMPAQ_CISS_MAJOR4
 108

	)

132 
	#COMPAQ_CISS_MAJOR5
 109

	)

133 
	#COMPAQ_CISS_MAJOR6
 110

	)

134 
	#COMPAQ_CISS_MAJOR7
 111

	)

136 
	#VIODASD_MAJOR
 112

	)

137 
	#VIOCD_MAJOR
 113

	)

139 
	#ATARAID_MAJOR
 114

	)

141 
	#SCSI_DISK8_MAJOR
 128

	)

142 
	#SCSI_DISK9_MAJOR
 129

	)

143 
	#SCSI_DISK10_MAJOR
 130

	)

144 
	#SCSI_DISK11_MAJOR
 131

	)

145 
	#SCSI_DISK12_MAJOR
 132

	)

146 
	#SCSI_DISK13_MAJOR
 133

	)

147 
	#SCSI_DISK14_MAJOR
 134

	)

148 
	#SCSI_DISK15_MAJOR
 135

	)

150 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

151 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

152 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

154 
	#RTF_MAJOR
 150

	)

155 
	#RAW_MAJOR
 162

	)

157 
	#USB_ACM_MAJOR
 166

	)

158 
	#USB_ACM_AUX_MAJOR
 167

	)

159 
	#USB_CHAR_MAJOR
 180

	)

161 
	#VXVM_MAJOR
 199

	)

162 
	#VXSPEC_MAJOR
 200

	)

163 
	#VXDMP_MAJOR
 201

	)

165 
	#MSR_MAJOR
 202

	)

166 
	#CPUID_MAJOR
 203

	)

168 
	#OSST_MAJOR
 206

	)

170 
	#IBM_TTY3270_MAJOR
 227

	)

171 
	#IBM_FS3270_MAJOR
 228

	)

173 
	#VIOTAPE_MAJOR
 230

	)

	@linux/mc146818rtc.h

12 #i‚de‡
_MC146818RTC_H


13 
	#_MC146818RTC_H


	)

15 
	~<asm/io.h
>

16 
	~<löux/πc.h
>

17 
	~<asm/mc146818πc.h
>

19 
	#RTC_SECONDS
 0

	)

20 
	#RTC_SECONDS_ALARM
 1

	)

21 
	#RTC_MINUTES
 2

	)

22 
	#RTC_MINUTES_ALARM
 3

	)

23 
	#RTC_HOURS
 4

	)

24 
	#RTC_HOURS_ALARM
 5

	)

26 
	#RTC_ALARM_DONT_CARE
 0xC0

	)

28 
	#RTC_DAY_OF_WEEK
 6

	)

29 
	#RTC_DAY_OF_MONTH
 7

	)

30 
	#RTC_MONTH
 8

	)

31 
	#RTC_YEAR
 9

	)

33 
	#RTC_REG_A
 10

	)

34 
	#RTC_REG_B
 11

	)

35 
	#RTC_REG_C
 12

	)

36 
	#RTC_REG_D
 13

	)

38 
	#RTC_FREQ_SELECT
 
RTC_REG_A


	)

40 
	#RTC_UIP
 0x80

	)

41 
	#RTC_DIV_CTL
 0x70

	)

43 
	#RTC_REF_CLCK_4MHZ
 0x00

	)

44 
	#RTC_REF_CLCK_1MHZ
 0x10

	)

45 
	#RTC_REF_CLCK_32KHZ
 0x20

	)

47 
	#RTC_DIV_RESET1
 0x60

	)

48 
	#RTC_DIV_RESET2
 0x70

	)

50 
	#RTC_RATE_SELECT
 0x0F

	)

52 
	#RTC_CONTROL
 
RTC_REG_B


	)

53 
	#RTC_SET
 0x80

	)

54 
	#RTC_PIE
 0x40

	)

55 
	#RTC_AIE
 0x20

	)

56 
	#RTC_UIE
 0x10

	)

57 
	#RTC_SQWE
 0x08

	)

58 
	#RTC_DM_BINARY
 0x04

	)

59 
	#RTC_24H
 0x02

	)

60 
	#RTC_DST_EN
 0x01

	)

62 
	#RTC_INTR_FLAGS
 
RTC_REG_C


	)

64 
	#RTC_IRQF
 0x80

	)

65 
	#RTC_PF
 0x40

	)

66 
	#RTC_AF
 0x20

	)

67 
	#RTC_UF
 0x10

	)

69 
	#RTC_VALID
 
RTC_REG_D


	)

70 
	#RTC_VRT
 0x80

	)

72 #i‚de‡
ARCH_RTC_LOCATION


74 
	#RTC_IO_EXTENT
 0x8

	)

75 
	#RTC_IOMAPPED
 1

	)

	@linux/mca.h

12 #i‚de‡
_LINUX_MCA_H


13 
	#_LINUX_MCA_H


	)

15 
	~<löux/devi˚.h
>

17 
	#MCA_bus
 0

	)

19 (*
	tMCA_ProcFn
)(* 
	tbuf
, 
	t¶Ÿ
, * 
	tdev
);

21 
	eMCA_Ad≠ãrSètus
 {

22 
MCA_ADAPTER_NORMAL
 = 0,

23 
MCA_ADAPTER_NONE
 = 1,

24 
MCA_ADAPTER_DISABLED
 = 2,

25 
MCA_ADAPTER_ERROR
 = 3

28 
	smˇ_devi˚
 {

29 
u64
 
dma_mask
;

30 
pos_id
;

31 
¶Ÿ
;

33 
ödex
;

35 
drivî_lﬂded
;

37 
pos
[8];

39 
pos_ªgi°î
;

41 
MCA_Ad≠ãrSètus
 
°©us
;

42 
devi˚
 
dev
;

43 
«me
[32];

45 
	#to_mˇ_devi˚
(
mdev
Ë
	`c⁄èöî_of
(mdev, 
mˇ_devi˚
, 
dev
)

	)

47 
	smˇ_bus_ac˚ss‹_fun˘i⁄s
 {

48 (*
mˇ_ªad_pos
)(
mˇ_devi˚
 *, 
ªg
);

49 (*
mˇ_wrôe_pos
)(
mˇ_devi˚
 *, 
ªg
,

50 
byã
);

51 (*
mˇ_å™sf‹m_úq
)(
mˇ_devi˚
 *, 
úq
);

52 (*
mˇ_å™sf‹m_i›‹t
)(
mˇ_devi˚
 *,

53 
ªgi⁄
);

54 * (*
mˇ_å™sf‹m_mem‹y
)(
mˇ_devi˚
 *,

55 *
mem‹y
);

58 
	smˇ_bus
 {

59 
u64
 
deÁu…_dma_mask
;

60 
numbî
;

61 
mˇ_bus_ac˚ss‹_fun˘i⁄s
 
f
;

62 
devi˚
 
dev
;

63 
«me
[32];

65 
	#to_mˇ_bus
(
mdev
Ë
	`c⁄èöî_of
(mdev, 
mˇ_bus
, 
dev
)

	)

67 
	smˇ_drivî
 {

68 c⁄° *
id_èbÀ
;

69 *
drivî_d©a
;

70 
devi˚_drivî
 
drivî
;

72 
	#to_mˇ_drivî
(
mdrivî
Ë
	`c⁄èöî_of
(mdrivî, 
mˇ_drivî
, 
drivî
)

	)

	@linux/mempolicy.h

12 #i‚de‡
_LINUX_MEMPOLICY_H


13 
	#_LINUX_MEMPOLICY_H
 1

	)

15 
	~<löux/î∫o.h
>

17 
	#MPOL_DEFAULT
 0

	)

18 
	#MPOL_PREFERRED
 1

	)

19 
	#MPOL_BIND
 2

	)

20 
	#MPOL_INTERLEAVE
 3

	)

22 
	#MPOL_MAX
 
MPOL_INTERLEAVE


	)

24 
	#MPOL_F_NODE
 (1<<0)

	)

25 
	#MPOL_F_ADDR
 (1<<1)

	)

27 
	#MPOL_MF_STRICT
 (1<<0)

	)

28 
	#MPOL_MF_MOVE
 (1<<1)

	)

29 
	#MPOL_MF_MOVE_ALL
 (1<<2)

	)

30 
	#MPOL_MF_INTERNAL
 (1<<3)

	)

	@linux/mempool.h

12 #i‚de‡
_LINUX_MEMPOOL_H


13 
	#_LINUX_MEMPOOL_H


	)

15 
	~<löux/waô.h
>

17 
	gkmem_ˇche
;

19 * (
	tmempoﬁ_Æloc_t
)(
	tgÂ_t
 
	tgÂ_mask
, *
	tpoﬁ_d©a
);

20 (
	tmempoﬁ_‰ì_t
)(*
	tñemít
, *
	tpoﬁ_d©a
);

22 
	smempoﬁ_s
 {

23 
•ölock_t
 
lock
;

24 
mö_ƒ
;

25 
cuº_ƒ
;

26 **
ñemíts
;

28 *
poﬁ_d©a
;

29 
mempoﬁ_Æloc_t
 *
Æloc
;

30 
mempoﬁ_‰ì_t
 *
‰ì
;

31 
waô_queue_hód_t
 
waô
;

32 } 
	tmempoﬁ_t
;

	@linux/miscdevice.h

12 #i‚de‡
_LINUX_MISCDEVICE_H


13 
	#_LINUX_MISCDEVICE_H


	)

14 
	~<löux/moduÀ.h
>

15 
	~<löux/maj‹.h
>

17 
	#PSMOUSE_MINOR
 1

	)

18 
	#MS_BUSMOUSE_MINOR
 2

	)

19 
	#ATIXL_BUSMOUSE_MINOR
 3

	)

21 
	#ATARIMOUSE_MINOR
 5

	)

22 
	#SUN_MOUSE_MINOR
 6

	)

23 
	#APOLLO_MOUSE_MINOR
 7

	)

24 
	#PC110PAD_MINOR
 9

	)

26 
	#WATCHDOG_MINOR
 130

	)

27 
	#TEMP_MINOR
 131

	)

28 
	#RTC_MINOR
 135

	)

29 
	#EFI_RTC_MINOR
 136

	)

30 
	#SUN_OPENPROM_MINOR
 139

	)

31 
	#DMAPI_MINOR
 140

	)

32 
	#NVRAM_MINOR
 144

	)

33 
	#SGI_MMTIMER
 153

	)

34 
	#STORE_QUEUE_MINOR
 155

	)

35 
	#I2O_MINOR
 166

	)

36 
	#MICROCODE_MINOR
 184

	)

37 
	#MWAVE_MINOR
 219

	)

38 
	#MPT_MINOR
 220

	)

39 
	#MISC_DYNAMIC_MINOR
 255

	)

41 
	#TUN_MINOR
 200

	)

42 
	#HPET_MINOR
 228

	)

44 
	gdevi˚
;

45 
	g˛ass_devi˚
;

47 
	smiscdevi˚
 {

48 
	mmö‹
;

49 c⁄° *
	m«me
;

50 c⁄° 
fûe_›î©i⁄s
 *
	mf›s
;

51 
li°_hód
 
	mli°
;

52 
devi˚
 *
	mdev
;

53 
˛ass_devi˚
 *
	m˛ass
;

56 
	#MODULE_ALIAS_MISCDEV
(
mö‹
Ë
	`MODULE_ALIAS
("ch¨-maj‹-" 
	`__°rögify
(
MISC_MAJOR
Ë"-" __°rögify(mö‹))

	)

	@linux/mm.h

12 #i‚de‡
_LINUX_MM_H


13 
	#_LINUX_MM_H


	)

15 
	~<löux/sched.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/ˇ∑bûôy.h
>

	@linux/mmc/card.h

12 #i‚de‡
LINUX_MMC_CARD_H


13 
	#LINUX_MMC_CARD_H


	)

15 
	~<löux/mmc/mmc.h
>

17 
	smmc_cid
 {

18 
	mm™fid
;

19 
	m¥od_«me
[8];

20 
	m£rül
;

21 
	m€mid
;

22 
	myór
;

23 
	mhwªv
;

24 
	mfwªv
;

25 
	mm⁄th
;

28 
	smmc_csd
 {

29 
	mmmˇ_v¢
;

30 
	mcmd˛ass
;

31 
	mècc_˛ks
;

32 
	mècc_ns
;

33 
	mr2w_Á˘‹
;

34 
	mmax_då
;

35 
	mªad_blkbôs
;

36 
	mwrôe_blkbôs
;

37 
	mˇ∑côy
;

38 
	mªad_∑πül
:1,

39 
	mªad_mißlign
:1,

40 
	mwrôe_∑πül
:1,

41 
	mwrôe_mißlign
:1;

44 
	ssd_s¸
 {

45 
	msda_v¢
;

46 
	mbus_widths
;

47 
	#SD_SCR_BUS_WIDTH_1
 (1<<0)

	)

48 
	#SD_SCR_BUS_WIDTH_4
 (1<<2)

	)

51 
	gmmc_ho°
;

53 
	smmc_ˇrd
 {

54 
li°_hód
 
	mnode
;

55 
mmc_ho°
 *
	mho°
;

56 
devi˚
 
	mdev
;

57 
	mrˇ
;

58 
	m°©e
;

59 
	#MMC_STATE_PRESENT
 (1<<0)

	)

60 
	#MMC_STATE_DEAD
 (1<<1)

	)

61 
	#MMC_STATE_BAD
 (1<<2)

	)

62 
	#MMC_STATE_SDCARD
 (1<<3)

	)

63 
	#MMC_STATE_READONLY
 (1<<4)

	)

64 
u32
 
	møw_cid
[4];

65 
u32
 
	møw_csd
[4];

66 
u32
 
	møw_s¸
[2];

67 
mmc_cid
 
	mcid
;

68 
mmc_csd
 
	mcsd
;

69 
sd_s¸
 
	ms¸
;

72 
	#mmc_ˇrd_¥e£¡
(
c
Ë((c)->
°©e
 & 
MMC_STATE_PRESENT
)

	)

73 
	#mmc_ˇrd_dód
(
c
Ë((c)->
°©e
 & 
MMC_STATE_DEAD
)

	)

74 
	#mmc_ˇrd_bad
(
c
Ë((c)->
°©e
 & 
MMC_STATE_BAD
)

	)

75 
	#mmc_ˇrd_sd
(
c
Ë((c)->
°©e
 & 
MMC_STATE_SDCARD
)

	)

76 
	#mmc_ˇrd_ªad⁄ly
(
c
Ë((c)->
°©e
 & 
MMC_STATE_READONLY
)

	)

78 
	#mmc_ˇrd_£t_¥e£¡
(
c
Ë((c)->
°©e
 |
MMC_STATE_PRESENT
)

	)

79 
	#mmc_ˇrd_£t_dód
(
c
Ë((c)->
°©e
 |
MMC_STATE_DEAD
)

	)

80 
	#mmc_ˇrd_£t_bad
(
c
Ë((c)->
°©e
 |
MMC_STATE_BAD
)

	)

81 
	#mmc_ˇrd_£t_sd
(
c
Ë((c)->
°©e
 |
MMC_STATE_SDCARD
)

	)

82 
	#mmc_ˇrd_£t_ªad⁄ly
(
c
Ë((c)->
°©e
 |
MMC_STATE_READONLY
)

	)

84 
	#mmc_ˇrd_«me
(
c
Ë((c)->
cid
.
¥od_«me
)

	)

85 
	#mmc_ˇrd_id
(
c
Ë((c)->
dev
.
bus_id
)

	)

87 
	#mmc_li°_to_ˇrd
(
l
Ë
	`c⁄èöî_of
÷, 
mmc_ˇrd
, 
node
)

	)

88 
	#mmc_gë_drvd©a
(
c
Ë
	`dev_gë_drvd©a
(&(c)->
dev
)

	)

89 
	#mmc_£t_drvd©a
(
c
,
d
Ë
	`dev_£t_drvd©a
(&(c)->
dev
, d)

	)

91 
	smmc_drivî
 {

92 
devi˚_drivî
 
	mdrv
;

93 (*
	m¥obe
)(
	mmmc_ˇrd
 *);

94 (*
	mªmove
)(
	mmmc_ˇrd
 *);

95 (*
	msu•íd
)(
	mmmc_ˇrd
 *, 
	mpm_mesßge_t
);

96 (*
	mªsume
)(
	mmmc_ˇrd
 *);

99 
	#mmc_ˇrd_ªÀa£_ho°
(
c
Ë
	`mmc_ªÀa£_ho°
((c)->
ho°
)

	)

	@linux/mmc/host.h

12 #i‚de‡
LINUX_MMC_HOST_H


13 
	#LINUX_MMC_HOST_H


	)

15 
	~<löux/mmc/mmc.h
>

17 
	smmc_ios
 {

18 
	m˛ock
;

19 
	mvdd
;

21 
	#MMC_VDD_150
 0

	)

22 
	#MMC_VDD_155
 1

	)

23 
	#MMC_VDD_160
 2

	)

24 
	#MMC_VDD_165
 3

	)

25 
	#MMC_VDD_170
 4

	)

26 
	#MMC_VDD_180
 5

	)

27 
	#MMC_VDD_190
 6

	)

28 
	#MMC_VDD_200
 7

	)

29 
	#MMC_VDD_210
 8

	)

30 
	#MMC_VDD_220
 9

	)

31 
	#MMC_VDD_230
 10

	)

32 
	#MMC_VDD_240
 11

	)

33 
	#MMC_VDD_250
 12

	)

34 
	#MMC_VDD_260
 13

	)

35 
	#MMC_VDD_270
 14

	)

36 
	#MMC_VDD_280
 15

	)

37 
	#MMC_VDD_290
 16

	)

38 
	#MMC_VDD_300
 17

	)

39 
	#MMC_VDD_310
 18

	)

40 
	#MMC_VDD_320
 19

	)

41 
	#MMC_VDD_330
 20

	)

42 
	#MMC_VDD_340
 21

	)

43 
	#MMC_VDD_350
 22

	)

44 
	#MMC_VDD_360
 23

	)

46 
	mbus_mode
;

48 
	#MMC_BUSMODE_OPENDRAIN
 1

	)

49 
	#MMC_BUSMODE_PUSHPULL
 2

	)

51 
	mchù_£À˘
;

53 
	#MMC_CS_DONTCARE
 0

	)

54 
	#MMC_CS_HIGH
 1

	)

55 
	#MMC_CS_LOW
 2

	)

57 
	mpowî_mode
;

59 
	#MMC_POWER_OFF
 0

	)

60 
	#MMC_POWER_UP
 1

	)

61 
	#MMC_POWER_ON
 2

	)

63 
	mbus_width
;

65 
	#MMC_BUS_WIDTH_1
 0

	)

66 
	#MMC_BUS_WIDTH_4
 2

	)

69 
	smmc_ho°_›s
 {

70 (*
	mªque°
)(
mmc_ho°
 *
	mho°
, 
mmc_ªque°
 *
	mªq
);

71 (*
	m£t_ios
)(
mmc_ho°
 *
	mho°
, 
mmc_ios
 *
	mios
);

72 (*
	mgë_ro
)(
mmc_ho°
 *
	mho°
);

75 
	gmmc_ˇrd
;

76 
	gdevi˚
;

78 
	smmc_ho°
 {

79 
devi˚
 *
	mdev
;

80 
˛ass_devi˚
 
	m˛ass_dev
;

81 
	mödex
;

82 c⁄° 
mmc_ho°_›s
 *
	m›s
;

83 
	mf_mö
;

84 
	mf_max
;

85 
u32
 
	mo¸_avaû
;

87 
	mˇps
;

89 
	#MMC_CAP_4_BIT_DATA
 (1 << 0)

	)

91 
	mmax_£g_size
;

92 
	mmax_hw_£gs
;

93 
	mmax_phys_£gs
;

94 
	mmax_£˘‹s
;

95 
	munu£d
;

97 
mmc_ios
 
	mios
;

98 
u32
 
	mo¸
;

100 
	mmode
;

101 
	#MMC_MODE_MMC
 0

	)

102 
	#MMC_MODE_SD
 1

	)

104 
li°_hód
 
	mˇrds
;

106 
waô_queue_hód_t
 
	mwq
;

107 
•ölock_t
 
	mlock
;

108 
mmc_ˇrd
 *
	mˇrd_busy
;

109 
mmc_ˇrd
 *
	mˇrd_£À˘ed
;

111 
w‹k_°ru˘
 
	mdëe˘
;

113 
	m¥iv©e
[0] 
	m____ˇchñöe_Æig√d
;

116 
	#mmc_dev
(
x
Ë((x)->
dev
)

	)

117 
	#mmc_ho°«me
(
x
Ë((x)->
˛ass_dev
.
˛ass_id
)

	)

	@linux/mmc/mmc.h

12 #i‚de‡
MMC_H


13 
	#MMC_H


	)

15 
	~<löux/li°.h
>

16 
	~<löux/öãºu±.h
>

17 
	~<löux/devi˚.h
>

19 
	gªque°
;

20 
	gmmc_d©a
;

21 
	gmmc_ªque°
;

23 
	smmc_comm™d
 {

24 
u32
 
	m›code
;

25 
u32
 
	m¨g
;

26 
u32
 
	mª•
[4];

27 
	mÊags
;

28 
	#MMC_RSP_PRESENT
 (1 << 0)

	)

29 
	#MMC_RSP_136
 (1 << 1)

	)

30 
	#MMC_RSP_CRC
 (1 << 2)

	)

31 
	#MMC_RSP_BUSY
 (1 << 3)

	)

32 
	#MMC_RSP_OPCODE
 (1 << 4)

	)

33 
	#MMC_CMD_MASK
 (3 << 5)

	)

34 
	#MMC_CMD_AC
 (0 << 5)

	)

35 
	#MMC_CMD_ADTC
 (1 << 5)

	)

36 
	#MMC_CMD_BC
 (2 << 5)

	)

37 
	#MMC_CMD_BCR
 (3 << 5)

	)

39 
	#MMC_RSP_NONE
 (0)

	)

40 
	#MMC_RSP_R1
 (
MMC_RSP_PRESENT
|
MMC_RSP_CRC
|
MMC_RSP_OPCODE
)

	)

41 
	#MMC_RSP_R1B
 (
MMC_RSP_PRESENT
|
MMC_RSP_CRC
|
MMC_RSP_OPCODE
|
MMC_RSP_BUSY
)

	)

42 
	#MMC_RSP_R2
 (
MMC_RSP_PRESENT
|
MMC_RSP_136
|
MMC_RSP_CRC
)

	)

43 
	#MMC_RSP_R3
 (
MMC_RSP_PRESENT
)

	)

44 
	#MMC_RSP_R6
 (
MMC_RSP_PRESENT
|
MMC_RSP_CRC
)

	)

46 
	#mmc_ª•_ty≥
(
cmd
Ë((cmd)->
Êags
 & (
MMC_RSP_PRESENT
|
MMC_RSP_136
|
MMC_RSP_CRC
|
MMC_RSP_BUSY
|
MMC_RSP_OPCODE
))

	)

48 
	#mmc_cmd_ty≥
(
cmd
Ë((cmd)->
Êags
 & 
MMC_CMD_MASK
)

	)

50 
	mªåõs
;

51 
	mîr‹
;

53 
	#MMC_ERR_NONE
 0

	)

54 
	#MMC_ERR_TIMEOUT
 1

	)

55 
	#MMC_ERR_BADCRC
 2

	)

56 
	#MMC_ERR_FIFO
 3

	)

57 
	#MMC_ERR_FAILED
 4

	)

58 
	#MMC_ERR_INVALID
 5

	)

60 
mmc_d©a
 *
	md©a
;

61 
mmc_ªque°
 *
	mmrq
;

64 
	smmc_d©a
 {

65 
	mtimeout_ns
;

66 
	mtimeout_˛ks
;

67 
	mblksz_bôs
;

68 
	mblksz
;

69 
	mblocks
;

70 
	mîr‹
;

71 
	mÊags
;

73 
	#MMC_DATA_WRITE
 (1 << 8)

	)

74 
	#MMC_DATA_READ
 (1 << 9)

	)

75 
	#MMC_DATA_STREAM
 (1 << 10)

	)

76 
	#MMC_DATA_MULTI
 (1 << 11)

	)

78 
	mbyãs_x„ªd
;

80 
mmc_comm™d
 *
	m°›
;

81 
mmc_ªque°
 *
	mmrq
;

83 
	msg_Àn
;

84 
sˇâîli°
 *
	msg
;

87 
	smmc_ªque°
 {

88 
mmc_comm™d
 *
	mcmd
;

89 
mmc_d©a
 *
	md©a
;

90 
mmc_comm™d
 *
	m°›
;

92 *
	md⁄e_d©a
;

93 (*
	md⁄e
)(
	mmmc_ªque°
 *);

96 
	gmmc_ho°
;

97 
	gmmc_ˇrd
;

	@linux/mmzone.h

12 #i‚de‡
_LINUX_MMZONE_H


13 
	#_LINUX_MMZONE_H


	)

	@linux/mod_devicetable.h

12 #i‚de‡
LINUX_MOD_DEVICETABLE_H


13 
	#LINUX_MOD_DEVICETABLE_H


	)

15 
	#PCI_ANY_ID
 (~0)

	)

17 
	spci_devi˚_id
 {

18 
__u32
 
	mvíd‹
, 
	mdevi˚
;

19 
__u32
 
	msubvíd‹
, 
	msubdevi˚
;

20 
__u32
 
	m˛ass
, 
	m˛ass_mask
;

21 
kî√l_ul⁄g_t
 
	mdrivî_d©a
;

24 
	#IEEE1394_MATCH_VENDOR_ID
 0x0001

	)

25 
	#IEEE1394_MATCH_MODEL_ID
 0x0002

	)

26 
	#IEEE1394_MATCH_SPECIFIER_ID
 0x0004

	)

27 
	#IEEE1394_MATCH_VERSION
 0x0008

	)

29 
	sõì1394_devi˚_id
 {

30 
__u32
 
	mm©ch_Êags
;

31 
__u32
 
	mvíd‹_id
;

32 
__u32
 
	mmodñ_id
;

33 
__u32
 
	m•ecifõr_id
;

34 
__u32
 
	mvîsi⁄
;

35 
kî√l_ul⁄g_t
 
drivî_d©a


36 
__©åibuã__
((
Æig√d
((
kî√l_ul⁄g_t
))));

39 
	susb_devi˚_id
 {

41 
__u16
 
	mm©ch_Êags
;

43 
__u16
 
	midVíd‹
;

44 
__u16
 
	midProdu˘
;

45 
__u16
 
	mbcdDevi˚_lo
;

46 
__u16
 
	mbcdDevi˚_hi
;

48 
__u8
 
	mbDevi˚Cœss
;

49 
__u8
 
	mbDevi˚SubCœss
;

50 
__u8
 
	mbDevi˚PrŸocﬁ
;

52 
__u8
 
	mbI¡îÁ˚Cœss
;

53 
__u8
 
	mbI¡îÁ˚SubCœss
;

54 
__u8
 
	mbI¡îÁ˚PrŸocﬁ
;

56 
kî√l_ul⁄g_t
 
	mdrivî_öfo
;

59 
	#USB_DEVICE_ID_MATCH_VENDOR
 0x0001

	)

60 
	#USB_DEVICE_ID_MATCH_PRODUCT
 0x0002

	)

61 
	#USB_DEVICE_ID_MATCH_DEV_LO
 0x0004

	)

62 
	#USB_DEVICE_ID_MATCH_DEV_HI
 0x0008

	)

63 
	#USB_DEVICE_ID_MATCH_DEV_CLASS
 0x0010

	)

64 
	#USB_DEVICE_ID_MATCH_DEV_SUBCLASS
 0x0020

	)

65 
	#USB_DEVICE_ID_MATCH_DEV_PROTOCOL
 0x0040

	)

66 
	#USB_DEVICE_ID_MATCH_INT_CLASS
 0x0080

	)

67 
	#USB_DEVICE_ID_MATCH_INT_SUBCLASS
 0x0100

	)

68 
	#USB_DEVICE_ID_MATCH_INT_PROTOCOL
 0x0200

	)

70 
	sccw_devi˚_id
 {

71 
__u16
 
	mm©ch_Êags
;

73 
__u16
 
	mcu_ty≥
;

74 
__u16
 
	mdev_ty≥
;

75 
__u8
 
	mcu_modñ
;

76 
__u8
 
	mdev_modñ
;

78 
kî√l_ul⁄g_t
 
	mdrivî_öfo
;

81 
	#CCW_DEVICE_ID_MATCH_CU_TYPE
 0x01

	)

82 
	#CCW_DEVICE_ID_MATCH_CU_MODEL
 0x02

	)

83 
	#CCW_DEVICE_ID_MATCH_DEVICE_TYPE
 0x04

	)

84 
	#CCW_DEVICE_ID_MATCH_DEVICE_MODEL
 0x08

	)

86 
	#PNP_ID_LEN
 8

	)

87 
	#PNP_MAX_DEVICES
 8

	)

89 
	s≤p_devi˚_id
 {

90 
__u8
 
	mid
[
PNP_ID_LEN
];

91 
kî√l_ul⁄g_t
 
	mdrivî_d©a
;

94 
	s≤p_ˇrd_devi˚_id
 {

95 
__u8
 
	mid
[
PNP_ID_LEN
];

96 
kî√l_ul⁄g_t
 
	mdrivî_d©a
;

98 
__u8
 
	mid
[
PNP_ID_LEN
];

99 } 
	mdevs
[
PNP_MAX_DEVICES
];

102 
	#SERIO_ANY
 0xff

	)

104 
	s£rio_devi˚_id
 {

105 
__u8
 
	mty≥
;

106 
__u8
 
	mexåa
;

107 
__u8
 
	mid
;

108 
__u8
 
	m¥Ÿo
;

111 
	sof_devi˚_id


113 
	m«me
[32];

114 
	mty≥
[32];

115 
	mcom∑tibÀ
[128];

116 
kî√l_ul⁄g_t
 
	md©a
;

119 
	svio_devi˚_id
 {

120 
	mty≥
[32];

121 
	mcom∑t
[32];

124 
	spcmcü_devi˚_id
 {

125 
__u16
 
	mm©ch_Êags
;

127 
__u16
 
	mm™f_id
;

128 
__u16
 
	mˇrd_id
;

130 
__u8
 
	mfunc_id
;

132 
__u8
 
	mfun˘i⁄
;

134 
__u8
 
	mdevi˚_no
;

136 
__u32
 
	m¥od_id_hash
[4]

137 
__©åibuã__
((
Æig√d
((
__u32
))));

139 
kî√l_ul⁄g_t
 
	m¥od_id
[4]

140 
__©åibuã__
((
Æig√d
((
kî√l_ul⁄g_t
))));

142 
kî√l_ul⁄g_t
 
	mdrivî_öfo
;

143 
kî√l_ul⁄g_t
 
	mcisfûe
;

146 
	#PCMCIA_DEV_ID_MATCH_MANF_ID
 0x0001

	)

147 
	#PCMCIA_DEV_ID_MATCH_CARD_ID
 0x0002

	)

148 
	#PCMCIA_DEV_ID_MATCH_FUNC_ID
 0x0004

	)

149 
	#PCMCIA_DEV_ID_MATCH_FUNCTION
 0x0008

	)

150 
	#PCMCIA_DEV_ID_MATCH_PROD_ID1
 0x0010

	)

151 
	#PCMCIA_DEV_ID_MATCH_PROD_ID2
 0x0020

	)

152 
	#PCMCIA_DEV_ID_MATCH_PROD_ID3
 0x0040

	)

153 
	#PCMCIA_DEV_ID_MATCH_PROD_ID4
 0x0080

	)

154 
	#PCMCIA_DEV_ID_MATCH_DEVICE_NO
 0x0100

	)

155 
	#PCMCIA_DEV_ID_MATCH_FAKE_CIS
 0x0200

	)

156 
	#PCMCIA_DEV_ID_MATCH_ANONYMOUS
 0x0400

	)

158 
	si2c_devi˚_id
 {

159 
__u16
 
	mid
;

162 
	#INPUT_DEVICE_ID_EV_MAX
 0x1f

	)

163 
	#INPUT_DEVICE_ID_KEY_MAX
 0x1ff

	)

164 
	#INPUT_DEVICE_ID_REL_MAX
 0x0f

	)

165 
	#INPUT_DEVICE_ID_ABS_MAX
 0x3f

	)

166 
	#INPUT_DEVICE_ID_MSC_MAX
 0x07

	)

167 
	#INPUT_DEVICE_ID_LED_MAX
 0x0f

	)

168 
	#INPUT_DEVICE_ID_SND_MAX
 0x07

	)

169 
	#INPUT_DEVICE_ID_FF_MAX
 0x7f

	)

170 
	#INPUT_DEVICE_ID_SW_MAX
 0x0f

	)

172 
	#INPUT_DEVICE_ID_MATCH_BUS
 1

	)

173 
	#INPUT_DEVICE_ID_MATCH_VENDOR
 2

	)

174 
	#INPUT_DEVICE_ID_MATCH_PRODUCT
 4

	)

175 
	#INPUT_DEVICE_ID_MATCH_VERSION
 8

	)

177 
	#INPUT_DEVICE_ID_MATCH_EVBIT
 0x0010

	)

178 
	#INPUT_DEVICE_ID_MATCH_KEYBIT
 0x0020

	)

179 
	#INPUT_DEVICE_ID_MATCH_RELBIT
 0x0040

	)

180 
	#INPUT_DEVICE_ID_MATCH_ABSBIT
 0x0080

	)

181 
	#INPUT_DEVICE_ID_MATCH_MSCIT
 0x0100

	)

182 
	#INPUT_DEVICE_ID_MATCH_LEDBIT
 0x0200

	)

183 
	#INPUT_DEVICE_ID_MATCH_SNDBIT
 0x0400

	)

184 
	#INPUT_DEVICE_ID_MATCH_FFBIT
 0x0800

	)

185 
	#INPUT_DEVICE_ID_MATCH_SWBIT
 0x1000

	)

187 
	söput_devi˚_id
 {

189 
kî√l_ul⁄g_t
 
	mÊags
;

191 
__u16
 
	mbu°y≥
;

192 
__u16
 
	mvíd‹
;

193 
__u16
 
	m¥odu˘
;

194 
__u16
 
	mvîsi⁄
;

196 
kî√l_ul⁄g_t
 
	mevbô
[
INPUT_DEVICE_ID_EV_MAX
 / 
BITS_PER_LONG
 + 1];

197 
kî√l_ul⁄g_t
 
	mkeybô
[
INPUT_DEVICE_ID_KEY_MAX
 / 
BITS_PER_LONG
 + 1];

198 
kî√l_ul⁄g_t
 
	mªlbô
[
INPUT_DEVICE_ID_REL_MAX
 / 
BITS_PER_LONG
 + 1];

199 
kî√l_ul⁄g_t
 
	mabsbô
[
INPUT_DEVICE_ID_ABS_MAX
 / 
BITS_PER_LONG
 + 1];

200 
kî√l_ul⁄g_t
 
	mmscbô
[
INPUT_DEVICE_ID_MSC_MAX
 / 
BITS_PER_LONG
 + 1];

201 
kî√l_ul⁄g_t
 
	mÀdbô
[
INPUT_DEVICE_ID_LED_MAX
 / 
BITS_PER_LONG
 + 1];

202 
kî√l_ul⁄g_t
 
	m¢dbô
[
INPUT_DEVICE_ID_SND_MAX
 / 
BITS_PER_LONG
 + 1];

203 
kî√l_ul⁄g_t
 
	mffbô
[
INPUT_DEVICE_ID_FF_MAX
 / 
BITS_PER_LONG
 + 1];

204 
kî√l_ul⁄g_t
 
	mswbô
[
INPUT_DEVICE_ID_SW_MAX
 / 
BITS_PER_LONG
 + 1];

206 
kî√l_ul⁄g_t
 
	mdrivî_öfo
;

	@linux/module.h

12 #i‚de‡
_LINUX_MODULE_H


13 
	#_LINUX_MODULE_H


	)

15 
	~<löux/sched.h
>

16 
	~<löux/•ölock.h
>

17 
	~<löux/li°.h
>

18 
	~<löux/°©.h
>

19 
	~<löux/compûî.h
>

20 
	~<löux/ˇche.h
>

21 
	~<löux/kmod.h
>

22 
	~<löux/ñf.h
>

23 
	~<löux/°rögify.h
>

24 
	~<löux/kobje˘.h
>

25 
	~<löux/moduÀ∑øm.h
>

26 
	~<asm/loˇl.h
>

28 
	~<asm/moduÀ.h
>

30 
	#MODULE_SUPPORTED_DEVICE
(
«me
)

	)

32 #i‚de‡
MODULE_SYMBOL_PREFIX


33 
	#MODULE_SYMBOL_PREFIX
 ""

	)

36 
	#MODULE_NAME_LEN
 (64 - ())

	)

38 
	skî√l_symbﬁ


40 
	mvÆue
;

41 c⁄° *
	m«me
;

44 
	smodvîsi⁄_öfo


46 
	m¸c
;

47 
	m«me
[
MODULE_NAME_LEN
];

50 
	gmoduÀ
;

52 
	smoduÀ_©åibuã
 {

53 
©åibuã
 
	m©å
;

54 
ssize_t
 (*
show
)(
	mmoduÀ_©åibuã
 *, 
	mmoduÀ
 *, *);

55 
ssize_t
 (*
°‹e
)(
	mmoduÀ_©åibuã
 *, 
	mmoduÀ
 *,

56 c⁄° *, 
size_t
 
	mcou¡
);

57 (*
	m£tup
)(
	mmoduÀ
 *, const *);

58 (*
	mã°
)(
	mmoduÀ
 *);

59 (*
	m‰ì
)(
	mmoduÀ
 *);

62 
	smoduÀ_kobje˘


64 
kobje˘
 
	mkobj
;

65 
moduÀ
 *
	mmod
;

68 
	gex˚±i⁄_èbÀ_íåy
;

70 #ifde‡
MODULE


71 
	#MODULE_GENERIC_TABLE
(
gty≥
,
«me
Ëc⁄° gty≥##
_id
 
__mod_
##gty≥##
_èbÀ
 
	`__©åibuã__
 ((
unu£d
, 
	`Æüs
(
	`__°rögify
“ame))))

	)

73 
	#THIS_MODULE
 (&
__this_moduÀ
)

	)

75 
	#MODULE_GENERIC_TABLE
(
gty≥
,
«me
)

	)

76 
	#THIS_MODULE
 ((
moduÀ
 *)0)

	)

79 
	#MODULE_INFO
(
èg
, 
öfo
Ë
	`__MODULE_INFO
—ag,Åag, info)

	)

81 
	#MODULE_ALIAS
(
_Æüs
Ë
	`MODULE_INFO
(
Æüs
, _Æüs)

	)

83 
	#MODULE_LICENSE
(
_li˚n£
Ë
	`MODULE_INFO
(
li˚n£
, _li˚n£)

	)

85 
	#MODULE_AUTHOR
(
_auth‹
Ë
	`MODULE_INFO
(
auth‹
, _auth‹)

	)

87 
	#MODULE_DESCRIPTION
(
_des¸ùti⁄
Ë
	`MODULE_INFO
(
des¸ùti⁄
, _des¸ùti⁄)

	)

89 
	#MODULE_PARM_DESC
(
_∑rm
, 
desc
Ë
	`__MODULE_INFO
(
∑rm
, _∑rm, #_∑rm ":" desc)

	)

91 
	#MODULE_DEVICE_TABLE
(
ty≥
,
«me
Ë
	`MODULE_GENERIC_TABLE
—y≥##
_devi˚
,«me)

	)

93 
	#MODULE_VERSION
(
_vîsi⁄
Ë
	`MODULE_INFO
(
vîsi⁄
, _vîsi⁄)

	)

95 
nŸifõr_block
;

97 
	#EXPORT_SYMBOL
(
sym
)

	)

98 
	#EXPORT_SYMBOL_GPL
(
sym
)

	)

99 
	#EXPORT_SYMBOL_GPL_FUTURE
(
sym
)

	)

100 
	#EXPORT_UNUSED_SYMBOL
(
sym
)

	)

101 
	#EXPORT_UNUSED_SYMBOL_GPL
(
sym
)

	)

103 
	#symbﬁ_gë
(
x
Ë({ 
	`ty≥of
(xËx 
	`__©åibuã__
((
wók
)); &(x); })

	)

104 
	#symbﬁ_put
(
x
Ëdÿ{ } 0)

	)

105 
	#symbﬁ_put_addr
(
x
Ëdÿ{ } 0)

	)

106 
	#moduÀ_«me
(
mod
Ë"kî√l"

	)

107 
	#__unß„
(
mod
)

	)

108 
	#moduÀ_put_™d_exô
(
code
Ë
	`do_exô
(code)

	)

110 
	gmoduÀ
;

112 
	#symbﬁ_ªque°
(
x
Ë
	`åy_thí_ªque°_moduÀ
(
	`symbﬁ_gë
(x), "symbﬁ:" #x)

	)

113 
	#__MODULE_STRING
(
x
Ë
	`__°rögify
(x)

	)

	@linux/moduleparam.h

12 #i‚de‡
_LINUX_MODULE_PARAMS_H


13 
	#_LINUX_MODULE_PARAMS_H


	)

15 
	~<löux/öô.h
>

16 
	~<löux/°rögify.h
>

17 
	~<löux/kî√l.h
>

19 #ifde‡
MODULE


20 
	#MODULE_PARAM_PREFIX


	)

22 
	#MODULE_PARAM_PREFIX
 
KBUILD_MODNAME
 "."

	)

25 #ifde‡
MODULE


26 
	#___moduÀ_ˇt
(
a
,
b
Ë
__mod_
 ##á ## 
	)
b

27 
	#__moduÀ_ˇt
(
a
,
b
Ë
	`___moduÀ_ˇt
◊,b)

	)

28 
	#__MODULE_INFO
(
èg
, 
«me
, 
öfo
Ëc⁄° 
	`__moduÀ_ˇt
“ame,
__LINE__
)[] 
__©åibuã_u£d__
 
	`__©åibuã__
((
	`£˘i⁄
(".modöfo"),
unu£d
)Ë
	`__°rögify
—agË"=" 
	)
info

30 
	#__MODULE_INFO
(
èg
, 
«me
, 
öfo
)

	)

32 
	#__MODULE_PARM_TYPE
(
«me
, 
_ty≥
Ë
	`__MODULE_INFO
(
∑rmty≥
,Çame##
ty≥
, #«mê":" _ty≥)

	)

34 
	gkî√l_∑øm
;

36 (*
	t∑øm_£t_‚
)(c⁄° *
	tvÆ
, 
	tkî√l_∑øm
 *
	tkp
);

38 (*
	t∑øm_gë_‚
)(*
	tbuf„r
, 
	tkî√l_∑øm
 *
	tkp
);

40 
	skî√l_∑øm
 {

41 c⁄° *
«me
;

42 
≥rm
;

43 
∑øm_£t_‚
 
£t
;

44 
∑øm_gë_‚
 
gë
;

45 *
¨g
;

48 
	sk∑øm_°rög
 {

49 
maxÀn
;

50 *
°rög
;

53 
	sk∑øm_¨øy


55 
max
;

56 *
num
;

57 
∑øm_£t_‚
 
£t
;

58 
∑øm_gë_‚
 
gë
;

59 
ñemsize
;

60 *
ñem
;

63 
	#__moduÀ_∑øm_ˇŒ
(
¥efix
, 
«me
, 
£t
, 
gë
, 
¨g
, 
≥rm
Ë
__∑øm_°r_
##«me[] =Öªfix #«me; 
kî√l_∑øm
 c⁄° 
__∑øm_
##«mê
__©åibuã_u£d__
 
	`__©åibuã__
 ((
unu£d
,
	`__£˘i⁄__
 ("__∑øm"),
	`Æig√d
((*)))Ë{ __∑øm_°r_##«me,Öîm, së, gë,árg 
	}

	)
}

65 
	#moduÀ_∑øm_ˇŒ
(
«me
, 
£t
, 
gë
, 
¨g
, 
≥rm
Ë
	`__moduÀ_∑øm_ˇŒ
(
MODULE_PARAM_PREFIX
,Çame, së, gë,árg,Öîm)

	)

67 
	#moduÀ_∑øm_«med
(
«me
, 
vÆue
, 
ty≥
, 
≥rm
Ë
∑øm_check_
##
	`ty≥
“ame, &(vÆue)); 
	`moduÀ_∑øm_ˇŒ
“ame, 
∑øm_£t_
##ty≥, 
∑øm_gë_
##ty≥, &vÆue,Öîm); 
	`__MODULE_PARM_TYPE
“ame, #ty≥)

	)

69 
	#moduÀ_∑øm
(
«me
, 
ty≥
, 
≥rm
Ë
	`moduÀ_∑øm_«med
“ame,Çame,Åy≥,Öîm)

	)

71 
	#moduÀ_∑øm_°rög
(
«me
, 
°rög
, 
Àn
, 
≥rm
Ë
k∑øm_°rög
 
__∑øm_°rög_
##«mê{Üí, såög }; 
	`moduÀ_∑øm_ˇŒ
“ame, 
∑øm_£t_c›y°rög
, 
∑øm_gë_°rög
, &__∑øm_°rög_##«me,Öîm); 
	`__MODULE_PARM_TYPE
“ame, "°rög")

	)

73 
	#__∑øm_check
(
«me
, 
p
, 
ty≥
Ë
ölöe
Åy≥ *
__check_
##
	`«me
(Ë{ ’); }

	)

75 
	#∑øm_check_byã
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

77 
	#∑øm_check_sh‹t
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

79 
	#∑øm_check_ush‹t
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

81 
	#∑øm_check_öt
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

83 
	#∑øm_check_uöt
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

85 
	#∑øm_check_l⁄g
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

87 
	#∑øm_check_ul⁄g
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

89 
	#∑øm_check_ch¨p
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, *)

	)

91 
	#∑øm_check_boﬁ
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

93 
	#∑øm_check_övboﬁ
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

95 
	#moduÀ_∑øm_¨øy_«med
(
«me
, 
¨øy
, 
ty≥
, 
nump
, 
≥rm
Ë
k∑øm_¨øy
 
__∑øm_¨r_
##«mê{ 
	`ARRAY_SIZE
◊ºay),Çump, 
∑øm_£t_
##ty≥, 
∑øm_gë_
##ty≥, ◊ºay[0]),áºay }; 
	`moduÀ_∑øm_ˇŒ
“ame, 
∑øm_¨øy_£t
, 
∑øm_¨øy_gë
, &__∑øm_¨r_##«me,Öîm); 
	`__MODULE_PARM_TYPE
“ame, "¨øy o‡" #ty≥)

	)

97 
	#moduÀ_∑øm_¨øy
(
«me
, 
ty≥
, 
nump
, 
≥rm
Ë
	`moduÀ_∑øm_¨øy_«med
“ame,Çame,Åy≥,Çump,Öîm)

	)

99 
	gmoduÀ
;

	@linux/mount.h

12 #i‚de‡
_LINUX_MOUNT_H


13 
	#_LINUX_MOUNT_H


	)

	@linux/msdos_fs.h

12 #i‚de‡
_LINUX_MSDOS_FS_H


13 
	#_LINUX_MSDOS_FS_H


	)

15 
	~<löux/magic.h
>

17 
	~<asm/byã‹dî.h
>

19 
	#SECTOR_SIZE
 512

	)

20 
	#SECTOR_BITS
 9

	)

21 
	#MSDOS_DPB
 (
MSDOS_DPS
)

	)

22 
	#MSDOS_DPB_BITS
 4

	)

23 
	#MSDOS_DPS
 (
SECTOR_SIZE
 / (
msdos_dú_íåy
))

	)

24 
	#MSDOS_DPS_BITS
 4

	)

25 
	#CF_LE_W
(
v
Ë
	`À16_to_˝u
(v)

	)

26 
	#CF_LE_L
(
v
Ë
	`À32_to_˝u
(v)

	)

27 
	#CT_LE_W
(
v
Ë
	`˝u_to_À16
(v)

	)

28 
	#CT_LE_L
(
v
Ë
	`˝u_to_À32
(v)

	)

30 
	#MSDOS_ROOT_INO
 1

	)

31 
	#MSDOS_DIR_BITS
 5

	)

33 
	#FAT_MAX_DIR_ENTRIES
 (65536)

	)

34 
	#FAT_MAX_DIR_SIZE
 (
FAT_MAX_DIR_ENTRIES
 << 
MSDOS_DIR_BITS
)

	)

36 
	#ATTR_NONE
 0

	)

37 
	#ATTR_RO
 1

	)

38 
	#ATTR_HIDDEN
 2

	)

39 
	#ATTR_SYS
 4

	)

40 
	#ATTR_VOLUME
 8

	)

41 
	#ATTR_DIR
 16

	)

42 
	#ATTR_ARCH
 32

	)

44 
	#ATTR_UNUSED
 (
ATTR_VOLUME
 | 
ATTR_ARCH
 | 
ATTR_SYS
 | 
ATTR_HIDDEN
)

	)

46 
	#ATTR_EXT
 (
ATTR_RO
 | 
ATTR_HIDDEN
 | 
ATTR_SYS
 | 
ATTR_VOLUME
)

	)

48 
	#CASE_LOWER_BASE
 8

	)

49 
	#CASE_LOWER_EXT
 16

	)

51 
	#DELETED_FLAG
 0xe5

	)

52 
	#IS_FREE
(
n
Ë(!*“Ë|| *“Ë=
DELETED_FLAG
)

	)

54 
	#MSDOS_VALID_MODE
 (
S_IFREG
 | 
S_IFDIR
 | 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
)

	)

56 
	#MSDOS_MKMODE
(
a
, 
m
Ë(m & (®& 
ATTR_RO
 ? 
S_IRUGO
|
S_IXUGO
 : 
S_IRWXUGO
))

	)

58 
	#MSDOS_NAME
 11

	)

59 
	#MSDOS_LONGNAME
 256

	)

60 
	#MSDOS_SLOTS
 21

	)

61 
	#MSDOS_DOT
 ". "

	)

62 
	#MSDOS_DOTDOT
 ".. "

	)

64 
	#FAT_VALID_MEDIA
(
x
Ë((0xF8 <(xË&& (xË<0xFFË|| (xË=0xF0)

	)

65 
	#FAT_FIRST_ENT
(
s
, 
x
Ë((
	`MSDOS_SB
(s)->
Át_bôs
 =32 ? 0x0FFFFF00 : MSDOS_SB(s)->Át_bô†=16 ? 0xFF00 : 0xF00Ë| (x))

	)

67 
	#FAT_START_ENT
 2

	)

69 
	#MAX_FAT12
 0xFF4

	)

70 
	#MAX_FAT16
 0xFFF4

	)

71 
	#MAX_FAT32
 0x0FFFFFF6

	)

72 
	#MAX_FAT
(
s
Ë(
	`MSDOS_SB
(s)->
Át_bôs
 =32 ? 
MAX_FAT32
 : MSDOS_SB(s)->Át_bô†=16 ? 
MAX_FAT16
 : 
MAX_FAT12
)

	)

74 
	#BAD_FAT12
 0xFF7

	)

75 
	#BAD_FAT16
 0xFFF7

	)

76 
	#BAD_FAT32
 0x0FFFFFF7

	)

78 
	#EOF_FAT12
 0xFFF

	)

79 
	#EOF_FAT16
 0xFFFF

	)

80 
	#EOF_FAT32
 0x0FFFFFFF

	)

82 
	#FAT_ENT_FREE
 (0)

	)

83 
	#FAT_ENT_BAD
 (
BAD_FAT32
)

	)

84 
	#FAT_ENT_EOF
 (
EOF_FAT32
)

	)

86 
	#FAT_FSINFO_SIG1
 0x41615252

	)

87 
	#FAT_FSINFO_SIG2
 0x61417272

	)

88 
	#IS_FSINFO
(
x
Ë(
	`À32_to_˝u
((x)->
sig«tuª1
Ë=
FAT_FSINFO_SIG1
 &&Üe32_to_˝u((x)->
sig«tuª2
Ë=
FAT_FSINFO_SIG2
)

	)

90 
	#VFAT_IOCTL_READDIR_BOTH
 
	`_IOR
('r', 1, 
dúít
 [2])

	)

91 
	#VFAT_IOCTL_READDIR_SHORT
 
	`_IOR
('r', 2, 
dúít
 [2])

	)

93 
	#FAT_IOCTL_GET_ATTRIBUTES
 
	`_IOR
('r', 0x10, 
__u32
)

	)

94 
	#FAT_IOCTL_SET_ATTRIBUTES
 
	`_IOW
('r', 0x11, 
__u32
)

	)

95 
	#VFAT_IOCTL_GET_VOLUME_ID
 
	`_IOR
('r', 0x12, 
__u32
)

	)

97 
	#VFAT_SFN_DISPLAY_LOWER
 0x0001

	)

98 
	#VFAT_SFN_DISPLAY_WIN95
 0x0002

	)

99 
	#VFAT_SFN_DISPLAY_WINNT
 0x0004

	)

100 
	#VFAT_SFN_CREATE_WIN95
 0x0100

	)

101 
	#VFAT_SFN_CREATE_WINNT
 0x0200

	)

103 
	sÁt_boŸ_£˘‹
 {

104 
__u8
 
	mign‹ed
[3];

105 
__u8
 
	msy°em_id
[8];

106 
__u8
 
	m£˘‹_size
[2];

107 
__u8
 
	m£c_≥r_˛us
;

108 
__À16
 
	mª£rved
;

109 
__u8
 
	mÁts
;

110 
__u8
 
	mdú_íåõs
[2];

111 
__u8
 
	m£˘‹s
[2];

112 
__u8
 
	mmedü
;

113 
__À16
 
	mÁt_Àngth
;

114 
__À16
 
	m£cs_åack
;

115 
__À16
 
	mhóds
;

116 
__À32
 
	mhiddí
;

117 
__À32
 
	mtŸÆ_£˘
;

119 
__À32
 
	mÁt32_Àngth
;

120 
__À16
 
	mÊags
;

121 
__u8
 
	mvîsi⁄
[2];

122 
__À32
 
	mroŸ_˛u°î
;

123 
__À16
 
	möfo_£˘‹
;

124 
__À16
 
	mbackup_boŸ
;

125 
__À16
 
	mª£rved2
[6];

128 
	sÁt_boŸ_fsöfo
 {

129 
__À32
 
	msig«tuª1
;

130 
__À32
 
	mª£rved1
[120];

131 
__À32
 
	msig«tuª2
;

132 
__À32
 
	m‰ì_˛u°îs
;

133 
__À32
 
	m√xt_˛u°î
;

134 
__À32
 
	mª£rved2
[4];

137 
	sÁt_boŸ_bsx
 {

138 
__u8
 
	mdrive
;

139 
__u8
 
	mª£rved1
;

140 
__u8
 
	msig«tuª
;

141 
__u8
 
	mvﬁ_id
[4];

142 
__u8
 
	mvﬁ_œbñ
[11];

143 
__u8
 
	mty≥
[8];

145 
	#FAT16_BSX_OFFSET
 36

	)

146 
	#FAT32_BSX_OFFSET
 64

	)

148 
	smsdos_dú_íåy
 {

149 
__u8
 
	m«me
[
MSDOS_NAME
];

150 
__u8
 
	m©å
;

151 
__u8
 
	mlˇ£
;

152 
__u8
 
	m˘ime_cs
;

153 
__À16
 
	m˘ime
;

154 
__À16
 
	mcd©e
;

155 
__À16
 
	mad©e
;

156 
__À16
 
	m°¨thi
;

157 
__À16
 
	mtime
,
	md©e
,
	m°¨t
;

158 
__À32
 
	msize
;

161 
	smsdos_dú_¶Ÿ
 {

162 
__u8
 
	mid
;

163 
__u8
 
	m«me0_4
[10];

164 
__u8
 
	m©å
;

165 
__u8
 
	mª£rved
;

166 
__u8
 
	mÆüs_checksum
;

167 
__u8
 
	m«me5_10
[12];

168 
__À16
 
	m°¨t
;

169 
__u8
 
	m«me11_12
[4];

172 
	sÁt_¶Ÿ_öfo
 {

173 
loff_t
 
	mi_pos
;

174 
loff_t
 
	m¶Ÿ_off
;

175 
	mƒ_¶Ÿs
;

176 
msdos_dú_íåy
 *
	mde
;

177 
buf„r_hód
 *
	mbh
;

	@linux/msg.h

12 #i‚de‡
_LINUX_MSG_H


13 
	#_LINUX_MSG_H


	)

15 
	~<löux/ùc.h
>

17 
	#MSG_STAT
 11

	)

18 
	#MSG_INFO
 12

	)

20 
	#MSG_NOERROR
 010000

	)

21 
	#MSG_EXCEPT
 020000

	)

23 
	smsqid_ds
 {

24 
ùc_≥rm
 
	mmsg_≥rm
;

25 
msg
 *
	mmsg_fú°
;

26 
msg
 *
	mmsg_œ°
;

27 
__kî√l_time_t
 
	mmsg_°ime
;

28 
__kî√l_time_t
 
	mmsg_πime
;

29 
__kî√l_time_t
 
	mmsg_˘ime
;

30 
	mmsg_lcbyãs
;

31 
	mmsg_lqbyãs
;

32 
	mmsg_cbyãs
;

33 
	mmsg_qnum
;

34 
	mmsg_qbyãs
;

35 
__kî√l_ùc_pid_t
 
	mmsg_l•id
;

36 
__kî√l_ùc_pid_t
 
	mmsg_Ãpid
;

39 
	~<asm/msgbuf.h
>

41 
	smsgbuf
 {

42 
	mmty≥
;

43 
	mmãxt
[1];

46 
	smsgöfo
 {

47 
	mmsgpoﬁ
;

48 
	mmsgm≠
;

49 
	mmsgmax
;

50 
	mmsgmnb
;

51 
	mmsgmni
;

52 
	mmsgssz
;

53 
	mmsgtql
;

54 
	mmsg£g
;

57 
	#MSGMNI
 16

	)

58 
	#MSGMAX
 8192

	)

59 
	#MSGMNB
 16384

	)

61 
	#MSGPOOL
 (
MSGMNI
*
MSGMNB
/1024)

	)

62 
	#MSGTQL
 
MSGMNB


	)

63 
	#MSGMAP
 
MSGMNB


	)

64 
	#MSGSSZ
 16

	)

65 
	#__MSGSEG
 ((
MSGPOOL
*1024)/ 
MSGSSZ
)

	)

66 
	#MSGSEG
 (
__MSGSEG
 <0xfff‡? __MSGSEG : 0xffff)

	)

	@linux/msm_adsp.h

12 #i‚de‡
__LINUX_MSM_ADSP_H


13 
	#__LINUX_MSM_ADSP_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/io˘l.h
>

17 
	~<asm/sizes.h
>

19 
	#ADSP_IOCTL_MAGIC
 'q'

	)

21 
	sad•_comm™d_t
 {

22 
uöt16_t
 
	mqueue
;

23 
uöt32_t
 
	mÀn
;

24 
uöt8_t
 *
	md©a
;

27 
	sad•_evít_t
 {

28 
uöt16_t
 
	mty≥
;

29 
uöt32_t
 
	mtimeout_ms
;

30 
uöt16_t
 
	mmsg_id
;

31 
uöt16_t
 
	mÊags
;

32 
uöt32_t
 
	mÀn
;

33 
uöt8_t
 *
	md©a
;

36 
	sad•_pmem_öfo_t
 {

37 
	mfd
;

38 *
	mvaddr
;

41 
	#ADSP_IOCTL_ENABLE
 
	`_IOR
(
ADSP_IOCTL_MAGIC
, 1, )

	)

43 
	#ADSP_IOCTL_DISABLE
 
	`_IOR
(
ADSP_IOCTL_MAGIC
, 2, )

	)

45 
	#ADSP_IOCTL_DISABLE_ACK
 
	`_IOR
(
ADSP_IOCTL_MAGIC
, 3, )

	)

47 
	#ADSP_IOCTL_WRITE_COMMAND
 
	`_IOR
(
ADSP_IOCTL_MAGIC
, 4, 
ad•_comm™d_t
 *)

	)

49 
	#ADSP_IOCTL_GET_EVENT
 
	`_IOWR
(
ADSP_IOCTL_MAGIC
, 5, 
ad•_evít_d©a_t
 *)

	)

51 
	#ADSP_IOCTL_DISABLE_EVENT_RSP
 
	`_IOR
(
ADSP_IOCTL_MAGIC
, 10, )

	)

53 
	#ADSP_IOCTL_REGISTER_PMEM
 
	`_IOW
(
ADSP_IOCTL_MAGIC
, 13, 
ad•_pmem_öfo
 *)

	)

55 
	#ADSP_IOCTL_ABORT_EVENT_READ
 
	`_IOW
(
ADSP_IOCTL_MAGIC
, 15, )

	)

	@linux/msm_audio.h

12 #i‚de‡
__LINUX_MSM_AUDIO_H


13 
	#__LINUX_MSM_AUDIO_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/io˘l.h
>

17 
	~<asm/sizes.h
>

19 
	#AUDIO_IOCTL_MAGIC
 'a'

	)

21 
	#AUDIO_START
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 0, )

	)

22 
	#AUDIO_STOP
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 1, )

	)

23 
	#AUDIO_FLUSH
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 2, )

	)

24 
	#AUDIO_GET_CONFIG
 
	`_IOR
(
AUDIO_IOCTL_MAGIC
, 3, )

	)

25 
	#AUDIO_SET_CONFIG
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 4, )

	)

26 
	#AUDIO_GET_STATS
 
	`_IOR
(
AUDIO_IOCTL_MAGIC
, 5, )

	)

27 
	#AUDIO_ENABLE_AUDPP
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 6, )

	)

28 
	#AUDIO_SET_ADRC
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 7, )

	)

29 
	#AUDIO_SET_EQ
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 8, )

	)

30 
	#AUDIO_SET_RX_IIR
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 9, )

	)

31 
	#AUDIO_SET_VOLUME
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 10, )

	)

32 
	#AUDIO_ENABLE_AUDPRE
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 11, )

	)

33 
	#AUDIO_SET_AGC
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 12, )

	)

34 
	#AUDIO_SET_NS
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 13, )

	)

35 
	#AUDIO_SET_TX_IIR
 
	`_IOW
(
AUDIO_IOCTL_MAGIC
, 14, )

	)

37 
	smsm_audio_c⁄fig
 {

38 
uöt32_t
 
	mbuf„r_size
;

39 
uöt32_t
 
	mbuf„r_cou¡
;

40 
uöt32_t
 
	mch™√l_cou¡
;

41 
uöt32_t
 
	mßm∂e_øã
;

42 
uöt32_t
 
	mty≥
;

43 
uöt32_t
 
	munu£d
[3];

46 
	smsm_audio_°©s
 {

47 
uöt32_t
 
	mbyã_cou¡
;

48 
uöt32_t
 
	mßm∂e_cou¡
;

49 
uöt32_t
 
	munu£d
[2];

52 
	#SND_IOCTL_MAGIC
 's'

	)

54 
	#SND_MUTE_UNMUTED
 0

	)

55 
	#SND_MUTE_MUTED
 1

	)

57 
	smsm_¢d_devi˚_c⁄fig
 {

58 
uöt32_t
 
	mdevi˚
;

59 
uöt32_t
 
	mór_muã
;

60 
uöt32_t
 
	mmic_muã
;

63 
	#SND_SET_DEVICE
 
	`_IOW
(
SND_IOCTL_MAGIC
, 2, 
msm_devi˚_c⁄fig
 *)

	)

65 
	#SND_METHOD_VOICE
 0

	)

67 
	smsm_¢d_vﬁume_c⁄fig
 {

68 
uöt32_t
 
	mdevi˚
;

69 
uöt32_t
 
	mmëhod
;

70 
uöt32_t
 
	mvﬁume
;

73 
	#SND_SET_VOLUME
 
	`_IOW
(
SND_IOCTL_MAGIC
, 3, 
msm_¢d_vﬁume_c⁄fig
 *)

	)

75 
	#SND_GET_NUM_ENDPOINTS
 
	`_IOR
(
SND_IOCTL_MAGIC
, 4, *)

	)

77 
	smsm_¢d_ídpoöt
 {

78 
	mid
;

79 
	m«me
[64];

82 
	#SND_GET_ENDPOINT
 
	`_IOWR
(
SND_IOCTL_MAGIC
, 5, 
msm_¢d_ídpoöt
 *)

	)

	@linux/msm_mdp.h

12 #i‚de‡
_MSM_MDP_H_


13 
	#_MSM_MDP_H_


	)

15 
	~<löux/ty≥s.h
>

17 
	#MSMFB_IOCTL_MAGIC
 'm'

	)

18 
	#MSMFB_GRP_DISP
 
	`_IOW
(
MSMFB_IOCTL_MAGIC
, 1, )

	)

19 
	#MSMFB_BLIT
 
	`_IOW
(
MSMFB_IOCTL_MAGIC
, 2, )

	)

22 
	mMDP_RGB_565
,

23 
	mMDP_XRGB_8888
,

24 
	mMDP_Y_CBCR_H2V2
,

25 
	mMDP_ARGB_8888
,

26 
	mMDP_RGB_888
,

27 
	mMDP_Y_CRCB_H2V2
,

28 
	mMDP_YCRYCB_H2V1
,

29 
	mMDP_Y_CRCB_H2V1
,

30 
	mMDP_Y_CBCR_H2V1
,

31 
	mMDP_RGBA_8888
,

32 
	mMDP_BGRA_8888
,

33 
	mMDP_IMGTYPE_LIMIT


37 
	mPMEM_IMG
,

38 
	mFB_IMG
,

41 
	#MDP_ROT_NOP
 0

	)

42 
	#MDP_FLIP_LR
 0x1

	)

43 
	#MDP_FLIP_UD
 0x2

	)

44 
	#MDP_ROT_90
 0x4

	)

45 
	#MDP_ROT_180
 (
MDP_FLIP_UD
|
MDP_FLIP_LR
)

	)

46 
	#MDP_ROT_270
 (
MDP_ROT_90
|
MDP_FLIP_UD
|
MDP_FLIP_LR
)

	)

47 
	#MDP_DITHER
 0x8

	)

48 
	#MDP_BLUR
 0x10

	)

50 
	#MDP_TRANSP_NOP
 0xffffffff

	)

51 
	#MDP_ALPHA_NOP
 0xff

	)

53 
	smdp_ª˘
 {

54 
uöt32_t
 
	mx
;

55 
uöt32_t
 
	my
;

56 
uöt32_t
 
	mw
;

57 
uöt32_t
 
	mh
;

60 
	smdp_img
 {

61 
uöt32_t
 
	mwidth
;

62 
uöt32_t
 
	mheight
;

63 
uöt32_t
 
	mf‹m©
;

64 
uöt32_t
 
	moff£t
;

65 
	mmem‹y_id
;

68 
	smdp_blô_ªq
 {

69 
mdp_img
 
	m§c
;

70 
mdp_img
 
	md°
;

71 
mdp_ª˘
 
	m§c_ª˘
;

72 
mdp_ª˘
 
	md°_ª˘
;

73 
uöt32_t
 
	mÆpha
;

74 
uöt32_t
 
	må™•_mask
;

75 
uöt32_t
 
	mÊags
;

78 
	smdp_blô_ªq_li°
 {

79 
uöt32_t
 
	mcou¡
;

80 
mdp_blô_ªq
 
	mªq
[];

	@linux/mt9t013.h

12 #i‚de‡
CAMERA_MT9T013_H


13 
	#CAMERA_MT9T013_H


	)

14 
	~<löux/cdev.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<löux/io˘l.h
>

17 
	~<asm/sizes.h
>

19 
	#MT9T013_I2C_IOCTL_MAGIC
 'm'

	)

21 
	#MT9T013_I2C_IOCTL_W
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 0, )

	)

23 
	#MT9T013_I2C_IOCTL_R
 
	`_IOR
(
MT9T013_I2C_IOCTL_MAGIC
, 1, )

	)

25 
	#MT9T013_I2C_IOCTL_AF_W
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 2, )

	)

27 
	#MT9T013_I2C_IOCTL_CAMIF_PAD_REG_RESET
 
	`_IO
(
MT9T013_I2C_IOCTL_MAGIC
, 3)

	)

29 
	#MT9T013_I2C_IOCTL_CAMIF_PAD_REG_RESET_2
 
	`_IO
(
MT9T013_I2C_IOCTL_MAGIC
, 4)

	)

31 
	#CAMERA_CONFIGURE_GPIOS
 
	`_IO
(
MT9T013_I2C_IOCTL_MAGIC
, 7)

	)

33 
	#CAMERA_UNCONFIGURE_GPIOS
 
	`_IO
(
MT9T013_I2C_IOCTL_MAGIC
, 8)

	)

35 
	#CAMERA_LENS_POWER_ON
 
	`_IO
(
MT9T013_I2C_IOCTL_MAGIC
, 9)

	)

37 
	#CAMERA_LENS_POWER_OFF
 
	`_IO
(
MT9T013_I2C_IOCTL_MAGIC
, 10)

	)

39 
	#MT9T013_I2C_IOCTL_CAMIF_APPS_RESET
 
	`_IO
(
MT9T013_I2C_IOCTL_MAGIC
, 11)

	)

41 
	#CAMIO_VFE_MDC_CLK
 1

	)

42 
	#CAMIO_MDC_CLK
 2

	)

43 
	#CAMIO_VFE_CLK
 3

	)

45 
	#MT9T013_I2C_IOCTL_CLK_ENABLE
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 12, )

	)

47 
	#MT9T013_I2C_IOCTL_CLK_DISABLE
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 13, )

	)

49 
	#MT9T013_I2C_IOCTL_CLK_SELECT
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 14, )

	)

51 
	#MT9T013_I2C_IOCTL_CLK_FREQ_PROG
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 15, )

	)

53 
	#CAMSENSOR_REG_INIT
 0<<0

	)

54 
	#CAMSENSOR_REG_UPDATE_PERIODIC
 1<<0

	)

55 
	#CAMSENSOR_TYPE_PREVIEW
 0<<1

	)

56 
	#CAMSENSOR_TYPE_SNAPSHOT
 1<<1

	)

58 
	#MT9T013_I2C_IOCTL_SENSOR_SETTING
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 16, 
uöt32_t
)

	)

60 
	smt9t013_ªg_°ru˘


62 
uöt16_t
 
	mvt_pix_˛k_div
;

63 
uöt16_t
 
	mvt_sys_˛k_div
;

64 
uöt16_t
 
	m¥e_∂l_˛k_div
;

65 
uöt16_t
 
	m∂l_mu…ùlõr
;

66 
uöt16_t
 
	m›_pix_˛k_div
;

67 
uöt16_t
 
	m›_sys_˛k_div
;

68 
uöt16_t
 
	msˇÀ_m
;

69 
uöt16_t
 
	mrow_•ìd
;

70 
uöt16_t
 
	mx_addr_°¨t
;

71 
uöt16_t
 
	mx_addr_íd
;

72 
uöt16_t
 
	my_addr_°¨t
;

73 
uöt16_t
 
	my_addr_íd
;

74 
uöt16_t
 
	mªad_mode
;

75 
uöt16_t
 
	mx_ouçut_size
 ;

76 
uöt16_t
 
	my_ouçut_size
;

77 
uöt16_t
 
	mlöe_Àngth_pck
;

78 
uöt16_t
 
	m‰ame_Àngth_löes
;

79 
uöt16_t
 
	mcﬂr£_öãgøti⁄_time
;

80 
uöt16_t
 
	mföe_öãgøti⁄_time
;

83 
	smt9t013_ªg_∑t
 {

84 
mt9t013_ªg_°ru˘
 
	mªg
[2];

87 
	#MT9T013_I2C_IOCTL_GET_REGISTERS
 
	`_IOR
(
MT9T013_I2C_IOCTL_MAGIC
, 17, 
mt9t013_ªg_∑t
 *)

	)

89 
	smt9t013_exposuª_gaö
 {

90 
uöt16_t
 
	mgaö
;

91 
uöt16_t
 
	mlöe
;

92 
uöt32_t
 
	mmode
;

95 
	#MT9T013_I2C_IOCTL_EXPOSURE_GAIN
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 18, 
exposuª_gaö
 *)

	)

97 
	#MT9T013_I2C_IOCTL_MOVE_FOCUS
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 19, 
uöt32_t
)

	)

99 
	#MT9T013_I2C_IOCTL_SET_DEFAULT_FOCUS
 
	`_IOW
(
MT9T013_I2C_IOCTL_MAGIC
, 20, 
uöt32_t
)

	)

101 
	#MT9T013_I2C_IOCTL_POWER_DOWN
 
	`_IO
(
MT9T013_I2C_IOCTL_MAGIC
, 21)

	)

103 
	smt9t013_öô
 {

104 
	m¥evõw
;

105 
uöt16_t
 
	mchùid
;

108 
	#MT9T013_I2C_IOCTL_INIT
 
	`_IOWR
(
MT9T013_I2C_IOCTL_MAGIC
, 22, 
mt9t013_öô
 *)

	)

	@linux/mtd/bbm.h

12 #i‚de‡
__LINUX_MTD_BBM_H


13 
	#__LINUX_MTD_BBM_H


	)

15 
	#NAND_MAX_CHIPS
 8

	)

17 
	s«nd_bbt_des¸
 {

18 
	m›ti⁄s
;

19 
	m∑ges
[
NAND_MAX_CHIPS
];

20 
	moffs
;

21 
	mvîoffs
;

22 
uöt8_t
 
	mvîsi⁄
[
NAND_MAX_CHIPS
];

23 
	mÀn
;

24 
	mmaxblocks
;

25 
	mª£rved_block_code
;

26 
uöt8_t
 *
	m∑âîn
;

29 
	#NAND_BBT_NRBITS_MSK
 0x0000000F

	)

30 
	#NAND_BBT_1BIT
 0x00000001

	)

31 
	#NAND_BBT_2BIT
 0x00000002

	)

32 
	#NAND_BBT_4BIT
 0x00000004

	)

33 
	#NAND_BBT_8BIT
 0x00000008

	)

35 
	#NAND_BBT_LASTBLOCK
 0x00000010

	)

37 
	#NAND_BBT_ABSPAGE
 0x00000020

	)

39 
	#NAND_BBT_SEARCH
 0x00000040

	)

41 
	#NAND_BBT_PERCHIP
 0x00000080

	)

43 
	#NAND_BBT_VERSION
 0x00000100

	)

45 
	#NAND_BBT_CREATE
 0x00000200

	)

47 
	#NAND_BBT_SCANALLPAGES
 0x00000400

	)

49 
	#NAND_BBT_SCANEMPTY
 0x00000800

	)

51 
	#NAND_BBT_WRITE
 0x00001000

	)

53 
	#NAND_BBT_SAVECONTENT
 0x00002000

	)

55 
	#NAND_BBT_SCAN2NDPAGE
 0x00004000

	)

57 
	#NAND_BBT_SCAN_MAXBLOCKS
 4

	)

59 
	#ONENAND_BADBLOCK_POS
 0

	)

61 
	sbbm_öfo
 {

62 
	mbbt_îa£_shi·
;

63 
	mbadblockpos
;

64 
	m›ti⁄s
;

66 
uöt8_t
 *
	mbbt
;

68 (*
	misbad_bbt
)(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
	mÆlowbbt
);

70 
«nd_bbt_des¸
 *
	mbadblock_∑âîn
;

72 *
	m¥iv
;

	@linux/mtd/blktrans.h

12 #i‚de‡
__MTD_TRANS_H__


13 
	#__MTD_TRANS_H__


	)

15 
	~<löux/muãx.h
>

17 
	ghd_geomëry
;

18 
	gmtd_öfo
;

19 
	gmtd_blkå™s_›s
;

20 
	gfûe
;

21 
	göode
;

23 
	smtd_blkå™s_dev
 {

24 
mtd_blkå™s_›s
 *
	må
;

25 
li°_hód
 
	mli°
;

26 
mtd_öfo
 *
	mmtd
;

27 
muãx
 
	mlock
;

28 
	mdevnum
;

29 
	mblksize
;

30 
	msize
;

31 
	mªad⁄ly
;

32 *
	mblkc‹e_¥iv
;

35 
	gblkc‹e_¥iv
;

37 
	smtd_blkå™s_›s
 {

38 *
	m«me
;

39 
	mmaj‹
;

40 
	m∑π_bôs
;

42 (*
	mªad£˘
)(
mtd_blkå™s_dev
 *
	mdev
,

43 
	mblock
, *
	mbuf„r
);

44 (*
	mwrôe£˘
)(
mtd_blkå™s_dev
 *
	mdev
,

45 
	mblock
, *
	mbuf„r
);

47 (*
	mgëgeo
)(
mtd_blkå™s_dev
 *
	mdev
, 
hd_geomëry
 *
	mgeo
);

48 (*
	mÊush
)(
mtd_blkå™s_dev
 *
	mdev
);

50 (*
	m›í
)(
mtd_blkå™s_dev
 *
	mdev
);

51 (*
	mªÀa£
)(
mtd_blkå™s_dev
 *
	mdev
);

53 (*
	madd_mtd
)(
mtd_blkå™s_›s
 *
	må
, 
mtd_öfo
 *
	mmtd
);

54 (*
	mªmove_dev
)(
mtd_blkå™s_dev
 *
	mdev
);

56 
li°_hód
 
	mdevs
;

57 
li°_hód
 
	mli°
;

58 
moduÀ
 *
	mow√r
;

60 
mtd_blkc‹e_¥iv
 *
	mblkc‹e_¥iv
;

	@linux/mtd/cfi.h

12 #i‚de‡
__MTD_CFI_H__


13 
	#__MTD_CFI_H__


	)

15 
	~<löux/dñay.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/öãºu±.h
>

18 
	~<löux/mtd/Êashchù.h
>

19 
	~<löux/mtd/m≠.h
>

20 
	~<löux/mtd/cfi_ídün.h
>

22 
	#cfi_öãæóve_is_1
(
cfi
Ë(0)

	)

24 
	#cfi_öãæóve_is_2
(
cfi
Ë(0)

	)

26 
	#cfi_öãæóve_is_4
(
cfi
Ë(0)

	)

28 
	#cfi_öãæóve_is_8
(
cfi
Ë(0)

	)

30 
	#CFI_DEVICETYPE_X8
 (8 / 8)

	)

31 
	#CFI_DEVICETYPE_X16
 (16 / 8)

	)

32 
	#CFI_DEVICETYPE_X32
 (32 / 8)

	)

33 
	#CFI_DEVICETYPE_X64
 (64 / 8)

	)

35 
	scfi_extquîy
 {

36 
uöt8_t
 
	m¥i
[3];

37 
uöt8_t
 
	mMaj‹Vîsi⁄
;

38 
uöt8_t
 
	mMö‹Vîsi⁄
;

39 } 
__©åibuã__
((
∑cked
));

41 
	scfi_¥i_öãÀxt
 {

42 
uöt8_t
 
	m¥i
[3];

43 
uöt8_t
 
	mMaj‹Vîsi⁄
;

44 
uöt8_t
 
	mMö‹Vîsi⁄
;

45 
uöt32_t
 
	mFótuªSuµ‹t
;

46 
uöt8_t
 
	mSu•ídCmdSuµ‹t
;

47 
uöt16_t
 
	mBlkSètusRegMask
;

48 
uöt8_t
 
	mVccO±imÆ
;

49 
uöt8_t
 
	mVµO±imÆ
;

50 
uöt8_t
 
	mNumPrŸe˘i⁄Fõlds
;

51 
uöt16_t
 
	mPrŸRegAddr
;

52 
uöt8_t
 
	mFa˘PrŸRegSize
;

53 
uöt8_t
 
	mU£rPrŸRegSize
;

54 
uöt8_t
 
	mexåa
[0];

55 } 
__©åibuã__
((
∑cked
));

57 
	scfi_öãÀxt_Ÿpöfo
 {

58 
uöt32_t
 
	mPrŸRegAddr
;

59 
uöt16_t
 
	mFa˘Groups
;

60 
uöt8_t
 
	mFa˘PrŸRegSize
;

61 
uöt16_t
 
	mU£rGroups
;

62 
uöt8_t
 
	mU£rPrŸRegSize
;

63 } 
__©åibuã__
((
∑cked
));

65 
	scfi_öãÀxt_blocköfo
 {

66 
uöt16_t
 
	mNumIdítBlocks
;

67 
uöt16_t
 
	mBlockSize
;

68 
uöt16_t
 
	mMöBlockEø£Cy˛es
;

69 
uöt8_t
 
	mBôsPîCñl
;

70 
uöt8_t
 
	mBlockC≠
;

71 } 
__©åibuã__
((
∑cked
));

73 
	scfi_öãÀxt_ªgi⁄öfo
 {

74 
uöt16_t
 
	mNumIdítP¨tôi⁄s
;

75 
uöt8_t
 
	mNumOpAŒowed
;

76 
uöt8_t
 
	mNumOpAŒowedSimProgMode
;

77 
uöt8_t
 
	mNumOpAŒowedSimEøMode
;

78 
uöt8_t
 
	mNumBlockTy≥s
;

79 
cfi_öãÀxt_blocköfo
 
	mBlockTy≥s
[1];

80 } 
__©åibuã__
((
∑cked
));

82 
	scfi_öãÀxt_¥ogømmög_ªgi⁄öfo
 {

83 
uöt8_t
 
	mProgRegShi·
;

84 
uöt8_t
 
	mRe£rved1
;

85 
uöt8_t
 
	mC⁄åﬁVÆid
;

86 
uöt8_t
 
	mRe£rved2
;

87 
uöt8_t
 
	mC⁄åﬁInvÆid
;

88 
uöt8_t
 
	mRe£rved3
;

89 } 
__©åibuã__
((
∑cked
));

91 
	scfi_¥i_amd°d
 {

92 
uöt8_t
 
	m¥i
[3];

93 
uöt8_t
 
	mMaj‹Vîsi⁄
;

94 
uöt8_t
 
	mMö‹Vîsi⁄
;

95 
uöt8_t
 
	mSûic⁄Revisi⁄
;

96 
uöt8_t
 
	mEø£Su•íd
;

97 
uöt8_t
 
	mBlkPrŸ
;

98 
uöt8_t
 
	mTmpBlkU≈rŸe˘
;

99 
uöt8_t
 
	mBlkPrŸU≈rŸ
;

100 
uöt8_t
 
	mSimu…™eousOps
;

101 
uöt8_t
 
	mBur°Mode
;

102 
uöt8_t
 
	mPageMode
;

103 
uöt8_t
 
	mVµMö
;

104 
uöt8_t
 
	mVµMax
;

105 
uöt8_t
 
	mT›BŸtom
;

106 } 
__©åibuã__
((
∑cked
));

108 
	scfi_¥i_©mñ
 {

109 
uöt8_t
 
	m¥i
[3];

110 
uöt8_t
 
	mMaj‹Vîsi⁄
;

111 
uöt8_t
 
	mMö‹Vîsi⁄
;

112 
uöt8_t
 
	mFótuªs
;

113 
uöt8_t
 
	mBŸtomBoŸ
;

114 
uöt8_t
 
	mBur°Mode
;

115 
uöt8_t
 
	mPageMode
;

116 } 
__©åibuã__
((
∑cked
));

118 
	scfi_¥i_quîy
 {

119 
uöt8_t
 
	mNumFõlds
;

120 
uöt32_t
 
	mPrŸFõld
[1];

121 } 
__©åibuã__
((
∑cked
));

123 
	scfi_bri_quîy
 {

124 
uöt8_t
 
	mPageModeRódC≠
;

125 
uöt8_t
 
	mNumFõlds
;

126 
uöt32_t
 
	mC⁄fFõld
[1];

127 } 
__©åibuã__
((
∑cked
));

129 
	#P_ID_NONE
 0x0000

	)

130 
	#P_ID_INTEL_EXT
 0x0001

	)

131 
	#P_ID_AMD_STD
 0x0002

	)

132 
	#P_ID_INTEL_STD
 0x0003

	)

133 
	#P_ID_AMD_EXT
 0x0004

	)

134 
	#P_ID_WINBOND
 0x0006

	)

135 
	#P_ID_ST_ADV
 0x0020

	)

136 
	#P_ID_MITSUBISHI_STD
 0x0100

	)

137 
	#P_ID_MITSUBISHI_EXT
 0x0101

	)

138 
	#P_ID_SST_PAGE
 0x0102

	)

139 
	#P_ID_INTEL_PERFORMANCE
 0x0200

	)

140 
	#P_ID_INTEL_DATA
 0x0210

	)

141 
	#P_ID_RESERVED
 0xffff

	)

143 
	#CFI_MODE_CFI
 1

	)

144 
	#CFI_MODE_JEDEC
 0

	)

146 
	scfi_¥iv©e
 {

147 
uöt16_t
 
	mcmd£t
;

148 *
	mcmd£t_¥iv
;

149 
	möãæóve
;

150 
	mdevi˚_ty≥
;

151 
	mcfi_mode
;

152 
	maddr_u∆ock1
;

153 
	maddr_u∆ock2
;

154 
	mmtd_öfo
 *(*
	mcmd£t_£tup
)(
	mm≠_öfo
 *);

155 
cfi_idít
 *
	mcfiq
;

156 
	mm‰
, 
	mid
;

157 
	mnumchùs
;

158 
	mchùshi·
;

159 c⁄° *
	mim_«me
;

160 
Êchù
 
	mchùs
[0];

163 #i‡
BITS_PER_LONG
 >= 64

165 
	#CMD
(
x
Ë
	`cfi_buûd_cmd
((x), 
m≠
, 
cfi
)

	)

166 #i‡
BITS_PER_LONG
 >= 64

168 
	#MERGESTATUS
(
x
Ë
	`cfi_mîge_°©us
((x), 
m≠
, 
cfi
)

	)

170 
	scfi_fixup
 {

171 
uöt16_t
 
	mm‰
;

172 
uöt16_t
 
	mid
;

173 (*
	mfixup
)(
mtd_öfo
 *
	mmtd
, * 
	m∑øm
);

174 * 
	m∑øm
;

177 
	#CFI_MFR_ANY
 0xffff

	)

178 
	#CFI_ID_ANY
 0xffff

	)

180 
	#CFI_MFR_AMD
 0x0001

	)

181 
	#CFI_MFR_ATMEL
 0x001F

	)

182 
	#CFI_MFR_ST
 0x0020

	)

184 (*
	tv¨size_‰ob_t
)(
	tm≠_öfo
 *
	tm≠
, 
	tÊchù
 *
	tchù
,

185 
	tadr
, 
	tÀn
, *
	tthunk
);

	@linux/mtd/cfi_endian.h

12 
	~<asm/byã‹dî.h
>

14 
	#CFI_HOST_ENDIAN


	)

16 #ifde‡
CFI_LITTLE_ENDIAN


17 
	#˝u_to_cfi8
(
x
Ë(x)

	)

18 
	#cfi8_to_˝u
(
x
Ë(x)

	)

19 
	#˝u_to_cfi16
(
x
Ë
	`˝u_to_À16
(x)

	)

20 
	#˝u_to_cfi32
(
x
Ë
	`˝u_to_À32
(x)

	)

21 
	#˝u_to_cfi64
(
x
Ë
	`˝u_to_À64
(x)

	)

22 
	#cfi16_to_˝u
(
x
Ë
	`À16_to_˝u
(x)

	)

23 
	#cfi32_to_˝u
(
x
Ë
	`À32_to_˝u
(x)

	)

24 
	#cfi64_to_˝u
(
x
Ë
	`À64_to_˝u
(x)

	)

25 #ñi‡
deföed
 (
CFI_BIG_ENDIAN
)

26 
	#˝u_to_cfi8
(
x
Ë(x)

	)

27 
	#cfi8_to_˝u
(
x
Ë(x)

	)

28 
	#˝u_to_cfi16
(
x
Ë
	`˝u_to_be16
(x)

	)

29 
	#˝u_to_cfi32
(
x
Ë
	`˝u_to_be32
(x)

	)

30 
	#˝u_to_cfi64
(
x
Ë
	`˝u_to_be64
(x)

	)

31 
	#cfi16_to_˝u
(
x
Ë
	`be16_to_˝u
(x)

	)

32 
	#cfi32_to_˝u
(
x
Ë
	`be32_to_˝u
(x)

	)

33 
	#cfi64_to_˝u
(
x
Ë
	`be64_to_˝u
(x)

	)

34 #ñi‡
deföed
 (
CFI_HOST_ENDIAN
)

35 
	#˝u_to_cfi8
(
x
Ë(x)

	)

36 
	#cfi8_to_˝u
(
x
Ë(x)

	)

37 
	#˝u_to_cfi16
(
x
Ë(x)

	)

38 
	#˝u_to_cfi32
(
x
Ë(x)

	)

39 
	#˝u_to_cfi64
(
x
Ë(x)

	)

40 
	#cfi16_to_˝u
(
x
Ë(x)

	)

41 
	#cfi32_to_˝u
(
x
Ë(x)

	)

42 
	#cfi64_to_˝u
(
x
Ë(x)

	)

44 #îr‹ 
No
 
CFI
 
ídü¬ess
 
deföed


	@linux/mtd/compatmac.h

12 #i‚de‡
__LINUX_MTD_COMPATMAC_H__


13 
	#__LINUX_MTD_COMPATMAC_H__


	)

	@linux/mtd/flashchip.h

12 #i‚de‡
__MTD_FLASHCHIP_H__


13 
	#__MTD_FLASHCHIP_H__


	)

15 
	~<löux/sched.h
>

18 
	mFL_READY
,

19 
	mFL_STATUS
,

20 
	mFL_CFI_QUERY
,

21 
	mFL_JEDEC_QUERY
,

22 
	mFL_ERASING
,

23 
	mFL_ERASE_SUSPENDING
,

24 
	mFL_ERASE_SUSPENDED
,

25 
	mFL_WRITING
,

26 
	mFL_WRITING_TO_BUFFER
,

27 
	mFL_OTP_WRITE
,

28 
	mFL_WRITE_SUSPENDING
,

29 
	mFL_WRITE_SUSPENDED
,

30 
	mFL_PM_SUSPENDED
,

31 
	mFL_SYNCING
,

32 
	mFL_UNLOADING
,

33 
	mFL_LOCKING
,

34 
	mFL_UNLOCKING
,

35 
	mFL_POINT
,

36 
	mFL_XIP_WHILE_ERASING
,

37 
	mFL_XIP_WHILE_WRITING
,

38 
	mFL_UNKNOWN


39 } 
	tÊ°©e_t
;

41 
	sÊchù
 {

42 
	m°¨t
;

44 
	mªf_poöt_cou¡î
;

45 
Ê°©e_t
 
	m°©e
;

46 
Ê°©e_t
 
	mﬁd°©e
;

48 
	mwrôe_su•íded
:1;

49 
	mîa£_su•íded
:1;

50 
	mö_¥ogªss_block_addr
;

52 
•ölock_t
 *
	mmuãx
;

53 
•ölock_t
 
	m_•ölock
;

54 
waô_queue_hód_t
 
	mwq
;

55 
	mw‹d_wrôe_time
;

56 
	mbuf„r_wrôe_time
;

57 
	mîa£_time
;

59 *
	m¥iv
;

62 
	sÊchù_sh¨ed
 {

63 
•ölock_t
 
	mlock
;

64 
Êchù
 *
	mwrôög
;

65 
Êchù
 *
	mîasög
;

	@linux/mtd/map.h

12 #i‚de‡
__LINUX_MTD_MAP_H__


13 
	#__LINUX_MTD_MAP_H__


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/li°.h
>

17 
	~<löux/°rög.h
>

19 
	~<löux/mtd/com∑tmac.h
>

21 
	~<asm/u«lig√d.h
>

22 
	~<asm/sy°em.h
>

23 
	~<asm/io.h
>

25 
	#m≠_b™kwidth_is_1
(
m≠
Ë(0)

	)

27 
	#m≠_b™kwidth_is_2
(
m≠
Ë(0)

	)

29 
	#m≠_b™kwidth_is_4
(
m≠
Ë(0)

	)

31 
	#m≠_ˇlc_w‹ds
(
m≠
Ë((
	`m≠_b™kwidth
(m≠Ë+ (()-1))/ ())

	)

33 
	#m≠_b™kwidth_is_8
(
m≠
Ë(0)

	)

35 
	#m≠_b™kwidth_is_16
(
m≠
Ë(0)

	)

37 
	#m≠_b™kwidth_is_32
(
m≠
Ë(0)

	)

39 #i‚de‡
m≠_b™kwidth


43 
	#MAX_MAP_LONGS
 ( ((
MAX_MAP_BANKWIDTH
*8Ë+ 
BITS_PER_LONG
 - 1Ë/ BITS_PER_LONG )

	)

45 
	sm≠_öfo
 {

46 *
	m«me
;

47 
	msize
;

48 
	mphys
;

49 
	#NO_XIP
 (-1UL)

	)

51 
__iomem
 *
	mvút
;

52 *
	mˇched
;

54 
	mb™kwidth
;

56 (*
	mövÆ_ˇche
)(
	mm≠_öfo
 *, , 
	mssize_t
);

58 (*
	m£t_vµ
)(
	mm≠_öfo
 *, );

60 
	mm≠_¥iv_1
;

61 
	mm≠_¥iv_2
;

62 *
	mÊdrv_¥iv
;

63 
mtd_chù_drivî
 *
	mÊdrv
;

66 
	smtd_chù_drivî
 {

67 
	mmtd_öfo
 *(*
	m¥obe
)(
m≠_öfo
 *
	mm≠
);

68 (*
	mde°roy
)(
	mmtd_öfo
 *);

69 
moduÀ
 *
	mmoduÀ
;

70 *
	m«me
;

71 
li°_hód
 
	mli°
;

74 
mtd_öfo
 *
do_m≠_¥obe
(c⁄° *
«me
, 
m≠_öfo
 *
m≠
);

76 
	#ENABLE_VPP
(
m≠
Ëdÿ{ if(m≠->
£t_vµ
Ëm≠->
	`£t_vµ
(m≠, 1); } 0)

	)

77 
	#DISABLE_VPP
(
m≠
Ëdÿ{ if(m≠->
£t_vµ
Ëm≠->
	`£t_vµ
(m≠, 0); } 0)

	)

79 
	#INVALIDATE_CACHED_RANGE
(
m≠
, 
‰om
, 
size
Ëdÿ{ if(m≠->
övÆ_ˇche
Ëm≠->
	`övÆ_ˇche
(m≠, from, size); } 0)

	)

81 
	#m≠_w‹d_™dequÆ
(
m
, 
a
, 
b
, 
z
Ë
	`m≠_w‹d_equÆ
(m, z, 
	`m≠_w‹d_™d
(m,á, b))

	)

82 #i‡
BITS_PER_LONG
 >= 64

84 #ifde‡
__LITTLE_ENDIAN


87 #i‡
BITS_PER_LONG
 < 64

88 
	#MAP_FF_LIMIT
 4

	)

90 
	#MAP_FF_LIMIT
 8

	)

92 #i‡
BITS_PER_LONG
 >= 64

94 #i‡
BITS_PER_LONG
 >= 64

96 
	#m≠_ªad
(
m≠
, 
ofs
Ë
	`ölöe_m≠_ªad
(m≠, ofs)

	)

97 
	#m≠_c›y_‰om
(
m≠
, 
to
, 
‰om
, 
Àn
Ë
	`ölöe_m≠_c›y_‰om
(m≠,Åo, from,Üí)

	)

98 
	#m≠_wrôe
(
m≠
, 
d©um
, 
ofs
Ë
	`ölöe_m≠_wrôe
(m≠, d©um, ofs)

	)

99 
	#m≠_c›y_to
(
m≠
, 
to
, 
‰om
, 
Àn
Ë
	`ölöe_m≠_c›y_to
(m≠,Åo, from,Üí)

	)

100 
	#sim∂e_m≠_öô
(
m≠
Ë
	`BUG_ON
(!
	`m≠_b™kwidth_suµ‹ãd
((m≠)->
b™kwidth
))

	)

101 
	#m≠_is_löór
(
m≠
Ë({ ()(m≠); 1; })

	)

	@linux/mtd/mtd.h

12 #i‚de‡
__MTD_MTD_H__


13 
	#__MTD_MTD_H__


	)

15 #îr‹ 
This
 
is
 
a
 
kî√l
 
hódî
. 
Pîh≠s
 
ö˛ude
 
mtd
-
u£r
.
h
 
ö°ód
?

17 
	~<löux/ty≥s.h
>

18 
	~<löux/moduÀ.h
>

19 
	~<löux/uio.h
>

20 
	~<löux/nŸifõr.h
>

22 
	~<löux/mtd/com∑tmac.h
>

23 
	~<mtd/mtd-abi.h
>

25 
	#MTD_CHAR_MAJOR
 90

	)

26 
	#MTD_BLOCK_MAJOR
 31

	)

27 
	#MAX_MTD_DEVICES
 16

	)

29 
	#MTD_ERASE_PENDING
 0x01

	)

30 
	#MTD_ERASING
 0x02

	)

31 
	#MTD_ERASE_SUSPEND
 0x04

	)

32 
	#MTD_ERASE_DONE
 0x08

	)

33 
	#MTD_ERASE_FAILED
 0x10

	)

35 
	sîa£_öfo
 {

36 
mtd_öfo
 *
	mmtd
;

37 
u_öt32_t
 
	maddr
;

38 
u_öt32_t
 
	mÀn
;

39 
u_öt32_t
 
	mÁû_addr
;

40 
u_l⁄g
 
	mtime
;

41 
u_l⁄g
 
	mªåõs
;

42 
u_öt
 
	mdev
;

43 
u_öt
 
	m˚Œ
;

44 (*
	mˇŒback
Ë(
îa£_öfo
 *
	m£lf
);

45 
u_l⁄g
 
	m¥iv
;

46 
u_ch¨
 
	m°©e
;

47 
îa£_öfo
 *
	m√xt
;

50 
	smtd_îa£_ªgi⁄_öfo
 {

51 
u_öt32_t
 
	moff£t
;

52 
u_öt32_t
 
	mîa£size
;

53 
u_öt32_t
 
	mnumblocks
;

57 
	mMTD_OOB_PLACE
,

58 
	mMTD_OOB_AUTO
,

59 
	mMTD_OOB_RAW
,

60 } 
	tmtd_oob_mode_t
;

62 
	smtd_oob_›s
 {

63 
mtd_oob_mode_t
 
	mmode
;

64 
size_t
 
	mÀn
;

65 
size_t
 
	mªéí
;

66 
size_t
 
	moobÀn
;

67 
uöt32_t
 
	mooboffs
;

68 
uöt8_t
 *
	md©buf
;

69 
uöt8_t
 *
	moobbuf
;

72 
	smtd_öfo
 {

73 
u_ch¨
 
	mty≥
;

74 
u_öt32_t
 
	mÊags
;

75 
u_öt32_t
 
	msize
;

77 
u_öt32_t
 
	mîa£size
;

79 
u_öt32_t
 
	mwrôesize
;

81 
u_öt32_t
 
	moobsize
;

82 
u_öt32_t
 
	mec˘y≥
;

83 
u_öt32_t
 
	meccsize
;

85 
	#MTD_PROGREGION_CTRLMODE_VALID
(
mtd
Ë(mtd)->
oobsize


	)

86 
	#MTD_PROGREGION_CTRLMODE_INVALID
(
mtd
Ë(mtd)->
ec˘y≥


	)

88 *
	m«me
;

89 
	mödex
;

91 
«nd_ec˛ayout
 *
	mec˛ayout
;

93 
	mnumîa£ªgi⁄s
;

94 
mtd_îa£_ªgi⁄_öfo
 *
	mîa£ªgi⁄s
;

96 
u_öt32_t
 
	mb™k_size
;

98 (*
	mîa£
Ë(
mtd_öfo
 *
	mmtd
, 
îa£_öfo
 *
	mö°r
);

100 (*
	mpoöt
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 **
	mmtdbuf
);

102 (*
	mu≈oöt
Ë(
mtd_öfo
 *
	mmtd
, 
u_ch¨
 * 
	maddr
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
);

104 (*
	mªad
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

105 (*
	mwrôe
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mto
, 
size_t
 
	mÀn
, size_à*
	mªéí
, c⁄° 
u_ch¨
 *
	mbuf
);

107 (*
	mªad_oob
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
,

108 
mtd_oob_›s
 *
	m›s
);

109 (*
	mwrôe_oob
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mto
,

110 
mtd_oob_›s
 *
	m›s
);

112 (*
	mgë_Á˘_¥Ÿ_öfo
Ë(
mtd_öfo
 *
	mmtd
, 
Ÿp_öfo
 *
	mbuf
, 
size_t
 
	mÀn
);

113 (*
	mªad_Á˘_¥Ÿ_ªg
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

114 (*
	mgë_u£r_¥Ÿ_öfo
Ë(
mtd_öfo
 *
	mmtd
, 
Ÿp_öfo
 *
	mbuf
, 
size_t
 
	mÀn
);

115 (*
	mªad_u£r_¥Ÿ_ªg
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

116 (*
	mwrôe_u£r_¥Ÿ_ªg
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

117 (*
	mlock_u£r_¥Ÿ_ªg
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
);

119 (*
	mwrôev
Ë(
mtd_öfo
 *
	mmtd
, c⁄° 
kvec
 *
	mvecs
, 
	mcou¡
, 
loff_t
 
	mto
, 
size_t
 *
	mªéí
);

121 (*
	msync
Ë(
mtd_öfo
 *
	mmtd
);

123 (*
	mlock
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
size_t
 
	mÀn
);

124 (*
	mu∆ock
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
size_t
 
	mÀn
);

126 (*
	msu•íd
Ë(
mtd_öfo
 *
	mmtd
);

127 (*
	mªsume
Ë(
mtd_öfo
 *
	mmtd
);

129 (*
	mblock_isbad
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
);

130 (*
	mblock_m¨kbad
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
);

132 
nŸifõr_block
 
	mªboŸ_nŸifõr
;

134 
mtd_ecc_°©s
 
	mecc_°©s
;

136 *
	m¥iv
;

138 
moduÀ
 *
	mow√r
;

139 
	mu£cou¡
;

142 
	smtd_nŸifõr
 {

143 (*
	madd
)(
mtd_öfo
 *
	mmtd
);

144 (*
	mªmove
)(
mtd_öfo
 *
	mmtd
);

145 
li°_hód
 
	mli°
;

148 
	#MTD_DEBUG_LEVEL0
 (0)

	)

149 
	#MTD_DEBUG_LEVEL1
 (1)

	)

150 
	#MTD_DEBUG_LEVEL2
 (2)

	)

151 
	#MTD_DEBUG_LEVEL3
 (3)

	)

152 
	#DEBUG
(
n
, 
¨gs
...Ëdÿ{ } 0)

	)

	@linux/mtd/nand.h

12 #i‚de‡
__LINUX_MTD_NAND_H


13 
	#__LINUX_MTD_NAND_H


	)

15 
	~<löux/waô.h
>

16 
	~<löux/•ölock.h
>

17 
	~<löux/mtd/mtd.h
>

19 
	gmtd_öfo
;

21 
	#NAND_MAX_CHIPS
 8

	)

23 
	#NAND_MAX_OOBSIZE
 64

	)

24 
	#NAND_MAX_PAGESIZE
 2048

	)

26 
	#NAND_NCE
 0x01

	)

28 
	#NAND_CLE
 0x02

	)

30 
	#NAND_ALE
 0x04

	)

32 
	#NAND_CTRL_CLE
 (
NAND_NCE
 | 
NAND_CLE
)

	)

33 
	#NAND_CTRL_ALE
 (
NAND_NCE
 | 
NAND_ALE
)

	)

34 
	#NAND_CTRL_CHANGE
 0x80

	)

36 
	#NAND_CMD_READ0
 0

	)

37 
	#NAND_CMD_READ1
 1

	)

38 
	#NAND_CMD_RNDOUT
 5

	)

39 
	#NAND_CMD_PAGEPROG
 0x10

	)

40 
	#NAND_CMD_READOOB
 0x50

	)

41 
	#NAND_CMD_ERASE1
 0x60

	)

42 
	#NAND_CMD_STATUS
 0x70

	)

43 
	#NAND_CMD_STATUS_MULTI
 0x71

	)

44 
	#NAND_CMD_SEQIN
 0x80

	)

45 
	#NAND_CMD_RNDIN
 0x85

	)

46 
	#NAND_CMD_READID
 0x90

	)

47 
	#NAND_CMD_ERASE2
 0xd0

	)

48 
	#NAND_CMD_RESET
 0xff

	)

50 
	#NAND_CMD_READSTART
 0x30

	)

51 
	#NAND_CMD_RNDOUTSTART
 0xE0

	)

52 
	#NAND_CMD_CACHEDPROG
 0x15

	)

54 
	#NAND_CMD_DEPLETE1
 0x100

	)

55 
	#NAND_CMD_DEPLETE2
 0x38

	)

56 
	#NAND_CMD_STATUS_MULTI
 0x71

	)

57 
	#NAND_CMD_STATUS_ERROR
 0x72

	)

59 
	#NAND_CMD_STATUS_ERROR0
 0x73

	)

60 
	#NAND_CMD_STATUS_ERROR1
 0x74

	)

61 
	#NAND_CMD_STATUS_ERROR2
 0x75

	)

62 
	#NAND_CMD_STATUS_ERROR3
 0x76

	)

63 
	#NAND_CMD_STATUS_RESET
 0x7f

	)

64 
	#NAND_CMD_STATUS_CLEAR
 0xff

	)

66 
	#NAND_CMD_NONE
 -1

	)

68 
	#NAND_STATUS_FAIL
 0x01

	)

69 
	#NAND_STATUS_FAIL_N1
 0x02

	)

70 
	#NAND_STATUS_TRUE_READY
 0x20

	)

71 
	#NAND_STATUS_READY
 0x40

	)

72 
	#NAND_STATUS_WP
 0x80

	)

75 
	mNAND_ECC_NONE
,

76 
	mNAND_ECC_SOFT
,

77 
	mNAND_ECC_HW
,

78 
	mNAND_ECC_HW_SYNDROME
,

79 } 
	t«nd_ecc_modes_t
;

81 
	#NAND_ECC_READ
 0

	)

83 
	#NAND_ECC_WRITE
 1

	)

85 
	#NAND_ECC_READSYN
 2

	)

87 
	#NAND_GET_DEVICE
 0x80

	)

89 
	#NAND_NO_AUTOINCR
 0x00000001

	)

91 
	#NAND_BUSWIDTH_16
 0x00000002

	)

93 
	#NAND_NO_PADDING
 0x00000004

	)

95 
	#NAND_CACHEPRG
 0x00000008

	)

97 
	#NAND_COPYBACK
 0x00000010

	)

99 
	#NAND_IS_AND
 0x00000020

	)

101 
	#NAND_4PAGE_ARRAY
 0x00000040

	)

103 
	#BBT_AUTO_REFRESH
 0x00000080

	)

105 
	#NAND_NO_READRDY
 0x00000100

	)

107 
	#NAND_SAMSUNG_LP_OPTIONS
 (
NAND_NO_PADDING
 | 
NAND_CACHEPRG
 | 
NAND_COPYBACK
)

	)

109 
	#NAND_CANAUTOINCR
(
chù
Ë(!(chù->
›ti⁄s
 & 
NAND_NO_AUTOINCR
))

	)

110 
	#NAND_MUST_PAD
(
chù
Ë(!(chù->
›ti⁄s
 & 
NAND_NO_PADDING
))

	)

111 
	#NAND_HAS_CACHEPROG
(
chù
Ë((chù->
›ti⁄s
 & 
NAND_CACHEPRG
))

	)

112 
	#NAND_HAS_COPYBACK
(
chù
Ë((chù->
›ti⁄s
 & 
NAND_COPYBACK
))

	)

114 
	#NAND_CHIPOPTIONS_MSK
 (0x0000fff‡& ~
NAND_NO_AUTOINCR
)

	)

116 
	#NAND_USE_FLASH_BBT
 0x00010000

	)

118 
	#NAND_SKIP_BBTSCAN
 0x00020000

	)

120 
	#NAND_CONTROLLER_ALLOC
 0x80000000

	)

123 
	mFL_READY
,

124 
	mFL_READING
,

125 
	mFL_WRITING
,

126 
	mFL_ERASING
,

127 
	mFL_SYNCING
,

128 
	mFL_CACHEDPRG
,

129 
	mFL_PM_SUSPENDED
,

130 } 
	t«nd_°©e_t
;

132 
	g«nd_chù
;

134 
	s«nd_hw_c⁄åﬁ
 {

135 
•ölock_t
 
	mlock
;

136 
«nd_chù
 *
	ma˘ive
;

137 
waô_queue_hód_t
 
	mwq
;

140 
	s«nd_ecc_˘æ
 {

141 
«nd_ecc_modes_t
 
	mmode
;

142 
	m°ïs
;

143 
	msize
;

144 
	mbyãs
;

145 
	mtŸÆ
;

146 
	m¥ïad
;

147 
	mpo°∑d
;

148 
«nd_ec˛ayout
 *
	mœyout
;

149 (*
	mhw˘l
)(
mtd_öfo
 *
	mmtd
, 
	mmode
);

150 (*
	mˇlcuœã
)(
mtd_öfo
 *
	mmtd
,

151 c⁄° 
uöt8_t
 *
	md©
,

152 
uöt8_t
 *
	mecc_code
);

153 (*
	mc‹ª˘
)(
mtd_öfo
 *
	mmtd
, 
uöt8_t
 *
	md©
,

154 
uöt8_t
 *
	mªad_ecc
,

155 
uöt8_t
 *
	mˇlc_ecc
);

156 (*
	mªad_∑ge
)(
mtd_öfo
 *
	mmtd
,

157 
«nd_chù
 *
	mchù
,

158 
uöt8_t
 *
	mbuf
);

159 (*
	mwrôe_∑ge
)(
mtd_öfo
 *
	mmtd
,

160 
«nd_chù
 *
	mchù
,

161 c⁄° 
uöt8_t
 *
	mbuf
);

162 (*
	mªad_oob
)(
mtd_öfo
 *
	mmtd
,

163 
«nd_chù
 *
	mchù
,

164 
	m∑ge
,

165 
	m¢dcmd
);

166 (*
	mwrôe_oob
)(
mtd_öfo
 *
	mmtd
,

167 
«nd_chù
 *
	mchù
,

168 
	m∑ge
);

171 
	s«nd_buf„rs
 {

172 
uöt8_t
 
	meccˇlc
[
NAND_MAX_OOBSIZE
];

173 
uöt8_t
 
	mecccode
[
NAND_MAX_OOBSIZE
];

174 
uöt8_t
 
	moobwbuf
[
NAND_MAX_OOBSIZE
];

175 
uöt8_t
 
	md©abuf
[
NAND_MAX_PAGESIZE
];

176 
uöt8_t
 
	moobrbuf
[
NAND_MAX_OOBSIZE
];

179 
	s«nd_chù
 {

180 
__iomem
 *
	mIO_ADDR_R
;

181 
__iomem
 *
	mIO_ADDR_W
;

183 
uöt8_t
 (*
ªad_byã
)(
mtd_öfo
 *
	mmtd
);

184 
u16
 (*
ªad_w‹d
)(
mtd_öfo
 *
	mmtd
);

185 (*
	mwrôe_buf
)(
mtd_öfo
 *
	mmtd
, c⁄° 
uöt8_t
 *
	mbuf
, 
	mÀn
);

186 (*
	mªad_buf
)(
mtd_öfo
 *
	mmtd
, 
uöt8_t
 *
	mbuf
, 
	mÀn
);

187 (*
	mvîify_buf
)(
mtd_öfo
 *
	mmtd
, c⁄° 
uöt8_t
 *
	mbuf
, 
	mÀn
);

188 (*
	m£À˘_chù
)(
mtd_öfo
 *
	mmtd
, 
	mchù
);

189 (*
	mblock_bad
)(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
	mgëchù
);

190 (*
	mblock_m¨kbad
)(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
);

191 (*
	mcmd_˘æ
)(
mtd_öfo
 *
	mmtd
, 
	md©
,

192 
	m˘æ
);

193 (*
	mdev_ªady
)(
mtd_öfo
 *
	mmtd
);

194 (*
	mcmdfunc
)(
mtd_öfo
 *
	mmtd
, 
	mcomm™d
, 
	mcﬁumn
, 
	m∑ge_addr
);

195 (*
	mwaôfunc
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mthis
);

196 (*
	mîa£_cmd
)(
mtd_öfo
 *
	mmtd
, 
	m∑ge
);

197 (*
	msˇn_bbt
)(
mtd_öfo
 *
	mmtd
);

198 (*
	mîr°©
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mthis
, 
	m°©e
, 
	m°©us
, 
	m∑ge
);

200 
	mchù_dñay
;

201 
	m›ti⁄s
;

203 
	m∑ge_shi·
;

204 
	mphys_îa£_shi·
;

205 
	mbbt_îa£_shi·
;

206 
	mchù_shi·
;

207 
	mnumchùs
;

208 
	mchùsize
;

209 
	m∑gemask
;

210 
	m∑gebuf
;

211 
	mbadblockpos
;

213 
«nd_°©e_t
 
	m°©e
;

215 
uöt8_t
 *
	moob_poi
;

216 
«nd_hw_c⁄åﬁ
 *
	mc⁄åﬁÀr
;

217 
«nd_ec˛ayout
 *
	mec˛ayout
;

219 
«nd_ecc_˘æ
 
	mecc
;

220 
«nd_buf„rs
 
	mbuf„rs
;

221 
«nd_hw_c⁄åﬁ
 
	mhwc⁄åﬁ
;

223 
mtd_oob_›s
 
	m›s
;

225 
uöt8_t
 *
	mbbt
;

226 
«nd_bbt_des¸
 *
	mbbt_td
;

227 
«nd_bbt_des¸
 *
	mbbt_md
;

229 
«nd_bbt_des¸
 *
	mbadblock_∑âîn
;

231 *
	m¥iv
;

234 
	#NAND_MFR_TOSHIBA
 0x98

	)

235 
	#NAND_MFR_SAMSUNG
 0xec

	)

236 
	#NAND_MFR_FUJITSU
 0x04

	)

237 
	#NAND_MFR_NATIONAL
 0x8f

	)

238 
	#NAND_MFR_RENESAS
 0x07

	)

239 
	#NAND_MFR_STMICRO
 0x20

	)

240 
	#NAND_MFR_HYNIX
 0xad

	)

242 
	s«nd_Êash_dev
 {

243 *
	m«me
;

244 
	mid
;

245 
	m∑gesize
;

246 
	mchùsize
;

247 
	mîa£size
;

248 
	m›ti⁄s
;

251 
	s«nd_m™uÁ˘uªrs
 {

252 
	mid
;

253 * 
	m«me
;

256 
	s«nd_bbt_des¸
 {

257 
	m›ti⁄s
;

258 
	m∑ges
[
NAND_MAX_CHIPS
];

259 
	moffs
;

260 
	mvîoffs
;

261 
uöt8_t
 
	mvîsi⁄
[
NAND_MAX_CHIPS
];

262 
	mÀn
;

263 
	mmaxblocks
;

264 
	mª£rved_block_code
;

265 
uöt8_t
 *
	m∑âîn
;

268 
	#NAND_BBT_NRBITS_MSK
 0x0000000F

	)

269 
	#NAND_BBT_1BIT
 0x00000001

	)

270 
	#NAND_BBT_2BIT
 0x00000002

	)

271 
	#NAND_BBT_4BIT
 0x00000004

	)

272 
	#NAND_BBT_8BIT
 0x00000008

	)

274 
	#NAND_BBT_LASTBLOCK
 0x00000010

	)

276 
	#NAND_BBT_ABSPAGE
 0x00000020

	)

278 
	#NAND_BBT_SEARCH
 0x00000040

	)

280 
	#NAND_BBT_PERCHIP
 0x00000080

	)

282 
	#NAND_BBT_VERSION
 0x00000100

	)

284 
	#NAND_BBT_CREATE
 0x00000200

	)

286 
	#NAND_BBT_SCANALLPAGES
 0x00000400

	)

288 
	#NAND_BBT_SCANEMPTY
 0x00000800

	)

290 
	#NAND_BBT_WRITE
 0x00001000

	)

292 
	#NAND_BBT_SAVECONTENT
 0x00002000

	)

294 
	#NAND_BBT_SCAN2NDPAGE
 0x00004000

	)

296 
	#NAND_BBT_SCAN_MAXBLOCKS
 4

	)

298 
	#NAND_SMALL_BADBLOCK_POS
 5

	)

299 
	#NAND_LARGE_BADBLOCK_POS
 0

	)

301 
	s∂©f‹m_«nd_chù
 {

302 
	mƒ_chùs
;

303 
	mchù_off£t
;

304 
	mƒ_∑πôi⁄s
;

305 
mtd_∑πôi⁄
 *
	m∑πôi⁄s
;

306 
«nd_ec˛ayout
 *
	mec˛ayout
;

307 
	mchù_dñay
;

308 
	m›ti⁄s
;

309 *
	m¥iv
;

312 
	s∂©f‹m_«nd_˘æ
 {

313 (*
	mhwc⁄åﬁ
)(
mtd_öfo
 *
	mmtd
, 
	mcmd
);

314 (*
	mdev_ªady
)(
mtd_öfo
 *
	mmtd
);

315 (*
	m£À˘_chù
)(
mtd_öfo
 *
	mmtd
, 
	mchù
);

316 *
	m¥iv
;

	@linux/mtd/nand_ecc.h

12 #i‚de‡
__MTD_NAND_ECC_H__


13 
	#__MTD_NAND_ECC_H__


	)

15 
	gmtd_öfo
;

	@linux/mtd/nftl.h

12 #i‚de‡
__MTD_NFTL_H__


13 
	#__MTD_NFTL_H__


	)

15 
	~<löux/mtd/mtd.h
>

16 
	~<löux/mtd/blkå™s.h
>

18 
	~<mtd/n·l-u£r.h
>

20 
	#BLOCK_NIL
 0xffff

	)

21 
	#BLOCK_FREE
 0xff„

	)

22 
	#BLOCK_NOTEXPLORED
 0xfffd

	)

23 
	#BLOCK_RESERVED
 0xfffc

	)

25 
	sNFTLªc‹d
 {

26 
mtd_blkå™s_dev
 
	mmbd
;

27 
__u16
 
	mMedüUnô
, 
	mS∑ªMedüUnô
;

28 
__u32
 
	mEø£Size
;

29 
NFTLMedüHódî
 
	mMedüHdr
;

30 
	mu£cou¡
;

31 
	mhóds
;

32 
	m£˘‹s
;

33 
	mcylödîs
;

34 
__u16
 
	mnumvunôs
;

35 
__u16
 
	mœ°EUN
;

36 
__u16
 
	mnum‰ìEUNs
;

37 
__u16
 
	mLa°FªeEUN
;

38 
	mhód
,
	m£˘
,
	mcyl
;

39 
__u16
 *
	mEUNèbÀ
;

40 
__u16
 *
	mRïlUnôTabÀ
;

41 
	mnb_blocks
;

42 
	mnb_boŸ_blocks
;

43 
îa£_öfo
 
	mö°r
;

44 
«nd_ec˛ayout
 
	mooböfo
;

47 #i‚de‡
NFTL_MAJOR


48 
	#NFTL_MAJOR
 93

	)

51 
	#MAX_NFTLS
 16

	)

52 
	#MAX_SECTORS_PER_UNIT
 64

	)

53 
	#NFTL_PARTN_BITS
 4

	)

	@linux/mtd/onenand_regs.h

12 #i‚de‡
__ONENAND_REG_H


13 
	#__ONENAND_REG_H


	)

15 
	#ONENAND_MEMORY_MAP
(
x
Ë((xË<< 1)

	)

17 
	#ONENAND_BOOTRAM
 
	`ONENAND_MEMORY_MAP
(0x0000)

	)

18 
	#ONENAND_DATARAM
 
	`ONENAND_MEMORY_MAP
(0x0200)

	)

19 
	#ONENAND_SPARERAM
 
	`ONENAND_MEMORY_MAP
(0x8010)

	)

21 
	#ONENAND_REG_MANUFACTURER_ID
 
	`ONENAND_MEMORY_MAP
(0xF000)

	)

22 
	#ONENAND_REG_DEVICE_ID
 
	`ONENAND_MEMORY_MAP
(0xF001)

	)

23 
	#ONENAND_REG_VERSION_ID
 
	`ONENAND_MEMORY_MAP
(0xF002)

	)

24 
	#ONENAND_REG_DATA_BUFFER_SIZE
 
	`ONENAND_MEMORY_MAP
(0xF003)

	)

25 
	#ONENAND_REG_BOOT_BUFFER_SIZE
 
	`ONENAND_MEMORY_MAP
(0xF004)

	)

26 
	#ONENAND_REG_NUM_BUFFERS
 
	`ONENAND_MEMORY_MAP
(0xF005)

	)

27 
	#ONENAND_REG_TECHNOLOGY
 
	`ONENAND_MEMORY_MAP
(0xF006)

	)

29 
	#ONENAND_REG_START_ADDRESS1
 
	`ONENAND_MEMORY_MAP
(0xF100)

	)

30 
	#ONENAND_REG_START_ADDRESS2
 
	`ONENAND_MEMORY_MAP
(0xF101)

	)

31 
	#ONENAND_REG_START_ADDRESS3
 
	`ONENAND_MEMORY_MAP
(0xF102)

	)

32 
	#ONENAND_REG_START_ADDRESS4
 
	`ONENAND_MEMORY_MAP
(0xF103)

	)

33 
	#ONENAND_REG_START_ADDRESS5
 
	`ONENAND_MEMORY_MAP
(0xF104)

	)

34 
	#ONENAND_REG_START_ADDRESS6
 
	`ONENAND_MEMORY_MAP
(0xF105)

	)

35 
	#ONENAND_REG_START_ADDRESS7
 
	`ONENAND_MEMORY_MAP
(0xF106)

	)

36 
	#ONENAND_REG_START_ADDRESS8
 
	`ONENAND_MEMORY_MAP
(0xF107)

	)

38 
	#ONENAND_REG_START_BUFFER
 
	`ONENAND_MEMORY_MAP
(0xF200)

	)

39 
	#ONENAND_REG_COMMAND
 
	`ONENAND_MEMORY_MAP
(0xF220)

	)

40 
	#ONENAND_REG_SYS_CFG1
 
	`ONENAND_MEMORY_MAP
(0xF221)

	)

41 
	#ONENAND_REG_SYS_CFG2
 
	`ONENAND_MEMORY_MAP
(0xF222)

	)

42 
	#ONENAND_REG_CTRL_STATUS
 
	`ONENAND_MEMORY_MAP
(0xF240)

	)

43 
	#ONENAND_REG_INTERRUPT
 
	`ONENAND_MEMORY_MAP
(0xF241)

	)

44 
	#ONENAND_REG_START_BLOCK_ADDRESS
 
	`ONENAND_MEMORY_MAP
(0xF24C)

	)

45 
	#ONENAND_REG_END_BLOCK_ADDRESS
 
	`ONENAND_MEMORY_MAP
(0xF24D)

	)

46 
	#ONENAND_REG_WP_STATUS
 
	`ONENAND_MEMORY_MAP
(0xF24E)

	)

48 
	#ONENAND_REG_ECC_STATUS
 
	`ONENAND_MEMORY_MAP
(0xFF00)

	)

49 
	#ONENAND_REG_ECC_M0
 
	`ONENAND_MEMORY_MAP
(0xFF01)

	)

50 
	#ONENAND_REG_ECC_S0
 
	`ONENAND_MEMORY_MAP
(0xFF02)

	)

51 
	#ONENAND_REG_ECC_M1
 
	`ONENAND_MEMORY_MAP
(0xFF03)

	)

52 
	#ONENAND_REG_ECC_S1
 
	`ONENAND_MEMORY_MAP
(0xFF04)

	)

53 
	#ONENAND_REG_ECC_M2
 
	`ONENAND_MEMORY_MAP
(0xFF05)

	)

54 
	#ONENAND_REG_ECC_S2
 
	`ONENAND_MEMORY_MAP
(0xFF06)

	)

55 
	#ONENAND_REG_ECC_M3
 
	`ONENAND_MEMORY_MAP
(0xFF07)

	)

56 
	#ONENAND_REG_ECC_S3
 
	`ONENAND_MEMORY_MAP
(0xFF08)

	)

58 
	#ONENAND_DEVICE_DENSITY_SHIFT
 (4)

	)

59 
	#ONENAND_DEVICE_IS_DDP
 (1 << 3)

	)

60 
	#ONENAND_DEVICE_IS_DEMUX
 (1 << 2)

	)

61 
	#ONENAND_DEVICE_VCC_MASK
 (0x3)

	)

63 
	#ONENAND_DEVICE_DENSITY_512Mb
 (0x002)

	)

65 
	#ONENAND_VERSION_PROCESS_SHIFT
 (8)

	)

67 
	#ONENAND_DDP_SHIFT
 (15)

	)

69 
	#ONENAND_FPA_MASK
 (0x3f)

	)

70 
	#ONENAND_FPA_SHIFT
 (2)

	)

71 
	#ONENAND_FSA_MASK
 (0x03)

	)

73 
	#ONENAND_BSA_MASK
 (0x03)

	)

74 
	#ONENAND_BSA_SHIFT
 (8)

	)

75 
	#ONENAND_BSA_BOOTRAM
 (0 << 2)

	)

76 
	#ONENAND_BSA_DATARAM0
 (2 << 2)

	)

77 
	#ONENAND_BSA_DATARAM1
 (3 << 2)

	)

78 
	#ONENAND_BSC_MASK
 (0x03)

	)

80 
	#ONENAND_CMD_READ
 (0x00)

	)

81 
	#ONENAND_CMD_READOOB
 (0x13)

	)

82 
	#ONENAND_CMD_PROG
 (0x80)

	)

83 
	#ONENAND_CMD_PROGOOB
 (0x1A)

	)

84 
	#ONENAND_CMD_UNLOCK
 (0x23)

	)

85 
	#ONENAND_CMD_LOCK
 (0x2A)

	)

86 
	#ONENAND_CMD_LOCK_TIGHT
 (0x2C)

	)

87 
	#ONENAND_CMD_ERASE
 (0x94)

	)

88 
	#ONENAND_CMD_RESET
 (0xF0)

	)

89 
	#ONENAND_CMD_OTP_ACCESS
 (0x65)

	)

90 
	#ONENAND_CMD_READID
 (0x90)

	)

92 
	#ONENAND_CMD_BUFFERRAM
 (0x1978)

	)

94 
	#ONENAND_SYS_CFG1_SYNC_READ
 (1 << 15)

	)

95 
	#ONENAND_SYS_CFG1_BRL_7
 (7 << 12)

	)

96 
	#ONENAND_SYS_CFG1_BRL_6
 (6 << 12)

	)

97 
	#ONENAND_SYS_CFG1_BRL_5
 (5 << 12)

	)

98 
	#ONENAND_SYS_CFG1_BRL_4
 (4 << 12)

	)

99 
	#ONENAND_SYS_CFG1_BRL_3
 (3 << 12)

	)

100 
	#ONENAND_SYS_CFG1_BRL_10
 (2 << 12)

	)

101 
	#ONENAND_SYS_CFG1_BRL_9
 (1 << 12)

	)

102 
	#ONENAND_SYS_CFG1_BRL_8
 (0 << 12)

	)

103 
	#ONENAND_SYS_CFG1_BRL_SHIFT
 (12)

	)

104 
	#ONENAND_SYS_CFG1_BL_32
 (4 << 9)

	)

105 
	#ONENAND_SYS_CFG1_BL_16
 (3 << 9)

	)

106 
	#ONENAND_SYS_CFG1_BL_8
 (2 << 9)

	)

107 
	#ONENAND_SYS_CFG1_BL_4
 (1 << 9)

	)

108 
	#ONENAND_SYS_CFG1_BL_CONT
 (0 << 9)

	)

109 
	#ONENAND_SYS_CFG1_BL_SHIFT
 (9)

	)

110 
	#ONENAND_SYS_CFG1_NO_ECC
 (1 << 8)

	)

111 
	#ONENAND_SYS_CFG1_RDY
 (1 << 7)

	)

112 
	#ONENAND_SYS_CFG1_INT
 (1 << 6)

	)

113 
	#ONENAND_SYS_CFG1_IOBE
 (1 << 5)

	)

114 
	#ONENAND_SYS_CFG1_RDY_CONF
 (1 << 4)

	)

116 
	#ONENAND_CTRL_ONGO
 (1 << 15)

	)

117 
	#ONENAND_CTRL_LOCK
 (1 << 14)

	)

118 
	#ONENAND_CTRL_LOAD
 (1 << 13)

	)

119 
	#ONENAND_CTRL_PROGRAM
 (1 << 12)

	)

120 
	#ONENAND_CTRL_ERASE
 (1 << 11)

	)

121 
	#ONENAND_CTRL_ERROR
 (1 << 10)

	)

122 
	#ONENAND_CTRL_RSTB
 (1 << 7)

	)

123 
	#ONENAND_CTRL_OTP_L
 (1 << 6)

	)

124 
	#ONENAND_CTRL_OTP_BL
 (1 << 5)

	)

126 
	#ONENAND_INT_MASTER
 (1 << 15)

	)

127 
	#ONENAND_INT_READ
 (1 << 7)

	)

128 
	#ONENAND_INT_WRITE
 (1 << 6)

	)

129 
	#ONENAND_INT_ERASE
 (1 << 5)

	)

130 
	#ONENAND_INT_RESET
 (1 << 4)

	)

131 
	#ONENAND_INT_CLEAR
 (0 << 0)

	)

133 
	#ONENAND_WP_US
 (1 << 2)

	)

134 
	#ONENAND_WP_LS
 (1 << 1)

	)

135 
	#ONENAND_WP_LTS
 (1 << 0)

	)

137 
	#ONENAND_ECC_1BIT
 (1 << 0)

	)

138 
	#ONENAND_ECC_2BIT
 (1 << 1)

	)

139 
	#ONENAND_ECC_2BIT_ALL
 (0xAAAA)

	)

141 
	#ONENAND_OTP_LOCK_OFFSET
 (14)

	)

	@linux/mtd/partitions.h

12 #i‚de‡
MTD_PARTITIONS_H


13 
	#MTD_PARTITIONS_H


	)

15 
	~<löux/ty≥s.h
>

17 
	smtd_∑πôi⁄
 {

18 *
	m«me
;

19 
u_öt32_t
 
	msize
;

20 
u_öt32_t
 
	moff£t
;

21 
u_öt32_t
 
	mmask_Êags
;

22 
«nd_ec˛ayout
 *
	mec˛ayout
;

23 
mtd_öfo
 **
	mmtdp
;

26 
	#MTDPART_OFS_NXTBLK
 (-2)

	)

27 
	#MTDPART_OFS_APPEND
 (-1)

	)

28 
	#MTDPART_SIZ_FULL
 (0)

	)

30 
	smtd_∑π_∑r£r
 {

31 
li°_hód
 
	mli°
;

32 
moduÀ
 *
	mow√r
;

33 c⁄° *
	m«me
;

34 (*
	m∑r£_‚
)(
	mmtd_öfo
 *, 
	mmtd_∑πôi⁄
 **, );

37 
	#put_∑πôi⁄_∑r£r
(
p
Ëdÿ{ 
	`moduÀ_put
(’)->
ow√r
); } 0)

	)

	@linux/mtio.h

12 #i‚de‡
_LINUX_MTIO_H


13 
	#_LINUX_MTIO_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/io˘l.h
>

17 
	~<löux/qic117.h
>

19 
	smt›
 {

20 
	mmt_›
;

21 
	mmt_cou¡
;

24 
	#MTRESET
 0

	)

25 
	#MTFSF
 1

	)

26 
	#MTBSF
 2

	)

27 
	#MTFSR
 3

	)

28 
	#MTBSR
 4

	)

29 
	#MTWEOF
 5

	)

30 
	#MTREW
 6

	)

31 
	#MTOFFL
 7

	)

32 
	#MTNOP
 8

	)

33 
	#MTRETEN
 9

	)

34 
	#MTBSFM
 10

	)

35 
	#MTFSFM
 11

	)

36 
	#MTEOM
 12

	)

37 
	#MTERASE
 13

	)

39 
	#MTRAS1
 14

	)

40 
	#MTRAS2
 15

	)

41 
	#MTRAS3
 16

	)

43 
	#MTSETBLK
 20

	)

44 
	#MTSETDENSITY
 21

	)

45 
	#MTSEEK
 22

	)

46 
	#MTTELL
 23

	)

47 
	#MTSETDRVBUFFER
 24

	)

49 
	#MTFSS
 25

	)

50 
	#MTBSS
 26

	)

51 
	#MTWSM
 27

	)

53 
	#MTLOCK
 28

	)

54 
	#MTUNLOCK
 29

	)

55 
	#MTLOAD
 30

	)

56 
	#MTUNLOAD
 31

	)

57 
	#MTCOMPRESSION
 32

	)

58 
	#MTSETPART
 33

	)

59 
	#MTMKPART
 34

	)

61 
	smtgë
 {

62 
	mmt_ty≥
;

63 
	mmt_ªsid
;

65 
	mmt_d§eg
;

66 
	mmt_g°©
;

67 
	mmt_îªg
;

69 
__kî√l_daddr_t
 
	mmt_fûío
;

70 
__kî√l_daddr_t
 
	mmt_blkno
;

73 
	#MT_ISUNKNOWN
 0x01

	)

74 
	#MT_ISQIC02
 0x02

	)

75 
	#MT_ISWT5150
 0x03

	)

76 
	#MT_ISARCHIVE_5945L2
 0x04

	)

77 
	#MT_ISCMSJ500
 0x05

	)

78 
	#MT_ISTDC3610
 0x06

	)

79 
	#MT_ISARCHIVE_VP60I
 0x07

	)

80 
	#MT_ISARCHIVE_2150L
 0x08

	)

81 
	#MT_ISARCHIVE_2060L
 0x09

	)

82 
	#MT_ISARCHIVESC499
 0x0A

	)

83 
	#MT_ISQIC02_ALL_FEATURES
 0x0F

	)

84 
	#MT_ISWT5099EEN24
 0x11

	)

85 
	#MT_ISTEAC_MT2ST
 0x12

	)

86 
	#MT_ISEVEREX_FT40A
 0x32

	)

87 
	#MT_ISDDS1
 0x51

	)

88 
	#MT_ISDDS2
 0x52

	)

89 
	#MT_ISONSTREAM_SC
 0x61

	)

90 
	#MT_ISSCSI1
 0x71

	)

91 
	#MT_ISSCSI2
 0x72

	)

93 
	#MT_ISFTAPE_UNKNOWN
 0x800000

	)

94 
	#MT_ISFTAPE_FLAG
 0x800000

	)

96 
	smt_è≥_öfo
 {

97 
	mt_ty≥
;

98 *
	mt_«me
;

101 
	#MT_TAPE_INFO
 { {
MT_ISUNKNOWN
, "Unknow¿ty≥ o‡è≥ devi˚"}, {
MT_ISQIC02
, "Gíîi¯QIC-02Å≠ê°ªamî"}, {
MT_ISWT5150
, "W™gãk 5150, QIC-150"}, {
MT_ISARCHIVE_5945L2
, "Archivê5945L-2"}, {
MT_ISCMSJ500
, "CMS Jumbÿ500"}, {
MT_ISTDC3610
, "T™dbîg TDC 3610, QIC-24"}, {
MT_ISARCHIVE_VP60I
, "ArchivêVP60i, QIC-02"}, {
MT_ISARCHIVE_2150L
, "ArchivêVùî 2150L"}, {
MT_ISARCHIVE_2060L
, "ArchivêVùî 2060L"}, {
MT_ISARCHIVESC499
, "ArchivêSC-499 QIC-36 c⁄åﬁÀr"}, {
MT_ISQIC02_ALL_FEATURES
, "Gíîi¯QIC-02Å≠e,áŒ fótuªs"}, {
MT_ISWT5099EEN24
, "W™gãk 5099-ìn24, 60MB"}, {
MT_ISTEAC_MT2ST
, "Tó¯MT-2ST 155mb d©®ˇs£âêdrive"}, {
MT_ISEVEREX_FT40A
, "Evîex FT40A, QIC-40"}, {
MT_ISONSTREAM_SC
, "OnSåóm SC-, DI-, DP-, o∏USBÅ≠êdrive"}, {
MT_ISSCSI1
, "Gíîi¯SCSI-1Å≠e"}, {
MT_ISSCSI2
, "Gíîi¯SCSI-2Å≠e"}, {0, 
NULL
} }

	)

103 
	smços
 {

104 
	mmt_blkno
;

107 
	smtvﬁöfo
 {

108 
	mmt_vﬁno
;

109 
	mmt_blksz
;

110 
	mmt_øwsize
;

111 
	mmt_size
;

112 
	mmt_cm¥
:1;

115 
	#MT_FT_RD_SINGLE
 0

	)

116 
	#MT_FT_RD_AHEAD
 1

	)

117 
	#MT_FT_WR_ASYNC
 0

	)

118 
	#MT_FT_WR_MULTI
 1

	)

119 
	#MT_FT_WR_SINGLE
 2

	)

120 
	#MT_FT_WR_DELETE
 3

	)

122 
	smt·£g


124 
	mmt_£gno
;

125 
	mmt_mode
;

126 
	mmt_ªsu…
;

127 
__u£r
 *
	mmt_d©a
;

130 
	smâ≠esize
 {

131 
	mmt_ˇ∑côy
;

132 
	mmt_u£d
;

135 
	#FTFMT_SET_PARMS
 1

	)

136 
	#FTFMT_GET_PARMS
 2

	)

137 
	#FTFMT_FORMAT_TRACK
 3

	)

138 
	#FTFMT_STATUS
 4

	)

139 
	#FTFMT_VERIFY
 5

	)

141 
	s·fmç¨ms
 {

142 
	m·_qic°d
;

143 
	m·_fmtcode
;

144 
	m·_fhm
;

145 
	m·_·m
;

146 
	m·_•t
;

147 
	m·_çc
;

150 
	s·fmâøck
 {

151 
	m·_åack
;

152 
	m·_g≠3
;

155 
	s·fmt°©us
 {

156 
	m·_£gmít
;

159 
	s·fmtvîify
 {

160 
	m·_£gmít
;

161 
	m·_bsm
;

164 
	smt·f‹m©
 {

165 
	mfmt_›
;

166 
	ufmt_¨g
 {

167 
·fmç¨ms
 
	mfmt_∑rms
;

168 
·fmâøck
 
	mfmt_åack
;

169 
·fmt°©us
 
	mfmt_°©us
;

170 
·fmtvîify
 
	mfmt_vîify
;

171 } 
	mfmt_¨g
;

174 
	smt·cmd
 {

175 
	m·_waô_bef‹e
;

176 
qic117_cmd_t
 
	m·_cmd
;

177 
	m·_∑rm_˙t
;

178 
	m·_∑rms
[3];

179 
	m·_ªsu…_bôs
;

180 
	m·_ªsu…
;

181 
	m·_waô_a·î
;

182 
	m·_°©us
;

183 
	m·_îr‹
;

186 
	#MTIOCTOP
 
	`_IOW
('m', 1, 
mt›
)

	)

187 
	#MTIOCGET
 
	`_IOR
('m', 2, 
mtgë
)

	)

188 
	#MTIOCPOS
 
	`_IOR
('m', 3, 
mços
)

	)

190 
	#MTIOCGETCONFIG
 
	`_IOR
('m', 4, 
mtc⁄figöfo
)

	)

191 
	#MTIOCSETCONFIG
 
	`_IOW
('m', 5, 
mtc⁄figöfo
)

	)

193 
	#MTIOCRDFTSEG
 
	`_IOWR
('m', 6, 
mt·£g
)

	)

194 
	#MTIOCWRFTSEG
 
	`_IOWR
('m', 7, 
mt·£g
)

	)

195 
	#MTIOCVOLINFO
 
	`_IOR
('m', 8, 
mtvﬁöfo
)

	)

196 
	#MTIOCGETSIZE
 
	`_IOR
('m', 9, 
mâ≠esize
)

	)

197 
	#MTIOCFTFORMAT
 
	`_IOWR
('m', 10, 
mt·f‹m©
)

	)

198 
	#MTIOCFTCMD
 
	`_IOWR
('m', 11, 
mt·cmd
)

	)

200 
	#GMT_EOF
(
x
Ë((xË& 0x80000000)

	)

201 
	#GMT_BOT
(
x
Ë((xË& 0x40000000)

	)

202 
	#GMT_EOT
(
x
Ë((xË& 0x20000000)

	)

203 
	#GMT_SM
(
x
Ë((xË& 0x10000000)

	)

204 
	#GMT_EOD
(
x
Ë((xË& 0x08000000)

	)

205 
	#GMT_WR_PROT
(
x
Ë((xË& 0x04000000)

	)

207 
	#GMT_ONLINE
(
x
Ë((xË& 0x01000000)

	)

208 
	#GMT_D_6250
(
x
Ë((xË& 0x00800000)

	)

209 
	#GMT_D_1600
(
x
Ë((xË& 0x00400000)

	)

210 
	#GMT_D_800
(
x
Ë((xË& 0x00200000)

	)

212 
	#GMT_DR_OPEN
(
x
Ë((xË& 0x00040000)

	)

214 
	#GMT_IM_REP_EN
(
x
Ë((xË& 0x00010000)

	)

215 
	#GMT_CLN
(
x
Ë((xË& 0x00008000)

	)

217 
	#MT_ST_BLKSIZE_SHIFT
 0

	)

218 
	#MT_ST_BLKSIZE_MASK
 0xffffff

	)

219 
	#MT_ST_DENSITY_SHIFT
 24

	)

220 
	#MT_ST_DENSITY_MASK
 0xff000000

	)

222 
	#MT_ST_SOFTERR_SHIFT
 0

	)

223 
	#MT_ST_SOFTERR_MASK
 0xffff

	)

225 
	#MT_ST_OPTIONS
 0xf0000000

	)

226 
	#MT_ST_BOOLEANS
 0x10000000

	)

227 
	#MT_ST_SETBOOLEANS
 0x30000000

	)

228 
	#MT_ST_CLEARBOOLEANS
 0x40000000

	)

229 
	#MT_ST_WRITE_THRESHOLD
 0x20000000

	)

230 
	#MT_ST_DEF_BLKSIZE
 0x50000000

	)

231 
	#MT_ST_DEF_OPTIONS
 0x60000000

	)

232 
	#MT_ST_TIMEOUTS
 0x70000000

	)

233 
	#MT_ST_SET_TIMEOUT
 (
MT_ST_TIMEOUTS
 | 0x000000)

	)

234 
	#MT_ST_SET_LONG_TIMEOUT
 (
MT_ST_TIMEOUTS
 | 0x100000)

	)

235 
	#MT_ST_SET_CLN
 0x80000000

	)

237 
	#MT_ST_BUFFER_WRITES
 0x1

	)

238 
	#MT_ST_ASYNC_WRITES
 0x2

	)

239 
	#MT_ST_READ_AHEAD
 0x4

	)

240 
	#MT_ST_DEBUGGING
 0x8

	)

241 
	#MT_ST_TWO_FM
 0x10

	)

242 
	#MT_ST_FAST_MTEOM
 0x20

	)

243 
	#MT_ST_AUTO_LOCK
 0x40

	)

244 
	#MT_ST_DEF_WRITES
 0x80

	)

245 
	#MT_ST_CAN_BSR
 0x100

	)

246 
	#MT_ST_NO_BLKLIMS
 0x200

	)

247 
	#MT_ST_CAN_PARTITIONS
 0x400

	)

248 
	#MT_ST_SCSI2LOGICAL
 0x800

	)

249 
	#MT_ST_SYSV
 0x1000

	)

250 
	#MT_ST_NOWAIT
 0x2000

	)

252 
	#MT_ST_CLEAR_DEFAULT
 0xfffff

	)

253 
	#MT_ST_DEF_DENSITY
 (
MT_ST_DEF_OPTIONS
 | 0x100000)

	)

254 
	#MT_ST_DEF_COMPRESSION
 (
MT_ST_DEF_OPTIONS
 | 0x200000)

	)

255 
	#MT_ST_DEF_DRVBUFFER
 (
MT_ST_DEF_OPTIONS
 | 0x300000)

	)

257 
	#MT_ST_HPLOADER_OFFSET
 10000

	)

	@linux/mutex-debug.h

12 #i‚de‡
__LINUX_MUTEX_DEBUG_H


13 
	#__LINUX_MUTEX_DEBUG_H


	)

15 
	~<löux/lökage.h
>

16 
	~<löux/lockdï.h
>

18 
	#__DEBUG_MUTEX_INITIALIZER
(
lock«me
Ë, .
magic
 = &
	)
lockname

20 
	#muãx_öô
(
muãx
Ëdÿ{ 
lock_˛ass_key
 
__key
; 
	`__muãx_öô
((muãx), #muãx, &__key); } 0)

	)

	@linux/mutex.h

12 #i‚de‡
__LINUX_MUTEX_H


13 
	#__LINUX_MUTEX_H


	)

15 
	~<löux/li°.h
>

16 
	~<löux/•ölock_ty≥s.h
>

17 
	~<löux/lökage.h
>

18 
	~<löux/lockdï.h
>

20 
	~<asm/©omic.h
>

22 
	smuãx
 {

24 
©omic_t
 
	mcou¡
;

25 
•ölock_t
 
	mwaô_lock
;

26 
li°_hód
 
	mwaô_li°
;

29 
	smuãx_waôî
 {

30 
li°_hód
 
	mli°
;

31 
èsk_°ru˘
 *
	mèsk
;

34 
	#__DEBUG_MUTEX_INITIALIZER
(
lock«me
)

	)

35 
	#muãx_öô
(
muãx
Ëdÿ{ 
lock_˛ass_key
 
__key
; 
	`__muãx_öô
((muãx), #muãx, &__key); } 0)

	)

36 
	#muãx_de°roy
(
muãx
Ëdÿ{ } 0)

	)

38 
	#__DEP_MAP_MUTEX_INITIALIZER
(
lock«me
)

	)

40 
	#__MUTEX_INITIALIZER
(
lock«me
Ë{ .
cou¡
 = 
	`ATOMIC_INIT
(1Ë, .
waô_lock
 = 
SPIN_LOCK_UNLOCKED
 , .
waô_li°
 = 
	`LIST_HEAD_INIT
÷ock«me.waô_li°Ë
	`__DEBUG_MUTEX_INITIALIZER
÷ock«meË
	`__DEP_MAP_MUTEX_INITIALIZER
÷ock«meË}

	)

42 
	#DEFINE_MUTEX
(
muãx«me
Ë
muãx
 muãx«mê
	`__MUTEX_INITIALIZER
(muãx«me)

	)

44 
	#muãx_lock_√°ed
(
lock
, 
sub˛ass
Ë
	`muãx_lock
÷ock)

	)

	@linux/ncp.h

12 #i‚de‡
_LINUX_NCP_H


13 
	#_LINUX_NCP_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#NCP_PTYPE
 (0x11)

	)

18 
	#NCP_PORT
 (0x0451)

	)

20 
	#NCP_ALLOC_SLOT_REQUEST
 (0x1111)

	)

21 
	#NCP_REQUEST
 (0x2222)

	)

22 
	#NCP_DEALLOC_SLOT_REQUEST
 (0x5555)

	)

24 
	sn˝_ªque°_hódî
 {

25 
__u16
 
	mty≥
;

26 
__u8
 
	m£quí˚
;

27 
__u8
 
	mc⁄n_low
;

28 
__u8
 
	mèsk
;

29 
__u8
 
	mc⁄n_high
;

30 
__u8
 
	mfun˘i⁄
;

31 
__u8
 
	md©a
[0];

32 } 
__©åibuã__
((
∑cked
));

34 
	#NCP_REPLY
 (0x3333)

	)

35 
	#NCP_WATCHDOG
 (0x3E3E)

	)

36 
	#NCP_POSITIVE_ACK
 (0x9999)

	)

38 
	sn˝_ª∂y_hódî
 {

39 
__u16
 
	mty≥
;

40 
__u8
 
	m£quí˚
;

41 
__u8
 
	mc⁄n_low
;

42 
__u8
 
	mèsk
;

43 
__u8
 
	mc⁄n_high
;

44 
__u8
 
	mcom∂ëi⁄_code
;

45 
__u8
 
	mc⁄√˘i⁄_°©e
;

46 
__u8
 
	md©a
[0];

47 } 
__©åibuã__
((
∑cked
));

49 
	#NCP_VOLNAME_LEN
 (16)

	)

50 
	#NCP_NUMBER_OF_VOLUMES
 (256)

	)

51 
	sn˝_vﬁume_öfo
 {

52 
__u32
 
	mtŸÆ_blocks
;

53 
__u32
 
	m‰ì_blocks
;

54 
__u32
 
	mpurgóbÀ_blocks
;

55 
__u32
 
	mnŸ_yë_purgóbÀ_blocks
;

56 
__u32
 
	mtŸÆ_dú_íåõs
;

57 
__u32
 
	mavaûabÀ_dú_íåõs
;

58 
__u8
 
	m£˘‹s_≥r_block
;

59 
	mvﬁume_«me
[
NCP_VOLNAME_LEN
 + 1];

62 
	#AR_READ
 (
	`˝u_to_À16
(1))

	)

63 
	#AR_WRITE
 (
	`˝u_to_À16
(2))

	)

64 
	#AR_EXCLUSIVE
 (
	`˝u_to_À16
(0x20))

	)

66 
	#NCP_FILE_ID_LEN
 6

	)

68 
	#NW_NS_DOS
 0

	)

69 
	#NW_NS_MAC
 1

	)

70 
	#NW_NS_NFS
 2

	)

71 
	#NW_NS_FTAM
 3

	)

72 
	#NW_NS_OS2
 4

	)

74 
	#RIM_NAME
 (
	`˝u_to_À32
(1))

	)

75 
	#RIM_SPACE_ALLOCATED
 (
	`˝u_to_À32
(2))

	)

76 
	#RIM_ATTRIBUTES
 (
	`˝u_to_À32
(4))

	)

77 
	#RIM_DATA_SIZE
 (
	`˝u_to_À32
(8))

	)

78 
	#RIM_TOTAL_SIZE
 (
	`˝u_to_À32
(0x10))

	)

79 
	#RIM_EXT_ATTR_INFO
 (
	`˝u_to_À32
(0x20))

	)

80 
	#RIM_ARCHIVE
 (
	`˝u_to_À32
(0x40))

	)

81 
	#RIM_MODIFY
 (
	`˝u_to_À32
(0x80))

	)

82 
	#RIM_CREATION
 (
	`˝u_to_À32
(0x100))

	)

83 
	#RIM_OWNING_NAMESPACE
 (
	`˝u_to_À32
(0x200))

	)

84 
	#RIM_DIRECTORY
 (
	`˝u_to_À32
(0x400))

	)

85 
	#RIM_RIGHTS
 (
	`˝u_to_À32
(0x800))

	)

86 
	#RIM_ALL
 (
	`˝u_to_À32
(0xFFF))

	)

87 
	#RIM_COMPRESSED_INFO
 (
	`˝u_to_À32
(0x80000000))

	)

89 
	#NSIBM_NFS_NAME
 0x0001

	)

90 
	#NSIBM_NFS_MODE
 0x0002

	)

91 
	#NSIBM_NFS_GID
 0x0004

	)

92 
	#NSIBM_NFS_NLINKS
 0x0008

	)

93 
	#NSIBM_NFS_RDEV
 0x0010

	)

94 
	#NSIBM_NFS_LINK
 0x0020

	)

95 
	#NSIBM_NFS_CREATED
 0x0040

	)

96 
	#NSIBM_NFS_UID
 0x0080

	)

97 
	#NSIBM_NFS_ACSFLAG
 0x0100

	)

98 
	#NSIBM_NFS_MYFLAG
 0x0200

	)

100 
	#OC_MODE_OPEN
 0x01

	)

101 
	#OC_MODE_TRUNCATE
 0x02

	)

102 
	#OC_MODE_REPLACE
 0x02

	)

103 
	#OC_MODE_CREATE
 0x08

	)

105 
	#OC_ACTION_NONE
 0x00

	)

106 
	#OC_ACTION_OPEN
 0x01

	)

107 
	#OC_ACTION_CREATE
 0x02

	)

108 
	#OC_ACTION_TRUNCATE
 0x04

	)

109 
	#OC_ACTION_REPLACE
 0x04

	)

111 #i‚de‡
AR_READ_ONLY


112 
	#AR_READ_ONLY
 0x0001

	)

113 
	#AR_WRITE_ONLY
 0x0002

	)

114 
	#AR_DENY_READ
 0x0004

	)

115 
	#AR_DENY_WRITE
 0x0008

	)

116 
	#AR_COMPATIBILITY
 0x0010

	)

117 
	#AR_WRITE_THROUGH
 0x0040

	)

118 
	#AR_OPEN_COMPRESSED
 0x0100

	)

121 
	snw_nfs_öfo
 {

122 
__u32
 
	mmode
;

123 
__u32
 
	mrdev
;

126 
	snw_öfo_°ru˘
 {

127 
__u32
 
	m•a˚AŒoc
;

128 
__À32
 
	m©åibuãs
;

129 
__u16
 
	mÊags
;

130 
__À32
 
	md©aSåómSize
;

131 
__À32
 
	mtŸÆSåómSize
;

132 
__u16
 
	mnumbîOfSåóms
;

133 
__À16
 
	m¸óti⁄Time
;

134 
__À16
 
	m¸óti⁄D©e
;

135 
__u32
 
	m¸ót‹ID
;

136 
__À16
 
	mmodifyTime
;

137 
__À16
 
	mmodifyD©e
;

138 
__u32
 
	mmodifõrID
;

139 
__À16
 
	mœ°Ac˚ssD©e
;

140 
__u16
 
	m¨chiveTime
;

141 
__u16
 
	m¨chiveD©e
;

142 
__u32
 
	m¨chivîID
;

143 
__u16
 
	möhîôedRightsMask
;

144 
__À32
 
	mdúE¡Num
;

145 
__À32
 
	mDosDúNum
;

146 
__u32
 
	mvﬁNumbî
;

147 
__u32
 
	mEAD©aSize
;

148 
__u32
 
	mEAKeyCou¡
;

149 
__u32
 
	mEAKeySize
;

150 
__u32
 
	mNSCª©‹
;

151 
__u8
 
	m«meLí
;

152 
__u8
 
	míåyName
[256];

154 } 
__©åibuã__
((
∑cked
));

156 
	#DM_ATTRIBUTES
 (
	`˝u_to_À32
(0x02))

	)

157 
	#DM_CREATE_DATE
 (
	`˝u_to_À32
(0x04))

	)

158 
	#DM_CREATE_TIME
 (
	`˝u_to_À32
(0x08))

	)

159 
	#DM_CREATOR_ID
 (
	`˝u_to_À32
(0x10))

	)

160 
	#DM_ARCHIVE_DATE
 (
	`˝u_to_À32
(0x20))

	)

161 
	#DM_ARCHIVE_TIME
 (
	`˝u_to_À32
(0x40))

	)

162 
	#DM_ARCHIVER_ID
 (
	`˝u_to_À32
(0x80))

	)

163 
	#DM_MODIFY_DATE
 (
	`˝u_to_À32
(0x0100))

	)

164 
	#DM_MODIFY_TIME
 (
	`˝u_to_À32
(0x0200))

	)

165 
	#DM_MODIFIER_ID
 (
	`˝u_to_À32
(0x0400))

	)

166 
	#DM_LAST_ACCESS_DATE
 (
	`˝u_to_À32
(0x0800))

	)

167 
	#DM_INHERITED_RIGHTS_MASK
 (
	`˝u_to_À32
(0x1000))

	)

168 
	#DM_MAXIMUM_SPACE
 (
	`˝u_to_À32
(0x2000))

	)

170 
	snw_modify_dos_öfo
 {

171 
__À32
 
	m©åibuãs
;

172 
__À16
 
	m¸óti⁄D©e
;

173 
__À16
 
	m¸óti⁄Time
;

174 
__u32
 
	m¸ót‹ID
;

175 
__À16
 
	mmodifyD©e
;

176 
__À16
 
	mmodifyTime
;

177 
__u32
 
	mmodifõrID
;

178 
__u16
 
	m¨chiveD©e
;

179 
__u16
 
	m¨chiveTime
;

180 
__u32
 
	m¨chivîID
;

181 
__À16
 
	mœ°Ac˚ssD©e
;

182 
__u16
 
	möhîô™˚Gø¡Mask
;

183 
__u16
 
	möhîô™˚RevokeMask
;

184 
__u32
 
	mmaximumS∑˚
;

185 } 
__©åibuã__
((
∑cked
));

187 
	snw_£¨ch_£quí˚
 {

188 
__u8
 
	mvﬁNumbî
;

189 
__u32
 
	mdúBa£
;

190 
__u32
 
	m£quí˚
;

191 } 
__©åibuã__
((
∑cked
));

	@linux/ncp_mount.h

12 #i‚de‡
_LINUX_NCP_MOUNT_H


13 
	#_LINUX_NCP_MOUNT_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/n˝.h
>

18 
	#NCP_MOUNT_VERSION
 3

	)

20 
	#NCP_MOUNT_SOFT
 0x0001

	)

21 
	#NCP_MOUNT_INTR
 0x0002

	)

22 
	#NCP_MOUNT_STRONG
 0x0004

	)

23 
	#NCP_MOUNT_NO_OS2
 0x0008

	)

24 
	#NCP_MOUNT_NO_NFS
 0x0010

	)

25 
	#NCP_MOUNT_EXTRAS
 0x0020

	)

26 
	#NCP_MOUNT_SYMLINKS
 0x0040

	)

27 
	#NCP_MOUNT_NFS_EXTRAS
 0x0080

	)

29 
	sn˝_mou¡_d©a
 {

30 
	mvîsi⁄
;

31 
	mn˝_fd
;

32 
__kî√l_uid_t
 
	mmou¡ed_uid
;

33 
__kî√l_pid_t
 
	mwdog_pid
;

35 
	mmou¡ed_vﬁ
[
NCP_VOLNAME_LEN
 + 1];

36 
	mtime_out
;

37 
	mªåy_cou¡
;

38 
	mÊags
;

40 
__kî√l_uid_t
 
	muid
;

41 
__kî√l_gid_t
 
	mgid
;

42 
__kî√l_mode_t
 
	mfûe_mode
;

43 
__kî√l_mode_t
 
	mdú_mode
;

46 
	#NCP_MOUNT_VERSION_V4
 (4)

	)

48 
	sn˝_mou¡_d©a_v4
 {

49 
	mvîsi⁄
;

50 
	mÊags
;

52 
	mmou¡ed_uid
;

54 
	mwdog_pid
;

56 
	mn˝_fd
;

57 
	mtime_out
;

58 
	mªåy_cou¡
;

60 
	muid
;

61 
	mgid
;

63 
	mfûe_mode
;

64 
	mdú_mode
;

67 
	#NCP_MOUNT_VERSION_V5
 (5)

	)

	@linux/ncp_no.h

12 #i‚de‡
_NCP_NO


13 
	#_NCP_NO


	)

15 
	#aRONLY
 (
	`__c⁄°™t_˝u_to_À32
(1))

	)

16 
	#aHIDDEN
 (
	`__c⁄°™t_˝u_to_À32
(2))

	)

17 
	#aSYSTEM
 (
	`__c⁄°™t_˝u_to_À32
(4))

	)

18 
	#aEXECUTE
 (
	`__c⁄°™t_˝u_to_À32
(8))

	)

19 
	#aDIR
 (
	`__c⁄°™t_˝u_to_À32
(0x10))

	)

20 
	#aARCH
 (
	`__c⁄°™t_˝u_to_À32
(0x20))

	)

21 
	#aSHARED
 (
	`__c⁄°™t_˝u_to_À32
(0x80))

	)

22 
	#aDONTSUBALLOCATE
 (
	`__c⁄°™t_˝u_to_À32
(1L<<11))

	)

23 
	#aTRANSACTIONAL
 (
	`__c⁄°™t_˝u_to_À32
(1L<<12))

	)

24 
	#aPURGE
 (
	`__c⁄°™t_˝u_to_À32
(1L<<16))

	)

25 
	#aRENAMEINHIBIT
 (
	`__c⁄°™t_˝u_to_À32
(1L<<17))

	)

26 
	#aDELETEINHIBIT
 (
	`__c⁄°™t_˝u_to_À32
(1L<<18))

	)

27 
	#aDONTCOMPRESS
 (
	`__c⁄°™t_˝u_to_À32
(1L<<27))

	)

	@linux/net.h

12 #i‚de‡
_LINUX_NET_H


13 
	#_LINUX_NET_H


	)

15 
	~<löux/waô.h
>

16 
	~<asm/sockë.h
>

18 
	gpﬁl_èbÀ_°ru˘
;

19 
	göode
;

21 
	#NPROTO
 32

	)

23 
	#SYS_SOCKET
 1

	)

24 
	#SYS_BIND
 2

	)

25 
	#SYS_CONNECT
 3

	)

26 
	#SYS_LISTEN
 4

	)

27 
	#SYS_ACCEPT
 5

	)

28 
	#SYS_GETSOCKNAME
 6

	)

29 
	#SYS_GETPEERNAME
 7

	)

30 
	#SYS_SOCKETPAIR
 8

	)

31 
	#SYS_SEND
 9

	)

32 
	#SYS_RECV
 10

	)

33 
	#SYS_SENDTO
 11

	)

34 
	#SYS_RECVFROM
 12

	)

35 
	#SYS_SHUTDOWN
 13

	)

36 
	#SYS_SETSOCKOPT
 14

	)

37 
	#SYS_GETSOCKOPT
 15

	)

38 
	#SYS_SENDMSG
 16

	)

39 
	#SYS_RECVMSG
 17

	)

42 
	mSS_FREE
 = 0,

43 
	mSS_UNCONNECTED
,

44 
	mSS_CONNECTING
,

45 
	mSS_CONNECTED
,

46 
	mSS_DISCONNECTING


47 } 
	tsockë_°©e
;

49 
	#__SO_ACCEPTCON
 (1 << 16)

	)

	@linux/netdevice.h

12 #i‚de‡
_LINUX_NETDEVICE_H


13 
	#_LINUX_NETDEVICE_H


	)

15 
	~<löux/if.h
>

16 
	~<löux/if_ëhî.h
>

17 
	~<löux/if_∑ckë.h
>

19 
	#MAX_ADDR_LEN
 32

	)

21 
	#NETDEV_TX_OK
 0

	)

22 
	#NETDEV_TX_BUSY
 1

	)

23 
	#NETDEV_TX_LOCKED
 -1

	)

25 
	#LL_MAX_HEADER
 32

	)

27 
	#MAX_HEADER
 
LL_MAX_HEADER


	)

29 
	s√t_devi˚_°©s


31 
	mrx_∑ckës
;

32 
	mtx_∑ckës
;

33 
	mrx_byãs
;

34 
	mtx_byãs
;

35 
	mrx_îr‹s
;

36 
	mtx_îr‹s
;

37 
	mrx_dr›≥d
;

38 
	mtx_dr›≥d
;

39 
	mmu…iˇ°
;

40 
	mcﬁlisi⁄s
;

42 
	mrx_Àngth_îr‹s
;

43 
	mrx_ovî_îr‹s
;

44 
	mrx_¸c_îr‹s
;

45 
	mrx_‰ame_îr‹s
;

46 
	mrx_fifo_îr‹s
;

47 
	mrx_mis£d_îr‹s
;

49 
	mtx_ab‹ãd_îr‹s
;

50 
	mtx_ˇºõr_îr‹s
;

51 
	mtx_fifo_îr‹s
;

52 
	mtx_hóπbót_îr‹s
;

53 
	mtx_wödow_îr‹s
;

55 
	mrx_com¥es£d
;

56 
	mtx_com¥es£d
;

60 
	mIF_PORT_UNKNOWN
 = 0,

61 
	mIF_PORT_10BASE2
,

62 
	mIF_PORT_10BASET
,

63 
	mIF_PORT_AUI
,

64 
	mIF_PORT_100BASET
,

65 
	mIF_PORT_100BASETX
,

66 
	mIF_PORT_100BASEFX


	@linux/netfilter.h

12 #i‚de‡
__LINUX_NETFILTER_H


13 
	#__LINUX_NETFILTER_H


	)

15 
	~<löux/compûî.h
>

17 
	#NF_DROP
 0

	)

18 
	#NF_ACCEPT
 1

	)

19 
	#NF_STOLEN
 2

	)

20 
	#NF_QUEUE
 3

	)

21 
	#NF_REPEAT
 4

	)

22 
	#NF_STOP
 5

	)

23 
	#NF_MAX_VERDICT
 
NF_STOP


	)

25 
	#NF_VERDICT_MASK
 0x0000ffff

	)

26 
	#NF_VERDICT_BITS
 16

	)

28 
	#NF_VERDICT_QMASK
 0xffff0000

	)

29 
	#NF_VERDICT_QBITS
 16

	)

31 
	#NF_QUEUE_NR
(
x
Ë(((x << 
NF_VERDICT_QBITS
Ë& 
NF_VERDICT_QMASK
Ë| 
NF_QUEUE
)

	)

33 
	#NFC_UNKNOWN
 0x4000

	)

34 
	#NFC_ALTERED
 0x8000

	)

	@linux/netfilter/nf_conntrack_common.h

12 #i‚de‡
_NF_CONNTRACK_COMMON_H


13 
	#_NF_CONNTRACK_COMMON_H


	)

15 
	eù_c⁄¡øck_öfo


18 
	mIP_CT_ESTABLISHED
,

20 
	mIP_CT_RELATED
,

22 
	mIP_CT_NEW
,

24 
	mIP_CT_IS_REPLY
,

26 
	mIP_CT_NUMBER
 = 
IP_CT_IS_REPLY
 * 2 - 1

29 
	eù_c⁄¡øck_°©us
 {

31 
	mIPS_EXPECTED_BIT
 = 0,

32 
	mIPS_EXPECTED
 = (1 << 
IPS_EXPECTED_BIT
),

34 
	mIPS_SEEN_REPLY_BIT
 = 1,

35 
	mIPS_SEEN_REPLY
 = (1 << 
IPS_SEEN_REPLY_BIT
),

37 
	mIPS_ASSURED_BIT
 = 2,

38 
	mIPS_ASSURED
 = (1 << 
IPS_ASSURED_BIT
),

40 
	mIPS_CONFIRMED_BIT
 = 3,

41 
	mIPS_CONFIRMED
 = (1 << 
IPS_CONFIRMED_BIT
),

43 
	mIPS_SRC_NAT_BIT
 = 4,

44 
	mIPS_SRC_NAT
 = (1 << 
IPS_SRC_NAT_BIT
),

46 
	mIPS_DST_NAT_BIT
 = 5,

47 
	mIPS_DST_NAT
 = (1 << 
IPS_DST_NAT_BIT
),

49 
	mIPS_NAT_MASK
 = (
IPS_DST_NAT
 | 
IPS_SRC_NAT
),

51 
	mIPS_SEQ_ADJUST_BIT
 = 6,

52 
	mIPS_SEQ_ADJUST
 = (1 << 
IPS_SEQ_ADJUST_BIT
),

54 
	mIPS_SRC_NAT_DONE_BIT
 = 7,

55 
	mIPS_SRC_NAT_DONE
 = (1 << 
IPS_SRC_NAT_DONE_BIT
),

57 
	mIPS_DST_NAT_DONE_BIT
 = 8,

58 
	mIPS_DST_NAT_DONE
 = (1 << 
IPS_DST_NAT_DONE_BIT
),

60 
	mIPS_NAT_DONE_MASK
 = (
IPS_DST_NAT_DONE
 | 
IPS_SRC_NAT_DONE
),

62 
	mIPS_DYING_BIT
 = 9,

63 
	mIPS_DYING
 = (1 << 
IPS_DYING_BIT
),

65 
	mIPS_FIXED_TIMEOUT_BIT
 = 10,

66 
	mIPS_FIXED_TIMEOUT
 = (1 << 
IPS_FIXED_TIMEOUT_BIT
),

69 
	eù_c⁄¡øck_evíts


72 
	mIPCT_NEW_BIT
 = 0,

73 
	mIPCT_NEW
 = (1 << 
IPCT_NEW_BIT
),

75 
	mIPCT_RELATED_BIT
 = 1,

76 
	mIPCT_RELATED
 = (1 << 
IPCT_RELATED_BIT
),

78 
	mIPCT_DESTROY_BIT
 = 2,

79 
	mIPCT_DESTROY
 = (1 << 
IPCT_DESTROY_BIT
),

81 
	mIPCT_REFRESH_BIT
 = 3,

82 
	mIPCT_REFRESH
 = (1 << 
IPCT_REFRESH_BIT
),

84 
	mIPCT_STATUS_BIT
 = 4,

85 
	mIPCT_STATUS
 = (1 << 
IPCT_STATUS_BIT
),

87 
	mIPCT_PROTOINFO_BIT
 = 5,

88 
	mIPCT_PROTOINFO
 = (1 << 
IPCT_PROTOINFO_BIT
),

90 
	mIPCT_PROTOINFO_VOLATILE_BIT
 = 6,

91 
	mIPCT_PROTOINFO_VOLATILE
 = (1 << 
IPCT_PROTOINFO_VOLATILE_BIT
),

93 
	mIPCT_HELPER_BIT
 = 7,

94 
	mIPCT_HELPER
 = (1 << 
IPCT_HELPER_BIT
),

96 
	mIPCT_HELPINFO_BIT
 = 8,

97 
	mIPCT_HELPINFO
 = (1 << 
IPCT_HELPINFO_BIT
),

99 
	mIPCT_HELPINFO_VOLATILE_BIT
 = 9,

100 
	mIPCT_HELPINFO_VOLATILE
 = (1 << 
IPCT_HELPINFO_VOLATILE_BIT
),

102 
	mIPCT_NATINFO_BIT
 = 10,

103 
	mIPCT_NATINFO
 = (1 << 
IPCT_NATINFO_BIT
),

105 
	mIPCT_COUNTER_FILLING_BIT
 = 11,

106 
	mIPCT_COUNTER_FILLING
 = (1 << 
IPCT_COUNTER_FILLING_BIT
),

109 
	eù_c⁄¡øck_ex≥˘_evíts
 {

110 
	mIPEXP_NEW_BIT
 = 0,

111 
	mIPEXP_NEW
 = (1 << 
IPEXP_NEW_BIT
),

	@linux/netfilter/nf_conntrack_ftp.h

12 #i‚de‡
_NF_CONNTRACK_FTP_H


13 
	#_NF_CONNTRACK_FTP_H


	)

15 
	eù_˘_·p_ty≥


18 
	mIP_CT_FTP_PORT
,

20 
	mIP_CT_FTP_PASV
,

22 
	mIP_CT_FTP_EPRT
,

24 
	mIP_CT_FTP_EPSV
,

	@linux/netfilter/nf_conntrack_sctp.h

12 #i‚de‡
_NF_CONNTRACK_SCTP_H


13 
	#_NF_CONNTRACK_SCTP_H


	)

15 
	~<löux/√tfûãr/nf_c⁄¡øck_tu∂e_comm⁄.h
>

17 
	es˘p_c⁄¡øck
 {

18 
	mSCTP_CONNTRACK_NONE
,

19 
	mSCTP_CONNTRACK_CLOSED
,

20 
	mSCTP_CONNTRACK_COOKIE_WAIT
,

21 
	mSCTP_CONNTRACK_COOKIE_ECHOED
,

22 
	mSCTP_CONNTRACK_ESTABLISHED
,

23 
	mSCTP_CONNTRACK_SHUTDOWN_SENT
,

24 
	mSCTP_CONNTRACK_SHUTDOWN_RECD
,

25 
	mSCTP_CONNTRACK_SHUTDOWN_ACK_SENT
,

26 
	mSCTP_CONNTRACK_MAX


29 
	sù_˘_s˘p


31 
s˘p_c⁄¡øck
 
	m°©e
;

33 
u_öt32_t
 
	mvèg
[
IP_CT_DIR_MAX
];

34 
u_öt32_t
 
	mâag
[
IP_CT_DIR_MAX
];

	@linux/netfilter/nf_conntrack_tcp.h

12 #i‚de‡
_NF_CONNTRACK_TCP_H


13 
	#_NF_CONNTRACK_TCP_H


	)

15 
	et˝_c⁄¡øck
 {

16 
	mTCP_CONNTRACK_NONE
,

17 
	mTCP_CONNTRACK_SYN_SENT
,

18 
	mTCP_CONNTRACK_SYN_RECV
,

19 
	mTCP_CONNTRACK_ESTABLISHED
,

20 
	mTCP_CONNTRACK_FIN_WAIT
,

21 
	mTCP_CONNTRACK_CLOSE_WAIT
,

22 
	mTCP_CONNTRACK_LAST_ACK
,

23 
	mTCP_CONNTRACK_TIME_WAIT
,

24 
	mTCP_CONNTRACK_CLOSE
,

25 
	mTCP_CONNTRACK_LISTEN
,

26 
	mTCP_CONNTRACK_MAX
,

27 
	mTCP_CONNTRACK_IGNORE


30 
	#IP_CT_TCP_FLAG_WINDOW_SCALE
 0x01

	)

32 
	#IP_CT_TCP_FLAG_SACK_PERM
 0x02

	)

34 
	#IP_CT_TCP_FLAG_CLOSE_INIT
 0x03

	)

	@linux/netfilter/nf_conntrack_tuple_common.h

12 #i‚de‡
_NF_CONNTRACK_TUPLE_COMMON_H


13 
	#_NF_CONNTRACK_TUPLE_COMMON_H


	)

15 
	eù_c⁄¡øck_dú


17 
	mIP_CT_DIR_ORIGINAL
,

18 
	mIP_CT_DIR_REPLY
,

19 
	mIP_CT_DIR_MAX


22 
	#CTINFO2DIR
(
˘öfo
Ë((˘öfoË>
IP_CT_IS_REPLY
 ? 
IP_CT_DIR_REPLY
 : 
IP_CT_DIR_ORIGINAL
)

	)

	@linux/netfilter/nfnetlink.h

12 #i‚de‡
_NFNETLINK_H


13 
	#_NFNETLINK_H


	)

14 
	~<löux/ty≥s.h
>

16 
	#NF_NETLINK_CONNTRACK_NEW
 0x00000001

	)

17 
	#NF_NETLINK_CONNTRACK_UPDATE
 0x00000002

	)

18 
	#NF_NETLINK_CONNTRACK_DESTROY
 0x00000004

	)

19 
	#NF_NETLINK_CONNTRACK_EXP_NEW
 0x00000008

	)

20 
	#NF_NETLINK_CONNTRACK_EXP_UPDATE
 0x00000010

	)

21 
	#NF_NETLINK_CONNTRACK_EXP_DESTROY
 0x00000020

	)

23 
	en‚ëlök_groups
 {

24 
	mNFNLGRP_NONE
,

25 
	#NFNLGRP_NONE
 
NFNLGRP_NONE


	)

26 
	mNFNLGRP_CONNTRACK_NEW
,

27 
	#NFNLGRP_CONNTRACK_NEW
 
NFNLGRP_CONNTRACK_NEW


	)

28 
	mNFNLGRP_CONNTRACK_UPDATE
,

29 
	#NFNLGRP_CONNTRACK_UPDATE
 
NFNLGRP_CONNTRACK_UPDATE


	)

30 
	mNFNLGRP_CONNTRACK_DESTROY
,

31 
	#NFNLGRP_CONNTRACK_DESTROY
 
NFNLGRP_CONNTRACK_DESTROY


	)

32 
	mNFNLGRP_CONNTRACK_EXP_NEW
,

33 
	#NFNLGRP_CONNTRACK_EXP_NEW
 
NFNLGRP_CONNTRACK_EXP_NEW


	)

34 
	mNFNLGRP_CONNTRACK_EXP_UPDATE
,

35 
	#NFNLGRP_CONNTRACK_EXP_UPDATE
 
NFNLGRP_CONNTRACK_EXP_UPDATE


	)

36 
	mNFNLGRP_CONNTRACK_EXP_DESTROY
,

37 
	#NFNLGRP_CONNTRACK_EXP_DESTROY
 
NFNLGRP_CONNTRACK_EXP_DESTROY


	)

38 
	m__NFNLGRP_MAX
,

40 
	#NFNLGRP_MAX
 (
__NFNLGRP_MAX
 - 1)

	)

42 
	snÁâr


44 
u_öt16_t
 
	mnÁ_Àn
;

45 
u_öt16_t
 
	mnÁ_ty≥
;

46 } 
__©åibuã__
 ((
∑cked
));

48 
	#NFNL_NFA_NEST
 0x8000

	)

49 
	#NFA_TYPE
(
©å
Ë(◊âr)->
nÁ_ty≥
 & 0x7fff)

	)

51 
	#NFA_ALIGNTO
 4

	)

52 
	#NFA_ALIGN
(
Àn
Ë((÷íË+ 
NFA_ALIGNTO
 - 1Ë& ~(NFA_ALIGNTO - 1))

	)

53 
	#NFA_OK
(
nÁ
,
Àn
Ë(÷íË> 0 && (nÁ)->
nÁ_Àn
 >(
nÁâr
Ë&& (nÁ)->nÁ_À¿<÷í))

	)

54 
	#NFA_NEXT
(
nÁ
,
©åÀn
Ë(◊âæíË-
	`NFA_ALIGN
(“Á)->
nÁ_Àn
), (
nÁâr
 *)(((*)“Á)Ë+ NFA_ALIGN(“Á)->nÁ_Àn)))

	)

55 
	#NFA_LENGTH
(
Àn
Ë(
	`NFA_ALIGN
((
nÁâr
)Ë+ (Àn))

	)

56 
	#NFA_SPACE
(
Àn
Ë
	`NFA_ALIGN
(
	`NFA_LENGTH
÷í))

	)

57 
	#NFA_DATA
(
nÁ
Ë((*)(((*)“Á)Ë+ 
	`NFA_LENGTH
(0)))

	)

58 
	#NFA_PAYLOAD
(
nÁ
Ë(()(“Á)->
nÁ_Àn
Ë- 
	`NFA_LENGTH
(0))

	)

59 
	#NFA_NEST
(
skb
, 
ty≥
Ë({ 
nÁâr
 *
__°¨t
 = (nÁâ∏*Ë(skb)->
èû
; 
	`NFA_PUT
(skb, (
NFNL_NFA_NEST
 |Åy≥), 0, 
NULL
); __°¨t; })

	)

60 
	#NFA_NEST_END
(
skb
, 
°¨t
Ë({ (°¨t)->
nÁ_Àn
 = ((skb)->
èû
 - (*Ë(°¨t)); (skb)->
Àn
; })

	)

61 
	#NFA_NEST_CANCEL
(
skb
, 
°¨t
Ë({ i‡(°¨tË
	`skb_åim
(skb, (*Ë(°¨tË- (skb)->
d©a
); -1; })

	)

63 
	snfgímsg
 {

64 
u_öt8_t
 
	mnfgí_Ámûy
;

65 
u_öt8_t
 
	mvîsi⁄
;

66 
u_öt16_t
 
	mªs_id
;

67 } 
__©åibuã__
 ((
∑cked
));

69 
	#NFNETLINK_V0
 0

	)

71 
	#NFM_NFA
(
n
Ë((
nÁâr
 *)(((*)“)Ë+ 
	`NLMSG_ALIGN
((
nfgímsg
))))

	)

72 
	#NFM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“, (
nfgímsg
))

	)

74 
	#NFNL_SUBSYS_ID
(
x
Ë((x & 0xff00Ë>> 8)

	)

75 
	#NFNL_MSG_TYPE
(
x
Ë(x & 0x00ff)

	)

77 
	#NFNL_SUBSYS_NONE
 0

	)

78 
	#NFNL_SUBSYS_CTNETLINK
 1

	)

79 
	#NFNL_SUBSYS_CTNETLINK_EXP
 2

	)

80 
	#NFNL_SUBSYS_QUEUE
 3

	)

81 
	#NFNL_SUBSYS_ULOG
 4

	)

82 
	#NFNL_SUBSYS_COUNT
 5

	)

	@linux/netfilter/nfnetlink_conntrack.h

12 #i‚de‡
_IPCONNTRACK_NETLINK_H


13 
	#_IPCONNTRACK_NETLINK_H


	)

14 
	~<löux/√tfûãr/n‚ëlök.h
>

16 
	e˙é_msg_ty≥s
 {

17 
	mIPCTNL_MSG_CT_NEW
,

18 
	mIPCTNL_MSG_CT_GET
,

19 
	mIPCTNL_MSG_CT_DELETE
,

20 
	mIPCTNL_MSG_CT_GET_CTRZERO
,

22 
	mIPCTNL_MSG_MAX


25 
	e˘∆_exp_msg_ty≥s
 {

26 
	mIPCTNL_MSG_EXP_NEW
,

27 
	mIPCTNL_MSG_EXP_GET
,

28 
	mIPCTNL_MSG_EXP_DELETE
,

30 
	mIPCTNL_MSG_EXP_MAX


33 
	e˘©å_ty≥
 {

34 
	mCTA_UNSPEC
,

35 
	mCTA_TUPLE_ORIG
,

36 
	mCTA_TUPLE_REPLY
,

37 
	mCTA_STATUS
,

38 
	mCTA_PROTOINFO
,

39 
	mCTA_HELP
,

40 
	mCTA_NAT_SRC
,

41 
	#CTA_NAT
 
CTA_NAT_SRC


	)

42 
	mCTA_TIMEOUT
,

43 
	mCTA_MARK
,

44 
	mCTA_COUNTERS_ORIG
,

45 
	mCTA_COUNTERS_REPLY
,

46 
	mCTA_USE
,

47 
	mCTA_ID
,

48 
	mCTA_NAT_DST
,

49 
	m__CTA_MAX


51 
	#CTA_MAX
 (
__CTA_MAX
 - 1)

	)

53 
	e˘©å_tu∂e
 {

54 
	mCTA_TUPLE_UNSPEC
,

55 
	mCTA_TUPLE_IP
,

56 
	mCTA_TUPLE_PROTO
,

57 
	m__CTA_TUPLE_MAX


59 
	#CTA_TUPLE_MAX
 (
__CTA_TUPLE_MAX
 - 1)

	)

61 
	e˘©å_ù
 {

62 
	mCTA_IP_UNSPEC
,

63 
	mCTA_IP_V4_SRC
,

64 
	mCTA_IP_V4_DST
,

65 
	mCTA_IP_V6_SRC
,

66 
	mCTA_IP_V6_DST
,

67 
	m__CTA_IP_MAX


69 
	#CTA_IP_MAX
 (
__CTA_IP_MAX
 - 1)

	)

71 
	e˘©å_l4¥Ÿo
 {

72 
	mCTA_PROTO_UNSPEC
,

73 
	mCTA_PROTO_NUM
,

74 
	mCTA_PROTO_SRC_PORT
,

75 
	mCTA_PROTO_DST_PORT
,

76 
	mCTA_PROTO_ICMP_ID
,

77 
	mCTA_PROTO_ICMP_TYPE
,

78 
	mCTA_PROTO_ICMP_CODE
,

79 
	mCTA_PROTO_ICMPV6_ID
,

80 
	mCTA_PROTO_ICMPV6_TYPE
,

81 
	mCTA_PROTO_ICMPV6_CODE
,

82 
	m__CTA_PROTO_MAX


84 
	#CTA_PROTO_MAX
 (
__CTA_PROTO_MAX
 - 1)

	)

86 
	e˘©å_¥Ÿoöfo
 {

87 
	mCTA_PROTOINFO_UNSPEC
,

88 
	mCTA_PROTOINFO_TCP
,

89 
	m__CTA_PROTOINFO_MAX


91 
	#CTA_PROTOINFO_MAX
 (
__CTA_PROTOINFO_MAX
 - 1)

	)

93 
	e˘©å_¥Ÿoöfo_t˝
 {

94 
	mCTA_PROTOINFO_TCP_UNSPEC
,

95 
	mCTA_PROTOINFO_TCP_STATE
,

96 
	m__CTA_PROTOINFO_TCP_MAX


98 
	#CTA_PROTOINFO_TCP_MAX
 (
__CTA_PROTOINFO_TCP_MAX
 - 1)

	)

100 
	e˘©å_cou¡îs
 {

101 
	mCTA_COUNTERS_UNSPEC
,

102 
	mCTA_COUNTERS_PACKETS
,

103 
	mCTA_COUNTERS_BYTES
,

104 
	mCTA_COUNTERS32_PACKETS
,

105 
	mCTA_COUNTERS32_BYTES
,

106 
	m__CTA_COUNTERS_MAX


108 
	#CTA_COUNTERS_MAX
 (
__CTA_COUNTERS_MAX
 - 1)

	)

110 
	e˘©å_«t
 {

111 
	mCTA_NAT_UNSPEC
,

112 
	mCTA_NAT_MINIP
,

113 
	mCTA_NAT_MAXIP
,

114 
	mCTA_NAT_PROTO
,

115 
	m__CTA_NAT_MAX


117 
	#CTA_NAT_MAX
 (
__CTA_NAT_MAX
 - 1)

	)

119 
	e˘©å_¥Ÿ⁄©
 {

120 
	mCTA_PROTONAT_UNSPEC
,

121 
	mCTA_PROTONAT_PORT_MIN
,

122 
	mCTA_PROTONAT_PORT_MAX
,

123 
	m__CTA_PROTONAT_MAX


125 
	#CTA_PROTONAT_MAX
 (
__CTA_PROTONAT_MAX
 - 1)

	)

127 
	e˘©å_ex≥˘
 {

128 
	mCTA_EXPECT_UNSPEC
,

129 
	mCTA_EXPECT_MASTER
,

130 
	mCTA_EXPECT_TUPLE
,

131 
	mCTA_EXPECT_MASK
,

132 
	mCTA_EXPECT_TIMEOUT
,

133 
	mCTA_EXPECT_ID
,

134 
	mCTA_EXPECT_HELP_NAME
,

135 
	m__CTA_EXPECT_MAX


137 
	#CTA_EXPECT_MAX
 (
__CTA_EXPECT_MAX
 - 1)

	)

139 
	e˘©å_hñp
 {

140 
	mCTA_HELP_UNSPEC
,

141 
	mCTA_HELP_NAME
,

142 
	m__CTA_HELP_MAX


144 
	#CTA_HELP_MAX
 (
__CTA_HELP_MAX
 - 1)

	)

	@linux/netfilter/x_tables.h

12 #i‚de‡
_X_TABLES_H


13 
	#_X_TABLES_H


	)

15 
	#XT_FUNCTION_MAXNAMELEN
 30

	)

16 
	#XT_TABLE_MAXNAMELEN
 32

	)

18 
	sxt_íåy_m©ch


22 
u_öt16_t
 
	mm©ch_size
;

24 
	m«me
[
XT_FUNCTION_MAXNAMELEN
-1];

26 
u_öt8_t
 
	mªvisi⁄
;

27 } 
	mu£r
;

29 
u_öt16_t
 
	mm©ch_size
;

31 
xt_m©ch
 *
	mm©ch
;

32 } 
	mkî√l
;

34 
u_öt16_t
 
	mm©ch_size
;

35 } 
	mu
;

37 
	md©a
[0];

40 
	sxt_íåy_èrgë


44 
u_öt16_t
 
	mèrgë_size
;

46 
	m«me
[
XT_FUNCTION_MAXNAMELEN
-1];

48 
u_öt8_t
 
	mªvisi⁄
;

49 } 
	mu£r
;

51 
u_öt16_t
 
	mèrgë_size
;

53 
xt_èrgë
 *
	mèrgë
;

54 } 
	mkî√l
;

56 
u_öt16_t
 
	mèrgë_size
;

57 } 
	mu
;

59 
	md©a
[0];

62 
	sxt_°™d¨d_èrgë


64 
xt_íåy_èrgë
 
	mèrgë
;

65 
	mvîdi˘
;

68 
	sxt_gë_ªvisi⁄


70 
	m«me
[
XT_FUNCTION_MAXNAMELEN
-1];

72 
u_öt8_t
 
	mªvisi⁄
;

75 
	#XT_CONTINUE
 0xFFFFFFFF

	)

77 
	#XT_RETURN
 (-
NF_REPEAT
 - 1)

	)

79 
	s_xt_Æign


81 
u_öt8_t
 
	mu8
;

82 
u_öt16_t
 
	mu16
;

83 
u_öt32_t
 
	mu32
;

84 
u_öt64_t
 
	mu64
;

87 
	#XT_ALIGN
(
s
Ë(((sË+ (
	`__Æignof__
(
_xt_Æign
)-1)Ë& ~(__Æignof__(_xt_Æign)-1))

	)

89 
	#XT_STANDARD_TARGET
 ""

	)

91 
	#XT_ERROR_TARGET
 "ERROR"

	)

93 
	#XT_BASE_CTL
 64

	)

95 
	#XT_SO_SET_REPLACE
 (
XT_BASE_CTL
)

	)

96 
	#XT_SO_SET_ADD_COUNTERS
 (
XT_BASE_CTL
 + 1)

	)

97 
	#XT_SO_SET_MAX
 
XT_SO_SET_ADD_COUNTERS


	)

99 
	#XT_SO_GET_INFO
 (
XT_BASE_CTL
)

	)

100 
	#XT_SO_GET_ENTRIES
 (
XT_BASE_CTL
 + 1)

	)

101 
	#XT_SO_GET_REVISION_MATCH
 (
XT_BASE_CTL
 + 2)

	)

102 
	#XT_SO_GET_REVISION_TARGET
 (
XT_BASE_CTL
 + 3)

	)

103 
	#XT_SO_GET_MAX
 
XT_SO_GET_REVISION_TARGET


	)

105 
	#SET_COUNTER
(
c
,
b
,
p
Ëdÿ{ (c).
b˙t
 = (b); (c).
p˙t
 = (p); } 0)

	)

106 
	#ADD_COUNTER
(
c
,
b
,
p
Ëdÿ{ (c).
b˙t
 +(b); (c).
p˙t
 +’); } 0)

	)

108 
	sxt_cou¡îs


110 
u_öt64_t
 
	mp˙t
, 
	mb˙t
;

113 
	sxt_cou¡îs_öfo


116 
	m«me
[
XT_TABLE_MAXNAMELEN
];

118 
	mnum_cou¡îs
;

120 
xt_cou¡îs
 
	mcou¡îs
[0];

123 
	#XT_INV_PROTO
 0x40

	)

	@linux/netfilter/xt_CLASSIFY.h

12 #i‚de‡
_XT_CLASSIFY_H


13 
	#_XT_CLASSIFY_H


	)

15 
	sxt_˛assify_èrgë_öfo
 {

16 
u_öt32_t
 
	m¥i‹ôy
;

	@linux/netfilter/xt_CONNSECMARK.h

12 #i‚de‡
_XT_CONNSECMARK_H_èrgë


13 
	#_XT_CONNSECMARK_H_èrgë


	)

16 
	mCONNSECMARK_SAVE
 = 1,

17 
	mCONNSECMARK_RESTORE
,

20 
	sxt_c⁄n£cm¨k_èrgë_öfo
 {

21 
u_öt8_t
 
	mmode
;

	@linux/netfilter/xt_NFQUEUE.h

12 #i‚de‡
_XT_NFQ_TARGET_H


13 
	#_XT_NFQ_TARGET_H


	)

15 
	sxt_NFQ_öfo
 {

16 
u_öt16_t
 
	mqueuíum
;

	@linux/netfilter/xt_SECMARK.h

12 #i‚de‡
_XT_SECMARK_H_èrgë


13 
	#_XT_SECMARK_H_èrgë


	)

15 
	#SECMARK_MODE_SEL
 0x01

	)

16 
	#SECMARK_SELCTX_MAX
 256

	)

18 
	sxt_£cm¨k_èrgë_£löux_öfo
 {

19 
u_öt32_t
 
	m£lsid
;

20 
	m£l˘x
[
SECMARK_SELCTX_MAX
];

23 
	sxt_£cm¨k_èrgë_öfo
 {

24 
u_öt8_t
 
	mmode
;

26 
xt_£cm¨k_èrgë_£löux_öfo
 
	m£l
;

27 } 
	mu
;

	@linux/netfilter/xt_comment.h

12 #i‚de‡
_XT_COMMENT_H


13 
	#_XT_COMMENT_H


	)

15 
	#XT_MAX_COMMENT_LEN
 256

	)

17 
	sxt_commít_öfo
 {

18 
	mcommít
[
XT_MAX_COMMENT_LEN
];

	@linux/netfilter/xt_connbytes.h

12 #i‚de‡
_XT_CONNBYTES_H


13 
	#_XT_CONNBYTES_H


	)

15 
	ext_c⁄nbyãs_wh©
 {

16 
	mXT_CONNBYTES_PKTS
,

17 
	mXT_CONNBYTES_BYTES
,

18 
	mXT_CONNBYTES_AVGPKT
,

21 
	ext_c⁄nbyãs_dúe˘i⁄
 {

22 
	mXT_CONNBYTES_DIR_ORIGINAL
,

23 
	mXT_CONNBYTES_DIR_REPLY
,

24 
	mXT_CONNBYTES_DIR_BOTH
,

27 
	sxt_c⁄nbyãs_öfo


30 
Æig√d_u64
 
	m‰om
;

31 
Æig√d_u64
 
	mto
;

32 } 
	mcou¡
;

33 
u_öt8_t
 
	mwh©
;

34 
u_öt8_t
 
	mdúe˘i⁄
;

	@linux/netfilter/xt_conntrack.h

12 #i‚de‡
_XT_CONNTRACK_H


13 
	#_XT_CONNTRACK_H


	)

15 
	~<löux/√tfûãr/nf_c⁄¡øck_tu∂e_comm⁄.h
>

16 
	~<löux/ö.h
>

18 
	#XT_CONNTRACK_STATE_BIT
(
˘öfo
Ë(1 << ((˘öfo)%
IP_CT_IS_REPLY
+1))

	)

19 
	#XT_CONNTRACK_STATE_INVALID
 (1 << 0)

	)

21 
	#XT_CONNTRACK_STATE_SNAT
 (1 << (
IP_CT_NUMBER
 + 1))

	)

22 
	#XT_CONNTRACK_STATE_DNAT
 (1 << (
IP_CT_NUMBER
 + 2))

	)

23 
	#XT_CONNTRACK_STATE_UNTRACKED
 (1 << (
IP_CT_NUMBER
 + 3))

	)

25 
	#XT_CONNTRACK_STATE
 0x01

	)

26 
	#XT_CONNTRACK_PROTO
 0x02

	)

27 
	#XT_CONNTRACK_ORIGSRC
 0x04

	)

28 
	#XT_CONNTRACK_ORIGDST
 0x08

	)

29 
	#XT_CONNTRACK_REPLSRC
 0x10

	)

30 
	#XT_CONNTRACK_REPLDST
 0x20

	)

31 
	#XT_CONNTRACK_STATUS
 0x40

	)

32 
	#XT_CONNTRACK_EXPIRES
 0x80

	)

34 
	sù_c⁄¡øck_ﬁd_tu∂e


37 
__u32
 
	mù
;

39 
__u16
 
	mÆl
;

40 } 
	mu
;

41 } 
	m§c
;

44 
__u32
 
	mù
;

46 
__u16
 
	mÆl
;

47 } 
	mu
;

49 
__u16
 
	m¥Ÿ⁄um
;

50 } 
	md°
;

53 
	sxt_c⁄¡øck_öfo


55 
	m°©emask
, 
	m°©usmask
;

57 
ù_c⁄¡øck_ﬁd_tu∂e
 
	mtu∂e
[
IP_CT_DIR_MAX
];

58 
ö_addr
 
	msùmsk
[
IP_CT_DIR_MAX
], 
	mdùmsk
[IP_CT_DIR_MAX];

60 
	mexpúes_mö
, 
	mexpúes_max
;

62 
u_öt8_t
 
	mÊags
;

64 
u_öt8_t
 
	mövÊags
;

	@linux/netfilter/xt_dccp.h

12 #i‚de‡
_XT_DCCP_H_


13 
	#_XT_DCCP_H_


	)

15 
	#XT_DCCP_SRC_PORTS
 0x01

	)

16 
	#XT_DCCP_DEST_PORTS
 0x02

	)

17 
	#XT_DCCP_TYPE
 0x04

	)

18 
	#XT_DCCP_OPTION
 0x08

	)

20 
	#XT_DCCP_VALID_FLAGS
 0x0f

	)

22 
	sxt_dc˝_öfo
 {

23 
u_öt16_t
 
	md±s
[2];

24 
u_öt16_t
 
	m•ts
[2];

26 
u_öt16_t
 
	mÊags
;

27 
u_öt16_t
 
	mövÊags
;

29 
u_öt16_t
 
	mty≥mask
;

30 
u_öt8_t
 
	m›ti⁄
;

	@linux/netfilter/xt_esp.h

12 #i‚de‡
_XT_ESP_H


13 
	#_XT_ESP_H


	)

15 
	sxt_e•


17 
u_öt32_t
 
	m•is
[2];

18 
u_öt8_t
 
	mövÊags
;

21 
	#XT_ESP_INV_SPI
 0x01

	)

22 
	#XT_ESP_INV_MASK
 0x01

	)

	@linux/netfilter/xt_helper.h

12 #i‚de‡
_XT_HELPER_H


13 
	#_XT_HELPER_H


	)

15 
	sxt_hñ≥r_öfo
 {

16 
	mövît
;

17 
	m«me
[30];

	@linux/netfilter/xt_length.h

12 #i‚de‡
_XT_LENGTH_H


13 
	#_XT_LENGTH_H


	)

15 
	sxt_Àngth_öfo
 {

16 
u_öt16_t
 
	mmö
, 
	mmax
;

17 
u_öt8_t
 
	mövît
;

	@linux/netfilter/xt_limit.h

12 #i‚de‡
_XT_RATE_H


13 
	#_XT_RATE_H


	)

15 
	#XT_LIMIT_SCALE
 10000

	)

17 
	sxt_øãöfo
 {

18 
u_öt32_t
 
	mavg
;

19 
u_öt32_t
 
	mbur°
;

21 
	m¥ev
;

22 
u_öt32_t
 
	m¸edô
;

23 
u_öt32_t
 
	m¸edô_ˇp
, 
	mco°
;

25 
xt_øãöfo
 *
	mma°î
;

	@linux/netfilter/xt_mac.h

12 #i‚de‡
_XT_MAC_H


13 
	#_XT_MAC_H


	)

15 
	sxt_mac_öfo
 {

16 
	m§ˇddr
[
ETH_ALEN
];

17 
	mövît
;

	@linux/netfilter/xt_multiport.h

12 #i‚de‡
_XT_MULTIPORT_H


13 
	#_XT_MULTIPORT_H


	)

15 
	ext_mu…ù‹t_Êags


17 
	mXT_MULTIPORT_SOURCE
,

18 
	mXT_MULTIPORT_DESTINATION
,

19 
	mXT_MULTIPORT_EITHER


22 
	#XT_MULTI_PORTS
 15

	)

24 
	sxt_mu…ù‹t


26 
u_öt8_t
 
	mÊags
;

27 
u_öt8_t
 
	mcou¡
;

28 
u_öt16_t
 
	mp‹ts
[
XT_MULTI_PORTS
];

31 
	sxt_mu…ù‹t_v1


33 
u_öt8_t
 
	mÊags
;

34 
u_öt8_t
 
	mcou¡
;

35 
u_öt16_t
 
	mp‹ts
[
XT_MULTI_PORTS
];

36 
u_öt8_t
 
	mpÊags
[
XT_MULTI_PORTS
];

37 
u_öt8_t
 
	mövît
;

	@linux/netfilter/xt_physdev.h

12 #i‚de‡
_XT_PHYSDEV_H


13 
	#_XT_PHYSDEV_H


	)

15 
	#XT_PHYSDEV_OP_IN
 0x01

	)

16 
	#XT_PHYSDEV_OP_OUT
 0x02

	)

17 
	#XT_PHYSDEV_OP_BRIDGED
 0x04

	)

18 
	#XT_PHYSDEV_OP_ISIN
 0x08

	)

19 
	#XT_PHYSDEV_OP_ISOUT
 0x10

	)

20 
	#XT_PHYSDEV_OP_MASK
 (0x20 - 1)

	)

22 
	sxt_physdev_öfo
 {

23 
	mphysödev
[
IFNAMSIZ
];

24 
	mö_mask
[
IFNAMSIZ
];

25 
	mphysoutdev
[
IFNAMSIZ
];

26 
	mout_mask
[
IFNAMSIZ
];

27 
u_öt8_t
 
	mövît
;

28 
u_öt8_t
 
	mbômask
;

	@linux/netfilter/xt_pkttype.h

12 #i‚de‡
_XT_PKTTYPE_H


13 
	#_XT_PKTTYPE_H


	)

15 
	sxt_pkây≥_öfo
 {

16 
	mpkây≥
;

17 
	mövît
;

	@linux/netfilter/xt_quota.h

12 #i‚de‡
_XT_QUOTA_H


13 
	#_XT_QUOTA_H


	)

15 
	ext_quŸa_Êags
 {

16 
	mXT_QUOTA_INVERT
 = 0x1,

18 
	#XT_QUOTA_MASK
 0x1

	)

20 
	sxt_quŸa_öfo
 {

21 
u_öt32_t
 
	mÊags
;

22 
u_öt32_t
 
	m∑d
;

23 
Æig√d_u64
 
	mquŸa
;

24 
xt_quŸa_öfo
 *
	mma°î
;

	@linux/netfilter/xt_realm.h

12 #i‚de‡
_XT_REALM_H


13 
	#_XT_REALM_H


	)

15 
	sxt_ªÆm_öfo
 {

16 
u_öt32_t
 
	mid
;

17 
u_öt32_t
 
	mmask
;

18 
u_öt8_t
 
	mövît
;

	@linux/netfilter/xt_sctp.h

12 #i‚de‡
_XT_SCTP_H_


13 
	#_XT_SCTP_H_


	)

15 
	#XT_SCTP_SRC_PORTS
 0x01

	)

16 
	#XT_SCTP_DEST_PORTS
 0x02

	)

17 
	#XT_SCTP_CHUNK_TYPES
 0x04

	)

19 
	#XT_SCTP_VALID_FLAGS
 0x07

	)

21 
	#ELEMCOUNT
(
x
Ë((x)/(x[0]))

	)

23 
	sxt_s˘p_Êag_öfo
 {

24 
u_öt8_t
 
	mchunkty≥
;

25 
u_öt8_t
 
	mÊag
;

26 
u_öt8_t
 
	mÊag_mask
;

29 
	#XT_NUM_SCTP_FLAGS
 4

	)

31 
	sxt_s˘p_öfo
 {

32 
u_öt16_t
 
	md±s
[2];

33 
u_öt16_t
 
	m•ts
[2];

35 
u_öt32_t
 
	mchunkm≠
[256 /  (u_int32_t)];

37 
	#SCTP_CHUNK_MATCH_ANY
 0x01

	)

38 
	#SCTP_CHUNK_MATCH_ALL
 0x02

	)

39 
	#SCTP_CHUNK_MATCH_ONLY
 0x04

	)

41 
u_öt32_t
 
	mchunk_m©ch_ty≥
;

42 
xt_s˘p_Êag_öfo
 
	mÊag_öfo
[
XT_NUM_SCTP_FLAGS
];

43 
	mÊag_cou¡
;

45 
u_öt32_t
 
	mÊags
;

46 
u_öt32_t
 
	mövÊags
;

49 
	#byãs
(
ty≥
Ë(—y≥Ë* 8)

	)

51 
	#SCTP_CHUNKMAP_SET
(
chunkm≠
, 
ty≥
Ëdÿ{ chunkm≠[ty≥ / 
	`byãs
(
u_öt32_t
)] |1 << (ty≥ % byãs(u_öt32_t)); } 0)

	)

53 
	#SCTP_CHUNKMAP_CLEAR
(
chunkm≠
, 
ty≥
Ëdÿ{ chunkm≠[ty≥ / 
	`byãs
(
u_öt32_t
)] &~(1 << (ty≥ % byãs(u_öt32_t))); } 0)

	)

55 
	#SCTP_CHUNKMAP_IS_SET
(
chunkm≠
, 
ty≥
Ë({ (chunkm≠[ty≥ / 
	`byãs
 (
u_öt32_t
)] & (1 << (ty≥ % byã†(u_öt32_t)))Ë? 1: 0; })

	)

57 
	#SCTP_CHUNKMAP_RESET
(
chunkm≠
Ëdÿ{ 
i
; ò0; i < 
	`ELEMCOUNT
(chunkm≠); i++Ëchunkm≠[i] = 0; } 0)

	)

59 
	#SCTP_CHUNKMAP_SET_ALL
(
chunkm≠
Ëdÿ{ 
i
; ò0; i < 
	`ELEMCOUNT
(chunkm≠); i++Ëchunkm≠[i] = ~0; } 0)

	)

61 
	#SCTP_CHUNKMAP_COPY
(
de°m≠
, 
§cm≠
Ëdÿ{ 
i
; ò0; i < 
	`ELEMCOUNT
(
chunkm≠
); i++Ëde°m≠[i] = srcm≠[i]; } 0)

	)

63 
	#SCTP_CHUNKMAP_IS_CLEAR
(
chunkm≠
Ë({ 
i
; 
Êag
 = 1; ò0; i < 
	`ELEMCOUNT
(chunkm≠); i++Ë{ i‡(chunkm≠[i]Ë{ fœg = 0; ; } } fœg; })

	)

65 
	#SCTP_CHUNKMAP_IS_ALL_SET
(
chunkm≠
Ë({ 
i
; 
Êag
 = 1; ò0; i < 
	`ELEMCOUNT
(chunkm≠); i++Ë{ i‡(chunkm≠[i] !~0Ë{ fœg = 0; ; } } fœg; })

	)

	@linux/netfilter/xt_state.h

12 #i‚de‡
_XT_STATE_H


13 
	#_XT_STATE_H


	)

15 
	#XT_STATE_BIT
(
˘öfo
Ë(1 << ((˘öfo)%
IP_CT_IS_REPLY
+1))

	)

16 
	#XT_STATE_INVALID
 (1 << 0)

	)

18 
	#XT_STATE_UNTRACKED
 (1 << (
IP_CT_NUMBER
 + 1))

	)

20 
	sxt_°©e_öfo


22 
	m°©emask
;

	@linux/netfilter/xt_statistic.h

12 #i‚de‡
_XT_STATISTIC_H


13 
	#_XT_STATISTIC_H


	)

15 
	ext_°©i°ic_mode
 {

16 
	mXT_STATISTIC_MODE_RANDOM
,

17 
	mXT_STATISTIC_MODE_NTH
,

18 
	m__XT_STATISTIC_MODE_MAX


20 
	#XT_STATISTIC_MODE_MAX
 (
__XT_STATISTIC_MODE_MAX
 - 1)

	)

22 
	ext_°©i°ic_Êags
 {

23 
	mXT_STATISTIC_INVERT
 = 0x1,

25 
	#XT_STATISTIC_MASK
 0x1

	)

27 
	sxt_°©i°ic_öfo
 {

28 
u_öt16_t
 
	mmode
;

29 
u_öt16_t
 
	mÊags
;

32 
u_öt32_t
 
	m¥obabûôy
;

33 } 
	møndom
;

35 
u_öt32_t
 
	mevîy
;

36 
u_öt32_t
 
	m∑ckë
;

37 
u_öt32_t
 
	mcou¡
;

38 } 
	m¡h
;

39 } 
	mu
;

40 
xt_°©i°ic_öfo
 *
ma°î
 
__©åibuã__
((
Æig√d
(8)));

	@linux/netfilter/xt_string.h

12 #i‚de‡
_XT_STRING_H


13 
	#_XT_STRING_H


	)

15 
	#XT_STRING_MAX_PATTERN_SIZE
 128

	)

16 
	#XT_STRING_MAX_ALGO_NAME_SIZE
 16

	)

18 
	sxt_°rög_öfo


20 
u_öt16_t
 
	m‰om_off£t
;

21 
u_öt16_t
 
	mto_off£t
;

22 
	mÆgo
[
XT_STRING_MAX_ALGO_NAME_SIZE
];

23 
	m∑âîn
[
XT_STRING_MAX_PATTERN_SIZE
];

24 
u_öt8_t
 
	m∑éí
;

25 
u_öt8_t
 
	mövît
;

26 
ts_c⁄fig
 
__©åibuã__
((
Æig√d
(8))Ë*
	mc⁄fig
;

	@linux/netfilter/xt_tcpmss.h

12 #i‚de‡
_XT_TCPMSS_MATCH_H


13 
	#_XT_TCPMSS_MATCH_H


	)

15 
	sxt_t˝mss_m©ch_öfo
 {

16 
u_öt16_t
 
	mmss_mö
, 
	mmss_max
;

17 
u_öt8_t
 
	mövît
;

	@linux/netfilter/xt_tcpudp.h

12 #i‚de‡
_XT_TCPUDP_H


13 
	#_XT_TCPUDP_H


	)

15 
	sxt_t˝


17 
u_öt16_t
 
	m•ts
[2];

18 
u_öt16_t
 
	md±s
[2];

19 
u_öt8_t
 
	m›ti⁄
;

20 
u_öt8_t
 
	mÊg_mask
;

21 
u_öt8_t
 
	mÊg_cmp
;

22 
u_öt8_t
 
	mövÊags
;

25 
	#XT_TCP_INV_SRCPT
 0x01

	)

26 
	#XT_TCP_INV_DSTPT
 0x02

	)

27 
	#XT_TCP_INV_FLAGS
 0x04

	)

28 
	#XT_TCP_INV_OPTION
 0x08

	)

29 
	#XT_TCP_INV_MASK
 0x0F

	)

31 
	sxt_udp


33 
u_öt16_t
 
	m•ts
[2];

34 
u_öt16_t
 
	md±s
[2];

35 
u_öt8_t
 
	mövÊags
;

38 
	#XT_UDP_INV_SRCPT
 0x01

	)

39 
	#XT_UDP_INV_DSTPT
 0x02

	)

40 
	#XT_UDP_INV_MASK
 0x03

	)

	@linux/netfilter_arp.h

12 #i‚de‡
__LINUX_ARP_NETFILTER_H


13 
	#__LINUX_ARP_NETFILTER_H


	)

15 
	~<löux/√tfûãr.h
>

17 
	#NF_ARP
 0

	)

19 
	#NF_ARP_IN
 0

	)

20 
	#NF_ARP_OUT
 1

	)

21 
	#NF_ARP_FORWARD
 2

	)

22 
	#NF_ARP_NUMHOOKS
 3

	)

	@linux/netfilter_arp/arp_tables.h

12 #i‚de‡
_ARPTABLES_H


13 
	#_ARPTABLES_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/√tfûãr_¨p.h
>

18 
	~<löux/√tfûãr/x_èbÀs.h
>

20 
	#ARPT_FUNCTION_MAXNAMELEN
 
XT_FUNCTION_MAXNAMELEN


	)

21 
	#ARPT_TABLE_MAXNAMELEN
 
XT_TABLE_MAXNAMELEN


	)

22 
	#¨±_èrgë
 
xt_èrgë


	)

23 
	#¨±_èbÀ
 
xt_èbÀ


	)

25 
	#ARPT_DEV_ADDR_LEN_MAX
 16

	)

27 
	s¨±_devaddr_öfo
 {

28 
	maddr
[
ARPT_DEV_ADDR_LEN_MAX
];

29 
	mmask
[
ARPT_DEV_ADDR_LEN_MAX
];

32 
	s¨±_¨p
 {

34 
ö_addr
 
	m§c
, 
	mtgt
;

36 
ö_addr
 
	msmsk
, 
	mtmsk
;

38 
u_öt8_t
 
	m¨h 
, 
	m¨h _mask
;

39 
¨±_devaddr_öfo
 
	m§c_devaddr
;

40 
¨±_devaddr_öfo
 
	mtgt_devaddr
;

42 
u_öt16_t
 
	m¨p›
, 
	m¨p›_mask
;

44 
u_öt16_t
 
	m¨hrd
, 
	m¨hrd_mask
;

45 
u_öt16_t
 
	m¨¥o
, 
	m¨¥o_mask
;

47 
	möiÁ˚
[
IFNAMSIZ
], 
	moutiÁ˚
[IFNAMSIZ];

48 
	möiÁ˚_mask
[
IFNAMSIZ
], 
	moutiÁ˚_mask
[IFNAMSIZ];

50 
u_öt8_t
 
	mÊags
;

52 
u_öt16_t
 
	mövÊags
;

55 
	#¨±_íåy_èrgë
 
xt_íåy_èrgë


	)

56 
	#¨±_°™d¨d_èrgë
 
xt_°™d¨d_èrgë


	)

58 
	#ARPT_F_MASK
 0x00

	)

60 
	#ARPT_INV_VIA_IN
 0x0001

	)

61 
	#ARPT_INV_VIA_OUT
 0x0002

	)

62 
	#ARPT_INV_SRCIP
 0x0004

	)

63 
	#ARPT_INV_TGTIP
 0x0008

	)

64 
	#ARPT_INV_SRCDEVADDR
 0x0010

	)

65 
	#ARPT_INV_TGTDEVADDR
 0x0020

	)

66 
	#ARPT_INV_ARPOP
 0x0040

	)

67 
	#ARPT_INV_ARPHRD
 0x0080

	)

68 
	#ARPT_INV_ARPPRO
 0x0100

	)

69 
	#ARPT_INV_ARPHLN
 0x0200

	)

70 
	#ARPT_INV_MASK
 0x03FF

	)

72 
	s¨±_íåy


74 
¨±_¨p
 
	m¨p
;

76 
u_öt16_t
 
	mèrgë_off£t
;

78 
u_öt16_t
 
	m√xt_off£t
;

80 
	mcome‰om
;

82 
xt_cou¡îs
 
	mcou¡îs
;

84 
	mñems
[0];

87 
	#ARPT_CTL_OFFSET
 32

	)

88 
	#ARPT_BASE_CTL
 (
XT_BASE_CTL
+
ARPT_CTL_OFFSET
)

	)

90 
	#ARPT_SO_SET_REPLACE
 (
XT_SO_SET_REPLACE
+
ARPT_CTL_OFFSET
)

	)

91 
	#ARPT_SO_SET_ADD_COUNTERS
 (
XT_SO_SET_ADD_COUNTERS
+
ARPT_CTL_OFFSET
)

	)

92 
	#ARPT_SO_SET_MAX
 (
XT_SO_SET_MAX
+
ARPT_CTL_OFFSET
)

	)

94 
	#ARPT_SO_GET_INFO
 (
XT_SO_GET_INFO
+
ARPT_CTL_OFFSET
)

	)

95 
	#ARPT_SO_GET_ENTRIES
 (
XT_SO_GET_ENTRIES
+
ARPT_CTL_OFFSET
)

	)

97 
	#ARPT_SO_GET_REVISION_TARGET
 (
XT_SO_GET_REVISION_TARGET
+
ARPT_CTL_OFFSET
)

	)

98 
	#ARPT_SO_GET_MAX
 (
XT_SO_GET_REVISION_TARGET
+
ARPT_CTL_OFFSET
)

	)

100 
	#ARPT_CONTINUE
 
XT_CONTINUE


	)

102 
	#ARPT_RETURN
 
XT_RETURN


	)

104 
	s¨±_gëöfo


107 
	m«me
[
ARPT_TABLE_MAXNAMELEN
];

109 
	mvÆid_hooks
;

111 
	mhook_íåy
[
NF_ARP_NUMHOOKS
];

113 
	mundîÊow
[
NF_ARP_NUMHOOKS
];

115 
	mnum_íåõs
;

117 
	msize
;

120 
	s¨±_ª∂a˚


123 
	m«me
[
ARPT_TABLE_MAXNAMELEN
];

125 
	mvÆid_hooks
;

127 
	mnum_íåõs
;

129 
	msize
;

131 
	mhook_íåy
[
NF_ARP_NUMHOOKS
];

133 
	mundîÊow
[
NF_ARP_NUMHOOKS
];

135 
	mnum_cou¡îs
;

137 
xt_cou¡îs
 
__u£r
 *
	mcou¡îs
;

139 
¨±_íåy
 
	míåõs
[0];

142 
	#¨±_cou¡îs_öfo
 
xt_cou¡îs_öfo


	)

144 
	s¨±_gë_íåõs


147 
	m«me
[
ARPT_TABLE_MAXNAMELEN
];

149 
	msize
;

151 
¨±_íåy
 
	míåyèbÀ
[0];

154 
	#ARPT_STANDARD_TARGET
 
XT_STANDARD_TARGET


	)

156 
	#ARPT_ERROR_TARGET
 
XT_ERROR_TARGET


	)

158 
	#ARPT_ENTRY_ITERATE
(
íåõs
, 
size
, 
‚
, 
¨gs
...Ë({ 
__i
; 
__ªt
 = 0; 
¨±_íåy
 *
__íåy
; __ò0; __ò< (size); __ò+__íåy->
√xt_off£t
Ë{ __íåy = (*)”¡rõsË+ __i; __ªà
	`‚
(__íåy , ##árgs); i‡(__ªà!0Ë; } __ªt; })

	)

	@linux/netfilter_bridge.h

12 #i‚de‡
__LINUX_BRIDGE_NETFILTER_H


13 
	#__LINUX_BRIDGE_NETFILTER_H


	)

15 
	~<löux/√tfûãr.h
>

17 
	#NF_BR_PRE_ROUTING
 0

	)

19 
	#NF_BR_LOCAL_IN
 1

	)

21 
	#NF_BR_FORWARD
 2

	)

23 
	#NF_BR_LOCAL_OUT
 3

	)

25 
	#NF_BR_POST_ROUTING
 4

	)

27 
	#NF_BR_BROUTING
 5

	)

28 
	#NF_BR_NUMHOOKS
 6

	)

	@linux/netfilter_ipv4.h

12 #i‚de‡
__LINUX_IP_NETFILTER_H


13 
	#__LINUX_IP_NETFILTER_H


	)

15 
	~<löux/√tfûãr.h
>

17 
	#NFC_IP_SRC
 0x0001

	)

19 
	#NFC_IP_DST
 0x0002

	)

21 
	#NFC_IP_IF_IN
 0x0004

	)

23 
	#NFC_IP_IF_OUT
 0x0008

	)

25 
	#NFC_IP_TOS
 0x0010

	)

27 
	#NFC_IP_PROTO
 0x0020

	)

29 
	#NFC_IP_OPTIONS
 0x0040

	)

31 
	#NFC_IP_FRAG
 0x0080

	)

33 
	#NFC_IP_TCPFLAGS
 0x0100

	)

35 
	#NFC_IP_SRC_PT
 0x0200

	)

37 
	#NFC_IP_DST_PT
 0x0400

	)

39 
	#NFC_IP_PROTO_UNKNOWN
 0x2000

	)

41 
	#NF_IP_PRE_ROUTING
 0

	)

43 
	#NF_IP_LOCAL_IN
 1

	)

45 
	#NF_IP_FORWARD
 2

	)

47 
	#NF_IP_LOCAL_OUT
 3

	)

49 
	#NF_IP_POST_ROUTING
 4

	)

50 
	#NF_IP_NUMHOOKS
 5

	)

52 
	enf_ù_hook_¥i‹ôõs
 {

53 
	mNF_IP_PRI_FIRST
 = 
INT_MIN
,

54 
	mNF_IP_PRI_CONNTRACK_DEFRAG
 = -400,

55 
	mNF_IP_PRI_RAW
 = -300,

56 
	mNF_IP_PRI_SELINUX_FIRST
 = -225,

57 
	mNF_IP_PRI_CONNTRACK
 = -200,

58 
	mNF_IP_PRI_BRIDGE_SABOTAGE_FORWARD
 = -175,

59 
	mNF_IP_PRI_MANGLE
 = -150,

60 
	mNF_IP_PRI_NAT_DST
 = -100,

61 
	mNF_IP_PRI_BRIDGE_SABOTAGE_LOCAL_OUT
 = -50,

62 
	mNF_IP_PRI_FILTER
 = 0,

63 
	mNF_IP_PRI_NAT_SRC
 = 100,

64 
	mNF_IP_PRI_SELINUX_LAST
 = 225,

65 
	mNF_IP_PRI_CONNTRACK_HELPER
 = 
INT_MAX
 - 2,

66 
	mNF_IP_PRI_NAT_SEQ_ADJUST
 = 
INT_MAX
 - 1,

67 
	mNF_IP_PRI_CONNTRACK_CONFIRM
 = 
INT_MAX
,

68 
	mNF_IP_PRI_LAST
 = 
INT_MAX
,

71 
	#SO_ORIGINAL_DST
 80

	)

	@linux/netfilter_ipv4/ip_conntrack.h

12 #i‚de‡
_IP_CONNTRACK_H


13 
	#_IP_CONNTRACK_H


	)

15 
	~<löux/√tfûãr/nf_c⁄¡øck_comm⁄.h
>

	@linux/netfilter_ipv4/ip_conntrack_tuple.h

12 #i‚de‡
_IP_CONNTRACK_TUPLE_H


13 
	#_IP_CONNTRACK_TUPLE_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/√tfûãr/nf_c⁄¡øck_tu∂e_comm⁄.h
>

18 
	uù_c⁄¡øck_m™ù_¥Ÿo


21 
u_öt16_t
 
	mÆl
;

24 
__be16
 
	mp‹t
;

25 } 
	mt˝
;

27 
u_öt16_t
 
	mp‹t
;

28 } 
	mudp
;

30 
u_öt16_t
 
	mid
;

31 } 
	micmp
;

33 
u_öt16_t
 
	mp‹t
;

34 } 
	ms˘p
;

36 
__be16
 
	mkey
;

37 } 
	mgª
;

40 
	sù_c⁄¡øck_m™ù


42 
u_öt32_t
 
	mù
;

43 
ù_c⁄¡øck_m™ù_¥Ÿo
 
	mu
;

46 
	sù_c⁄¡øck_tu∂e


48 
ù_c⁄¡øck_m™ù
 
	m§c
;

51 
u_öt32_t
 
	mù
;

54 
u_öt16_t
 
	mÆl
;

57 
u_öt16_t
 
	mp‹t
;

58 } 
	mt˝
;

60 
u_öt16_t
 
	mp‹t
;

61 } 
	mudp
;

63 
u_öt8_t
 
	mty≥
, 
	mcode
;

64 } 
	micmp
;

66 
u_öt16_t
 
	mp‹t
;

67 } 
	ms˘p
;

69 
__be16
 
	mkey
;

70 } 
	mgª
;

71 } 
	mu
;

73 
u_öt8_t
 
	m¥Ÿ⁄um
;

75 
u_öt8_t
 
	mdú
;

76 } 
	md°
;

79 
	#IP_CT_TUPLE_U_BLANK
(
tu∂e
Ëdÿ{ (tu∂e)->
§c
.
u
.
Æl
 = 0; (tu∂e)->
d°
.u.Æ»0; } 0)

	)

	@linux/netfilter_ipv4/ip_nat.h

12 #i‚de‡
_IP_NAT_H


13 
	#_IP_NAT_H


	)

14 
	~<löux/√tfûãr_ùv4.h
>

15 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck_tu∂e.h
>

17 
	#IP_NAT_MAPPING_TYPE_MAX_NAMELEN
 16

	)

19 
	eù_«t_m™ù_ty≥


21 
	mIP_NAT_MANIP_SRC
,

22 
	mIP_NAT_MANIP_DST


25 
	#HOOK2MANIP
(
hooknum
Ë((hooknumË!
NF_IP_POST_ROUTING
 && (hooknumË!
NF_IP_LOCAL_IN
)

	)

27 
	#IP_NAT_RANGE_MAP_IPS
 1

	)

28 
	#IP_NAT_RANGE_PROTO_SPECIFIED
 2

	)

30 
	sù_«t_£q
 {

32 
u_öt32_t
 
	mc‹ª˘i⁄_pos
;

34 
öt16_t
 
	moff£t_bef‹e
, 
	moff£t_a·î
;

37 
	sù_«t_ønge


40 
	mÊags
;

42 
u_öt32_t
 
	mmö_ù
, 
	mmax_ù
;

44 
ù_c⁄¡øck_m™ù_¥Ÿo
 
	mmö
, 
	mmax
;

47 
	sù_«t_mu…i_ønge_com∑t


49 
	møngesize
;

51 
ù_«t_ønge
 
	mønge
[1];

54 
	#ù_«t_mu…i_ønge
 
ù_«t_mu…i_ønge_com∑t


	)

	@linux/netfilter_ipv4/ip_nat_rule.h

12 #i‚de‡
_IP_NAT_RULE_H


13 
	#_IP_NAT_RULE_H


	)

14 
	~<löux/√tfûãr_ùv4/ù_c⁄¡øck.h
>

15 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

16 
	~<löux/√tfûãr_ùv4/ù_«t.h
>

	@linux/netfilter_ipv4/ip_queue.h

12 #i‚de‡
_IP_QUEUE_H


13 
	#_IP_QUEUE_H


	)

15 
	~<√t/if.h
>

17 
	sùq_∑ckë_msg
 {

18 
	m∑ckë_id
;

19 
	mm¨k
;

20 
	mtime°amp_£c
;

21 
	mtime°amp_u£c
;

22 
	mhook
;

23 
	mödev_«me
[
IFNAMSIZ
];

24 
	moutdev_«me
[
IFNAMSIZ
];

25 
	mhw_¥Ÿocﬁ
;

26 
	mhw_ty≥
;

27 
	mhw_addæí
;

28 
	mhw_addr
[8];

29 
size_t
 
	md©a_Àn
;

30 
	m∑ylﬂd
[0];

31 } 
	tùq_∑ckë_msg_t
;

33 
	sùq_mode_msg
 {

34 
	mvÆue
;

35 
size_t
 
	mønge
;

36 } 
	tùq_mode_msg_t
;

38 
	sùq_vîdi˘_msg
 {

39 
	mvÆue
;

40 
	mid
;

41 
size_t
 
	md©a_Àn
;

42 
	m∑ylﬂd
[0];

43 } 
	tùq_vîdi˘_msg_t
;

45 
	sùq_≥î_msg
 {

47 
ùq_vîdi˘_msg_t
 
	mvîdi˘
;

48 
ùq_mode_msg_t
 
	mmode
;

49 } 
	mmsg
;

50 } 
	tùq_≥î_msg_t
;

53 
	mIPQ_COPY_NONE
,

54 
	mIPQ_COPY_META
,

55 
	mIPQ_COPY_PACKET


57 
	#IPQ_COPY_MAX
 
IPQ_COPY_PACKET


	)

59 
	#IPQM_BASE
 0x10

	)

60 
	#IPQM_MODE
 (
IPQM_BASE
 + 1)

	)

61 
	#IPQM_VERDICT
 (
IPQM_BASE
 + 2)

	)

62 
	#IPQM_PACKET
 (
IPQM_BASE
 + 3)

	)

63 
	#IPQM_MAX
 (
IPQM_BASE
 + 4)

	)

	@linux/netfilter_ipv4/ip_tables.h

12 #i‚de‡
_IPTABLES_H


13 
	#_IPTABLES_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/√tfûãr_ùv4.h
>

18 
	~<löux/√tfûãr/x_èbÀs.h
>

20 
	#IPT_FUNCTION_MAXNAMELEN
 
XT_FUNCTION_MAXNAMELEN


	)

21 
	#IPT_TABLE_MAXNAMELEN
 
XT_FUNCTION_MAXNAMELEN


	)

22 
	#ùt_m©ch
 
xt_m©ch


	)

23 
	#ùt_èrgë
 
xt_èrgë


	)

24 
	#ùt_èbÀ
 
xt_èbÀ


	)

25 
	#ùt_gë_ªvisi⁄
 
xt_gë_ªvisi⁄


	)

27 
	sùt_ù
 {

29 
ö_addr
 
	m§c
, 
	md°
;

31 
ö_addr
 
	msmsk
, 
	mdmsk
;

32 
	möiÁ˚
[
IFNAMSIZ
], 
	moutiÁ˚
[IFNAMSIZ];

33 
	möiÁ˚_mask
[
IFNAMSIZ
], 
	moutiÁ˚_mask
[IFNAMSIZ];

35 
u_öt16_t
 
	m¥Ÿo
;

37 
u_öt8_t
 
	mÊags
;

39 
u_öt8_t
 
	mövÊags
;

42 
	#ùt_íåy_m©ch
 
xt_íåy_m©ch


	)

43 
	#ùt_íåy_èrgë
 
xt_íåy_èrgë


	)

44 
	#ùt_°™d¨d_èrgë
 
xt_°™d¨d_èrgë


	)

46 
	#ùt_cou¡îs
 
xt_cou¡îs


	)

48 
	#IPT_F_FRAG
 0x01

	)

49 
	#IPT_F_GOTO
 0x02

	)

50 
	#IPT_F_MASK
 0x03

	)

52 
	#IPT_INV_VIA_IN
 0x01

	)

53 
	#IPT_INV_VIA_OUT
 0x02

	)

54 
	#IPT_INV_TOS
 0x04

	)

55 
	#IPT_INV_SRCIP
 0x08

	)

56 
	#IPT_INV_DSTIP
 0x10

	)

57 
	#IPT_INV_FRAG
 0x20

	)

58 
	#IPT_INV_PROTO
 
XT_INV_PROTO


	)

59 
	#IPT_INV_MASK
 0x7F

	)

61 
	sùt_íåy


63 
ùt_ù
 
	mù
;

65 
	mnfˇche
;

67 
u_öt16_t
 
	mèrgë_off£t
;

69 
u_öt16_t
 
	m√xt_off£t
;

71 
	mcome‰om
;

73 
xt_cou¡îs
 
	mcou¡îs
;

75 
	mñems
[0];

78 
	#IPT_BASE_CTL
 
XT_BASE_CTL


	)

80 
	#IPT_SO_SET_REPLACE
 
XT_SO_SET_REPLACE


	)

81 
	#IPT_SO_SET_ADD_COUNTERS
 
XT_SO_SET_ADD_COUNTERS


	)

82 
	#IPT_SO_SET_MAX
 
XT_SO_SET_MAX


	)

84 
	#IPT_SO_GET_INFO
 
XT_SO_GET_INFO


	)

85 
	#IPT_SO_GET_ENTRIES
 
XT_SO_GET_ENTRIES


	)

86 
	#IPT_SO_GET_REVISION_MATCH
 
XT_SO_GET_REVISION_MATCH


	)

87 
	#IPT_SO_GET_REVISION_TARGET
 
XT_SO_GET_REVISION_TARGET


	)

88 
	#IPT_SO_GET_MAX
 
XT_SO_GET_REVISION_TARGET


	)

90 
	#IPT_CONTINUE
 
XT_CONTINUE


	)

91 
	#IPT_RETURN
 
XT_RETURN


	)

93 
	~<löux/√tfûãr/xt_t˝udp.h
>

94 
	#ùt_udp
 
xt_udp


	)

95 
	#ùt_t˝
 
xt_t˝


	)

97 
	#IPT_TCP_INV_SRCPT
 
XT_TCP_INV_SRCPT


	)

98 
	#IPT_TCP_INV_DSTPT
 
XT_TCP_INV_DSTPT


	)

99 
	#IPT_TCP_INV_FLAGS
 
XT_TCP_INV_FLAGS


	)

100 
	#IPT_TCP_INV_OPTION
 
XT_TCP_INV_OPTION


	)

101 
	#IPT_TCP_INV_MASK
 
XT_TCP_INV_MASK


	)

103 
	#IPT_UDP_INV_SRCPT
 
XT_UDP_INV_SRCPT


	)

104 
	#IPT_UDP_INV_DSTPT
 
XT_UDP_INV_DSTPT


	)

105 
	#IPT_UDP_INV_MASK
 
XT_UDP_INV_MASK


	)

107 
	sùt_icmp


109 
u_öt8_t
 
	mty≥
;

110 
u_öt8_t
 
	mcode
[2];

111 
u_öt8_t
 
	mövÊags
;

114 
	#IPT_ICMP_INV
 0x01

	)

116 
	sùt_gëöfo


119 
	m«me
[
IPT_TABLE_MAXNAMELEN
];

121 
	mvÆid_hooks
;

123 
	mhook_íåy
[
NF_IP_NUMHOOKS
];

125 
	mundîÊow
[
NF_IP_NUMHOOKS
];

127 
	mnum_íåõs
;

129 
	msize
;

132 
	sùt_ª∂a˚


135 
	m«me
[
IPT_TABLE_MAXNAMELEN
];

137 
	mvÆid_hooks
;

139 
	mnum_íåõs
;

141 
	msize
;

143 
	mhook_íåy
[
NF_IP_NUMHOOKS
];

145 
	mundîÊow
[
NF_IP_NUMHOOKS
];

147 
	mnum_cou¡îs
;

149 
xt_cou¡îs
 
__u£r
 *
	mcou¡îs
;

151 
ùt_íåy
 
	míåõs
[0];

154 
	#ùt_cou¡îs_öfo
 
xt_cou¡îs_öfo


	)

156 
	sùt_gë_íåõs


159 
	m«me
[
IPT_TABLE_MAXNAMELEN
];

161 
	msize
;

163 
ùt_íåy
 
	míåyèbÀ
[0];

166 
	#IPT_STANDARD_TARGET
 
XT_STANDARD_TARGET


	)

168 
	#IPT_ERROR_TARGET
 
XT_ERROR_TARGET


	)

170 
__ölöe__
 
ùt_íåy_èrgë
 *

171 
	$ùt_gë_èrgë
(
ùt_íåy
 *
e
)

173  (*)
e
 +É->
èrgë_off£t
;

174 
	}
}

176 
	#IPT_MATCH_ITERATE
(
e
, 
‚
, 
¨gs
...Ë({ 
__i
; 
__ªt
 = 0; 
ùt_íåy_m©ch
 *
__m©ch
; __ò(
ùt_íåy
); __ò< (e)->
èrgë_off£t
; __ò+__m©ch->
u
.
m©ch_size
Ë{ __m©ch = (*)”Ë+ __i; __ªà
	`‚
(__m©ch , ##árgs); i‡(__ªà!0Ë; } __ªt; })

	)

178 
	#IPT_ENTRY_ITERATE
(
íåõs
, 
size
, 
‚
, 
¨gs
...Ë({ 
__i
; 
__ªt
 = 0; 
ùt_íåy
 *
__íåy
; __ò0; __ò< (size); __ò+__íåy->
√xt_off£t
Ë{ __íåy = (*)”¡rõsË+ __i; __ªà
	`‚
(__íåy , ##árgs); i‡(__ªà!0Ë; } __ªt; })

	)

	@linux/netfilter_ipv4/ipt_CLASSIFY.h

12 #i‚de‡
_IPT_CLASSIFY_H


13 
	#_IPT_CLASSIFY_H


	)

15 
	~<löux/√tfûãr/xt_CLASSIFY.h
>

16 
	#ùt_˛assify_èrgë_öfo
 
xt_˛assify_èrgë_öfo


	)

	@linux/netfilter_ipv4/ipt_DSCP.h

12 #i‚de‡
_IPT_DSCP_TARGET_H


13 
	#_IPT_DSCP_TARGET_H


	)

14 
	~<löux/√tfûãr_ùv4/ùt_ds˝.h
>

16 
	sùt_DSCP_öfo
 {

17 
u_öt8_t
 
	mds˝
;

	@linux/netfilter_ipv4/ipt_ECN.h

12 #i‚de‡
_IPT_ECN_TARGET_H


13 
	#_IPT_ECN_TARGET_H


	)

14 
	~<löux/√tfûãr_ùv4/ùt_DSCP.h
>

16 
	#IPT_ECN_IP_MASK
 (~
IPT_DSCP_MASK
)

	)

18 
	#IPT_ECN_OP_SET_IP
 0x01

	)

19 
	#IPT_ECN_OP_SET_ECE
 0x10

	)

20 
	#IPT_ECN_OP_SET_CWR
 0x20

	)

22 
	#IPT_ECN_OP_MASK
 0x˚

	)

24 
	sùt_ECN_öfo
 {

25 
u_öt8_t
 
	m›î©i⁄
;

26 
u_öt8_t
 
	mù_e˘
;

29 
u_öt8_t
 
	me˚
:1, 
	mcwr
:1;

30 } 
	mt˝
;

31 } 
	m¥Ÿo
;

	@linux/netfilter_ipv4/ipt_LOG.h

12 #i‚de‡
_IPT_LOG_H


13 
	#_IPT_LOG_H


	)

15 
	#IPT_LOG_TCPSEQ
 0x01

	)

16 
	#IPT_LOG_TCPOPT
 0x02

	)

17 
	#IPT_LOG_IPOPT
 0x04

	)

18 
	#IPT_LOG_UID
 0x08

	)

19 
	#IPT_LOG_NFLOG
 0x10

	)

20 
	#IPT_LOG_MASK
 0x1f

	)

22 
	sùt_log_öfo
 {

23 
	mÀvñ
;

24 
	mlogÊags
;

25 
	m¥efix
[30];

	@linux/netfilter_ipv4/ipt_NFQUEUE.h

12 #i‚de‡
_IPT_NFQ_TARGET_H


13 
	#_IPT_NFQ_TARGET_H


	)

15 
	~<löux/√tfûãr/xt_NFQUEUE.h
>

17 
	#ùt_NFQ_öfo
 
xt_NFQ_öfo


	)

	@linux/netfilter_ipv4/ipt_REJECT.h

12 #i‚de‡
_IPT_REJECT_H


13 
	#_IPT_REJECT_H


	)

15 
	eùt_ªje˘_wôh
 {

16 
	mIPT_ICMP_NET_UNREACHABLE
,

17 
	mIPT_ICMP_HOST_UNREACHABLE
,

18 
	mIPT_ICMP_PROT_UNREACHABLE
,

19 
	mIPT_ICMP_PORT_UNREACHABLE
,

20 
	mIPT_ICMP_ECHOREPLY
,

21 
	mIPT_ICMP_NET_PROHIBITED
,

22 
	mIPT_ICMP_HOST_PROHIBITED
,

23 
	mIPT_TCP_RESET
,

24 
	mIPT_ICMP_ADMIN_PROHIBITED


27 
	sùt_ªje˘_öfo
 {

28 
ùt_ªje˘_wôh
 
	mwôh
;

	@linux/netfilter_ipv4/ipt_TCPMSS.h

12 #i‚de‡
_IPT_TCPMSS_H


13 
	#_IPT_TCPMSS_H


	)

15 
	sùt_t˝mss_öfo
 {

16 
u_öt16_t
 
	mmss
;

19 
	#IPT_TCPMSS_CLAMP_PMTU
 0xffff

	)

	@linux/netfilter_ipv4/ipt_TOS.h

12 #i‚de‡
_IPT_TOS_H_èrgë


13 
	#_IPT_TOS_H_èrgë


	)

15 #i‚de‡
IPTOS_NORMALSVC


16 
	#IPTOS_NORMALSVC
 0

	)

19 
	sùt_tos_èrgë_öfo
 {

20 
u_öt8_t
 
	mtos
;

	@linux/netfilter_ipv4/ipt_TTL.h

12 #i‚de‡
_IPT_TTL_H


13 
	#_IPT_TTL_H


	)

16 
	mIPT_TTL_SET
 = 0,

17 
	mIPT_TTL_INC
,

18 
	mIPT_TTL_DEC


21 
	#IPT_TTL_MAXMODE
 
IPT_TTL_DEC


	)

23 
	sùt_TTL_öfo
 {

24 
u_öt8_t
 
	mmode
;

25 
u_öt8_t
 
	mâl
;

	@linux/netfilter_ipv4/ipt_ULOG.h

12 #i‚de‡
_IPT_ULOG_H


13 
	#_IPT_ULOG_H


	)

15 #i‚de‡
NETLINK_NFLOG


16 
	#NETLINK_NFLOG
 5

	)

19 
	#ULOG_DEFAULT_NLGROUP
 1

	)

20 
	#ULOG_DEFAULT_QTHRESHOLD
 1

	)

22 
	#ULOG_MAC_LEN
 80

	)

23 
	#ULOG_PREFIX_LEN
 32

	)

25 
	#ULOG_MAX_QLEN
 50

	)

27 
	sùt_ulog_öfo
 {

28 
	m∆_group
;

29 
size_t
 
	mc›y_ønge
;

30 
size_t
 
	mqthªshﬁd
;

31 
	m¥efix
[
ULOG_PREFIX_LEN
];

34 
	sulog_∑ckë_msg
 {

35 
	mm¨k
;

36 
	mtime°amp_£c
;

37 
	mtime°amp_u£c
;

38 
	mhook
;

39 
	mödev_«me
[
IFNAMSIZ
];

40 
	moutdev_«me
[
IFNAMSIZ
];

41 
size_t
 
	md©a_Àn
;

42 
	m¥efix
[
ULOG_PREFIX_LEN
];

43 
	mmac_Àn
;

44 
	mmac
[
ULOG_MAC_LEN
];

45 
	m∑ylﬂd
[0];

46 } 
	tulog_∑ckë_msg_t
;

	@linux/netfilter_ipv4/ipt_addrtype.h

12 #i‚de‡
_IPT_ADDRTYPE_H


13 
	#_IPT_ADDRTYPE_H


	)

15 
	sùt_addπy≥_öfo
 {

16 
u_öt16_t
 
	msour˚
;

17 
u_öt16_t
 
	mde°
;

18 
u_öt32_t
 
	mövît_sour˚
;

19 
u_öt32_t
 
	mövît_de°
;

	@linux/netfilter_ipv4/ipt_ah.h

12 #i‚de‡
_IPT_AH_H


13 
	#_IPT_AH_H


	)

15 
	sùt_ah


17 
u_öt32_t
 
	m•is
[2];

18 
u_öt8_t
 
	mövÊags
;

21 
	#IPT_AH_INV_SPI
 0x01

	)

22 
	#IPT_AH_INV_MASK
 0x01

	)

	@linux/netfilter_ipv4/ipt_comment.h

12 #i‚de‡
_IPT_COMMENT_H


13 
	#_IPT_COMMENT_H


	)

15 
	~<löux/√tfûãr/xt_commít.h
>

17 
	#IPT_MAX_COMMENT_LEN
 
XT_MAX_COMMENT_LEN


	)

19 
	#ùt_commít_öfo
 
xt_commít_öfo


	)

	@linux/netfilter_ipv4/ipt_connbytes.h

12 #i‚de‡
_IPT_CONNBYTES_H


13 
	#_IPT_CONNBYTES_H


	)

15 
	~<löux/√tfûãr/xt_c⁄nbyãs.h
>

16 
	#ùt_c⁄nbyãs_wh©
 
xt_c⁄nbyãs_wh©


	)

18 
	#IPT_CONNBYTES_PKTS
 
XT_CONNBYTES_PKTS


	)

19 
	#IPT_CONNBYTES_BYTES
 
XT_CONNBYTES_BYTES


	)

20 
	#IPT_CONNBYTES_AVGPKT
 
XT_CONNBYTES_AVGPKT


	)

22 
	#ùt_c⁄nbyãs_dúe˘i⁄
 
xt_c⁄nbyãs_dúe˘i⁄


	)

23 
	#IPT_CONNBYTES_DIR_ORIGINAL
 
XT_CONNBYTES_DIR_ORIGINAL


	)

24 
	#IPT_CONNBYTES_DIR_REPLY
 
XT_CONNBYTES_DIR_REPLY


	)

25 
	#IPT_CONNBYTES_DIR_BOTH
 
XT_CONNBYTES_DIR_BOTH


	)

27 
	#ùt_c⁄nbyãs_öfo
 
xt_c⁄nbyãs_öfo


	)

	@linux/netfilter_ipv4/ipt_dccp.h

12 #i‚de‡
_IPT_DCCP_H_


13 
	#_IPT_DCCP_H_


	)

15 
	~<löux/√tfûãr/xt_dc˝.h
>

16 
	#IPT_DCCP_SRC_PORTS
 
XT_DCCP_SRC_PORTS


	)

17 
	#IPT_DCCP_DEST_PORTS
 
XT_DCCP_DEST_PORTS


	)

18 
	#IPT_DCCP_TYPE
 
XT_DCCP_TYPE


	)

19 
	#IPT_DCCP_OPTION
 
XT_DCCP_OPTION


	)

21 
	#IPT_DCCP_VALID_FLAGS
 
XT_DCCP_VALID_FLAGS


	)

23 
	#ùt_dc˝_öfo
 
xt_dc˝_öfo


	)

	@linux/netfilter_ipv4/ipt_dscp_.h

12 #i‚de‡
_IPT_DSCP_H


13 
	#_IPT_DSCP_H


	)

15 
	#IPT_DSCP_MASK
 0xfc

	)

16 
	#IPT_DSCP_SHIFT
 2

	)

17 
	#IPT_DSCP_MAX
 0x3f

	)

19 
	sùt_ds˝_öfo
 {

20 
u_öt8_t
 
	mds˝
;

21 
u_öt8_t
 
	mövît
;

	@linux/netfilter_ipv4/ipt_esp.h

12 #i‚de‡
_IPT_ESP_H


13 
	#_IPT_ESP_H


	)

15 
	~<löux/√tfûãr/xt_e•.h
>

17 
	#ùt_e•
 
xt_e•


	)

18 
	#IPT_ESP_INV_SPI
 
XT_ESP_INV_SPI


	)

19 
	#IPT_ESP_INV_MASK
 
XT_ESP_INV_MASK


	)

	@linux/netfilter_ipv4/ipt_hashlimit.h

12 #i‚de‡
_IPT_HASHLIMIT_H


13 
	#_IPT_HASHLIMIT_H


	)

15 
	#IPT_HASHLIMIT_SCALE
 10000

	)

17 
	gùt_hashlimô_hèbÀ
;

19 
	#IPT_HASHLIMIT_HASH_DIP
 0x0001

	)

20 
	#IPT_HASHLIMIT_HASH_DPT
 0x0002

	)

21 
	#IPT_HASHLIMIT_HASH_SIP
 0x0004

	)

22 
	#IPT_HASHLIMIT_HASH_SPT
 0x0008

	)

24 
	shashlimô_cfg
 {

25 
u_öt32_t
 
	mmode
;

26 
u_öt32_t
 
	mavg
;

27 
u_öt32_t
 
	mbur°
;

29 
u_öt32_t
 
	msize
;

30 
u_öt32_t
 
	mmax
;

31 
u_öt32_t
 
	mgc_öãrvÆ
;

32 
u_öt32_t
 
	mexpúe
;

35 
	sùt_hashlimô_öfo
 {

36 
	m«me
 [
IFNAMSIZ
];

37 
hashlimô_cfg
 
	mcfg
;

38 
ùt_hashlimô_hèbÀ
 *
	mhöfo
;

41 *
	m±r
;

42 
ùt_hashlimô_öfo
 *
	mma°î
;

43 } 
	mu
;

	@linux/netfilter_ipv4/ipt_helper.h

12 #i‚de‡
_IPT_HELPER_H


13 
	#_IPT_HELPER_H


	)

15 
	~<löux/√tfûãr/xt_hñ≥r.h
>

16 
	#ùt_hñ≥r_öfo
 
xt_hñ≥r_öfo


	)

	@linux/netfilter_ipv4/ipt_iprange.h

12 #i‚de‡
_IPT_IPRANGE_H


13 
	#_IPT_IPRANGE_H


	)

15 
	#IPRANGE_SRC
 0x01

	)

16 
	#IPRANGE_DST
 0x02

	)

17 
	#IPRANGE_SRC_INV
 0x10

	)

18 
	#IPRANGE_DST_INV
 0x20

	)

20 
	sùt_ùønge
 {

22 
u_öt32_t
 
	mmö_ù
, 
	mmax_ù
;

25 
	sùt_ùønge_öfo


27 
ùt_ùønge
 
	m§c
;

28 
ùt_ùønge
 
	md°
;

30 
u_öt8_t
 
	mÊags
;

	@linux/netfilter_ipv4/ipt_length.h

12 #i‚de‡
_IPT_LENGTH_H


13 
	#_IPT_LENGTH_H


	)

15 
	~<löux/√tfûãr/xt_Àngth.h
>

16 
	#ùt_Àngth_öfo
 
xt_Àngth_öfo


	)

	@linux/netfilter_ipv4/ipt_mac.h

12 #i‚de‡
_IPT_MAC_H


13 
	#_IPT_MAC_H


	)

15 
	~<löux/√tfûãr/xt_mac.h
>

16 
	#ùt_mac_öfo
 
xt_mac_öfo


	)

	@linux/netfilter_ipv4/ipt_owner.h

12 #i‚de‡
_IPT_OWNER_H


13 
	#_IPT_OWNER_H


	)

15 
	#IPT_OWNER_UID
 0x01

	)

16 
	#IPT_OWNER_GID
 0x02

	)

17 
	#IPT_OWNER_PID
 0x04

	)

18 
	#IPT_OWNER_SID
 0x08

	)

19 
	#IPT_OWNER_COMM
 0x10

	)

21 
	sùt_ow√r_öfo
 {

22 
uid_t
 
	muid
;

23 
gid_t
 
	mgid
;

24 
pid_t
 
	mpid
;

25 
pid_t
 
	msid
;

26 
	mcomm
[16];

27 
u_öt8_t
 
	mm©ch
, 
	mövît
;

	@linux/netfilter_ipv4/ipt_physdev.h

12 #i‚de‡
_IPT_PHYSDEV_H


13 
	#_IPT_PHYSDEV_H


	)

15 
	~<löux/√tfûãr/xt_physdev.h
>

17 
	#IPT_PHYSDEV_OP_IN
 
XT_PHYSDEV_OP_IN


	)

18 
	#IPT_PHYSDEV_OP_OUT
 
XT_PHYSDEV_OP_OUT


	)

19 
	#IPT_PHYSDEV_OP_BRIDGED
 
XT_PHYSDEV_OP_BRIDGED


	)

20 
	#IPT_PHYSDEV_OP_ISIN
 
XT_PHYSDEV_OP_ISIN


	)

21 
	#IPT_PHYSDEV_OP_ISOUT
 
XT_PHYSDEV_OP_ISOUT


	)

22 
	#IPT_PHYSDEV_OP_MASK
 
XT_PHYSDEV_OP_MASK


	)

24 
	#ùt_physdev_öfo
 
xt_physdev_öfo


	)

	@linux/netfilter_ipv4/ipt_pkttype.h

12 #i‚de‡
_IPT_PKTTYPE_H


13 
	#_IPT_PKTTYPE_H


	)

15 
	~<löux/√tfûãr/xt_pkây≥.h
>

16 
	#ùt_pkây≥_öfo
 
xt_pkây≥_öfo


	)

	@linux/netfilter_ipv4/ipt_realm.h

12 #i‚de‡
_IPT_REALM_H


13 
	#_IPT_REALM_H


	)

15 
	~<löux/√tfûãr/xt_ªÆm.h
>

16 
	#ùt_ªÆm_öfo
 
xt_ªÆm_öfo


	)

	@linux/netfilter_ipv4/ipt_recent.h

12 #i‚de‡
_IPT_RECENT_H


13 
	#_IPT_RECENT_H


	)

15 
	#RECENT_NAME
 "ùt_ª˚¡"

	)

16 
	#RECENT_VER
 "v0.3.1"

	)

18 
	#IPT_RECENT_CHECK
 1

	)

19 
	#IPT_RECENT_SET
 2

	)

20 
	#IPT_RECENT_UPDATE
 4

	)

21 
	#IPT_RECENT_REMOVE
 8

	)

22 
	#IPT_RECENT_TTL
 16

	)

24 
	#IPT_RECENT_SOURCE
 0

	)

25 
	#IPT_RECENT_DEST
 1

	)

27 
	#IPT_RECENT_NAME_LEN
 200

	)

29 
	sùt_ª˚¡_öfo
 {

30 
u_öt32_t
 
	m£c⁄ds
;

31 
u_öt32_t
 
	mhô_cou¡
;

32 
u_öt8_t
 
	mcheck_£t
;

33 
u_öt8_t
 
	mövît
;

34 
	m«me
[
IPT_RECENT_NAME_LEN
];

35 
u_öt8_t
 
	mside
;

	@linux/netfilter_ipv4/ipt_sctp.h

12 #i‚de‡
_IPT_SCTP_H_


13 
	#_IPT_SCTP_H_


	)

15 
	#IPT_SCTP_SRC_PORTS
 0x01

	)

16 
	#IPT_SCTP_DEST_PORTS
 0x02

	)

17 
	#IPT_SCTP_CHUNK_TYPES
 0x04

	)

19 
	#IPT_SCTP_VALID_FLAGS
 0x07

	)

21 
	sùt_s˘p_Êag_öfo
 {

22 
u_öt8_t
 
	mchunkty≥
;

23 
u_öt8_t
 
	mÊag
;

24 
u_öt8_t
 
	mÊag_mask
;

27 
	#IPT_NUM_SCTP_FLAGS
 4

	)

29 
	sùt_s˘p_öfo
 {

30 
u_öt16_t
 
	md±s
[2];

31 
u_öt16_t
 
	m•ts
[2];

33 
u_öt32_t
 
	mchunkm≠
[256 /  (u_int32_t)];

35 
	#SCTP_CHUNK_MATCH_ANY
 0x01

	)

36 
	#SCTP_CHUNK_MATCH_ALL
 0x02

	)

37 
	#SCTP_CHUNK_MATCH_ONLY
 0x04

	)

39 
u_öt32_t
 
	mchunk_m©ch_ty≥
;

40 
ùt_s˘p_Êag_öfo
 
	mÊag_öfo
[
IPT_NUM_SCTP_FLAGS
];

41 
	mÊag_cou¡
;

43 
u_öt32_t
 
	mÊags
;

44 
u_öt32_t
 
	mövÊags
;

47 
	#byãs
(
ty≥
Ë(—y≥Ë* 8)

	)

49 
	#SCTP_CHUNKMAP_SET
(
chunkm≠
, 
ty≥
Ëdÿ{ chunkm≠[ty≥ / 
	`byãs
(
u_öt32_t
)] |1 << (ty≥ % byãs(u_öt32_t)); } 0)

	)

51 
	#SCTP_CHUNKMAP_CLEAR
(
chunkm≠
, 
ty≥
Ëdÿ{ chunkm≠[ty≥ / 
	`byãs
(
u_öt32_t
)] &~(1 << (ty≥ % byãs(u_öt32_t))); } 0)

	)

53 
	#SCTP_CHUNKMAP_IS_SET
(
chunkm≠
, 
ty≥
Ë({ (chunkm≠[ty≥ / 
	`byãs
 (
u_öt32_t
)] & (1 << (ty≥ % byã†(u_öt32_t)))Ë? 1: 0; })

	)

55 
	#SCTP_CHUNKMAP_RESET
(
chunkm≠
Ëdÿ{ 
i
; ò0; i < 
	`ARRAY_SIZE
(chunkm≠); i++Ëchunkm≠[i] = 0; } 0)

	)

57 
	#SCTP_CHUNKMAP_SET_ALL
(
chunkm≠
Ëdÿ{ 
i
; ò0; i < 
	`ARRAY_SIZE
(chunkm≠); i++Ëchunkm≠[i] = ~0; } 0)

	)

59 
	#SCTP_CHUNKMAP_COPY
(
de°m≠
, 
§cm≠
Ëdÿ{ 
i
; ò0; i < 
	`ARRAY_SIZE
(
chunkm≠
); i++Ëde°m≠[i] = srcm≠[i]; } 0)

	)

61 
	#SCTP_CHUNKMAP_IS_CLEAR
(
chunkm≠
Ë({ 
i
; 
Êag
 = 1; ò0; i < 
	`ARRAY_SIZE
(chunkm≠); i++Ë{ i‡(chunkm≠[i]Ë{ fœg = 0; ; } } fœg; })

	)

63 
	#SCTP_CHUNKMAP_IS_ALL_SET
(
chunkm≠
Ë({ 
i
; 
Êag
 = 1; ò0; i < 
	`ARRAY_SIZE
(chunkm≠); i++Ë{ i‡(chunkm≠[i] !~0Ë{ fœg = 0; ; } } fœg; })

	)

	@linux/netfilter_ipv4/ipt_state.h

12 #i‚de‡
_IPT_STATE_H


13 
	#_IPT_STATE_H


	)

15 
	~<löux/√tfûãr/xt_°©e.h
>

17 
	#IPT_STATE_BIT
 
XT_STATE_BIT


	)

18 
	#IPT_STATE_INVALID
 
XT_STATE_INVALID


	)

20 
	#IPT_STATE_UNTRACKED
 
XT_STATE_UNTRACKED


	)

22 
	#ùt_°©e_öfo
 
xt_°©e_öfo


	)

	@linux/netfilter_ipv4/ipt_string.h

12 #i‚de‡
_IPT_STRING_H


13 
	#_IPT_STRING_H


	)

15 
	~<löux/√tfûãr/xt_°rög.h
>

17 
	#IPT_STRING_MAX_PATTERN_SIZE
 
XT_STRING_MAX_PATTERN_SIZE


	)

18 
	#IPT_STRING_MAX_ALGO_NAME_SIZE
 
XT_STRING_MAX_ALGO_NAME_SIZE


	)

19 
	#ùt_°rög_öfo
 
xt_°rög_öfo


	)

	@linux/netfilter_ipv4/ipt_tos_.h

12 #i‚de‡
_IPT_TOS_H


13 
	#_IPT_TOS_H


	)

15 
	sùt_tos_öfo
 {

16 
u_öt8_t
 
	mtos
;

17 
u_öt8_t
 
	mövît
;

20 #i‚de‡
IPTOS_NORMALSVC


21 
	#IPTOS_NORMALSVC
 0

	)

	@linux/netfilter_ipv6.h

12 #i‚de‡
__LINUX_IP6_NETFILTER_H


13 
	#__LINUX_IP6_NETFILTER_H


	)

15 
	~<löux/√tfûãr.h
>

17 
	#NFC_IP6_SRC
 0x0001

	)

19 
	#NFC_IP6_DST
 0x0002

	)

21 
	#NFC_IP6_IF_IN
 0x0004

	)

23 
	#NFC_IP6_IF_OUT
 0x0008

	)

25 
	#NFC_IP6_TOS
 0x0010

	)

27 
	#NFC_IP6_PROTO
 0x0020

	)

29 
	#NFC_IP6_OPTIONS
 0x0040

	)

31 
	#NFC_IP6_FRAG
 0x0080

	)

33 
	#NFC_IP6_TCPFLAGS
 0x0100

	)

35 
	#NFC_IP6_SRC_PT
 0x0200

	)

37 
	#NFC_IP6_DST_PT
 0x0400

	)

39 
	#NFC_IP6_PROTO_UNKNOWN
 0x2000

	)

41 
	#NF_IP6_PRE_ROUTING
 0

	)

43 
	#NF_IP6_LOCAL_IN
 1

	)

45 
	#NF_IP6_FORWARD
 2

	)

47 
	#NF_IP6_LOCAL_OUT
 3

	)

49 
	#NF_IP6_POST_ROUTING
 4

	)

50 
	#NF_IP6_NUMHOOKS
 5

	)

52 
	enf_ù6_hook_¥i‹ôõs
 {

53 
	mNF_IP6_PRI_FIRST
 = 
INT_MIN
,

54 
	mNF_IP6_PRI_CONNTRACK_DEFRAG
 = -400,

55 
	mNF_IP6_PRI_SELINUX_FIRST
 = -225,

56 
	mNF_IP6_PRI_CONNTRACK
 = -200,

57 
	mNF_IP6_PRI_BRIDGE_SABOTAGE_FORWARD
 = -175,

58 
	mNF_IP6_PRI_MANGLE
 = -150,

59 
	mNF_IP6_PRI_NAT_DST
 = -100,

60 
	mNF_IP6_PRI_BRIDGE_SABOTAGE_LOCAL_OUT
 = -50,

61 
	mNF_IP6_PRI_FILTER
 = 0,

62 
	mNF_IP6_PRI_NAT_SRC
 = 100,

63 
	mNF_IP6_PRI_SELINUX_LAST
 = 225,

64 
	mNF_IP6_PRI_LAST
 = 
INT_MAX
,

	@linux/netfilter_ipv6/ip6_tables.h

12 #i‚de‡
_IP6_TABLES_H


13 
	#_IP6_TABLES_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/√tfûãr_ùv6.h
>

18 
	~<löux/√tfûãr/x_èbÀs.h
>

20 
	#IP6T_FUNCTION_MAXNAMELEN
 
XT_FUNCTION_MAXNAMELEN


	)

21 
	#IP6T_TABLE_MAXNAMELEN
 
XT_TABLE_MAXNAMELEN


	)

23 
	#ù6t_m©ch
 
xt_m©ch


	)

24 
	#ù6t_èrgë
 
xt_èrgë


	)

25 
	#ù6t_èbÀ
 
xt_èbÀ


	)

26 
	#ù6t_gë_ªvisi⁄
 
xt_gë_ªvisi⁄


	)

28 
	sù6t_ù6
 {

30 
ö6_addr
 
	m§c
, 
	md°
;

32 
ö6_addr
 
	msmsk
, 
	mdmsk
;

33 
	möiÁ˚
[
IFNAMSIZ
], 
	moutiÁ˚
[IFNAMSIZ];

34 
	möiÁ˚_mask
[
IFNAMSIZ
], 
	moutiÁ˚_mask
[IFNAMSIZ];

36 
u_öt16_t
 
	m¥Ÿo
;

38 
u_öt8_t
 
	mtos
;

40 
u_öt8_t
 
	mÊags
;

42 
u_öt8_t
 
	mövÊags
;

45 
	#ù6t_íåy_m©ch
 
xt_íåy_m©ch


	)

46 
	#ù6t_íåy_èrgë
 
xt_íåy_èrgë


	)

47 
	#ù6t_°™d¨d_èrgë
 
xt_°™d¨d_èrgë


	)

49 
	#ù6t_cou¡îs
 
xt_cou¡îs


	)

51 
	#IP6T_F_PROTO
 0x01

	)

52 
	#IP6T_F_TOS
 0x02

	)

53 
	#IP6T_F_GOTO
 0x04

	)

54 
	#IP6T_F_MASK
 0x07

	)

56 
	#IP6T_INV_VIA_IN
 0x01

	)

57 
	#IP6T_INV_VIA_OUT
 0x02

	)

58 
	#IP6T_INV_TOS
 0x04

	)

59 
	#IP6T_INV_SRCIP
 0x08

	)

60 
	#IP6T_INV_DSTIP
 0x10

	)

61 
	#IP6T_INV_FRAG
 0x20

	)

62 
	#IP6T_INV_PROTO
 
XT_INV_PROTO


	)

63 
	#IP6T_INV_MASK
 0x7F

	)

65 
	sù6t_íåy


67 
ù6t_ù6
 
	mùv6
;

69 
	mnfˇche
;

71 
u_öt16_t
 
	mèrgë_off£t
;

73 
u_öt16_t
 
	m√xt_off£t
;

75 
	mcome‰om
;

77 
xt_cou¡îs
 
	mcou¡îs
;

79 
	mñems
[0];

82 
	#IP6T_BASE_CTL
 
XT_BASE_CTL


	)

84 
	#IP6T_SO_SET_REPLACE
 
XT_SO_SET_REPLACE


	)

85 
	#IP6T_SO_SET_ADD_COUNTERS
 
XT_SO_SET_ADD_COUNTERS


	)

86 
	#IP6T_SO_SET_MAX
 
XT_SO_SET_MAX


	)

88 
	#IP6T_SO_GET_INFO
 
XT_SO_GET_INFO


	)

89 
	#IP6T_SO_GET_ENTRIES
 
XT_SO_GET_ENTRIES


	)

90 
	#IP6T_SO_GET_REVISION_MATCH
 
XT_SO_GET_REVISION_MATCH


	)

91 
	#IP6T_SO_GET_REVISION_TARGET
 
XT_SO_GET_REVISION_TARGET


	)

92 
	#IP6T_SO_GET_MAX
 
XT_SO_GET_REVISION_TARGET


	)

94 
	#IP6T_CONTINUE
 
XT_CONTINUE


	)

96 
	#IP6T_RETURN
 
XT_RETURN


	)

98 
	~<löux/√tfûãr/xt_t˝udp.h
>

100 
	#ù6t_t˝
 
xt_t˝


	)

101 
	#ù6t_udp
 
xt_udp


	)

103 
	#IP6T_TCP_INV_SRCPT
 
XT_TCP_INV_SRCPT


	)

104 
	#IP6T_TCP_INV_DSTPT
 
XT_TCP_INV_DSTPT


	)

105 
	#IP6T_TCP_INV_FLAGS
 
XT_TCP_INV_FLAGS


	)

106 
	#IP6T_TCP_INV_OPTION
 
XT_TCP_INV_OPTION


	)

107 
	#IP6T_TCP_INV_MASK
 
XT_TCP_INV_MASK


	)

109 
	#IP6T_UDP_INV_SRCPT
 
XT_UDP_INV_SRCPT


	)

110 
	#IP6T_UDP_INV_DSTPT
 
XT_UDP_INV_DSTPT


	)

111 
	#IP6T_UDP_INV_MASK
 
XT_UDP_INV_MASK


	)

113 
	sù6t_icmp


115 
u_öt8_t
 
	mty≥
;

116 
u_öt8_t
 
	mcode
[2];

117 
u_öt8_t
 
	mövÊags
;

120 
	#IP6T_ICMP_INV
 0x01

	)

122 
	sù6t_gëöfo


125 
	m«me
[
IP6T_TABLE_MAXNAMELEN
];

127 
	mvÆid_hooks
;

129 
	mhook_íåy
[
NF_IP6_NUMHOOKS
];

131 
	mundîÊow
[
NF_IP6_NUMHOOKS
];

133 
	mnum_íåõs
;

135 
	msize
;

138 
	sù6t_ª∂a˚


141 
	m«me
[
IP6T_TABLE_MAXNAMELEN
];

143 
	mvÆid_hooks
;

145 
	mnum_íåõs
;

147 
	msize
;

149 
	mhook_íåy
[
NF_IP6_NUMHOOKS
];

151 
	mundîÊow
[
NF_IP6_NUMHOOKS
];

153 
	mnum_cou¡îs
;

155 
xt_cou¡îs
 
__u£r
 *
	mcou¡îs
;

157 
ù6t_íåy
 
	míåõs
[0];

160 
	#ù6t_cou¡îs_öfo
 
xt_cou¡îs_öfo


	)

162 
	sù6t_gë_íåõs


165 
	m«me
[
IP6T_TABLE_MAXNAMELEN
];

167 
	msize
;

169 
ù6t_íåy
 
	míåyèbÀ
[0];

172 
	#IP6T_STANDARD_TARGET
 
XT_STANDARD_TARGET


	)

174 
	#IP6T_ERROR_TARGET
 
XT_ERROR_TARGET


	)

176 
	#IP6T_MATCH_ITERATE
(
e
, 
‚
, 
¨gs
...Ë({ 
__i
; 
__ªt
 = 0; 
ù6t_íåy_m©ch
 *
__m
; __ò(
ù6t_íåy
); __ò< (e)->
èrgë_off£t
; __ò+__m->
u
.
m©ch_size
Ë{ __m = (*)”Ë+ __i; __ªà
	`‚
(__m , ##árgs); i‡(__ªà!0Ë; } __ªt; })

	)

177 
	#IP6T_ENTRY_ITERATE
(
íåõs
, 
size
, 
‚
, 
¨gs
...Ë({ 
__i
; 
__ªt
 = 0; 
ù6t_íåy
 *
__e
; __ò0; __ò< (size); __ò+__e->
√xt_off£t
Ë{ __ê(*)”¡rõsË+ __i; __ªà
	`‚
(__ê, ##árgs); i‡(__ªà!0Ë; } __ªt; })

	)

	@linux/netfilter_ipv6/ip6t_LOG.h

12 #i‚de‡
_IP6T_LOG_H


13 
	#_IP6T_LOG_H


	)

15 
	#IP6T_LOG_TCPSEQ
 0x01

	)

16 
	#IP6T_LOG_TCPOPT
 0x02

	)

17 
	#IP6T_LOG_IPOPT
 0x04

	)

18 
	#IP6T_LOG_UID
 0x08

	)

19 
	#IP6T_LOG_NFLOG
 0x10

	)

20 
	#IP6T_LOG_MASK
 0x1f

	)

22 
	sù6t_log_öfo
 {

23 
	mÀvñ
;

24 
	mlogÊags
;

25 
	m¥efix
[30];

	@linux/netfilter_ipv6/ip6t_REJECT.h

12 #i‚de‡
_IP6T_REJECT_H


13 
	#_IP6T_REJECT_H


	)

15 
	eù6t_ªje˘_wôh
 {

16 
	mIP6T_ICMP6_NO_ROUTE
,

17 
	mIP6T_ICMP6_ADM_PROHIBITED
,

18 
	mIP6T_ICMP6_NOT_NEIGHBOUR
,

19 
	mIP6T_ICMP6_ADDR_UNREACH
,

20 
	mIP6T_ICMP6_PORT_UNREACH
,

21 
	mIP6T_ICMP6_ECHOREPLY
,

22 
	mIP6T_TCP_RESET


25 
	sù6t_ªje˘_öfo
 {

26 
u_öt32_t
 
	mwôh
;

	@linux/netfilter_ipv6/ip6t_ah.h

12 #i‚de‡
_IP6T_AH_H


13 
	#_IP6T_AH_H


	)

15 
	sù6t_ah


17 
u_öt32_t
 
	m•is
[2];

18 
u_öt32_t
 
	mhdæí
;

19 
u_öt8_t
 
	mhdºes
;

20 
u_öt8_t
 
	mövÊags
;

23 
	#IP6T_AH_SPI
 0x01

	)

24 
	#IP6T_AH_LEN
 0x02

	)

25 
	#IP6T_AH_RES
 0x04

	)

27 
	#IP6T_AH_INV_SPI
 0x01

	)

28 
	#IP6T_AH_INV_LEN
 0x02

	)

29 
	#IP6T_AH_INV_MASK
 0x03

	)

	@linux/netfilter_ipv6/ip6t_esp.h

12 #i‚de‡
_IP6T_ESP_H


13 
	#_IP6T_ESP_H


	)

15 
	~<löux/√tfûãr/xt_e•.h
>

17 
	#ù6t_e•
 
xt_e•


	)

18 
	#IP6T_ESP_INV_SPI
 
XT_ESP_INV_SPI


	)

19 
	#IP6T_ESP_INV_MASK
 
XT_ESP_INV_MASK


	)

	@linux/netfilter_ipv6/ip6t_frag.h

12 #i‚de‡
_IP6T_FRAG_H


13 
	#_IP6T_FRAG_H


	)

15 
	sù6t_‰ag


17 
u_öt32_t
 
	mids
[2];

18 
u_öt32_t
 
	mhdæí
;

19 
u_öt8_t
 
	mÊags
;

20 
u_öt8_t
 
	mövÊags
;

23 
	#IP6T_FRAG_IDS
 0x01

	)

24 
	#IP6T_FRAG_LEN
 0x02

	)

25 
	#IP6T_FRAG_RES
 0x04

	)

26 
	#IP6T_FRAG_FST
 0x08

	)

27 
	#IP6T_FRAG_MF
 0x10

	)

28 
	#IP6T_FRAG_NMF
 0x20

	)

30 
	#IP6T_FRAG_INV_IDS
 0x01

	)

31 
	#IP6T_FRAG_INV_LEN
 0x02

	)

32 
	#IP6T_FRAG_INV_MASK
 0x03

	)

	@linux/netfilter_ipv6/ip6t_ipv6header.h

12 #i‚de‡
__IPV6HEADER_H


13 
	#__IPV6HEADER_H


	)

15 
	sù6t_ùv6hódî_öfo


17 
u_öt8_t
 
	mm©chÊags
;

18 
u_öt8_t
 
	mövÊags
;

19 
u_öt8_t
 
	mmodeÊag
;

22 
	#MASK_HOPOPTS
 128

	)

23 
	#MASK_DSTOPTS
 64

	)

24 
	#MASK_ROUTING
 32

	)

25 
	#MASK_FRAGMENT
 16

	)

26 
	#MASK_AH
 8

	)

27 
	#MASK_ESP
 4

	)

28 
	#MASK_NONE
 2

	)

29 
	#MASK_PROTO
 1

	)

	@linux/netfilter_ipv6/ip6t_length.h

12 #i‚de‡
_IP6T_LENGTH_H


13 
	#_IP6T_LENGTH_H


	)

15 
	~<löux/√tfûãr/xt_Àngth.h
>

16 
	#ù6t_Àngth_öfo
 
xt_Àngth_öfo


	)

	@linux/netfilter_ipv6/ip6t_mac.h

12 #i‚de‡
_IP6T_MAC_H


13 
	#_IP6T_MAC_H


	)

15 
	~<löux/√tfûãr/xt_mac.h
>

16 
	#ù6t_mac_öfo
 
xt_mac_öfo


	)

	@linux/netfilter_ipv6/ip6t_opts.h

12 #i‚de‡
_IP6T_OPTS_H


13 
	#_IP6T_OPTS_H


	)

15 
	#IP6T_OPTS_OPTSNR
 16

	)

17 
	sù6t_›ts


19 
u_öt32_t
 
	mhdæí
;

20 
u_öt8_t
 
	mÊags
;

21 
u_öt8_t
 
	mövÊags
;

22 
u_öt16_t
 
	m›ts
[
IP6T_OPTS_OPTSNR
];

23 
u_öt8_t
 
	m›t¢r
;

26 
	#IP6T_OPTS_LEN
 0x01

	)

27 
	#IP6T_OPTS_OPTS
 0x02

	)

28 
	#IP6T_OPTS_NSTRICT
 0x04

	)

30 
	#IP6T_OPTS_INV_LEN
 0x01

	)

31 
	#IP6T_OPTS_INV_MASK
 0x01

	)

	@linux/netfilter_ipv6/ip6t_owner.h

12 #i‚de‡
_IP6T_OWNER_H


13 
	#_IP6T_OWNER_H


	)

15 
	#IP6T_OWNER_UID
 0x01

	)

16 
	#IP6T_OWNER_GID
 0x02

	)

17 
	#IP6T_OWNER_PID
 0x04

	)

18 
	#IP6T_OWNER_SID
 0x08

	)

20 
	sù6t_ow√r_öfo
 {

21 
uid_t
 
	muid
;

22 
gid_t
 
	mgid
;

23 
pid_t
 
	mpid
;

24 
pid_t
 
	msid
;

25 
u_öt8_t
 
	mm©ch
, 
	mövît
;

	@linux/netfilter_ipv6/ip6t_physdev.h

12 #i‚de‡
_IP6T_PHYSDEV_H


13 
	#_IP6T_PHYSDEV_H


	)

15 
	~<löux/√tfûãr/xt_physdev.h
>

17 
	#IP6T_PHYSDEV_OP_IN
 
XT_PHYSDEV_OP_IN


	)

18 
	#IP6T_PHYSDEV_OP_OUT
 
XT_PHYSDEV_OP_OUT


	)

19 
	#IP6T_PHYSDEV_OP_BRIDGED
 
XT_PHYSDEV_OP_BRIDGED


	)

20 
	#IP6T_PHYSDEV_OP_ISIN
 
XT_PHYSDEV_OP_ISIN


	)

21 
	#IP6T_PHYSDEV_OP_ISOUT
 
XT_PHYSDEV_OP_ISOUT


	)

22 
	#IP6T_PHYSDEV_OP_MASK
 
XT_PHYSDEV_OP_MASK


	)

24 
	#ù6t_physdev_öfo
 
xt_physdev_öfo


	)

	@linux/netfilter_ipv6/ip6t_rt.h

12 #i‚de‡
_IP6T_RT_H


13 
	#_IP6T_RT_H


	)

15 
	#IP6T_RT_HOPS
 16

	)

17 
	sù6t_π


19 
u_öt32_t
 
	mπ_ty≥
;

20 
u_öt32_t
 
	m£g¶e·
[2];

21 
u_öt32_t
 
	mhdæí
;

22 
u_öt8_t
 
	mÊags
;

23 
u_öt8_t
 
	mövÊags
;

24 
ö6_addr
 
	maddrs
[
IP6T_RT_HOPS
];

25 
u_öt8_t
 
	madd∫r
;

28 
	#IP6T_RT_TYP
 0x01

	)

29 
	#IP6T_RT_SGS
 0x02

	)

30 
	#IP6T_RT_LEN
 0x04

	)

31 
	#IP6T_RT_RES
 0x08

	)

32 
	#IP6T_RT_FST_MASK
 0x30

	)

33 
	#IP6T_RT_FST
 0x10

	)

34 
	#IP6T_RT_FST_NSTRICT
 0x20

	)

36 
	#IP6T_RT_INV_TYP
 0x01

	)

37 
	#IP6T_RT_INV_SGS
 0x02

	)

38 
	#IP6T_RT_INV_LEN
 0x04

	)

39 
	#IP6T_RT_INV_MASK
 0x07

	)

	@linux/netlink.h

12 #i‚de‡
__LINUX_NETLINK_H


13 
	#__LINUX_NETLINK_H


	)

15 
	~<löux/sockë.h
>

16 
	~<löux/ty≥s.h
>

18 
	#NETLINK_ROUTE
 0

	)

19 
	#NETLINK_UNUSED
 1

	)

20 
	#NETLINK_USERSOCK
 2

	)

21 
	#NETLINK_FIREWALL
 3

	)

22 
	#NETLINK_INET_DIAG
 4

	)

23 
	#NETLINK_NFLOG
 5

	)

24 
	#NETLINK_XFRM
 6

	)

25 
	#NETLINK_SELINUX
 7

	)

26 
	#NETLINK_ISCSI
 8

	)

27 
	#NETLINK_AUDIT
 9

	)

28 
	#NETLINK_FIB_LOOKUP
 10

	)

29 
	#NETLINK_CONNECTOR
 11

	)

30 
	#NETLINK_NETFILTER
 12

	)

31 
	#NETLINK_IP6_FW
 13

	)

32 
	#NETLINK_DNRTMSG
 14

	)

33 
	#NETLINK_KOBJECT_UEVENT
 15

	)

34 
	#NETLINK_GENERIC
 16

	)

36 
	#MAX_LINKS
 32

	)

38 
	ssockaddr_∆


40 
ß_Ámûy_t
 
	m∆_Ámûy
;

41 
	m∆_∑d
;

42 
__u32
 
	m∆_pid
;

43 
__u32
 
	m∆_groups
;

46 
	s∆msghdr


48 
__u32
 
	m∆msg_Àn
;

49 
__u16
 
	m∆msg_ty≥
;

50 
__u16
 
	m∆msg_Êags
;

51 
__u32
 
	m∆msg_£q
;

52 
__u32
 
	m∆msg_pid
;

55 
	#NLM_F_REQUEST
 1

	)

56 
	#NLM_F_MULTI
 2

	)

57 
	#NLM_F_ACK
 4

	)

58 
	#NLM_F_ECHO
 8

	)

60 
	#NLM_F_ROOT
 0x100

	)

61 
	#NLM_F_MATCH
 0x200

	)

62 
	#NLM_F_ATOMIC
 0x400

	)

63 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

65 
	#NLM_F_REPLACE
 0x100

	)

66 
	#NLM_F_EXCL
 0x200

	)

67 
	#NLM_F_CREATE
 0x400

	)

68 
	#NLM_F_APPEND
 0x800

	)

70 
	#NLMSG_ALIGNTO
 4

	)

71 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

72 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

73 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

74 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

75 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

76 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), (
∆msghdr
*)(((*)“lh)Ë+ NLMSG_ALIGN(“lh)->∆msg_Àn)))

	)

77 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
Ë&& (∆h)->
∆msg_Àn
 >(∆msghdrË&& (∆h)->∆msg_À¿<÷í))

	)

78 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

80 
	#NLMSG_NOOP
 0x1

	)

81 
	#NLMSG_ERROR
 0x2

	)

82 
	#NLMSG_DONE
 0x3

	)

83 
	#NLMSG_OVERRUN
 0x4

	)

85 
	#NLMSG_MIN_TYPE
 0x10

	)

87 
	s∆msgîr


89 
	mîr‹
;

90 
∆msghdr
 
	mmsg
;

93 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

94 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

95 
	#NETLINK_PKTINFO
 3

	)

97 
	s∆_pktöfo


99 
__u32
 
	mgroup
;

102 
	#NET_MAJOR
 36

	)

105 
	mNETLINK_UNCONNECTED
 = 0,

106 
	mNETLINK_CONNECTED
,

109 
	s∆©å


111 
__u16
 
	m∆a_Àn
;

112 
__u16
 
	m∆a_ty≥
;

115 
	#NLA_ALIGNTO
 4

	)

116 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

117 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@linux/nfs.h

12 #i‚de‡
_LINUX_NFS_H


13 
	#_LINUX_NFS_H


	)

15 
	#NFS_PROGRAM
 100003

	)

16 
	#NFS_PORT
 2049

	)

17 
	#NFS_MAXDATA
 8192

	)

18 
	#NFS_MAXPATHLEN
 1024

	)

19 
	#NFS_MAXNAMLEN
 255

	)

20 
	#NFS_MAXGROUPS
 16

	)

21 
	#NFS_FHSIZE
 32

	)

22 
	#NFS_COOKIESIZE
 4

	)

23 
	#NFS_FIFO_DEV
 (-1)

	)

24 
	#NFSMODE_FMT
 0170000

	)

25 
	#NFSMODE_DIR
 0040000

	)

26 
	#NFSMODE_CHR
 0020000

	)

27 
	#NFSMODE_BLK
 0060000

	)

28 
	#NFSMODE_REG
 0100000

	)

29 
	#NFSMODE_LNK
 0120000

	)

30 
	#NFSMODE_SOCK
 0140000

	)

31 
	#NFSMODE_FIFO
 0010000

	)

33 
	#NFS_MNT_PROGRAM
 100005

	)

34 
	#NFS_MNT_PORT
 627

	)

36 
	enfs_°©
 {

37 
	mNFS_OK
 = 0,

38 
	mNFSERR_PERM
 = 1,

39 
	mNFSERR_NOENT
 = 2,

40 
	mNFSERR_IO
 = 5,

41 
	mNFSERR_NXIO
 = 6,

42 
	mNFSERR_EAGAIN
 = 11,

43 
	mNFSERR_ACCES
 = 13,

44 
	mNFSERR_EXIST
 = 17,

45 
	mNFSERR_XDEV
 = 18,

46 
	mNFSERR_NODEV
 = 19,

47 
	mNFSERR_NOTDIR
 = 20,

48 
	mNFSERR_ISDIR
 = 21,

49 
	mNFSERR_INVAL
 = 22,

50 
	mNFSERR_FBIG
 = 27,

51 
	mNFSERR_NOSPC
 = 28,

52 
	mNFSERR_ROFS
 = 30,

53 
	mNFSERR_MLINK
 = 31,

54 
	mNFSERR_OPNOTSUPP
 = 45,

55 
	mNFSERR_NAMETOOLONG
 = 63,

56 
	mNFSERR_NOTEMPTY
 = 66,

57 
	mNFSERR_DQUOT
 = 69,

58 
	mNFSERR_STALE
 = 70,

59 
	mNFSERR_REMOTE
 = 71,

60 
	mNFSERR_WFLUSH
 = 99,

61 
	mNFSERR_BADHANDLE
 = 10001,

62 
	mNFSERR_NOT_SYNC
 = 10002,

63 
	mNFSERR_BAD_COOKIE
 = 10003,

64 
	mNFSERR_NOTSUPP
 = 10004,

65 
	mNFSERR_TOOSMALL
 = 10005,

66 
	mNFSERR_SERVERFAULT
 = 10006,

67 
	mNFSERR_BADTYPE
 = 10007,

68 
	mNFSERR_JUKEBOX
 = 10008,

69 
	mNFSERR_SAME
 = 10009,

70 
	mNFSERR_DENIED
 = 10010,

71 
	mNFSERR_EXPIRED
 = 10011,

72 
	mNFSERR_LOCKED
 = 10012,

73 
	mNFSERR_GRACE
 = 10013,

74 
	mNFSERR_FHEXPIRED
 = 10014,

75 
	mNFSERR_SHARE_DENIED
 = 10015,

76 
	mNFSERR_WRONGSEC
 = 10016,

77 
	mNFSERR_CLID_INUSE
 = 10017,

78 
	mNFSERR_RESOURCE
 = 10018,

79 
	mNFSERR_MOVED
 = 10019,

80 
	mNFSERR_NOFILEHANDLE
 = 10020,

81 
	mNFSERR_MINOR_VERS_MISMATCH
 = 10021,

82 
	mNFSERR_STALE_CLIENTID
 = 10022,

83 
	mNFSERR_STALE_STATEID
 = 10023,

84 
	mNFSERR_OLD_STATEID
 = 10024,

85 
	mNFSERR_BAD_STATEID
 = 10025,

86 
	mNFSERR_BAD_SEQID
 = 10026,

87 
	mNFSERR_NOT_SAME
 = 10027,

88 
	mNFSERR_LOCK_RANGE
 = 10028,

89 
	mNFSERR_SYMLINK
 = 10029,

90 
	mNFSERR_RESTOREFH
 = 10030,

91 
	mNFSERR_LEASE_MOVED
 = 10031,

92 
	mNFSERR_ATTRNOTSUPP
 = 10032,

93 
	mNFSERR_NO_GRACE
 = 10033,

94 
	mNFSERR_RECLAIM_BAD
 = 10034,

95 
	mNFSERR_RECLAIM_CONFLICT
 = 10035,

96 
	mNFSERR_BAD_XDR
 = 10036,

97 
	mNFSERR_LOCKS_HELD
 = 10037,

98 
	mNFSERR_OPENMODE
 = 10038,

99 
	mNFSERR_BADOWNER
 = 10039,

100 
	mNFSERR_BADCHAR
 = 10040,

101 
	mNFSERR_BADNAME
 = 10041,

102 
	mNFSERR_BAD_RANGE
 = 10042,

103 
	mNFSERR_LOCK_NOTSUPP
 = 10043,

104 
	mNFSERR_OP_ILLEGAL
 = 10044,

105 
	mNFSERR_DEADLOCK
 = 10045,

106 
	mNFSERR_FILE_OPEN
 = 10046,

107 
	mNFSERR_ADMIN_REVOKED
 = 10047,

108 
	mNFSERR_CB_PATH_DOWN
 = 10048,

109 
	mNFSERR_REPLAY_ME
 = 10049

112 
	enfs_·y≥
 {

113 
	mNFNON
 = 0,

114 
	mNFREG
 = 1,

115 
	mNFDIR
 = 2,

116 
	mNFBLK
 = 3,

117 
	mNFCHR
 = 4,

118 
	mNFLNK
 = 5,

119 
	mNFSOCK
 = 6,

120 
	mNFBAD
 = 7,

121 
	mNFFIFO
 = 8

	@linux/nfs2.h

12 #i‚de‡
_LINUX_NFS2_H


13 
	#_LINUX_NFS2_H


	)

15 
	#NFS2_PORT
 2049

	)

16 
	#NFS2_MAXDATA
 8192

	)

17 
	#NFS2_MAXPATHLEN
 1024

	)

18 
	#NFS2_MAXNAMLEN
 255

	)

19 
	#NFS2_MAXGROUPS
 16

	)

20 
	#NFS2_FHSIZE
 32

	)

21 
	#NFS2_COOKIESIZE
 4

	)

22 
	#NFS2_FIFO_DEV
 (-1)

	)

23 
	#NFS2MODE_FMT
 0170000

	)

24 
	#NFS2MODE_DIR
 0040000

	)

25 
	#NFS2MODE_CHR
 0020000

	)

26 
	#NFS2MODE_BLK
 0060000

	)

27 
	#NFS2MODE_REG
 0100000

	)

28 
	#NFS2MODE_LNK
 0120000

	)

29 
	#NFS2MODE_SOCK
 0140000

	)

30 
	#NFS2MODE_FIFO
 0010000

	)

32 
	enfs2_·y≥
 {

33 
	mNF2NON
 = 0,

34 
	mNF2REG
 = 1,

35 
	mNF2DIR
 = 2,

36 
	mNF2BLK
 = 3,

37 
	mNF2CHR
 = 4,

38 
	mNF2LNK
 = 5,

39 
	mNF2SOCK
 = 6,

40 
	mNF2BAD
 = 7,

41 
	mNF2FIFO
 = 8

44 
	snfs2_fh
 {

45 
	md©a
[
NFS2_FHSIZE
];

48 
	#NFS2_VERSION
 2

	)

49 
	#NFSPROC_NULL
 0

	)

50 
	#NFSPROC_GETATTR
 1

	)

51 
	#NFSPROC_SETATTR
 2

	)

52 
	#NFSPROC_ROOT
 3

	)

53 
	#NFSPROC_LOOKUP
 4

	)

54 
	#NFSPROC_READLINK
 5

	)

55 
	#NFSPROC_READ
 6

	)

56 
	#NFSPROC_WRITECACHE
 7

	)

57 
	#NFSPROC_WRITE
 8

	)

58 
	#NFSPROC_CREATE
 9

	)

59 
	#NFSPROC_REMOVE
 10

	)

60 
	#NFSPROC_RENAME
 11

	)

61 
	#NFSPROC_LINK
 12

	)

62 
	#NFSPROC_SYMLINK
 13

	)

63 
	#NFSPROC_MKDIR
 14

	)

64 
	#NFSPROC_RMDIR
 15

	)

65 
	#NFSPROC_READDIR
 16

	)

66 
	#NFSPROC_STATFS
 17

	)

68 
	#NFS_MNT_PROGRAM
 100005

	)

69 
	#NFS_MNT_VERSION
 1

	)

70 
	#MNTPROC_NULL
 0

	)

71 
	#MNTPROC_MNT
 1

	)

72 
	#MNTPROC_UMNT
 3

	)

73 
	#MNTPROC_UMNTALL
 4

	)

	@linux/nfs3.h

12 #i‚de‡
_LINUX_NFS3_H


13 
	#_LINUX_NFS3_H


	)

15 
	#NFS3_PORT
 2049

	)

16 
	#NFS3_MAXDATA
 32768

	)

17 
	#NFS3_MAXPATHLEN
 
PATH_MAX


	)

18 
	#NFS3_MAXNAMLEN
 
NAME_MAX


	)

19 
	#NFS3_MAXGROUPS
 16

	)

20 
	#NFS3_FHSIZE
 64

	)

21 
	#NFS3_COOKIESIZE
 4

	)

22 
	#NFS3_FIFO_DEV
 (-1)

	)

23 
	#NFS3MODE_FMT
 0170000

	)

24 
	#NFS3MODE_DIR
 0040000

	)

25 
	#NFS3MODE_CHR
 0020000

	)

26 
	#NFS3MODE_BLK
 0060000

	)

27 
	#NFS3MODE_REG
 0100000

	)

28 
	#NFS3MODE_LNK
 0120000

	)

29 
	#NFS3MODE_SOCK
 0140000

	)

30 
	#NFS3MODE_FIFO
 0010000

	)

32 
	#NFS3_ACCESS_READ
 0x0001

	)

33 
	#NFS3_ACCESS_LOOKUP
 0x0002

	)

34 
	#NFS3_ACCESS_MODIFY
 0x0004

	)

35 
	#NFS3_ACCESS_EXTEND
 0x0008

	)

36 
	#NFS3_ACCESS_DELETE
 0x0010

	)

37 
	#NFS3_ACCESS_EXECUTE
 0x0020

	)

38 
	#NFS3_ACCESS_FULL
 0x003f

	)

40 
	enfs3_¸óãmode
 {

41 
	mNFS3_CREATE_UNCHECKED
 = 0,

42 
	mNFS3_CREATE_GUARDED
 = 1,

43 
	mNFS3_CREATE_EXCLUSIVE
 = 2

46 
	#NFS3_FSF_LINK
 0x0001

	)

47 
	#NFS3_FSF_SYMLINK
 0x0002

	)

48 
	#NFS3_FSF_HOMOGENEOUS
 0x0008

	)

49 
	#NFS3_FSF_CANSETTIME
 0x0010

	)

51 
	#NFS3_FSF_DEFAULT
 0x001B

	)

52 
	#NFS3_FSF_BILLYBOY
 0x0018

	)

53 
	#NFS3_FSF_READONLY
 0x0008

	)

55 
	enfs3_·y≥
 {

56 
	mNF3NON
 = 0,

57 
	mNF3REG
 = 1,

58 
	mNF3DIR
 = 2,

59 
	mNF3BLK
 = 3,

60 
	mNF3CHR
 = 4,

61 
	mNF3LNK
 = 5,

62 
	mNF3SOCK
 = 6,

63 
	mNF3FIFO
 = 7,

64 
	mNF3BAD
 = 8

67 
	snfs3_fh
 {

68 
	msize
;

69 
	md©a
[
NFS3_FHSIZE
];

72 
	#NFS3_VERSION
 3

	)

73 
	#NFS3PROC_NULL
 0

	)

74 
	#NFS3PROC_GETATTR
 1

	)

75 
	#NFS3PROC_SETATTR
 2

	)

76 
	#NFS3PROC_LOOKUP
 3

	)

77 
	#NFS3PROC_ACCESS
 4

	)

78 
	#NFS3PROC_READLINK
 5

	)

79 
	#NFS3PROC_READ
 6

	)

80 
	#NFS3PROC_WRITE
 7

	)

81 
	#NFS3PROC_CREATE
 8

	)

82 
	#NFS3PROC_MKDIR
 9

	)

83 
	#NFS3PROC_SYMLINK
 10

	)

84 
	#NFS3PROC_MKNOD
 11

	)

85 
	#NFS3PROC_REMOVE
 12

	)

86 
	#NFS3PROC_RMDIR
 13

	)

87 
	#NFS3PROC_RENAME
 14

	)

88 
	#NFS3PROC_LINK
 15

	)

89 
	#NFS3PROC_READDIR
 16

	)

90 
	#NFS3PROC_READDIRPLUS
 17

	)

91 
	#NFS3PROC_FSSTAT
 18

	)

92 
	#NFS3PROC_FSINFO
 19

	)

93 
	#NFS3PROC_PATHCONF
 20

	)

94 
	#NFS3PROC_COMMIT
 21

	)

96 
	#NFS_MNT3_PROGRAM
 100005

	)

97 
	#NFS_MNT3_VERSION
 3

	)

98 
	#MOUNTPROC3_NULL
 0

	)

99 
	#MOUNTPROC3_MNT
 1

	)

100 
	#MOUNTPROC3_UMNT
 3

	)

101 
	#MOUNTPROC3_UMNTALL
 4

	)

103 #ifde‡
NFS_NEED_KERNEL_TYPES


105 
	#NFS3_POST_OP_ATTR_WORDS
 22

	)

	@linux/nfs4.h

12 #i‚de‡
_LINUX_NFS4_H


13 
	#_LINUX_NFS4_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#NFS4_VERIFIER_SIZE
 8

	)

18 
	#NFS4_FHSIZE
 128

	)

19 
	#NFS4_MAXPATHLEN
 
PATH_MAX


	)

20 
	#NFS4_MAXNAMLEN
 
NAME_MAX


	)

22 
	#NFS4_ACCESS_READ
 0x0001

	)

23 
	#NFS4_ACCESS_LOOKUP
 0x0002

	)

24 
	#NFS4_ACCESS_MODIFY
 0x0004

	)

25 
	#NFS4_ACCESS_EXTEND
 0x0008

	)

26 
	#NFS4_ACCESS_DELETE
 0x0010

	)

27 
	#NFS4_ACCESS_EXECUTE
 0x0020

	)

29 
	#NFS4_FH_PERSISTENT
 0x0000

	)

30 
	#NFS4_FH_NOEXPIRE_WITH_OPEN
 0x0001

	)

31 
	#NFS4_FH_VOLATILE_ANY
 0x0002

	)

32 
	#NFS4_FH_VOL_MIGRATION
 0x0004

	)

33 
	#NFS4_FH_VOL_RENAME
 0x0008

	)

35 
	#NFS4_OPEN_RESULT_CONFIRM
 0x0002

	)

36 
	#NFS4_OPEN_RESULT_LOCKTYPE_POSIX
 0x0004

	)

38 
	#NFS4_SHARE_ACCESS_READ
 0x0001

	)

39 
	#NFS4_SHARE_ACCESS_WRITE
 0x0002

	)

40 
	#NFS4_SHARE_ACCESS_BOTH
 0x0003

	)

41 
	#NFS4_SHARE_DENY_READ
 0x0001

	)

42 
	#NFS4_SHARE_DENY_WRITE
 0x0002

	)

43 
	#NFS4_SHARE_DENY_BOTH
 0x0003

	)

45 
	#NFS4_SET_TO_SERVER_TIME
 0

	)

46 
	#NFS4_SET_TO_CLIENT_TIME
 1

	)

48 
	#NFS4_ACE_ACCESS_ALLOWED_ACE_TYPE
 0

	)

49 
	#NFS4_ACE_ACCESS_DENIED_ACE_TYPE
 1

	)

50 
	#NFS4_ACE_SYSTEM_AUDIT_ACE_TYPE
 2

	)

51 
	#NFS4_ACE_SYSTEM_ALARM_ACE_TYPE
 3

	)

53 
	#ACL4_SUPPORT_ALLOW_ACL
 0x01

	)

54 
	#ACL4_SUPPORT_DENY_ACL
 0x02

	)

55 
	#ACL4_SUPPORT_AUDIT_ACL
 0x04

	)

56 
	#ACL4_SUPPORT_ALARM_ACL
 0x08

	)

58 
	#NFS4_ACE_FILE_INHERIT_ACE
 0x00000001

	)

59 
	#NFS4_ACE_DIRECTORY_INHERIT_ACE
 0x00000002

	)

60 
	#NFS4_ACE_NO_PROPAGATE_INHERIT_ACE
 0x00000004

	)

61 
	#NFS4_ACE_INHERIT_ONLY_ACE
 0x00000008

	)

62 
	#NFS4_ACE_SUCCESSFUL_ACCESS_ACE_FLAG
 0x00000010

	)

63 
	#NFS4_ACE_FAILED_ACCESS_ACE_FLAG
 0x00000020

	)

64 
	#NFS4_ACE_IDENTIFIER_GROUP
 0x00000040

	)

65 
	#NFS4_ACE_OWNER
 0x00000080

	)

66 
	#NFS4_ACE_GROUP
 0x00000100

	)

67 
	#NFS4_ACE_EVERYONE
 0x00000200

	)

69 
	#NFS4_ACE_READ_DATA
 0x00000001

	)

70 
	#NFS4_ACE_LIST_DIRECTORY
 0x00000001

	)

71 
	#NFS4_ACE_WRITE_DATA
 0x00000002

	)

72 
	#NFS4_ACE_ADD_FILE
 0x00000002

	)

73 
	#NFS4_ACE_APPEND_DATA
 0x00000004

	)

74 
	#NFS4_ACE_ADD_SUBDIRECTORY
 0x00000004

	)

75 
	#NFS4_ACE_READ_NAMED_ATTRS
 0x00000008

	)

76 
	#NFS4_ACE_WRITE_NAMED_ATTRS
 0x00000010

	)

77 
	#NFS4_ACE_EXECUTE
 0x00000020

	)

78 
	#NFS4_ACE_DELETE_CHILD
 0x00000040

	)

79 
	#NFS4_ACE_READ_ATTRIBUTES
 0x00000080

	)

80 
	#NFS4_ACE_WRITE_ATTRIBUTES
 0x00000100

	)

81 
	#NFS4_ACE_DELETE
 0x00010000

	)

82 
	#NFS4_ACE_READ_ACL
 0x00020000

	)

83 
	#NFS4_ACE_WRITE_ACL
 0x00040000

	)

84 
	#NFS4_ACE_WRITE_OWNER
 0x00080000

	)

85 
	#NFS4_ACE_SYNCHRONIZE
 0x00100000

	)

86 
	#NFS4_ACE_GENERIC_READ
 0x00120081

	)

87 
	#NFS4_ACE_GENERIC_WRITE
 0x00160106

	)

88 
	#NFS4_ACE_GENERIC_EXECUTE
 0x001200A0

	)

89 
	#NFS4_ACE_MASK_ALL
 0x001F01FF

	)

91 
	enfs4_a˛_whŸy≥
 {

92 
	mNFS4_ACL_WHO_NAMED
 = 0,

93 
	mNFS4_ACL_WHO_OWNER
,

94 
	mNFS4_ACL_WHO_GROUP
,

95 
	mNFS4_ACL_WHO_EVERYONE
,

	@linux/nfs_xdr.h

12 #i‚de‡
_LINUX_NFS_XDR_H


13 
	#_LINUX_NFS_XDR_H


	)

15 
	~<löux/suƒpc/x¥t.h
>

16 
	~<löux/nfß˛.h
>

18 
	#NFS_MAX_FILE_IO_SIZE
 (1048576U)

	)

19 
	#NFS_DEF_FILE_IO_SIZE
 (4096U)

	)

20 
	#NFS_MIN_FILE_IO_SIZE
 (1024U)

	)

22 
	snfs_fsid
 {

23 
uöt64_t
 
	mmaj‹
;

24 
uöt64_t
 
	mmö‹
;

27 
	#NFS_ATTR_WCC
 0x0001

	)

28 
	#NFS_ATTR_FATTR
 0x0002

	)

29 
	#NFS_ATTR_FATTR_V3
 0x0004

	)

30 
	#NFS_ATTR_FATTR_V4
 0x0008

	)

31 
	#NFS_ATTR_FATTR_V4_REFERRAL
 0x0010

	)

33 
	snfs_fsöfo
 {

34 
nfs_Áâr
 *
	mÁâr
;

35 
__u32
 
	mπmax
;

36 
__u32
 
	mπ¥ef
;

37 
__u32
 
	mπmu…
;

38 
__u32
 
	mwtmax
;

39 
__u32
 
	mwçªf
;

40 
__u32
 
	mwtmu…
;

41 
__u32
 
	mdçªf
;

42 
__u64
 
	mmaxfûesize
;

43 
__u32
 
	mÀa£_time
;

46 
	snfs_fs°©
 {

47 
nfs_Áâr
 *
	mÁâr
;

48 
__u64
 
	mtbyãs
;

49 
__u64
 
	mfbyãs
;

50 
__u64
 
	mabyãs
;

51 
__u64
 
	mtfûes
;

52 
__u64
 
	mffûes
;

53 
__u64
 
	mafûes
;

56 
	snfs2_fs°©
 {

57 
__u32
 
	mtsize
;

58 
__u32
 
	mbsize
;

59 
__u32
 
	mblocks
;

60 
__u32
 
	mb‰ì
;

61 
__u32
 
	mbavaû
;

64 
	snfs_∑thc⁄f
 {

65 
nfs_Áâr
 *
	mÁâr
;

66 
__u32
 
	mmax_lök
;

67 
__u32
 
	mmax_«mñí
;

70 
	snfs4_ch™ge_öfo
 {

71 
u32
 
	m©omic
;

72 
u64
 
	mbef‹e
;

73 
u64
 
	ma·î
;

76 
	gnfs_£qid
;

78 
	snfs_›í¨gs
 {

79 c⁄° 
nfs_fh
 * 
	mfh
;

80 
nfs_£qid
 * 
	m£qid
;

81 
	m›í_Êags
;

82 
__u64
 
	m˛õ¡id
;

83 
__u32
 
	mid
;

85 
üâr
 * 
	m©ås
;

86 
nfs4_vîifõr
 
	mvîifõr
;

87 
nfs4_°©eid
 
	mdñeg©i⁄
;

88 
	mdñeg©i⁄_ty≥
;

89 } 
	mu
;

90 c⁄° 
q°r
 * 
	m«me
;

91 c⁄° 
nfs_£rvî
 *
	m£rvî
;

92 c⁄° 
u32
 * 
	mbômask
;

93 
__u32
 
	m˛aim
;

96 
	snfs_›íªs
 {

97 
nfs4_°©eid
 
	m°©eid
;

98 
nfs_fh
 
	mfh
;

99 
nfs4_ch™ge_öfo
 
	mcöfo
;

100 
__u32
 
	mrÊags
;

101 
nfs_Áâr
 * 
	mf_©å
;

102 
nfs_Áâr
 * 
	mdú_©å
;

103 c⁄° 
nfs_£rvî
 *
	m£rvî
;

104 
	mdñeg©i⁄_ty≥
;

105 
nfs4_°©eid
 
	mdñeg©i⁄
;

106 
__u32
 
	mdo_ªˇŒ
;

107 
__u64
 
	mmaxsize
;

110 
	snfs_›í_c⁄fúm¨gs
 {

111 c⁄° 
nfs_fh
 * 
	mfh
;

112 
nfs4_°©eid
 * 
	m°©eid
;

113 
nfs_£qid
 * 
	m£qid
;

116 
	snfs_›í_c⁄fúmªs
 {

117 
nfs4_°©eid
 
	m°©eid
;

120 
	snfs_˛o£¨gs
 {

121 
nfs_fh
 * 
	mfh
;

122 
nfs4_°©eid
 * 
	m°©eid
;

123 
nfs_£qid
 * 
	m£qid
;

124 
	m›í_Êags
;

125 c⁄° 
u32
 * 
	mbômask
;

128 
	snfs_˛o£ªs
 {

129 
nfs4_°©eid
 
	m°©eid
;

130 
nfs_Áâr
 * 
	mÁâr
;

131 c⁄° 
nfs_£rvî
 *
	m£rvî
;

134 
	snfs_low√r
 {

135 
__u64
 
	m˛õ¡id
;

136 
u32
 
	mid
;

139 
	snfs_lock_¨gs
 {

140 
nfs_fh
 * 
	mfh
;

141 
fûe_lock
 * 
	mÊ
;

142 
nfs_£qid
 * 
	mlock_£qid
;

143 
nfs4_°©eid
 * 
	mlock_°©eid
;

144 
nfs_£qid
 * 
	m›í_£qid
;

145 
nfs4_°©eid
 * 
	m›í_°©eid
;

146 
nfs_low√r
 
	mlock_ow√r
;

147 
	mblock
 : 1;

148 
	mª˛aim
 : 1;

149 
	m√w_lock_ow√r
 : 1;

152 
	snfs_lock_ªs
 {

153 
nfs4_°©eid
 
	m°©eid
;

156 
	snfs_locku_¨gs
 {

157 
nfs_fh
 * 
	mfh
;

158 
fûe_lock
 * 
	mÊ
;

159 
nfs_£qid
 * 
	m£qid
;

160 
nfs4_°©eid
 * 
	m°©eid
;

163 
	snfs_locku_ªs
 {

164 
nfs4_°©eid
 
	m°©eid
;

167 
	snfs_lockt_¨gs
 {

168 
nfs_fh
 * 
	mfh
;

169 
fûe_lock
 * 
	mÊ
;

170 
nfs_low√r
 
	mlock_ow√r
;

173 
	snfs_lockt_ªs
 {

174 
fûe_lock
 * 
	mdíõd
;

177 
	snfs4_dñegªtu∫¨gs
 {

178 c⁄° 
nfs_fh
 *
	mfh™dÀ
;

179 c⁄° 
nfs4_°©eid
 *
	m°©eid
;

180 c⁄° 
u32
 * 
	mbômask
;

183 
	snfs4_dñegªtu∫ªs
 {

184 
nfs_Áâr
 * 
	mÁâr
;

185 c⁄° 
nfs_£rvî
 *
	m£rvî
;

188 
	snfs_ªad¨gs
 {

189 
nfs_fh
 * 
	mfh
;

190 
nfs_›í_c⁄ãxt
 *
	mc⁄ãxt
;

191 
__u64
 
	moff£t
;

192 
__u32
 
	mcou¡
;

193 
	mpgba£
;

194 
∑ge
 ** 
	m∑ges
;

197 
	snfs_ªadªs
 {

198 
nfs_Áâr
 * 
	mÁâr
;

199 
__u32
 
	mcou¡
;

200 
	meof
;

203 
	snfs_wrôórgs
 {

204 
nfs_fh
 * 
	mfh
;

205 
nfs_›í_c⁄ãxt
 *
	mc⁄ãxt
;

206 
__u64
 
	moff£t
;

207 
__u32
 
	mcou¡
;

208 
nfs3_°abÀ_how
 
	m°abÀ
;

209 
	mpgba£
;

210 
∑ge
 ** 
	m∑ges
;

211 c⁄° 
u32
 * 
	mbômask
;

214 
	snfs_wrôevîf
 {

215 
nfs3_°abÀ_how
 
	mcommôãd
;

216 
__u32
 
	mvîifõr
[2];

219 
	snfs_wrôîes
 {

220 
nfs_Áâr
 * 
	mÁâr
;

221 
nfs_wrôevîf
 * 
	mvîf
;

222 
__u32
 
	mcou¡
;

223 c⁄° 
nfs_£rvî
 *
	m£rvî
;

226 
	snfs_íåy
 {

227 
__u64
 
	möo
;

228 
__u64
 
	mcookõ
,

229 
	m¥ev_cookõ
;

230 c⁄° * 
	m«me
;

231 
	mÀn
;

232 
	meof
;

233 
nfs_fh
 * 
	mfh
;

234 
nfs_Áâr
 * 
	mÁâr
;

237 
	snfs_ßâørgs
 {

238 
nfs_fh
 * 
	mfh
;

239 
üâr
 * 
	mßâr
;

242 
	snfs_dú›¨gs
 {

243 
nfs_fh
 * 
	mfh
;

244 c⁄° * 
	m«me
;

245 
	mÀn
;

248 
	snfs_¸óã¨gs
 {

249 
nfs_fh
 * 
	mfh
;

250 c⁄° * 
	m«me
;

251 
	mÀn
;

252 
üâr
 * 
	mßâr
;

255 
	snfs_ª«mórgs
 {

256 
nfs_fh
 * 
	m‰omfh
;

257 c⁄° * 
	m‰om«me
;

258 
	m‰omÀn
;

259 
nfs_fh
 * 
	mtofh
;

260 c⁄° * 
	mt⁄ame
;

261 
	mtﬁí
;

264 
	snfs_£èâørgs
 {

265 
nfs_fh
 * 
	mfh
;

266 
nfs4_°©eid
 
	m°©eid
;

267 
üâr
 * 
	müp
;

268 c⁄° 
nfs_£rvî
 * 
	m£rvî
;

269 c⁄° 
u32
 * 
	mbômask
;

272 
	snfs_£è˛¨gs
 {

273 
nfs_fh
 * 
	mfh
;

274 
size_t
 
	ma˛_Àn
;

275 
	ma˛_pgba£
;

276 
∑ge
 ** 
	ma˛_∑ges
;

279 
	snfs_gëa˛¨gs
 {

280 
nfs_fh
 * 
	mfh
;

281 
size_t
 
	ma˛_Àn
;

282 
	ma˛_pgba£
;

283 
∑ge
 ** 
	ma˛_∑ges
;

286 
	snfs_£èâºes
 {

287 
nfs_Áâr
 * 
	mÁâr
;

288 c⁄° 
nfs_£rvî
 * 
	m£rvî
;

291 
	snfs_lök¨gs
 {

292 
nfs_fh
 * 
	m‰omfh
;

293 
nfs_fh
 * 
	mtofh
;

294 c⁄° * 
	mt⁄ame
;

295 
	mtﬁí
;

298 
	snfs_symlök¨gs
 {

299 
nfs_fh
 * 
	m‰omfh
;

300 c⁄° * 
	m‰om«me
;

301 
	m‰omÀn
;

302 c⁄° * 
	mt›©h
;

303 
	mtﬁí
;

304 
üâr
 * 
	mßâr
;

307 
	snfs_ªaddú¨gs
 {

308 
nfs_fh
 * 
	mfh
;

309 
__u32
 
	mcookõ
;

310 
	mcou¡
;

311 
∑ge
 ** 
	m∑ges
;

314 
	snfs3_gëa˛¨gs
 {

315 
nfs_fh
 * 
	mfh
;

316 
	mmask
;

317 
∑ge
 ** 
	m∑ges
;

320 
	snfs3_£è˛¨gs
 {

321 
öode
 * 
	möode
;

322 
	mmask
;

323 
posix_a˛
 * 
	ma˛_ac˚ss
;

324 
posix_a˛
 * 
	ma˛_deÁu…
;

325 
∑ge
 ** 
	m∑ges
;

328 
	snfs_dú›ok
 {

329 
nfs_fh
 * 
	mfh
;

330 
nfs_Áâr
 * 
	mÁâr
;

333 
	snfs_ªadlök¨gs
 {

334 
nfs_fh
 * 
	mfh
;

335 
	mpgba£
;

336 
	mpgÀn
;

337 
∑ge
 ** 
	m∑ges
;

340 
	snfs3_ßâørgs
 {

341 
nfs_fh
 * 
	mfh
;

342 
üâr
 * 
	mßâr
;

343 
	mgu¨d
;

344 
time•ec
 
	mgu¨dtime
;

347 
	snfs3_dú›¨gs
 {

348 
nfs_fh
 * 
	mfh
;

349 c⁄° * 
	m«me
;

350 
	mÀn
;

353 
	snfs3_ac˚sßrgs
 {

354 
nfs_fh
 * 
	mfh
;

355 
__u32
 
	mac˚ss
;

358 
	snfs3_¸óã¨gs
 {

359 
nfs_fh
 * 
	mfh
;

360 c⁄° * 
	m«me
;

361 
	mÀn
;

362 
üâr
 * 
	mßâr
;

363 
nfs3_¸óãmode
 
	m¸óãmode
;

364 
__u32
 
	mvîifõr
[2];

367 
	snfs3_mkdú¨gs
 {

368 
nfs_fh
 * 
	mfh
;

369 c⁄° * 
	m«me
;

370 
	mÀn
;

371 
üâr
 * 
	mßâr
;

374 
	snfs3_symlök¨gs
 {

375 
nfs_fh
 * 
	m‰omfh
;

376 c⁄° * 
	m‰om«me
;

377 
	m‰omÀn
;

378 c⁄° * 
	mt›©h
;

379 
	mtﬁí
;

380 
üâr
 * 
	mßâr
;

383 
	snfs3_mknod¨gs
 {

384 
nfs_fh
 * 
	mfh
;

385 c⁄° * 
	m«me
;

386 
	mÀn
;

387 
nfs3_·y≥
 
	mty≥
;

388 
üâr
 * 
	mßâr
;

389 
dev_t
 
	mrdev
;

392 
	snfs3_ª«mórgs
 {

393 
nfs_fh
 * 
	m‰omfh
;

394 c⁄° * 
	m‰om«me
;

395 
	m‰omÀn
;

396 
nfs_fh
 * 
	mtofh
;

397 c⁄° * 
	mt⁄ame
;

398 
	mtﬁí
;

401 
	snfs3_lök¨gs
 {

402 
nfs_fh
 * 
	m‰omfh
;

403 
nfs_fh
 * 
	mtofh
;

404 c⁄° * 
	mt⁄ame
;

405 
	mtﬁí
;

408 
	snfs3_ªaddú¨gs
 {

409 
nfs_fh
 * 
	mfh
;

410 
__u64
 
	mcookõ
;

411 
__u32
 
	mvîf
[2];

412 
	m∂us
;

413 
	mcou¡
;

414 
∑ge
 ** 
	m∑ges
;

417 
	snfs3_dú›ªs
 {

418 
nfs_Áâr
 * 
	mdú_©å
;

419 
nfs_fh
 * 
	mfh
;

420 
nfs_Áâr
 * 
	mÁâr
;

423 
	snfs3_ac˚s§es
 {

424 
nfs_Áâr
 * 
	mÁâr
;

425 
__u32
 
	mac˚ss
;

428 
	snfs3_ªadlök¨gs
 {

429 
nfs_fh
 * 
	mfh
;

430 
	mpgba£
;

431 
	mpgÀn
;

432 
∑ge
 ** 
	m∑ges
;

435 
	snfs3_ª«mîes
 {

436 
nfs_Áâr
 * 
	m‰om©å
;

437 
nfs_Áâr
 * 
	mtﬂâr
;

440 
	snfs3_lökªs
 {

441 
nfs_Áâr
 * 
	mdú_©å
;

442 
nfs_Áâr
 * 
	mÁâr
;

445 
	snfs3_ªaddúªs
 {

446 
nfs_Áâr
 * 
	mdú_©å
;

447 
__u32
 * 
	mvîf
;

448 
	m∂us
;

451 
	snfs3_gëa˛ªs
 {

452 
nfs_Áâr
 * 
	mÁâr
;

453 
	mmask
;

454 
	ma˛_ac˚ss_cou¡
;

455 
	ma˛_deÁu…_cou¡
;

456 
posix_a˛
 * 
	ma˛_ac˚ss
;

457 
posix_a˛
 * 
	ma˛_deÁu…
;

460 
	gnfs_∑ge
;

462 
	#NFS_PAGEVEC_SIZE
 (8U)

	)

464 
	snfs_ªad_d©a
 {

465 
	mÊags
;

466 
Ωc_èsk
 
	mèsk
;

467 
öode
 *
	möode
;

468 
Ωc_¸ed
 *
	m¸ed
;

469 
nfs_Áâr
 
	mÁâr
;

470 
li°_hód
 
	m∑ges
;

471 
nfs_∑ge
 *
	mªq
;

472 
∑ge
 **
	m∑gevec
;

473 
	m≈ages
;

474 
nfs_ªad¨gs
 
	m¨gs
;

475 
nfs_ªadªs
 
	mªs
;

476 
∑ge
 *
	m∑ge_¨øy
[
NFS_PAGEVEC_SIZE
];

479 
	snfs_wrôe_d©a
 {

480 
	mÊags
;

481 
Ωc_èsk
 
	mèsk
;

482 
öode
 *
	möode
;

483 
Ωc_¸ed
 *
	m¸ed
;

484 
nfs_Áâr
 
	mÁâr
;

485 
nfs_wrôevîf
 
	mvîf
;

486 
li°_hód
 
	m∑ges
;

487 
nfs_∑ge
 *
	mªq
;

488 
∑ge
 **
	m∑gevec
;

489 
	m≈ages
;

490 
nfs_wrôórgs
 
	m¨gs
;

491 
nfs_wrôîes
 
	mªs
;

492 
∑ge
 *
	m∑ge_¨øy
[
NFS_PAGEVEC_SIZE
];

495 
	gnfs_ac˚ss_íåy
;

497 
	snfs_Ωc_›s
 {

498 
	mvîsi⁄
;

499 
díåy_›î©i⁄s
 *
	mdíåy_›s
;

500 
öode_›î©i⁄s
 *
	mdú_öode_›s
;

501 
öode_›î©i⁄s
 *
	mfûe_öode_›s
;

503 (*
	mgëroŸ
Ë(
	mnfs_£rvî
 *, 
	mnfs_fh
 *,

504 
	mnfs_fsöfo
 *);

505 (*
	mgë©å
Ë(
	mnfs_£rvî
 *, 
	mnfs_fh
 *,

506 
	mnfs_Áâr
 *);

507 (*
	m£èâr
Ë(
	mdíåy
 *, 
	mnfs_Áâr
 *,

508 
	müâr
 *);

509 (*
	mlookup
Ë(
	möode
 *, 
	mq°r
 *,

510 
	mnfs_fh
 *, 
	mnfs_Áâr
 *);

511 (*
	mac˚ss
Ë(
	möode
 *, 
	mnfs_ac˚ss_íåy
 *);

512 (*
	mªadlök
)(
	möode
 *, 
	m∑ge
 *, ,

514 (*
	mªad
Ë(
	mnfs_ªad_d©a
 *);

515 (*
	mwrôe
Ë(
	mnfs_wrôe_d©a
 *);

516 (*
	mcommô
Ë(
	mnfs_wrôe_d©a
 *);

517 (*
	m¸óã
Ë(
	möode
 *, 
	mdíåy
 *,

518 
	müâr
 *, , 
	m«meid©a
 *);

519 (*
	mªmove
Ë(
	möode
 *, 
	mq°r
 *);

520 (*
	mu∆ök_£tup
Ë(
	mΩc_mesßge
 *,

521 
	mdíåy
 *, 
	mq°r
 *);

522 (*
	mu∆ök_d⁄e
Ë(
	mdíåy
 *, 
	mΩc_èsk
 *);

523 (*
	mª«me
Ë(
	möode
 *, 
	mq°r
 *,

524 
	möode
 *, 
	mq°r
 *);

525 (*
	mlök
Ë(
	möode
 *, öodê*, 
	mq°r
 *);

526 (*
	msymlök
Ë(
	möode
 *, 
	mq°r
 *, qstr *,

527 
	müâr
 *, 
	mnfs_fh
 *,

528 
	mnfs_Áâr
 *);

529 (*
	mmkdú
Ë(
	möode
 *, 
	mdíåy
 *, 
	müâr
 *);

530 (*
	mrmdú
Ë(
	möode
 *, 
	mq°r
 *);

531 (*
	mªaddú
Ë(
	mdíåy
 *, 
	mΩc_¸ed
 *,

532 
	mu64
, 
	m∑ge
 *, , );

533 (*
	mmknod
Ë(
	möode
 *, 
	mdíåy
 *, 
	müâr
 *,

534 
	mdev_t
);

535 (*
	m°©fs
Ë(
	mnfs_£rvî
 *, 
	mnfs_fh
 *,

536 
	mnfs_fs°©
 *);

537 (*
	mfsöfo
Ë(
	mnfs_£rvî
 *, 
	mnfs_fh
 *,

538 
	mnfs_fsöfo
 *);

539 (*
	m∑thc⁄f
Ë(
	mnfs_£rvî
 *, 
	mnfs_fh
 *,

540 
	mnfs_∑thc⁄f
 *);

541 
	mu32
 * (*
	mdecode_dúít
)(u32 *, 
	mnfs_íåy
 *, 
	m∂us
);

542 (*
	mªad_£tup
Ë(
	mnfs_ªad_d©a
 *);

543 (*
	mªad_d⁄e
Ë(
	mΩc_èsk
 *, 
	mnfs_ªad_d©a
 *);

544 (*
	mwrôe_£tup
Ë(
	mnfs_wrôe_d©a
 *, 
	mhow
);

545 (*
	mwrôe_d⁄e
Ë(
	mΩc_èsk
 *, 
	mnfs_wrôe_d©a
 *);

546 (*
	mcommô_£tup
Ë(
	mnfs_wrôe_d©a
 *, 
	mhow
);

547 (*
	mcommô_d⁄e
Ë(
	mΩc_èsk
 *, 
	mnfs_wrôe_d©a
 *);

548 (*
	mfûe_›í
Ë(
	möode
 *, 
	mfûe
 *);

549 (*
	mfûe_ªÀa£
Ë(
	möode
 *, 
	mfûe
 *);

550 (*
	mlock
)(
	mfûe
 *, , 
	mfûe_lock
 *);

551 (*
	m˛ór_a˛_ˇche
)(
	möode
 *);

554 
	#NFS_CALL
(
›
, 
öode
, 
¨gs
Ë
	`NFS_PROTO
(öode)->› 
	)
args

	@linux/nfsacl.h

12 #i‚de‡
__LINUX_NFSACL_H


13 
	#__LINUX_NFSACL_H


	)

15 
	#NFS_ACL_PROGRAM
 100227

	)

17 
	#ACLPROC2_GETACL
 1

	)

18 
	#ACLPROC2_SETACL
 2

	)

19 
	#ACLPROC2_GETATTR
 3

	)

20 
	#ACLPROC2_ACCESS
 4

	)

22 
	#ACLPROC3_GETACL
 1

	)

23 
	#ACLPROC3_SETACL
 2

	)

25 
	#NFS_ACL
 0x0001

	)

26 
	#NFS_ACLCNT
 0x0002

	)

27 
	#NFS_DFACL
 0x0004

	)

28 
	#NFS_DFACLCNT
 0x0008

	)

30 
	#NFS_ACL_DEFAULT
 0x1000

	)

	@linux/nfsd/auth.h

12 #i‚de‡
LINUX_NFSD_AUTH_H


13 
	#LINUX_NFSD_AUTH_H


	)

	@linux/nfsd/const.h

12 #i‚de‡
_LINUX_NFSD_CONST_H


13 
	#_LINUX_NFSD_CONST_H


	)

15 
	~<löux/nfs.h
>

16 
	~<löux/nfs2.h
>

17 
	~<löux/nfs3.h
>

18 
	~<löux/nfs4.h
>

20 
	#NFSSVC_MAXVERS
 3

	)

22 
	#NFSSVC_MAXBLKSIZE
 (32*1024)

	)

	@linux/nfsd/debug.h

12 #i‚de‡
LINUX_NFSD_DEBUG_H


13 
	#LINUX_NFSD_DEBUG_H


	)

15 
	~<löux/suƒpc/debug.h
>

17 #ifde‡
RPC_DEBUG


18 
	#NFSD_DEBUG
 1

	)

21 
	#NFSDDBG_SOCK
 0x0001

	)

22 
	#NFSDDBG_FH
 0x0002

	)

23 
	#NFSDDBG_EXPORT
 0x0004

	)

24 
	#NFSDDBG_SVC
 0x0008

	)

25 
	#NFSDDBG_PROC
 0x0010

	)

26 
	#NFSDDBG_FILEOP
 0x0020

	)

27 
	#NFSDDBG_AUTH
 0x0040

	)

28 
	#NFSDDBG_REPCACHE
 0x0080

	)

29 
	#NFSDDBG_XDR
 0x0100

	)

30 
	#NFSDDBG_LOCKD
 0x0200

	)

31 
	#NFSDDBG_ALL
 0x7FFF

	)

32 
	#NFSDDBG_NOCHANGE
 0xFFFF

	)

	@linux/nfsd/export.h

12 #i‚de‡
NFSD_EXPORT_H


13 
	#NFSD_EXPORT_H


	)

15 
	~<asm/ty≥s.h
>

17 
	#NFSCLNT_IDMAX
 1024

	)

18 
	#NFSCLNT_ADDRMAX
 16

	)

19 
	#NFSCLNT_KEYMAX
 32

	)

21 
	#NFSEXP_READONLY
 0x0001

	)

22 
	#NFSEXP_INSECURE_PORT
 0x0002

	)

23 
	#NFSEXP_ROOTSQUASH
 0x0004

	)

24 
	#NFSEXP_ALLSQUASH
 0x0008

	)

25 
	#NFSEXP_ASYNC
 0x0010

	)

26 
	#NFSEXP_GATHERED_WRITES
 0x0020

	)

28 
	#NFSEXP_NOHIDE
 0x0200

	)

29 
	#NFSEXP_NOSUBTREECHECK
 0x0400

	)

30 
	#NFSEXP_NOAUTHNLM
 0x0800

	)

31 
	#NFSEXP_MSNFS
 0x1000

	)

32 
	#NFSEXP_FSID
 0x2000

	)

33 
	#NFSEXP_CROSSMOUNT
 0x4000

	)

34 
	#NFSEXP_NOACL
 0x8000

	)

35 
	#NFSEXP_ALLFLAGS
 0xFE3F

	)

	@linux/nfsd/interface.h

12 #i‚de‡
LINUX_NFSD_INTERFACE_H


13 
	#LINUX_NFSD_INTERFACE_H


	)

	@linux/nfsd/nfsfh.h

12 #i‚de‡
_LINUX_NFSD_FH_H


13 
	#_LINUX_NFSD_FH_H


	)

15 
	~<asm/ty≥s.h
>

16 
	~<löux/nfsd/c⁄°.h
>

17 
	~<löux/nfsd/debug.h
>

19 
	snfs_fhba£_ﬁd
 {

20 
__u32
 
	mfb_dcookõ
;

21 
__u32
 
	mfb_öo
;

22 
__u32
 
	mfb_dúöo
;

23 
__u32
 
	mfb_dev
;

24 
__u32
 
	mfb_xdev
;

25 
__u32
 
	mfb_xöo
;

26 
__u32
 
	mfb_gíî©i⁄
;

29 
	snfs_fhba£_√w
 {

30 
__u8
 
	mfb_vîsi⁄
;

31 
__u8
 
	mfb_auth_ty≥
;

32 
__u8
 
	mfb_fsid_ty≥
;

33 
__u8
 
	mfb_fûeid_ty≥
;

34 
__u32
 
	mfb_auth
[1];

38 
	sknfsd_fh
 {

39 
	mfh_size
;

41 
nfs_fhba£_ﬁd
 
	mfh_ﬁd
;

42 
__u32
 
	mfh_∑d
[
NFS4_FHSIZE
/4];

43 
nfs_fhba£_√w
 
	mfh_√w
;

44 } 
	mfh_ba£
;

47 
	#ofh_dcookõ
 
fh_ba£
.
fh_ﬁd
.
fb_dcookõ


	)

48 
	#ofh_öo
 
fh_ba£
.
fh_ﬁd
.
fb_öo


	)

49 
	#ofh_dúöo
 
fh_ba£
.
fh_ﬁd
.
fb_dúöo


	)

50 
	#ofh_dev
 
fh_ba£
.
fh_ﬁd
.
fb_dev


	)

51 
	#ofh_xdev
 
fh_ba£
.
fh_ﬁd
.
fb_xdev


	)

52 
	#ofh_xöo
 
fh_ba£
.
fh_ﬁd
.
fb_xöo


	)

53 
	#ofh_gíî©i⁄
 
fh_ba£
.
fh_ﬁd
.
fb_gíî©i⁄


	)

55 
	#fh_vîsi⁄
 
fh_ba£
.
fh_√w
.
fb_vîsi⁄


	)

56 
	#fh_fsid_ty≥
 
fh_ba£
.
fh_√w
.
fb_fsid_ty≥


	)

57 
	#fh_auth_ty≥
 
fh_ba£
.
fh_√w
.
fb_auth_ty≥


	)

58 
	#fh_fûeid_ty≥
 
fh_ba£
.
fh_√w
.
fb_fûeid_ty≥


	)

59 
	#fh_auth
 
fh_ba£
.
fh_√w
.
fb_auth


	)

60 
	#fh_fsid
 
fh_ba£
.
fh_√w
.
fb_auth


	)

	@linux/nfsd/stats.h

12 #i‚de‡
LINUX_NFSD_STATS_H


13 
	#LINUX_NFSD_STATS_H


	)

15 
	~<löux/nfs4.h
>

17 
	snfsd_°©s
 {

18 
	mrchôs
;

19 
	mrcmis£s
;

20 
	mr˙oˇche
;

21 
	mfh_°Æe
;

22 
	mfh_lookup
;

23 
	mfh_™⁄
;

24 
	mfh_noˇche_dú
;

25 
	mfh_noˇche_n⁄dú
;

26 
	mio_ªad
;

27 
	mio_wrôe
;

28 
	mth_˙t
;

29 
	mth_ußge
[10];

30 
	mth_fuŒ˙t
;

31 
	mø_size
;

32 
	mø_dïth
[11];

36 
	#NFSD_USAGE_WRAP
 (
HZ
*1000000)

	)

	@linux/nfsd/xdr.h

12 #i‚de‡
LINUX_NFSD_H


13 
	#LINUX_NFSD_H


	)

15 
	~<löux/fs.h
>

16 
	~<löux/vfs.h
>

17 
	~<löux/nfs.h
>

19 
	snfsd_fh™dÀ
 {

20 
svc_fh
 
	mfh
;

23 
	snfsd_ßâørgs
 {

24 
svc_fh
 
	mfh
;

25 
üâr
 
	m©ås
;

28 
	snfsd_dú›¨gs
 {

29 
svc_fh
 
	mfh
;

30 * 
	m«me
;

31 
	mÀn
;

34 
	snfsd_ªad¨gs
 {

35 
svc_fh
 
	mfh
;

36 
__u32
 
	moff£t
;

37 
__u32
 
	mcou¡
;

38 
kvec
 
	mvec
[
RPCSVC_MAXPAGES
];

39 
	mvÀn
;

42 
	snfsd_wrôórgs
 {

43 
svc_fh
 
	mfh
;

44 
__u32
 
	moff£t
;

45 
	mÀn
;

46 
kvec
 
	mvec
[
RPCSVC_MAXPAGES
];

47 
	mvÀn
;

50 
	snfsd_¸óã¨gs
 {

51 
svc_fh
 
	mfh
;

52 * 
	m«me
;

53 
	mÀn
;

54 
üâr
 
	m©ås
;

57 
	snfsd_ª«mórgs
 {

58 
svc_fh
 
	mffh
;

59 * 
	m‚ame
;

60 
	mÊí
;

61 
svc_fh
 
	mtfh
;

62 * 
	mäame
;

63 
	méí
;

66 
	snfsd_ªadlök¨gs
 {

67 
svc_fh
 
	mfh
;

68 * 
	mbuf„r
;

71 
	snfsd_lök¨gs
 {

72 
svc_fh
 
	mffh
;

73 
svc_fh
 
	mtfh
;

74 * 
	mäame
;

75 
	méí
;

78 
	snfsd_symlök¨gs
 {

79 
svc_fh
 
	mffh
;

80 * 
	m‚ame
;

81 
	mÊí
;

82 * 
	mäame
;

83 
	méí
;

84 
üâr
 
	m©ås
;

87 
	snfsd_ªaddú¨gs
 {

88 
svc_fh
 
	mfh
;

89 
__u32
 
	mcookõ
;

90 
__u32
 
	mcou¡
;

91 
u32
 * 
	mbuf„r
;

94 
	snfsd_©å°©
 {

95 
svc_fh
 
	mfh
;

96 
k°©
 
	m°©
;

99 
	snfsd_dú›ªs
 {

100 
svc_fh
 
	mfh
;

101 
k°©
 
	m°©
;

104 
	snfsd_ªadlökªs
 {

105 
	mÀn
;

108 
	snfsd_ªadªs
 {

109 
svc_fh
 
	mfh
;

110 
	mcou¡
;

111 
k°©
 
	m°©
;

114 
	snfsd_ªaddúªs
 {

115 
	mcou¡
;

117 
ªaddú_cd
 
	mcomm⁄
;

118 
u32
 * 
	mbuf„r
;

119 
	mbuÊí
;

120 
u32
 * 
	moff£t
;

123 
	snfsd_°©f§es
 {

124 
k°©fs
 
	m°©s
;

127 
	unfsd_xdr°‹e
 {

128 
nfsd_ßâørgs
 
	mßâr
;

129 
nfsd_dú›¨gs
 
	mdú›
;

130 
nfsd_ªad¨gs
 
	mªad
;

131 
nfsd_wrôórgs
 
	mwrôe
;

132 
nfsd_¸óã¨gs
 
	m¸óã
;

133 
nfsd_ª«mórgs
 
	mª«me
;

134 
nfsd_lök¨gs
 
	mlök
;

135 
nfsd_symlök¨gs
 
	msymlök
;

136 
nfsd_ªaddú¨gs
 
	mªaddú
;

139 
	#NFS2_SVC_XDRSIZE
 (
nfsd_xdr°‹e
)

	)

	@linux/node.h

12 #i‚de‡
_LINUX_NODE_H_


13 
	#_LINUX_NODE_H_


	)

15 
	~<löux/sysdev.h
>

16 
	~<löux/˝umask.h
>

18 
	snode
 {

19 
sys_devi˚
 
	msysdev
;

22 
	#to_node
(
sys_devi˚
Ë
	`c⁄èöî_of
(sys_devi˚, 
node
, 
sysdev
)

	)

	@linux/nodemask.h

12 #i‚de‡
__LINUX_NODEMASK_H


13 
	#__LINUX_NODEMASK_H


	)

15 
	~<löux/kî√l.h
>

16 
	~<löux/thªads.h
>

17 
	~<löux/bôm≠.h
>

18 
	~<löux/numa.h
>

20 °ru˘ { 
DECLARE_BITMAP
(
bôs
, 
MAX_NUMNODES
); } 
	tnodemask_t
;

22 
	#node_£t
(
node
, 
d°
Ë
	`__node_£t
(“ode), &(d°))

	)

23 
	#node_˛ór
(
node
, 
d°
Ë
	`__node_˛ór
(“ode), &(d°))

	)

24 
	#nodes_£èŒ
(
d°
Ë
	`__nodes_£èŒ
(&(d°), 
MAX_NUMNODES
)

	)

25 
	#nodes_˛ór
(
d°
Ë
	`__nodes_˛ór
(&(d°), 
MAX_NUMNODES
)

	)

26 
	#node_is£t
(
node
, 
nodemask
Ë
	`ã°_bô
(“ode), (nodemask).
bôs
)

	)

27 
	#node_ã°_™d_£t
(
node
, 
nodemask
Ë
	`__node_ã°_™d_£t
(“ode), &“odemask))

	)

28 
	#nodes_™d
(
d°
, 
§c1
, 
§c2
Ë
	`__nodes_™d
(&(d°), &(§c1), &(§c2), 
MAX_NUMNODES
)

	)

29 
	#nodes_‹
(
d°
, 
§c1
, 
§c2
Ë
	`__nodes_‹
(&(d°), &(§c1), &(§c2), 
MAX_NUMNODES
)

	)

30 
	#nodes_x‹
(
d°
, 
§c1
, 
§c2
Ë
	`__nodes_x‹
(&(d°), &(§c1), &(§c2), 
MAX_NUMNODES
)

	)

31 
	#nodes_™dnŸ
(
d°
, 
§c1
, 
§c2
Ë
	`__nodes_™dnŸ
(&(d°), &(§c1), &(§c2), 
MAX_NUMNODES
)

	)

32 
	#nodes_com∂emít
(
d°
, 
§c
Ë
	`__nodes_com∂emít
(&(d°), &(§c), 
MAX_NUMNODES
)

	)

33 
	#nodes_equÆ
(
§c1
, 
§c2
Ë
	`__nodes_equÆ
(&(§c1), &(§c2), 
MAX_NUMNODES
)

	)

34 
	#nodes_öãr£˘s
(
§c1
, 
§c2
Ë
	`__nodes_öãr£˘s
(&(§c1), &(§c2), 
MAX_NUMNODES
)

	)

35 
	#nodes_sub£t
(
§c1
, 
§c2
Ë
	`__nodes_sub£t
(&(§c1), &(§c2), 
MAX_NUMNODES
)

	)

36 
	#nodes_em±y
(
§c
Ë
	`__nodes_em±y
(&(§c), 
MAX_NUMNODES
)

	)

37 
	#nodes_fuŒ
(
nodemask
Ë
	`__nodes_fuŒ
(&“odemask), 
MAX_NUMNODES
)

	)

38 
	#nodes_weight
(
nodemask
Ë
	`__nodes_weight
(&“odemask), 
MAX_NUMNODES
)

	)

39 
	#nodes_shi·_right
(
d°
, 
§c
, 
n
Ë
	`__nodes_shi·_right
(&(d°), &(§c), (n), 
MAX_NUMNODES
)

	)

40 
	#nodes_shi·_À·
(
d°
, 
§c
, 
n
Ë
	`__nodes_shi·_À·
(&(d°), &(§c), (n), 
MAX_NUMNODES
)

	)

41 
	#fú°_node
(
§c
Ë
	`__fú°_node
(&(§c))

	)

42 
	#√xt_node
(
n
, 
§c
Ë
	`__√xt_node
(“), &(§c))

	)

43 
	#nodemask_of_node
(
node
Ë({ 
	`ty≥of
(
_unu£d_nodemask_¨g_
Ë
m
; i‡((mË=()Ë{ m.
bôs
[0] = 1UL<<“ode); } { 
	`nodes_˛ór
(m); 
	`node_£t
(“ode), m); } m; })

	)

44 
	#fú°_un£t_node
(
mask
Ë
	`__fú°_un£t_node
(&(mask))

	)

45 
	#NODE_MASK_LAST_WORD
 
	`BITMAP_LAST_WORD_MASK
(
MAX_NUMNODES
)

	)

46 #i‡
MAX_NUMNODES
 <
BITS_PER_LONG


47 
	#NODE_MASK_ALL
 ((
nodemask_t
Ë{ { [
	`BITS_TO_LONGS
(
MAX_NUMNODES
)-1] = 
NODE_MASK_LAST_WORD
 } })

	)

49 
	#NODE_MASK_ALL
 ((
nodemask_t
Ë{ { [0 ... 
	`BITS_TO_LONGS
(
MAX_NUMNODES
)-2] = ~0UL, [BITS_TO_LONGS(MAX_NUMNODES)-1] = 
NODE_MASK_LAST_WORD
 } })

	)

51 
	#NODE_MASK_NONE
 ((
nodemask_t
Ë{ { [0 ... 
	`BITS_TO_LONGS
(
MAX_NUMNODES
)-1] = 0UL } })

	)

52 
	#nodes_addr
(
§c
Ë((§c).
bôs
)

	)

53 
	#nodemask_s˙¥ötf
(
buf
, 
Àn
, 
§c
Ë
	`__nodemask_s˙¥ötf
((buf), (Àn), &(§c), 
MAX_NUMNODES
)

	)

54 
	#nodemask_∑r£
(
ubuf
, 
uÀn
, 
d°
Ë
	`__nodemask_∑r£
((ubuf), (uÀn), &(d°), 
MAX_NUMNODES
)

	)

55 
	#nodñi°_s˙¥ötf
(
buf
, 
Àn
, 
§c
Ë
	`__nodñi°_s˙¥ötf
((buf), (Àn), &(§c), 
MAX_NUMNODES
)

	)

56 
	#nodñi°_∑r£
(
buf
, 
d°
Ë
	`__nodñi°_∑r£
((buf), &(d°), 
MAX_NUMNODES
)

	)

57 
	#node_ªm≠
(
ﬁdbô
, 
ﬁd
, 
√w
Ë
	`__node_ªm≠
((ﬁdbô), &(ﬁd), &“ew), 
MAX_NUMNODES
)

	)

58 
	#nodes_ªm≠
(
d°
, 
§c
, 
ﬁd
, 
√w
Ë
	`__nodes_ªm≠
(&(d°), &(§c), &(ﬁd), &“ew), 
MAX_NUMNODES
)

	)

59 #i‡
MAX_NUMNODES
 > 1

60 
	#f‹_óch_node_mask
(
node
, 
mask
Ë“odeË
	`fú°_node
(mask); (nodeË< 
MAX_NUMNODES
; (nodeË
	`√xt_node
(“ode), (mask)))

	)

62 
	#f‹_óch_node_mask
(
node
, 
mask
Ëi‡(!
	`nodes_em±y
(mask)Ë“odeË0; (nodeË< 1; (node)++)

	)

65 #i‡
MAX_NUMNODES
 > 1

66 
	#num_⁄löe_nodes
(Ë
	`nodes_weight
(
node_⁄löe_m≠
)

	)

67 
	#num_possibÀ_nodes
(Ë
	`nodes_weight
(
node_possibÀ_m≠
)

	)

68 
	#node_⁄löe
(
node
Ë
	`node_is£t
(“ode), 
node_⁄löe_m≠
)

	)

69 
	#node_possibÀ
(
node
Ë
	`node_is£t
(“ode), 
node_possibÀ_m≠
)

	)

70 
	#fú°_⁄löe_node
 
	`fú°_node
(
node_⁄löe_m≠
)

	)

71 
	#√xt_⁄löe_node
(
nid
Ë
	`√xt_node
(“id), 
node_⁄löe_m≠
)

	)

73 
	#num_⁄löe_nodes
(Ë1

	)

74 
	#num_possibÀ_nodes
(Ë1

	)

75 
	#node_⁄löe
(
node
Ë(“odeË=0)

	)

76 
	#node_possibÀ
(
node
Ë(“odeË=0)

	)

77 
	#fú°_⁄löe_node
 0

	)

78 
	#√xt_⁄löe_node
(
nid
Ë(
MAX_NUMNODES
)

	)

81 
	#™y_⁄löe_node
(
mask
Ë({ 
node
; 
	`f‹_óch_node_mask
“ode, (mask)Ëi‡(
	`node_⁄löe
“ode)Ë;Çode; })

	)

83 
	#node_£t_⁄löe
(
node
Ë
	`£t_bô
(“ode), 
node_⁄löe_m≠
.
bôs
)

	)

84 
	#node_£t_ofÊöe
(
node
Ë
	`˛ór_bô
(“ode), 
node_⁄löe_m≠
.
bôs
)

	)

86 
	#f‹_óch_node
(
node
Ë
	`f‹_óch_node_mask
(“ode), 
node_possibÀ_m≠
)

	)

87 
	#f‹_óch_⁄löe_node
(
node
Ë
	`f‹_óch_node_mask
(“ode), 
node_⁄löe_m≠
)

	)

	@linux/notifier.h

12 #i‚de‡
_LINUX_NOTIFIER_H


13 
	#_LINUX_NOTIFIER_H


	)

14 
	~<löux/î∫o.h
>

15 
	~<löux/muãx.h
>

16 
	~<löux/rw£m.h
>

18 
	snŸifõr_block
 {

19 (*
	mnŸifõr_ˇŒ
)(
	mnŸifõr_block
 *, , *);

20 
nŸifõr_block
 *
	m√xt
;

21 
	m¥i‹ôy
;

24 
	s©omic_nŸifõr_hód
 {

25 
•ölock_t
 
	mlock
;

26 
nŸifõr_block
 *
	mhód
;

29 
	sblockög_nŸifõr_hód
 {

30 
rw_£m≠h‹e
 
	mrw£m
;

31 
nŸifõr_block
 *
	mhód
;

34 
	søw_nŸifõr_hód
 {

35 
nŸifõr_block
 *
	mhód
;

38 
	#ATOMIC_INIT_NOTIFIER_HEAD
(
«me
Ëdÿ{ 
	`•ö_lock_öô
(&“ame)->
lock
); («me)->
hód
 = 
NULL
; } 0)

	)

39 
	#BLOCKING_INIT_NOTIFIER_HEAD
(
«me
Ëdÿ{ 
	`öô_rw£m
(&“ame)->
rw£m
); («me)->
hód
 = 
NULL
; } 0)

	)

40 
	#RAW_INIT_NOTIFIER_HEAD
(
«me
Ëdÿ{ («me)->
hód
 = 
NULL
; } 0)

	)

42 
	#ATOMIC_NOTIFIER_INIT
(
«me
Ë{ .
lock
 = 
	`__SPIN_LOCK_UNLOCKED
“ame.lock), .
hód
 = 
NULL
 }

	)

43 
	#BLOCKING_NOTIFIER_INIT
(
«me
Ë{ .
rw£m
 = 
	`__RWSEM_INITIALIZER
(“ame).rw£m), .
hód
 = 
NULL
 }

	)

44 
	#RAW_NOTIFIER_INIT
(
«me
Ë{ .
hód
 = 
NULL
 }

	)

46 
	#ATOMIC_NOTIFIER_HEAD
(
«me
Ë
©omic_nŸifõr_hód
Çamê
	`ATOMIC_NOTIFIER_INIT
“ame)

	)

47 
	#BLOCKING_NOTIFIER_HEAD
(
«me
Ë
blockög_nŸifõr_hód
Çamê
	`BLOCKING_NOTIFIER_INIT
“ame)

	)

48 
	#RAW_NOTIFIER_HEAD
(
«me
Ë
øw_nŸifõr_hód
Çamê
	`RAW_NOTIFIER_INIT
“ame)

	)

	@linux/numa.h

12 #i‚de‡
_LINUX_NUMA_H


13 
	#_LINUX_NUMA_H


	)

15 
	#NODES_SHIFT
 0

	)

17 
	#MAX_NUMNODES
 (1 << 
NODES_SHIFT
)

	)

	@linux/nvram.h

12 #i‚de‡
_LINUX_NVRAM_H


13 
	#_LINUX_NVRAM_H


	)

15 
	~<löux/io˘l.h
>

17 
	#NVRAM_INIT
 
	`_IO
('p', 0x40)

	)

18 
	#NVRAM_SETCKS
 
	`_IO
('p', 0x41)

	)

20 
	#NVRAM_FIRST_BYTE
 14

	)

22 
	#NVRAM_OFFSET
(
x
Ë((x)-
NVRAM_FIRST_BYTE
)

	)

	@linux/omap_csmi.h

12 #i‚de‡
_OMAP_CSMI_H_


13 
	#_OMAP_CSMI_H_


	)

15 
	~<asm/io˘l.h
>

17 
	#OMAP_CSMI_TTY_ENABLE_ACK
 
	`_IO
('c', 0)

	)

18 
	#OMAP_CSMI_TTY_DISABLE_ACK
 
	`_IO
('c', 1)

	)

19 
	#OMAP_CSMI_TTY_READ_UNACKED
 
	`_IOR
('c', 2, )

	)

20 
	#OMAP_CSMI_TTY_ACK
 
	`_IOW
('c', 3, )

	)

21 
	#OMAP_CSMI_TTY_WAKEUP_AND_ACK
 
	`_IOW
('c', 4, )

	)

	@linux/pagemap.h

12 #i‚de‡
_LINUX_PAGEMAP_H


13 
	#_LINUX_PAGEMAP_H


	)

15 
	~<löux/mm.h
>

16 
	~<löux/fs.h
>

17 
	~<löux/li°.h
>

18 
	~<löux/highmem.h
>

19 
	~<löux/compûî.h
>

20 
	~<asm/uac˚ss.h
>

21 
	~<löux/gÂ.h
>

23 
	#AS_EIO
 (
__GFP_BITS_SHIFT
 + 0)

	)

24 
	#AS_ENOSPC
 (
__GFP_BITS_SHIFT
 + 1)

	)

26 
	#PAGE_CACHE_SHIFT
 
PAGE_SHIFT


	)

27 
	#PAGE_CACHE_SIZE
 
PAGE_SIZE


	)

28 
	#PAGE_CACHE_MASK
 
PAGE_MASK


	)

29 
	#PAGE_CACHE_ALIGN
(
addr
Ë((◊ddr)+
PAGE_CACHE_SIZE
-1)&
PAGE_CACHE_MASK
)

	)

30 
	#∑ge_ˇche_gë
(
∑ge
Ë
	`gë_∑ge
’age)

	)

31 
	#∑ge_ˇche_ªÀa£
(
∑ge
Ë
	`put_∑ge
’age)

	)

	@linux/param.h

12 #i‚de‡
_LINUX_PARAM_H


13 
	#_LINUX_PARAM_H


	)

15 
	~<asm/∑øm.h
>

	@linux/patchkey.h

12 #i‚de‡
_LINUX_PATCHKEY_H_INDIRECT


16 #i‚de‡
_LINUX_PATCHKEY_H


17 
	#_LINUX_PATCHKEY_H


	)

19 
	~<ídün.h
>

21 #ifde‡
__BYTE_ORDER


22 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


23 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

24 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


25 
	#_PATCHKEY
(
id
Ë((id<<8)|0x00fd)

	)

	@linux/pci.h

12 #i‚de‡
LINUX_PCI_H


13 
	#LINUX_PCI_H


	)

15 
	~<löux/pci_ªgs.h
>

17 
	~<löux/pci_ids.h
>

19 
	#PCI_DEVFN
(
¶Ÿ
,
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

20 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

21 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

23 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

24 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00)

	)

25 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01)

	)

26 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02)

	)

27 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03)

	)

	@linux/pci_ids.h

12 
	#PCI_CLASS_NOT_DEFINED
 0x0000

	)

13 
	#PCI_CLASS_NOT_DEFINED_VGA
 0x0001

	)

15 
	#PCI_BASE_CLASS_STORAGE
 0x01

	)

16 
	#PCI_CLASS_STORAGE_SCSI
 0x0100

	)

17 
	#PCI_CLASS_STORAGE_IDE
 0x0101

	)

18 
	#PCI_CLASS_STORAGE_FLOPPY
 0x0102

	)

19 
	#PCI_CLASS_STORAGE_IPI
 0x0103

	)

20 
	#PCI_CLASS_STORAGE_RAID
 0x0104

	)

21 
	#PCI_CLASS_STORAGE_SAS
 0x0107

	)

22 
	#PCI_CLASS_STORAGE_OTHER
 0x0180

	)

24 
	#PCI_BASE_CLASS_NETWORK
 0x02

	)

25 
	#PCI_CLASS_NETWORK_ETHERNET
 0x0200

	)

26 
	#PCI_CLASS_NETWORK_TOKEN_RING
 0x0201

	)

27 
	#PCI_CLASS_NETWORK_FDDI
 0x0202

	)

28 
	#PCI_CLASS_NETWORK_ATM
 0x0203

	)

29 
	#PCI_CLASS_NETWORK_OTHER
 0x0280

	)

31 
	#PCI_BASE_CLASS_DISPLAY
 0x03

	)

32 
	#PCI_CLASS_DISPLAY_VGA
 0x0300

	)

33 
	#PCI_CLASS_DISPLAY_XGA
 0x0301

	)

34 
	#PCI_CLASS_DISPLAY_3D
 0x0302

	)

35 
	#PCI_CLASS_DISPLAY_OTHER
 0x0380

	)

37 
	#PCI_BASE_CLASS_MULTIMEDIA
 0x04

	)

38 
	#PCI_CLASS_MULTIMEDIA_VIDEO
 0x0400

	)

39 
	#PCI_CLASS_MULTIMEDIA_AUDIO
 0x0401

	)

40 
	#PCI_CLASS_MULTIMEDIA_PHONE
 0x0402

	)

41 
	#PCI_CLASS_MULTIMEDIA_OTHER
 0x0480

	)

43 
	#PCI_BASE_CLASS_MEMORY
 0x05

	)

44 
	#PCI_CLASS_MEMORY_RAM
 0x0500

	)

45 
	#PCI_CLASS_MEMORY_FLASH
 0x0501

	)

46 
	#PCI_CLASS_MEMORY_OTHER
 0x0580

	)

48 
	#PCI_BASE_CLASS_BRIDGE
 0x06

	)

49 
	#PCI_CLASS_BRIDGE_HOST
 0x0600

	)

50 
	#PCI_CLASS_BRIDGE_ISA
 0x0601

	)

51 
	#PCI_CLASS_BRIDGE_EISA
 0x0602

	)

52 
	#PCI_CLASS_BRIDGE_MC
 0x0603

	)

53 
	#PCI_CLASS_BRIDGE_PCI
 0x0604

	)

54 
	#PCI_CLASS_BRIDGE_PCMCIA
 0x0605

	)

55 
	#PCI_CLASS_BRIDGE_NUBUS
 0x0606

	)

56 
	#PCI_CLASS_BRIDGE_CARDBUS
 0x0607

	)

57 
	#PCI_CLASS_BRIDGE_RACEWAY
 0x0608

	)

58 
	#PCI_CLASS_BRIDGE_OTHER
 0x0680

	)

60 
	#PCI_BASE_CLASS_COMMUNICATION
 0x07

	)

61 
	#PCI_CLASS_COMMUNICATION_SERIAL
 0x0700

	)

62 
	#PCI_CLASS_COMMUNICATION_PARALLEL
 0x0701

	)

63 
	#PCI_CLASS_COMMUNICATION_MULTISERIAL
 0x0702

	)

64 
	#PCI_CLASS_COMMUNICATION_MODEM
 0x0703

	)

65 
	#PCI_CLASS_COMMUNICATION_OTHER
 0x0780

	)

67 
	#PCI_BASE_CLASS_SYSTEM
 0x08

	)

68 
	#PCI_CLASS_SYSTEM_PIC
 0x0800

	)

69 
	#PCI_CLASS_SYSTEM_PIC_IOAPIC
 0x080010

	)

70 
	#PCI_CLASS_SYSTEM_PIC_IOXAPIC
 0x080020

	)

71 
	#PCI_CLASS_SYSTEM_DMA
 0x0801

	)

72 
	#PCI_CLASS_SYSTEM_TIMER
 0x0802

	)

73 
	#PCI_CLASS_SYSTEM_RTC
 0x0803

	)

74 
	#PCI_CLASS_SYSTEM_PCI_HOTPLUG
 0x0804

	)

75 
	#PCI_CLASS_SYSTEM_SDHCI
 0x0805

	)

76 
	#PCI_CLASS_SYSTEM_OTHER
 0x0880

	)

78 
	#PCI_BASE_CLASS_INPUT
 0x09

	)

79 
	#PCI_CLASS_INPUT_KEYBOARD
 0x0900

	)

80 
	#PCI_CLASS_INPUT_PEN
 0x0901

	)

81 
	#PCI_CLASS_INPUT_MOUSE
 0x0902

	)

82 
	#PCI_CLASS_INPUT_SCANNER
 0x0903

	)

83 
	#PCI_CLASS_INPUT_GAMEPORT
 0x0904

	)

84 
	#PCI_CLASS_INPUT_OTHER
 0x0980

	)

86 
	#PCI_BASE_CLASS_DOCKING
 0x0a

	)

87 
	#PCI_CLASS_DOCKING_GENERIC
 0x0a00

	)

88 
	#PCI_CLASS_DOCKING_OTHER
 0x0a80

	)

90 
	#PCI_BASE_CLASS_PROCESSOR
 0x0b

	)

91 
	#PCI_CLASS_PROCESSOR_386
 0x0b00

	)

92 
	#PCI_CLASS_PROCESSOR_486
 0x0b01

	)

93 
	#PCI_CLASS_PROCESSOR_PENTIUM
 0x0b02

	)

94 
	#PCI_CLASS_PROCESSOR_ALPHA
 0x0b10

	)

95 
	#PCI_CLASS_PROCESSOR_POWERPC
 0x0b20

	)

96 
	#PCI_CLASS_PROCESSOR_MIPS
 0x0b30

	)

97 
	#PCI_CLASS_PROCESSOR_CO
 0x0b40

	)

99 
	#PCI_BASE_CLASS_SERIAL
 0x0c

	)

100 
	#PCI_CLASS_SERIAL_FIREWIRE
 0x0c00

	)

101 
	#PCI_CLASS_SERIAL_ACCESS
 0x0c01

	)

102 
	#PCI_CLASS_SERIAL_SSA
 0x0c02

	)

103 
	#PCI_CLASS_SERIAL_USB
 0x0c03

	)

104 
	#PCI_CLASS_SERIAL_USB_UHCI
 0x0c0300

	)

105 
	#PCI_CLASS_SERIAL_USB_OHCI
 0x0c0310

	)

106 
	#PCI_CLASS_SERIAL_USB_EHCI
 0x0c0320

	)

107 
	#PCI_CLASS_SERIAL_FIBER
 0x0c04

	)

108 
	#PCI_CLASS_SERIAL_SMBUS
 0x0c05

	)

110 
	#PCI_BASE_CLASS_INTELLIGENT
 0x0e

	)

111 
	#PCI_CLASS_INTELLIGENT_I2O
 0x0e00

	)

113 
	#PCI_BASE_CLASS_SATELLITE
 0x0f

	)

114 
	#PCI_CLASS_SATELLITE_TV
 0x0f00

	)

115 
	#PCI_CLASS_SATELLITE_AUDIO
 0x0f01

	)

116 
	#PCI_CLASS_SATELLITE_VOICE
 0x0f03

	)

117 
	#PCI_CLASS_SATELLITE_DATA
 0x0f04

	)

119 
	#PCI_BASE_CLASS_CRYPT
 0x10

	)

120 
	#PCI_CLASS_CRYPT_NETWORK
 0x1000

	)

121 
	#PCI_CLASS_CRYPT_ENTERTAINMENT
 0x1001

	)

122 
	#PCI_CLASS_CRYPT_OTHER
 0x1080

	)

124 
	#PCI_BASE_CLASS_SIGNAL_PROCESSING
 0x11

	)

125 
	#PCI_CLASS_SP_DPIO
 0x1100

	)

126 
	#PCI_CLASS_SP_OTHER
 0x1180

	)

128 
	#PCI_CLASS_OTHERS
 0xff

	)

130 
	#PCI_VENDOR_ID_DYNALINK
 0x0675

	)

131 
	#PCI_DEVICE_ID_DYNALINK_IS64PH
 0x1702

	)

133 
	#PCI_VENDOR_ID_BERKOM
 0x0871

	)

134 
	#PCI_DEVICE_ID_BERKOM_A1T
 0xfÁ1

	)

135 
	#PCI_DEVICE_ID_BERKOM_T_CONCEPT
 0xfÁ2

	)

136 
	#PCI_DEVICE_ID_BERKOM_A4T
 0xfÁ4

	)

137 
	#PCI_DEVICE_ID_BERKOM_SCITEL_QUADRO
 0xfÁ8

	)

139 
	#PCI_VENDOR_ID_COMPAQ
 0x0e11

	)

140 
	#PCI_DEVICE_ID_COMPAQ_TOKENRING
 0x0508

	)

141 
	#PCI_DEVICE_ID_COMPAQ_TACHYON
 0xa0fc

	)

142 
	#PCI_DEVICE_ID_COMPAQ_SMART2P
 0x´10

	)

143 
	#PCI_DEVICE_ID_COMPAQ_NETEL100
 0x´32

	)

144 
	#PCI_DEVICE_ID_COMPAQ_NETEL10
 0x´34

	)

145 
	#PCI_DEVICE_ID_COMPAQ_TRIFLEX_IDE
 0x´33

	)

146 
	#PCI_DEVICE_ID_COMPAQ_NETFLEX3I
 0x´35

	)

147 
	#PCI_DEVICE_ID_COMPAQ_NETEL100D
 0x´40

	)

148 
	#PCI_DEVICE_ID_COMPAQ_NETEL100PI
 0x´43

	)

149 
	#PCI_DEVICE_ID_COMPAQ_NETEL100I
 0xb011

	)

150 
	#PCI_DEVICE_ID_COMPAQ_CISS
 0xb060

	)

151 
	#PCI_DEVICE_ID_COMPAQ_CISSB
 0xb178

	)

152 
	#PCI_DEVICE_ID_COMPAQ_CISSC
 0x46

	)

153 
	#PCI_DEVICE_ID_COMPAQ_THUNDER
 0xf130

	)

154 
	#PCI_DEVICE_ID_COMPAQ_NETFLEX3B
 0xf150

	)

156 
	#PCI_VENDOR_ID_NCR
 0x1000

	)

157 
	#PCI_VENDOR_ID_LSI_LOGIC
 0x1000

	)

158 
	#PCI_DEVICE_ID_NCR_53C810
 0x0001

	)

159 
	#PCI_DEVICE_ID_NCR_53C820
 0x0002

	)

160 
	#PCI_DEVICE_ID_NCR_53C825
 0x0003

	)

161 
	#PCI_DEVICE_ID_NCR_53C815
 0x0004

	)

162 
	#PCI_DEVICE_ID_LSI_53C810AP
 0x0005

	)

163 
	#PCI_DEVICE_ID_NCR_53C860
 0x0006

	)

164 
	#PCI_DEVICE_ID_LSI_53C1510
 0x000a

	)

165 
	#PCI_DEVICE_ID_NCR_53C896
 0x000b

	)

166 
	#PCI_DEVICE_ID_NCR_53C895
 0x000c

	)

167 
	#PCI_DEVICE_ID_NCR_53C885
 0x000d

	)

168 
	#PCI_DEVICE_ID_NCR_53C875
 0x000f

	)

169 
	#PCI_DEVICE_ID_NCR_53C1510
 0x0010

	)

170 
	#PCI_DEVICE_ID_LSI_53C895A
 0x0012

	)

171 
	#PCI_DEVICE_ID_LSI_53C875A
 0x0013

	)

172 
	#PCI_DEVICE_ID_LSI_53C1010_33
 0x0020

	)

173 
	#PCI_DEVICE_ID_LSI_53C1010_66
 0x0021

	)

174 
	#PCI_DEVICE_ID_LSI_53C1030
 0x0030

	)

175 
	#PCI_DEVICE_ID_LSI_1030_53C1035
 0x0032

	)

176 
	#PCI_DEVICE_ID_LSI_53C1035
 0x0040

	)

177 
	#PCI_DEVICE_ID_NCR_53C875J
 0x008f

	)

178 
	#PCI_DEVICE_ID_LSI_FC909
 0x0621

	)

179 
	#PCI_DEVICE_ID_LSI_FC929
 0x0622

	)

180 
	#PCI_DEVICE_ID_LSI_FC929_LAN
 0x0623

	)

181 
	#PCI_DEVICE_ID_LSI_FC919
 0x0624

	)

182 
	#PCI_DEVICE_ID_LSI_FC919_LAN
 0x0625

	)

183 
	#PCI_DEVICE_ID_LSI_FC929X
 0x0626

	)

184 
	#PCI_DEVICE_ID_LSI_FC939X
 0x0642

	)

185 
	#PCI_DEVICE_ID_LSI_FC949X
 0x0640

	)

186 
	#PCI_DEVICE_ID_LSI_FC949ES
 0x0646

	)

187 
	#PCI_DEVICE_ID_LSI_FC919X
 0x0628

	)

188 
	#PCI_DEVICE_ID_NCR_YELLOWFIN
 0x0701

	)

189 
	#PCI_DEVICE_ID_LSI_61C102
 0x0901

	)

190 
	#PCI_DEVICE_ID_LSI_63C815
 0x1000

	)

191 
	#PCI_DEVICE_ID_LSI_SAS1064
 0x0050

	)

192 
	#PCI_DEVICE_ID_LSI_SAS1064R
 0x0411

	)

193 
	#PCI_DEVICE_ID_LSI_SAS1066
 0x005E

	)

194 
	#PCI_DEVICE_ID_LSI_SAS1068
 0x0054

	)

195 
	#PCI_DEVICE_ID_LSI_SAS1064A
 0x005C

	)

196 
	#PCI_DEVICE_ID_LSI_SAS1064E
 0x0056

	)

197 
	#PCI_DEVICE_ID_LSI_SAS1066E
 0x005A

	)

198 
	#PCI_DEVICE_ID_LSI_SAS1068E
 0x0058

	)

199 
	#PCI_DEVICE_ID_LSI_SAS1078
 0x0060

	)

201 
	#PCI_VENDOR_ID_ATI
 0x1002

	)

203 
	#PCI_DEVICE_ID_ATI_68800
 0x4158

	)

204 
	#PCI_DEVICE_ID_ATI_215CT222
 0x4354

	)

205 
	#PCI_DEVICE_ID_ATI_210888CX
 0x4358

	)

206 
	#PCI_DEVICE_ID_ATI_215ET222
 0x4554

	)

208 
	#PCI_DEVICE_ID_ATI_215GB
 0x4742

	)

209 
	#PCI_DEVICE_ID_ATI_215GD
 0x4744

	)

210 
	#PCI_DEVICE_ID_ATI_215GI
 0x4749

	)

211 
	#PCI_DEVICE_ID_ATI_215GP
 0x4750

	)

212 
	#PCI_DEVICE_ID_ATI_215GQ
 0x4751

	)

213 
	#PCI_DEVICE_ID_ATI_215XL
 0x4752

	)

214 
	#PCI_DEVICE_ID_ATI_215GT
 0x4754

	)

215 
	#PCI_DEVICE_ID_ATI_215GTB
 0x4755

	)

216 
	#PCI_DEVICE_ID_ATI_215_IV
 0x4756

	)

217 
	#PCI_DEVICE_ID_ATI_215_IW
 0x4757

	)

218 
	#PCI_DEVICE_ID_ATI_215_IZ
 0x475A

	)

219 
	#PCI_DEVICE_ID_ATI_210888GX
 0x4758

	)

220 
	#PCI_DEVICE_ID_ATI_215_LB
 0x4c42

	)

221 
	#PCI_DEVICE_ID_ATI_215_LD
 0x4c44

	)

222 
	#PCI_DEVICE_ID_ATI_215_LG
 0x4c47

	)

223 
	#PCI_DEVICE_ID_ATI_215_LI
 0x4c49

	)

224 
	#PCI_DEVICE_ID_ATI_215_LM
 0x4c4D

	)

225 
	#PCI_DEVICE_ID_ATI_215_LN
 0x4c4E

	)

226 
	#PCI_DEVICE_ID_ATI_215_LR
 0x4c52

	)

227 
	#PCI_DEVICE_ID_ATI_215_LS
 0x4c53

	)

228 
	#PCI_DEVICE_ID_ATI_264_LT
 0x4c54

	)

230 
	#PCI_DEVICE_ID_ATI_264VT
 0x5654

	)

231 
	#PCI_DEVICE_ID_ATI_264VU
 0x5655

	)

232 
	#PCI_DEVICE_ID_ATI_264VV
 0x5656

	)

234 
	#PCI_DEVICE_ID_ATI_RAGE128_RE
 0x5245

	)

235 
	#PCI_DEVICE_ID_ATI_RAGE128_RF
 0x5246

	)

236 
	#PCI_DEVICE_ID_ATI_RAGE128_RG
 0x5247

	)

238 
	#PCI_DEVICE_ID_ATI_RAGE128_RK
 0x524b

	)

239 
	#PCI_DEVICE_ID_ATI_RAGE128_RL
 0x524c

	)

240 
	#PCI_DEVICE_ID_ATI_RAGE128_SE
 0x5345

	)

241 
	#PCI_DEVICE_ID_ATI_RAGE128_SF
 0x5346

	)

242 
	#PCI_DEVICE_ID_ATI_RAGE128_SG
 0x5347

	)

243 
	#PCI_DEVICE_ID_ATI_RAGE128_SH
 0x5348

	)

244 
	#PCI_DEVICE_ID_ATI_RAGE128_SK
 0x534b

	)

245 
	#PCI_DEVICE_ID_ATI_RAGE128_SL
 0x534c

	)

246 
	#PCI_DEVICE_ID_ATI_RAGE128_SM
 0x534d

	)

247 
	#PCI_DEVICE_ID_ATI_RAGE128_SN
 0x534e

	)

249 
	#PCI_DEVICE_ID_ATI_RAGE128_TF
 0x5446

	)

250 
	#PCI_DEVICE_ID_ATI_RAGE128_TL
 0x544c

	)

251 
	#PCI_DEVICE_ID_ATI_RAGE128_TR
 0x5452

	)

252 
	#PCI_DEVICE_ID_ATI_RAGE128_TS
 0x5453

	)

253 
	#PCI_DEVICE_ID_ATI_RAGE128_TT
 0x5454

	)

254 
	#PCI_DEVICE_ID_ATI_RAGE128_TU
 0x5455

	)

256 
	#PCI_DEVICE_ID_ATI_RAGE128_LE
 0x4c45

	)

257 
	#PCI_DEVICE_ID_ATI_RAGE128_LF
 0x4c46

	)

259 
	#PCI_DEVICE_ID_ATI_RAGE128_MF
 0x4d46

	)

260 
	#PCI_DEVICE_ID_ATI_RAGE128_ML
 0x4d4c

	)

262 
	#PCI_DEVICE_ID_ATI_RAGE128_PA
 0x5041

	)

263 
	#PCI_DEVICE_ID_ATI_RAGE128_PB
 0x5042

	)

264 
	#PCI_DEVICE_ID_ATI_RAGE128_PC
 0x5043

	)

265 
	#PCI_DEVICE_ID_ATI_RAGE128_PD
 0x5044

	)

266 
	#PCI_DEVICE_ID_ATI_RAGE128_PE
 0x5045

	)

267 
	#PCI_DEVICE_ID_ATI_RAGE128_PF
 0x5046

	)

269 
	#PCI_DEVICE_ID_ATI_RAGE128_PG
 0x5047

	)

270 
	#PCI_DEVICE_ID_ATI_RAGE128_PH
 0x5048

	)

271 
	#PCI_DEVICE_ID_ATI_RAGE128_PI
 0x5049

	)

272 
	#PCI_DEVICE_ID_ATI_RAGE128_PJ
 0x504A

	)

273 
	#PCI_DEVICE_ID_ATI_RAGE128_PK
 0x504B

	)

274 
	#PCI_DEVICE_ID_ATI_RAGE128_PL
 0x504C

	)

275 
	#PCI_DEVICE_ID_ATI_RAGE128_PM
 0x504D

	)

276 
	#PCI_DEVICE_ID_ATI_RAGE128_PN
 0x504E

	)

277 
	#PCI_DEVICE_ID_ATI_RAGE128_PO
 0x504F

	)

278 
	#PCI_DEVICE_ID_ATI_RAGE128_PP
 0x5050

	)

279 
	#PCI_DEVICE_ID_ATI_RAGE128_PQ
 0x5051

	)

280 
	#PCI_DEVICE_ID_ATI_RAGE128_PR
 0x5052

	)

281 
	#PCI_DEVICE_ID_ATI_RAGE128_PS
 0x5053

	)

282 
	#PCI_DEVICE_ID_ATI_RAGE128_PT
 0x5054

	)

283 
	#PCI_DEVICE_ID_ATI_RAGE128_PU
 0x5055

	)

284 
	#PCI_DEVICE_ID_ATI_RAGE128_PV
 0x5056

	)

285 
	#PCI_DEVICE_ID_ATI_RAGE128_PW
 0x5057

	)

286 
	#PCI_DEVICE_ID_ATI_RAGE128_PX
 0x5058

	)

288 
	#PCI_DEVICE_ID_ATI_RADEON_QD
 0x5144

	)

289 
	#PCI_DEVICE_ID_ATI_RADEON_QE
 0x5145

	)

290 
	#PCI_DEVICE_ID_ATI_RADEON_QF
 0x5146

	)

291 
	#PCI_DEVICE_ID_ATI_RADEON_QG
 0x5147

	)

293 
	#PCI_DEVICE_ID_ATI_RADEON_QY
 0x5159

	)

294 
	#PCI_DEVICE_ID_ATI_RADEON_QZ
 0x515a

	)

296 
	#PCI_DEVICE_ID_ATI_RADEON_QL
 0x514c

	)

297 
	#PCI_DEVICE_ID_ATI_RADEON_QN
 0x514e

	)

298 
	#PCI_DEVICE_ID_ATI_RADEON_QO
 0x514f

	)

299 
	#PCI_DEVICE_ID_ATI_RADEON_Ql
 0x516c

	)

300 
	#PCI_DEVICE_ID_ATI_RADEON_BB
 0x4242

	)

302 
	#PCI_DEVICE_ID_ATI_RADEON_QM
 0x514d

	)

304 
	#PCI_DEVICE_ID_ATI_RADEON_QW
 0x5157

	)

305 
	#PCI_DEVICE_ID_ATI_RADEON_QX
 0x5158

	)

307 
	#PCI_DEVICE_ID_ATI_RADEON_Id
 0x4964

	)

308 
	#PCI_DEVICE_ID_ATI_RADEON_Ie
 0x4965

	)

309 
	#PCI_DEVICE_ID_ATI_RADEON_If
 0x4966

	)

310 
	#PCI_DEVICE_ID_ATI_RADEON_Ig
 0x4967

	)

312 
	#PCI_DEVICE_ID_ATI_RADEON_Ya
 0x5961

	)

313 
	#PCI_DEVICE_ID_ATI_RADEON_Yd
 0x5964

	)

315 
	#PCI_DEVICE_ID_ATI_RADEON_ND
 0x4e44

	)

316 
	#PCI_DEVICE_ID_ATI_RADEON_NE
 0x4e45

	)

317 
	#PCI_DEVICE_ID_ATI_RADEON_NF
 0x4e46

	)

318 
	#PCI_DEVICE_ID_ATI_RADEON_NG
 0x4e47

	)

320 
	#PCI_DEVICE_ID_ATI_RADEON_LY
 0x4c59

	)

321 
	#PCI_DEVICE_ID_ATI_RADEON_LZ
 0x4c5a

	)

323 
	#PCI_DEVICE_ID_ATI_RADEON_LW
 0x4c57

	)

324 
	#PCI_DEVICE_ID_ATI_RADEON_LX
 0x4c58

	)

326 
	#PCI_DEVICE_ID_ATI_RADEON_Ld
 0x4c64

	)

327 
	#PCI_DEVICE_ID_ATI_RADEON_Le
 0x4c65

	)

328 
	#PCI_DEVICE_ID_ATI_RADEON_Lf
 0x4c66

	)

329 
	#PCI_DEVICE_ID_ATI_RADEON_Lg
 0x4c67

	)

331 
	#PCI_DEVICE_ID_ATI_RS100
 0xˇb0

	)

332 
	#PCI_DEVICE_ID_ATI_RS200
 0xˇb2

	)

333 
	#PCI_DEVICE_ID_ATI_RS200_B
 0xcbb2

	)

334 
	#PCI_DEVICE_ID_ATI_RS250
 0xˇb3

	)

335 
	#PCI_DEVICE_ID_ATI_RS300_100
 0x5830

	)

336 
	#PCI_DEVICE_ID_ATI_RS300_133
 0x5831

	)

337 
	#PCI_DEVICE_ID_ATI_RS300_166
 0x5832

	)

338 
	#PCI_DEVICE_ID_ATI_RS300_200
 0x5833

	)

339 
	#PCI_DEVICE_ID_ATI_RS350_100
 0x7830

	)

340 
	#PCI_DEVICE_ID_ATI_RS350_133
 0x7831

	)

341 
	#PCI_DEVICE_ID_ATI_RS350_166
 0x7832

	)

342 
	#PCI_DEVICE_ID_ATI_RS350_200
 0x7833

	)

343 
	#PCI_DEVICE_ID_ATI_RS400_100
 0x5a30

	)

344 
	#PCI_DEVICE_ID_ATI_RS400_133
 0x5a31

	)

345 
	#PCI_DEVICE_ID_ATI_RS400_166
 0x5a32

	)

346 
	#PCI_DEVICE_ID_ATI_RS400_200
 0x5a33

	)

347 
	#PCI_DEVICE_ID_ATI_RS480
 0x5950

	)

349 
	#PCI_DEVICE_ID_ATI_IXP200_IDE
 0x4349

	)

350 
	#PCI_DEVICE_ID_ATI_IXP200_SMBUS
 0x4353

	)

351 
	#PCI_DEVICE_ID_ATI_IXP300_SMBUS
 0x4363

	)

352 
	#PCI_DEVICE_ID_ATI_IXP300_IDE
 0x4369

	)

353 
	#PCI_DEVICE_ID_ATI_IXP300_SATA
 0x436e

	)

354 
	#PCI_DEVICE_ID_ATI_IXP400_SMBUS
 0x4372

	)

355 
	#PCI_DEVICE_ID_ATI_IXP400_IDE
 0x4376

	)

356 
	#PCI_DEVICE_ID_ATI_IXP400_SATA
 0x4379

	)

357 
	#PCI_DEVICE_ID_ATI_IXP400_SATA2
 0x437a

	)

358 
	#PCI_DEVICE_ID_ATI_IXP600_SATA
 0x4380

	)

359 
	#PCI_DEVICE_ID_ATI_IXP600_SRAID
 0x4381

	)

360 
	#PCI_DEVICE_ID_ATI_IXP600_IDE
 0x438c

	)

362 
	#PCI_VENDOR_ID_VLSI
 0x1004

	)

363 
	#PCI_DEVICE_ID_VLSI_82C592
 0x0005

	)

364 
	#PCI_DEVICE_ID_VLSI_82C593
 0x0006

	)

365 
	#PCI_DEVICE_ID_VLSI_82C594
 0x0007

	)

366 
	#PCI_DEVICE_ID_VLSI_82C597
 0x0009

	)

367 
	#PCI_DEVICE_ID_VLSI_82C541
 0x000c

	)

368 
	#PCI_DEVICE_ID_VLSI_82C543
 0x000d

	)

369 
	#PCI_DEVICE_ID_VLSI_82C532
 0x0101

	)

370 
	#PCI_DEVICE_ID_VLSI_82C534
 0x0102

	)

371 
	#PCI_DEVICE_ID_VLSI_82C535
 0x0104

	)

372 
	#PCI_DEVICE_ID_VLSI_82C147
 0x0105

	)

373 
	#PCI_DEVICE_ID_VLSI_VAS96011
 0x0702

	)

375 
	#PCI_VENDOR_ID_ADL
 0x1005

	)

376 
	#PCI_DEVICE_ID_ADL_2301
 0x2301

	)

378 
	#PCI_VENDOR_ID_NS
 0x100b

	)

379 
	#PCI_DEVICE_ID_NS_87415
 0x0002

	)

380 
	#PCI_DEVICE_ID_NS_87560_LIO
 0x000e

	)

381 
	#PCI_DEVICE_ID_NS_87560_USB
 0x0012

	)

382 
	#PCI_DEVICE_ID_NS_83815
 0x0020

	)

383 
	#PCI_DEVICE_ID_NS_83820
 0x0022

	)

384 
	#PCI_DEVICE_ID_NS_CS5535_ISA
 0x002b

	)

385 
	#PCI_DEVICE_ID_NS_CS5535_IDE
 0x002d

	)

386 
	#PCI_DEVICE_ID_NS_CS5535_AUDIO
 0x002e

	)

387 
	#PCI_DEVICE_ID_NS_CS5535_USB
 0x002f

	)

388 
	#PCI_DEVICE_ID_NS_CS5535_VIDEO
 0x0030

	)

389 
	#PCI_DEVICE_ID_NS_SATURN
 0x0035

	)

390 
	#PCI_DEVICE_ID_NS_SCx200_BRIDGE
 0x0500

	)

391 
	#PCI_DEVICE_ID_NS_SCx200_SMI
 0x0501

	)

392 
	#PCI_DEVICE_ID_NS_SCx200_IDE
 0x0502

	)

393 
	#PCI_DEVICE_ID_NS_SCx200_AUDIO
 0x0503

	)

394 
	#PCI_DEVICE_ID_NS_SCx200_VIDEO
 0x0504

	)

395 
	#PCI_DEVICE_ID_NS_SCx200_XBUS
 0x0505

	)

396 
	#PCI_DEVICE_ID_NS_SC1100_BRIDGE
 0x0510

	)

397 
	#PCI_DEVICE_ID_NS_SC1100_SMI
 0x0511

	)

398 
	#PCI_DEVICE_ID_NS_SC1100_XBUS
 0x0515

	)

399 
	#PCI_DEVICE_ID_NS_87410
 0xd001

	)

401 
	#PCI_DEVICE_ID_NS_CS5535_HOST_BRIDGE
 0x0028

	)

402 
	#PCI_DEVICE_ID_NS_CS5535_ISA_BRIDGE
 0x002b

	)

404 
	#PCI_VENDOR_ID_TSENG
 0x100c

	)

405 
	#PCI_DEVICE_ID_TSENG_W32P_2
 0x3202

	)

406 
	#PCI_DEVICE_ID_TSENG_W32P_b
 0x3205

	)

407 
	#PCI_DEVICE_ID_TSENG_W32P_c
 0x3206

	)

408 
	#PCI_DEVICE_ID_TSENG_W32P_d
 0x3207

	)

409 
	#PCI_DEVICE_ID_TSENG_ET6000
 0x3208

	)

411 
	#PCI_VENDOR_ID_WEITEK
 0x100e

	)

412 
	#PCI_DEVICE_ID_WEITEK_P9000
 0x9001

	)

413 
	#PCI_DEVICE_ID_WEITEK_P9100
 0x9100

	)

415 
	#PCI_VENDOR_ID_DEC
 0x1011

	)

416 
	#PCI_DEVICE_ID_DEC_BRD
 0x0001

	)

417 
	#PCI_DEVICE_ID_DEC_TULIP
 0x0002

	)

418 
	#PCI_DEVICE_ID_DEC_TGA
 0x0004

	)

419 
	#PCI_DEVICE_ID_DEC_TULIP_FAST
 0x0009

	)

420 
	#PCI_DEVICE_ID_DEC_TGA2
 0x000D

	)

421 
	#PCI_DEVICE_ID_DEC_FDDI
 0x000F

	)

422 
	#PCI_DEVICE_ID_DEC_TULIP_PLUS
 0x0014

	)

423 
	#PCI_DEVICE_ID_DEC_21142
 0x0019

	)

424 
	#PCI_DEVICE_ID_DEC_21052
 0x0021

	)

425 
	#PCI_DEVICE_ID_DEC_21150
 0x0022

	)

426 
	#PCI_DEVICE_ID_DEC_21152
 0x0024

	)

427 
	#PCI_DEVICE_ID_DEC_21153
 0x0025

	)

428 
	#PCI_DEVICE_ID_DEC_21154
 0x0026

	)

429 
	#PCI_DEVICE_ID_DEC_21285
 0x1065

	)

430 
	#PCI_DEVICE_ID_COMPAQ_42XX
 0x0046

	)

432 
	#PCI_VENDOR_ID_CIRRUS
 0x1013

	)

433 
	#PCI_DEVICE_ID_CIRRUS_7548
 0x0038

	)

434 
	#PCI_DEVICE_ID_CIRRUS_5430
 0x00a0

	)

435 
	#PCI_DEVICE_ID_CIRRUS_5434_4
 0x00a4

	)

436 
	#PCI_DEVICE_ID_CIRRUS_5434_8
 0x00a8

	)

437 
	#PCI_DEVICE_ID_CIRRUS_5436
 0x00ac

	)

438 
	#PCI_DEVICE_ID_CIRRUS_5446
 0x00b8

	)

439 
	#PCI_DEVICE_ID_CIRRUS_5480
 0x00bc

	)

440 
	#PCI_DEVICE_ID_CIRRUS_5462
 0x00d0

	)

441 
	#PCI_DEVICE_ID_CIRRUS_5464
 0x00d4

	)

442 
	#PCI_DEVICE_ID_CIRRUS_5465
 0x00d6

	)

443 
	#PCI_DEVICE_ID_CIRRUS_6729
 0x1100

	)

444 
	#PCI_DEVICE_ID_CIRRUS_6832
 0x1110

	)

445 
	#PCI_DEVICE_ID_CIRRUS_7543
 0x1202

	)

446 
	#PCI_DEVICE_ID_CIRRUS_4610
 0x6001

	)

447 
	#PCI_DEVICE_ID_CIRRUS_4612
 0x6003

	)

448 
	#PCI_DEVICE_ID_CIRRUS_4615
 0x6004

	)

450 
	#PCI_VENDOR_ID_IBM
 0x1014

	)

451 
	#PCI_DEVICE_ID_IBM_TR
 0x0018

	)

452 
	#PCI_DEVICE_ID_IBM_TR_WAKE
 0x003e

	)

453 
	#PCI_DEVICE_ID_IBM_CPC710_PCI64
 0x00fc

	)

454 
	#PCI_DEVICE_ID_IBM_SNIPE
 0x0180

	)

455 
	#PCI_DEVICE_ID_IBM_CITRINE
 0x028C

	)

456 
	#PCI_DEVICE_ID_IBM_GEMSTONE
 0xB166

	)

457 
	#PCI_DEVICE_ID_IBM_OBSIDIAN
 0x02BD

	)

458 
	#PCI_DEVICE_ID_IBM_ICOM_DEV_ID_1
 0x0031

	)

459 
	#PCI_DEVICE_ID_IBM_ICOM_DEV_ID_2
 0x0219

	)

460 
	#PCI_DEVICE_ID_IBM_ICOM_V2_TWO_PORTS_RVX
 0x021A

	)

461 
	#PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM
 0x0251

	)

462 
	#PCI_DEVICE_ID_IBM_ICOM_FOUR_PORT_MODEL
 0x252

	)

464 
	#PCI_VENDOR_ID_COMPEX2
 0x101a

	)

465 
	#PCI_DEVICE_ID_COMPEX2_100VG
 0x0005

	)

467 
	#PCI_VENDOR_ID_WD
 0x101c

	)

468 
	#PCI_DEVICE_ID_WD_90C
 0xc24a

	)

470 
	#PCI_VENDOR_ID_AMI
 0x101e

	)

471 
	#PCI_DEVICE_ID_AMI_MEGARAID3
 0x1960

	)

472 
	#PCI_DEVICE_ID_AMI_MEGARAID
 0x9010

	)

473 
	#PCI_DEVICE_ID_AMI_MEGARAID2
 0x9060

	)

475 
	#PCI_VENDOR_ID_AMD
 0x1022

	)

476 
	#PCI_DEVICE_ID_AMD_K8_NB
 0x1100

	)

477 
	#PCI_DEVICE_ID_AMD_LANCE
 0x2000

	)

478 
	#PCI_DEVICE_ID_AMD_LANCE_HOME
 0x2001

	)

479 
	#PCI_DEVICE_ID_AMD_SCSI
 0x2020

	)

480 
	#PCI_DEVICE_ID_AMD_SERENADE
 0x36c0

	)

481 
	#PCI_DEVICE_ID_AMD_FE_GATE_7006
 0x7006

	)

482 
	#PCI_DEVICE_ID_AMD_FE_GATE_7007
 0x7007

	)

483 
	#PCI_DEVICE_ID_AMD_FE_GATE_700C
 0x700C

	)

484 
	#PCI_DEVICE_ID_AMD_FE_GATE_700E
 0x700E

	)

485 
	#PCI_DEVICE_ID_AMD_COBRA_7401
 0x7401

	)

486 
	#PCI_DEVICE_ID_AMD_VIPER_7409
 0x7409

	)

487 
	#PCI_DEVICE_ID_AMD_VIPER_740B
 0x740B

	)

488 
	#PCI_DEVICE_ID_AMD_VIPER_7410
 0x7410

	)

489 
	#PCI_DEVICE_ID_AMD_VIPER_7411
 0x7411

	)

490 
	#PCI_DEVICE_ID_AMD_VIPER_7413
 0x7413

	)

491 
	#PCI_DEVICE_ID_AMD_VIPER_7440
 0x7440

	)

492 
	#PCI_DEVICE_ID_AMD_OPUS_7441
 0x7441

	)

493 
	#PCI_DEVICE_ID_AMD_OPUS_7443
 0x7443

	)

494 
	#PCI_DEVICE_ID_AMD_VIPER_7443
 0x7443

	)

495 
	#PCI_DEVICE_ID_AMD_OPUS_7445
 0x7445

	)

496 
	#PCI_DEVICE_ID_AMD_8111_LPC
 0x7468

	)

497 
	#PCI_DEVICE_ID_AMD_8111_IDE
 0x7469

	)

498 
	#PCI_DEVICE_ID_AMD_8111_SMBUS2
 0x746a

	)

499 
	#PCI_DEVICE_ID_AMD_8111_SMBUS
 0x746b

	)

500 
	#PCI_DEVICE_ID_AMD_8111_AUDIO
 0x746d

	)

501 
	#PCI_DEVICE_ID_AMD_8151_0
 0x7454

	)

502 
	#PCI_DEVICE_ID_AMD_8131_BRIDGE
 0x7450

	)

503 
	#PCI_DEVICE_ID_AMD_8131_APIC
 0x7451

	)

504 
	#PCI_DEVICE_ID_AMD_CS5536_ISA
 0x2090

	)

505 
	#PCI_DEVICE_ID_AMD_CS5536_FLASH
 0x2091

	)

506 
	#PCI_DEVICE_ID_AMD_CS5536_AUDIO
 0x2093

	)

507 
	#PCI_DEVICE_ID_AMD_CS5536_OHC
 0x2094

	)

508 
	#PCI_DEVICE_ID_AMD_CS5536_EHC
 0x2095

	)

509 
	#PCI_DEVICE_ID_AMD_CS5536_UDC
 0x2096

	)

510 
	#PCI_DEVICE_ID_AMD_CS5536_UOC
 0x2097

	)

511 
	#PCI_DEVICE_ID_AMD_CS5536_IDE
 0x209A

	)

513 
	#PCI_DEVICE_ID_AMD_LX_VIDEO
 0x2081

	)

514 
	#PCI_DEVICE_ID_AMD_LX_AES
 0x2082

	)

516 
	#PCI_VENDOR_ID_TRIDENT
 0x1023

	)

517 
	#PCI_DEVICE_ID_TRIDENT_4DWAVE_DX
 0x2000

	)

518 
	#PCI_DEVICE_ID_TRIDENT_4DWAVE_NX
 0x2001

	)

519 
	#PCI_DEVICE_ID_TRIDENT_9320
 0x9320

	)

520 
	#PCI_DEVICE_ID_TRIDENT_9388
 0x9388

	)

521 
	#PCI_DEVICE_ID_TRIDENT_9397
 0x9397

	)

522 
	#PCI_DEVICE_ID_TRIDENT_939A
 0x939A

	)

523 
	#PCI_DEVICE_ID_TRIDENT_9520
 0x9520

	)

524 
	#PCI_DEVICE_ID_TRIDENT_9525
 0x9525

	)

525 
	#PCI_DEVICE_ID_TRIDENT_9420
 0x9420

	)

526 
	#PCI_DEVICE_ID_TRIDENT_9440
 0x9440

	)

527 
	#PCI_DEVICE_ID_TRIDENT_9660
 0x9660

	)

528 
	#PCI_DEVICE_ID_TRIDENT_9750
 0x9750

	)

529 
	#PCI_DEVICE_ID_TRIDENT_9850
 0x9850

	)

530 
	#PCI_DEVICE_ID_TRIDENT_9880
 0x9880

	)

531 
	#PCI_DEVICE_ID_TRIDENT_8400
 0x8400

	)

532 
	#PCI_DEVICE_ID_TRIDENT_8420
 0x8420

	)

533 
	#PCI_DEVICE_ID_TRIDENT_8500
 0x8500

	)

535 
	#PCI_VENDOR_ID_AI
 0x1025

	)

536 
	#PCI_DEVICE_ID_AI_M1435
 0x1435

	)

538 
	#PCI_VENDOR_ID_DELL
 0x1028

	)

539 
	#PCI_DEVICE_ID_DELL_RACIII
 0x0008

	)

540 
	#PCI_DEVICE_ID_DELL_RAC4
 0x0012

	)

541 
	#PCI_DEVICE_ID_DELL_PERC5
 0x0015

	)

543 
	#PCI_VENDOR_ID_MATROX
 0x102B

	)

544 
	#PCI_DEVICE_ID_MATROX_MGA_2
 0x0518

	)

545 
	#PCI_DEVICE_ID_MATROX_MIL
 0x0519

	)

546 
	#PCI_DEVICE_ID_MATROX_MYS
 0x051A

	)

547 
	#PCI_DEVICE_ID_MATROX_MIL_2
 0x051b

	)

548 
	#PCI_DEVICE_ID_MATROX_MYS_AGP
 0x051e

	)

549 
	#PCI_DEVICE_ID_MATROX_MIL_2_AGP
 0x051f

	)

550 
	#PCI_DEVICE_ID_MATROX_MGA_IMP
 0x0d10

	)

551 
	#PCI_DEVICE_ID_MATROX_G100_MM
 0x1000

	)

552 
	#PCI_DEVICE_ID_MATROX_G100_AGP
 0x1001

	)

553 
	#PCI_DEVICE_ID_MATROX_G200_PCI
 0x0520

	)

554 
	#PCI_DEVICE_ID_MATROX_G200_AGP
 0x0521

	)

555 
	#PCI_DEVICE_ID_MATROX_G400
 0x0525

	)

556 
	#PCI_DEVICE_ID_MATROX_G550
 0x2527

	)

557 
	#PCI_DEVICE_ID_MATROX_VIA
 0x4536

	)

559 
	#PCI_VENDOR_ID_CT
 0x102c

	)

560 
	#PCI_DEVICE_ID_CT_69000
 0x00c0

	)

561 
	#PCI_DEVICE_ID_CT_65545
 0x00d8

	)

562 
	#PCI_DEVICE_ID_CT_65548
 0x00dc

	)

563 
	#PCI_DEVICE_ID_CT_65550
 0x00e0

	)

564 
	#PCI_DEVICE_ID_CT_65554
 0x00e4

	)

565 
	#PCI_DEVICE_ID_CT_65555
 0x00e5

	)

567 
	#PCI_VENDOR_ID_MIRO
 0x1031

	)

568 
	#PCI_DEVICE_ID_MIRO_36050
 0x5601

	)

569 
	#PCI_DEVICE_ID_MIRO_DC10PLUS
 0x7e„

	)

570 
	#PCI_DEVICE_ID_MIRO_DC30PLUS
 0xd801

	)

572 
	#PCI_VENDOR_ID_NEC
 0x1033

	)

573 
	#PCI_DEVICE_ID_NEC_CBUS_1
 0x0001

	)

574 
	#PCI_DEVICE_ID_NEC_LOCAL
 0x0002

	)

575 
	#PCI_DEVICE_ID_NEC_ATM
 0x0003

	)

576 
	#PCI_DEVICE_ID_NEC_R4000
 0x0004

	)

577 
	#PCI_DEVICE_ID_NEC_486
 0x0005

	)

578 
	#PCI_DEVICE_ID_NEC_ACCEL_1
 0x0006

	)

579 
	#PCI_DEVICE_ID_NEC_UXBUS
 0x0007

	)

580 
	#PCI_DEVICE_ID_NEC_ACCEL_2
 0x0008

	)

581 
	#PCI_DEVICE_ID_NEC_GRAPH
 0x0009

	)

582 
	#PCI_DEVICE_ID_NEC_VL
 0x0016

	)

583 
	#PCI_DEVICE_ID_NEC_STARALPHA2
 0x002c

	)

584 
	#PCI_DEVICE_ID_NEC_CBUS_2
 0x002d

	)

585 
	#PCI_DEVICE_ID_NEC_USB
 0x0035

	)

586 
	#PCI_DEVICE_ID_NEC_CBUS_3
 0x003b

	)

587 
	#PCI_DEVICE_ID_NEC_NAPCCARD
 0x003e

	)

588 
	#PCI_DEVICE_ID_NEC_PCX2
 0x0046

	)

589 
	#PCI_DEVICE_ID_NEC_NILE4
 0x005a

	)

590 
	#PCI_DEVICE_ID_NEC_VRC5476
 0x009b

	)

591 
	#PCI_DEVICE_ID_NEC_VRC4173
 0x00a5

	)

592 
	#PCI_DEVICE_ID_NEC_VRC5477_AC97
 0x00a6

	)

593 
	#PCI_DEVICE_ID_NEC_PC9821CS01
 0x800c

	)

594 
	#PCI_DEVICE_ID_NEC_PC9821NRB06
 0x800d

	)

596 
	#PCI_VENDOR_ID_FD
 0x1036

	)

597 
	#PCI_DEVICE_ID_FD_36C70
 0x0000

	)

599 
	#PCI_VENDOR_ID_SI
 0x1039

	)

600 
	#PCI_DEVICE_ID_SI_5591_AGP
 0x0001

	)

601 
	#PCI_DEVICE_ID_SI_6202
 0x0002

	)

602 
	#PCI_DEVICE_ID_SI_503
 0x0008

	)

603 
	#PCI_DEVICE_ID_SI_ACPI
 0x0009

	)

604 
	#PCI_DEVICE_ID_SI_SMBUS
 0x0016

	)

605 
	#PCI_DEVICE_ID_SI_LPC
 0x0018

	)

606 
	#PCI_DEVICE_ID_SI_5597_VGA
 0x0200

	)

607 
	#PCI_DEVICE_ID_SI_6205
 0x0205

	)

608 
	#PCI_DEVICE_ID_SI_501
 0x0406

	)

609 
	#PCI_DEVICE_ID_SI_496
 0x0496

	)

610 
	#PCI_DEVICE_ID_SI_300
 0x0300

	)

611 
	#PCI_DEVICE_ID_SI_315H
 0x0310

	)

612 
	#PCI_DEVICE_ID_SI_315
 0x0315

	)

613 
	#PCI_DEVICE_ID_SI_315PRO
 0x0325

	)

614 
	#PCI_DEVICE_ID_SI_530
 0x0530

	)

615 
	#PCI_DEVICE_ID_SI_540
 0x0540

	)

616 
	#PCI_DEVICE_ID_SI_550
 0x0550

	)

617 
	#PCI_DEVICE_ID_SI_540_VGA
 0x5300

	)

618 
	#PCI_DEVICE_ID_SI_550_VGA
 0x5315

	)

619 
	#PCI_DEVICE_ID_SI_620
 0x0620

	)

620 
	#PCI_DEVICE_ID_SI_630
 0x0630

	)

621 
	#PCI_DEVICE_ID_SI_633
 0x0633

	)

622 
	#PCI_DEVICE_ID_SI_635
 0x0635

	)

623 
	#PCI_DEVICE_ID_SI_640
 0x0640

	)

624 
	#PCI_DEVICE_ID_SI_645
 0x0645

	)

625 
	#PCI_DEVICE_ID_SI_646
 0x0646

	)

626 
	#PCI_DEVICE_ID_SI_648
 0x0648

	)

627 
	#PCI_DEVICE_ID_SI_650
 0x0650

	)

628 
	#PCI_DEVICE_ID_SI_651
 0x0651

	)

629 
	#PCI_DEVICE_ID_SI_655
 0x0655

	)

630 
	#PCI_DEVICE_ID_SI_661
 0x0661

	)

631 
	#PCI_DEVICE_ID_SI_730
 0x0730

	)

632 
	#PCI_DEVICE_ID_SI_733
 0x0733

	)

633 
	#PCI_DEVICE_ID_SI_630_VGA
 0x6300

	)

634 
	#PCI_DEVICE_ID_SI_735
 0x0735

	)

635 
	#PCI_DEVICE_ID_SI_740
 0x0740

	)

636 
	#PCI_DEVICE_ID_SI_741
 0x0741

	)

637 
	#PCI_DEVICE_ID_SI_745
 0x0745

	)

638 
	#PCI_DEVICE_ID_SI_746
 0x0746

	)

639 
	#PCI_DEVICE_ID_SI_755
 0x0755

	)

640 
	#PCI_DEVICE_ID_SI_760
 0x0760

	)

641 
	#PCI_DEVICE_ID_SI_900
 0x0900

	)

642 
	#PCI_DEVICE_ID_SI_961
 0x0961

	)

643 
	#PCI_DEVICE_ID_SI_962
 0x0962

	)

644 
	#PCI_DEVICE_ID_SI_963
 0x0963

	)

645 
	#PCI_DEVICE_ID_SI_965
 0x0965

	)

646 
	#PCI_DEVICE_ID_SI_966
 0x0966

	)

647 
	#PCI_DEVICE_ID_SI_968
 0x0968

	)

648 
	#PCI_DEVICE_ID_SI_5511
 0x5511

	)

649 
	#PCI_DEVICE_ID_SI_5513
 0x5513

	)

650 
	#PCI_DEVICE_ID_SI_5517
 0x5517

	)

651 
	#PCI_DEVICE_ID_SI_5518
 0x5518

	)

652 
	#PCI_DEVICE_ID_SI_5571
 0x5571

	)

653 
	#PCI_DEVICE_ID_SI_5581
 0x5581

	)

654 
	#PCI_DEVICE_ID_SI_5582
 0x5582

	)

655 
	#PCI_DEVICE_ID_SI_5591
 0x5591

	)

656 
	#PCI_DEVICE_ID_SI_5596
 0x5596

	)

657 
	#PCI_DEVICE_ID_SI_5597
 0x5597

	)

658 
	#PCI_DEVICE_ID_SI_5598
 0x5598

	)

659 
	#PCI_DEVICE_ID_SI_5600
 0x5600

	)

660 
	#PCI_DEVICE_ID_SI_7012
 0x7012

	)

661 
	#PCI_DEVICE_ID_SI_7013
 0x7013

	)

662 
	#PCI_DEVICE_ID_SI_7016
 0x7016

	)

663 
	#PCI_DEVICE_ID_SI_7018
 0x7018

	)

665 
	#PCI_VENDOR_ID_HP
 0x103c

	)

666 
	#PCI_DEVICE_ID_HP_VISUALIZE_EG
 0x1005

	)

667 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX6
 0x1006

	)

668 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX4
 0x1008

	)

669 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX2
 0x100a

	)

670 
	#PCI_DEVICE_ID_HP_TACHYON
 0x1028

	)

671 
	#PCI_DEVICE_ID_HP_TACHLITE
 0x1029

	)

672 
	#PCI_DEVICE_ID_HP_J2585A
 0x1030

	)

673 
	#PCI_DEVICE_ID_HP_J2585B
 0x1031

	)

674 
	#PCI_DEVICE_ID_HP_J2973A
 0x1040

	)

675 
	#PCI_DEVICE_ID_HP_J2970A
 0x1042

	)

676 
	#PCI_DEVICE_ID_HP_DIVA
 0x1048

	)

677 
	#PCI_DEVICE_ID_HP_DIVA_TOSCA1
 0x1049

	)

678 
	#PCI_DEVICE_ID_HP_DIVA_TOSCA2
 0x104A

	)

679 
	#PCI_DEVICE_ID_HP_DIVA_MAESTRO
 0x104B

	)

680 
	#PCI_DEVICE_ID_HP_REO_IOC
 0x10f1

	)

681 
	#PCI_DEVICE_ID_HP_VISUALIZE_FXE
 0x108b

	)

682 
	#PCI_DEVICE_ID_HP_DIVA_HALFDOME
 0x1223

	)

683 
	#PCI_DEVICE_ID_HP_DIVA_KEYSTONE
 0x1226

	)

684 
	#PCI_DEVICE_ID_HP_DIVA_POWERBAR
 0x1227

	)

685 
	#PCI_DEVICE_ID_HP_ZX1_IOC
 0x122a

	)

686 
	#PCI_DEVICE_ID_HP_PCIX_LBA
 0x122e

	)

687 
	#PCI_DEVICE_ID_HP_SX1000_IOC
 0x127c

	)

688 
	#PCI_DEVICE_ID_HP_DIVA_EVEREST
 0x1282

	)

689 
	#PCI_DEVICE_ID_HP_DIVA_AUX
 0x1290

	)

690 
	#PCI_DEVICE_ID_HP_DIVA_RMP3
 0x1301

	)

691 
	#PCI_DEVICE_ID_HP_DIVA_HURRICANE
 0x132a

	)

692 
	#PCI_DEVICE_ID_HP_CISSA
 0x3220

	)

693 
	#PCI_DEVICE_ID_HP_CISSC
 0x3230

	)

694 
	#PCI_DEVICE_ID_HP_CISSD
 0x3238

	)

695 
	#PCI_DEVICE_ID_HP_ZX2_IOC
 0x4031

	)

697 
	#PCI_VENDOR_ID_PCTECH
 0x1042

	)

698 
	#PCI_DEVICE_ID_PCTECH_RZ1000
 0x1000

	)

699 
	#PCI_DEVICE_ID_PCTECH_RZ1001
 0x1001

	)

700 
	#PCI_DEVICE_ID_PCTECH_SAMURAI_IDE
 0x3020

	)

702 
	#PCI_VENDOR_ID_ASUSTEK
 0x1043

	)

703 
	#PCI_DEVICE_ID_ASUSTEK_0675
 0x0675

	)

705 
	#PCI_VENDOR_ID_DPT
 0x1044

	)

706 
	#PCI_DEVICE_ID_DPT
 0xa400

	)

708 
	#PCI_VENDOR_ID_OPTI
 0x1045

	)

709 
	#PCI_DEVICE_ID_OPTI_82C558
 0xc558

	)

710 
	#PCI_DEVICE_ID_OPTI_82C621
 0xc621

	)

711 
	#PCI_DEVICE_ID_OPTI_82C700
 0xc700

	)

712 
	#PCI_DEVICE_ID_OPTI_82C825
 0xd568

	)

714 
	#PCI_VENDOR_ID_ELSA
 0x1048

	)

715 
	#PCI_DEVICE_ID_ELSA_MICROLINK
 0x1000

	)

716 
	#PCI_DEVICE_ID_ELSA_QS3000
 0x3000

	)

718 
	#PCI_VENDOR_ID_BUSLOGIC
 0x104B

	)

719 
	#PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER_NC
 0x0140

	)

720 
	#PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER
 0x1040

	)

721 
	#PCI_DEVICE_ID_BUSLOGIC_FLASHPOINT
 0x8130

	)

723 
	#PCI_VENDOR_ID_TI
 0x104c

	)

724 
	#PCI_DEVICE_ID_TI_TVP4020
 0x3d07

	)

725 
	#PCI_DEVICE_ID_TI_4450
 0x8011

	)

726 
	#PCI_DEVICE_ID_TI_XX21_XX11
 0x8031

	)

727 
	#PCI_DEVICE_ID_TI_XX21_XX11_SD
 0x8034

	)

728 
	#PCI_DEVICE_ID_TI_X515
 0x8036

	)

729 
	#PCI_DEVICE_ID_TI_XX12
 0x8039

	)

730 
	#PCI_DEVICE_ID_TI_1130
 0xac12

	)

731 
	#PCI_DEVICE_ID_TI_1031
 0xac13

	)

732 
	#PCI_DEVICE_ID_TI_1131
 0xac15

	)

733 
	#PCI_DEVICE_ID_TI_1250
 0xac16

	)

734 
	#PCI_DEVICE_ID_TI_1220
 0xac17

	)

735 
	#PCI_DEVICE_ID_TI_1221
 0xac19

	)

736 
	#PCI_DEVICE_ID_TI_1210
 0xac1a

	)

737 
	#PCI_DEVICE_ID_TI_1450
 0xac1b

	)

738 
	#PCI_DEVICE_ID_TI_1225
 0xac1c

	)

739 
	#PCI_DEVICE_ID_TI_1251A
 0xac1d

	)

740 
	#PCI_DEVICE_ID_TI_1211
 0xac1e

	)

741 
	#PCI_DEVICE_ID_TI_1251B
 0xac1f

	)

742 
	#PCI_DEVICE_ID_TI_4410
 0xac41

	)

743 
	#PCI_DEVICE_ID_TI_4451
 0xac42

	)

744 
	#PCI_DEVICE_ID_TI_4510
 0xac44

	)

745 
	#PCI_DEVICE_ID_TI_4520
 0xac46

	)

746 
	#PCI_DEVICE_ID_TI_7510
 0xac47

	)

747 
	#PCI_DEVICE_ID_TI_7610
 0xac48

	)

748 
	#PCI_DEVICE_ID_TI_7410
 0xac49

	)

749 
	#PCI_DEVICE_ID_TI_1410
 0xac50

	)

750 
	#PCI_DEVICE_ID_TI_1420
 0xac51

	)

751 
	#PCI_DEVICE_ID_TI_1451A
 0xac52

	)

752 
	#PCI_DEVICE_ID_TI_1620
 0xac54

	)

753 
	#PCI_DEVICE_ID_TI_1520
 0xac55

	)

754 
	#PCI_DEVICE_ID_TI_1510
 0xac56

	)

755 
	#PCI_DEVICE_ID_TI_X620
 0xac8d

	)

756 
	#PCI_DEVICE_ID_TI_X420
 0xac8e

	)

758 
	#PCI_VENDOR_ID_SONY
 0x104d

	)

760 
	#PCI_VENDOR_ID_WINBOND2
 0x1050

	)

761 
	#PCI_DEVICE_ID_WINBOND2_89C940F
 0x5a5a

	)

762 
	#PCI_DEVICE_ID_WINBOND2_6692
 0x6692

	)

764 
	#PCI_VENDOR_ID_ANIGMA
 0x1051

	)

765 
	#PCI_DEVICE_ID_ANIGMA_MC145575
 0x0100

	)

767 
	#PCI_VENDOR_ID_EFAR
 0x1055

	)

768 
	#PCI_DEVICE_ID_EFAR_SLC90E66_1
 0x9130

	)

769 
	#PCI_DEVICE_ID_EFAR_SLC90E66_3
 0x9463

	)

771 
	#PCI_VENDOR_ID_MOTOROLA
 0x1057

	)

772 
	#PCI_DEVICE_ID_MOTOROLA_MPC105
 0x0001

	)

773 
	#PCI_DEVICE_ID_MOTOROLA_MPC106
 0x0002

	)

774 
	#PCI_DEVICE_ID_MOTOROLA_MPC107
 0x0004

	)

775 
	#PCI_DEVICE_ID_MOTOROLA_RAVEN
 0x4801

	)

776 
	#PCI_DEVICE_ID_MOTOROLA_FALCON
 0x4802

	)

777 
	#PCI_DEVICE_ID_MOTOROLA_HAWK
 0x4803

	)

778 
	#PCI_DEVICE_ID_MOTOROLA_HARRIER
 0x480b

	)

779 
	#PCI_DEVICE_ID_MOTOROLA_MPC5200
 0x5803

	)

780 
	#PCI_DEVICE_ID_MOTOROLA_MPC5200B
 0x5809

	)

782 
	#PCI_VENDOR_ID_PROMISE
 0x105a

	)

783 
	#PCI_DEVICE_ID_PROMISE_20265
 0x0d30

	)

784 
	#PCI_DEVICE_ID_PROMISE_20267
 0x4d30

	)

785 
	#PCI_DEVICE_ID_PROMISE_20246
 0x4d33

	)

786 
	#PCI_DEVICE_ID_PROMISE_20262
 0x4d38

	)

787 
	#PCI_DEVICE_ID_PROMISE_20263
 0x0D38

	)

788 
	#PCI_DEVICE_ID_PROMISE_20268
 0x4d68

	)

789 
	#PCI_DEVICE_ID_PROMISE_20269
 0x4d69

	)

790 
	#PCI_DEVICE_ID_PROMISE_20270
 0x6268

	)

791 
	#PCI_DEVICE_ID_PROMISE_20271
 0x6269

	)

792 
	#PCI_DEVICE_ID_PROMISE_20275
 0x1275

	)

793 
	#PCI_DEVICE_ID_PROMISE_20276
 0x5275

	)

794 
	#PCI_DEVICE_ID_PROMISE_20277
 0x7275

	)

796 
	#PCI_VENDOR_ID_UMC
 0x1060

	)

797 
	#PCI_DEVICE_ID_UMC_UM8673F
 0x0101

	)

798 
	#PCI_DEVICE_ID_UMC_UM8886BF
 0x673a

	)

799 
	#PCI_DEVICE_ID_UMC_UM8886A
 0x886a

	)

801 
	#PCI_VENDOR_ID_MYLEX
 0x1069

	)

802 
	#PCI_DEVICE_ID_MYLEX_DAC960_P
 0x0001

	)

803 
	#PCI_DEVICE_ID_MYLEX_DAC960_PD
 0x0002

	)

804 
	#PCI_DEVICE_ID_MYLEX_DAC960_PG
 0x0010

	)

805 
	#PCI_DEVICE_ID_MYLEX_DAC960_LA
 0x0020

	)

806 
	#PCI_DEVICE_ID_MYLEX_DAC960_LP
 0x0050

	)

807 
	#PCI_DEVICE_ID_MYLEX_DAC960_BA
 0xBA56

	)

808 
	#PCI_DEVICE_ID_MYLEX_DAC960_GEM
 0xB166

	)

810 
	#PCI_VENDOR_ID_APPLE
 0x106b

	)

811 
	#PCI_DEVICE_ID_APPLE_BANDIT
 0x0001

	)

812 
	#PCI_DEVICE_ID_APPLE_HYDRA
 0x000e

	)

813 
	#PCI_DEVICE_ID_APPLE_UNI_N_FW
 0x0018

	)

814 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP
 0x0020

	)

815 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMAC
 0x0021

	)

816 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMACP
 0x0024

	)

817 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP_P
 0x0027

	)

818 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP15
 0x002d

	)

819 
	#PCI_DEVICE_ID_APPLE_UNI_N_PCI15
 0x002e

	)

820 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMAC2
 0x0032

	)

821 
	#PCI_DEVICE_ID_APPLE_UNI_N_ATA
 0x0033

	)

822 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP2
 0x0034

	)

823 
	#PCI_DEVICE_ID_APPLE_IPID_ATA100
 0x003b

	)

824 
	#PCI_DEVICE_ID_APPLE_K2_ATA100
 0x0043

	)

825 
	#PCI_DEVICE_ID_APPLE_U3_AGP
 0x004b

	)

826 
	#PCI_DEVICE_ID_APPLE_K2_GMAC
 0x004c

	)

827 
	#PCI_DEVICE_ID_APPLE_SH_ATA
 0x0050

	)

828 
	#PCI_DEVICE_ID_APPLE_SH_SUNGEM
 0x0051

	)

829 
	#PCI_DEVICE_ID_APPLE_U3L_AGP
 0x0058

	)

830 
	#PCI_DEVICE_ID_APPLE_U3H_AGP
 0x0059

	)

831 
	#PCI_DEVICE_ID_APPLE_IPID2_AGP
 0x0066

	)

832 
	#PCI_DEVICE_ID_APPLE_IPID2_ATA
 0x0069

	)

833 
	#PCI_DEVICE_ID_APPLE_IPID2_FW
 0x006a

	)

834 
	#PCI_DEVICE_ID_APPLE_IPID2_GMAC
 0x006b

	)

835 
	#PCI_DEVICE_ID_APPLE_TIGON3
 0x1645

	)

837 
	#PCI_VENDOR_ID_YAMAHA
 0x1073

	)

838 
	#PCI_DEVICE_ID_YAMAHA_724
 0x0004

	)

839 
	#PCI_DEVICE_ID_YAMAHA_724F
 0x000d

	)

840 
	#PCI_DEVICE_ID_YAMAHA_740
 0x000a

	)

841 
	#PCI_DEVICE_ID_YAMAHA_740C
 0x000c

	)

842 
	#PCI_DEVICE_ID_YAMAHA_744
 0x0010

	)

843 
	#PCI_DEVICE_ID_YAMAHA_754
 0x0012

	)

845 
	#PCI_VENDOR_ID_QLOGIC
 0x1077

	)

846 
	#PCI_DEVICE_ID_QLOGIC_ISP10160
 0x1016

	)

847 
	#PCI_DEVICE_ID_QLOGIC_ISP1020
 0x1020

	)

848 
	#PCI_DEVICE_ID_QLOGIC_ISP1080
 0x1080

	)

849 
	#PCI_DEVICE_ID_QLOGIC_ISP12160
 0x1216

	)

850 
	#PCI_DEVICE_ID_QLOGIC_ISP1240
 0x1240

	)

851 
	#PCI_DEVICE_ID_QLOGIC_ISP1280
 0x1280

	)

852 
	#PCI_DEVICE_ID_QLOGIC_ISP2100
 0x2100

	)

853 
	#PCI_DEVICE_ID_QLOGIC_ISP2200
 0x2200

	)

854 
	#PCI_DEVICE_ID_QLOGIC_ISP2300
 0x2300

	)

855 
	#PCI_DEVICE_ID_QLOGIC_ISP2312
 0x2312

	)

856 
	#PCI_DEVICE_ID_QLOGIC_ISP2322
 0x2322

	)

857 
	#PCI_DEVICE_ID_QLOGIC_ISP6312
 0x6312

	)

858 
	#PCI_DEVICE_ID_QLOGIC_ISP6322
 0x6322

	)

859 
	#PCI_DEVICE_ID_QLOGIC_ISP2422
 0x2422

	)

860 
	#PCI_DEVICE_ID_QLOGIC_ISP2432
 0x2432

	)

861 
	#PCI_DEVICE_ID_QLOGIC_ISP2512
 0x2512

	)

862 
	#PCI_DEVICE_ID_QLOGIC_ISP2522
 0x2522

	)

863 
	#PCI_DEVICE_ID_QLOGIC_ISP5422
 0x5422

	)

864 
	#PCI_DEVICE_ID_QLOGIC_ISP5432
 0x5432

	)

866 
	#PCI_VENDOR_ID_CYRIX
 0x1078

	)

867 
	#PCI_DEVICE_ID_CYRIX_5510
 0x0000

	)

868 
	#PCI_DEVICE_ID_CYRIX_PCI_MASTER
 0x0001

	)

869 
	#PCI_DEVICE_ID_CYRIX_5520
 0x0002

	)

870 
	#PCI_DEVICE_ID_CYRIX_5530_LEGACY
 0x0100

	)

871 
	#PCI_DEVICE_ID_CYRIX_5530_IDE
 0x0102

	)

872 
	#PCI_DEVICE_ID_CYRIX_5530_AUDIO
 0x0103

	)

873 
	#PCI_DEVICE_ID_CYRIX_5530_VIDEO
 0x0104

	)

875 
	#PCI_VENDOR_ID_CONTAQ
 0x1080

	)

876 
	#PCI_DEVICE_ID_CONTAQ_82C693
 0xc693

	)

878 
	#PCI_VENDOR_ID_OLICOM
 0x108d

	)

879 
	#PCI_DEVICE_ID_OLICOM_OC2325
 0x0012

	)

880 
	#PCI_DEVICE_ID_OLICOM_OC2183
 0x0013

	)

881 
	#PCI_DEVICE_ID_OLICOM_OC2326
 0x0014

	)

883 
	#PCI_VENDOR_ID_SUN
 0x108e

	)

884 
	#PCI_DEVICE_ID_SUN_EBUS
 0x1000

	)

885 
	#PCI_DEVICE_ID_SUN_HAPPYMEAL
 0x1001

	)

886 
	#PCI_DEVICE_ID_SUN_RIO_EBUS
 0x1100

	)

887 
	#PCI_DEVICE_ID_SUN_RIO_GEM
 0x1101

	)

888 
	#PCI_DEVICE_ID_SUN_RIO_1394
 0x1102

	)

889 
	#PCI_DEVICE_ID_SUN_RIO_USB
 0x1103

	)

890 
	#PCI_DEVICE_ID_SUN_GEM
 0x2bad

	)

891 
	#PCI_DEVICE_ID_SUN_SIMBA
 0x5000

	)

892 
	#PCI_DEVICE_ID_SUN_PBM
 0x8000

	)

893 
	#PCI_DEVICE_ID_SUN_SCHIZO
 0x8001

	)

894 
	#PCI_DEVICE_ID_SUN_SABRE
 0xa000

	)

895 
	#PCI_DEVICE_ID_SUN_HUMMINGBIRD
 0xa001

	)

896 
	#PCI_DEVICE_ID_SUN_TOMATILLO
 0xa801

	)

897 
	#PCI_DEVICE_ID_SUN_CASSINI
 0xabba

	)

899 
	#PCI_VENDOR_ID_CMD
 0x1095

	)

900 
	#PCI_DEVICE_ID_CMD_643
 0x0643

	)

901 
	#PCI_DEVICE_ID_CMD_646
 0x0646

	)

902 
	#PCI_DEVICE_ID_CMD_648
 0x0648

	)

903 
	#PCI_DEVICE_ID_CMD_649
 0x0649

	)

905 
	#PCI_DEVICE_ID_SII_680
 0x0680

	)

906 
	#PCI_DEVICE_ID_SII_3112
 0x3112

	)

907 
	#PCI_DEVICE_ID_SII_1210SA
 0x0240

	)

909 
	#PCI_VENDOR_ID_BROOKTREE
 0x109e

	)

910 
	#PCI_DEVICE_ID_BROOKTREE_878
 0x0878

	)

911 
	#PCI_DEVICE_ID_BROOKTREE_879
 0x0879

	)

913 
	#PCI_VENDOR_ID_SGI
 0x10a9

	)

914 
	#PCI_DEVICE_ID_SGI_IOC3
 0x0003

	)

915 
	#PCI_DEVICE_ID_SGI_IOC4
 0x100a

	)

916 
	#PCI_VENDOR_ID_SGI_LITHIUM
 0x1002

	)

918 
	#PCI_VENDOR_ID_WINBOND
 0x10ad

	)

919 
	#PCI_DEVICE_ID_WINBOND_82C105
 0x0105

	)

920 
	#PCI_DEVICE_ID_WINBOND_83C553
 0x0565

	)

922 
	#PCI_VENDOR_ID_PLX
 0x10b5

	)

923 
	#PCI_DEVICE_ID_PLX_R685
 0x1030

	)

924 
	#PCI_DEVICE_ID_PLX_ROMULUS
 0x106a

	)

925 
	#PCI_DEVICE_ID_PLX_SPCOM800
 0x1076

	)

926 
	#PCI_DEVICE_ID_PLX_1077
 0x1077

	)

927 
	#PCI_DEVICE_ID_PLX_SPCOM200
 0x1103

	)

928 
	#PCI_DEVICE_ID_PLX_DJINN_ITOO
 0x1151

	)

929 
	#PCI_DEVICE_ID_PLX_R753
 0x1152

	)

930 
	#PCI_DEVICE_ID_PLX_OLITEC
 0x1187

	)

931 
	#PCI_DEVICE_ID_PLX_PCI200SYN
 0x3196

	)

932 
	#PCI_DEVICE_ID_PLX_9050
 0x9050

	)

933 
	#PCI_DEVICE_ID_PLX_9080
 0x9080

	)

934 
	#PCI_DEVICE_ID_PLX_GTEK_SERIAL2
 0xa001

	)

936 
	#PCI_VENDOR_ID_MADGE
 0x10b6

	)

937 
	#PCI_DEVICE_ID_MADGE_MK2
 0x0002

	)

939 
	#PCI_VENDOR_ID_3COM
 0x10b7

	)

940 
	#PCI_DEVICE_ID_3COM_3C985
 0x0001

	)

941 
	#PCI_DEVICE_ID_3COM_3C940
 0x1700

	)

942 
	#PCI_DEVICE_ID_3COM_3C339
 0x3390

	)

943 
	#PCI_DEVICE_ID_3COM_3C359
 0x3590

	)

944 
	#PCI_DEVICE_ID_3COM_3C940B
 0x80eb

	)

945 
	#PCI_DEVICE_ID_3COM_3CR990
 0x9900

	)

946 
	#PCI_DEVICE_ID_3COM_3CR990_TX_95
 0x9902

	)

947 
	#PCI_DEVICE_ID_3COM_3CR990_TX_97
 0x9903

	)

948 
	#PCI_DEVICE_ID_3COM_3CR990B
 0x9904

	)

949 
	#PCI_DEVICE_ID_3COM_3CR990_FX
 0x9905

	)

950 
	#PCI_DEVICE_ID_3COM_3CR990SVR95
 0x9908

	)

951 
	#PCI_DEVICE_ID_3COM_3CR990SVR97
 0x9909

	)

952 
	#PCI_DEVICE_ID_3COM_3CR990SVR
 0x990a

	)

954 
	#PCI_VENDOR_ID_AL
 0x10b9

	)

955 
	#PCI_DEVICE_ID_AL_M1533
 0x1533

	)

956 
	#PCI_DEVICE_ID_AL_M1535
 0x1535

	)

957 
	#PCI_DEVICE_ID_AL_M1541
 0x1541

	)

958 
	#PCI_DEVICE_ID_AL_M1563
 0x1563

	)

959 
	#PCI_DEVICE_ID_AL_M1621
 0x1621

	)

960 
	#PCI_DEVICE_ID_AL_M1631
 0x1631

	)

961 
	#PCI_DEVICE_ID_AL_M1632
 0x1632

	)

962 
	#PCI_DEVICE_ID_AL_M1641
 0x1641

	)

963 
	#PCI_DEVICE_ID_AL_M1644
 0x1644

	)

964 
	#PCI_DEVICE_ID_AL_M1647
 0x1647

	)

965 
	#PCI_DEVICE_ID_AL_M1651
 0x1651

	)

966 
	#PCI_DEVICE_ID_AL_M1671
 0x1671

	)

967 
	#PCI_DEVICE_ID_AL_M1681
 0x1681

	)

968 
	#PCI_DEVICE_ID_AL_M1683
 0x1683

	)

969 
	#PCI_DEVICE_ID_AL_M1689
 0x1689

	)

970 
	#PCI_DEVICE_ID_AL_M5219
 0x5219

	)

971 
	#PCI_DEVICE_ID_AL_M5228
 0x5228

	)

972 
	#PCI_DEVICE_ID_AL_M5229
 0x5229

	)

973 
	#PCI_DEVICE_ID_AL_M5451
 0x5451

	)

974 
	#PCI_DEVICE_ID_AL_M7101
 0x7101

	)

976 
	#PCI_VENDOR_ID_NEOMAGIC
 0x10c8

	)

977 
	#PCI_DEVICE_ID_NEOMAGIC_NM256AV_AUDIO
 0x8005

	)

978 
	#PCI_DEVICE_ID_NEOMAGIC_NM256ZX_AUDIO
 0x8006

	)

979 
	#PCI_DEVICE_ID_NEOMAGIC_NM256XL_PLUS_AUDIO
 0x8016

	)

981 
	#PCI_VENDOR_ID_TCONRAD
 0x10da

	)

982 
	#PCI_DEVICE_ID_TCONRAD_TOKENRING
 0x0508

	)

984 
	#PCI_VENDOR_ID_NVIDIA
 0x10de

	)

985 
	#PCI_DEVICE_ID_NVIDIA_TNT
 0x0020

	)

986 
	#PCI_DEVICE_ID_NVIDIA_TNT2
 0x0028

	)

987 
	#PCI_DEVICE_ID_NVIDIA_UTNT2
 0x0029

	)

988 
	#PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN
 0x002a

	)

989 
	#PCI_DEVICE_ID_NVIDIA_VTNT2
 0x002C

	)

990 
	#PCI_DEVICE_ID_NVIDIA_UVTNT2
 0x002D

	)

991 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SMBUS
 0x0034

	)

992 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE
 0x0035

	)

993 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA
 0x0036

	)

994 
	#PCI_DEVICE_ID_NVIDIA_NVENET_10
 0x0037

	)

995 
	#PCI_DEVICE_ID_NVIDIA_NVENET_11
 0x0038

	)

996 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2
 0x003e

	)

997 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA
 0x0040

	)

998 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800
 0x0041

	)

999 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE
 0x0042

	)

1000 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT
 0x0045

	)

1001 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000
 0x004E

	)

1002 
	#PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS
 0x0052

	)

1003 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE
 0x0053

	)

1004 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA
 0x0054

	)

1005 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2
 0x0055

	)

1006 
	#PCI_DEVICE_ID_NVIDIA_NVENET_8
 0x0056

	)

1007 
	#PCI_DEVICE_ID_NVIDIA_NVENET_9
 0x0057

	)

1008 
	#PCI_DEVICE_ID_NVIDIA_CK804_AUDIO
 0x0059

	)

1009 
	#PCI_DEVICE_ID_NVIDIA_CK804_PCIE
 0x005d

	)

1010 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS
 0x0064

	)

1011 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE
 0x0065

	)

1012 
	#PCI_DEVICE_ID_NVIDIA_NVENET_2
 0x0066

	)

1013 
	#PCI_DEVICE_ID_NVIDIA_MCP2_MODEM
 0x0069

	)

1014 
	#PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO
 0x006a

	)

1015 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS
 0x0084

	)

1016 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE
 0x0085

	)

1017 
	#PCI_DEVICE_ID_NVIDIA_NVENET_4
 0x0086

	)

1018 
	#PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM
 0x0089

	)

1019 
	#PCI_DEVICE_ID_NVIDIA_CK8_AUDIO
 0x008a

	)

1020 
	#PCI_DEVICE_ID_NVIDIA_NVENET_5
 0x008c

	)

1021 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA
 0x008e

	)

1022 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GT
 0x0090

	)

1023 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GTX
 0x0091

	)

1024 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800
 0x0098

	)

1025 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800_GTX
 0x0099

	)

1026 
	#PCI_DEVICE_ID_NVIDIA_ITNT2
 0x00A0

	)

1027 
	#PCI_DEVICE_ID_GEFORCE_6800A
 0x00c1

	)

1028 
	#PCI_DEVICE_ID_GEFORCE_6800A_LE
 0x00c2

	)

1029 
	#PCI_DEVICE_ID_GEFORCE_GO_6800
 0x00c8

	)

1030 
	#PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA
 0x00c9

	)

1031 
	#PCI_DEVICE_ID_QUADRO_FX_GO1400
 0x00cc

	)

1032 
	#PCI_DEVICE_ID_QUADRO_FX_1400
 0x00˚

	)

1033 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3
 0x00d1

	)

1034 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS
 0x00d4

	)

1035 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE
 0x00d5

	)

1036 
	#PCI_DEVICE_ID_NVIDIA_NVENET_3
 0x00d6

	)

1037 
	#PCI_DEVICE_ID_NVIDIA_MCP3_MODEM
 0x00d9

	)

1038 
	#PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO
 0x00da

	)

1039 
	#PCI_DEVICE_ID_NVIDIA_NVENET_7
 0x00df

	)

1040 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S
 0x00e1

	)

1041 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA
 0x00e3

	)

1042 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS
 0x00e4

	)

1043 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE
 0x00e5

	)

1044 
	#PCI_DEVICE_ID_NVIDIA_NVENET_6
 0x00e6

	)

1045 
	#PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO
 0x00ó

	)

1046 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA2
 0x00ì

	)

1047 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_ALT1
 0x00f0

	)

1048 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT1
 0x00f1

	)

1049 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT2
 0x00f2

	)

1050 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6200_ALT1
 0x00f3

	)

1051 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_GT
 0x00f9

	)

1052 
	#PCIE_DEVICE_ID_NVIDIA_QUADRO_NVS280
 0x00fd

	)

1053 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_SDR
 0x0100

	)

1054 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR
 0x0101

	)

1055 
	#PCI_DEVICE_ID_NVIDIA_QUADRO
 0x0103

	)

1056 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX
 0x0110

	)

1057 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2
 0x0111

	)

1058 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO
 0x0112

	)

1059 
	#PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR
 0x0113

	)

1060 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT
 0x0140

	)

1061 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6600
 0x0141

	)

1062 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL
 0x0145

	)

1063 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540
 0x014E

	)

1064 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6200
 0x014F

	)

1065 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS
 0x0150

	)

1066 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2
 0x0151

	)

1067 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA
 0x0152

	)

1068 
	#PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO
 0x0153

	)

1069 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE
 0x0161

	)

1070 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200
 0x0164

	)

1071 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250
 0x0166

	)

1072 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1
 0x0167

	)

1073 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1
 0x0168

	)

1074 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460
 0x0170

	)

1075 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440
 0x0171

	)

1076 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420
 0x0172

	)

1077 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE
 0x0173

	)

1078 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO
 0x0174

	)

1079 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO
 0x0175

	)

1080 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32
 0x0176

	)

1081 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO
 0x0177

	)

1082 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL
 0x0178

	)

1083 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64
 0x0179

	)

1084 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_200
 0x017A

	)

1085 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL
 0x017B

	)

1086 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL
 0x017C

	)

1087 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16
 0x017D

	)

1088 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X
 0x0181

	)

1089 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X
 0x0182

	)

1090 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X
 0x0183

	)

1091 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_4000
 0x0185

	)

1092 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO
 0x0186

	)

1093 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO
 0x0187

	)

1094 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL
 0x0188

	)

1095 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC
 0x0189

	)

1096 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS
 0x018A

	)

1097 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL
 0x018B

	)

1098 
	#PCI_DEVICE_ID_NVIDIA_IGEFORCE2
 0x01a0

	)

1099 
	#PCI_DEVICE_ID_NVIDIA_NFORCE
 0x01a4

	)

1100 
	#PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO
 0x01b1

	)

1101 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS
 0x01b4

	)

1102 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_IDE
 0x01bc

	)

1103 
	#PCI_DEVICE_ID_NVIDIA_MCP1_MODEM
 0x01c1

	)

1104 
	#PCI_DEVICE_ID_NVIDIA_NVENET_1
 0x01c3

	)

1105 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2
 0x01e0

	)

1106 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3
 0x0200

	)

1107 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3_1
 0x0201

	)

1108 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3_2
 0x0202

	)

1109 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_DDC
 0x0203

	)

1110 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B
 0x0211

	)

1111 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE
 0x0212

	)

1112 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT
 0x0215

	)

1113 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600
 0x0250

	)

1114 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400
 0x0251

	)

1115 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200
 0x0253

	)

1116 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL
 0x0258

	)

1117 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL
 0x0259

	)

1118 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL
 0x025B

	)

1119 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SMBUS
 0x0264

	)

1120 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE
 0x0265

	)

1121 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA
 0x0266

	)

1122 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2
 0x0267

	)

1123 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SMBUS
 0x0368

	)

1124 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE
 0x036E

	)

1125 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA
 0x037E

	)

1126 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA2
 0x037F

	)

1127 
	#PCI_DEVICE_ID_NVIDIA_NVENET_12
 0x0268

	)

1128 
	#PCI_DEVICE_ID_NVIDIA_NVENET_13
 0x0269

	)

1129 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800
 0x0280

	)

1130 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X
 0x0281

	)

1131 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE
 0x0282

	)

1132 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO
 0x0286

	)

1133 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL
 0x0288

	)

1134 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL
 0x0289

	)

1135 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL
 0x028C

	)

1136 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA
 0x0301

	)

1137 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800
 0x0302

	)

1138 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000
 0x0308

	)

1139 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000
 0x0309

	)

1140 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA
 0x0311

	)

1141 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600
 0x0312

	)

1142 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE
 0x0314

	)

1143 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600
 0x031A

	)

1144 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650
 0x031B

	)

1145 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700
 0x031C

	)

1146 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200
 0x0320

	)

1147 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA
 0x0321

	)

1148 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1
 0x0322

	)

1149 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE
 0x0323

	)

1150 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200
 0x0324

	)

1151 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250
 0x0325

	)

1152 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500
 0x0326

	)

1153 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100
 0x0327

	)

1154 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32
 0x0328

	)

1155 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200
 0x0329

	)

1156 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI
 0x032A

	)

1157 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500
 0x032B

	)

1158 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300
 0x032C

	)

1159 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100
 0x032D

	)

1160 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA
 0x0330

	)

1161 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900
 0x0331

	)

1162 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT
 0x0332

	)

1163 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA
 0x0333

	)

1164 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT
 0x0334

	)

1165 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000
 0x0338

	)

1166 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700
 0x033F

	)

1167 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA
 0x0341

	)

1168 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700
 0x0342

	)

1169 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE
 0x0343

	)

1170 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE
 0x0344

	)

1171 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1
 0x0347

	)

1172 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2
 0x0348

	)

1173 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000
 0x034C

	)

1174 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100
 0x034E

	)

1175 
	#PCI_DEVICE_ID_NVIDIA_NVENET_14
 0x0372

	)

1176 
	#PCI_DEVICE_ID_NVIDIA_NVENET_15
 0x0373

	)

1177 
	#PCI_DEVICE_ID_NVIDIA_NVENET_16
 0x03E5

	)

1178 
	#PCI_DEVICE_ID_NVIDIA_NVENET_17
 0x03E6

	)

1179 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA
 0x03E7

	)

1180 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_IDE
 0x03EC

	)

1181 
	#PCI_DEVICE_ID_NVIDIA_NVENET_18
 0x03EE

	)

1182 
	#PCI_DEVICE_ID_NVIDIA_NVENET_19
 0x03EF

	)

1183 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA2
 0x03F6

	)

1184 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA3
 0x03F7

	)

1185 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_IDE
 0x0448

	)

1186 
	#PCI_DEVICE_ID_NVIDIA_NVENET_20
 0x0450

	)

1187 
	#PCI_DEVICE_ID_NVIDIA_NVENET_21
 0x0451

	)

1188 
	#PCI_DEVICE_ID_NVIDIA_NVENET_22
 0x0452

	)

1189 
	#PCI_DEVICE_ID_NVIDIA_NVENET_23
 0x0453

	)

1191 
	#PCI_VENDOR_ID_IMS
 0x10e0

	)

1192 
	#PCI_DEVICE_ID_IMS_TT128
 0x9128

	)

1193 
	#PCI_DEVICE_ID_IMS_TT3D
 0x9135

	)

1195 
	#PCI_VENDOR_ID_INTERG
 0x10ó

	)

1196 
	#PCI_DEVICE_ID_INTERG_1682
 0x1682

	)

1197 
	#PCI_DEVICE_ID_INTERG_2000
 0x2000

	)

1198 
	#PCI_DEVICE_ID_INTERG_2010
 0x2010

	)

1199 
	#PCI_DEVICE_ID_INTERG_5000
 0x5000

	)

1200 
	#PCI_DEVICE_ID_INTERG_5050
 0x5050

	)

1202 
	#PCI_VENDOR_ID_REALTEK
 0x10ec

	)

1203 
	#PCI_DEVICE_ID_REALTEK_8139
 0x8139

	)

1205 
	#PCI_VENDOR_ID_XILINX
 0x10ì

	)

1206 
	#PCI_DEVICE_ID_RME_DIGI96
 0x3fc0

	)

1207 
	#PCI_DEVICE_ID_RME_DIGI96_8
 0x3fc1

	)

1208 
	#PCI_DEVICE_ID_RME_DIGI96_8_PRO
 0x3fc2

	)

1209 
	#PCI_DEVICE_ID_RME_DIGI96_8_PAD_OR_PST
 0x3fc3

	)

1210 
	#PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP
 0x3fc5

	)

1211 
	#PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP_MADI
 0x3fc6

	)

1213 
	#PCI_VENDOR_ID_INIT
 0x1101

	)

1215 
	#PCI_VENDOR_ID_CREATIVE
 0x1102

	)

1216 
	#PCI_DEVICE_ID_CREATIVE_EMU10K1
 0x0002

	)

1218 
	#PCI_VENDOR_ID_ECTIVA
 0x1102

	)

1219 
	#PCI_DEVICE_ID_ECTIVA_EV1938
 0x8938

	)

1221 
	#PCI_VENDOR_ID_TTI
 0x1103

	)

1222 
	#PCI_DEVICE_ID_TTI_HPT343
 0x0003

	)

1223 
	#PCI_DEVICE_ID_TTI_HPT366
 0x0004

	)

1224 
	#PCI_DEVICE_ID_TTI_HPT372
 0x0005

	)

1225 
	#PCI_DEVICE_ID_TTI_HPT302
 0x0006

	)

1226 
	#PCI_DEVICE_ID_TTI_HPT371
 0x0007

	)

1227 
	#PCI_DEVICE_ID_TTI_HPT374
 0x0008

	)

1228 
	#PCI_DEVICE_ID_TTI_HPT372N
 0x0009

	)

1230 
	#PCI_VENDOR_ID_VIA
 0x1106

	)

1231 
	#PCI_DEVICE_ID_VIA_8763_0
 0x0198

	)

1232 
	#PCI_DEVICE_ID_VIA_8380_0
 0x0204

	)

1233 
	#PCI_DEVICE_ID_VIA_3238_0
 0x0238

	)

1234 
	#PCI_DEVICE_ID_VIA_PT880
 0x0258

	)

1235 
	#PCI_DEVICE_ID_VIA_PT880ULTRA
 0x0308

	)

1236 
	#PCI_DEVICE_ID_VIA_PX8X0_0
 0x0259

	)

1237 
	#PCI_DEVICE_ID_VIA_3269_0
 0x0269

	)

1238 
	#PCI_DEVICE_ID_VIA_K8T800PRO_0
 0x0282

	)

1239 
	#PCI_DEVICE_ID_VIA_3296_0
 0x0296

	)

1240 
	#PCI_DEVICE_ID_VIA_8363_0
 0x0305

	)

1241 
	#PCI_DEVICE_ID_VIA_P4M800CE
 0x0314

	)

1242 
	#PCI_DEVICE_ID_VIA_8371_0
 0x0391

	)

1243 
	#PCI_DEVICE_ID_VIA_8501_0
 0x0501

	)

1244 
	#PCI_DEVICE_ID_VIA_82C561
 0x0561

	)

1245 
	#PCI_DEVICE_ID_VIA_82C586_1
 0x0571

	)

1246 
	#PCI_DEVICE_ID_VIA_82C576
 0x0576

	)

1247 
	#PCI_DEVICE_ID_VIA_SATA_EIDE
 0x0581

	)

1248 
	#PCI_DEVICE_ID_VIA_82C586_0
 0x0586

	)

1249 
	#PCI_DEVICE_ID_VIA_82C596
 0x0596

	)

1250 
	#PCI_DEVICE_ID_VIA_82C597_0
 0x0597

	)

1251 
	#PCI_DEVICE_ID_VIA_82C598_0
 0x0598

	)

1252 
	#PCI_DEVICE_ID_VIA_8601_0
 0x0601

	)

1253 
	#PCI_DEVICE_ID_VIA_8605_0
 0x0605

	)

1254 
	#PCI_DEVICE_ID_VIA_82C686
 0x0686

	)

1255 
	#PCI_DEVICE_ID_VIA_82C691_0
 0x0691

	)

1256 
	#PCI_DEVICE_ID_VIA_82C576_1
 0x1571

	)

1257 
	#PCI_DEVICE_ID_VIA_82C586_2
 0x3038

	)

1258 
	#PCI_DEVICE_ID_VIA_82C586_3
 0x3040

	)

1259 
	#PCI_DEVICE_ID_VIA_82C596_3
 0x3050

	)

1260 
	#PCI_DEVICE_ID_VIA_82C596B_3
 0x3051

	)

1261 
	#PCI_DEVICE_ID_VIA_82C686_4
 0x3057

	)

1262 
	#PCI_DEVICE_ID_VIA_82C686_5
 0x3058

	)

1263 
	#PCI_DEVICE_ID_VIA_8233_5
 0x3059

	)

1264 
	#PCI_DEVICE_ID_VIA_8233_0
 0x3074

	)

1265 
	#PCI_DEVICE_ID_VIA_8633_0
 0x3091

	)

1266 
	#PCI_DEVICE_ID_VIA_8367_0
 0x3099

	)

1267 
	#PCI_DEVICE_ID_VIA_8653_0
 0x3101

	)

1268 
	#PCI_DEVICE_ID_VIA_8622
 0x3102

	)

1269 
	#PCI_DEVICE_ID_VIA_8235_USB_2
 0x3104

	)

1270 
	#PCI_DEVICE_ID_VIA_8233C_0
 0x3109

	)

1271 
	#PCI_DEVICE_ID_VIA_8361
 0x3112

	)

1272 
	#PCI_DEVICE_ID_VIA_XM266
 0x3116

	)

1273 
	#PCI_DEVICE_ID_VIA_612X
 0x3119

	)

1274 
	#PCI_DEVICE_ID_VIA_862X_0
 0x3123

	)

1275 
	#PCI_DEVICE_ID_VIA_8753_0
 0x3128

	)

1276 
	#PCI_DEVICE_ID_VIA_8233A
 0x3147

	)

1277 
	#PCI_DEVICE_ID_VIA_8703_51_0
 0x3148

	)

1278 
	#PCI_DEVICE_ID_VIA_8237_SATA
 0x3149

	)

1279 
	#PCI_DEVICE_ID_VIA_XN266
 0x3156

	)

1280 
	#PCI_DEVICE_ID_VIA_6410
 0x3164

	)

1281 
	#PCI_DEVICE_ID_VIA_8754C_0
 0x3168

	)

1282 
	#PCI_DEVICE_ID_VIA_8235
 0x3177

	)

1283 
	#PCI_DEVICE_ID_VIA_8385_0
 0x3188

	)

1284 
	#PCI_DEVICE_ID_VIA_8377_0
 0x3189

	)

1285 
	#PCI_DEVICE_ID_VIA_8378_0
 0x3205

	)

1286 
	#PCI_DEVICE_ID_VIA_8783_0
 0x3208

	)

1287 
	#PCI_DEVICE_ID_VIA_8237
 0x3227

	)

1288 
	#PCI_DEVICE_ID_VIA_8251
 0x3287

	)

1289 
	#PCI_DEVICE_ID_VIA_8237A
 0x3337

	)

1290 
	#PCI_DEVICE_ID_VIA_8231
 0x8231

	)

1291 
	#PCI_DEVICE_ID_VIA_8231_4
 0x8235

	)

1292 
	#PCI_DEVICE_ID_VIA_8365_1
 0x8305

	)

1293 
	#PCI_DEVICE_ID_VIA_CX700
 0x8324

	)

1294 
	#PCI_DEVICE_ID_VIA_8371_1
 0x8391

	)

1295 
	#PCI_DEVICE_ID_VIA_82C598_1
 0x8598

	)

1296 
	#PCI_DEVICE_ID_VIA_838X_1
 0xB188

	)

1297 
	#PCI_DEVICE_ID_VIA_83_87XX_1
 0xB198

	)

1299 
	#PCI_VENDOR_ID_SIEMENS
 0x110A

	)

1300 
	#PCI_DEVICE_ID_SIEMENS_DSCC4
 0x2102

	)

1302 
	#PCI_VENDOR_ID_VORTEX
 0x1119

	)

1303 
	#PCI_DEVICE_ID_VORTEX_GDT60x0
 0x0000

	)

1304 
	#PCI_DEVICE_ID_VORTEX_GDT6000B
 0x0001

	)

1305 
	#PCI_DEVICE_ID_VORTEX_GDT6x10
 0x0002

	)

1306 
	#PCI_DEVICE_ID_VORTEX_GDT6x20
 0x0003

	)

1307 
	#PCI_DEVICE_ID_VORTEX_GDT6530
 0x0004

	)

1308 
	#PCI_DEVICE_ID_VORTEX_GDT6550
 0x0005

	)

1309 
	#PCI_DEVICE_ID_VORTEX_GDT6x17
 0x0006

	)

1310 
	#PCI_DEVICE_ID_VORTEX_GDT6x27
 0x0007

	)

1311 
	#PCI_DEVICE_ID_VORTEX_GDT6537
 0x0008

	)

1312 
	#PCI_DEVICE_ID_VORTEX_GDT6557
 0x0009

	)

1313 
	#PCI_DEVICE_ID_VORTEX_GDT6x15
 0x000a

	)

1314 
	#PCI_DEVICE_ID_VORTEX_GDT6x25
 0x000b

	)

1315 
	#PCI_DEVICE_ID_VORTEX_GDT6535
 0x000c

	)

1316 
	#PCI_DEVICE_ID_VORTEX_GDT6555
 0x000d

	)

1317 
	#PCI_DEVICE_ID_VORTEX_GDT6x17RP
 0x0100

	)

1318 
	#PCI_DEVICE_ID_VORTEX_GDT6x27RP
 0x0101

	)

1319 
	#PCI_DEVICE_ID_VORTEX_GDT6537RP
 0x0102

	)

1320 
	#PCI_DEVICE_ID_VORTEX_GDT6557RP
 0x0103

	)

1321 
	#PCI_DEVICE_ID_VORTEX_GDT6x11RP
 0x0104

	)

1322 
	#PCI_DEVICE_ID_VORTEX_GDT6x21RP
 0x0105

	)

1324 
	#PCI_VENDOR_ID_EF
 0x111a

	)

1325 
	#PCI_DEVICE_ID_EF_ATM_FPGA
 0x0000

	)

1326 
	#PCI_DEVICE_ID_EF_ATM_ASIC
 0x0002

	)

1327 
	#PCI_VENDOR_ID_EF_ATM_LANAI2
 0x0003

	)

1328 
	#PCI_VENDOR_ID_EF_ATM_LANAIHB
 0x0005

	)

1330 
	#PCI_VENDOR_ID_IDT
 0x111d

	)

1331 
	#PCI_DEVICE_ID_IDT_IDT77201
 0x0001

	)

1333 
	#PCI_VENDOR_ID_FORE
 0x1127

	)

1334 
	#PCI_DEVICE_ID_FORE_PCA200E
 0x0300

	)

1336 
	#PCI_VENDOR_ID_PHILIPS
 0x1131

	)

1337 
	#PCI_DEVICE_ID_PHILIPS_SAA7146
 0x7146

	)

1338 
	#PCI_DEVICE_ID_PHILIPS_SAA9730
 0x9730

	)

1340 
	#PCI_VENDOR_ID_EICON
 0x1133

	)

1341 
	#PCI_DEVICE_ID_EICON_DIVA20
 0xe002

	)

1342 
	#PCI_DEVICE_ID_EICON_DIVA20_U
 0xe004

	)

1343 
	#PCI_DEVICE_ID_EICON_DIVA201
 0xe005

	)

1344 
	#PCI_DEVICE_ID_EICON_DIVA202
 0xe00b

	)

1345 
	#PCI_DEVICE_ID_EICON_MAESTRA
 0xe010

	)

1346 
	#PCI_DEVICE_ID_EICON_MAESTRAQ
 0xe012

	)

1347 
	#PCI_DEVICE_ID_EICON_MAESTRAQ_U
 0xe013

	)

1348 
	#PCI_DEVICE_ID_EICON_MAESTRAP
 0xe014

	)

1350 
	#PCI_VENDOR_ID_ZIATECH
 0x1138

	)

1351 
	#PCI_DEVICE_ID_ZIATECH_5550_HC
 0x5550

	)

1353 
	#PCI_VENDOR_ID_SYSKONNECT
 0x1148

	)

1354 
	#PCI_DEVICE_ID_SYSKONNECT_TR
 0x4200

	)

1355 
	#PCI_DEVICE_ID_SYSKONNECT_GE
 0x4300

	)

1356 
	#PCI_DEVICE_ID_SYSKONNECT_YU
 0x4320

	)

1357 
	#PCI_DEVICE_ID_SYSKONNECT_9DXX
 0x4400

	)

1358 
	#PCI_DEVICE_ID_SYSKONNECT_9MXX
 0x4500

	)

1360 
	#PCI_VENDOR_ID_DIGI
 0x114f

	)

1361 
	#PCI_DEVICE_ID_DIGI_DF_M_IOM2_E
 0x0070

	)

1362 
	#PCI_DEVICE_ID_DIGI_DF_M_E
 0x0071

	)

1363 
	#PCI_DEVICE_ID_DIGI_DF_M_IOM2_A
 0x0072

	)

1364 
	#PCI_DEVICE_ID_DIGI_DF_M_A
 0x0073

	)

1365 
	#PCI_DEVICE_ID_NEO_2DB9
 0x00C8

	)

1366 
	#PCI_DEVICE_ID_NEO_2DB9PRI
 0x00C9

	)

1367 
	#PCI_DEVICE_ID_NEO_2RJ45
 0x00CA

	)

1368 
	#PCI_DEVICE_ID_NEO_2RJ45PRI
 0x00CB

	)

1370 
	#PCI_VENDOR_ID_XIRCOM
 0x115d

	)

1371 
	#PCI_DEVICE_ID_XIRCOM_RBM56G
 0x0101

	)

1372 
	#PCI_DEVICE_ID_XIRCOM_X3201_MDM
 0x0103

	)

1374 
	#PCI_VENDOR_ID_SERVERWORKS
 0x1166

	)

1375 
	#PCI_DEVICE_ID_SERVERWORKS_HE
 0x0008

	)

1376 
	#PCI_DEVICE_ID_SERVERWORKS_LE
 0x0009

	)

1377 
	#PCI_DEVICE_ID_SERVERWORKS_GCNB_LE
 0x0017

	)

1378 
	#PCI_DEVICE_ID_SERVERWORKS_EPB
 0x0103

	)

1379 
	#PCI_DEVICE_ID_SERVERWORKS_OSB4
 0x0200

	)

1380 
	#PCI_DEVICE_ID_SERVERWORKS_CSB5
 0x0201

	)

1381 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6
 0x0203

	)

1382 
	#PCI_DEVICE_ID_SERVERWORKS_HT1000SB
 0x0205

	)

1383 
	#PCI_DEVICE_ID_SERVERWORKS_OSB4IDE
 0x0211

	)

1384 
	#PCI_DEVICE_ID_SERVERWORKS_CSB5IDE
 0x0212

	)

1385 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6IDE
 0x0213

	)

1386 
	#PCI_DEVICE_ID_SERVERWORKS_HT1000IDE
 0x0214

	)

1387 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6IDE2
 0x0217

	)

1388 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6LPC
 0x0227

	)

1390 
	#PCI_VENDOR_ID_SBE
 0x1176

	)

1391 
	#PCI_DEVICE_ID_SBE_WANXL100
 0x0301

	)

1392 
	#PCI_DEVICE_ID_SBE_WANXL200
 0x0302

	)

1393 
	#PCI_DEVICE_ID_SBE_WANXL400
 0x0104

	)

1395 
	#PCI_VENDOR_ID_TOSHIBA
 0x1179

	)

1396 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO
 0x0102

	)

1397 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO_1
 0x0103

	)

1398 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO_2
 0x0105

	)

1399 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC95
 0x060a

	)

1400 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC97
 0x060f

	)

1401 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC100
 0x0617

	)

1403 
	#PCI_VENDOR_ID_TOSHIBA_2
 0x102f

	)

1404 
	#PCI_DEVICE_ID_TOSHIBA_TC35815CF
 0x0030

	)

1405 
	#PCI_DEVICE_ID_TOSHIBA_TC86C001_MISC
 0x0108

	)

1406 
	#PCI_DEVICE_ID_TOSHIBA_SPIDER_NET
 0x01b3

	)

1408 
	#PCI_VENDOR_ID_RICOH
 0x1180

	)

1409 
	#PCI_DEVICE_ID_RICOH_RL5C465
 0x0465

	)

1410 
	#PCI_DEVICE_ID_RICOH_RL5C466
 0x0466

	)

1411 
	#PCI_DEVICE_ID_RICOH_RL5C475
 0x0475

	)

1412 
	#PCI_DEVICE_ID_RICOH_RL5C476
 0x0476

	)

1413 
	#PCI_DEVICE_ID_RICOH_RL5C478
 0x0478

	)

1414 
	#PCI_DEVICE_ID_RICOH_R5C822
 0x0822

	)

1416 
	#PCI_VENDOR_ID_DLINK
 0x1186

	)

1417 
	#PCI_DEVICE_ID_DLINK_DGE510T
 0x4c00

	)

1419 
	#PCI_VENDOR_ID_ARTOP
 0x1191

	)

1420 
	#PCI_DEVICE_ID_ARTOP_ATP850UF
 0x0005

	)

1421 
	#PCI_DEVICE_ID_ARTOP_ATP860
 0x0006

	)

1422 
	#PCI_DEVICE_ID_ARTOP_ATP860R
 0x0007

	)

1423 
	#PCI_DEVICE_ID_ARTOP_ATP865
 0x0008

	)

1424 
	#PCI_DEVICE_ID_ARTOP_ATP865R
 0x0009

	)

1425 
	#PCI_DEVICE_ID_ARTOP_AEC7610
 0x8002

	)

1426 
	#PCI_DEVICE_ID_ARTOP_AEC7612UW
 0x8010

	)

1427 
	#PCI_DEVICE_ID_ARTOP_AEC7612U
 0x8020

	)

1428 
	#PCI_DEVICE_ID_ARTOP_AEC7612S
 0x8030

	)

1429 
	#PCI_DEVICE_ID_ARTOP_AEC7612D
 0x8040

	)

1430 
	#PCI_DEVICE_ID_ARTOP_AEC7612SUW
 0x8050

	)

1431 
	#PCI_DEVICE_ID_ARTOP_8060
 0x8060

	)

1433 
	#PCI_VENDOR_ID_ZEITNET
 0x1193

	)

1434 
	#PCI_DEVICE_ID_ZEITNET_1221
 0x0001

	)

1435 
	#PCI_DEVICE_ID_ZEITNET_1225
 0x0002

	)

1437 
	#PCI_VENDOR_ID_FUJITSU_ME
 0x119e

	)

1438 
	#PCI_DEVICE_ID_FUJITSU_FS155
 0x0001

	)

1439 
	#PCI_DEVICE_ID_FUJITSU_FS50
 0x0003

	)

1441 
	#PCI_SUBVENDOR_ID_KEYSPAN
 0x11a9

	)

1442 
	#PCI_SUBDEVICE_ID_KEYSPAN_SX2
 0x5334

	)

1444 
	#PCI_VENDOR_ID_MARVELL
 0x11ab

	)

1445 
	#PCI_DEVICE_ID_MARVELL_GT64111
 0x4146

	)

1446 
	#PCI_DEVICE_ID_MARVELL_GT64260
 0x6430

	)

1447 
	#PCI_DEVICE_ID_MARVELL_MV64360
 0x6460

	)

1448 
	#PCI_DEVICE_ID_MARVELL_MV64460
 0x6480

	)

1449 
	#PCI_DEVICE_ID_MARVELL_GT96100
 0x9652

	)

1450 
	#PCI_DEVICE_ID_MARVELL_GT96100A
 0x9653

	)

1452 
	#PCI_VENDOR_ID_V3
 0x11b0

	)

1453 
	#PCI_DEVICE_ID_V3_V960
 0x0001

	)

1454 
	#PCI_DEVICE_ID_V3_V351
 0x0002

	)

1456 
	#PCI_VENDOR_ID_ATT
 0x11c1

	)

1457 
	#PCI_DEVICE_ID_ATT_VENUS_MODEM
 0x480

	)

1459 
	#PCI_VENDOR_ID_SPECIALIX
 0x11cb

	)

1460 
	#PCI_DEVICE_ID_SPECIALIX_IO8
 0x2000

	)

1461 
	#PCI_DEVICE_ID_SPECIALIX_RIO
 0x8000

	)

1462 
	#PCI_SUBDEVICE_ID_SPECIALIX_SPEED4
 0xa004

	)

1464 
	#PCI_VENDOR_ID_ANALOG_DEVICES
 0x11d4

	)

1465 
	#PCI_DEVICE_ID_AD1889JS
 0x1889

	)

1467 
	#PCI_DEVICE_ID_SEGA_BBA
 0x1234

	)

1469 
	#PCI_VENDOR_ID_ZORAN
 0x11de

	)

1470 
	#PCI_DEVICE_ID_ZORAN_36057
 0x6057

	)

1471 
	#PCI_DEVICE_ID_ZORAN_36120
 0x6120

	)

1473 
	#PCI_VENDOR_ID_COMPEX
 0x11f6

	)

1474 
	#PCI_DEVICE_ID_COMPEX_ENET100VG4
 0x0112

	)

1476 
	#PCI_VENDOR_ID_RP
 0x11„

	)

1477 
	#PCI_DEVICE_ID_RP32INTF
 0x0001

	)

1478 
	#PCI_DEVICE_ID_RP8INTF
 0x0002

	)

1479 
	#PCI_DEVICE_ID_RP16INTF
 0x0003

	)

1480 
	#PCI_DEVICE_ID_RP4QUAD
 0x0004

	)

1481 
	#PCI_DEVICE_ID_RP8OCTA
 0x0005

	)

1482 
	#PCI_DEVICE_ID_RP8J
 0x0006

	)

1483 
	#PCI_DEVICE_ID_RP4J
 0x0007

	)

1484 
	#PCI_DEVICE_ID_RP8SNI
 0x0008

	)

1485 
	#PCI_DEVICE_ID_RP16SNI
 0x0009

	)

1486 
	#PCI_DEVICE_ID_RPP4
 0x000A

	)

1487 
	#PCI_DEVICE_ID_RPP8
 0x000B

	)

1488 
	#PCI_DEVICE_ID_RP4M
 0x000D

	)

1489 
	#PCI_DEVICE_ID_RP2_232
 0x000E

	)

1490 
	#PCI_DEVICE_ID_RP2_422
 0x000F

	)

1491 
	#PCI_DEVICE_ID_URP32INTF
 0x0801

	)

1492 
	#PCI_DEVICE_ID_URP8INTF
 0x0802

	)

1493 
	#PCI_DEVICE_ID_URP16INTF
 0x0803

	)

1494 
	#PCI_DEVICE_ID_URP8OCTA
 0x0805

	)

1495 
	#PCI_DEVICE_ID_UPCI_RM3_8PORT
 0x080C

	)

1496 
	#PCI_DEVICE_ID_UPCI_RM3_4PORT
 0x080D

	)

1497 
	#PCI_DEVICE_ID_CRP16INTF
 0x0903

	)

1499 
	#PCI_VENDOR_ID_CYCLADES
 0x120e

	)

1500 
	#PCI_DEVICE_ID_CYCLOM_Y_Lo
 0x0100

	)

1501 
	#PCI_DEVICE_ID_CYCLOM_Y_Hi
 0x0101

	)

1502 
	#PCI_DEVICE_ID_CYCLOM_4Y_Lo
 0x0102

	)

1503 
	#PCI_DEVICE_ID_CYCLOM_4Y_Hi
 0x0103

	)

1504 
	#PCI_DEVICE_ID_CYCLOM_8Y_Lo
 0x0104

	)

1505 
	#PCI_DEVICE_ID_CYCLOM_8Y_Hi
 0x0105

	)

1506 
	#PCI_DEVICE_ID_CYCLOM_Z_Lo
 0x0200

	)

1507 
	#PCI_DEVICE_ID_CYCLOM_Z_Hi
 0x0201

	)

1508 
	#PCI_DEVICE_ID_PC300_RX_2
 0x0300

	)

1509 
	#PCI_DEVICE_ID_PC300_RX_1
 0x0301

	)

1510 
	#PCI_DEVICE_ID_PC300_TE_2
 0x0310

	)

1511 
	#PCI_DEVICE_ID_PC300_TE_1
 0x0311

	)

1512 
	#PCI_DEVICE_ID_PC300_TE_M_2
 0x0320

	)

1513 
	#PCI_DEVICE_ID_PC300_TE_M_1
 0x0321

	)

1515 
	#PCI_VENDOR_ID_ESSENTIAL
 0x120f

	)

1516 
	#PCI_DEVICE_ID_ESSENTIAL_ROADRUNNER
 0x0001

	)

1518 
	#PCI_VENDOR_ID_O2
 0x1217

	)

1519 
	#PCI_DEVICE_ID_O2_6729
 0x6729

	)

1520 
	#PCI_DEVICE_ID_O2_6730
 0x673a

	)

1521 
	#PCI_DEVICE_ID_O2_6832
 0x6832

	)

1522 
	#PCI_DEVICE_ID_O2_6836
 0x6836

	)

1524 
	#PCI_VENDOR_ID_3DFX
 0x121a

	)

1525 
	#PCI_DEVICE_ID_3DFX_VOODOO
 0x0001

	)

1526 
	#PCI_DEVICE_ID_3DFX_VOODOO2
 0x0002

	)

1527 
	#PCI_DEVICE_ID_3DFX_BANSHEE
 0x0003

	)

1528 
	#PCI_DEVICE_ID_3DFX_VOODOO3
 0x0005

	)

1529 
	#PCI_DEVICE_ID_3DFX_VOODOO5
 0x0009

	)

1531 
	#PCI_VENDOR_ID_AVM
 0x1244

	)

1532 
	#PCI_DEVICE_ID_AVM_B1
 0x0700

	)

1533 
	#PCI_DEVICE_ID_AVM_C4
 0x0800

	)

1534 
	#PCI_DEVICE_ID_AVM_A1
 0x0a00

	)

1535 
	#PCI_DEVICE_ID_AVM_A1_V2
 0x0e00

	)

1536 
	#PCI_DEVICE_ID_AVM_C2
 0x1100

	)

1537 
	#PCI_DEVICE_ID_AVM_T1
 0x1200

	)

1539 
	#PCI_VENDOR_ID_STALLION
 0x124d

	)

1541 
	#PCI_VENDOR_ID_AT
 0x1259

	)

1542 
	#PCI_SUBDEVICE_ID_AT_2700FX
 0x2701

	)

1543 
	#PCI_SUBDEVICE_ID_AT_2701FX
 0x2703

	)

1545 
	#PCI_VENDOR_ID_ESS
 0x125d

	)

1546 
	#PCI_DEVICE_ID_ESS_ESS1968
 0x1968

	)

1547 
	#PCI_DEVICE_ID_ESS_ESS1978
 0x1978

	)

1548 
	#PCI_DEVICE_ID_ESS_ALLEGRO_1
 0x1988

	)

1549 
	#PCI_DEVICE_ID_ESS_ALLEGRO
 0x1989

	)

1550 
	#PCI_DEVICE_ID_ESS_CANYON3D_2LE
 0x1990

	)

1551 
	#PCI_DEVICE_ID_ESS_CANYON3D_2
 0x1992

	)

1552 
	#PCI_DEVICE_ID_ESS_MAESTRO3
 0x1998

	)

1553 
	#PCI_DEVICE_ID_ESS_MAESTRO3_1
 0x1999

	)

1554 
	#PCI_DEVICE_ID_ESS_MAESTRO3_HW
 0x199a

	)

1555 
	#PCI_DEVICE_ID_ESS_MAESTRO3_2
 0x199b

	)

1557 
	#PCI_VENDOR_ID_SATSAGEM
 0x1267

	)

1558 
	#PCI_DEVICE_ID_SATSAGEM_NICCY
 0x1016

	)

1560 
	#PCI_VENDOR_ID_ENSONIQ
 0x1274

	)

1561 
	#PCI_DEVICE_ID_ENSONIQ_CT5880
 0x5880

	)

1562 
	#PCI_DEVICE_ID_ENSONIQ_ES1370
 0x5000

	)

1563 
	#PCI_DEVICE_ID_ENSONIQ_ES1371
 0x1371

	)

1565 
	#PCI_VENDOR_ID_TRANSMETA
 0x1279

	)

1566 
	#PCI_DEVICE_ID_EFFICEON
 0x0060

	)

1568 
	#PCI_VENDOR_ID_ROCKWELL
 0x127A

	)

1570 
	#PCI_VENDOR_ID_ITE
 0x1283

	)

1571 
	#PCI_DEVICE_ID_ITE_IT8172G
 0x8172

	)

1572 
	#PCI_DEVICE_ID_ITE_IT8172G_AUDIO
 0x0801

	)

1573 
	#PCI_DEVICE_ID_ITE_8211
 0x8211

	)

1574 
	#PCI_DEVICE_ID_ITE_8212
 0x8212

	)

1575 
	#PCI_DEVICE_ID_ITE_8872
 0x8872

	)

1576 
	#PCI_DEVICE_ID_ITE_IT8330G_0
 0xe886

	)

1578 
	#PCI_DEVICE_ID_ESS_ESS0100
 0x0100

	)

1580 
	#PCI_VENDOR_ID_ALTEON
 0x12´

	)

1582 
	#PCI_SUBVENDOR_ID_CONNECT_TECH
 0x12c4

	)

1583 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_232
 0x0001

	)

1584 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_232
 0x0002

	)

1585 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_232
 0x0003

	)

1586 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485
 0x0004

	)

1587 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_4_4
 0x0005

	)

1588 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485
 0x0006

	)

1589 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485_2_2
 0x0007

	)

1590 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_485
 0x0008

	)

1591 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_2_6
 0x0009

	)

1592 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH081101V1
 0x000A

	)

1593 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH041101V1
 0x000B

	)

1594 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ
 0x000C

	)

1595 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_PTM
 0x000D

	)

1596 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_NT960PCI
 0x0100

	)

1597 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_2
 0x0201

	)

1598 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_4
 0x0202

	)

1599 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_232
 0x0300

	)

1600 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_232
 0x0301

	)

1601 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_232
 0x0302

	)

1602 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_1_1
 0x0310

	)

1603 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_2
 0x0311

	)

1604 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_4
 0x0312

	)

1605 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2
 0x0320

	)

1606 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4
 0x0321

	)

1607 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8
 0x0322

	)

1608 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_485
 0x0330

	)

1609 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_485
 0x0331

	)

1610 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_485
 0x0332

	)

1612 
	#PCI_VENDOR_ID_NVIDIA_SGS
 0x12d2

	)

1613 
	#PCI_DEVICE_ID_NVIDIA_SGS_RIVA128
 0x0018

	)

1615 
	#PCI_SUBVENDOR_ID_CHASE_PCIFAST
 0x12E0

	)

1616 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST4
 0x0031

	)

1617 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST8
 0x0021

	)

1618 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST16
 0x0011

	)

1619 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST16FMC
 0x0041

	)

1620 
	#PCI_SUBVENDOR_ID_CHASE_PCIRAS
 0x124D

	)

1621 
	#PCI_SUBDEVICE_ID_CHASE_PCIRAS4
 0xF001

	)

1622 
	#PCI_SUBDEVICE_ID_CHASE_PCIRAS8
 0xF010

	)

1624 
	#PCI_VENDOR_ID_AUREAL
 0x12eb

	)

1625 
	#PCI_DEVICE_ID_AUREAL_VORTEX_1
 0x0001

	)

1626 
	#PCI_DEVICE_ID_AUREAL_VORTEX_2
 0x0002

	)

1627 
	#PCI_DEVICE_ID_AUREAL_ADVANTAGE
 0x0003

	)

1629 
	#PCI_VENDOR_ID_ELECTRONICDESIGNGMBH
 0x12f8

	)

1630 
	#PCI_DEVICE_ID_LML_33R10
 0x8a02

	)

1632 
	#PCI_VENDOR_ID_SIIG
 0x131f

	)

1633 
	#PCI_SUBVENDOR_ID_SIIG
 0x131f

	)

1634 
	#PCI_DEVICE_ID_SIIG_1S_10x_550
 0x1000

	)

1635 
	#PCI_DEVICE_ID_SIIG_1S_10x_650
 0x1001

	)

1636 
	#PCI_DEVICE_ID_SIIG_1S_10x_850
 0x1002

	)

1637 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_550
 0x1010

	)

1638 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_650
 0x1011

	)

1639 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_850
 0x1012

	)

1640 
	#PCI_DEVICE_ID_SIIG_1P_10x
 0x1020

	)

1641 
	#PCI_DEVICE_ID_SIIG_2P_10x
 0x1021

	)

1642 
	#PCI_DEVICE_ID_SIIG_2S_10x_550
 0x1030

	)

1643 
	#PCI_DEVICE_ID_SIIG_2S_10x_650
 0x1031

	)

1644 
	#PCI_DEVICE_ID_SIIG_2S_10x_850
 0x1032

	)

1645 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_550
 0x1034

	)

1646 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_650
 0x1035

	)

1647 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_850
 0x1036

	)

1648 
	#PCI_DEVICE_ID_SIIG_4S_10x_550
 0x1050

	)

1649 
	#PCI_DEVICE_ID_SIIG_4S_10x_650
 0x1051

	)

1650 
	#PCI_DEVICE_ID_SIIG_4S_10x_850
 0x1052

	)

1651 
	#PCI_DEVICE_ID_SIIG_1S_20x_550
 0x2000

	)

1652 
	#PCI_DEVICE_ID_SIIG_1S_20x_650
 0x2001

	)

1653 
	#PCI_DEVICE_ID_SIIG_1S_20x_850
 0x2002

	)

1654 
	#PCI_DEVICE_ID_SIIG_1P_20x
 0x2020

	)

1655 
	#PCI_DEVICE_ID_SIIG_2P_20x
 0x2021

	)

1656 
	#PCI_DEVICE_ID_SIIG_2S_20x_550
 0x2030

	)

1657 
	#PCI_DEVICE_ID_SIIG_2S_20x_650
 0x2031

	)

1658 
	#PCI_DEVICE_ID_SIIG_2S_20x_850
 0x2032

	)

1659 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_550
 0x2040

	)

1660 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_650
 0x2041

	)

1661 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_850
 0x2042

	)

1662 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_550
 0x2010

	)

1663 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_650
 0x2011

	)

1664 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_850
 0x2012

	)

1665 
	#PCI_DEVICE_ID_SIIG_4S_20x_550
 0x2050

	)

1666 
	#PCI_DEVICE_ID_SIIG_4S_20x_650
 0x2051

	)

1667 
	#PCI_DEVICE_ID_SIIG_4S_20x_850
 0x2052

	)

1668 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_550
 0x2060

	)

1669 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_650
 0x2061

	)

1670 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_850
 0x2062

	)

1671 
	#PCI_DEVICE_ID_SIIG_8S_20x_550
 0x2080

	)

1672 
	#PCI_DEVICE_ID_SIIG_8S_20x_650
 0x2081

	)

1673 
	#PCI_DEVICE_ID_SIIG_8S_20x_850
 0x2082

	)

1674 
	#PCI_SUBDEVICE_ID_SIIG_QUARTET_SERIAL
 0x2050

	)

1676 
	#PCI_VENDOR_ID_RADISYS
 0x1331

	)

1678 
	#PCI_VENDOR_ID_DOMEX
 0x134a

	)

1679 
	#PCI_DEVICE_ID_DOMEX_DMX3191D
 0x0001

	)

1681 
	#PCI_VENDOR_ID_INTASHIELD
 0x135a

	)

1682 
	#PCI_DEVICE_ID_INTASHIELD_IS200
 0x0d80

	)

1684 
	#PCI_VENDOR_ID_QUATECH
 0x135C

	)

1685 
	#PCI_DEVICE_ID_QUATECH_QSC100
 0x0010

	)

1686 
	#PCI_DEVICE_ID_QUATECH_DSC100
 0x0020

	)

1687 
	#PCI_DEVICE_ID_QUATECH_ESC100D
 0x0050

	)

1688 
	#PCI_DEVICE_ID_QUATECH_ESC100M
 0x0060

	)

1690 
	#PCI_VENDOR_ID_SEALEVEL
 0x135e

	)

1691 
	#PCI_DEVICE_ID_SEALEVEL_U530
 0x7101

	)

1692 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM2
 0x7201

	)

1693 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM422
 0x7402

	)

1694 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM232
 0x7202

	)

1695 
	#PCI_DEVICE_ID_SEALEVEL_COMM4
 0x7401

	)

1696 
	#PCI_DEVICE_ID_SEALEVEL_COMM8
 0x7801

	)

1697 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM8
 0x7804

	)

1699 
	#PCI_VENDOR_ID_HYPERCOPE
 0x1365

	)

1700 
	#PCI_DEVICE_ID_HYPERCOPE_PLX
 0x9050

	)

1701 
	#PCI_SUBDEVICE_ID_HYPERCOPE_OLD_ERGO
 0x0104

	)

1702 
	#PCI_SUBDEVICE_ID_HYPERCOPE_ERGO
 0x0106

	)

1703 
	#PCI_SUBDEVICE_ID_HYPERCOPE_METRO
 0x0107

	)

1704 
	#PCI_SUBDEVICE_ID_HYPERCOPE_CHAMP2
 0x0108

	)

1706 
	#PCI_VENDOR_ID_KAWASAKI
 0x136b

	)

1707 
	#PCI_DEVICE_ID_MCHIP_KL5A72002
 0xff01

	)

1709 
	#PCI_VENDOR_ID_CNET
 0x1371

	)

1710 
	#PCI_DEVICE_ID_CNET_GIGACARD
 0x434e

	)

1712 
	#PCI_VENDOR_ID_LMC
 0x1376

	)

1713 
	#PCI_DEVICE_ID_LMC_HSSI
 0x0003

	)

1714 
	#PCI_DEVICE_ID_LMC_DS3
 0x0004

	)

1715 
	#PCI_DEVICE_ID_LMC_SSI
 0x0005

	)

1716 
	#PCI_DEVICE_ID_LMC_T1
 0x0006

	)

1718 
	#PCI_VENDOR_ID_NETGEAR
 0x1385

	)

1719 
	#PCI_DEVICE_ID_NETGEAR_GA620
 0x620a

	)

1721 
	#PCI_VENDOR_ID_APPLICOM
 0x1389

	)

1722 
	#PCI_DEVICE_ID_APPLICOM_PCIGENERIC
 0x0001

	)

1723 
	#PCI_DEVICE_ID_APPLICOM_PCI2000IBS_CAN
 0x0002

	)

1724 
	#PCI_DEVICE_ID_APPLICOM_PCI2000PFB
 0x0003

	)

1726 
	#PCI_VENDOR_ID_MOXA
 0x1393

	)

1727 
	#PCI_DEVICE_ID_MOXA_RC7000
 0x0001

	)

1728 
	#PCI_DEVICE_ID_MOXA_CP102
 0x1020

	)

1729 
	#PCI_DEVICE_ID_MOXA_CP102UL
 0x1021

	)

1730 
	#PCI_DEVICE_ID_MOXA_CP102U
 0x1022

	)

1731 
	#PCI_DEVICE_ID_MOXA_C104
 0x1040

	)

1732 
	#PCI_DEVICE_ID_MOXA_CP104U
 0x1041

	)

1733 
	#PCI_DEVICE_ID_MOXA_CP104JU
 0x1042

	)

1734 
	#PCI_DEVICE_ID_MOXA_CT114
 0x1140

	)

1735 
	#PCI_DEVICE_ID_MOXA_CP114
 0x1141

	)

1736 
	#PCI_DEVICE_ID_MOXA_CP118U
 0x1180

	)

1737 
	#PCI_DEVICE_ID_MOXA_CP132
 0x1320

	)

1738 
	#PCI_DEVICE_ID_MOXA_CP132U
 0x1321

	)

1739 
	#PCI_DEVICE_ID_MOXA_CP134U
 0x1340

	)

1740 
	#PCI_DEVICE_ID_MOXA_C168
 0x1680

	)

1741 
	#PCI_DEVICE_ID_MOXA_CP168U
 0x1681

	)

1743 
	#PCI_VENDOR_ID_CCD
 0x1397

	)

1744 
	#PCI_DEVICE_ID_CCD_2BD0
 0x2bd0

	)

1745 
	#PCI_DEVICE_ID_CCD_B000
 0xb000

	)

1746 
	#PCI_DEVICE_ID_CCD_B006
 0xb006

	)

1747 
	#PCI_DEVICE_ID_CCD_B007
 0xb007

	)

1748 
	#PCI_DEVICE_ID_CCD_B008
 0xb008

	)

1749 
	#PCI_DEVICE_ID_CCD_B009
 0xb009

	)

1750 
	#PCI_DEVICE_ID_CCD_B00A
 0xb00a

	)

1751 
	#PCI_DEVICE_ID_CCD_B00B
 0xb00b

	)

1752 
	#PCI_DEVICE_ID_CCD_B00C
 0xb00c

	)

1753 
	#PCI_DEVICE_ID_CCD_B100
 0xb100

	)

1754 
	#PCI_DEVICE_ID_CCD_B700
 0xb700

	)

1755 
	#PCI_DEVICE_ID_CCD_B701
 0xb701

	)

1757 
	#PCI_VENDOR_ID_EXAR
 0x13a8

	)

1758 
	#PCI_DEVICE_ID_EXAR_XR17C152
 0x0152

	)

1759 
	#PCI_DEVICE_ID_EXAR_XR17C154
 0x0154

	)

1760 
	#PCI_DEVICE_ID_EXAR_XR17C158
 0x0158

	)

1762 
	#PCI_VENDOR_ID_MICROGATE
 0x13c0

	)

1763 
	#PCI_DEVICE_ID_MICROGATE_USC
 0x0010

	)

1764 
	#PCI_DEVICE_ID_MICROGATE_SCA
 0x0030

	)

1766 
	#PCI_VENDOR_ID_3WARE
 0x13C1

	)

1767 
	#PCI_DEVICE_ID_3WARE_1000
 0x1000

	)

1768 
	#PCI_DEVICE_ID_3WARE_7000
 0x1001

	)

1769 
	#PCI_DEVICE_ID_3WARE_9000
 0x1002

	)

1771 
	#PCI_VENDOR_ID_IOMEGA
 0x13ˇ

	)

1772 
	#PCI_DEVICE_ID_IOMEGA_BUZ
 0x4231

	)

1774 
	#PCI_VENDOR_ID_ABOCOM
 0x13D1

	)

1775 
	#PCI_DEVICE_ID_ABOCOM_2BD1
 0x2BD1

	)

1777 
	#PCI_VENDOR_ID_CMEDIA
 0x13f6

	)

1778 
	#PCI_DEVICE_ID_CMEDIA_CM8338A
 0x0100

	)

1779 
	#PCI_DEVICE_ID_CMEDIA_CM8338B
 0x0101

	)

1780 
	#PCI_DEVICE_ID_CMEDIA_CM8738
 0x0111

	)

1781 
	#PCI_DEVICE_ID_CMEDIA_CM8738B
 0x0112

	)

1783 
	#PCI_VENDOR_ID_LAVA
 0x1407

	)

1784 
	#PCI_DEVICE_ID_LAVA_DSERIAL
 0x0100

	)

1785 
	#PCI_DEVICE_ID_LAVA_QUATRO_A
 0x0101

	)

1786 
	#PCI_DEVICE_ID_LAVA_QUATRO_B
 0x0102

	)

1787 
	#PCI_DEVICE_ID_LAVA_OCTO_A
 0x0180

	)

1788 
	#PCI_DEVICE_ID_LAVA_OCTO_B
 0x0181

	)

1789 
	#PCI_DEVICE_ID_LAVA_PORT_PLUS
 0x0200

	)

1790 
	#PCI_DEVICE_ID_LAVA_QUAD_A
 0x0201

	)

1791 
	#PCI_DEVICE_ID_LAVA_QUAD_B
 0x0202

	)

1792 
	#PCI_DEVICE_ID_LAVA_SSERIAL
 0x0500

	)

1793 
	#PCI_DEVICE_ID_LAVA_PORT_650
 0x0600

	)

1794 
	#PCI_DEVICE_ID_LAVA_PARALLEL
 0x8000

	)

1795 
	#PCI_DEVICE_ID_LAVA_DUAL_PAR_A
 0x8002

	)

1796 
	#PCI_DEVICE_ID_LAVA_DUAL_PAR_B
 0x8003

	)

1797 
	#PCI_DEVICE_ID_LAVA_BOCA_IOPPAR
 0x8800

	)

1799 
	#PCI_VENDOR_ID_TIMEDIA
 0x1409

	)

1800 
	#PCI_DEVICE_ID_TIMEDIA_1889
 0x7168

	)

1802 
	#PCI_VENDOR_ID_ICE
 0x1412

	)

1803 
	#PCI_DEVICE_ID_ICE_1712
 0x1712

	)

1804 
	#PCI_DEVICE_ID_VT1724
 0x1724

	)

1806 
	#PCI_VENDOR_ID_OXSEMI
 0x1415

	)

1807 
	#PCI_DEVICE_ID_OXSEMI_12PCI840
 0x8403

	)

1808 
	#PCI_DEVICE_ID_OXSEMI_16PCI954
 0x9501

	)

1809 
	#PCI_DEVICE_ID_OXSEMI_16PCI95N
 0x9511

	)

1810 
	#PCI_DEVICE_ID_OXSEMI_16PCI954PP
 0x9513

	)

1811 
	#PCI_DEVICE_ID_OXSEMI_16PCI952
 0x9521

	)

1813 
	#PCI_VENDOR_ID_SAMSUNG
 0x144d

	)

1815 
	#PCI_VENDOR_ID_MYRICOM
 0x14c1

	)

1817 
	#PCI_VENDOR_ID_TITAN
 0x14D2

	)

1818 
	#PCI_DEVICE_ID_TITAN_010L
 0x8001

	)

1819 
	#PCI_DEVICE_ID_TITAN_100L
 0x8010

	)

1820 
	#PCI_DEVICE_ID_TITAN_110L
 0x8011

	)

1821 
	#PCI_DEVICE_ID_TITAN_200L
 0x8020

	)

1822 
	#PCI_DEVICE_ID_TITAN_210L
 0x8021

	)

1823 
	#PCI_DEVICE_ID_TITAN_400L
 0x8040

	)

1824 
	#PCI_DEVICE_ID_TITAN_800L
 0x8080

	)

1825 
	#PCI_DEVICE_ID_TITAN_100
 0xA001

	)

1826 
	#PCI_DEVICE_ID_TITAN_200
 0xA005

	)

1827 
	#PCI_DEVICE_ID_TITAN_400
 0xA003

	)

1828 
	#PCI_DEVICE_ID_TITAN_800B
 0xA004

	)

1830 
	#PCI_VENDOR_ID_PANACOM
 0x14d4

	)

1831 
	#PCI_DEVICE_ID_PANACOM_QUADMODEM
 0x0400

	)

1832 
	#PCI_DEVICE_ID_PANACOM_DUALMODEM
 0x0402

	)

1834 
	#PCI_VENDOR_ID_AFAVLAB
 0x14db

	)

1835 
	#PCI_DEVICE_ID_AFAVLAB_P028
 0x2180

	)

1836 
	#PCI_DEVICE_ID_AFAVLAB_P030
 0x2182

	)

1837 
	#PCI_SUBDEVICE_ID_AFAVLAB_P061
 0x2150

	)

1839 
	#PCI_VENDOR_ID_BROADCOM
 0x14e4

	)

1840 
	#PCI_DEVICE_ID_TIGON3_5752
 0x1600

	)

1841 
	#PCI_DEVICE_ID_TIGON3_5752M
 0x1601

	)

1842 
	#PCI_DEVICE_ID_TIGON3_5700
 0x1644

	)

1843 
	#PCI_DEVICE_ID_TIGON3_5701
 0x1645

	)

1844 
	#PCI_DEVICE_ID_TIGON3_5702
 0x1646

	)

1845 
	#PCI_DEVICE_ID_TIGON3_5703
 0x1647

	)

1846 
	#PCI_DEVICE_ID_TIGON3_5704
 0x1648

	)

1847 
	#PCI_DEVICE_ID_TIGON3_5704S_2
 0x1649

	)

1848 
	#PCI_DEVICE_ID_NX2_5706
 0x164a

	)

1849 
	#PCI_DEVICE_ID_NX2_5708
 0x164c

	)

1850 
	#PCI_DEVICE_ID_TIGON3_5702FE
 0x164d

	)

1851 
	#PCI_DEVICE_ID_TIGON3_5705
 0x1653

	)

1852 
	#PCI_DEVICE_ID_TIGON3_5705_2
 0x1654

	)

1853 
	#PCI_DEVICE_ID_TIGON3_5720
 0x1658

	)

1854 
	#PCI_DEVICE_ID_TIGON3_5721
 0x1659

	)

1855 
	#PCI_DEVICE_ID_TIGON3_5705M
 0x165d

	)

1856 
	#PCI_DEVICE_ID_TIGON3_5705M_2
 0x165e

	)

1857 
	#PCI_DEVICE_ID_TIGON3_5714
 0x1668

	)

1858 
	#PCI_DEVICE_ID_TIGON3_5714S
 0x1669

	)

1859 
	#PCI_DEVICE_ID_TIGON3_5780
 0x166a

	)

1860 
	#PCI_DEVICE_ID_TIGON3_5780S
 0x166b

	)

1861 
	#PCI_DEVICE_ID_TIGON3_5705F
 0x166e

	)

1862 
	#PCI_DEVICE_ID_TIGON3_5754M
 0x1672

	)

1863 
	#PCI_DEVICE_ID_TIGON3_5755M
 0x1673

	)

1864 
	#PCI_DEVICE_ID_TIGON3_5750
 0x1676

	)

1865 
	#PCI_DEVICE_ID_TIGON3_5751
 0x1677

	)

1866 
	#PCI_DEVICE_ID_TIGON3_5715
 0x1678

	)

1867 
	#PCI_DEVICE_ID_TIGON3_5715S
 0x1679

	)

1868 
	#PCI_DEVICE_ID_TIGON3_5754
 0x167a

	)

1869 
	#PCI_DEVICE_ID_TIGON3_5755
 0x167b

	)

1870 
	#PCI_DEVICE_ID_TIGON3_5750M
 0x167c

	)

1871 
	#PCI_DEVICE_ID_TIGON3_5751M
 0x167d

	)

1872 
	#PCI_DEVICE_ID_TIGON3_5751F
 0x167e

	)

1873 
	#PCI_DEVICE_ID_TIGON3_5787M
 0x1693

	)

1874 
	#PCI_DEVICE_ID_TIGON3_5782
 0x1696

	)

1875 
	#PCI_DEVICE_ID_TIGON3_5786
 0x169a

	)

1876 
	#PCI_DEVICE_ID_TIGON3_5787
 0x169b

	)

1877 
	#PCI_DEVICE_ID_TIGON3_5788
 0x169c

	)

1878 
	#PCI_DEVICE_ID_TIGON3_5789
 0x169d

	)

1879 
	#PCI_DEVICE_ID_TIGON3_5702X
 0x16a6

	)

1880 
	#PCI_DEVICE_ID_TIGON3_5703X
 0x16a7

	)

1881 
	#PCI_DEVICE_ID_TIGON3_5704S
 0x16a8

	)

1882 
	#PCI_DEVICE_ID_NX2_5706S
 0x16Ø

	)

1883 
	#PCI_DEVICE_ID_NX2_5708S
 0x16ac

	)

1884 
	#PCI_DEVICE_ID_TIGON3_5702A3
 0x16c6

	)

1885 
	#PCI_DEVICE_ID_TIGON3_5703A3
 0x16c7

	)

1886 
	#PCI_DEVICE_ID_TIGON3_5781
 0x16dd

	)

1887 
	#PCI_DEVICE_ID_TIGON3_5753
 0x16f7

	)

1888 
	#PCI_DEVICE_ID_TIGON3_5753M
 0x16fd

	)

1889 
	#PCI_DEVICE_ID_TIGON3_5753F
 0x16„

	)

1890 
	#PCI_DEVICE_ID_TIGON3_5901
 0x170d

	)

1891 
	#PCI_DEVICE_ID_BCM4401B1
 0x170c

	)

1892 
	#PCI_DEVICE_ID_TIGON3_5901_2
 0x170e

	)

1893 
	#PCI_DEVICE_ID_BCM4401
 0x4401

	)

1894 
	#PCI_DEVICE_ID_BCM4401B0
 0x4402

	)

1896 
	#PCI_VENDOR_ID_TOPIC
 0x151f

	)

1897 
	#PCI_DEVICE_ID_TOPIC_TP560
 0x0000

	)

1899 
	#PCI_VENDOR_ID_ENE
 0x1524

	)

1900 
	#PCI_DEVICE_ID_ENE_1211
 0x1211

	)

1901 
	#PCI_DEVICE_ID_ENE_1225
 0x1225

	)

1902 
	#PCI_DEVICE_ID_ENE_1410
 0x1410

	)

1903 
	#PCI_DEVICE_ID_ENE_710
 0x1411

	)

1904 
	#PCI_DEVICE_ID_ENE_712
 0x1412

	)

1905 
	#PCI_DEVICE_ID_ENE_1420
 0x1420

	)

1906 
	#PCI_DEVICE_ID_ENE_720
 0x1421

	)

1907 
	#PCI_DEVICE_ID_ENE_722
 0x1422

	)

1909 
	#PCI_VENDOR_ID_CHELSIO
 0x1425

	)

1911 
	#PCI_VENDOR_ID_SYBA
 0x1592

	)

1912 
	#PCI_DEVICE_ID_SYBA_2P_EPP
 0x0782

	)

1913 
	#PCI_DEVICE_ID_SYBA_1P_ECP
 0x0783

	)

1915 
	#PCI_VENDOR_ID_MORETON
 0x15Ø

	)

1916 
	#PCI_DEVICE_ID_RASTEL_2PORT
 0x2000

	)

1918 
	#PCI_VENDOR_ID_ZOLTRIX
 0x15b0

	)

1919 
	#PCI_DEVICE_ID_ZOLTRIX_2BD0
 0x2bd0

	)

1921 
	#PCI_VENDOR_ID_MELLANOX
 0x15b3

	)

1922 
	#PCI_DEVICE_ID_MELLANOX_TAVOR
 0x5a44

	)

1923 
	#PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE
 0x5a46

	)

1924 
	#PCI_DEVICE_ID_MELLANOX_ARBEL_COMPAT
 0x6278

	)

1925 
	#PCI_DEVICE_ID_MELLANOX_ARBEL
 0x6282

	)

1926 
	#PCI_DEVICE_ID_MELLANOX_SINAI_OLD
 0x5e8c

	)

1927 
	#PCI_DEVICE_ID_MELLANOX_SINAI
 0x6274

	)

1929 
	#PCI_VENDOR_ID_PDC
 0x15e9

	)

1931 
	#PCI_VENDOR_ID_FARSITE
 0x1619

	)

1932 
	#PCI_DEVICE_ID_FARSITE_T2P
 0x0400

	)

1933 
	#PCI_DEVICE_ID_FARSITE_T4P
 0x0440

	)

1934 
	#PCI_DEVICE_ID_FARSITE_T1U
 0x0610

	)

1935 
	#PCI_DEVICE_ID_FARSITE_T2U
 0x0620

	)

1936 
	#PCI_DEVICE_ID_FARSITE_T4U
 0x0640

	)

1937 
	#PCI_DEVICE_ID_FARSITE_TE1
 0x1610

	)

1938 
	#PCI_DEVICE_ID_FARSITE_TE1C
 0x1612

	)

1940 
	#PCI_VENDOR_ID_SIBYTE
 0x166d

	)

1941 
	#PCI_DEVICE_ID_BCM1250_HT
 0x0002

	)

1943 
	#PCI_VENDOR_ID_NETCELL
 0x169c

	)

1944 
	#PCI_DEVICE_ID_REVOLUTION
 0x0044

	)

1946 
	#PCI_VENDOR_ID_VITESSE
 0x1725

	)

1947 
	#PCI_DEVICE_ID_VITESSE_VSC7174
 0x7174

	)

1949 
	#PCI_VENDOR_ID_LINKSYS
 0x1737

	)

1950 
	#PCI_DEVICE_ID_LINKSYS_EG1064
 0x1064

	)

1952 
	#PCI_VENDOR_ID_ALTIMA
 0x173b

	)

1953 
	#PCI_DEVICE_ID_ALTIMA_AC1000
 0x03e8

	)

1954 
	#PCI_DEVICE_ID_ALTIMA_AC1001
 0x03e9

	)

1955 
	#PCI_DEVICE_ID_ALTIMA_AC9100
 0x03ó

	)

1956 
	#PCI_DEVICE_ID_ALTIMA_AC1003
 0x03eb

	)

1958 
	#PCI_VENDOR_ID_S2IO
 0x17d5

	)

1959 
	#PCI_DEVICE_ID_S2IO_WIN
 0x5731

	)

1960 
	#PCI_DEVICE_ID_S2IO_UNI
 0x5831

	)

1961 
	#PCI_DEVICE_ID_HERC_WIN
 0x5732

	)

1962 
	#PCI_DEVICE_ID_HERC_UNI
 0x5832

	)

1964 
	#PCI_VENDOR_ID_SITECOM
 0x182d

	)

1965 
	#PCI_DEVICE_ID_SITECOM_DC105V2
 0x3069

	)

1967 
	#PCI_VENDOR_ID_TOPSPIN
 0x1867

	)

1969 
	#PCI_VENDOR_ID_TDI
 0x192E

	)

1970 
	#PCI_DEVICE_ID_TDI_EHCI
 0x0101

	)

1972 
	#PCI_VENDOR_ID_JMICRON
 0x197B

	)

1973 
	#PCI_DEVICE_ID_JMICRON_JMB360
 0x2360

	)

1974 
	#PCI_DEVICE_ID_JMICRON_JMB361
 0x2361

	)

1975 
	#PCI_DEVICE_ID_JMICRON_JMB363
 0x2363

	)

1976 
	#PCI_DEVICE_ID_JMICRON_JMB365
 0x2365

	)

1977 
	#PCI_DEVICE_ID_JMICRON_JMB366
 0x2366

	)

1978 
	#PCI_DEVICE_ID_JMICRON_JMB368
 0x2368

	)

1980 
	#PCI_VENDOR_ID_TEKRAM
 0x1de1

	)

1981 
	#PCI_DEVICE_ID_TEKRAM_DC290
 0xdc29

	)

1983 
	#PCI_VENDOR_ID_HINT
 0x3388

	)

1984 
	#PCI_DEVICE_ID_HINT_VXPROII_IDE
 0x8013

	)

1986 
	#PCI_VENDOR_ID_3DLABS
 0x3d3d

	)

1987 
	#PCI_DEVICE_ID_3DLABS_PERMEDIA2
 0x0007

	)

1988 
	#PCI_DEVICE_ID_3DLABS_PERMEDIA2V
 0x0009

	)

1990 
	#PCI_VENDOR_ID_AKS
 0x416c

	)

1991 
	#PCI_DEVICE_ID_AKS_ALADDINCARD
 0x0100

	)

1993 
	#PCI_VENDOR_ID_S3
 0x5333

	)

1994 
	#PCI_DEVICE_ID_S3_TRIO
 0x8811

	)

1995 
	#PCI_DEVICE_ID_S3_868
 0x8880

	)

1996 
	#PCI_DEVICE_ID_S3_968
 0x88f0

	)

1997 
	#PCI_DEVICE_ID_S3_SAVAGE4
 0x8a25

	)

1998 
	#PCI_DEVICE_ID_S3_PROSAVAGE8
 0x8d04

	)

1999 
	#PCI_DEVICE_ID_S3_SONICVIBES
 0xˇ00

	)

2001 
	#PCI_VENDOR_ID_DUNORD
 0x5544

	)

2002 
	#PCI_DEVICE_ID_DUNORD_I3000
 0x0001

	)

2004 
	#PCI_VENDOR_ID_DCI
 0x6666

	)

2005 
	#PCI_DEVICE_ID_DCI_PCCOM4
 0x0001

	)

2006 
	#PCI_DEVICE_ID_DCI_PCCOM8
 0x0002

	)

2007 
	#PCI_DEVICE_ID_DCI_PCCOM2
 0x0004

	)

2009 
	#PCI_VENDOR_ID_INTEL
 0x8086

	)

2010 
	#PCI_DEVICE_ID_INTEL_EESSC
 0x0008

	)

2011 
	#PCI_DEVICE_ID_INTEL_PXHD_0
 0x0320

	)

2012 
	#PCI_DEVICE_ID_INTEL_PXHD_1
 0x0321

	)

2013 
	#PCI_DEVICE_ID_INTEL_PXH_0
 0x0329

	)

2014 
	#PCI_DEVICE_ID_INTEL_PXH_1
 0x032A

	)

2015 
	#PCI_DEVICE_ID_INTEL_PXHV
 0x032C

	)

2016 
	#PCI_DEVICE_ID_INTEL_82375
 0x0482

	)

2017 
	#PCI_DEVICE_ID_INTEL_82424
 0x0483

	)

2018 
	#PCI_DEVICE_ID_INTEL_82378
 0x0484

	)

2019 
	#PCI_DEVICE_ID_INTEL_I960
 0x0960

	)

2020 
	#PCI_DEVICE_ID_INTEL_I960RM
 0x0962

	)

2021 
	#PCI_DEVICE_ID_INTEL_82815_MC
 0x1130

	)

2022 
	#PCI_DEVICE_ID_INTEL_82815_CGC
 0x1132

	)

2023 
	#PCI_DEVICE_ID_INTEL_82092AA_0
 0x1221

	)

2024 
	#PCI_DEVICE_ID_INTEL_7505_0
 0x2550

	)

2025 
	#PCI_DEVICE_ID_INTEL_7205_0
 0x255d

	)

2026 
	#PCI_DEVICE_ID_INTEL_82437
 0x122d

	)

2027 
	#PCI_DEVICE_ID_INTEL_82371FB_0
 0x122e

	)

2028 
	#PCI_DEVICE_ID_INTEL_82371FB_1
 0x1230

	)

2029 
	#PCI_DEVICE_ID_INTEL_82371MX
 0x1234

	)

2030 
	#PCI_DEVICE_ID_INTEL_82441
 0x1237

	)

2031 
	#PCI_DEVICE_ID_INTEL_82380FB
 0x124b

	)

2032 
	#PCI_DEVICE_ID_INTEL_82439
 0x1250

	)

2033 
	#PCI_DEVICE_ID_INTEL_80960_RP
 0x1960

	)

2034 
	#PCI_DEVICE_ID_INTEL_82840_HB
 0x1a21

	)

2035 
	#PCI_DEVICE_ID_INTEL_82845_HB
 0x1a30

	)

2036 
	#PCI_DEVICE_ID_INTEL_IOAT
 0x1a38

	)

2037 
	#PCI_DEVICE_ID_INTEL_82801AA_0
 0x2410

	)

2038 
	#PCI_DEVICE_ID_INTEL_82801AA_1
 0x2411

	)

2039 
	#PCI_DEVICE_ID_INTEL_82801AA_3
 0x2413

	)

2040 
	#PCI_DEVICE_ID_INTEL_82801AA_5
 0x2415

	)

2041 
	#PCI_DEVICE_ID_INTEL_82801AA_6
 0x2416

	)

2042 
	#PCI_DEVICE_ID_INTEL_82801AA_8
 0x2418

	)

2043 
	#PCI_DEVICE_ID_INTEL_82801AB_0
 0x2420

	)

2044 
	#PCI_DEVICE_ID_INTEL_82801AB_1
 0x2421

	)

2045 
	#PCI_DEVICE_ID_INTEL_82801AB_3
 0x2423

	)

2046 
	#PCI_DEVICE_ID_INTEL_82801AB_5
 0x2425

	)

2047 
	#PCI_DEVICE_ID_INTEL_82801AB_6
 0x2426

	)

2048 
	#PCI_DEVICE_ID_INTEL_82801AB_8
 0x2428

	)

2049 
	#PCI_DEVICE_ID_INTEL_82801BA_0
 0x2440

	)

2050 
	#PCI_DEVICE_ID_INTEL_82801BA_2
 0x2443

	)

2051 
	#PCI_DEVICE_ID_INTEL_82801BA_4
 0x2445

	)

2052 
	#PCI_DEVICE_ID_INTEL_82801BA_6
 0x2448

	)

2053 
	#PCI_DEVICE_ID_INTEL_82801BA_8
 0x244a

	)

2054 
	#PCI_DEVICE_ID_INTEL_82801BA_9
 0x244b

	)

2055 
	#PCI_DEVICE_ID_INTEL_82801BA_10
 0x244c

	)

2056 
	#PCI_DEVICE_ID_INTEL_82801BA_11
 0x244e

	)

2057 
	#PCI_DEVICE_ID_INTEL_82801E_0
 0x2450

	)

2058 
	#PCI_DEVICE_ID_INTEL_82801E_11
 0x245b

	)

2059 
	#PCI_DEVICE_ID_INTEL_82801CA_0
 0x2480

	)

2060 
	#PCI_DEVICE_ID_INTEL_82801CA_3
 0x2483

	)

2061 
	#PCI_DEVICE_ID_INTEL_82801CA_5
 0x2485

	)

2062 
	#PCI_DEVICE_ID_INTEL_82801CA_6
 0x2486

	)

2063 
	#PCI_DEVICE_ID_INTEL_82801CA_10
 0x248a

	)

2064 
	#PCI_DEVICE_ID_INTEL_82801CA_11
 0x248b

	)

2065 
	#PCI_DEVICE_ID_INTEL_82801CA_12
 0x248c

	)

2066 
	#PCI_DEVICE_ID_INTEL_82801DB_0
 0x24c0

	)

2067 
	#PCI_DEVICE_ID_INTEL_82801DB_1
 0x24c1

	)

2068 
	#PCI_DEVICE_ID_INTEL_82801DB_3
 0x24c3

	)

2069 
	#PCI_DEVICE_ID_INTEL_82801DB_5
 0x24c5

	)

2070 
	#PCI_DEVICE_ID_INTEL_82801DB_6
 0x24c6

	)

2071 
	#PCI_DEVICE_ID_INTEL_82801DB_9
 0x24c9

	)

2072 
	#PCI_DEVICE_ID_INTEL_82801DB_10
 0x24ˇ

	)

2073 
	#PCI_DEVICE_ID_INTEL_82801DB_11
 0x24cb

	)

2074 
	#PCI_DEVICE_ID_INTEL_82801DB_12
 0x24cc

	)

2075 
	#PCI_DEVICE_ID_INTEL_82801EB_0
 0x24d0

	)

2076 
	#PCI_DEVICE_ID_INTEL_82801EB_1
 0x24d1

	)

2077 
	#PCI_DEVICE_ID_INTEL_82801EB_3
 0x24d3

	)

2078 
	#PCI_DEVICE_ID_INTEL_82801EB_5
 0x24d5

	)

2079 
	#PCI_DEVICE_ID_INTEL_82801EB_6
 0x24d6

	)

2080 
	#PCI_DEVICE_ID_INTEL_82801EB_11
 0x24db

	)

2081 
	#PCI_DEVICE_ID_INTEL_82801EB_13
 0x24dd

	)

2082 
	#PCI_DEVICE_ID_INTEL_ESB_1
 0x25a1

	)

2083 
	#PCI_DEVICE_ID_INTEL_ESB_2
 0x25a2

	)

2084 
	#PCI_DEVICE_ID_INTEL_ESB_4
 0x25a4

	)

2085 
	#PCI_DEVICE_ID_INTEL_ESB_5
 0x25a6

	)

2086 
	#PCI_DEVICE_ID_INTEL_ESB_9
 0x25ab

	)

2087 
	#PCI_DEVICE_ID_INTEL_82820_HB
 0x2500

	)

2088 
	#PCI_DEVICE_ID_INTEL_82820_UP_HB
 0x2501

	)

2089 
	#PCI_DEVICE_ID_INTEL_82850_HB
 0x2530

	)

2090 
	#PCI_DEVICE_ID_INTEL_82860_HB
 0x2531

	)

2091 
	#PCI_DEVICE_ID_INTEL_E7501_MCH
 0x254c

	)

2092 
	#PCI_DEVICE_ID_INTEL_82845G_HB
 0x2560

	)

2093 
	#PCI_DEVICE_ID_INTEL_82845G_IG
 0x2562

	)

2094 
	#PCI_DEVICE_ID_INTEL_82865_HB
 0x2570

	)

2095 
	#PCI_DEVICE_ID_INTEL_82865_IG
 0x2572

	)

2096 
	#PCI_DEVICE_ID_INTEL_82875_HB
 0x2578

	)

2097 
	#PCI_DEVICE_ID_INTEL_82915G_HB
 0x2580

	)

2098 
	#PCI_DEVICE_ID_INTEL_82915G_IG
 0x2582

	)

2099 
	#PCI_DEVICE_ID_INTEL_82915GM_HB
 0x2590

	)

2100 
	#PCI_DEVICE_ID_INTEL_82915GM_IG
 0x2592

	)

2101 
	#PCI_DEVICE_ID_INTEL_82945G_HB
 0x2770

	)

2102 
	#PCI_DEVICE_ID_INTEL_82945G_IG
 0x2772

	)

2103 
	#PCI_DEVICE_ID_INTEL_82945GM_HB
 0x27A0

	)

2104 
	#PCI_DEVICE_ID_INTEL_82945GM_IG
 0x27A2

	)

2105 
	#PCI_DEVICE_ID_INTEL_ICH6_0
 0x2640

	)

2106 
	#PCI_DEVICE_ID_INTEL_ICH6_1
 0x2641

	)

2107 
	#PCI_DEVICE_ID_INTEL_ICH6_2
 0x2642

	)

2108 
	#PCI_DEVICE_ID_INTEL_ICH6_16
 0x266a

	)

2109 
	#PCI_DEVICE_ID_INTEL_ICH6_17
 0x266d

	)

2110 
	#PCI_DEVICE_ID_INTEL_ICH6_18
 0x266e

	)

2111 
	#PCI_DEVICE_ID_INTEL_ICH6_19
 0x266f

	)

2112 
	#PCI_DEVICE_ID_INTEL_ESB2_0
 0x2670

	)

2113 
	#PCI_DEVICE_ID_INTEL_ESB2_14
 0x2698

	)

2114 
	#PCI_DEVICE_ID_INTEL_ESB2_17
 0x269b

	)

2115 
	#PCI_DEVICE_ID_INTEL_ESB2_18
 0x269e

	)

2116 
	#PCI_DEVICE_ID_INTEL_ICH7_0
 0x27b8

	)

2117 
	#PCI_DEVICE_ID_INTEL_ICH7_1
 0x27b9

	)

2118 
	#PCI_DEVICE_ID_INTEL_ICH7_30
 0x27b0

	)

2119 
	#PCI_DEVICE_ID_INTEL_ICH7_31
 0x27bd

	)

2120 
	#PCI_DEVICE_ID_INTEL_ICH7_17
 0x27da

	)

2121 
	#PCI_DEVICE_ID_INTEL_ICH7_19
 0x27dd

	)

2122 
	#PCI_DEVICE_ID_INTEL_ICH7_20
 0x27de

	)

2123 
	#PCI_DEVICE_ID_INTEL_ICH7_21
 0x27df

	)

2124 
	#PCI_DEVICE_ID_INTEL_ICH8_0
 0x2810

	)

2125 
	#PCI_DEVICE_ID_INTEL_ICH8_1
 0x2811

	)

2126 
	#PCI_DEVICE_ID_INTEL_ICH8_2
 0x2812

	)

2127 
	#PCI_DEVICE_ID_INTEL_ICH8_3
 0x2814

	)

2128 
	#PCI_DEVICE_ID_INTEL_ICH8_4
 0x2815

	)

2129 
	#PCI_DEVICE_ID_INTEL_ICH8_5
 0x283e

	)

2130 
	#PCI_DEVICE_ID_INTEL_ICH8_6
 0x2850

	)

2131 
	#PCI_DEVICE_ID_INTEL_82855PM_HB
 0x3340

	)

2132 
	#PCI_DEVICE_ID_INTEL_82830_HB
 0x3575

	)

2133 
	#PCI_DEVICE_ID_INTEL_82830_CGC
 0x3577

	)

2134 
	#PCI_DEVICE_ID_INTEL_82855GM_HB
 0x3580

	)

2135 
	#PCI_DEVICE_ID_INTEL_82855GM_IG
 0x3582

	)

2136 
	#PCI_DEVICE_ID_INTEL_E7520_MCH
 0x3590

	)

2137 
	#PCI_DEVICE_ID_INTEL_E7320_MCH
 0x3592

	)

2138 
	#PCI_DEVICE_ID_INTEL_MCH_PA
 0x3595

	)

2139 
	#PCI_DEVICE_ID_INTEL_MCH_PA1
 0x3596

	)

2140 
	#PCI_DEVICE_ID_INTEL_MCH_PB
 0x3597

	)

2141 
	#PCI_DEVICE_ID_INTEL_MCH_PB1
 0x3598

	)

2142 
	#PCI_DEVICE_ID_INTEL_MCH_PC
 0x3599

	)

2143 
	#PCI_DEVICE_ID_INTEL_MCH_PC1
 0x359a

	)

2144 
	#PCI_DEVICE_ID_INTEL_E7525_MCH
 0x359e

	)

2145 
	#PCI_DEVICE_ID_INTEL_82371SB_0
 0x7000

	)

2146 
	#PCI_DEVICE_ID_INTEL_82371SB_1
 0x7010

	)

2147 
	#PCI_DEVICE_ID_INTEL_82371SB_2
 0x7020

	)

2148 
	#PCI_DEVICE_ID_INTEL_82437VX
 0x7030

	)

2149 
	#PCI_DEVICE_ID_INTEL_82439TX
 0x7100

	)

2150 
	#PCI_DEVICE_ID_INTEL_82371AB_0
 0x7110

	)

2151 
	#PCI_DEVICE_ID_INTEL_82371AB
 0x7111

	)

2152 
	#PCI_DEVICE_ID_INTEL_82371AB_2
 0x7112

	)

2153 
	#PCI_DEVICE_ID_INTEL_82371AB_3
 0x7113

	)

2154 
	#PCI_DEVICE_ID_INTEL_82810_MC1
 0x7120

	)

2155 
	#PCI_DEVICE_ID_INTEL_82810_IG1
 0x7121

	)

2156 
	#PCI_DEVICE_ID_INTEL_82810_MC3
 0x7122

	)

2157 
	#PCI_DEVICE_ID_INTEL_82810_IG3
 0x7123

	)

2158 
	#PCI_DEVICE_ID_INTEL_82810E_MC
 0x7124

	)

2159 
	#PCI_DEVICE_ID_INTEL_82810E_IG
 0x7125

	)

2160 
	#PCI_DEVICE_ID_INTEL_82443LX_0
 0x7180

	)

2161 
	#PCI_DEVICE_ID_INTEL_82443LX_1
 0x7181

	)

2162 
	#PCI_DEVICE_ID_INTEL_82443BX_0
 0x7190

	)

2163 
	#PCI_DEVICE_ID_INTEL_82443BX_1
 0x7191

	)

2164 
	#PCI_DEVICE_ID_INTEL_82443BX_2
 0x7192

	)

2165 
	#PCI_DEVICE_ID_INTEL_440MX
 0x7195

	)

2166 
	#PCI_DEVICE_ID_INTEL_440MX_6
 0x7196

	)

2167 
	#PCI_DEVICE_ID_INTEL_82443MX_0
 0x7198

	)

2168 
	#PCI_DEVICE_ID_INTEL_82443MX_1
 0x7199

	)

2169 
	#PCI_DEVICE_ID_INTEL_82443MX_3
 0x719b

	)

2170 
	#PCI_DEVICE_ID_INTEL_82443GX_0
 0x71a0

	)

2171 
	#PCI_DEVICE_ID_INTEL_82443GX_2
 0x71a2

	)

2172 
	#PCI_DEVICE_ID_INTEL_82372FB_1
 0x7601

	)

2173 
	#PCI_DEVICE_ID_INTEL_82454GX
 0x84c4

	)

2174 
	#PCI_DEVICE_ID_INTEL_82450GX
 0x84c5

	)

2175 
	#PCI_DEVICE_ID_INTEL_82451NX
 0x84ˇ

	)

2176 
	#PCI_DEVICE_ID_INTEL_82454NX
 0x84cb

	)

2177 
	#PCI_DEVICE_ID_INTEL_84460GX
 0x84ó

	)

2178 
	#PCI_DEVICE_ID_INTEL_IXP4XX
 0x8500

	)

2179 
	#PCI_DEVICE_ID_INTEL_IXP2800
 0x9004

	)

2180 
	#PCI_DEVICE_ID_INTEL_S21152BB
 0xb152

	)

2182 
	#PCI_VENDOR_ID_SCALEMP
 0x8686

	)

2183 
	#PCI_DEVICE_ID_SCALEMP_VSMP_CTL
 0x1010

	)

2185 
	#PCI_VENDOR_ID_COMPUTONE
 0x8e0e

	)

2186 
	#PCI_DEVICE_ID_COMPUTONE_IP2EX
 0x0291

	)

2187 
	#PCI_DEVICE_ID_COMPUTONE_PG
 0x0302

	)

2188 
	#PCI_SUBVENDOR_ID_COMPUTONE
 0x8e0e

	)

2189 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG4
 0x0001

	)

2190 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG8
 0x0002

	)

2191 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG6
 0x0003

	)

2193 
	#PCI_VENDOR_ID_KTI
 0x8e2e

	)

2195 
	#PCI_VENDOR_ID_ADAPTEC
 0x9004

	)

2196 
	#PCI_DEVICE_ID_ADAPTEC_7810
 0x1078

	)

2197 
	#PCI_DEVICE_ID_ADAPTEC_7821
 0x2178

	)

2198 
	#PCI_DEVICE_ID_ADAPTEC_38602
 0x3860

	)

2199 
	#PCI_DEVICE_ID_ADAPTEC_7850
 0x5078

	)

2200 
	#PCI_DEVICE_ID_ADAPTEC_7855
 0x5578

	)

2201 
	#PCI_DEVICE_ID_ADAPTEC_3860
 0x6038

	)

2202 
	#PCI_DEVICE_ID_ADAPTEC_1480A
 0x6075

	)

2203 
	#PCI_DEVICE_ID_ADAPTEC_7860
 0x6078

	)

2204 
	#PCI_DEVICE_ID_ADAPTEC_7861
 0x6178

	)

2205 
	#PCI_DEVICE_ID_ADAPTEC_7870
 0x7078

	)

2206 
	#PCI_DEVICE_ID_ADAPTEC_7871
 0x7178

	)

2207 
	#PCI_DEVICE_ID_ADAPTEC_7872
 0x7278

	)

2208 
	#PCI_DEVICE_ID_ADAPTEC_7873
 0x7378

	)

2209 
	#PCI_DEVICE_ID_ADAPTEC_7874
 0x7478

	)

2210 
	#PCI_DEVICE_ID_ADAPTEC_7895
 0x7895

	)

2211 
	#PCI_DEVICE_ID_ADAPTEC_7880
 0x8078

	)

2212 
	#PCI_DEVICE_ID_ADAPTEC_7881
 0x8178

	)

2213 
	#PCI_DEVICE_ID_ADAPTEC_7882
 0x8278

	)

2214 
	#PCI_DEVICE_ID_ADAPTEC_7883
 0x8378

	)

2215 
	#PCI_DEVICE_ID_ADAPTEC_7884
 0x8478

	)

2216 
	#PCI_DEVICE_ID_ADAPTEC_7885
 0x8578

	)

2217 
	#PCI_DEVICE_ID_ADAPTEC_7886
 0x8678

	)

2218 
	#PCI_DEVICE_ID_ADAPTEC_7887
 0x8778

	)

2219 
	#PCI_DEVICE_ID_ADAPTEC_7888
 0x8878

	)

2221 
	#PCI_VENDOR_ID_ADAPTEC2
 0x9005

	)

2222 
	#PCI_DEVICE_ID_ADAPTEC2_2940U2
 0x0010

	)

2223 
	#PCI_DEVICE_ID_ADAPTEC2_2930U2
 0x0011

	)

2224 
	#PCI_DEVICE_ID_ADAPTEC2_7890B
 0x0013

	)

2225 
	#PCI_DEVICE_ID_ADAPTEC2_7890
 0x001f

	)

2226 
	#PCI_DEVICE_ID_ADAPTEC2_3940U2
 0x0050

	)

2227 
	#PCI_DEVICE_ID_ADAPTEC2_3950U2D
 0x0051

	)

2228 
	#PCI_DEVICE_ID_ADAPTEC2_7896
 0x005f

	)

2229 
	#PCI_DEVICE_ID_ADAPTEC2_7892A
 0x0080

	)

2230 
	#PCI_DEVICE_ID_ADAPTEC2_7892B
 0x0081

	)

2231 
	#PCI_DEVICE_ID_ADAPTEC2_7892D
 0x0083

	)

2232 
	#PCI_DEVICE_ID_ADAPTEC2_7892P
 0x008f

	)

2233 
	#PCI_DEVICE_ID_ADAPTEC2_7899A
 0x00c0

	)

2234 
	#PCI_DEVICE_ID_ADAPTEC2_7899B
 0x00c1

	)

2235 
	#PCI_DEVICE_ID_ADAPTEC2_7899D
 0x00c3

	)

2236 
	#PCI_DEVICE_ID_ADAPTEC2_7899P
 0x00cf

	)

2237 
	#PCI_DEVICE_ID_ADAPTEC2_OBSIDIAN
 0x0500

	)

2238 
	#PCI_DEVICE_ID_ADAPTEC2_SCAMP
 0x0503

	)

2240 
	#PCI_VENDOR_ID_HOLTEK
 0x9412

	)

2241 
	#PCI_DEVICE_ID_HOLTEK_6565
 0x6565

	)

2243 
	#PCI_VENDOR_ID_NETMOS
 0x9710

	)

2244 
	#PCI_DEVICE_ID_NETMOS_9705
 0x9705

	)

2245 
	#PCI_DEVICE_ID_NETMOS_9715
 0x9715

	)

2246 
	#PCI_DEVICE_ID_NETMOS_9735
 0x9735

	)

2247 
	#PCI_DEVICE_ID_NETMOS_9745
 0x9745

	)

2248 
	#PCI_DEVICE_ID_NETMOS_9755
 0x9755

	)

2249 
	#PCI_DEVICE_ID_NETMOS_9805
 0x9805

	)

2250 
	#PCI_DEVICE_ID_NETMOS_9815
 0x9815

	)

2251 
	#PCI_DEVICE_ID_NETMOS_9835
 0x9835

	)

2252 
	#PCI_DEVICE_ID_NETMOS_9845
 0x9845

	)

2253 
	#PCI_DEVICE_ID_NETMOS_9855
 0x9855

	)

2255 
	#PCI_SUBVENDOR_ID_EXSYS
 0xd84d

	)

2256 
	#PCI_SUBDEVICE_ID_EXSYS_4014
 0x4014

	)

2257 
	#PCI_SUBDEVICE_ID_EXSYS_4055
 0x4055

	)

2259 
	#PCI_VENDOR_ID_TIGERJET
 0xe159

	)

2260 
	#PCI_DEVICE_ID_TIGERJET_300
 0x0001

	)

2261 
	#PCI_DEVICE_ID_TIGERJET_100
 0x0002

	)

2263 
	#PCI_VENDOR_ID_TTTECH
 0x0357

	)

2264 
	#PCI_DEVICE_ID_TTTECH_MC322
 0x000A

	)

2266 
	#PCI_VENDOR_ID_XILINX_RME
 0xó60

	)

2267 
	#PCI_DEVICE_ID_RME_DIGI32
 0x9896

	)

2268 
	#PCI_DEVICE_ID_RME_DIGI32_PRO
 0x9897

	)

2269 
	#PCI_DEVICE_ID_RME_DIGI32_8
 0x9898

	)

	@linux/pci_regs.h

12 #i‚de‡
LINUX_PCI_REGS_H


13 
	#LINUX_PCI_REGS_H


	)

15 
	#PCI_VENDOR_ID
 0x00

	)

16 
	#PCI_DEVICE_ID
 0x02

	)

17 
	#PCI_COMMAND
 0x04

	)

18 
	#PCI_COMMAND_IO
 0x1

	)

19 
	#PCI_COMMAND_MEMORY
 0x2

	)

20 
	#PCI_COMMAND_MASTER
 0x4

	)

21 
	#PCI_COMMAND_SPECIAL
 0x8

	)

22 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

23 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

24 
	#PCI_COMMAND_PARITY
 0x40

	)

25 
	#PCI_COMMAND_WAIT
 0x80

	)

26 
	#PCI_COMMAND_SERR
 0x100

	)

27 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

28 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

30 
	#PCI_STATUS
 0x06

	)

31 
	#PCI_STATUS_CAP_LIST
 0x10

	)

32 
	#PCI_STATUS_66MHZ
 0x20

	)

33 
	#PCI_STATUS_UDF
 0x40

	)

34 
	#PCI_STATUS_FAST_BACK
 0x80

	)

35 
	#PCI_STATUS_PARITY
 0x100

	)

36 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

37 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

38 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

39 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

40 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

41 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

42 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

43 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

44 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

46 
	#PCI_CLASS_REVISION
 0x08

	)

47 
	#PCI_REVISION_ID
 0x08

	)

48 
	#PCI_CLASS_PROG
 0x09

	)

49 
	#PCI_CLASS_DEVICE
 0x0a

	)

51 
	#PCI_CACHE_LINE_SIZE
 0x0c

	)

52 
	#PCI_LATENCY_TIMER
 0x0d

	)

53 
	#PCI_HEADER_TYPE
 0x0e

	)

54 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

55 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

56 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

58 
	#PCI_BIST
 0x0f

	)

59 
	#PCI_BIST_CODE_MASK
 0x0f

	)

60 
	#PCI_BIST_START
 0x40

	)

61 
	#PCI_BIST_CAPABLE
 0x80

	)

63 
	#PCI_BASE_ADDRESS_0
 0x10

	)

64 
	#PCI_BASE_ADDRESS_1
 0x14

	)

65 
	#PCI_BASE_ADDRESS_2
 0x18

	)

66 
	#PCI_BASE_ADDRESS_3
 0x1c

	)

67 
	#PCI_BASE_ADDRESS_4
 0x20

	)

68 
	#PCI_BASE_ADDRESS_5
 0x24

	)

69 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

70 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

71 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

72 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

73 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

74 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

75 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

76 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

77 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

78 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

80 
	#PCI_CARDBUS_CIS
 0x28

	)

81 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

82 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

83 
	#PCI_ROM_ADDRESS
 0x30

	)

84 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

85 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

87 
	#PCI_CAPABILITY_LIST
 0x34

	)

89 
	#PCI_INTERRUPT_LINE
 0x3c

	)

90 
	#PCI_INTERRUPT_PIN
 0x3d

	)

91 
	#PCI_MIN_GNT
 0x3e

	)

92 
	#PCI_MAX_LAT
 0x3f

	)

94 
	#PCI_PRIMARY_BUS
 0x18

	)

95 
	#PCI_SECONDARY_BUS
 0x19

	)

96 
	#PCI_SUBORDINATE_BUS
 0x1a

	)

97 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

98 
	#PCI_IO_BASE
 0x1c

	)

99 
	#PCI_IO_LIMIT
 0x1d

	)

100 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

101 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

102 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

103 
	#PCI_IO_RANGE_MASK
 (~0x0fUL)

	)

104 
	#PCI_SEC_STATUS
 0x1e

	)

105 
	#PCI_MEMORY_BASE
 0x20

	)

106 
	#PCI_MEMORY_LIMIT
 0x22

	)

107 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

108 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

109 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

110 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

111 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

112 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

113 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

114 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

115 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

116 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

117 
	#PCI_IO_BASE_UPPER16
 0x30

	)

118 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

120 
	#PCI_ROM_ADDRESS1
 0x38

	)

122 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

123 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

124 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

125 
	#PCI_BRIDGE_CTL_NO_ISA
 0x04

	)

126 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

127 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

128 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

129 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

131 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

133 
	#PCI_CB_SEC_STATUS
 0x16

	)

134 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

135 
	#PCI_CB_CARD_BUS
 0x19

	)

136 
	#PCI_CB_SUBORDINATE_BUS
 0x1a

	)

137 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

138 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

139 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

140 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

141 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

142 
	#PCI_CB_IO_BASE_0
 0x2c

	)

143 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

144 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

145 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

146 
	#PCI_CB_IO_BASE_1
 0x34

	)

147 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

148 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

149 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

150 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

152 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

153 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

154 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

155 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

156 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

157 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

158 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

159 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

160 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

161 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

162 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

163 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

164 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

165 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

167 
	#PCI_CAP_LIST_ID
 0

	)

168 
	#PCI_CAP_ID_PM
 0x01

	)

169 
	#PCI_CAP_ID_AGP
 0x02

	)

170 
	#PCI_CAP_ID_VPD
 0x03

	)

171 
	#PCI_CAP_ID_SLOTID
 0x04

	)

172 
	#PCI_CAP_ID_MSI
 0x05

	)

173 
	#PCI_CAP_ID_CHSWP
 0x06

	)

174 
	#PCI_CAP_ID_PCIX
 0x07

	)

175 
	#PCI_CAP_ID_HT_IRQCONF
 0x08

	)

176 
	#PCI_CAP_ID_VNDR
 0x09

	)

177 
	#PCI_CAP_ID_SHPC
 0x0C

	)

178 
	#PCI_CAP_ID_EXP
 0x10

	)

179 
	#PCI_CAP_ID_MSIX
 0x11

	)

180 
	#PCI_CAP_LIST_NEXT
 1

	)

181 
	#PCI_CAP_FLAGS
 2

	)

182 
	#PCI_CAP_SIZEOF
 4

	)

184 
	#PCI_PM_PMC
 2

	)

185 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

186 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

187 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

188 
	#PCI_PM_CAP_DSI
 0x0020

	)

189 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

190 
	#PCI_PM_CAP_D1
 0x0200

	)

191 
	#PCI_PM_CAP_D2
 0x0400

	)

192 
	#PCI_PM_CAP_PME
 0x0800

	)

193 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

194 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

195 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

196 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

197 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

198 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

199 
	#PCI_PM_CTRL
 4

	)

200 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

201 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0004

	)

202 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

203 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

204 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

205 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

206 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

207 
	#PCI_PM_PPB_B2_B3
 0x40

	)

208 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

209 
	#PCI_PM_DATA_REGISTER
 7

	)

210 
	#PCI_PM_SIZEOF
 8

	)

212 
	#PCI_AGP_VERSION
 2

	)

213 
	#PCI_AGP_RFU
 3

	)

214 
	#PCI_AGP_STATUS
 4

	)

215 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

216 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

217 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

218 
	#PCI_AGP_STATUS_FW
 0x0010

	)

219 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

220 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

221 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

222 
	#PCI_AGP_COMMAND
 8

	)

223 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

224 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

225 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

226 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

227 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

228 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

229 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

230 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

231 
	#PCI_AGP_SIZEOF
 12

	)

233 
	#PCI_VPD_ADDR
 2

	)

234 
	#PCI_VPD_ADDR_MASK
 0x7fff

	)

235 
	#PCI_VPD_ADDR_F
 0x8000

	)

236 
	#PCI_VPD_DATA
 4

	)

238 
	#PCI_SID_ESR
 2

	)

239 
	#PCI_SID_ESR_NSLOTS
 0x1f

	)

240 
	#PCI_SID_ESR_FIC
 0x20

	)

241 
	#PCI_SID_CHASSIS_NR
 3

	)

243 
	#PCI_MSI_FLAGS
 2

	)

244 
	#PCI_MSI_FLAGS_64BIT
 0x80

	)

245 
	#PCI_MSI_FLAGS_QSIZE
 0x70

	)

246 
	#PCI_MSI_FLAGS_QMASK
 0x0e

	)

247 
	#PCI_MSI_FLAGS_ENABLE
 0x01

	)

248 
	#PCI_MSI_FLAGS_MASKBIT
 0x100

	)

249 
	#PCI_MSI_RFU
 3

	)

250 
	#PCI_MSI_ADDRESS_LO
 4

	)

251 
	#PCI_MSI_ADDRESS_HI
 8

	)

252 
	#PCI_MSI_DATA_32
 8

	)

253 
	#PCI_MSI_DATA_64
 12

	)

254 
	#PCI_MSI_MASK_BIT
 16

	)

256 
	#PCI_CHSWP_CSR
 2

	)

257 
	#PCI_CHSWP_DHA
 0x01

	)

258 
	#PCI_CHSWP_EIM
 0x02

	)

259 
	#PCI_CHSWP_PIE
 0x04

	)

260 
	#PCI_CHSWP_LOO
 0x08

	)

261 
	#PCI_CHSWP_PI
 0x30

	)

262 
	#PCI_CHSWP_EXT
 0x40

	)

263 
	#PCI_CHSWP_INS
 0x80

	)

265 
	#PCI_X_CMD
 2

	)

266 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

267 
	#PCI_X_CMD_ERO
 0x0002

	)

268 
	#PCI_X_CMD_MAX_READ
 0x000c

	)

269 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

270 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3)

	)

271 
	#PCI_X_STATUS
 4

	)

272 
	#PCI_X_STATUS_DEVFN
 0x000000ff

	)

273 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

274 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

275 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

276 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

277 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

278 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

279 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

280 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

281 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

282 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

283 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

284 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

286 
	#PCI_EXP_FLAGS
 2

	)

287 
	#PCI_EXP_FLAGS_VERS
 0x000f

	)

288 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

289 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

290 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

291 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

292 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

293 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

294 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

295 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

296 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

297 
	#PCI_EXP_DEVCAP
 4

	)

298 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x07

	)

299 
	#PCI_EXP_DEVCAP_PHANTOM
 0x18

	)

300 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x20

	)

301 
	#PCI_EXP_DEVCAP_L0S
 0x1c0

	)

302 
	#PCI_EXP_DEVCAP_L1
 0xe00

	)

303 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x1000

	)

304 
	#PCI_EXP_DEVCAP_ATN_IND
 0x2000

	)

305 
	#PCI_EXP_DEVCAP_PWR_IND
 0x4000

	)

306 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x3fc0000

	)

307 
	#PCI_EXP_DEVCAP_PWR_SCL
 0xc000000

	)

308 
	#PCI_EXP_DEVCTL
 8

	)

309 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

310 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

311 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

312 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

313 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

314 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

315 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

316 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

317 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

318 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

319 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

320 
	#PCI_EXP_DEVSTA
 10

	)

321 
	#PCI_EXP_DEVSTA_CED
 0x01

	)

322 
	#PCI_EXP_DEVSTA_NFED
 0x02

	)

323 
	#PCI_EXP_DEVSTA_FED
 0x04

	)

324 
	#PCI_EXP_DEVSTA_URD
 0x08

	)

325 
	#PCI_EXP_DEVSTA_AUXPD
 0x10

	)

326 
	#PCI_EXP_DEVSTA_TRPND
 0x20

	)

327 
	#PCI_EXP_LNKCAP
 12

	)

328 
	#PCI_EXP_LNKCTL
 16

	)

329 
	#PCI_EXP_LNKSTA
 18

	)

330 
	#PCI_EXP_SLTCAP
 20

	)

331 
	#PCI_EXP_SLTCTL
 24

	)

332 
	#PCI_EXP_SLTSTA
 26

	)

333 
	#PCI_EXP_RTCTL
 28

	)

334 
	#PCI_EXP_RTCTL_SECEE
 0x01

	)

335 
	#PCI_EXP_RTCTL_SENFEE
 0x02

	)

336 
	#PCI_EXP_RTCTL_SEFEE
 0x04

	)

337 
	#PCI_EXP_RTCTL_PMEIE
 0x08

	)

338 
	#PCI_EXP_RTCTL_CRSSVE
 0x10

	)

339 
	#PCI_EXP_RTCAP
 30

	)

340 
	#PCI_EXP_RTSTA
 32

	)

342 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

343 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

344 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

346 
	#PCI_EXT_CAP_ID_ERR
 1

	)

347 
	#PCI_EXT_CAP_ID_VC
 2

	)

348 
	#PCI_EXT_CAP_ID_DSN
 3

	)

349 
	#PCI_EXT_CAP_ID_PWR
 4

	)

351 
	#PCI_ERR_UNCOR_STATUS
 4

	)

352 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

353 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

354 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

355 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

356 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

357 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

358 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

359 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

360 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

361 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

362 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

363 
	#PCI_ERR_UNCOR_MASK
 8

	)

365 
	#PCI_ERR_UNCOR_SEVER
 12

	)

367 
	#PCI_ERR_COR_STATUS
 16

	)

368 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

369 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

370 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

371 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

372 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

373 
	#PCI_ERR_COR_MASK
 20

	)

375 
	#PCI_ERR_CAP
 24

	)

376 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31)

	)

377 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

378 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

379 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

380 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

381 
	#PCI_ERR_HEADER_LOG
 28

	)

382 
	#PCI_ERR_ROOT_COMMAND
 44

	)

384 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

386 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

388 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

389 
	#PCI_ERR_ROOT_STATUS
 48

	)

390 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

392 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

394 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

396 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

397 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

398 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

399 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

400 
	#PCI_ERR_ROOT_COR_SRC
 52

	)

401 
	#PCI_ERR_ROOT_SRC
 54

	)

403 
	#PCI_VC_PORT_REG1
 4

	)

404 
	#PCI_VC_PORT_REG2
 8

	)

405 
	#PCI_VC_PORT_CTRL
 12

	)

406 
	#PCI_VC_PORT_STATUS
 14

	)

407 
	#PCI_VC_RES_CAP
 16

	)

408 
	#PCI_VC_RES_CTRL
 20

	)

409 
	#PCI_VC_RES_STATUS
 26

	)

411 
	#PCI_PWR_DSR
 4

	)

412 
	#PCI_PWR_DATA
 8

	)

413 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xff)

	)

414 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3)

	)

415 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7)

	)

416 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3)

	)

417 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7)

	)

418 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7)

	)

419 
	#PCI_PWR_CAP
 12

	)

420 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1)

	)

	@linux/percpu.h

12 #i‚de‡
__LINUX_PERCPU_H


13 
	#__LINUX_PERCPU_H


	)

14 
	~<löux/•ölock.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/smp.h
>

17 
	~<löux/°rög.h
>

18 
	~<asm/≥r˝u.h
>

20 #i‚de‡
PERCPU_ENOUGH_ROOM


21 
	#PERCPU_ENOUGH_ROOM
 32768

	)

24 
	#gë_˝u_v¨
(
v¨
Ë(*({ 
	`¥ìm±_dißbÀ
(); &
	`__gë_˝u_v¨
(v¨); }))

	)

25 
	#put_˝u_v¨
(
v¨
Ë
	`¥ìm±_íabÀ
()

	)

27 
	#≥r_˝u_±r
(
±r
, 
˝u
Ë({ ()(˝u); (±r); })

	)

29 
	#Æloc_≥r˝u
(
ty≥
Ë(—y≥ *)(
	`__Æloc_≥r˝u
(—y≥))))

	)

	@linux/percpu_counter.h

12 #i‚de‡
_LINUX_PERCPU_COUNTER_H


13 
	#_LINUX_PERCPU_COUNTER_H


	)

15 
	~<löux/•ölock.h
>

16 
	~<löux/smp.h
>

17 
	~<löux/thªads.h
>

18 
	~<löux/≥r˝u.h
>

19 
	~<löux/ty≥s.h
>

21 
	s≥r˝u_cou¡î
 {

22 
s64
 
	mcou¡
;

	@linux/personality.h

12 #i‚de‡
_LINUX_PERSONALITY_H


13 
	#_LINUX_PERSONALITY_H


	)

15 
	gexec_domaö
;

16 
	g±_ªgs
;

19 
	mADDR_NO_RANDOMIZE
 = 0x0040000,

20 
	mFDPIC_FUNCPTRS
 = 0x0080000,

21 
	mMMAP_PAGE_ZERO
 = 0x0100000,

22 
	mADDR_COMPAT_LAYOUT
 = 0x0200000,

23 
	mREAD_IMPLIES_EXEC
 = 0x0400000,

24 
	mADDR_LIMIT_32BIT
 = 0x0800000,

25 
	mSHORT_INODE
 = 0x1000000,

26 
	mWHOLE_SECONDS
 = 0x2000000,

27 
	mSTICKY_TIMEOUTS
 = 0x4000000,

28 
	mADDR_LIMIT_3GB
 = 0x8000000,

31 
	#PER_CLEAR_ON_SETID
 (
READ_IMPLIES_EXEC
|
ADDR_NO_RANDOMIZE
)

	)

34 
	mPER_LINUX
 = 0x0000,

35 
	mPER_LINUX_32BIT
 = 0x0000 | 
ADDR_LIMIT_32BIT
,

36 
	mPER_LINUX_FDPIC
 = 0x0000 | 
FDPIC_FUNCPTRS
,

37 
	mPER_SVR4
 = 0x0001 | 
STICKY_TIMEOUTS
 | 
MMAP_PAGE_ZERO
,

38 
	mPER_SVR3
 = 0x0002 | 
STICKY_TIMEOUTS
 | 
SHORT_INODE
,

39 
	mPER_SCOSVR3
 = 0x0003 | 
STICKY_TIMEOUTS
 |

40 
WHOLE_SECONDS
 | 
SHORT_INODE
,

41 
	mPER_OSR5
 = 0x0003 | 
STICKY_TIMEOUTS
 | 
WHOLE_SECONDS
,

42 
	mPER_WYSEV386
 = 0x0004 | 
STICKY_TIMEOUTS
 | 
SHORT_INODE
,

43 
	mPER_ISCR4
 = 0x0005 | 
STICKY_TIMEOUTS
,

44 
	mPER_BSD
 = 0x0006,

45 
	mPER_SUNOS
 = 0x0006 | 
STICKY_TIMEOUTS
,

46 
	mPER_XENIX
 = 0x0007 | 
STICKY_TIMEOUTS
 | 
SHORT_INODE
,

47 
	mPER_LINUX32
 = 0x0008,

48 
	mPER_LINUX32_3GB
 = 0x0008 | 
ADDR_LIMIT_3GB
,

49 
	mPER_IRIX32
 = 0x0009 | 
STICKY_TIMEOUTS
,

50 
	mPER_IRIXN32
 = 0x000®| 
STICKY_TIMEOUTS
,

51 
	mPER_IRIX64
 = 0x000b | 
STICKY_TIMEOUTS
,

52 
	mPER_RISCOS
 = 0x000c,

53 
	mPER_SOLARIS
 = 0x000d | 
STICKY_TIMEOUTS
,

54 
	mPER_UW7
 = 0x000ê| 
STICKY_TIMEOUTS
 | 
MMAP_PAGE_ZERO
,

55 
	mPER_OSF4
 = 0x000f,

56 
	mPER_HPUX
 = 0x0010,

57 
	mPER_MASK
 = 0x00ff,

60 (*
	th™dÀr_t
)(, 
	t±_ªgs
 *);

62 
	sexec_domaö
 {

63 c⁄° *
«me
;

64 
h™dÀr_t
 
h™dÀr
;

65 
≥rs_low
;

66 
≥rs_high
;

67 *
sig«l_m≠
;

68 *
sig«l_övm≠
;

69 
m≠_£gmít
 *
îr_m≠
;

70 
m≠_£gmít
 *
sockty≥_m≠
;

71 
m≠_£gmít
 *
sock›t_m≠
;

72 
m≠_£gmít
 *
af_m≠
;

73 
moduÀ
 *module;

74 
exec_domaö
 *
√xt
;

77 
	#≥rs⁄Æôy
(
≥rs
Ë’î†& 
PER_MASK
)

	)

79 
	#gë_≥rs⁄Æôy
 (
cuºít
->
≥rs⁄Æôy
)

	)

81 
	#£t_≥rs⁄Æôy
(
≥rs
Ë((
cuºít
->
≥rs⁄Æôy
 =≥rsË? 0 : 
	`__£t_≥rs⁄Æôy
’îs))

	)

	@linux/pfkeyv2.h

12 #i‚de‡
_LINUX_PFKEY2_H


13 
	#_LINUX_PFKEY2_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#PF_KEY_V2
 2

	)

18 
	#PFKEYV2_REVISION
 199806L

	)

20 
	sßdb_msg
 {

21 
uöt8_t
 
	mßdb_msg_vîsi⁄
;

22 
uöt8_t
 
	mßdb_msg_ty≥
;

23 
uöt8_t
 
	mßdb_msg_î∫o
;

24 
uöt8_t
 
	mßdb_msg_ßty≥
;

25 
uöt16_t
 
	mßdb_msg_Àn
;

26 
uöt16_t
 
	mßdb_msg_ª£rved
;

27 
uöt32_t
 
	mßdb_msg_£q
;

28 
uöt32_t
 
	mßdb_msg_pid
;

29 } 
__©åibuã__
((
∑cked
));

31 
	sßdb_ext
 {

32 
uöt16_t
 
	mßdb_ext_Àn
;

33 
uöt16_t
 
	mßdb_ext_ty≥
;

34 } 
__©åibuã__
((
∑cked
));

36 
	sßdb_ß
 {

37 
uöt16_t
 
	mßdb_ß_Àn
;

38 
uöt16_t
 
	mßdb_ß_exây≥
;

39 
uöt32_t
 
	mßdb_ß_•i
;

40 
uöt8_t
 
	mßdb_ß_ª∂ay
;

41 
uöt8_t
 
	mßdb_ß_°©e
;

42 
uöt8_t
 
	mßdb_ß_auth
;

43 
uöt8_t
 
	mßdb_ß_í¸y±
;

44 
uöt32_t
 
	mßdb_ß_Êags
;

45 } 
__©åibuã__
((
∑cked
));

47 
	sßdb_li„time
 {

48 
uöt16_t
 
	mßdb_li„time_Àn
;

49 
uöt16_t
 
	mßdb_li„time_exây≥
;

50 
uöt32_t
 
	mßdb_li„time_Æloˇti⁄s
;

51 
uöt64_t
 
	mßdb_li„time_byãs
;

52 
uöt64_t
 
	mßdb_li„time_addtime
;

53 
uöt64_t
 
	mßdb_li„time_u£time
;

54 } 
__©åibuã__
((
∑cked
));

56 
	sßdb_addªss
 {

57 
uöt16_t
 
	mßdb_addªss_Àn
;

58 
uöt16_t
 
	mßdb_addªss_exây≥
;

59 
uöt8_t
 
	mßdb_addªss_¥Ÿo
;

60 
uöt8_t
 
	mßdb_addªss_¥efixÀn
;

61 
uöt16_t
 
	mßdb_addªss_ª£rved
;

62 } 
__©åibuã__
((
∑cked
));

64 
	sßdb_key
 {

65 
uöt16_t
 
	mßdb_key_Àn
;

66 
uöt16_t
 
	mßdb_key_exây≥
;

67 
uöt16_t
 
	mßdb_key_bôs
;

68 
uöt16_t
 
	mßdb_key_ª£rved
;

69 } 
__©åibuã__
((
∑cked
));

71 
	sßdb_idít
 {

72 
uöt16_t
 
	mßdb_idít_Àn
;

73 
uöt16_t
 
	mßdb_idít_exây≥
;

74 
uöt16_t
 
	mßdb_idít_ty≥
;

75 
uöt16_t
 
	mßdb_idít_ª£rved
;

76 
uöt64_t
 
	mßdb_idít_id
;

77 } 
__©åibuã__
((
∑cked
));

79 
	sßdb_£ns
 {

80 
uöt16_t
 
	mßdb_£ns_Àn
;

81 
uöt16_t
 
	mßdb_£ns_exây≥
;

82 
uöt32_t
 
	mßdb_£ns_dpd
;

83 
uöt8_t
 
	mßdb_£ns_£ns_Àvñ
;

84 
uöt8_t
 
	mßdb_£ns_£ns_Àn
;

85 
uöt8_t
 
	mßdb_£ns_öãg_Àvñ
;

86 
uöt8_t
 
	mßdb_£ns_öãg_Àn
;

87 
uöt32_t
 
	mßdb_£ns_ª£rved
;

88 } 
__©åibuã__
((
∑cked
));

90 
	sßdb_¥›
 {

91 
uöt16_t
 
	mßdb_¥›_Àn
;

92 
uöt16_t
 
	mßdb_¥›_exây≥
;

93 
uöt8_t
 
	mßdb_¥›_ª∂ay
;

94 
uöt8_t
 
	mßdb_¥›_ª£rved
[3];

95 } 
__©åibuã__
((
∑cked
));

97 
	sßdb_comb
 {

98 
uöt8_t
 
	mßdb_comb_auth
;

99 
uöt8_t
 
	mßdb_comb_í¸y±
;

100 
uöt16_t
 
	mßdb_comb_Êags
;

101 
uöt16_t
 
	mßdb_comb_auth_möbôs
;

102 
uöt16_t
 
	mßdb_comb_auth_maxbôs
;

103 
uöt16_t
 
	mßdb_comb_í¸y±_möbôs
;

104 
uöt16_t
 
	mßdb_comb_í¸y±_maxbôs
;

105 
uöt32_t
 
	mßdb_comb_ª£rved
;

106 
uöt32_t
 
	mßdb_comb_so·_Æloˇti⁄s
;

107 
uöt32_t
 
	mßdb_comb_h¨d_Æloˇti⁄s
;

108 
uöt64_t
 
	mßdb_comb_so·_byãs
;

109 
uöt64_t
 
	mßdb_comb_h¨d_byãs
;

110 
uöt64_t
 
	mßdb_comb_so·_addtime
;

111 
uöt64_t
 
	mßdb_comb_h¨d_addtime
;

112 
uöt64_t
 
	mßdb_comb_so·_u£time
;

113 
uöt64_t
 
	mßdb_comb_h¨d_u£time
;

114 } 
__©åibuã__
((
∑cked
));

116 
	sßdb_suµ‹ãd
 {

117 
uöt16_t
 
	mßdb_suµ‹ãd_Àn
;

118 
uöt16_t
 
	mßdb_suµ‹ãd_exây≥
;

119 
uöt32_t
 
	mßdb_suµ‹ãd_ª£rved
;

120 } 
__©åibuã__
((
∑cked
));

122 
	sßdb_Æg
 {

123 
uöt8_t
 
	mßdb_Æg_id
;

124 
uöt8_t
 
	mßdb_Æg_ivÀn
;

125 
uöt16_t
 
	mßdb_Æg_möbôs
;

126 
uöt16_t
 
	mßdb_Æg_maxbôs
;

127 
uöt16_t
 
	mßdb_Æg_ª£rved
;

128 } 
__©åibuã__
((
∑cked
));

130 
	sßdb_•ú™ge
 {

131 
uöt16_t
 
	mßdb_•ú™ge_Àn
;

132 
uöt16_t
 
	mßdb_•ú™ge_exây≥
;

133 
uöt32_t
 
	mßdb_•ú™ge_mö
;

134 
uöt32_t
 
	mßdb_•ú™ge_max
;

135 
uöt32_t
 
	mßdb_•ú™ge_ª£rved
;

136 } 
__©åibuã__
((
∑cked
));

138 
	sßdb_x_km¥iv©e
 {

139 
uöt16_t
 
	mßdb_x_km¥iv©e_Àn
;

140 
uöt16_t
 
	mßdb_x_km¥iv©e_exây≥
;

141 
uöt32_t
 
	mßdb_x_km¥iv©e_ª£rved
;

142 } 
__©åibuã__
((
∑cked
));

144 
	sßdb_x_ß2
 {

145 
uöt16_t
 
	mßdb_x_ß2_Àn
;

146 
uöt16_t
 
	mßdb_x_ß2_exây≥
;

147 
uöt8_t
 
	mßdb_x_ß2_mode
;

148 
uöt8_t
 
	mßdb_x_ß2_ª£rved1
;

149 
uöt16_t
 
	mßdb_x_ß2_ª£rved2
;

150 
uöt32_t
 
	mßdb_x_ß2_£quí˚
;

151 
uöt32_t
 
	mßdb_x_ß2_ªqid
;

152 } 
__©åibuã__
((
∑cked
));

154 
	sßdb_x_pﬁicy
 {

155 
uöt16_t
 
	mßdb_x_pﬁicy_Àn
;

156 
uöt16_t
 
	mßdb_x_pﬁicy_exây≥
;

157 
uöt16_t
 
	mßdb_x_pﬁicy_ty≥
;

158 
uöt8_t
 
	mßdb_x_pﬁicy_dú
;

159 
uöt8_t
 
	mßdb_x_pﬁicy_ª£rved
;

160 
uöt32_t
 
	mßdb_x_pﬁicy_id
;

161 
uöt32_t
 
	mßdb_x_pﬁicy_¥i‹ôy
;

162 } 
__©åibuã__
((
∑cked
));

164 
	sßdb_x_ù£¸eque°
 {

165 
uöt16_t
 
	mßdb_x_ù£¸eque°_Àn
;

166 
uöt16_t
 
	mßdb_x_ù£¸eque°_¥Ÿo
;

167 
uöt8_t
 
	mßdb_x_ù£¸eque°_mode
;

168 
uöt8_t
 
	mßdb_x_ù£¸eque°_Àvñ
;

169 
uöt16_t
 
	mßdb_x_ù£¸eque°_ª£rved1
;

170 
uöt32_t
 
	mßdb_x_ù£¸eque°_ªqid
;

171 
uöt32_t
 
	mßdb_x_ù£¸eque°_ª£rved2
;

172 } 
__©åibuã__
((
∑cked
));

174 
	sßdb_x_«t_t_ty≥
 {

175 
uöt16_t
 
	mßdb_x_«t_t_ty≥_Àn
;

176 
uöt16_t
 
	mßdb_x_«t_t_ty≥_exây≥
;

177 
uöt8_t
 
	mßdb_x_«t_t_ty≥_ty≥
;

178 
uöt8_t
 
	mßdb_x_«t_t_ty≥_ª£rved
[3];

179 } 
__©åibuã__
((
∑cked
));

181 
	sßdb_x_«t_t_p‹t
 {

182 
uöt16_t
 
	mßdb_x_«t_t_p‹t_Àn
;

183 
uöt16_t
 
	mßdb_x_«t_t_p‹t_exây≥
;

184 
uöt16_t
 
	mßdb_x_«t_t_p‹t_p‹t
;

185 
uöt16_t
 
	mßdb_x_«t_t_p‹t_ª£rved
;

186 } 
__©åibuã__
((
∑cked
));

188 
	sßdb_x_£c_˘x
 {

189 
uöt16_t
 
	mßdb_x_£c_Àn
;

190 
uöt16_t
 
	mßdb_x_£c_exây≥
;

191 
uöt8_t
 
	mßdb_x_˘x_Æg
;

192 
uöt8_t
 
	mßdb_x_˘x_doi
;

193 
uöt16_t
 
	mßdb_x_˘x_Àn
;

194 } 
__©åibuã__
((
∑cked
));

196 
	#SADB_RESERVED
 0

	)

197 
	#SADB_GETSPI
 1

	)

198 
	#SADB_UPDATE
 2

	)

199 
	#SADB_ADD
 3

	)

200 
	#SADB_DELETE
 4

	)

201 
	#SADB_GET
 5

	)

202 
	#SADB_ACQUIRE
 6

	)

203 
	#SADB_REGISTER
 7

	)

204 
	#SADB_EXPIRE
 8

	)

205 
	#SADB_FLUSH
 9

	)

206 
	#SADB_DUMP
 10

	)

207 
	#SADB_X_PROMISC
 11

	)

208 
	#SADB_X_PCHANGE
 12

	)

209 
	#SADB_X_SPDUPDATE
 13

	)

210 
	#SADB_X_SPDADD
 14

	)

211 
	#SADB_X_SPDDELETE
 15

	)

212 
	#SADB_X_SPDGET
 16

	)

213 
	#SADB_X_SPDACQUIRE
 17

	)

214 
	#SADB_X_SPDDUMP
 18

	)

215 
	#SADB_X_SPDFLUSH
 19

	)

216 
	#SADB_X_SPDSETIDX
 20

	)

217 
	#SADB_X_SPDEXPIRE
 21

	)

218 
	#SADB_X_SPDDELETE2
 22

	)

219 
	#SADB_X_NAT_T_NEW_MAPPING
 23

	)

220 
	#SADB_MAX
 23

	)

222 
	#SADB_SAFLAGS_PFS
 1

	)

223 
	#SADB_SAFLAGS_NOPMTUDISC
 0x20000000

	)

224 
	#SADB_SAFLAGS_DECAP_DSCP
 0x40000000

	)

225 
	#SADB_SAFLAGS_NOECN
 0x80000000

	)

227 
	#SADB_SASTATE_LARVAL
 0

	)

228 
	#SADB_SASTATE_MATURE
 1

	)

229 
	#SADB_SASTATE_DYING
 2

	)

230 
	#SADB_SASTATE_DEAD
 3

	)

231 
	#SADB_SASTATE_MAX
 3

	)

233 
	#SADB_SATYPE_UNSPEC
 0

	)

234 
	#SADB_SATYPE_AH
 2

	)

235 
	#SADB_SATYPE_ESP
 3

	)

236 
	#SADB_SATYPE_RSVP
 5

	)

237 
	#SADB_SATYPE_OSPFV2
 6

	)

238 
	#SADB_SATYPE_RIPV2
 7

	)

239 
	#SADB_SATYPE_MIP
 8

	)

240 
	#SADB_X_SATYPE_IPCOMP
 9

	)

241 
	#SADB_SATYPE_MAX
 9

	)

243 
	#SADB_AALG_NONE
 0

	)

244 
	#SADB_AALG_MD5HMAC
 2

	)

245 
	#SADB_AALG_SHA1HMAC
 3

	)

246 
	#SADB_X_AALG_SHA2_256HMAC
 5

	)

247 
	#SADB_X_AALG_SHA2_384HMAC
 6

	)

248 
	#SADB_X_AALG_SHA2_512HMAC
 7

	)

249 
	#SADB_X_AALG_RIPEMD160HMAC
 8

	)

250 
	#SADB_X_AALG_NULL
 251

	)

251 
	#SADB_AALG_MAX
 251

	)

253 
	#SADB_EALG_NONE
 0

	)

254 
	#SADB_EALG_DESCBC
 2

	)

255 
	#SADB_EALG_3DESCBC
 3

	)

256 
	#SADB_X_EALG_CASTCBC
 6

	)

257 
	#SADB_X_EALG_BLOWFISHCBC
 7

	)

258 
	#SADB_EALG_NULL
 11

	)

259 
	#SADB_X_EALG_AESCBC
 12

	)

260 
	#SADB_EALG_MAX
 253

	)

262 
	#SADB_X_EALG_SERPENTCBC
 252

	)

263 
	#SADB_X_EALG_TWOFISHCBC
 253

	)

265 
	#SADB_X_CALG_NONE
 0

	)

266 
	#SADB_X_CALG_OUI
 1

	)

267 
	#SADB_X_CALG_DEFLATE
 2

	)

268 
	#SADB_X_CALG_LZS
 3

	)

269 
	#SADB_X_CALG_LZJH
 4

	)

270 
	#SADB_X_CALG_MAX
 4

	)

272 
	#SADB_EXT_RESERVED
 0

	)

273 
	#SADB_EXT_SA
 1

	)

274 
	#SADB_EXT_LIFETIME_CURRENT
 2

	)

275 
	#SADB_EXT_LIFETIME_HARD
 3

	)

276 
	#SADB_EXT_LIFETIME_SOFT
 4

	)

277 
	#SADB_EXT_ADDRESS_SRC
 5

	)

278 
	#SADB_EXT_ADDRESS_DST
 6

	)

279 
	#SADB_EXT_ADDRESS_PROXY
 7

	)

280 
	#SADB_EXT_KEY_AUTH
 8

	)

281 
	#SADB_EXT_KEY_ENCRYPT
 9

	)

282 
	#SADB_EXT_IDENTITY_SRC
 10

	)

283 
	#SADB_EXT_IDENTITY_DST
 11

	)

284 
	#SADB_EXT_SENSITIVITY
 12

	)

285 
	#SADB_EXT_PROPOSAL
 13

	)

286 
	#SADB_EXT_SUPPORTED_AUTH
 14

	)

287 
	#SADB_EXT_SUPPORTED_ENCRYPT
 15

	)

288 
	#SADB_EXT_SPIRANGE
 16

	)

289 
	#SADB_X_EXT_KMPRIVATE
 17

	)

290 
	#SADB_X_EXT_POLICY
 18

	)

291 
	#SADB_X_EXT_SA2
 19

	)

293 
	#SADB_X_EXT_NAT_T_TYPE
 20

	)

294 
	#SADB_X_EXT_NAT_T_SPORT
 21

	)

295 
	#SADB_X_EXT_NAT_T_DPORT
 22

	)

296 
	#SADB_X_EXT_NAT_T_OA
 23

	)

297 
	#SADB_X_EXT_SEC_CTX
 24

	)

298 
	#SADB_EXT_MAX
 24

	)

300 
	#SADB_IDENTTYPE_RESERVED
 0

	)

301 
	#SADB_IDENTTYPE_PREFIX
 1

	)

302 
	#SADB_IDENTTYPE_FQDN
 2

	)

303 
	#SADB_IDENTTYPE_USERFQDN
 3

	)

304 
	#SADB_IDENTTYPE_MAX
 3

	)

	@linux/pkt_cls.h

12 #i‚de‡
__LINUX_PKT_CLS_H


13 
	#__LINUX_PKT_CLS_H


	)

15 
	~<löux/pkt_sched.h
>

17 
	#_TC_MAKE32
(
x
Ë((x))

	)

19 
	#_TC_MAKEMASK1
(
n
Ë(
	`_TC_MAKE32
(1Ë<< _TC_MAKE32“))

	)

20 
	#_TC_MAKEMASK
(
v
,
n
Ë(
	`_TC_MAKE32
((_TC_MAKE32(1)<<(v))-1Ë<< _TC_MAKE32“))

	)

21 
	#_TC_MAKEVALUE
(
v
,
n
Ë(
	`_TC_MAKE32
(vË<< _TC_MAKE32“))

	)

22 
	#_TC_GETVALUE
(
v
,
n
,
m
Ë((
	`_TC_MAKE32
(vË& _TC_MAKE32(m)Ë>> _TC_MAKE32“))

	)

24 
	#TC_MUNGED
 
	`_TC_MAKEMASK1
(0)

	)

25 
	#SET_TC_MUNGED
(
v
Ë–
TC_MUNGED
 | (v & ~TC_MUNGED))

	)

26 
	#CLR_TC_MUNGED
(
v
Ë–v & ~
TC_MUNGED
)

	)

28 
	#TC_OK2MUNGE
 
	`_TC_MAKEMASK1
(1)

	)

29 
	#SET_TC_OK2MUNGE
(
v
Ë–
TC_OK2MUNGE
 | (v & ~TC_OK2MUNGE))

	)

30 
	#CLR_TC_OK2MUNGE
(
v
Ë–v & ~
TC_OK2MUNGE
)

	)

32 
	#S_TC_VERD
 
	`_TC_MAKE32
(2)

	)

33 
	#M_TC_VERD
 
	`_TC_MAKEMASK
(4,
S_TC_VERD
)

	)

34 
	#G_TC_VERD
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_VERD
,
M_TC_VERD
)

	)

35 
	#V_TC_VERD
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_VERD
)

	)

36 
	#SET_TC_VERD
(
v
,
n
Ë((
	`V_TC_VERD
“)Ë| (v & ~
M_TC_VERD
))

	)

38 
	#S_TC_FROM
 
	`_TC_MAKE32
(6)

	)

39 
	#M_TC_FROM
 
	`_TC_MAKEMASK
(2,
S_TC_FROM
)

	)

40 
	#G_TC_FROM
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_FROM
,
M_TC_FROM
)

	)

41 
	#V_TC_FROM
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_FROM
)

	)

42 
	#SET_TC_FROM
(
v
,
n
Ë((
	`V_TC_FROM
“)Ë| (v & ~
M_TC_FROM
))

	)

43 
	#AT_STACK
 0x0

	)

44 
	#AT_INGRESS
 0x1

	)

45 
	#AT_EGRESS
 0x2

	)

47 
	#TC_NCLS
 
	`_TC_MAKEMASK1
(8)

	)

48 
	#SET_TC_NCLS
(
v
Ë–
TC_NCLS
 | (v & ~TC_NCLS))

	)

49 
	#CLR_TC_NCLS
(
v
Ë–v & ~
TC_NCLS
)

	)

51 
	#S_TC_RTTL
 
	`_TC_MAKE32
(9)

	)

52 
	#M_TC_RTTL
 
	`_TC_MAKEMASK
(3,
S_TC_RTTL
)

	)

53 
	#G_TC_RTTL
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_RTTL
,
M_TC_RTTL
)

	)

54 
	#V_TC_RTTL
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_RTTL
)

	)

55 
	#SET_TC_RTTL
(
v
,
n
Ë((
	`V_TC_RTTL
“)Ë| (v & ~
M_TC_RTTL
))

	)

57 
	#S_TC_AT
 
	`_TC_MAKE32
(12)

	)

58 
	#M_TC_AT
 
	`_TC_MAKEMASK
(2,
S_TC_AT
)

	)

59 
	#G_TC_AT
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_AT
,
M_TC_AT
)

	)

60 
	#V_TC_AT
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_AT
)

	)

61 
	#SET_TC_AT
(
v
,
n
Ë((
	`V_TC_AT
“)Ë| (v & ~
M_TC_AT
))

	)

65 
	mTCA_ACT_UNSPEC
,

66 
	mTCA_ACT_KIND
,

67 
	mTCA_ACT_OPTIONS
,

68 
	mTCA_ACT_INDEX
,

69 
	mTCA_ACT_STATS
,

70 
	m__TCA_ACT_MAX


73 
	#TCA_ACT_MAX
 
__TCA_ACT_MAX


	)

74 
	#TCA_OLD_COMPAT
 (
TCA_ACT_MAX
+1)

	)

75 
	#TCA_ACT_MAX_PRIO
 32

	)

76 
	#TCA_ACT_BIND
 1

	)

77 
	#TCA_ACT_NOBIND
 0

	)

78 
	#TCA_ACT_UNBIND
 1

	)

79 
	#TCA_ACT_NOUNBIND
 0

	)

80 
	#TCA_ACT_REPLACE
 1

	)

81 
	#TCA_ACT_NOREPLACE
 0

	)

82 
	#MAX_REC_LOOP
 4

	)

83 
	#MAX_RED_LOOP
 4

	)

85 
	#TC_ACT_UNSPEC
 (-1)

	)

86 
	#TC_ACT_OK
 0

	)

87 
	#TC_ACT_RECLASSIFY
 1

	)

88 
	#TC_ACT_SHOT
 2

	)

89 
	#TC_ACT_PIPE
 3

	)

90 
	#TC_ACT_STOLEN
 4

	)

91 
	#TC_ACT_QUEUED
 5

	)

92 
	#TC_ACT_REPEAT
 6

	)

93 
	#TC_ACT_JUMP
 0x10000000

	)

97 
	mTCA_ID_UNSPEC
=0,

98 
	mTCA_ID_POLICE
=1,

100 
	m__TCA_ID_MAX
=255

103 
	#TCA_ID_MAX
 
__TCA_ID_MAX


	)

105 
	stc_pﬁi˚


107 
__u32
 
	mödex
;

108 
	ma˘i⁄
;

109 
	#TC_POLICE_UNSPEC
 
TC_ACT_UNSPEC


	)

110 
	#TC_POLICE_OK
 
TC_ACT_OK


	)

111 
	#TC_POLICE_RECLASSIFY
 
TC_ACT_RECLASSIFY


	)

112 
	#TC_POLICE_SHOT
 
TC_ACT_SHOT


	)

113 
	#TC_POLICE_PIPE
 
TC_ACT_PIPE


	)

115 
__u32
 
	mlimô
;

116 
__u32
 
	mbur°
;

117 
__u32
 
	mmtu
;

118 
tc_øã•ec
 
	møã
;

119 
tc_øã•ec
 
	m≥akøã
;

120 
	mªf˙t
;

121 
	mböd˙t
;

122 
__u32
 
	mˇ∑b
;

125 
	stcf_t


127 
__u64
 
	mö°Æl
;

128 
__u64
 
	mœ°u£
;

129 
__u64
 
	mexpúes
;

132 
	stc_˙t


134 
	mªf˙t
;

135 
	mböd˙t
;

138 
	#tc_gí
 
__u32
 
ödex
; __u32 
ˇ∑b
; 
a˘i⁄
; 
ªf˙t
; 
böd˙t


	)

142 
	mTCA_POLICE_UNSPEC
,

143 
	mTCA_POLICE_TBF
,

144 
	mTCA_POLICE_RATE
,

145 
	mTCA_POLICE_PEAKRATE
,

146 
	mTCA_POLICE_AVRATE
,

147 
	mTCA_POLICE_RESULT
,

148 
	m__TCA_POLICE_MAX


149 
	#TCA_POLICE_RESULT
 
TCA_POLICE_RESULT


	)

152 
	#TCA_POLICE_MAX
 (
__TCA_POLICE_MAX
 - 1)

	)

154 
	#TC_U32_HTID
(
h
Ë((h)&0xFFF00000)

	)

155 
	#TC_U32_USERHTID
(
h
Ë(
	`TC_U32_HTID
(h)>>20)

	)

156 
	#TC_U32_HASH
(
h
Ë(((h)>>12)&0xFF)

	)

157 
	#TC_U32_NODE
(
h
Ë((h)&0xFFF)

	)

158 
	#TC_U32_KEY
(
h
Ë((h)&0xFFFFF)

	)

159 
	#TC_U32_UNSPEC
 0

	)

160 
	#TC_U32_ROOT
 (0xFFF00000)

	)

164 
	mTCA_U32_UNSPEC
,

165 
	mTCA_U32_CLASSID
,

166 
	mTCA_U32_HASH
,

167 
	mTCA_U32_LINK
,

168 
	mTCA_U32_DIVISOR
,

169 
	mTCA_U32_SEL
,

170 
	mTCA_U32_POLICE
,

171 
	mTCA_U32_ACT
,

172 
	mTCA_U32_INDEV
,

173 
	mTCA_U32_PCNT
,

174 
	mTCA_U32_MARK
,

175 
	m__TCA_U32_MAX


178 
	#TCA_U32_MAX
 (
__TCA_U32_MAX
 - 1)

	)

180 
	stc_u32_key


182 
__u32
 
	mmask
;

183 
__u32
 
	mvÆ
;

184 
	moff
;

185 
	moffmask
;

188 
	stc_u32_£l


190 
	mÊags
;

191 
	moffshi·
;

192 
	mnkeys
;

194 
__u16
 
	moffmask
;

195 
__u16
 
	moff
;

196 
	moffoff
;

198 
	mhoff
;

199 
__u32
 
	mhmask
;

200 
tc_u32_key
 
	mkeys
[0];

203 
	stc_u32_m¨k


205 
__u32
 
	mvÆ
;

206 
__u32
 
	mmask
;

207 
__u32
 
	msuc˚ss
;

210 
	stc_u32_p˙t


212 
__u64
 
	mr˙t
;

213 
__u64
 
	mrhô
;

214 
__u64
 
	mk˙ts
[0];

217 
	#TC_U32_TERMINAL
 1

	)

218 
	#TC_U32_OFFSET
 2

	)

219 
	#TC_U32_VAROFFSET
 4

	)

220 
	#TC_U32_EAT
 8

	)

222 
	#TC_U32_MAXDEPTH
 8

	)

226 
	mTCA_RSVP_UNSPEC
,

227 
	mTCA_RSVP_CLASSID
,

228 
	mTCA_RSVP_DST
,

229 
	mTCA_RSVP_SRC
,

230 
	mTCA_RSVP_PINFO
,

231 
	mTCA_RSVP_POLICE
,

232 
	mTCA_RSVP_ACT
,

233 
	m__TCA_RSVP_MAX


236 
	#TCA_RSVP_MAX
 (
__TCA_RSVP_MAX
 - 1 )

	)

238 
	stc_rsvp_gpi


240 
__u32
 
	mkey
;

241 
__u32
 
	mmask
;

242 
	moff£t
;

245 
	stc_rsvp_pöfo


247 
tc_rsvp_gpi
 
	mdpi
;

248 
tc_rsvp_gpi
 
	m•i
;

249 
__u8
 
	m¥Ÿocﬁ
;

250 
__u8
 
	mtu¬ñid
;

251 
__u8
 
	mtu¬ñhdr
;

252 
__u8
 
	m∑d
;

257 
	mTCA_ROUTE4_UNSPEC
,

258 
	mTCA_ROUTE4_CLASSID
,

259 
	mTCA_ROUTE4_TO
,

260 
	mTCA_ROUTE4_FROM
,

261 
	mTCA_ROUTE4_IIF
,

262 
	mTCA_ROUTE4_POLICE
,

263 
	mTCA_ROUTE4_ACT
,

264 
	m__TCA_ROUTE4_MAX


267 
	#TCA_ROUTE4_MAX
 (
__TCA_ROUTE4_MAX
 - 1)

	)

271 
	mTCA_FW_UNSPEC
,

272 
	mTCA_FW_CLASSID
,

273 
	mTCA_FW_POLICE
,

274 
	mTCA_FW_INDEV
,

275 
	mTCA_FW_ACT
,

276 
	m__TCA_FW_MAX


279 
	#TCA_FW_MAX
 (
__TCA_FW_MAX
 - 1)

	)

283 
	mTCA_TCINDEX_UNSPEC
,

284 
	mTCA_TCINDEX_HASH
,

285 
	mTCA_TCINDEX_MASK
,

286 
	mTCA_TCINDEX_SHIFT
,

287 
	mTCA_TCINDEX_FALL_THROUGH
,

288 
	mTCA_TCINDEX_CLASSID
,

289 
	mTCA_TCINDEX_POLICE
,

290 
	mTCA_TCINDEX_ACT
,

291 
	m__TCA_TCINDEX_MAX


294 
	#TCA_TCINDEX_MAX
 (
__TCA_TCINDEX_MAX
 - 1)

	)

298 
	mTCA_BASIC_UNSPEC
,

299 
	mTCA_BASIC_CLASSID
,

300 
	mTCA_BASIC_EMATCHES
,

301 
	mTCA_BASIC_ACT
,

302 
	mTCA_BASIC_POLICE
,

303 
	m__TCA_BASIC_MAX


306 
	#TCA_BASIC_MAX
 (
__TCA_BASIC_MAX
 - 1)

	)

308 
	stcf_em©ch_åì_hdr


310 
__u16
 
	mnm©ches
;

311 
__u16
 
	m¥ogid
;

316 
	mTCA_EMATCH_TREE_UNSPEC
,

317 
	mTCA_EMATCH_TREE_HDR
,

318 
	mTCA_EMATCH_TREE_LIST
,

319 
	m__TCA_EMATCH_TREE_MAX


321 
	#TCA_EMATCH_TREE_MAX
 (
__TCA_EMATCH_TREE_MAX
 - 1)

	)

323 
	stcf_em©ch_hdr


325 
__u16
 
	mm©chid
;

326 
__u16
 
	mköd
;

327 
__u16
 
	mÊags
;

328 
__u16
 
	m∑d
;

331 
	#TCF_EM_REL_END
 0

	)

332 
	#TCF_EM_REL_AND
 (1<<0)

	)

333 
	#TCF_EM_REL_OR
 (1<<1)

	)

334 
	#TCF_EM_INVERT
 (1<<2)

	)

335 
	#TCF_EM_SIMPLE
 (1<<3)

	)

337 
	#TCF_EM_REL_MASK
 3

	)

338 
	#TCF_EM_REL_VALID
(
v
Ë(((vË& 
TCF_EM_REL_MASK
Ë!TCF_EM_REL_MASK)

	)

342 
	mTCF_LAYER_LINK
,

343 
	mTCF_LAYER_NETWORK
,

344 
	mTCF_LAYER_TRANSPORT
,

345 
	m__TCF_LAYER_MAX


347 
	#TCF_LAYER_MAX
 (
__TCF_LAYER_MAX
 - 1)

	)

351 
	mTCF_EM_CONTAINER
,

352 
	mTCF_EM_CMP
,

353 
	mTCF_EM_NBYTE
,

354 
	mTCF_EM_U32
,

355 
	mTCF_EM_META
,

356 
	mTCF_EM_TEXT
,

357 
	m__TCF_EM_MAX


362 
	mTCF_EM_PROG_TC


367 
	mTCF_EM_OPND_EQ
,

368 
	mTCF_EM_OPND_GT
,

369 
	mTCF_EM_OPND_LT


	@linux/pkt_sched.h

12 #i‚de‡
__LINUX_PKT_SCHED_H


13 
	#__LINUX_PKT_SCHED_H


	)

15 
	#TC_PRIO_BESTEFFORT
 0

	)

16 
	#TC_PRIO_FILLER
 1

	)

17 
	#TC_PRIO_BULK
 2

	)

18 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

19 
	#TC_PRIO_INTERACTIVE
 6

	)

20 
	#TC_PRIO_CONTROL
 7

	)

22 
	#TC_PRIO_MAX
 15

	)

24 
	stc_°©s


26 
__u64
 
	mbyãs
;

27 
__u32
 
	m∑ckës
;

28 
__u32
 
	mdr›s
;

29 
__u32
 
	movîlimôs
;

30 
__u32
 
	mbps
;

31 
__u32
 
	mµs
;

32 
__u32
 
	mqÀn
;

33 
__u32
 
	mbacklog
;

36 
	stc_e°im©‹


38 sig√d 
	möãrvÆ
;

39 
	mewma_log
;

42 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

43 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

44 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

45 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

46 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

48 
	#TC_H_UNSPEC
 (0U)

	)

49 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

50 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

52 
	stc_øã•ec


54 
	m˚Œ_log
;

55 
	m__ª£rved
;

56 
	m„©uª
;

57 
	maddíd
;

58 
	mmpu
;

59 
__u32
 
	møã
;

62 
	stc_fifo_q›t


64 
__u32
 
	mlimô
;

67 
	#TCQ_PRIO_BANDS
 16

	)

68 
	#TCQ_MIN_PRIO_BANDS
 2

	)

70 
	stc_¥io_q›t


72 
	mb™ds
;

73 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

76 
	stc_tbf_q›t


78 
tc_øã•ec
 
	møã
;

79 
tc_øã•ec
 
	m≥akøã
;

80 
__u32
 
	mlimô
;

81 
__u32
 
	mbuf„r
;

82 
__u32
 
	mmtu
;

87 
	mTCA_TBF_UNSPEC
,

88 
	mTCA_TBF_PARMS
,

89 
	mTCA_TBF_RTAB
,

90 
	mTCA_TBF_PTAB
,

91 
	m__TCA_TBF_MAX
,

94 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

96 
	stc_sfq_q›t


98 
	mqu™tum
;

99 
	m≥πurb_≥riod
;

100 
__u32
 
	mlimô
;

101 
	mdivis‹
;

102 
	mÊows
;

107 
	mTCA_RED_UNSPEC
,

108 
	mTCA_RED_PARMS
,

109 
	mTCA_RED_STAB
,

110 
	m__TCA_RED_MAX
,

113 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

115 
	stc_ªd_q›t


117 
__u32
 
	mlimô
;

118 
__u32
 
	mqth_mö
;

119 
__u32
 
	mqth_max
;

120 
	mWlog
;

121 
	mPlog
;

122 
	mS˚Œ_log
;

123 
	mÊags
;

124 
	#TC_RED_ECN
 1

	)

125 
	#TC_RED_HARDDROP
 2

	)

128 
	stc_ªd_x°©s


130 
__u32
 
	móæy
;

131 
__u32
 
	mpdr›
;

132 
__u32
 
	mŸhî
;

133 
__u32
 
	mm¨ked
;

136 
	#MAX_DPs
 16

	)

140 
	mTCA_GRED_UNSPEC
,

141 
	mTCA_GRED_PARMS
,

142 
	mTCA_GRED_STAB
,

143 
	mTCA_GRED_DPS
,

144 
	m__TCA_GRED_MAX
,

147 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

149 
	stc_gªd_q›t


151 
__u32
 
	mlimô
;

152 
__u32
 
	mqth_mö
;

153 
__u32
 
	mqth_max
;

154 
__u32
 
	mDP
;

155 
__u32
 
	mbacklog
;

156 
__u32
 
	mqave
;

157 
__u32
 
	mf‹˚d
;

158 
__u32
 
	móæy
;

159 
__u32
 
	mŸhî
;

160 
__u32
 
	mpdr›
;

161 
__u8
 
	mWlog
;

162 
__u8
 
	mPlog
;

163 
__u8
 
	mS˚Œ_log
;

164 
__u8
 
	m¥io
;

165 
__u32
 
	m∑ckës
;

166 
__u32
 
	mbyãsö
;

169 
	stc_gªd_s›t


171 
__u32
 
	mDPs
;

172 
__u32
 
	mdef_DP
;

173 
__u8
 
	mgrio
;

174 
__u8
 
	mÊags
;

175 
__u16
 
	m∑d1
;

178 
	#TC_HTB_NUMPRIO
 8

	)

179 
	#TC_HTB_MAXDEPTH
 8

	)

180 
	#TC_HTB_PROTOVER
 3

	)

182 
	stc_htb_›t


184 
tc_øã•ec
 
	møã
;

185 
tc_øã•ec
 
	m˚û
;

186 
__u32
 
	mbuf„r
;

187 
__u32
 
	mcbuf„r
;

188 
__u32
 
	mqu™tum
;

189 
__u32
 
	mÀvñ
;

190 
__u32
 
	m¥io
;

192 
	stc_htb_glob


194 
__u32
 
	mvîsi⁄
;

195 
__u32
 
	møã2qu™tum
;

196 
__u32
 
	mdef˛s
;

197 
__u32
 
	mdebug
;

199 
__u32
 
	mdúe˘_pkts
;

203 
	mTCA_HTB_UNSPEC
,

204 
	mTCA_HTB_PARMS
,

205 
	mTCA_HTB_INIT
,

206 
	mTCA_HTB_CTAB
,

207 
	mTCA_HTB_RTAB
,

208 
	m__TCA_HTB_MAX
,

211 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

213 
	stc_htb_x°©s


215 
__u32
 
	mÀnds
;

216 
__u32
 
	mb‹rows
;

217 
__u32
 
	mgü¡s
;

218 
__u32
 
	mtokís
;

219 
__u32
 
	m˘okís
;

222 
	stc_hfsc_q›t


224 
__u16
 
	mdef˛s
;

227 
	stc_£rvi˚_curve


229 
__u32
 
	mm1
;

230 
__u32
 
	md
;

231 
__u32
 
	mm2
;

234 
	stc_hfsc_°©s


236 
__u64
 
	mw‹k
;

237 
__u64
 
	mπw‹k
;

238 
__u32
 
	m≥riod
;

239 
__u32
 
	mÀvñ
;

244 
	mTCA_HFSC_UNSPEC
,

245 
	mTCA_HFSC_RSC
,

246 
	mTCA_HFSC_FSC
,

247 
	mTCA_HFSC_USC
,

248 
	m__TCA_HFSC_MAX
,

251 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

253 
	#TC_CBQ_MAXPRIO
 8

	)

254 
	#TC_CBQ_MAXLEVEL
 8

	)

255 
	#TC_CBQ_DEF_EWMA
 5

	)

257 
	stc_cbq_lss›t


259 
	mch™ge
;

260 
	mÊags
;

261 
	#TCF_CBQ_LSS_BOUNDED
 1

	)

262 
	#TCF_CBQ_LSS_ISOLATED
 2

	)

263 
	mewma_log
;

264 
	mÀvñ
;

265 
	#TCF_CBQ_LSS_FLAGS
 1

	)

266 
	#TCF_CBQ_LSS_EWMA
 2

	)

267 
	#TCF_CBQ_LSS_MAXIDLE
 4

	)

268 
	#TCF_CBQ_LSS_MINIDLE
 8

	)

269 
	#TCF_CBQ_LSS_OFFTIME
 0x10

	)

270 
	#TCF_CBQ_LSS_AVPKT
 0x20

	)

271 
__u32
 
	mmaxidÀ
;

272 
__u32
 
	mmöidÀ
;

273 
__u32
 
	mof·ime
;

274 
__u32
 
	mavpkt
;

277 
	stc_cbq_wº›t


279 
	mÊags
;

280 
	m¥i‹ôy
;

281 
	m˝ri‹ôy
;

282 
	m__ª£rved
;

283 
__u32
 
	mÆlŸ
;

284 
__u32
 
	mweight
;

287 
	stc_cbq_ovl


289 
	m°øãgy
;

290 
	#TC_CBQ_OVL_CLASSIC
 0

	)

291 
	#TC_CBQ_OVL_DELAY
 1

	)

292 
	#TC_CBQ_OVL_LOWPRIO
 2

	)

293 
	#TC_CBQ_OVL_DROP
 3

	)

294 
	#TC_CBQ_OVL_RCLASSIC
 4

	)

295 
	m¥i‹ôy2
;

296 
__u16
 
	m∑d
;

297 
__u32
 
	m≥«…y
;

300 
	stc_cbq_pﬁi˚


302 
	mpﬁi˚
;

303 
	m__ªs1
;

304 
	m__ªs2
;

307 
	stc_cbq_f›t


309 
__u32
 
	m•lô
;

310 
__u32
 
	mdefm≠
;

311 
__u32
 
	mdefch™ge
;

314 
	stc_cbq_x°©s


316 
__u32
 
	mb‹rows
;

317 
__u32
 
	movîa˘i⁄s
;

318 
__s32
 
	mavgidÀ
;

319 
__s32
 
	mundîtime
;

324 
	mTCA_CBQ_UNSPEC
,

325 
	mTCA_CBQ_LSSOPT
,

326 
	mTCA_CBQ_WRROPT
,

327 
	mTCA_CBQ_FOPT
,

328 
	mTCA_CBQ_OVL_STRATEGY
,

329 
	mTCA_CBQ_RATE
,

330 
	mTCA_CBQ_RTAB
,

331 
	mTCA_CBQ_POLICE
,

332 
	m__TCA_CBQ_MAX
,

335 
	#TCA_CBQ_MAX
 (
__TCA_CBQ_MAX
 - 1)

	)

338 
	mTCA_DSMARK_UNSPEC
,

339 
	mTCA_DSMARK_INDICES
,

340 
	mTCA_DSMARK_DEFAULT_INDEX
,

341 
	mTCA_DSMARK_SET_TC_INDEX
,

342 
	mTCA_DSMARK_MASK
,

343 
	mTCA_DSMARK_VALUE
,

344 
	m__TCA_DSMARK_MAX
,

347 
	#TCA_DSMARK_MAX
 (
__TCA_DSMARK_MAX
 - 1)

	)

350 
	mTCA_ATM_UNSPEC
,

351 
	mTCA_ATM_FD
,

352 
	mTCA_ATM_PTR
,

353 
	mTCA_ATM_HDR
,

354 
	mTCA_ATM_EXCESS
,

355 
	mTCA_ATM_ADDR
,

356 
	mTCA_ATM_STATE
,

357 
	m__TCA_ATM_MAX
,

360 
	#TCA_ATM_MAX
 (
__TCA_ATM_MAX
 - 1)

	)

364 
	mTCA_NETEM_UNSPEC
,

365 
	mTCA_NETEM_CORR
,

366 
	mTCA_NETEM_DELAY_DIST
,

367 
	mTCA_NETEM_REORDER
,

368 
	mTCA_NETEM_CORRUPT
,

369 
	m__TCA_NETEM_MAX
,

372 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

374 
	stc_√ãm_q›t


376 
__u32
 
	mœãncy
;

377 
__u32
 
	mlimô
;

378 
__u32
 
	mloss
;

379 
__u32
 
	mg≠
;

380 
__u32
 
	mdu∂iˇã
;

381 
__u32
 
	mjôãr
;

384 
	stc_√ãm_c‹r


386 
__u32
 
	mdñay_c‹r
;

387 
__u32
 
	mloss_c‹r
;

388 
__u32
 
	mdup_c‹r
;

391 
	stc_√ãm_ª‹dî


393 
__u32
 
	m¥obabûôy
;

394 
__u32
 
	mc‹ªœti⁄
;

397 
	stc_√ãm_c‹ru±


399 
__u32
 
	m¥obabûôy
;

400 
__u32
 
	mc‹ªœti⁄
;

403 
	#NETEM_DIST_SCALE
 8192

	)

	@linux/platform_device.h

12 #i‚de‡
_PLATFORM_DEVICE_H_


13 
	#_PLATFORM_DEVICE_H_


	)

15 
	~<löux/devi˚.h
>

17 
	s∂©f‹m_devi˚
 {

18 c⁄° * 
	m«me
;

19 
u32
 
	mid
;

20 
devi˚
 
	mdev
;

21 
u32
 
	mnum_ªsour˚s
;

22 
ªsour˚
 * 
	mªsour˚
;

25 
	#to_∂©f‹m_devi˚
(
x
Ë
	`c⁄èöî_of
((x), 
∂©f‹m_devi˚
, 
dev
)

	)

27 
	s∂©f‹m_drivî
 {

28 (*
	m¥obe
)(
	m∂©f‹m_devi˚
 *);

29 (*
	mªmove
)(
	m∂©f‹m_devi˚
 *);

30 (*
	mshutdown
)(
	m∂©f‹m_devi˚
 *);

31 (*
	msu•íd
)(
	m∂©f‹m_devi˚
 *, 
pm_mesßge_t
 
	m°©e
);

32 (*
	mªsume
)(
	m∂©f‹m_devi˚
 *);

33 
devi˚_drivî
 
	mdrivî
;

36 
	#∂©f‹m_gë_drvd©a
(
_dev
Ë
	`dev_gë_drvd©a
(&(_dev)->
dev
)

	)

37 
	#∂©f‹m_£t_drvd©a
(
_dev
,
d©a
Ë
	`dev_£t_drvd©a
(&(_dev)->
dev
, (d©a))

	)

	@linux/plist.h

12 #i‚de‡
_LINUX_PLIST_H_


13 
	#_LINUX_PLIST_H_


	)

15 
	~<löux/kî√l.h
>

16 
	~<löux/li°.h
>

17 
	~<löux/•ölock_ty≥s.h
>

19 
	s∂i°_hód
 {

20 
li°_hód
 
	m¥io_li°
;

21 
li°_hód
 
	mnode_li°
;

24 
	s∂i°_node
 {

25 
	m¥io
;

26 
∂i°_hód
 
	m∂i°
;

29 
	#PLIST_HEAD_LOCK_INIT
(
_lock
)

	)

31 
	#PLIST_HEAD_INIT
(
hód
, 
_lock
Ë{ .
¥io_li°
 = 
	`LIST_HEAD_INIT
((hód).¥io_li°), .
node_li°
 = LIST_HEAD_INIT((hód).node_li°), 
	`PLIST_HEAD_LOCK_INIT
(&(_lock)Ë}

	)

33 
	#PLIST_NODE_INIT
(
node
, 
__¥io
Ë{ .
¥io
 = (__¥io), .
∂i°
 = 
	`PLIST_HEAD_INIT
(“ode).∂i°, 
NULL
), }

	)

35 
	#∂i°_f‹_óch
(
pos
, 
hód
Ë
	`li°_f‹_óch_íåy
’os, &(hód)->
node_li°
, 
∂i°
.node_li°)

	)

37 
	#∂i°_f‹_óch_ß„
(
pos
, 
n
, 
hód
Ë
	`li°_f‹_óch_íåy_ß„
’os,Ç, &(hód)->
node_li°
, 
∂i°
.node_li°)

	)

39 
	#∂i°_f‹_óch_íåy
(
pos
, 
hód
, 
mem
Ë
	`li°_f‹_óch_íåy
’os, &(hód)->
node_li°
, mem.
∂i°
.node_li°)

	)

41 
	#∂i°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
m
Ë
	`li°_f‹_óch_íåy_ß„
’os,Ç, &(hód)->
node_li°
, m.
∂i°
.node_li°)

	)

43 
	#∂i°_fú°_íåy
(
hód
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
(
	`∂i°_fú°
(hód),Åy≥, membî)

	)

	@linux/pm.h

12 #i‚de‡
_LINUX_PM_H


13 
	#_LINUX_PM_H


	)

	@linux/pnp.h

12 #i‚de‡
_LINUX_PNP_H


13 
	#_LINUX_PNP_H


	)

	@linux/poll.h

12 #i‚de‡
_LINUX_POLL_H


13 
	#_LINUX_POLL_H


	)

15 
	~<asm/pﬁl.h
>

	@linux/posix_acl.h

12 #i‚de‡
__LINUX_POSIX_ACL_H


13 
	#__LINUX_POSIX_ACL_H


	)

15 
	~<löux/¶ab.h
>

17 
	#ACL_UNDEFINED_ID
 (-1)

	)

19 
	#ACL_TYPE_ACCESS
 (0x8000)

	)

20 
	#ACL_TYPE_DEFAULT
 (0x4000)

	)

22 
	#ACL_USER_OBJ
 (0x01)

	)

23 
	#ACL_USER
 (0x02)

	)

24 
	#ACL_GROUP_OBJ
 (0x04)

	)

25 
	#ACL_GROUP
 (0x08)

	)

26 
	#ACL_MASK
 (0x10)

	)

27 
	#ACL_OTHER
 (0x20)

	)

29 
	#ACL_READ
 (0x04)

	)

30 
	#ACL_WRITE
 (0x02)

	)

31 
	#ACL_EXECUTE
 (0x01)

	)

33 
	sposix_a˛_íåy
 {

34 
	me_èg
;

35 
	me_≥rm
;

36 
	me_id
;

39 
	sposix_a˛
 {

40 
©omic_t
 
	ma_ªfcou¡
;

41 
	ma_cou¡
;

42 
posix_a˛_íåy
 
	ma_íåõs
[0];

45 
	#FOREACH_ACL_ENTRY
(
∑
, 
a˛
, 
≥
Ë∑=◊˛)->
a_íåõs
,Öeıa+◊˛)->
a_cou¡
;Öa<≥;Öa++)

	)

	@linux/posix_types.h

12 #i‚de‡
_LINUX_POSIX_TYPES_H


13 
	#_LINUX_POSIX_TYPES_H


	)

15 
	~<löux/°ddef.h
>

17 #unde‡
__NFDBITS


18 
	#__NFDBITS
 (8 * ())

	)

20 #unde‡
__FD_SETSIZE


21 
	#__FD_SETSIZE
 1024

	)

23 #unde‡
__FDSET_LONGS


24 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

26 #unde‡
__FDELT


27 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

29 #unde‡
__FDMASK


30 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

33 
	mfds_bôs
 [
__FDSET_LONGS
];

34 } 
	t__kî√l_fd_£t
;

36 (*
	t__kî√l_sigh™dÀr_t
)();

38 
	t__kî√l_key_t
;

39 
	t__kî√l_mqd_t
;

41 
	~<asm/posix_ty≥s.h
>

	@linux/ppdev.h

12 
	#PP_IOCTL
 'p'

	)

14 
	#PPSETMODE
 
	`_IOW
(
PP_IOCTL
, 0x80, )

	)

16 
	#PPRSTATUS
 
	`_IOR
(
PP_IOCTL
, 0x81, )

	)

17 
	#PPWSTATUS
 
	`OBSOLETE__IOW
(
PP_IOCTL
, 0x82, )

	)

19 
	#PPRCONTROL
 
	`_IOR
(
PP_IOCTL
, 0x83, )

	)

20 
	#PPWCONTROL
 
	`_IOW
(
PP_IOCTL
, 0x84, )

	)

22 
	sµdev_‰ob_°ru˘
 {

23 
	mmask
;

24 
	mvÆ
;

26 
	#PPFCONTROL
 
	`_IOW
(
PP_IOCTL
, 0x8e, 
µdev_‰ob_°ru˘
)

	)

28 
	#PPRDATA
 
	`_IOR
(
PP_IOCTL
, 0x85, )

	)

29 
	#PPWDATA
 
	`_IOW
(
PP_IOCTL
, 0x86, )

	)

31 
	#PPRECONTROL
 
	`OBSOLETE__IOR
(
PP_IOCTL
, 0x87, )

	)

32 
	#PPWECONTROL
 
	`OBSOLETE__IOW
(
PP_IOCTL
, 0x88, )

	)

34 
	#PPRFIFO
 
	`OBSOLETE__IOR
(
PP_IOCTL
, 0x89, )

	)

35 
	#PPWFIFO
 
	`OBSOLETE__IOW
(
PP_IOCTL
, 0x8a, )

	)

37 
	#PPCLAIM
 
	`_IO
(
PP_IOCTL
, 0x8b)

	)

39 
	#PPRELEASE
 
	`_IO
(
PP_IOCTL
, 0x8c)

	)

41 
	#PPYIELD
 
	`_IO
(
PP_IOCTL
, 0x8d)

	)

43 
	#PPEXCL
 
	`_IO
(
PP_IOCTL
, 0x8f)

	)

45 
	#PPDATADIR
 
	`_IOW
(
PP_IOCTL
, 0x90, )

	)

47 
	#PPNEGOT
 
	`_IOW
(
PP_IOCTL
, 0x91, )

	)

49 
	#PPWCTLONIRQ
 
	`_IOW
(
PP_IOCTL
, 0x92, )

	)

51 
	#PPCLRIRQ
 
	`_IOR
(
PP_IOCTL
, 0x93, )

	)

53 
	#PPSETPHASE
 
	`_IOW
(
PP_IOCTL
, 0x94, )

	)

55 
	#PPGETTIME
 
	`_IOR
(
PP_IOCTL
, 0x95, 
timevÆ
)

	)

56 
	#PPSETTIME
 
	`_IOW
(
PP_IOCTL
, 0x96, 
timevÆ
)

	)

58 
	#PPGETMODES
 
	`_IOR
(
PP_IOCTL
, 0x97, )

	)

60 
	#PPGETMODE
 
	`_IOR
(
PP_IOCTL
, 0x98, )

	)

61 
	#PPGETPHASE
 
	`_IOR
(
PP_IOCTL
, 0x99, )

	)

63 
	#PPGETFLAGS
 
	`_IOR
(
PP_IOCTL
, 0x9a, )

	)

64 
	#PPSETFLAGS
 
	`_IOW
(
PP_IOCTL
, 0x9b, )

	)

66 
	#PP_FASTWRITE
 (1<<2)

	)

67 
	#PP_FASTREAD
 (1<<3)

	)

68 
	#PP_W91284PIC
 (1<<4)

	)

70 
	#PP_FLAGMASK
 (
PP_FASTWRITE
 | 
PP_FASTREAD
 | 
PP_W91284PIC
)

	)

	@linux/ppp_defs.h

12 #i‚de‡
_PPP_DEFS_H_


13 
	#_PPP_DEFS_H_


	)

15 
	#PPP_HDRLEN
 4

	)

16 
	#PPP_FCSLEN
 2

	)

17 
	#PPP_MRU
 1500

	)

19 
	#PPP_ADDRESS
(
p
Ë(((
__u8
 *)’))[0])

	)

20 
	#PPP_CONTROL
(
p
Ë(((
__u8
 *)’))[1])

	)

21 
	#PPP_PROTOCOL
(
p
Ë((((
__u8
 *)’))[2] << 8Ë+ ((__u8 *)’))[3])

	)

23 
	#PPP_ALLSTATIONS
 0xff

	)

24 
	#PPP_UI
 0x03

	)

25 
	#PPP_FLAG
 0x7e

	)

26 
	#PPP_ESCAPE
 0x7d

	)

27 
	#PPP_TRANS
 0x20

	)

29 
	#PPP_IP
 0x21

	)

30 
	#PPP_AT
 0x29

	)

31 
	#PPP_IPX
 0x2b

	)

32 
	#PPP_VJC_COMP
 0x2d

	)

33 
	#PPP_VJC_UNCOMP
 0x2f

	)

34 
	#PPP_MP
 0x3d

	)

35 
	#PPP_IPV6
 0x57

	)

36 
	#PPP_COMPFRAG
 0xfb

	)

37 
	#PPP_COMP
 0xfd

	)

38 
	#PPP_MPLS_UC
 0x0281

	)

39 
	#PPP_MPLS_MC
 0x0283

	)

40 
	#PPP_IPCP
 0x8021

	)

41 
	#PPP_ATCP
 0x8029

	)

42 
	#PPP_IPXCP
 0x802b

	)

43 
	#PPP_IPV6CP
 0x8057

	)

44 
	#PPP_CCPFRAG
 0x80fb

	)

45 
	#PPP_CCP
 0x80fd

	)

46 
	#PPP_MPLSCP
 0x80fd

	)

47 
	#PPP_LCP
 0xc021

	)

48 
	#PPP_PAP
 0xc023

	)

49 
	#PPP_LQR
 0xc025

	)

50 
	#PPP_CHAP
 0xc223

	)

51 
	#PPP_CBCP
 0xc029

	)

53 
	#PPP_INITFCS
 0xffff

	)

54 
	#PPP_GOODFCS
 0xf0b8

	)

56 
__u32
 
	text_accm
[8];

58 
	eNPmode
 {

59 
	mNPMODE_PASS
,

60 
	mNPMODE_DROP
,

61 
	mNPMODE_ERROR
,

62 
	mNPMODE_QUEUE


65 
	sµp°©
 {

66 
__u32
 
	mµp_disˇrds
;

68 
__u32
 
	mµp_ibyãs
;

69 
__u32
 
	mµp_io˘e˘s
;

70 
__u32
 
	mµp_ùackës
;

71 
__u32
 
	mµp_õº‹s
;

72 
__u32
 
	mµp_ûqrs
;

74 
__u32
 
	mµp_obyãs
;

75 
__u32
 
	mµp_oo˘e˘s
;

76 
__u32
 
	mµp_›ackës
;

77 
__u32
 
	mµp_€º‹s
;

78 
__u32
 
	mµp_ﬁqrs
;

81 
	svj°©
 {

82 
__u32
 
	mvjs_∑ckës
;

83 
__u32
 
	mvjs_com¥es£d
;

84 
__u32
 
	mvjs_£¨ches
;

85 
__u32
 
	mvjs_mis£s
;

86 
__u32
 
	mvjs_uncom¥es£dö
;

87 
__u32
 
	mvjs_com¥es£dö
;

88 
__u32
 
	mvjs_îr‹ö
;

89 
__u32
 
	mvjs_tos£d
;

92 
	scomp°©
 {

93 
__u32
 
	munc_byãs
;

94 
__u32
 
	munc_∑ckës
;

95 
__u32
 
	mcomp_byãs
;

96 
__u32
 
	mcomp_∑ckës
;

97 
__u32
 
	möc_byãs
;

98 
__u32
 
	möc_∑ckës
;

100 
__u32
 
	mö_cou¡
;

101 
__u32
 
	mbyãs_out
;

103 
	møtio
;

106 
	sµp_°©s
 {

107 
µp°©
 
	mp
;

108 
vj°©
 
	mvj
;

111 
	sµp_comp_°©s
 {

112 
comp°©
 
	mc
;

113 
comp°©
 
	md
;

116 
	sµp_idÀ
 {

117 
time_t
 
	mxmô_idÀ
;

118 
time_t
 
	mªcv_idÀ
;

	@linux/prctl.h

12 #i‚de‡
_LINUX_PRCTL_H


13 
	#_LINUX_PRCTL_H


	)

15 
	#PR_SET_PDEATHSIG
 1

	)

16 
	#PR_GET_PDEATHSIG
 2

	)

18 
	#PR_GET_DUMPABLE
 3

	)

19 
	#PR_SET_DUMPABLE
 4

	)

21 
	#PR_GET_UNALIGN
 5

	)

22 
	#PR_SET_UNALIGN
 6

	)

23 
	#PR_UNALIGN_NOPRINT
 1

	)

24 
	#PR_UNALIGN_SIGBUS
 2

	)

26 
	#PR_GET_KEEPCAPS
 7

	)

27 
	#PR_SET_KEEPCAPS
 8

	)

29 
	#PR_GET_FPEMU
 9

	)

30 
	#PR_SET_FPEMU
 10

	)

31 
	#PR_FPEMU_NOPRINT
 1

	)

32 
	#PR_FPEMU_SIGFPE
 2

	)

34 
	#PR_GET_FPEXC
 11

	)

35 
	#PR_SET_FPEXC
 12

	)

36 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

37 
	#PR_FP_EXC_DIV
 0x010000

	)

38 
	#PR_FP_EXC_OVF
 0x020000

	)

39 
	#PR_FP_EXC_UND
 0x040000

	)

40 
	#PR_FP_EXC_RES
 0x080000

	)

41 
	#PR_FP_EXC_INV
 0x100000

	)

42 
	#PR_FP_EXC_DISABLED
 0

	)

43 
	#PR_FP_EXC_NONRECOV
 1

	)

44 
	#PR_FP_EXC_ASYNC
 2

	)

45 
	#PR_FP_EXC_PRECISE
 3

	)

47 
	#PR_GET_TIMING
 13

	)

48 
	#PR_SET_TIMING
 14

	)

49 
	#PR_TIMING_STATISTICAL
 0

	)

50 
	#PR_TIMING_TIMESTAMP
 1

	)

52 
	#PR_SET_NAME
 15

	)

53 
	#PR_GET_NAME
 16

	)

55 
	#PR_GET_ENDIAN
 19

	)

56 
	#PR_SET_ENDIAN
 20

	)

57 
	#PR_ENDIAN_BIG
 0

	)

58 
	#PR_ENDIAN_LITTLE
 1

	)

59 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

	@linux/preempt.h

12 #i‚de‡
__LINUX_PREEMPT_H


13 
	#__LINUX_PREEMPT_H


	)

15 
	~<löux/thªad_öfo.h
>

16 
	~<löux/lökage.h
>

18 
	#add_¥ìm±_cou¡
(
vÆ
Ëdÿ{ 
	`¥ìm±_cou¡
(Ë+(vÆ); } 0)

	)

19 
	#sub_¥ìm±_cou¡
(
vÆ
Ëdÿ{ 
	`¥ìm±_cou¡
(Ë-(vÆ); } 0)

	)

21 
	#öc_¥ìm±_cou¡
(Ë
	`add_¥ìm±_cou¡
(1)

	)

22 
	#dec_¥ìm±_cou¡
(Ë
	`sub_¥ìm±_cou¡
(1)

	)

24 
	#¥ìm±_cou¡
(Ë(
	`cuºít_thªad_öfo
()->
¥ìm±_cou¡
)

	)

26 
	#¥ìm±_dißbÀ
(Ëdÿ{ } 0)

	)

27 
	#¥ìm±_íabÀ_no_ªsched
(Ëdÿ{ } 0)

	)

28 
	#¥ìm±_íabÀ
(Ëdÿ{ } 0)

	)

29 
	#¥ìm±_check_ªsched
(Ëdÿ{ } 0)

	)

	@linux/proc_fs.h

12 #i‚de‡
_LINUX_PROC_FS_H


13 
	#_LINUX_PROC_FS_H


	)

15 
	~<löux/¶ab.h
>

16 
	~<löux/fs.h
>

17 
	~<löux/•ölock.h
>

18 
	~<asm/©omic.h
>

20 
	#FIRST_PROCESS_ENTRY
 256

	)

23 
	mPROC_ROOT_INO
 = 1,

26 
	#PROC_SUPER_MAGIC
 0x9Á0

	)

28 (
	tªad_¥oc_t
)(*
	t∑ge
, **
	t°¨t
, 
	toff_t
 
	toff
,

29 
	tcou¡
, *
	teof
, *
	td©a
);

30 (
	twrôe_¥oc_t
)(
	tfûe
 *fûe, c⁄° 
	t__u£r
 *
	tbuf„r
,

31 
	tcou¡
, *
	td©a
);

32 (
	tgë_öfo_t
)(*, **, 
	toff_t
, );

34 
	s¥oc_dú_íåy
 {

35 
low_öo
;

36 
«mñí
;

37 c⁄° *
«me
;

38 
mode_t
 
mode
;

39 
∆ök_t
 
∆ök
;

40 
uid_t
 
uid
;

41 
gid_t
 
gid
;

42 
loff_t
 
size
;

43 
öode_›î©i⁄s
 * 
¥oc_i›s
;

44 c⁄° 
fûe_›î©i⁄s
 * 
¥oc_f›s
;

45 
gë_öfo_t
 *
gë_öfo
;

46 
moduÀ
 *
ow√r
;

47 
¥oc_dú_íåy
 *
√xt
, *
∑ª¡
, *
subdú
;

48 *
d©a
;

49 
ªad_¥oc_t
 *
ªad_¥oc
;

50 
wrôe_¥oc_t
 *
wrôe_¥oc
;

51 
©omic_t
 
cou¡
;

52 
dñëed
;

53 *
£t
;

56 
	skc‹e_li°
 {

57 
kc‹e_li°
 *
√xt
;

58 
addr
;

59 
size_t
 
size
;

62 
	svmc‹e
 {

63 
li°_hód
 
li°
;

64 
∑ddr
;

65 
size
;

66 
loff_t
 
off£t
;

69 
	#¥oc_roŸ_drivî
 
NULL


	)

70 
	#¥oc_√t
 
NULL


	)

71 
	#¥oc_bus
 
NULL


	)

73 
	#¥oc_√t_f›s_¸óã
(
«me
, 
mode
, 
f›s
Ë({ ()(mode), 
NULL
; 
	}
})

	)

74 
	#¥oc_√t_¸óã
(
«me
, 
mode
, 
öfo
Ë({ ()(mode), 
NULL
; })

	)

75 
	#ªmove_¥oc_íåy
(
«me
, 
∑ª¡
Ëdÿ{} 0)

	)

	@linux/ptrace.h

12 #i‚de‡
_LINUX_PTRACE_H


13 
	#_LINUX_PTRACE_H


	)

15 
	#PTRACE_TRACEME
 0

	)

16 
	#PTRACE_PEEKTEXT
 1

	)

17 
	#PTRACE_PEEKDATA
 2

	)

18 
	#PTRACE_PEEKUSR
 3

	)

19 
	#PTRACE_POKETEXT
 4

	)

20 
	#PTRACE_POKEDATA
 5

	)

21 
	#PTRACE_POKEUSR
 6

	)

22 
	#PTRACE_CONT
 7

	)

23 
	#PTRACE_KILL
 8

	)

24 
	#PTRACE_SINGLESTEP
 9

	)

26 
	#PTRACE_ATTACH
 0x10

	)

27 
	#PTRACE_DETACH
 0x11

	)

29 
	#PTRACE_SYSCALL
 24

	)

31 
	#PTRACE_SETOPTIONS
 0x4200

	)

32 
	#PTRACE_GETEVENTMSG
 0x4201

	)

33 
	#PTRACE_GETSIGINFO
 0x4202

	)

34 
	#PTRACE_SETSIGINFO
 0x4203

	)

36 
	#PTRACE_O_TRACESYSGOOD
 0x00000001

	)

37 
	#PTRACE_O_TRACEFORK
 0x00000002

	)

38 
	#PTRACE_O_TRACEVFORK
 0x00000004

	)

39 
	#PTRACE_O_TRACECLONE
 0x00000008

	)

40 
	#PTRACE_O_TRACEEXEC
 0x00000010

	)

41 
	#PTRACE_O_TRACEVFORKDONE
 0x00000020

	)

42 
	#PTRACE_O_TRACEEXIT
 0x00000040

	)

44 
	#PTRACE_O_MASK
 0x0000007f

	)

46 
	#PTRACE_EVENT_FORK
 1

	)

47 
	#PTRACE_EVENT_VFORK
 2

	)

48 
	#PTRACE_EVENT_CLONE
 3

	)

49 
	#PTRACE_EVENT_EXEC
 4

	)

50 
	#PTRACE_EVENT_VFORK_DONE
 5

	)

51 
	#PTRACE_EVENT_EXIT
 6

	)

53 
	~<asm/±ø˚.h
>

	@linux/qic117.h

12 #i‚de‡
_QIC117_H


13 
	#_QIC117_H


	)

16 
	mQIC_NO_COMMAND
 = 0,

17 
	mQIC_RESET
 = 1,

18 
	mQIC_REPORT_NEXT_BIT
 = 2,

19 
	mQIC_PAUSE
 = 3,

20 
	mQIC_MICRO_STEP_PAUSE
 = 4,

21 
	mQIC_ALTERNATE_TIMEOUT
 = 5,

22 
	mQIC_REPORT_DRIVE_STATUS
 = 6,

23 
	mQIC_REPORT_ERROR_CODE
 = 7,

24 
	mQIC_REPORT_DRIVE_CONFIGURATION
 = 8,

25 
	mQIC_REPORT_ROM_VERSION
 = 9,

26 
	mQIC_LOGICAL_FORWARD
 = 10,

27 
	mQIC_PHYSICAL_REVERSE
 = 11,

28 
	mQIC_PHYSICAL_FORWARD
 = 12,

29 
	mQIC_SEEK_HEAD_TO_TRACK
 = 13,

30 
	mQIC_SEEK_LOAD_POINT
 = 14,

31 
	mQIC_ENTER_FORMAT_MODE
 = 15,

32 
	mQIC_WRITE_REFERENCE_BURST
 = 16,

33 
	mQIC_ENTER_VERIFY_MODE
 = 17,

34 
	mQIC_STOP_TAPE
 = 18,

36 
	mQIC_MICRO_STEP_HEAD_UP
 = 21,

37 
	mQIC_MICRO_STEP_HEAD_DOWN
 = 22,

38 
	mQIC_SOFT_SELECT
 = 23,

39 
	mQIC_SOFT_DESELECT
 = 24,

40 
	mQIC_SKIP_REVERSE
 = 25,

41 
	mQIC_SKIP_FORWARD
 = 26,

42 
	mQIC_SELECT_RATE
 = 27,

44 
	mQIC_ENTER_DIAGNOSTIC_1
 = 28,

45 
	mQIC_ENTER_DIAGNOSTIC_2
 = 29,

46 
	mQIC_ENTER_PRIMARY_MODE
 = 30,

48 
	mQIC_REPORT_VENDOR_ID
 = 32,

49 
	mQIC_REPORT_TAPE_STATUS
 = 33,

50 
	mQIC_SKIP_EXTENDED_REVERSE
 = 34,

51 
	mQIC_SKIP_EXTENDED_FORWARD
 = 35,

52 
	mQIC_CALIBRATE_TAPE_LENGTH
 = 36,

53 
	mQIC_REPORT_FORMAT_SEGMENTS
 = 37,

54 
	mQIC_SET_FORMAT_SEGMENTS
 = 38,

56 
	mQIC_PHANTOM_SELECT
 = 46,

57 
	mQIC_PHANTOM_DESELECT
 = 47

58 } 
	tqic117_cmd_t
;

61 
	mdis¸ëi⁄Æ
 = 0, 
	mªquúed
, 
	mccs1
, 
	mccs2


62 } 
	tqic_com∑tibûôy
;

65 
	munu£d
, 
	mmode
, 
	mmŸi⁄
, 
	mªp‹t


66 } 
	tcomm™d_ty≥s
;

68 
	sqic117_comm™d_èbÀ
 {

69 *
	m«me
;

70 
__u8
 
	mmask
;

71 
__u8
 
	m°©e
;

72 
__u8
 
	mcmd_ty≥
;

73 
__u8
 
	mn⁄_öå
;

74 
__u8
 
	mÀvñ
;

77 
	#QIC117_COMMANDS
 { {
NULL
, 0x00, 0x00, 
mode
, 0, 
dis¸ëi⁄Æ
}, {"so·Ñe£t", 0x00, 0x00, 
mŸi⁄
, 1, 
ªquúed
}, {"ªp‹à√xàbô", 0x00, 0x00, 
ªp‹t
, 0,Ñequúed}, {"∑u£", 0x36, 0x24, mŸi⁄, 1,Ñequúed}, {"mi¸ÿ°ïÖau£", 0x36, 0x24, mŸi⁄, 1,Ñequúed}, {"Æã∫©êcomm™dÅimeout", 0x00, 0x00, mode, 0,Ñequúed}, {"ªp‹àdrivê°©us", 0x00, 0x00,Ñï‹t, 0,Ñequúed}, {"ªp‹àîr‹ code", 0x01, 0x01,Ñï‹t, 0,Ñequúed}, {"ªp‹àdrivêc⁄figuøti⁄",0x00, 0x00,Ñï‹t, 0,Ñequúed}, {"ªp‹àrom vîsi⁄", 0x00, 0x00,Ñï‹t, 0,Ñequúed}, {"logiˇ»f‹w¨d", 0x37, 0x25, mŸi⁄, 0,Ñequúed}, {"physiˇ»ªvî£", 0x17, 0x05, mŸi⁄, 0,Ñequúed}, {"physiˇ»f‹w¨d", 0x17, 0x05, mŸi⁄, 0,Ñequúed}, {"£ek hódÅÿåack", 0x37, 0x25, mŸi⁄, 0,Ñequúed}, {"£ekÜﬂdÖoöt", 0x17, 0x05, mŸi⁄, 1,Ñequúed}, {"íã∏f‹m© mode", 0x1f, 0x05, mode, 0,Ñequúed}, {"wrôêª„ªn˚ bur°", 0x1f, 0x05, mŸi⁄, 1,Ñequúed}, {"íã∏vîify mode", 0x37, 0x25, mode, 0,Ñequúed}, {"°›Å≠e", 0x00, 0x00, mŸi⁄, 1,Ñequúed}, {"ª£rved (19)", 0x00, 0x00, 
unu£d
, 0, dis¸ëi⁄Æ}, {"ª£rved (20)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"mi¸ÿ°ï hód up", 0x02, 0x00, mŸi⁄, 0,Ñequúed}, {"mi¸ÿ°ï hód down", 0x02, 0x00, mŸi⁄, 0,Ñequúed}, {"so· sñe˘", 0x00, 0x00, mode, 0, dis¸ëi⁄Æ}, {"so· de£À˘", 0x00, 0x00, mode, 0, dis¸ëi⁄Æ}, {"skù segmít†ªvî£", 0x36, 0x24, mŸi⁄, 1,Ñequúed}, {"skù segmít†f‹w¨d", 0x36, 0x24, mŸi⁄, 1,Ñequúed}, {"£À˘Ñ©ê‹ f‹m©", 0x03, 0x01, mode, 0,Ñequúed }, {"íã∏düg modê1", 0x00, 0x00, mode, 0, dis¸ëi⁄Æ}, {"íã∏düg modê2", 0x00, 0x00, mode, 0, dis¸ëi⁄Æ}, {"íã∏¥im¨y mode", 0x00, 0x00, mode, 0,Ñequúed}, {"víd‹ uniquê(31)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"ªp‹àvíd‹ id", 0x00, 0x00,Ñï‹t, 0,Ñequúed}, {"ªp‹àè≥ sètus", 0x04, 0x04,Ñï‹t, 0, 
ccs1
}, {"skùÉxãndedÑevî£", 0x36, 0x24, mŸi⁄, 1, ccs1}, {"skùÉxãnded f‹w¨d", 0x36, 0x24, mŸi⁄, 1, ccs1}, {"ˇlibøãÅ≠êÀngth", 0x17, 0x05, mŸi⁄, 1, 
ccs2
}, {"ªp‹àf‹m© segmíts", 0x17, 0x05,Ñï‹t, 0, ccs2}, {"£àf‹m© segmíts", 0x17, 0x05, mode, 0, ccs2}, {"ª£rved (39)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"víd‹ uniquê(40)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"víd‹ uniquê(41)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"víd‹ uniquê(42)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"víd‹ uniquê(43)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"víd‹ uniquê(44)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"víd‹ uniquê(45)", 0x00, 0x00, unu£d, 0, dis¸ëi⁄Æ}, {"ph™tom sñe˘", 0x00, 0x00, mode, 0, dis¸ëi⁄Æ}, {"ph™tom de£À˘", 0x00, 0x00, mode, 0, dis¸ëi⁄Æ}, }

	)

79 
	#QIC_STATUS_READY
 0x01

	)

80 
	#QIC_STATUS_ERROR
 0x02

	)

81 
	#QIC_STATUS_CARTRIDGE_PRESENT
 0x04

	)

82 
	#QIC_STATUS_WRITE_PROTECT
 0x08

	)

83 
	#QIC_STATUS_NEW_CARTRIDGE
 0x10

	)

84 
	#QIC_STATUS_REFERENCED
 0x20

	)

85 
	#QIC_STATUS_AT_BOT
 0x40

	)

86 
	#QIC_STATUS_AT_EOT
 0x80

	)

88 
	#QIC_CONFIG_RATE_MASK
 0x18

	)

89 
	#QIC_CONFIG_RATE_SHIFT
 3

	)

90 
	#QIC_CONFIG_RATE_250
 0

	)

91 
	#QIC_CONFIG_RATE_500
 2

	)

92 
	#QIC_CONFIG_RATE_1000
 3

	)

93 
	#QIC_CONFIG_RATE_2000
 1

	)

94 
	#QIC_CONFIG_RATE_4000
 0

	)

96 
	#QIC_CONFIG_LONG
 0x40

	)

97 
	#QIC_CONFIG_80
 0x80

	)

99 
	#QIC_TAPE_STD_MASK
 0x0f

	)

100 
	#QIC_TAPE_QIC40
 0x01

	)

101 
	#QIC_TAPE_QIC80
 0x02

	)

102 
	#QIC_TAPE_QIC3020
 0x03

	)

103 
	#QIC_TAPE_QIC3010
 0x04

	)

105 
	#QIC_TAPE_LEN_MASK
 0x70

	)

106 
	#QIC_TAPE_205FT
 0x10

	)

107 
	#QIC_TAPE_307FT
 0x20

	)

108 
	#QIC_TAPE_VARIABLE
 0x30

	)

109 
	#QIC_TAPE_1100FT
 0x40

	)

110 
	#QIC_TAPE_FLEX
 0x60

	)

112 
	#QIC_TAPE_WIDE
 0x80

	)

114 
	#QIC_TOP_TAPE_LEN
 1500

	)

117 *
	mmesßge
;

118 
	mÁèl
:1;

119 } 
	t·≠e_îr‹
;

121 
	#QIC117_ERRORS
 { { "Nÿîr‹", 0, }, { "Comm™d Re˚ived whûêDrivêNŸ Ródy", 0, }, { "C¨åidgêNŸ Pª£¡ o∏Removed", 1, }, { "MŸ‹ S≥ed Eº‹ (nŸ wôhö 1%)", 1, }, { "MŸ‹ S≥ed Fau… (jammed, o∏gros†•ìdÉº‹", 1, }, { "C¨åidgêWrôêPrŸe˘ed", 1, }, { "Undeföed o∏Re£rved Comm™d Code", 1, }, { "IŒegÆ Tøck Addªs†S≥cifõd f‹ Sìk", 1, }, { "IŒegÆ Comm™d i¿Rï‹àSubc⁄ãxt", 0, }, { "IŒegÆ E¡ry i¡ÿ®Dügno°i¯Mode", 1, }, { "Brokí T≠êDëe˘ed (ba£d o¿hﬁê£ns‹)", 1, }, { "W¨nög--Ród Gaö Sëtög Eº‹", 1, }, { "Comm™d Re˚ived WhûêEº‹ Sètu†Pídög (obs)", 1, }, { "Comm™d Re˚ived WhûêNew C¨åidgêPídög", 1, }, { "Comm™d IŒegÆ o∏Undeföed i¿Prim¨y Mode", 1, }, { "Comm™d IŒegÆ o∏Undeföed i¿F‹m© Mode", 1, }, { "Comm™d IŒegÆ o∏Undeföed i¿Vîify Mode", 1, }, { "Logiˇ»F‹w¨d NŸáàLogiˇ»BOT o∏nÿF‹m© Segmít†ö F‹m© Mode", 1, }, { "Logiˇ»EOT Bef‹êAŒ Segmít†gíî©ed", 1, }, { "Comm™d IŒegÆ Whí C¨åidgêNŸ Re„ªn˚d", 1, }, { "Sñf-Dügno°i¯Faûed (ˇ¬Ÿ bê˛óªd)", 1, }, { "W¨nög EEPROM NŸ Inôülized, DeÁu…†Së", 1, }, { "EEPROM C‹ru±ed o∏H¨dw¨êFaûuª", 1, }, { "MŸi⁄ Time-ouàEº‹", 1, }, { "D©®SegmíàToÿL⁄g -- Logiˇ»F‹w¨d o∏Pau£", 1, }, { "Tønsmô Ovîru¿(obs)", 1, }, { "Powî O¿Re£àOccuºed", 0, }, { "So·w¨êRe£àOccuºed", 0, }, { "Dügno°i¯Modê1 Eº‹", 1, }, { "Dügno°i¯Modê2 Eº‹", 1, }, { "Comm™d Re˚ived Durög N⁄-I¡îru±ibÀ Pro˚ss", 1, }, { "R©ê‹ F‹m© Sñe˘i⁄ Eº‹", 1, }, { "IŒegÆ Comm™d Whûêö High S≥ed Mode", 1, }, { "IŒegÆ Sìk SegmíàVÆue", 1, }, { "InvÆid Medü", 1, }, { "Hód Posôi⁄ög Faûuª", 1, }, { "WrôêRe„ªn˚ Bur° Faûuª", 1, }, { "Prom CodêMissög", 1, }, { "InvÆid F‹m©", 1, }, { "EOT/BOT Sy°em Faûuª", 1, }, { "Prom A Checksum Eº‹", 1, }, { "DrivêWakeu∞Re£àOccuºed", 1, }, { "Prom B Checksum Eº‹", 1, }, { "IŒegÆ E¡ry i¡ÿF‹m© Mode", 1, }, }

	)

	@linux/qnxtypes.h

12 #i‚de‡
_QNX4TYPES_H


13 
	#_QNX4TYPES_H


	)

15 
__À16
 
	tqnx4_nxät_t
;

16 
__u8
 
	tqnx4_·y≥_t
;

19 
__À32
 
	mxät_blk
;

20 
__À32
 
	mxät_size
;

21 } 
	tqnx4_xät_t
;

23 
__À16
 
	tqnx4_mode_t
;

24 
__À16
 
	tqnx4_muid_t
;

25 
__À16
 
	tqnx4_mgid_t
;

26 
__À32
 
	tqnx4_off_t
;

27 
__À16
 
	tqnx4_∆ök_t
;

	@linux/quota.h

12 #i‚de‡
_LINUX_QUOTA_


13 
	#_LINUX_QUOTA_


	)

15 
	~<löux/î∫o.h
>

16 
	~<löux/ty≥s.h
>

18 
	#__DQUOT_VERSION__
 "dquŸ_6.5.1"

	)

19 
	#__DQUOT_NUM_VERSION__
 6*10000+5*100+1

	)

21 
__kî√l_uid32_t
 
	tqid_t
;

22 
__u64
 
	tqsize_t
;

24 
	#QUOTABLOCK_BITS
 10

	)

25 
	#QUOTABLOCK_SIZE
 (1 << 
QUOTABLOCK_BITS
)

	)

27 
	#qb2kb
(
x
Ë((xË<< (
QUOTABLOCK_BITS
-10))

	)

28 
	#kb2qb
(
x
Ë((xË>> (
QUOTABLOCK_BITS
-10))

	)

29 
	#toqb
(
x
Ë(((xË+ 
QUOTABLOCK_SIZE
 - 1Ë>> 
QUOTABLOCK_BITS
)

	)

31 
	#MAXQUOTAS
 2

	)

32 
	#USRQUOTA
 0

	)

33 
	#GRPQUOTA
 1

	)

35 
	#INITQFNAMES
 { "u£r", "group", "undeföed", };

	)

37 
	#SUBCMDMASK
 0x00ff

	)

38 
	#SUBCMDSHIFT
 8

	)

39 
	#QCMD
(
cmd
, 
ty≥
Ë(((cmdË<< 
SUBCMDSHIFT
Ë| (—y≥Ë& 
SUBCMDMASK
))

	)

41 
	#Q_SYNC
 0x800001

	)

42 
	#Q_QUOTAON
 0x800002

	)

43 
	#Q_QUOTAOFF
 0x800003

	)

44 
	#Q_GETFMT
 0x800004

	)

45 
	#Q_GETINFO
 0x800005

	)

46 
	#Q_SETINFO
 0x800006

	)

47 
	#Q_GETQUOTA
 0x800007

	)

48 
	#Q_SETQUOTA
 0x800008

	)

50 
	#QIF_BLIMITS
 1

	)

51 
	#QIF_SPACE
 2

	)

52 
	#QIF_ILIMITS
 4

	)

53 
	#QIF_INODES
 8

	)

54 
	#QIF_BTIME
 16

	)

55 
	#QIF_ITIME
 32

	)

56 
	#QIF_LIMITS
 (
QIF_BLIMITS
 | 
QIF_ILIMITS
)

	)

57 
	#QIF_USAGE
 (
QIF_SPACE
 | 
QIF_INODES
)

	)

58 
	#QIF_TIMES
 (
QIF_BTIME
 | 
QIF_ITIME
)

	)

59 
	#QIF_ALL
 (
QIF_LIMITS
 | 
QIF_USAGE
 | 
QIF_TIMES
)

	)

61 
	sif_dqblk
 {

62 
__u64
 
	mdqb_bh¨dlimô
;

63 
__u64
 
	mdqb_bso·limô
;

64 
__u64
 
	mdqb_cur•a˚
;

65 
__u64
 
	mdqb_ih¨dlimô
;

66 
__u64
 
	mdqb_iso·limô
;

67 
__u64
 
	mdqb_curöodes
;

68 
__u64
 
	mdqb_btime
;

69 
__u64
 
	mdqb_ôime
;

70 
__u32
 
	mdqb_vÆid
;

73 
	#IIF_BGRACE
 1

	)

74 
	#IIF_IGRACE
 2

	)

75 
	#IIF_FLAGS
 4

	)

76 
	#IIF_ALL
 (
IIF_BGRACE
 | 
IIF_IGRACE
 | 
IIF_FLAGS
)

	)

78 
	sif_dqöfo
 {

79 
__u64
 
	mdqi_bgø˚
;

80 
__u64
 
	mdqi_igø˚
;

81 
__u32
 
	mdqi_Êags
;

82 
__u32
 
	mdqi_vÆid
;

85 
	~<sys/cdefs.h
>

	@linux/raid/md.h

12 #i‚de‡
_MD_H


13 
	#_MD_H


	)

15 
	~<löux/blkdev.h
>

16 
	~<asm/£m≠h‹e.h
>

17 
	~<löux/maj‹.h
>

18 
	~<löux/io˘l.h
>

19 
	~<löux/ty≥s.h
>

20 
	~<löux/bô›s.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/hdªg.h
>

23 
	~<löux/¥oc_fs.h
>

24 
	~<löux/£q_fûe.h
>

25 
	~<löux/smp_lock.h
>

26 
	~<löux/dñay.h
>

27 
	~<√t/checksum.h
>

28 
	~<löux/øndom.h
>

29 
	~<löux/kî√l_°©.h
>

30 
	~<asm/io.h
>

31 
	~<löux/com∂ëi⁄.h
>

32 
	~<löux/mempoﬁ.h
>

33 
	~<löux/li°.h
>

34 
	~<löux/ªboŸ.h
>

35 
	~<löux/vmÆloc.h
>

36 
	~<löux/blkpg.h
>

37 
	~<löux/bio.h
>

39 
	~<löux/øid/md_p.h
>

40 
	~<löux/øid/md_u.h
>

41 
	~<löux/øid/md_k.h
>

43 
	#MD_MAJOR_VERSION
 0

	)

44 
	#MD_MINOR_VERSION
 90

	)

46 
	#MD_PATCHLEVEL_VERSION
 3

	)

	@linux/raid/md_k.h

12 #i‚de‡
_MD_K_H


13 
	#_MD_K_H


	)

15 
	~"../../../drivîs/md/dm-bio-li°.h
"

17 
	#LEVEL_MULTIPATH
 (-4)

	)

18 
	#LEVEL_LINEAR
 (-1)

	)

19 
	#LEVEL_FAULTY
 (-5)

	)

21 
	#LEVEL_NONE
 (-1000000)

	)

23 
	#MaxSe˘‹
 (~(
£˘‹_t
)0)

	)

24 
	#MD_THREAD_NAME_MAX
 14

	)

26 
mddev_s
 
	tmddev_t
;

27 
mdk_rdev_s
 
	tmdk_rdev_t
;

29 
	#MAX_MD_DEVS
 256

	)

31 
	#MAX_CHUNK_SIZE
 (1<<30)

	)

33 
	smdk_rdev_s


35 
li°_hód
 
	mßme_£t
;

37 
£˘‹_t
 
	msize
;

38 
mddev_t
 *
	mmddev
;

39 
	mœ°_evíts
;

41 
block_devi˚
 *
	mbdev
;

43 
∑ge
 *
	msb_∑ge
;

44 
	msb_lﬂded
;

45 
__u64
 
	msb_evíts
;

46 
£˘‹_t
 
	md©a_off£t
;

47 
£˘‹_t
 
	msb_off£t
;

48 
	msb_size
;

49 
	m¥e„ºed_mö‹
;

51 
kobje˘
 
	mkobj
;

53 
	mÊags
;

54 
	#Fau…y
 1

	)

55 
	#In_sync
 2

	)

56 
	#WrôeMo°ly
 4

	)

57 
	#B¨rõrsNŸsuµ
 5

	)

59 
	mdesc_ƒ
;

60 
	møid_disk
;

61 
	mßved_øid_disk
;

62 
£˘‹_t
 
	mªcovîy_off£t
;

64 
©omic_t
 
	mƒ_≥ndög
;

65 
©omic_t
 
	mªad_îr‹s
;

66 
©omic_t
 
	mc‹ª˘ed_îr‹s
;

69 
	smddev_s


71 *
	m¥iv©e
;

72 
mdk_≥rs⁄Æôy
 *
	m≥rs
;

73 
dev_t
 
	munô
;

74 
	mmd_mö‹
;

75 
li°_hód
 
	mdisks
;

76 
	msb_dúty
;

77 
	mro
;

79 
gídisk
 *
	mgídisk
;

81 
kobje˘
 
	mkobj
;

83 
	mmaj‹_vîsi⁄
,

84 
	mmö‹_vîsi⁄
,

85 
	m∑tch_vîsi⁄
;

86 
	m≥rsi°ít
;

87 
	mchunk_size
;

88 
time_t
 
	m˘ime
, 
	mutime
;

89 
	mÀvñ
, 
	mœyout
;

90 
	m˛evñ
[16];

91 
	møid_disks
;

92 
	mmax_disks
;

93 
£˘‹_t
 
	msize
;

94 
£˘‹_t
 
	m¨øy_size
;

95 
__u64
 
	mevíts
;

97 
	muuid
[16];

99 
£˘‹_t
 
	mªsh≠e_posôi⁄
;

100 
	mdñè_disks
, 
	m√w_Àvñ
, 
	m√w_œyout
, 
	m√w_chunk
;

102 
mdk_thªad_s
 *
	mthªad
;

103 
mdk_thªad_s
 *
	msync_thªad
;

104 
£˘‹_t
 
	mcuº_ªsync
;

105 
	mªsync_m¨k
;

106 
£˘‹_t
 
	mªsync_m¨k_˙t
;

107 
£˘‹_t
 
	mcuº_m¨k_˙t
;

109 
£˘‹_t
 
	mªsync_max_£˘‹s
;

111 
£˘‹_t
 
	mªsync_mism©ches
;

113 
£˘‹_t
 
	msu•íd_lo
;

114 
£˘‹_t
 
	msu•íd_hi
;

116 
	msync_•ìd_mö
;

117 
	msync_•ìd_max
;

119 
	mok_°¨t_degøded
;

121 
	#MD_RECOVERY_RUNNING
 0

	)

122 
	#MD_RECOVERY_SYNC
 1

	)

123 
	#MD_RECOVERY_ERR
 2

	)

124 
	#MD_RECOVERY_INTR
 3

	)

125 
	#MD_RECOVERY_DONE
 4

	)

126 
	#MD_RECOVERY_NEEDED
 5

	)

127 
	#MD_RECOVERY_REQUESTED
 6

	)

128 
	#MD_RECOVERY_CHECK
 7

	)

129 
	#MD_RECOVERY_RESHAPE
 8

	)

130 
	#MD_RECOVERY_FROZEN
 9

	)

132 
	mªcovîy
;

134 
	mö_sync
;

135 
muãx
 
	mªc⁄fig_muãx
;

136 
©omic_t
 
	ma˘ive
;

138 
	mch™ged
;

139 
	mdegøded
;

140 
	mb¨rõrs_w‹k
;

141 
bio
 *
	mbiﬁi°
;

143 
©omic_t
 
	mªcovîy_a˘ive
;

144 
waô_queue_hód_t
 
	mªcovîy_waô
;

145 
£˘‹_t
 
	mªcovîy_˝
;

147 
•ölock_t
 
	mwrôe_lock
;

148 
waô_queue_hód_t
 
	msb_waô
;

149 
©omic_t
 
	m≥ndög_wrôes
;

151 
	mß„mode
;

152 
	mß„mode_dñay
;

153 
timî_li°
 
	mß„mode_timî
;

154 
©omic_t
 
	mwrôes_≥ndög
;

155 
ªque°_queue_t
 *
	mqueue
;

157 
©omic_t
 
	mwrôe_behöd
;

158 
	mmax_wrôe_behöd
;

160 
bôm≠
 *
	mbôm≠
;

161 
fûe
 *
	mbôm≠_fûe
;

162 
	mbôm≠_off£t
;

163 
	mdeÁu…_bôm≠_off£t
;

165 
li°_hód
 
	mÆl_mddevs
;

168 
	smd_sysfs_íåy
 {

169 
©åibuã
 
	m©å
;

170 
ssize_t
 (*
show
)(
	mmddev_t
 *, *);

171 
ssize_t
 (*
°‹e
)(
	mmddev_t
 *, c⁄° *, 
	msize_t
);

174 
	#ITERATE_RDEV_GENERIC
(
hód
,
rdev
,
tmp
Ë—mpË(hód).
√xt
; (rdevË(
	`li°_íåy
(—mp), 
mdk_rdev_t
, 
ßme_£t
)), (tmpË—mp)->√xt, (tmp)->
¥ev
 !&(hódË; )

	)

175 
	#ITERATE_RDEV
(
mddev
,
rdev
,
tmp
Ë
	`ITERATE_RDEV_GENERIC
((mddev)->
disks
,rdev,tmp)

	)

176 
	#ITERATE_RDEV_PENDING
(
rdev
,
tmp
Ë
	`ITERATE_RDEV_GENERIC
(
≥ndög_øid_disks
,rdev,tmp)

	)

178 
	#THREAD_WAKEUP
 0

	)

180 
	#__waô_evít_lock_úq
(
wq
, 
c⁄dôi⁄
, 
lock
, 
cmd
Ëdÿ{ 
waô_queue_t
 
__waô
; 
	`öô_waôqueue_íåy
(&__waô, 
cuºít
); 
	`add_waô_queue
(&wq, &__waô); ;;Ë{ 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
); i‡(c⁄dôi⁄Ë; 
	`•ö_u∆ock_úq
(&lock); cmd; 
	`scheduÀ
(); 
	`•ö_lock_úq
(&lock); } cuºít->
°©e
 = 
TASK_RUNNING
; 
	`ªmove_waô_queue
(&wq, &__waô); } 0)

	)

182 
	#waô_evít_lock_úq
(
wq
, 
c⁄dôi⁄
, 
lock
, 
cmd
Ëdÿ{ i‡(c⁄dôi⁄Ë; 
	`__waô_evít_lock_úq
(wq, c⁄dôi⁄,Üock, cmd); } 0)

	)

	@linux/raid/md_p.h

12 #i‚de‡
_MD_P_H


13 
	#_MD_P_H


	)

15 
	#MD_RESERVED_BYTES
 (64 * 1024)

	)

16 
	#MD_RESERVED_SECTORS
 (
MD_RESERVED_BYTES
 / 512)

	)

17 
	#MD_RESERVED_BLOCKS
 (
MD_RESERVED_BYTES
 / 
BLOCK_SIZE
)

	)

19 
	#MD_NEW_SIZE_SECTORS
(
x
Ë((x & ~(
MD_RESERVED_SECTORS
 - 1)Ë- MD_RESERVED_SECTORS)

	)

20 
	#MD_NEW_SIZE_BLOCKS
(
x
Ë((x & ~(
MD_RESERVED_BLOCKS
 - 1)Ë- MD_RESERVED_BLOCKS)

	)

22 
	#MD_SB_BYTES
 4096

	)

23 
	#MD_SB_WORDS
 (
MD_SB_BYTES
 / 4)

	)

24 
	#MD_SB_BLOCKS
 (
MD_SB_BYTES
 / 
BLOCK_SIZE
)

	)

25 
	#MD_SB_SECTORS
 (
MD_SB_BYTES
 / 512)

	)

27 
	#MD_SB_GENERIC_OFFSET
 0

	)

28 
	#MD_SB_PERSONALITY_OFFSET
 64

	)

29 
	#MD_SB_DISKS_OFFSET
 128

	)

30 
	#MD_SB_DESCRIPTOR_OFFSET
 992

	)

32 
	#MD_SB_GENERIC_CONSTANT_WORDS
 32

	)

33 
	#MD_SB_GENERIC_STATE_WORDS
 32

	)

34 
	#MD_SB_GENERIC_WORDS
 (
MD_SB_GENERIC_CONSTANT_WORDS
 + 
MD_SB_GENERIC_STATE_WORDS
)

	)

35 
	#MD_SB_PERSONALITY_WORDS
 64

	)

36 
	#MD_SB_DESCRIPTOR_WORDS
 32

	)

37 
	#MD_SB_DISKS
 27

	)

38 
	#MD_SB_DISKS_WORDS
 (
MD_SB_DISKS
*
MD_SB_DESCRIPTOR_WORDS
)

	)

39 
	#MD_SB_RESERVED_WORDS
 (1024 - 
MD_SB_GENERIC_WORDS
 - 
MD_SB_PERSONALITY_WORDS
 - 
MD_SB_DISKS_WORDS
 - 
MD_SB_DESCRIPTOR_WORDS
)

	)

40 
	#MD_SB_EQUAL_WORDS
 (
MD_SB_GENERIC_WORDS
 + 
MD_SB_PERSONALITY_WORDS
 + 
MD_SB_DISKS_WORDS
)

	)

42 
	#MD_DISK_FAULTY
 0

	)

43 
	#MD_DISK_ACTIVE
 1

	)

44 
	#MD_DISK_SYNC
 2

	)

45 
	#MD_DISK_REMOVED
 3

	)

47 
	#MD_DISK_WRITEMOSTLY
 9

	)

49 
	smdp_devi˚_des¸ùt‹_s
 {

50 
__u32
 
	mnumbî
;

51 
__u32
 
	mmaj‹
;

52 
__u32
 
	mmö‹
;

53 
__u32
 
	møid_disk
;

54 
__u32
 
	m°©e
;

55 
__u32
 
	mª£rved
[
MD_SB_DESCRIPTOR_WORDS
 - 5];

56 } 
	tmdp_disk_t
;

58 
	#MD_SB_MAGIC
 0xa92b4efc

	)

60 
	#MD_SB_CLEAN
 0

	)

61 
	#MD_SB_ERRORS
 1

	)

63 
	#MD_SB_BITMAP_PRESENT
 8

	)

65 
	smdp_su≥rblock_s
 {

67 
__u32
 
	mmd_magic
;

68 
__u32
 
	mmaj‹_vîsi⁄
;

69 
__u32
 
	mmö‹_vîsi⁄
;

70 
__u32
 
	m∑tch_vîsi⁄
;

71 
__u32
 
	mgvÆid_w‹ds
;

72 
__u32
 
	m£t_uuid0
;

73 
__u32
 
	m˘ime
;

74 
__u32
 
	mÀvñ
;

75 
__u32
 
	msize
;

76 
__u32
 
	mƒ_disks
;

77 
__u32
 
	møid_disks
;

78 
__u32
 
	mmd_mö‹
;

79 
__u32
 
	mnŸ_≥rsi°ít
;

80 
__u32
 
	m£t_uuid1
;

81 
__u32
 
	m£t_uuid2
;

82 
__u32
 
	m£t_uuid3
;

83 
__u32
 
	mg°©e_¸e£rved
[
MD_SB_GENERIC_CONSTANT_WORDS
 - 16];

85 
__u32
 
	mutime
;

86 
__u32
 
	m°©e
;

87 
__u32
 
	ma˘ive_disks
;

88 
__u32
 
	mw‹kög_disks
;

89 
__u32
 
	mÁûed_disks
;

90 
__u32
 
	m•¨e_disks
;

91 
__u32
 
	msb_csum
;

92 #ifde‡
__BIG_ENDIAN


93 
__u32
 
	mevíts_hi
;

94 
__u32
 
	mevíts_lo
;

95 
__u32
 
	m˝_evíts_hi
;

96 
__u32
 
	m˝_evíts_lo
;

98 
__u32
 
	mevíts_lo
;

99 
__u32
 
	mevíts_hi
;

100 
__u32
 
	m˝_evíts_lo
;

101 
__u32
 
	m˝_evíts_hi
;

103 
__u32
 
	mªcovîy_˝
;

105 
__u64
 
	mªsh≠e_posôi⁄
;

106 
__u32
 
	m√w_Àvñ
;

107 
__u32
 
	mdñè_disks
;

108 
__u32
 
	m√w_œyout
;

109 
__u32
 
	m√w_chunk
;

110 
__u32
 
	mg°©e_§e£rved
[
MD_SB_GENERIC_STATE_WORDS
 - 18];

112 
__u32
 
	mœyout
;

113 
__u32
 
	mchunk_size
;

114 
__u32
 
	mroŸ_pv
;

115 
__u32
 
	mroŸ_block
;

116 
__u32
 
	mp°©e_ª£rved
[
MD_SB_PERSONALITY_WORDS
 - 4];

118 
mdp_disk_t
 
	mdisks
[
MD_SB_DISKS
];

120 
__u32
 
	mª£rved
[
MD_SB_RESERVED_WORDS
];

122 
mdp_disk_t
 
	mthis_disk
;

124 } 
	tmdp_su≥r_t
;

126 
	#WrôeMo°ly1
 1

	)

128 
	#MD_FEATURE_BITMAP_OFFSET
 1

	)

129 
	#MD_FEATURE_RECOVERY_OFFSET
 2

	)

130 
	#MD_FEATURE_RESHAPE_ACTIVE
 4

	)

132 
	#MD_FEATURE_ALL
 (1|2|4)

	)

	@linux/raid/md_u.h

12 #i‚de‡
_MD_U_H


13 
	#_MD_U_H


	)

15 
	#RAID_VERSION
 
	`_IOR
 (
MD_MAJOR
, 0x10, 
mdu_vîsi⁄_t
)

	)

16 
	#GET_ARRAY_INFO
 
	`_IOR
 (
MD_MAJOR
, 0x11, 
mdu_¨øy_öfo_t
)

	)

17 
	#GET_DISK_INFO
 
	`_IOR
 (
MD_MAJOR
, 0x12, 
mdu_disk_öfo_t
)

	)

18 
	#PRINT_RAID_DEBUG
 
	`_IO
 (
MD_MAJOR
, 0x13)

	)

19 
	#RAID_AUTORUN
 
	`_IO
 (
MD_MAJOR
, 0x14)

	)

20 
	#GET_BITMAP_FILE
 
	`_IOR
 (
MD_MAJOR
, 0x15, 
mdu_bôm≠_fûe_t
)

	)

22 
	#CLEAR_ARRAY
 
	`_IO
 (
MD_MAJOR
, 0x20)

	)

23 
	#ADD_NEW_DISK
 
	`_IOW
 (
MD_MAJOR
, 0x21, 
mdu_disk_öfo_t
)

	)

24 
	#HOT_REMOVE_DISK
 
	`_IO
 (
MD_MAJOR
, 0x22)

	)

25 
	#SET_ARRAY_INFO
 
	`_IOW
 (
MD_MAJOR
, 0x23, 
mdu_¨øy_öfo_t
)

	)

26 
	#SET_DISK_INFO
 
	`_IO
 (
MD_MAJOR
, 0x24)

	)

27 
	#WRITE_RAID_INFO
 
	`_IO
 (
MD_MAJOR
, 0x25)

	)

28 
	#UNPROTECT_ARRAY
 
	`_IO
 (
MD_MAJOR
, 0x26)

	)

29 
	#PROTECT_ARRAY
 
	`_IO
 (
MD_MAJOR
, 0x27)

	)

30 
	#HOT_ADD_DISK
 
	`_IO
 (
MD_MAJOR
, 0x28)

	)

31 
	#SET_DISK_FAULTY
 
	`_IO
 (
MD_MAJOR
, 0x29)

	)

32 
	#HOT_GENERATE_ERROR
 
	`_IO
 (
MD_MAJOR
, 0x2a)

	)

33 
	#SET_BITMAP_FILE
 
	`_IOW
 (
MD_MAJOR
, 0x2b, )

	)

35 
	#RUN_ARRAY
 
	`_IOW
 (
MD_MAJOR
, 0x30, 
mdu_∑øm_t
)

	)

36 
	#START_ARRAY
 
	`_IO
 (
MD_MAJOR
, 0x31)

	)

37 
	#STOP_ARRAY
 
	`_IO
 (
MD_MAJOR
, 0x32)

	)

38 
	#STOP_ARRAY_RO
 
	`_IO
 (
MD_MAJOR
, 0x33)

	)

39 
	#RESTART_ARRAY_RW
 
	`_IO
 (
MD_MAJOR
, 0x34)

	)

41 
	smdu_vîsi⁄_s
 {

42 
	mmaj‹
;

43 
	mmö‹
;

44 
	m∑tchÀvñ
;

45 } 
	tmdu_vîsi⁄_t
;

47 
	smdu_¨øy_öfo_s
 {

49 
	mmaj‹_vîsi⁄
;

50 
	mmö‹_vîsi⁄
;

51 
	m∑tch_vîsi⁄
;

52 
	m˘ime
;

53 
	mÀvñ
;

54 
	msize
;

55 
	mƒ_disks
;

56 
	møid_disks
;

57 
	mmd_mö‹
;

58 
	mnŸ_≥rsi°ít
;

60 
	mutime
;

61 
	m°©e
;

62 
	ma˘ive_disks
;

63 
	mw‹kög_disks
;

64 
	mÁûed_disks
;

65 
	m•¨e_disks
;

67 
	mœyout
;

68 
	mchunk_size
;

70 } 
	tmdu_¨øy_öfo_t
;

72 
	smdu_disk_öfo_s
 {

74 
	mnumbî
;

75 
	mmaj‹
;

76 
	mmö‹
;

77 
	møid_disk
;

78 
	m°©e
;

80 } 
	tmdu_disk_öfo_t
;

82 
	smdu_°¨t_öfo_s
 {

84 
	mmaj‹
;

85 
	mmö‹
;

86 
	møid_disk
;

87 
	m°©e
;

89 } 
	tmdu_°¨t_öfo_t
;

91 
	smdu_bôm≠_fûe_s


93 
	m∑th«me
[4096];

94 } 
	tmdu_bôm≠_fûe_t
;

96 
	smdu_∑øm_s


98 
	m≥rs⁄Æôy
;

99 
	mchunk_size
;

100 
	mmax_Áu…
;

101 } 
	tmdu_∑øm_t
;

	@linux/raid/xor.h

12 #i‚de‡
_XOR_H


13 
	#_XOR_H


	)

15 
	~<löux/øid/md.h
>

17 
	#MAX_XOR_BLOCKS
 5

	)

19 
	sx‹_block_ãm∂©e
 {

20 
x‹_block_ãm∂©e
 *
	m√xt
;

21 c⁄° *
	m«me
;

22 
	m•ìd
;

23 (*
	mdo_2
)(, *, *);

24 (*
	mdo_3
)(, *, *,

26 (*
	mdo_4
)(, *, *,

28 (*
	mdo_5
)(, *, *,

	@linux/random.h

12 #i‚de‡
_LINUX_RANDOM_H


13 
	#_LINUX_RANDOM_H


	)

15 
	~<löux/io˘l.h
>

17 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

19 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

21 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

23 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

25 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

27 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

29 
	sønd_poﬁ_öfo
 {

30 
	míå›y_cou¡
;

31 
	mbuf_size
;

32 
__u32
 
	mbuf
[0];

	@linux/rbtree.h

12 #i‚de‡
_LINUX_RBTREE_H


13 
	#_LINUX_RBTREE_H


	)

15 
	~<löux/kî√l.h
>

16 
	~<löux/°ddef.h
>

18 
	srb_node


20 
	mrb_∑ª¡_cﬁ‹
;

21 
	#RB_RED
 0

	)

22 
	#RB_BLACK
 1

	)

23 
rb_node
 *
	mrb_right
;

24 
rb_node
 *
	mrb_À·
;

25 } 
__©åibuã__
((
Æig√d
(())));

27 
	srb_roŸ


29 
rb_node
 *
	mrb_node
;

32 
	#rb_∑ª¡
(
r
Ë((
rb_node
 *)(‘)->
rb_∑ª¡_cﬁ‹
 & ~3))

	)

33 
	#rb_cﬁ‹
(
r
Ë(‘)->
rb_∑ª¡_cﬁ‹
 & 1)

	)

34 
	#rb_is_ªd
(
r
Ë(!
	`rb_cﬁ‹
‘))

	)

35 
	#rb_is_bœck
(
r
Ë
	`rb_cﬁ‹
‘)

	)

36 
	#rb_£t_ªd
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 &~1; } 0)

	)

37 
	#rb_£t_bœck
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 |1; } 0)

	)

39 
	#RB_ROOT
 (
rb_roŸ
Ë{ 
NULL
, }

	)

40 
	#rb_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,Åy≥, membî)

	)

41 
	#RB_EMPTY_ROOT
(
roŸ
Ë(‘oŸ)->
rb_node
 =
NULL
)

	)

42 
	#RB_EMPTY_NODE
(
node
Ë(
	`rb_∑ª¡
“odeË!node)

	)

43 
	#RB_CLEAR_NODE
(
node
Ë(
	`rb_£t_∑ª¡
“ode,Çode))

	)

	@linux/rcupdate.h

12 #i‚de‡
__LINUX_RCUPDATE_H


13 
	#__LINUX_RCUPDATE_H


	)

	@linux/reboot.h

12 #i‚de‡
_LINUX_REBOOT_H


13 
	#_LINUX_REBOOT_H


	)

15 
	#LINUX_REBOOT_MAGIC1
 0x„e1dód

	)

16 
	#LINUX_REBOOT_MAGIC2
 672274793

	)

17 
	#LINUX_REBOOT_MAGIC2A
 85072278

	)

18 
	#LINUX_REBOOT_MAGIC2B
 369367448

	)

19 
	#LINUX_REBOOT_MAGIC2C
 537993216

	)

21 
	#LINUX_REBOOT_CMD_RESTART
 0x01234567

	)

22 
	#LINUX_REBOOT_CMD_HALT
 0xCDEF0123

	)

23 
	#LINUX_REBOOT_CMD_CAD_ON
 0x89ABCDEF

	)

24 
	#LINUX_REBOOT_CMD_CAD_OFF
 0x00000000

	)

25 
	#LINUX_REBOOT_CMD_POWER_OFF
 0x4321FEDC

	)

26 
	#LINUX_REBOOT_CMD_RESTART2
 0xA1B2C3D4

	)

27 
	#LINUX_REBOOT_CMD_SW_SUSPEND
 0xD000FCE2

	)

28 
	#LINUX_REBOOT_CMD_KEXEC
 0x45584543

	)

	@linux/relay.h

12 #i‚de‡
_LINUX_RELAY_H


13 
	#_LINUX_RELAY_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/sched.h
>

17 
	~<löux/waô.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/fs.h
>

20 
	~<löux/pﬁl.h
>

21 
	~<löux/kªf.h
>

23 
	#FIX_SIZE
(
x
Ë((((xË- 1Ë& 
PAGE_MASK
Ë+ 
PAGE_SIZE
)

	)

25 
	#RELAYFS_CHANNEL_VERSION
 6

	)

27 
	srch™_buf


29 *
	m°¨t
;

30 *
	md©a
;

31 
size_t
 
	moff£t
;

32 
size_t
 
	msubbufs_¥odu˚d
;

33 
size_t
 
	msubbufs_c⁄sumed
;

34 
rch™
 *
	mch™
;

35 
waô_queue_hód_t
 
	mªad_waô
;

36 
w‹k_°ru˘
 
	mwake_ªadîs
;

37 
díåy
 *
	mdíåy
;

38 
kªf
 
	mkªf
;

39 
∑ge
 **
	m∑ge_¨øy
;

40 
	m∑ge_cou¡
;

41 
	mföÆized
;

42 
size_t
 *
	m∑ddög
;

43 
size_t
 
	m¥ev_∑ddög
;

44 
size_t
 
	mbyãs_c⁄sumed
;

45 
	m˝u
;

46 } 
	g____ˇchñöe_Æig√d
;

48 
	srch™


50 
u32
 
	mvîsi⁄
;

51 
size_t
 
	msubbuf_size
;

52 
size_t
 
	mn_subbufs
;

53 
size_t
 
	mÆloc_size
;

54 
rch™_ˇŒbacks
 *
	mcb
;

55 
kªf
 
	mkªf
;

56 *
	m¥iv©e_d©a
;

57 
size_t
 
	mœ°_toobig
;

58 
rch™_buf
 *
	mbuf
[
NR_CPUS
];

61 
	srch™_ˇŒbacks


64 (*
	msubbuf_°¨t
Ë(
rch™_buf
 *
	mbuf
,

65 *
	msubbuf
,

66 *
	m¥ev_subbuf
,

67 
size_t
 
	m¥ev_∑ddög
);

69 (*
	mbuf_m≠≥d
)(
rch™_buf
 *
	mbuf
,

70 
fûe
 *
	mfûp
);

72 (*
	mbuf_unm≠≥d
)(
rch™_buf
 *
	mbuf
,

73 
fûe
 *
	mfûp
);

75 
	mdíåy
 *(*
	m¸óã_buf_fûe
)(c⁄° *
	mfûíame
,

76 
díåy
 *
	m∑ª¡
,

77 
	mmode
,

78 
rch™_buf
 *
	mbuf
,

79 *
	mis_globÆ
);

81 (*
	mªmove_buf_fûe
)(
díåy
 *
	mdíåy
);

84 
rch™
 *
ªœy_›í
(c⁄° *
ba£_fûíame
,

85 
díåy
 *
∑ª¡
,

86 
size_t
 
subbuf_size
,

87 
size_t
 
n_subbufs
,

88 
rch™_ˇŒbacks
 *
cb
);

	@linux/resource.h

12 #i‚de‡
_LINUX_RESOURCE_H


13 
	#_LINUX_RESOURCE_H


	)

15 
	~<löux/time.h
>

17 
	gèsk_°ru˘
;

19 
	#RUSAGE_SELF
 0

	)

20 
	#RUSAGE_CHILDREN
 (-1)

	)

21 
	#RUSAGE_BOTH
 (-2)

	)

23 
	srußge
 {

24 
timevÆ
 
	mru_utime
;

25 
timevÆ
 
	mru_°ime
;

26 
	mru_maxrss
;

27 
	mru_ixrss
;

28 
	mru_idrss
;

29 
	mru_i§ss
;

30 
	mru_möÊt
;

31 
	mru_majÊt
;

32 
	mru_nsw≠
;

33 
	mru_öblock
;

34 
	mru_oublock
;

35 
	mru_msg¢d
;

36 
	mru_msgrcv
;

37 
	mru_nsig«ls
;

38 
	mru_nvcsw
;

39 
	mru_nivcsw
;

42 
	sæimô
 {

43 
	mæim_cur
;

44 
	mæim_max
;

47 
	#PRIO_MIN
 (-20)

	)

48 
	#PRIO_MAX
 20

	)

50 
	#PRIO_PROCESS
 0

	)

51 
	#PRIO_PGRP
 1

	)

52 
	#PRIO_USER
 2

	)

54 
	#_STK_LIM
 (8*1024*1024)

	)

56 
	#MLOCK_LIMIT
 (8 * 
PAGE_SIZE
)

	)

58 
	~<asm/ªsour˚.h
>

	@linux/route.h

12 #i‚de‡
_LINUX_ROUTE_H


13 
	#_LINUX_ROUTE_H


	)

15 
	~<löux/if.h
>

16 
	~<löux/compûî.h
>

18 
	sπíåy


20 
	mπ_∑d1
;

21 
sockaddr
 
	mπ_d°
;

22 
sockaddr
 
	mπ_g©eway
;

23 
sockaddr
 
	mπ_gímask
;

24 
	mπ_Êags
;

25 
	mπ_∑d2
;

26 
	mπ_∑d3
;

27 *
	mπ_∑d4
;

28 
	mπ_mëric
;

29 
__u£r
 *
	mπ_dev
;

30 
	mπ_mtu
;

31 
	#π_mss
 
π_mtu


	)

32 
	mπ_wödow
;

33 
	mπ_úâ
;

36 
	#RTF_UP
 0x0001

	)

37 
	#RTF_GATEWAY
 0x0002

	)

38 
	#RTF_HOST
 0x0004

	)

39 
	#RTF_REINSTATE
 0x0008

	)

40 
	#RTF_DYNAMIC
 0x0010

	)

41 
	#RTF_MODIFIED
 0x0020

	)

42 
	#RTF_MTU
 0x0040

	)

43 
	#RTF_MSS
 
RTF_MTU


	)

44 
	#RTF_WINDOW
 0x0080

	)

45 
	#RTF_IRTT
 0x0100

	)

46 
	#RTF_REJECT
 0x0200

	)

	@linux/rtc.h

12 #i‚de‡
_LINUX_RTC_H_


13 
	#_LINUX_RTC_H_


	)

15 
	sπc_time
 {

16 
	mtm_£c
;

17 
	mtm_mö
;

18 
	mtm_hour
;

19 
	mtm_mday
;

20 
	mtm_m⁄
;

21 
	mtm_yór
;

22 
	mtm_wday
;

23 
	mtm_yday
;

24 
	mtm_isd°
;

27 
	sπc_wkÆrm
 {

28 
	míabÀd
;

29 
	m≥ndög
;

30 
πc_time
 
	mtime
;

33 
	sπc_∂l_öfo
 {

34 
	m∂l_˘æ
;

35 
	m∂l_vÆue
;

36 
	m∂l_max
;

37 
	m∂l_mö
;

38 
	m∂l_posmu…
;

39 
	m∂l_√gmu…
;

40 
	m∂l_˛ock
;

43 
	#RTC_AIE_ON
 
	`_IO
('p', 0x01)

	)

44 
	#RTC_AIE_OFF
 
	`_IO
('p', 0x02)

	)

45 
	#RTC_UIE_ON
 
	`_IO
('p', 0x03)

	)

46 
	#RTC_UIE_OFF
 
	`_IO
('p', 0x04)

	)

47 
	#RTC_PIE_ON
 
	`_IO
('p', 0x05)

	)

48 
	#RTC_PIE_OFF
 
	`_IO
('p', 0x06)

	)

49 
	#RTC_WIE_ON
 
	`_IO
('p', 0x0f)

	)

50 
	#RTC_WIE_OFF
 
	`_IO
('p', 0x10)

	)

52 
	#RTC_ALM_SET
 
	`_IOW
('p', 0x07, 
πc_time
)

	)

53 
	#RTC_ALM_READ
 
	`_IOR
('p', 0x08, 
πc_time
)

	)

54 
	#RTC_RD_TIME
 
	`_IOR
('p', 0x09, 
πc_time
)

	)

55 
	#RTC_SET_TIME
 
	`_IOW
('p', 0x0a, 
πc_time
)

	)

56 
	#RTC_IRQP_READ
 
	`_IOR
('p', 0x0b, )

	)

57 
	#RTC_IRQP_SET
 
	`_IOW
('p', 0x0c, )

	)

58 
	#RTC_EPOCH_READ
 
	`_IOR
('p', 0x0d, )

	)

59 
	#RTC_EPOCH_SET
 
	`_IOW
('p', 0x0e, )

	)

61 
	#RTC_WKALM_SET
 
	`_IOW
('p', 0x0f, 
πc_wkÆrm
)

	)

62 
	#RTC_WKALM_RD
 
	`_IOR
('p', 0x10, 
πc_wkÆrm
)

	)

64 
	#RTC_PLL_GET
 
	`_IOR
('p', 0x11, 
πc_∂l_öfo
)

	)

65 
	#RTC_PLL_SET
 
	`_IOW
('p', 0x12, 
πc_∂l_öfo
)

	)

67 
	#RTC_IRQF
 0x80

	)

68 
	#RTC_PF
 0x40

	)

69 
	#RTC_AF
 0x20

	)

70 
	#RTC_UF
 0x10

	)

	@linux/rtnetlink.h

12 #i‚de‡
__LINUX_RTNETLINK_H


13 
	#__LINUX_RTNETLINK_H


	)

15 
	~<löux/√éök.h
>

18 
	mRTM_BASE
 = 16,

19 
	#RTM_BASE
 
RTM_BASE


	)

21 
	mRTM_NEWLINK
 = 16,

22 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

23 
	mRTM_DELLINK
,

24 
	#RTM_DELLINK
 
RTM_DELLINK


	)

25 
	mRTM_GETLINK
,

26 
	#RTM_GETLINK
 
RTM_GETLINK


	)

27 
	mRTM_SETLINK
,

28 
	#RTM_SETLINK
 
RTM_SETLINK


	)

30 
	mRTM_NEWADDR
 = 20,

31 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

32 
	mRTM_DELADDR
,

33 
	#RTM_DELADDR
 
RTM_DELADDR


	)

34 
	mRTM_GETADDR
,

35 
	#RTM_GETADDR
 
RTM_GETADDR


	)

37 
	mRTM_NEWROUTE
 = 24,

38 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

39 
	mRTM_DELROUTE
,

40 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

41 
	mRTM_GETROUTE
,

42 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

44 
	mRTM_NEWNEIGH
 = 28,

45 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

46 
	mRTM_DELNEIGH
,

47 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

48 
	mRTM_GETNEIGH
,

49 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

51 
	mRTM_NEWRULE
 = 32,

52 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

53 
	mRTM_DELRULE
,

54 
	#RTM_DELRULE
 
RTM_DELRULE


	)

55 
	mRTM_GETRULE
,

56 
	#RTM_GETRULE
 
RTM_GETRULE


	)

58 
	mRTM_NEWQDISC
 = 36,

59 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

60 
	mRTM_DELQDISC
,

61 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

62 
	mRTM_GETQDISC
,

63 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

65 
	mRTM_NEWTCLASS
 = 40,

66 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

67 
	mRTM_DELTCLASS
,

68 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

69 
	mRTM_GETTCLASS
,

70 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

72 
	mRTM_NEWTFILTER
 = 44,

73 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

74 
	mRTM_DELTFILTER
,

75 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

76 
	mRTM_GETTFILTER
,

77 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

79 
	mRTM_NEWACTION
 = 48,

80 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

81 
	mRTM_DELACTION
,

82 
	#RTM_DELACTION
 
RTM_DELACTION


	)

83 
	mRTM_GETACTION
,

84 
	#RTM_GETACTION
 
RTM_GETACTION


	)

86 
	mRTM_NEWPREFIX
 = 52,

87 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

88 
	mRTM_GETPREFIX
 = 54,

89 
	#RTM_GETPREFIX
 
RTM_GETPREFIX


	)

91 
	mRTM_GETMULTICAST
 = 58,

92 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

94 
	mRTM_GETANYCAST
 = 62,

95 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

97 
	mRTM_NEWNEIGHTBL
 = 64,

98 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

99 
	mRTM_GETNEIGHTBL
 = 66,

100 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

101 
	mRTM_SETNEIGHTBL
,

102 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

104 
	m__RTM_MAX
,

105 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

108 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

109 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

110 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

112 
	sπ©å


114 
	mπa_Àn
;

115 
	mπa_ty≥
;

118 
	#RTA_ALIGNTO
 4

	)

119 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

120 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
Ë&& (πa)->
πa_Àn
 >(π©åË&& (πa)->πa_À¿<÷í))

	)

121 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), (
π©å
*)(((*)‘è)Ë+ RTA_ALIGN(‘è)->πa_Àn)))

	)

122 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

123 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

124 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

125 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

127 
	sπmsg


129 
	mπm_Ámûy
;

130 
	mπm_d°_Àn
;

131 
	mπm_§c_Àn
;

132 
	mπm_tos
;

134 
	mπm_èbÀ
;

135 
	mπm_¥Ÿocﬁ
;

136 
	mπm_sc›e
;

137 
	mπm_ty≥
;

139 
	mπm_Êags
;

144 
	mRTN_UNSPEC
,

145 
	mRTN_UNICAST
,

146 
	mRTN_LOCAL
,

147 
	mRTN_BROADCAST
,

148 
	mRTN_ANYCAST
,

149 
	mRTN_MULTICAST
,

150 
	mRTN_BLACKHOLE
,

151 
	mRTN_UNREACHABLE
,

152 
	mRTN_PROHIBIT
,

153 
	mRTN_THROW
,

154 
	mRTN_NAT
,

155 
	mRTN_XRESOLVE
,

156 
	m__RTN_MAX


159 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

161 
	#RTPROT_UNSPEC
 0

	)

162 
	#RTPROT_REDIRECT
 1

	)

163 
	#RTPROT_KERNEL
 2

	)

164 
	#RTPROT_BOOT
 3

	)

165 
	#RTPROT_STATIC
 4

	)

167 
	#RTPROT_GATED
 8

	)

168 
	#RTPROT_RA
 9

	)

169 
	#RTPROT_MRT
 10

	)

170 
	#RTPROT_ZEBRA
 11

	)

171 
	#RTPROT_BIRD
 12

	)

172 
	#RTPROT_DNROUTED
 13

	)

173 
	#RTPROT_XORP
 14

	)

174 
	#RTPROT_NTK
 15

	)

176 
	eπ_sc›e_t


178 
	mRT_SCOPE_UNIVERSE
=0,

180 
	mRT_SCOPE_SITE
=200,

181 
	mRT_SCOPE_LINK
=253,

182 
	mRT_SCOPE_HOST
=254,

183 
	mRT_SCOPE_NOWHERE
=255

186 
	#RTM_F_NOTIFY
 0x100

	)

187 
	#RTM_F_CLONED
 0x200

	)

188 
	#RTM_F_EQUALIZE
 0x400

	)

189 
	#RTM_F_PREFIX
 0x800

	)

191 
	eπ_˛ass_t


193 
	mRT_TABLE_UNSPEC
=0,

195 
	mRT_TABLE_DEFAULT
=253,

196 
	mRT_TABLE_MAIN
=254,

197 
	mRT_TABLE_LOCAL
=255,

198 
	m__RT_TABLE_MAX


200 
	#RT_TABLE_MAX
 (
__RT_TABLE_MAX
 - 1)

	)

202 
	eπ©å_ty≥_t


204 
	mRTA_UNSPEC
,

205 
	mRTA_DST
,

206 
	mRTA_SRC
,

207 
	mRTA_IIF
,

208 
	mRTA_OIF
,

209 
	mRTA_GATEWAY
,

210 
	mRTA_PRIORITY
,

211 
	mRTA_PREFSRC
,

212 
	mRTA_METRICS
,

213 
	mRTA_MULTIPATH
,

214 
	mRTA_PROTOINFO
,

215 
	mRTA_FLOW
,

216 
	mRTA_CACHEINFO
,

217 
	mRTA_SESSION
,

218 
	mRTA_MP_ALGO
,

219 
	m__RTA_MAX


222 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

224 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

225 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

227 
	sπ√xth›


229 
	mπnh_Àn
;

230 
	mπnh_Êags
;

231 
	mπnh_h›s
;

232 
	mπnh_ifödex
;

235 
	#RTNH_F_DEAD
 1

	)

236 
	#RTNH_F_PERVASIVE
 2

	)

237 
	#RTNH_F_ONLINK
 4

	)

239 
	#RTNH_ALIGNTO
 4

	)

240 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

241 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
Ë&& (()‘äh)->πnh_ÀnË<÷í))

	)

242 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

243 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

244 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

245 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

247 
	sπa_ˇcheöfo


249 
__u32
 
	mπa_˛¡ªf
;

250 
__u32
 
	mπa_œ°u£
;

251 
__s32
 
	mπa_expúes
;

252 
__u32
 
	mπa_îr‹
;

253 
__u32
 
	mπa_u£d
;

255 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

256 
__u32
 
	mπa_id
;

257 
__u32
 
	mπa_ts
;

258 
__u32
 
	mπa_tßge
;

263 
	mRTAX_UNSPEC
,

264 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

265 
	mRTAX_LOCK
,

266 
	#RTAX_LOCK
 
RTAX_LOCK


	)

267 
	mRTAX_MTU
,

268 
	#RTAX_MTU
 
RTAX_MTU


	)

269 
	mRTAX_WINDOW
,

270 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

271 
	mRTAX_RTT
,

272 
	#RTAX_RTT
 
RTAX_RTT


	)

273 
	mRTAX_RTTVAR
,

274 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

275 
	mRTAX_SSTHRESH
,

276 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

277 
	mRTAX_CWND
,

278 
	#RTAX_CWND
 
RTAX_CWND


	)

279 
	mRTAX_ADVMSS
,

280 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

281 
	mRTAX_REORDERING
,

282 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

283 
	mRTAX_HOPLIMIT
,

284 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

285 
	mRTAX_INITCWND
,

286 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

287 
	mRTAX_FEATURES
,

288 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

289 
	m__RTAX_MAX


292 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

294 
	#RTAX_FEATURE_ECN
 0x00000001

	)

295 
	#RTAX_FEATURE_SACK
 0x00000002

	)

296 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

297 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

299 
	sπa_£ssi⁄


301 
__u8
 
	m¥Ÿo
;

302 
__u8
 
	m∑d1
;

303 
__u16
 
	m∑d2
;

307 
__u16
 
	m•‹t
;

308 
__u16
 
	mdp‹t
;

309 } 
	mp‹ts
;

312 
__u8
 
	mty≥
;

313 
__u8
 
	mcode
;

314 
__u16
 
	midít
;

315 } 
	micm±
;

317 
__u32
 
	m•i
;

318 } 
	mu
;

321 
	siÁddrmsg


323 
	miÁ_Ámûy
;

324 
	miÁ_¥efixÀn
;

325 
	miÁ_Êags
;

326 
	miÁ_sc›e
;

327 
	miÁ_ödex
;

332 
	mIFA_UNSPEC
,

333 
	mIFA_ADDRESS
,

334 
	mIFA_LOCAL
,

335 
	mIFA_LABEL
,

336 
	mIFA_BROADCAST
,

337 
	mIFA_ANYCAST
,

338 
	mIFA_CACHEINFO
,

339 
	mIFA_MULTICAST
,

340 
	m__IFA_MAX


343 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

345 
	#IFA_F_SECONDARY
 0x01

	)

346 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

348 
	#IFA_F_DEPRECATED
 0x20

	)

349 
	#IFA_F_TENTATIVE
 0x40

	)

350 
	#IFA_F_PERMANENT
 0x80

	)

352 
	siÁ_ˇcheöfo


354 
__u32
 
	miÁ_¥e„ªd
;

355 
__u32
 
	miÁ_vÆid
;

356 
__u32
 
	mc°amp
;

357 
__u32
 
	mt°amp
;

360 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

361 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

363 
	sndmsg


365 
	mndm_Ámûy
;

366 
	mndm_∑d1
;

367 
	mndm_∑d2
;

368 
	mndm_ifödex
;

369 
__u16
 
	mndm_°©e
;

370 
__u8
 
	mndm_Êags
;

371 
__u8
 
	mndm_ty≥
;

376 
	mNDA_UNSPEC
,

377 
	mNDA_DST
,

378 
	mNDA_LLADDR
,

379 
	mNDA_CACHEINFO
,

380 
	mNDA_PROBES
,

381 
	m__NDA_MAX


384 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

386 
	#NDA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
ndmsg
))))

	)

387 
	#NDA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
ndmsg
))

	)

389 
	#NTF_PROXY
 0x08

	)

390 
	#NTF_ROUTER
 0x80

	)

392 
	#NUD_INCOMPLETE
 0x01

	)

393 
	#NUD_REACHABLE
 0x02

	)

394 
	#NUD_STALE
 0x04

	)

395 
	#NUD_DELAY
 0x08

	)

396 
	#NUD_PROBE
 0x10

	)

397 
	#NUD_FAILED
 0x20

	)

399 
	#NUD_NOARP
 0x40

	)

400 
	#NUD_PERMANENT
 0x80

	)

401 
	#NUD_NONE
 0x00

	)

403 
	snda_ˇcheöfo


405 
__u32
 
	mndm_c⁄fúmed
;

406 
__u32
 
	mndm_u£d
;

407 
__u32
 
	mndm_upd©ed
;

408 
__u32
 
	mndm_ªf˙t
;

411 
	sndt_°©s


413 
__u64
 
	mndts_Ælocs
;

414 
__u64
 
	mndts_de°roys
;

415 
__u64
 
	mndts_hash_grows
;

416 
__u64
 
	mndts_ªs_Áûed
;

417 
__u64
 
	mndts_lookups
;

418 
__u64
 
	mndts_hôs
;

419 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

420 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

421 
__u64
 
	mndts_≥riodic_gc_runs
;

422 
__u64
 
	mndts_f‹˚d_gc_runs
;

426 
	mNDTPA_UNSPEC
,

427 
	mNDTPA_IFINDEX
,

428 
	mNDTPA_REFCNT
,

429 
	mNDTPA_REACHABLE_TIME
,

430 
	mNDTPA_BASE_REACHABLE_TIME
,

431 
	mNDTPA_RETRANS_TIME
,

432 
	mNDTPA_GC_STALETIME
,

433 
	mNDTPA_DELAY_PROBE_TIME
,

434 
	mNDTPA_QUEUE_LEN
,

435 
	mNDTPA_APP_PROBES
,

436 
	mNDTPA_UCAST_PROBES
,

437 
	mNDTPA_MCAST_PROBES
,

438 
	mNDTPA_ANYCAST_DELAY
,

439 
	mNDTPA_PROXY_DELAY
,

440 
	mNDTPA_PROXY_QLEN
,

441 
	mNDTPA_LOCKTIME
,

442 
	m__NDTPA_MAX


444 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

446 
	sndtmsg


448 
__u8
 
	mndtm_Ámûy
;

449 
__u8
 
	mndtm_∑d1
;

450 
__u16
 
	mndtm_∑d2
;

453 
	sndt_c⁄fig


455 
__u16
 
	mndtc_key_Àn
;

456 
__u16
 
	mndtc_íåy_size
;

457 
__u32
 
	mndtc_íåõs
;

458 
__u32
 
	mndtc_œ°_Êush
;

459 
__u32
 
	mndtc_œ°_ønd
;

460 
__u32
 
	mndtc_hash_∫d
;

461 
__u32
 
	mndtc_hash_mask
;

462 
__u32
 
	mndtc_hash_chaö_gc
;

463 
__u32
 
	mndtc_¥oxy_qÀn
;

467 
	mNDTA_UNSPEC
,

468 
	mNDTA_NAME
,

469 
	mNDTA_THRESH1
,

470 
	mNDTA_THRESH2
,

471 
	mNDTA_THRESH3
,

472 
	mNDTA_CONFIG
,

473 
	mNDTA_PARMS
,

474 
	mNDTA_STATS
,

475 
	mNDTA_GC_INTERVAL
,

476 
	m__NDTA_MAX


478 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

480 
	#NDTA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
ndtmsg
))))

	)

481 
	#NDTA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
ndtmsg
))

	)

483 
	sπgímsg


485 
	mπgí_Ámûy
;

488 
	siföfomsg


490 
	mifi_Ámûy
;

491 
	m__ifi_∑d
;

492 
	mifi_ty≥
;

493 
	mifi_ödex
;

494 
	mifi_Êags
;

495 
	mifi_ch™ge
;

498 
	s¥efixmsg


500 
	m¥efix_Ámûy
;

501 
	m¥efix_∑d1
;

502 
	m¥efix_∑d2
;

503 
	m¥efix_ifödex
;

504 
	m¥efix_ty≥
;

505 
	m¥efix_Àn
;

506 
	m¥efix_Êags
;

507 
	m¥efix_∑d3
;

512 
	mPREFIX_UNSPEC
,

513 
	mPREFIX_ADDRESS
,

514 
	mPREFIX_CACHEINFO
,

515 
	m__PREFIX_MAX


518 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

520 
	s¥efix_ˇcheöfo


522 
__u32
 
	m¥e„ºed_time
;

523 
__u32
 
	mvÆid_time
;

526 
	sπ∆_lök_°©s


528 
__u32
 
	mrx_∑ckës
;

529 
__u32
 
	mtx_∑ckës
;

530 
__u32
 
	mrx_byãs
;

531 
__u32
 
	mtx_byãs
;

532 
__u32
 
	mrx_îr‹s
;

533 
__u32
 
	mtx_îr‹s
;

534 
__u32
 
	mrx_dr›≥d
;

535 
__u32
 
	mtx_dr›≥d
;

536 
__u32
 
	mmu…iˇ°
;

537 
__u32
 
	mcﬁlisi⁄s
;

539 
__u32
 
	mrx_Àngth_îr‹s
;

540 
__u32
 
	mrx_ovî_îr‹s
;

541 
__u32
 
	mrx_¸c_îr‹s
;

542 
__u32
 
	mrx_‰ame_îr‹s
;

543 
__u32
 
	mrx_fifo_îr‹s
;

544 
__u32
 
	mrx_mis£d_îr‹s
;

546 
__u32
 
	mtx_ab‹ãd_îr‹s
;

547 
__u32
 
	mtx_ˇºõr_îr‹s
;

548 
__u32
 
	mtx_fifo_îr‹s
;

549 
__u32
 
	mtx_hóπbót_îr‹s
;

550 
__u32
 
	mtx_wödow_îr‹s
;

552 
__u32
 
	mrx_com¥es£d
;

553 
__u32
 
	mtx_com¥es£d
;

556 
	sπ∆_lök_ifm≠


558 
__u64
 
	mmem_°¨t
;

559 
__u64
 
	mmem_íd
;

560 
__u64
 
	mba£_addr
;

561 
__u16
 
	múq
;

562 
__u8
 
	mdma
;

563 
__u8
 
	mp‹t
;

568 
	mIFLA_UNSPEC
,

569 
	mIFLA_ADDRESS
,

570 
	mIFLA_BROADCAST
,

571 
	mIFLA_IFNAME
,

572 
	mIFLA_MTU
,

573 
	mIFLA_LINK
,

574 
	mIFLA_QDISC
,

575 
	mIFLA_STATS
,

576 
	mIFLA_COST
,

577 
	#IFLA_COST
 
IFLA_COST


	)

578 
	mIFLA_PRIORITY
,

579 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

580 
	mIFLA_MASTER
,

581 
	#IFLA_MASTER
 
IFLA_MASTER


	)

582 
	mIFLA_WIRELESS
,

583 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

584 
	mIFLA_PROTINFO
,

585 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

586 
	mIFLA_TXQLEN
,

587 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

588 
	mIFLA_MAP
,

589 
	#IFLA_MAP
 
IFLA_MAP


	)

590 
	mIFLA_WEIGHT
,

591 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

592 
	mIFLA_OPERSTATE
,

593 
	mIFLA_LINKMODE
,

594 
	m__IFLA_MAX


597 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

599 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

600 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

604 
	mIFLA_INET6_UNSPEC
,

605 
	mIFLA_INET6_FLAGS
,

606 
	mIFLA_INET6_CONF
,

607 
	mIFLA_INET6_STATS
,

608 
	mIFLA_INET6_MCAST
,

609 
	mIFLA_INET6_CACHEINFO
,

610 
	m__IFLA_INET6_MAX


613 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

615 
	siÊa_ˇcheöfo


617 
__u32
 
	mmax_ªasm_Àn
;

618 
__u32
 
	mt°amp
;

619 
__u32
 
	mªachabÀ_time
;

620 
__u32
 
	mªå™s_time
;

623 
	stcmsg


625 
	mtcm_Ámûy
;

626 
	mtcm__∑d1
;

627 
	mtcm__∑d2
;

628 
	mtcm_ifödex
;

629 
__u32
 
	mtcm_h™dÀ
;

630 
__u32
 
	mtcm_∑ª¡
;

631 
__u32
 
	mtcm_öfo
;

636 
	mTCA_UNSPEC
,

637 
	mTCA_KIND
,

638 
	mTCA_OPTIONS
,

639 
	mTCA_STATS
,

640 
	mTCA_XSTATS
,

641 
	mTCA_RATE
,

642 
	mTCA_FCNT
,

643 
	mTCA_STATS2
,

644 
	m__TCA_MAX


647 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

649 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

650 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

652 
	#RTMGRP_LINK
 1

	)

653 
	#RTMGRP_NOTIFY
 2

	)

654 
	#RTMGRP_NEIGH
 4

	)

655 
	#RTMGRP_TC
 8

	)

657 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

658 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

659 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

660 
	#RTMGRP_IPV4_RULE
 0x80

	)

662 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

663 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

664 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

665 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

667 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

668 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

670 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

672 
	eπ√éök_groups
 {

673 
	mRTNLGRP_NONE
,

674 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

675 
	mRTNLGRP_LINK
,

676 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

677 
	mRTNLGRP_NOTIFY
,

678 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

679 
	mRTNLGRP_NEIGH
,

680 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

681 
	mRTNLGRP_TC
,

682 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

683 
	mRTNLGRP_IPV4_IFADDR
,

684 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

685 
	mRTNLGRP_IPV4_MROUTE
,

686 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

687 
	mRTNLGRP_IPV4_ROUTE
,

688 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

689 
	mRTNLGRP_IPV4_RULE
,

690 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

691 
	mRTNLGRP_IPV6_IFADDR
,

692 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

693 
	mRTNLGRP_IPV6_MROUTE
,

694 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

695 
	mRTNLGRP_IPV6_ROUTE
,

696 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

697 
	mRTNLGRP_IPV6_IFINFO
,

698 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

699 
	mRTNLGRP_DEC√t_IFADDR
,

700 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

701 
	mRTNLGRP_NOP2
,

702 
	mRTNLGRP_DEC√t_ROUTE
,

703 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

704 
	mRTNLGRP_NOP3
,

705 
	mRTNLGRP_NOP4
,

706 
	mRTNLGRP_IPV6_PREFIX
,

707 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

708 
	m__RTNLGRP_MAX


710 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

712 
	stˇmsg


714 
	mtˇ_Ámûy
;

715 
	mtˇ__∑d1
;

716 
	mtˇ__∑d2
;

718 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

719 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

720 
	#TCA_ACT_TAB
 1

	)

721 
	#TCAA_MAX
 1

	)

	@linux/rwsem.h

12 #i‚de‡
_LINUX_RWSEM_H


13 
	#_LINUX_RWSEM_H


	)

15 
	~<löux/lökage.h
>

	@linux/sched.h

12 #i‚de‡
_LINUX_SCHED_H


13 
	#_LINUX_SCHED_H


	)

15 
	~<löux/auxvec.h
>

17 
	#CSIGNAL
 0x000000ff

	)

18 
	#CLONE_VM
 0x00000100

	)

19 
	#CLONE_FS
 0x00000200

	)

20 
	#CLONE_FILES
 0x00000400

	)

21 
	#CLONE_SIGHAND
 0x00000800

	)

22 
	#CLONE_PTRACE
 0x00002000

	)

23 
	#CLONE_VFORK
 0x00004000

	)

24 
	#CLONE_PARENT
 0x00008000

	)

25 
	#CLONE_THREAD
 0x00010000

	)

26 
	#CLONE_NEWNS
 0x00020000

	)

27 
	#CLONE_SYSVSEM
 0x00040000

	)

28 
	#CLONE_SETTLS
 0x00080000

	)

29 
	#CLONE_PARENT_SETTID
 0x00100000

	)

30 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

31 
	#CLONE_DETACHED
 0x00400000

	)

32 
	#CLONE_UNTRACED
 0x00800000

	)

33 
	#CLONE_CHILD_SETTID
 0x01000000

	)

34 
	#CLONE_STOPPED
 0x02000000

	)

36 
	#SCHED_NORMAL
 0

	)

37 
	#SCHED_FIFO
 1

	)

38 
	#SCHED_RR
 2

	)

39 
	#SCHED_BATCH
 3

	)

	@linux/sem.h

12 #i‚de‡
_LINUX_SEM_H


13 
	#_LINUX_SEM_H


	)

15 
	~<löux/ùc.h
>

17 
	#SEM_UNDO
 0x1000

	)

19 
	#GETPID
 11

	)

20 
	#GETVAL
 12

	)

21 
	#GETALL
 13

	)

22 
	#GETNCNT
 14

	)

23 
	#GETZCNT
 15

	)

24 
	#SETVAL
 16

	)

25 
	#SETALL
 17

	)

27 
	#SEM_STAT
 18

	)

28 
	#SEM_INFO
 19

	)

30 
	s£mid_ds
 {

31 
ùc_≥rm
 
	m£m_≥rm
;

32 
__kî√l_time_t
 
	m£m_Ÿime
;

33 
__kî√l_time_t
 
	m£m_˘ime
;

34 
£m
 *
	m£m_ba£
;

35 
£m_queue
 *
	m£m_≥ndög
;

36 
£m_queue
 **
	m£m_≥ndög_œ°
;

37 
£m_undo
 *
	mundo
;

38 
	m£m_n£ms
;

41 
	~<asm/£mbuf.h
>

43 
	s£mbuf
 {

44 
	m£m_num
;

45 
	m£m_›
;

46 
	m£m_Êg
;

49 
	u£mun
 {

50 
	mvÆ
;

51 
£mid_ds
 
__u£r
 *
	mbuf
;

52 
__u£r
 *
	m¨øy
;

53 
£möfo
 
__u£r
 *
	m__buf
;

54 
__u£r
 *
	m__∑d
;

57 
	s£möfo
 {

58 
	m£mm≠
;

59 
	m£mmni
;

60 
	m£mmns
;

61 
	m£mmnu
;

62 
	m£mm¶
;

63 
	m£m›m
;

64 
	m£mume
;

65 
	m£musz
;

66 
	m£mvmx
;

67 
	m£m´m
;

70 
	#SEMMNI
 128

	)

71 
	#SEMMSL
 250

	)

72 
	#SEMMNS
 (
SEMMNI
*
SEMMSL
)

	)

73 
	#SEMOPM
 32

	)

74 
	#SEMVMX
 32767

	)

75 
	#SEMAEM
 
SEMVMX


	)

77 
	#SEMUME
 
SEMOPM


	)

78 
	#SEMMNU
 
SEMMNS


	)

79 
	#SEMMAP
 
SEMMNS


	)

80 
	#SEMUSZ
 20

	)

	@linux/seq_file.h

12 #i‚de‡
_LINUX_SEQ_FILE_H


13 
	#_LINUX_SEQ_FILE_H


	)

	@linux/seqlock.h

12 #i‚de‡
__LINUX_SEQLOCK_H


13 
	#__LINUX_SEQLOCK_H


	)

15 
	~<löux/•ölock.h
>

16 
	~<löux/¥ìm±.h
>

19 
	m£quí˚
;

20 
•ölock_t
 
	mlock
;

21 } 
	t£qlock_t
;

23 
	#__SEQLOCK_UNLOCKED
(
lock«me
Ë{ 0, 
	`__SPIN_LOCK_UNLOCKED
÷ock«meË}

	)

25 
	#SEQLOCK_UNLOCKED
 
	`__SEQLOCK_UNLOCKED
(
ﬁd_°yÀ_£qlock_öô
)

	)

27 
	#£qlock_öô
(
x
Ëdÿ{ *(xË(
£qlock_t
Ë
	`__SEQLOCK_UNLOCKED
(x); } 0)

	)

29 
	#DEFINE_SEQLOCK
(
x
Ë
£qlock_t
 x = 
	`__SEQLOCK_UNLOCKED
(x)

	)

31 
	#SEQCNT_ZERO
 { 0 }

	)

32 
	#£qcou¡_öô
(
x
Ëdÿ{ *(xË(
£qcou¡_t
Ë
SEQCNT_ZERO
; } 0)

	)

34 
	#wrôe_£qlock_úqßve
(
lock
, 
Êags
Ëdÿ{ 
	`loˇl_úq_ßve
(Êags); 
	`wrôe_£qlock
÷ock); } 0)

	)

35 
	#wrôe_£qlock_úq
(
lock
Ëdÿ{ 
	`loˇl_úq_dißbÀ
(); 
	`wrôe_£qlock
÷ock); } 0)

	)

36 
	#wrôe_£qlock_bh
(
lock
Ëdÿ{ 
	`loˇl_bh_dißbÀ
(); 
	`wrôe_£qlock
÷ock); } 0)

	)

37 
	#wrôe_£qu∆ock_úqª°‹e
(
lock
, 
Êags
Ëdÿ{ 
	`wrôe_£qu∆ock
÷ock); 
	`loˇl_úq_ª°‹e
(Êags); } 0)

	)

38 
	#wrôe_£qu∆ock_úq
(
lock
Ëdÿ{ 
	`wrôe_£qu∆ock
÷ock); 
	`loˇl_úq_íabÀ
(); } 0)

	)

39 
	#wrôe_£qu∆ock_bh
(
lock
Ëdÿ{ 
	`wrôe_£qu∆ock
÷ock); 
	`loˇl_bh_íabÀ
(); } 0)

	)

40 
	#ªad_£qbegö_úqßve
(
lock
, 
Êags
Ë({ 
	`loˇl_úq_ßve
(Êags); 
	`ªad_£qbegö
÷ock); })

	)

41 
	#ªad_£qªåy_úqª°‹e
(
lock
, 
iv
, 
Êags
Ë({ 
ªt
 = 
	`ªad_£qªåy
÷ock, iv); 
	`loˇl_úq_ª°‹e
(Êags);Ñë; })

	)

	@linux/serial_core.h

12 #i‚de‡
LINUX_SERIAL_CORE_H


13 
	#LINUX_SERIAL_CORE_H


	)

15 
	#PORT_UNKNOWN
 0

	)

16 
	#PORT_8250
 1

	)

17 
	#PORT_16450
 2

	)

18 
	#PORT_16550
 3

	)

19 
	#PORT_16550A
 4

	)

20 
	#PORT_CIRRUS
 5

	)

21 
	#PORT_16650
 6

	)

22 
	#PORT_16650V2
 7

	)

23 
	#PORT_16750
 8

	)

24 
	#PORT_STARTECH
 9

	)

25 
	#PORT_16C950
 10

	)

26 
	#PORT_16654
 11

	)

27 
	#PORT_16850
 12

	)

28 
	#PORT_RSA
 13

	)

29 
	#PORT_NS16550A
 14

	)

30 
	#PORT_XSCALE
 15

	)

31 
	#PORT_MAX_8250
 15

	)

33 
	#PORT_PXA
 31

	)

34 
	#PORT_AMBA
 32

	)

35 
	#PORT_CLPS711X
 33

	)

36 
	#PORT_SA1100
 34

	)

37 
	#PORT_UART00
 35

	)

38 
	#PORT_21285
 37

	)

40 
	#PORT_SUNZILOG
 38

	)

41 
	#PORT_SUNSAB
 39

	)

43 
	#PORT_V850E_UART
 40

	)

45 
	#PORT_DZ
 47

	)

47 
	#PORT_MUX
 48

	)

49 
	#PORT_AT91
 49

	)

51 
	#PORT_MAC_ZILOG
 50

	)

52 
	#PORT_PMAC_ZILOG
 51

	)

54 
	#PORT_SCI
 52

	)

55 
	#PORT_SCIF
 53

	)

56 
	#PORT_IRDA
 54

	)

58 
	#PORT_S3C2410
 55

	)

60 
	#PORT_IP22ZILOG
 56

	)

62 
	#PORT_LH7A40X
 57

	)

64 
	#PORT_CPM
 58

	)

66 
	#PORT_MPC52xx
 59

	)

68 
	#PORT_ICOM
 60

	)

70 
	#PORT_S3C2440
 61

	)

72 
	#PORT_IMX
 62

	)

74 
	#PORT_MPSC
 63

	)

76 
	#PORT_TXX9
 64

	)

78 
	#PORT_VR41XX_SIU
 65

	)

79 
	#PORT_VR41XX_DSIU
 66

	)

81 
	#PORT_S3C2400
 67

	)

83 
	#PORT_M32R_SIO
 68

	)

85 
	#PORT_JSM
 69

	)

87 
	#PORT_IP3106
 70

	)

89 
	#PORT_NETX
 71

	)

91 
	#PORT_SUNHV
 72

	)

93 
	#PORT_S3C2412
 73

	)

	@linux/serial_reg.h

12 #i‚de‡
_LINUX_SERIAL_REG_H


13 
	#_LINUX_SERIAL_REG_H


	)

15 
	#UART_RX
 0

	)

16 
	#UART_TX
 0

	)

18 
	#UART_IER
 1

	)

19 
	#UART_IER_MSI
 0x08

	)

20 
	#UART_IER_RLSI
 0x04

	)

21 
	#UART_IER_THRI
 0x02

	)

22 
	#UART_IER_RDI
 0x01

	)

24 
	#UART_IERX_SLEEP
 0x10

	)

26 
	#UART_IIR
 2

	)

27 
	#UART_IIR_NO_INT
 0x01

	)

28 
	#UART_IIR_ID
 0x06

	)

29 
	#UART_IIR_MSI
 0x00

	)

30 
	#UART_IIR_THRI
 0x02

	)

31 
	#UART_IIR_RDI
 0x04

	)

32 
	#UART_IIR_RLSI
 0x06

	)

34 
	#UART_FCR
 2

	)

35 
	#UART_FCR_ENABLE_FIFO
 0x01

	)

36 
	#UART_FCR_CLEAR_RCVR
 0x02

	)

37 
	#UART_FCR_CLEAR_XMIT
 0x04

	)

38 
	#UART_FCR_DMA_SELECT
 0x08

	)

40 
	#UART_FCR_R_TRIG_00
 0x00

	)

41 
	#UART_FCR_R_TRIG_01
 0x40

	)

42 
	#UART_FCR_R_TRIG_10
 0x80

	)

43 
	#UART_FCR_R_TRIG_11
 0xc0

	)

44 
	#UART_FCR_T_TRIG_00
 0x00

	)

45 
	#UART_FCR_T_TRIG_01
 0x10

	)

46 
	#UART_FCR_T_TRIG_10
 0x20

	)

47 
	#UART_FCR_T_TRIG_11
 0x30

	)

49 
	#UART_FCR_TRIGGER_MASK
 0xC0

	)

50 
	#UART_FCR_TRIGGER_1
 0x00

	)

51 
	#UART_FCR_TRIGGER_4
 0x40

	)

52 
	#UART_FCR_TRIGGER_8
 0x80

	)

53 
	#UART_FCR_TRIGGER_14
 0xC0

	)

55 
	#UART_FCR6_R_TRIGGER_8
 0x00

	)

56 
	#UART_FCR6_R_TRIGGER_16
 0x40

	)

57 
	#UART_FCR6_R_TRIGGER_24
 0x80

	)

58 
	#UART_FCR6_R_TRIGGER_28
 0xC0

	)

59 
	#UART_FCR6_T_TRIGGER_16
 0x00

	)

60 
	#UART_FCR6_T_TRIGGER_8
 0x10

	)

61 
	#UART_FCR6_T_TRIGGER_24
 0x20

	)

62 
	#UART_FCR6_T_TRIGGER_30
 0x30

	)

63 
	#UART_FCR7_64BYTE
 0x20

	)

65 
	#UART_LCR
 3

	)

67 
	#UART_LCR_DLAB
 0x80

	)

68 
	#UART_LCR_SBC
 0x40

	)

69 
	#UART_LCR_SPAR
 0x20

	)

70 
	#UART_LCR_EPAR
 0x10

	)

71 
	#UART_LCR_PARITY
 0x08

	)

72 
	#UART_LCR_STOP
 0x04

	)

73 
	#UART_LCR_WLEN5
 0x00

	)

74 
	#UART_LCR_WLEN6
 0x01

	)

75 
	#UART_LCR_WLEN7
 0x02

	)

76 
	#UART_LCR_WLEN8
 0x03

	)

78 
	#UART_MCR
 4

	)

79 
	#UART_MCR_CLKSEL
 0x80

	)

80 
	#UART_MCR_TCRTLR
 0x40

	)

81 
	#UART_MCR_XONANY
 0x20

	)

82 
	#UART_MCR_AFE
 0x20

	)

83 
	#UART_MCR_LOOP
 0x10

	)

84 
	#UART_MCR_OUT2
 0x08

	)

85 
	#UART_MCR_OUT1
 0x04

	)

86 
	#UART_MCR_RTS
 0x02

	)

87 
	#UART_MCR_DTR
 0x01

	)

89 
	#UART_LSR
 5

	)

90 
	#UART_LSR_TEMT
 0x40

	)

91 
	#UART_LSR_THRE
 0x20

	)

92 
	#UART_LSR_BI
 0x10

	)

93 
	#UART_LSR_FE
 0x08

	)

94 
	#UART_LSR_PE
 0x04

	)

95 
	#UART_LSR_OE
 0x02

	)

96 
	#UART_LSR_DR
 0x01

	)

98 
	#UART_MSR
 6

	)

99 
	#UART_MSR_DCD
 0x80

	)

100 
	#UART_MSR_RI
 0x40

	)

101 
	#UART_MSR_DSR
 0x20

	)

102 
	#UART_MSR_CTS
 0x10

	)

103 
	#UART_MSR_DDCD
 0x08

	)

104 
	#UART_MSR_TERI
 0x04

	)

105 
	#UART_MSR_DDSR
 0x02

	)

106 
	#UART_MSR_DCTS
 0x01

	)

107 
	#UART_MSR_ANY_DELTA
 0x0F

	)

109 
	#UART_SCR
 7

	)

111 
	#UART_DLL
 0

	)

112 
	#UART_DLM
 1

	)

114 
	#UART_EFR
 2

	)

115 
	#UART_EFR_CTS
 0x80

	)

116 
	#UART_EFR_RTS
 0x40

	)

117 
	#UART_EFR_SCD
 0x20

	)

118 
	#UART_EFR_ECB
 0x10

	)

120 
	#UART_XON1
 4

	)

121 
	#UART_XON2
 5

	)

122 
	#UART_XOFF1
 6

	)

123 
	#UART_XOFF2
 7

	)

125 
	#UART_TI752_TCR
 6

	)

126 
	#UART_TI752_TLR
 7

	)

128 
	#UART_TRG
 0

	)

130 
	#UART_TRG_1
 0x01

	)

131 
	#UART_TRG_4
 0x04

	)

132 
	#UART_TRG_8
 0x08

	)

133 
	#UART_TRG_16
 0x10

	)

134 
	#UART_TRG_32
 0x20

	)

135 
	#UART_TRG_64
 0x40

	)

136 
	#UART_TRG_96
 0x60

	)

137 
	#UART_TRG_120
 0x78

	)

138 
	#UART_TRG_128
 0x80

	)

140 
	#UART_FCTR
 1

	)

141 
	#UART_FCTR_RTS_NODELAY
 0x00

	)

142 
	#UART_FCTR_RTS_4DELAY
 0x01

	)

143 
	#UART_FCTR_RTS_6DELAY
 0x02

	)

144 
	#UART_FCTR_RTS_8DELAY
 0x03

	)

145 
	#UART_FCTR_IRDA
 0x04

	)

146 
	#UART_FCTR_TX_INT
 0x08

	)

147 
	#UART_FCTR_TRGA
 0x00

	)

148 
	#UART_FCTR_TRGB
 0x10

	)

149 
	#UART_FCTR_TRGC
 0x20

	)

150 
	#UART_FCTR_TRGD
 0x30

	)

151 
	#UART_FCTR_SCR_SWAP
 0x40

	)

152 
	#UART_FCTR_RX
 0x00

	)

153 
	#UART_FCTR_TX
 0x80

	)

155 
	#UART_EMSR
 7

	)

156 
	#UART_EMSR_FIFO_COUNT
 0x01

	)

157 
	#UART_EMSR_ALT_COUNT
 0x02

	)

159 
	#UART_IER_DMAE
 0x80

	)

160 
	#UART_IER_UUE
 0x40

	)

161 
	#UART_IER_NRZE
 0x20

	)

162 
	#UART_IER_RTOIE
 0x10

	)

164 
	#UART_IIR_TOD
 0x08

	)

166 
	#UART_FCR_PXAR1
 0x00

	)

167 
	#UART_FCR_PXAR8
 0x40

	)

168 
	#UART_FCR_PXAR16
 0x80

	)

169 
	#UART_FCR_PXAR32
 0xc0

	)

171 
	#UART_ASR
 0x01

	)

172 
	#UART_RFL
 0x03

	)

173 
	#UART_TFL
 0x04

	)

174 
	#UART_ICR
 0x05

	)

176 
	#UART_ACR
 0x00

	)

177 
	#UART_CPR
 0x01

	)

178 
	#UART_TCR
 0x02

	)

179 
	#UART_CKS
 0x03

	)

180 
	#UART_TTL
 0x04

	)

181 
	#UART_RTL
 0x05

	)

182 
	#UART_FCL
 0x06

	)

183 
	#UART_FCH
 0x07

	)

184 
	#UART_ID1
 0x08

	)

185 
	#UART_ID2
 0x09

	)

186 
	#UART_ID3
 0x0A

	)

187 
	#UART_REV
 0x0B

	)

188 
	#UART_CSR
 0x0C

	)

189 
	#UART_NMR
 0x0D

	)

190 
	#UART_CTR
 0xFF

	)

192 
	#UART_ACR_RXDIS
 0x01

	)

193 
	#UART_ACR_TXDIS
 0x02

	)

194 
	#UART_ACR_DSRFC
 0x04

	)

195 
	#UART_ACR_TLENB
 0x20

	)

196 
	#UART_ACR_ICRRD
 0x40

	)

197 
	#UART_ACR_ASREN
 0x80

	)

199 
	#UART_RSA_BASE
 (-8)

	)

201 
	#UART_RSA_MSR
 ((
UART_RSA_BASE
Ë+ 0)

	)

203 
	#UART_RSA_MSR_SWAP
 (1 << 0)

	)

204 
	#UART_RSA_MSR_FIFO
 (1 << 2)

	)

205 
	#UART_RSA_MSR_FLOW
 (1 << 3)

	)

206 
	#UART_RSA_MSR_ITYP
 (1 << 4)

	)

208 
	#UART_RSA_IER
 ((
UART_RSA_BASE
Ë+ 1)

	)

210 
	#UART_RSA_IER_Rx_FIFO_H
 (1 << 0)

	)

211 
	#UART_RSA_IER_Tx_FIFO_H
 (1 << 1)

	)

212 
	#UART_RSA_IER_Tx_FIFO_E
 (1 << 2)

	)

213 
	#UART_RSA_IER_Rx_TOUT
 (1 << 3)

	)

214 
	#UART_RSA_IER_TIMER
 (1 << 4)

	)

216 
	#UART_RSA_SRR
 ((
UART_RSA_BASE
Ë+ 2)

	)

218 
	#UART_RSA_SRR_Tx_FIFO_NEMP
 (1 << 0)

	)

219 
	#UART_RSA_SRR_Tx_FIFO_NHFL
 (1 << 1)

	)

220 
	#UART_RSA_SRR_Tx_FIFO_NFUL
 (1 << 2)

	)

221 
	#UART_RSA_SRR_Rx_FIFO_NEMP
 (1 << 3)

	)

222 
	#UART_RSA_SRR_Rx_FIFO_NHFL
 (1 << 4)

	)

223 
	#UART_RSA_SRR_Rx_FIFO_NFUL
 (1 << 5)

	)

224 
	#UART_RSA_SRR_Rx_TOUT
 (1 << 6)

	)

225 
	#UART_RSA_SRR_TIMER
 (1 << 7)

	)

227 
	#UART_RSA_FRR
 ((
UART_RSA_BASE
Ë+ 2)

	)

229 
	#UART_RSA_TIVSR
 ((
UART_RSA_BASE
Ë+ 3)

	)

231 
	#UART_RSA_TCR
 ((
UART_RSA_BASE
Ë+ 4)

	)

233 
	#UART_RSA_TCR_SWITCH
 (1 << 0)

	)

235 
	#SERIAL_RSA_BAUD_BASE
 (921600)

	)

236 
	#SERIAL_RSA_BAUD_BASE_LO
 (
SERIAL_RSA_BAUD_BASE
 / 8)

	)

238 
	#UART_OMAP_MDR1
 0x08

	)

239 
	#UART_OMAP_MDR2
 0x09

	)

240 
	#UART_OMAP_SCR
 0x10

	)

241 
	#UART_OMAP_SSR
 0x11

	)

242 
	#UART_OMAP_EBLR
 0x12

	)

243 
	#UART_OMAP_OSC_12M_SEL
 0x13

	)

244 
	#UART_OMAP_MVER
 0x14

	)

245 
	#UART_OMAP_SYSC
 0x15

	)

246 
	#UART_OMAP_SYSS
 0x16

	)

	@linux/serio.h

12 #i‚de‡
_SERIO_H


13 
	#_SERIO_H


	)

15 
	~<löux/io˘l.h
>

17 
	#SPIOCSTYPE
 
	`_IOW
('q', 0x01, )

	)

19 
	#SERIO_TIMEOUT
 1

	)

20 
	#SERIO_PARITY
 2

	)

21 
	#SERIO_FRAME
 4

	)

23 
	#SERIO_XT
 0x00

	)

24 
	#SERIO_8042
 0x01

	)

25 
	#SERIO_RS232
 0x02

	)

26 
	#SERIO_HIL_MLC
 0x03

	)

27 
	#SERIO_PS_PSTHRU
 0x05

	)

28 
	#SERIO_8042_XL
 0x06

	)

30 
	#SERIO_UNKNOWN
 0x00

	)

31 
	#SERIO_MSC
 0x01

	)

32 
	#SERIO_SUN
 0x02

	)

33 
	#SERIO_MS
 0x03

	)

34 
	#SERIO_MP
 0x04

	)

35 
	#SERIO_MZ
 0x05

	)

36 
	#SERIO_MZP
 0x06

	)

37 
	#SERIO_MZPP
 0x07

	)

38 
	#SERIO_VSXXXAA
 0x08

	)

39 
	#SERIO_SUNKBD
 0x10

	)

40 
	#SERIO_WARRIOR
 0x18

	)

41 
	#SERIO_SPACEORB
 0x19

	)

42 
	#SERIO_MAGELLAN
 0x1a

	)

43 
	#SERIO_SPACEBALL
 0x1b

	)

44 
	#SERIO_GUNZE
 0x1c

	)

45 
	#SERIO_IFORCE
 0x1d

	)

46 
	#SERIO_STINGER
 0x1e

	)

47 
	#SERIO_NEWTON
 0x1f

	)

48 
	#SERIO_STOWAWAY
 0x20

	)

49 
	#SERIO_H3600
 0x21

	)

50 
	#SERIO_PS2SER
 0x22

	)

51 
	#SERIO_TWIDKBD
 0x23

	)

52 
	#SERIO_TWIDJOY
 0x24

	)

53 
	#SERIO_HIL
 0x25

	)

54 
	#SERIO_SNES232
 0x26

	)

55 
	#SERIO_SEMTECH
 0x27

	)

56 
	#SERIO_LKKBD
 0x28

	)

57 
	#SERIO_ELO
 0x29

	)

58 
	#SERIO_MICROTOUCH
 0x30

	)

	@linux/shm.h

12 #i‚de‡
_LINUX_SHM_H_


13 
	#_LINUX_SHM_H_


	)

15 
	~<löux/ùc.h
>

16 
	~<löux/î∫o.h
>

17 
	~<asm/∑ge.h
>

19 
	#SHMMAX
 0x2000000

	)

20 
	#SHMMIN
 1

	)

21 
	#SHMMNI
 4096

	)

22 
	#SHMALL
 (
SHMMAX
/
PAGE_SIZE
*(
SHMMNI
/16))

	)

23 
	#SHMSEG
 
SHMMNI


	)

25 
	~<asm/shm∑øm.h
>

27 
	sshmid_ds
 {

28 
ùc_≥rm
 
	mshm_≥rm
;

29 
	mshm_£gsz
;

30 
__kî√l_time_t
 
	mshm_©ime
;

31 
__kî√l_time_t
 
	mshm_dtime
;

32 
__kî√l_time_t
 
	mshm_˘ime
;

33 
__kî√l_ùc_pid_t
 
	mshm_˝id
;

34 
__kî√l_ùc_pid_t
 
	mshm_Õid
;

35 
	mshm_«âch
;

36 
	mshm_unu£d
;

37 *
	mshm_unu£d2
;

38 *
	mshm_unu£d3
;

41 
	~<asm/shmbuf.h
>

43 
	#SHM_R
 0400

	)

44 
	#SHM_W
 0200

	)

46 
	#SHM_RDONLY
 010000

	)

47 
	#SHM_RND
 020000

	)

48 
	#SHM_REMAP
 040000

	)

49 
	#SHM_EXEC
 0100000

	)

51 
	#SHM_LOCK
 11

	)

52 
	#SHM_UNLOCK
 12

	)

54 
	#SHM_STAT
 13

	)

55 
	#SHM_INFO
 14

	)

57 
	sshmöfo
 {

58 
	mshmmax
;

59 
	mshmmö
;

60 
	mshmmni
;

61 
	mshm£g
;

62 
	mshmÆl
;

65 
	sshm_öfo
 {

66 
	mu£d_ids
;

67 
	mshm_tŸ
;

68 
	mshm_rss
;

69 
	mshm_swp
;

70 
	msw≠_©ãm±s
;

71 
	msw≠_suc˚s£s
;

	@linux/signal.h

12 #i‚de‡
_LINUX_SIGNAL_H


13 
	#_LINUX_SIGNAL_H


	)

15 
	~<asm/sig«l.h
>

16 
	~<asm/sigöfo.h
>

	@linux/skbuff.h

12 #i‚de‡
_LINUX_SKBUFF_H


13 
	#_LINUX_SKBUFF_H


	)

15 
	~<löux/kî√l.h
>

16 
	~<löux/compûî.h
>

17 
	~<löux/time.h
>

18 
	~<löux/ˇche.h
>

20 
	~<asm/©omic.h
>

21 
	~<asm/ty≥s.h
>

22 
	~<löux/•ölock.h
>

23 
	~<löux/mm.h
>

24 
	~<löux/highmem.h
>

25 
	~<löux/pﬁl.h
>

26 
	~<löux/√t.h
>

27 
	~<löux/ãxt£¨ch.h
>

28 
	~<√t/checksum.h
>

29 
	~<löux/dm´ngöe.h
>

31 
	#HAVE_ALLOC_SKB


	)

32 
	#HAVE_ALIGNABLE_SKB


	)

34 
	#CHECKSUM_NONE
 0

	)

35 
	#CHECKSUM_HW
 1

	)

36 
	#CHECKSUM_UNNECESSARY
 2

	)

38 
	#SKB_DATA_ALIGN
(
X
Ë(((XË+ (
SMP_CACHE_BYTES
 - 1)Ë& ~(SMP_CACHE_BYTES - 1))

	)

39 
	#SKB_MAX_ORDER
(
X
, 
ORDER
Ë(((
PAGE_SIZE
 << (ORDER)Ë- (XË- (
skb_sh¨ed_öfo
)Ë& ~(
SMP_CACHE_BYTES
 - 1))

	)

40 
	#SKB_MAX_HEAD
(
X
Ë(
	`SKB_MAX_ORDER
((X), 0))

	)

41 
	#SKB_MAX_ALLOC
 (
	`SKB_MAX_ORDER
(0, 2))

	)

43 
	g√t_devi˚
;

45 
	ssk_buff_hód
 {

47 
sk_buff
 *
	m√xt
;

48 
sk_buff
 *
	m¥ev
;

50 
__u32
 
	mqÀn
;

51 
•ölock_t
 
	mlock
;

54 
	gsk_buff
;

56 
	#MAX_SKB_FRAGS
 (65536/
PAGE_SIZE
 + 2)

	)

58 
skb_‰ag_°ru˘
 
	tskb_‰ag_t
;

60 
	sskb_‰ag_°ru˘
 {

61 
∑ge
 *
	m∑ge
;

62 
__u16
 
	m∑ge_off£t
;

63 
__u16
 
	msize
;

66 
	sskb_sh¨ed_öfo
 {

67 
©omic_t
 
	md©¨ef
;

68 
	mƒ_‰ags
;

69 
	mgso_size
;

71 
	mgso_£gs
;

72 
	mgso_ty≥
;

73 
	mù6_‰ag_id
;

74 
sk_buff
 *
	m‰ag_li°
;

75 
skb_‰ag_t
 
	m‰ags
[
MAX_SKB_FRAGS
];

78 
	#SKB_DATAREF_SHIFT
 16

	)

79 
	#SKB_DATAREF_MASK
 ((1 << 
SKB_DATAREF_SHIFT
Ë- 1)

	)

81 
	sskb_timevÆ
 {

82 
u32
 
	moff_£c
;

83 
u32
 
	moff_u£c
;

87 
	mSKB_FCLONE_UNAVAILABLE
,

88 
	mSKB_FCLONE_ORIG
,

89 
	mSKB_FCLONE_CLONE
,

93 
	mSKB_GSO_TCPV4
 = 1 << 0,

94 
	mSKB_GSO_UDP
 = 1 << 1,

96 
	mSKB_GSO_DODGY
 = 1 << 2,

98 
	mSKB_GSO_TCP_ECN
 = 1 << 3,

100 
	mSKB_GSO_TCPV6
 = 1 << 4,

103 
	ssk_buff
 {

105 
sk_buff
 *
	m√xt
;

106 
sk_buff
 *
	m¥ev
;

108 
sock
 *
	msk
;

109 
skb_timevÆ
 
	mt°amp
;

110 
√t_devi˚
 *
	mdev
;

111 
√t_devi˚
 *
	möput_dev
;

114 
t˝hdr
 *
	mth
;

115 
udphdr
 *
	muh
;

116 
icmphdr
 *
	micmph
;

117 
igmphdr
 *
	migmph
;

118 
ùhdr
 *
	mùùh
;

119 
ùv6hdr
 *
	mùv6h
;

120 *
	møw
;

121 } 
	mh
;

124 
ùhdr
 *
	mùh
;

125 
ùv6hdr
 *
	mùv6h
;

126 
¨phdr
 *
	m¨ph
;

127 *
	møw
;

128 } 
	mnh
;

131 *
	møw
;

132 } 
	mmac
;

134 
d°_íåy
 *
	md°
;

135 
£c_∑th
 *
	m•
;

137 
	mcb
[48];

139 
	mÀn
,

140 
	md©a_Àn
,

141 
	mmac_Àn
,

142 
	mcsum
;

143 
__u32
 
	m¥i‹ôy
;

144 
__u8
 
	mloˇl_df
:1,

145 
	m˛⁄ed
:1,

146 
	mù_summed
:2,

147 
	mnohdr
:1,

148 
	mnf˘öfo
:3;

149 
__u8
 
	mpkt_ty≥
:3,

150 
	mf˛⁄e
:2,

151 
	mùvs_¥›îty
:1;

152 
__be16
 
	m¥Ÿocﬁ
;

154 (*
	mde°ru˘‹
)(
sk_buff
 *
	mskb
);

156 
	måuesize
;

157 
©omic_t
 
	mu£rs
;

158 *
	mhód
,

159 *
	md©a
,

160 *
	mèû
,

161 *
	míd
;

	@linux/slab.h

12 #i‚de‡
_LINUX_SLAB_H


13 
	#_LINUX_SLAB_H


	)

	@linux/smb.h

12 #i‚de‡
_LINUX_SMB_H


13 
	#_LINUX_SMB_H


	)

15 
	~<löux/ty≥s.h
>

17 
	esmb_¥Ÿocﬁ
 {

18 
	mSMB_PROTOCOL_NONE
,

19 
	mSMB_PROTOCOL_CORE
,

20 
	mSMB_PROTOCOL_COREPLUS
,

21 
	mSMB_PROTOCOL_LANMAN1
,

22 
	mSMB_PROTOCOL_LANMAN2
,

23 
	mSMB_PROTOCOL_NT1


26 
	esmb_ˇ£_hndl
 {

27 
	mSMB_CASE_DEFAULT
,

28 
	mSMB_CASE_LOWER
,

29 
	mSMB_CASE_UPPER


32 
	ssmb_dsk©å
 {

33 
__u16
 
	mtŸÆ
;

34 
__u16
 
	mÆlocblocks
;

35 
__u16
 
	mblocksize
;

36 
__u16
 
	m‰ì
;

39 
	ssmb_c⁄n_›t
 {

41 
	mfd
;

43 
smb_¥Ÿocﬁ
 
	m¥Ÿocﬁ
;

44 
smb_ˇ£_hndl
 
	mˇ£_h™dlög
;

46 
__u32
 
	mmax_xmô
;

47 
__u16
 
	m£rvî_uid
;

48 
__u16
 
	mtid
;

50 
__u16
 
	m£cmode
;

51 
__u16
 
	mmaxmux
;

52 
__u16
 
	mmaxvcs
;

53 
__u16
 
	møwmode
;

54 
__u32
 
	m£sskey
;

56 
__u32
 
	mmaxøw
;

57 
__u32
 
	mˇ∑bûôõs
;

58 
__s16
 
	m£rvîz⁄e
;

	@linux/smp.h

12 #i‚de‡
__LINUX_SMP_H


13 
	#__LINUX_SMP_H


	)

15 
	#øw_smp_¥o˚ss‹_id
(Ë0

	)

16 
	#h¨d_smp_¥o˚ss‹_id
(Ë0

	)

17 
	#smp_ˇŒ_fun˘i⁄
(
func
,
öfo
,
ªåy
,
waô
Ë(
	`up_smp_ˇŒ_fun˘i⁄
())

	)

18 
	#⁄_óch_˝u
(
func
,
öfo
,
ªåy
,
waô
Ë({ 
	`loˇl_úq_dißbÀ
(); 
	`func
(öfo); 
	`loˇl_úq_íabÀ
(); 0; })

	)

19 
	#num_boŸög_˝us
(Ë1

	)

20 
	#smp_¥ï¨e_boŸ_˝u
(Ëdÿ{} 0)

	)

21 
	#smp_¥o˚ss‹_id
(Ë
	`øw_smp_¥o˚ss‹_id
()

	)

22 
	#gë_˝u
(Ë({ 
	`¥ìm±_dißbÀ
(); 
	`smp_¥o˚ss‹_id
(); })

	)

23 
	#put_˝u
(Ë
	`¥ìm±_íabÀ
()

	)

24 
	#put_˝u_no_ªsched
(Ë
	`¥ìm±_íabÀ_no_ªsched
()

	)

	@linux/smp_lock.h

12 #i‚de‡
__LINUX_SMPLOCK_H


13 
	#__LINUX_SMPLOCK_H


	)

15 
	#lock_kî√l
(Ëdÿ{ } 0)

	)

16 
	#u∆ock_kî√l
(Ëdÿ{ } 0)

	)

17 
	#ªÀa£_kî√l_lock
(
èsk
Ëdÿ{ } 0)

	)

18 
	#ªacquúe_kî√l_lock
(
èsk
Ë0

	)

19 
	#kî√l_locked
(Ë1

	)

	@linux/socket.h

12 #i‚de‡
_LINUX_SOCKET_H


13 
	#_LINUX_SOCKET_H


	)

15 
	#_K_SS_MAXSIZE
 128

	)

16 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

18 
	s__kî√l_sockaddr_°‹age
 {

19 
	mss_Ámûy
;

21 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

23 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

25 #i‡!
deföed
(
__GLIBC__
) || __GLIBC__ < 2

27 
	~<asm/sockë.h
>

28 
	~<löux/sockios.h
>

29 
	~<löux/uio.h
>

30 
	~<löux/ty≥s.h
>

31 
	~<löux/compûî.h
>

33 
	tß_Ámûy_t
;

35 
	ssockaddr
 {

36 
ß_Ámûy_t
 
	mß_Ámûy
;

37 
	mß_d©a
[14];

40 
	slögî
 {

41 
	ml_⁄off
;

42 
	ml_lögî
;

45 
	#sockaddr_°‹age
 
__kî√l_sockaddr_°‹age


	)

47 
	smsghdr
 {

48 * 
	mmsg_«me
;

49 
	mmsg_«mñí
;

50 
iovec
 * 
	mmsg_iov
;

51 
__kî√l_size_t
 
	mmsg_iovÀn
;

52 * 
	mmsg_c⁄åﬁ
;

53 
__kî√l_size_t
 
	mmsg_c⁄åﬁÀn
;

54 
	mmsg_Êags
;

57 
	scmsghdr
 {

58 
__kî√l_size_t
 
	mcmsg_Àn
;

59 
	mcmsg_Àvñ
;

60 
	mcmsg_ty≥
;

63 
	#__CMSG_NXTHDR
(
˘l
, 
Àn
, 
cmsg
Ë
	`__cmsg_nxthdr
((˘l),÷í),(cmsg))

	)

64 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`cmsg_nxthdr
((mhdr), (cmsg))

	)

66 
	#CMSG_ALIGN
(
Àn
Ë–(÷í)+()-1Ë& ~(()-1Ë)

	)

68 
	#CMSG_DATA
(
cmsg
Ë((*)((*)(cmsgË+ 
	`CMSG_ALIGN
((
cmsghdr
))))

	)

69 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ CMSG_ALIGN÷í))

	)

70 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ (Àn))

	)

72 
	#__CMSG_FIRSTHDR
(
˘l
,
Àn
Ë(÷íË>(
cmsghdr
Ë? (cmsghd∏*)(˘lË: (cmsghd∏*)
NULL
)

	)

73 
	#CMSG_FIRSTHDR
(
msg
Ë
	`__CMSG_FIRSTHDR
((msg)->
msg_c⁄åﬁ
, (msg)->
msg_c⁄åﬁÀn
)

	)

74 
	#CMSG_OK
(
mhdr
, 
cmsg
Ë((cmsg)->
cmsg_Àn
 >(
cmsghdr
Ë&& (cmsg)->cmsg_À¿<(Ë((mhdr)->
msg_c⁄åﬁÀn
 - ((*)(cmsgË- (*)(mhdr)->
msg_c⁄åﬁ
)))

	)

76 #ifde‡
__GNUC__


77 
	#__KINLINE
 
__ölöe__


	)

78 #ñi‡
deföed
(
__˝lu•lus
)

79 
	#__KINLINE
 
ölöe


	)

81 
	#__KINLINE
 

	)

84 
__KINLINE
 
cmsghdr
 * 
	$__cmsg_nxthdr
(*
__˘l
, 
__kî√l_size_t
 
__size
,

85 
cmsghdr
 *
__cmsg
)

87 
cmsghdr
 * 
__±r
;

89 
__±r
 = (
cmsghdr
*)(((*Ë
__cmsg
Ë+ 
	`CMSG_ALIGN
(__cmsg->
cmsg_Àn
));

90 i‡(()((*)(
__±r
+1Ë- (*Ë
__˘l
Ë> 
__size
)

91  (
cmsghdr
 *)0;

93  
__±r
;

94 
	}
}

96 
__KINLINE
 
cmsghdr
 * 
	$cmsg_nxthdr
 (
msghdr
 *
__msg
, 
cmsghdr
 *
__cmsg
)

98  
	`__cmsg_nxthdr
(
__msg
->
msg_c⁄åﬁ
, __msg->
msg_c⁄åﬁÀn
, 
__cmsg
);

99 
	}
}

101 
	#SCM_RIGHTS
 0x01

	)

102 
	#SCM_CREDENTIALS
 0x02

	)

103 
	#SCM_SECURITY
 0x03

	)

105 
	su¸ed
 {

106 
__u32
 
	mpid
;

107 
__u32
 
	muid
;

108 
__u32
 
	mgid
;

111 
	#AF_UNSPEC
 0

	)

112 
	#AF_UNIX
 1

	)

113 
	#AF_LOCAL
 1

	)

114 
	#AF_INET
 2

	)

115 
	#AF_AX25
 3

	)

116 
	#AF_IPX
 4

	)

117 
	#AF_APPLETALK
 5

	)

118 
	#AF_NETROM
 6

	)

119 
	#AF_BRIDGE
 7

	)

120 
	#AF_ATMPVC
 8

	)

121 
	#AF_X25
 9

	)

122 
	#AF_INET6
 10

	)

123 
	#AF_ROSE
 11

	)

124 
	#AF_DEC√t
 12

	)

125 
	#AF_NETBEUI
 13

	)

126 
	#AF_SECURITY
 14

	)

127 
	#AF_KEY
 15

	)

128 
	#AF_NETLINK
 16

	)

129 
	#AF_ROUTE
 
AF_NETLINK


	)

130 
	#AF_PACKET
 17

	)

131 
	#AF_ASH
 18

	)

132 
	#AF_ECONET
 19

	)

133 
	#AF_ATMSVC
 20

	)

134 
	#AF_SNA
 22

	)

135 
	#AF_IRDA
 23

	)

136 
	#AF_PPPOX
 24

	)

137 
	#AF_WANPIPE
 25

	)

138 
	#AF_LLC
 26

	)

139 
	#AF_TIPC
 30

	)

140 
	#AF_BLUETOOTH
 31

	)

141 
	#AF_MAX
 32

	)

143 
	#PF_UNSPEC
 
AF_UNSPEC


	)

144 
	#PF_UNIX
 
AF_UNIX


	)

145 
	#PF_LOCAL
 
AF_LOCAL


	)

146 
	#PF_INET
 
AF_INET


	)

147 
	#PF_AX25
 
AF_AX25


	)

148 
	#PF_IPX
 
AF_IPX


	)

149 
	#PF_APPLETALK
 
AF_APPLETALK


	)

150 
	#PF_NETROM
 
AF_NETROM


	)

151 
	#PF_BRIDGE
 
AF_BRIDGE


	)

152 
	#PF_ATMPVC
 
AF_ATMPVC


	)

153 
	#PF_X25
 
AF_X25


	)

154 
	#PF_INET6
 
AF_INET6


	)

155 
	#PF_ROSE
 
AF_ROSE


	)

156 
	#PF_DEC√t
 
AF_DEC√t


	)

157 
	#PF_NETBEUI
 
AF_NETBEUI


	)

158 
	#PF_SECURITY
 
AF_SECURITY


	)

159 
	#PF_KEY
 
AF_KEY


	)

160 
	#PF_NETLINK
 
AF_NETLINK


	)

161 
	#PF_ROUTE
 
AF_ROUTE


	)

162 
	#PF_PACKET
 
AF_PACKET


	)

163 
	#PF_ASH
 
AF_ASH


	)

164 
	#PF_ECONET
 
AF_ECONET


	)

165 
	#PF_ATMSVC
 
AF_ATMSVC


	)

166 
	#PF_SNA
 
AF_SNA


	)

167 
	#PF_IRDA
 
AF_IRDA


	)

168 
	#PF_PPPOX
 
AF_PPPOX


	)

169 
	#PF_WANPIPE
 
AF_WANPIPE


	)

170 
	#PF_LLC
 
AF_LLC


	)

171 
	#PF_TIPC
 
AF_TIPC


	)

172 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

173 
	#PF_MAX
 
AF_MAX


	)

175 
	#SOMAXCONN
 128

	)

177 
	#MSG_OOB
 1

	)

178 
	#MSG_PEEK
 2

	)

179 
	#MSG_DONTROUTE
 4

	)

180 
	#MSG_TRYHARD
 4

	)

181 
	#MSG_CTRUNC
 8

	)

182 
	#MSG_PROBE
 0x10

	)

183 
	#MSG_TRUNC
 0x20

	)

184 
	#MSG_DONTWAIT
 0x40

	)

185 
	#MSG_EOR
 0x80

	)

186 
	#MSG_WAITALL
 0x100

	)

187 
	#MSG_FIN
 0x200

	)

188 
	#MSG_SYN
 0x400

	)

189 
	#MSG_CONFIRM
 0x800

	)

190 
	#MSG_RST
 0x1000

	)

191 
	#MSG_ERRQUEUE
 0x2000

	)

192 
	#MSG_NOSIGNAL
 0x4000

	)

193 
	#MSG_MORE
 0x8000

	)

195 
	#MSG_EOF
 
MSG_FIN


	)

197 
	#MSG_CMSG_COMPAT
 0

	)

199 
	#SOL_IP
 0

	)

201 
	#SOL_TCP
 6

	)

202 
	#SOL_UDP
 17

	)

203 
	#SOL_IPV6
 41

	)

204 
	#SOL_ICMPV6
 58

	)

205 
	#SOL_SCTP
 132

	)

206 
	#SOL_RAW
 255

	)

207 
	#SOL_IPX
 256

	)

208 
	#SOL_AX25
 257

	)

209 
	#SOL_ATALK
 258

	)

210 
	#SOL_NETROM
 259

	)

211 
	#SOL_ROSE
 260

	)

212 
	#SOL_DECNET
 261

	)

213 
	#SOL_X25
 262

	)

214 
	#SOL_PACKET
 263

	)

215 
	#SOL_ATM
 264

	)

216 
	#SOL_AAL
 265

	)

217 
	#SOL_IRDA
 266

	)

218 
	#SOL_NETBEUI
 267

	)

219 
	#SOL_LLC
 268

	)

220 
	#SOL_DCCP
 269

	)

221 
	#SOL_NETLINK
 270

	)

222 
	#SOL_TIPC
 271

	)

224 
	#IPX_TYPE
 1

	)

	@linux/sockios.h

12 #i‚de‡
_LINUX_SOCKIOS_H


13 
	#_LINUX_SOCKIOS_H


	)

15 
	~<asm/sockios.h
>

17 
	#SIOCINQ
 
FIONREAD


	)

18 
	#SIOCOUTQ
 
TIOCOUTQ


	)

20 
	#SIOCADDRT
 0x890B

	)

21 
	#SIOCDELRT
 0x890C

	)

22 
	#SIOCRTMSG
 0x890D

	)

24 
	#SIOCGIFNAME
 0x8910

	)

25 
	#SIOCSIFLINK
 0x8911

	)

26 
	#SIOCGIFCONF
 0x8912

	)

27 
	#SIOCGIFFLAGS
 0x8913

	)

28 
	#SIOCSIFFLAGS
 0x8914

	)

29 
	#SIOCGIFADDR
 0x8915

	)

30 
	#SIOCSIFADDR
 0x8916

	)

31 
	#SIOCGIFDSTADDR
 0x8917

	)

32 
	#SIOCSIFDSTADDR
 0x8918

	)

33 
	#SIOCGIFBRDADDR
 0x8919

	)

34 
	#SIOCSIFBRDADDR
 0x891a

	)

35 
	#SIOCGIFNETMASK
 0x891b

	)

36 
	#SIOCSIFNETMASK
 0x891c

	)

37 
	#SIOCGIFMETRIC
 0x891d

	)

38 
	#SIOCSIFMETRIC
 0x891e

	)

39 
	#SIOCGIFMEM
 0x891f

	)

40 
	#SIOCSIFMEM
 0x8920

	)

41 
	#SIOCGIFMTU
 0x8921

	)

42 
	#SIOCSIFMTU
 0x8922

	)

43 
	#SIOCSIFNAME
 0x8923

	)

44 
	#SIOCSIFHWADDR
 0x8924

	)

45 
	#SIOCGIFENCAP
 0x8925

	)

46 
	#SIOCSIFENCAP
 0x8926

	)

47 
	#SIOCGIFHWADDR
 0x8927

	)

48 
	#SIOCGIFSLAVE
 0x8929

	)

49 
	#SIOCSIFSLAVE
 0x8930

	)

50 
	#SIOCADDMULTI
 0x8931

	)

51 
	#SIOCDELMULTI
 0x8932

	)

52 
	#SIOCGIFINDEX
 0x8933

	)

53 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

54 
	#SIOCSIFPFLAGS
 0x8934

	)

55 
	#SIOCGIFPFLAGS
 0x8935

	)

56 
	#SIOCDIFADDR
 0x8936

	)

57 
	#SIOCSIFHWBROADCAST
 0x8937

	)

58 
	#SIOCGIFCOUNT
 0x8938

	)

59 
	#SIOCKILLADDR
 0x8939

	)

61 
	#SIOCGIFBR
 0x8940

	)

62 
	#SIOCSIFBR
 0x8941

	)

64 
	#SIOCGIFTXQLEN
 0x8942

	)

65 
	#SIOCSIFTXQLEN
 0x8943

	)

67 
	#SIOCETHTOOL
 0x8946

	)

69 
	#SIOCGMIIPHY
 0x8947

	)

70 
	#SIOCGMIIREG
 0x8948

	)

71 
	#SIOCSMIIREG
 0x8949

	)

73 
	#SIOCWANDEV
 0x894A

	)

75 
	#SIOCDARP
 0x8953

	)

76 
	#SIOCGARP
 0x8954

	)

77 
	#SIOCSARP
 0x8955

	)

79 
	#SIOCDRARP
 0x8960

	)

80 
	#SIOCGRARP
 0x8961

	)

81 
	#SIOCSRARP
 0x8962

	)

83 
	#SIOCGIFMAP
 0x8970

	)

84 
	#SIOCSIFMAP
 0x8971

	)

86 
	#SIOCADDDLCI
 0x8980

	)

87 
	#SIOCDELDLCI
 0x8981

	)

89 
	#SIOCGIFVLAN
 0x8982

	)

90 
	#SIOCSIFVLAN
 0x8983

	)

92 
	#SIOCBONDENSLAVE
 0x8990

	)

93 
	#SIOCBONDRELEASE
 0x8991

	)

94 
	#SIOCBONDSETHWADDR
 0x8992

	)

95 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

96 
	#SIOCBONDINFOQUERY
 0x8994

	)

97 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

99 
	#SIOCBRADDBR
 0x89a0

	)

100 
	#SIOCBRDELBR
 0x89a1

	)

101 
	#SIOCBRADDIF
 0x89a2

	)

102 
	#SIOCBRDELIF
 0x89a3

	)

104 
	#SIOCDEVPRIVATE
 0x89F0

	)

106 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@linux/soundcard.h

12 #i‚de‡
SOUNDCARD_H


13 
	#SOUNDCARD_H


	)

15 
	#SOUND_VERSION
 0x030802

	)

16 
	#OPEN_SOUND_SYSTEM


	)

18 
	~<löux/io˘l.h
>

20 
	~<ídün.h
>

22 
	#SNDCARD_ADLIB
 1

	)

23 
	#SNDCARD_SB
 2

	)

24 
	#SNDCARD_PAS
 3

	)

25 
	#SNDCARD_GUS
 4

	)

26 
	#SNDCARD_MPU401
 5

	)

27 
	#SNDCARD_SB16
 6

	)

28 
	#SNDCARD_SB16MIDI
 7

	)

29 
	#SNDCARD_UART6850
 8

	)

30 
	#SNDCARD_GUS16
 9

	)

31 
	#SNDCARD_MSS
 10

	)

32 
	#SNDCARD_PSS
 11

	)

33 
	#SNDCARD_SSCAPE
 12

	)

34 
	#SNDCARD_PSS_MPU
 13

	)

35 
	#SNDCARD_PSS_MSS
 14

	)

36 
	#SNDCARD_SSCAPE_MSS
 15

	)

37 
	#SNDCARD_TRXPRO
 16

	)

38 
	#SNDCARD_TRXPRO_SB
 17

	)

39 
	#SNDCARD_TRXPRO_MPU
 18

	)

40 
	#SNDCARD_MAD16
 19

	)

41 
	#SNDCARD_MAD16_MPU
 20

	)

42 
	#SNDCARD_CS4232
 21

	)

43 
	#SNDCARD_CS4232_MPU
 22

	)

44 
	#SNDCARD_MAUI
 23

	)

45 
	#SNDCARD_PSEUDO_MSS
 24

	)

46 
	#SNDCARD_GUSPNP
 25

	)

47 
	#SNDCARD_UART401
 26

	)

49 #i‚de‡
_SIOWR


50 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| !deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
))

52 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

53 
	#SIOC_VOID
 
IOC_VOID


	)

54 
	#SIOC_OUT
 
IOC_OUT


	)

55 
	#SIOC_IN
 
IOC_IN


	)

56 
	#SIOC_INOUT
 
IOC_INOUT


	)

57 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

58 
	#_SIOC_DIR
 
_IOC_DIR


	)

59 
	#_SIOC_NONE
 
_IOC_NONE


	)

60 
	#_SIOC_READ
 
_IOC_READ


	)

61 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

62 
	#_SIO
 
_IO


	)

63 
	#_SIOR
 
_IOR


	)

64 
	#_SIOW
 
_IOW


	)

65 
	#_SIOWR
 
_IOWR


	)

68 
	#SIOCPARM_MASK
 0x1fff

	)

69 
	#SIOC_VOID
 0x00000000

	)

70 
	#SIOC_OUT
 0x20000000

	)

71 
	#SIOC_IN
 0x40000000

	)

72 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

74 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

75 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

76 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

78 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

79 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

80 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

81 
	#_SIOC_NONE
 
SIOC_VOID


	)

82 
	#_SIOC_READ
 
SIOC_OUT


	)

83 
	#_SIOC_WRITE
 
SIOC_IN


	)

87 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

88 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

89 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

90 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, )

	)

91 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

92 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

93 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

94 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
)

	)

95 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

96 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

97 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

98 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

99 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

100 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

101 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, )

	)

102 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, )

	)

103 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

104 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

105 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

106 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

107 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

108 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

110 
	ssy¡h_c⁄åﬁ


112 
	mdevno
;

113 
	md©a
[4000];

114 }
	tsy¡h_c⁄åﬁ
;

116 
	sªmove_ßm∂e


118 
	mdevno
;

119 
	mb™kno
;

120 
	mö°∫o
;

121 } 
	tªmove_ßm∂e
;

123 
	s£q_evít_ªc
 {

124 
	m¨r
[8];

125 } 
	t£q_evít_ªc
;

127 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

128 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

129 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

130 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

131 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

132 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

133 
	#TMR_INTERNAL
 0x00000001

	)

134 
	#TMR_EXTERNAL
 0x00000002

	)

135 
	#TMR_MODE_MIDI
 0x00000010

	)

136 
	#TMR_MODE_FSK
 0x00000020

	)

137 
	#TMR_MODE_CLS
 0x00000040

	)

138 
	#TMR_MODE_SMPTE
 0x00000080

	)

139 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

140 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

142 
	#_LINUX_PATCHKEY_H_INDIRECT


	)

143 
	~<löux/∑tchkey.h
>

144 #unde‡
_LINUX_PATCHKEY_H_INDIRECT


146 #ifde‡
__BYTE_ORDER


147 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


148 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

149 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


150 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

156 
	s∑tch_öfo
 {

157 
	mkey
;

158 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

159 
	#GUS_PATCH
 
WAVE_PATCH


	)

160 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

162 
	mdevi˚_no
;

163 
	mö°r_no
;

165 
	mmode
;

167 
	#WAVE_16_BITS
 0x01

	)

168 
	#WAVE_UNSIGNED
 0x02

	)

169 
	#WAVE_LOOPING
 0x04

	)

170 
	#WAVE_BIDIR_LOOP
 0x08

	)

171 
	#WAVE_LOOP_BACK
 0x10

	)

172 
	#WAVE_SUSTAIN_ON
 0x20

	)

173 
	#WAVE_ENVELOPES
 0x40

	)

174 
	#WAVE_FAST_RELEASE
 0x80

	)

176 
	#WAVE_VIBRATO
 0x00010000

	)

177 
	#WAVE_TREMOLO
 0x00020000

	)

178 
	#WAVE_SCALE
 0x00040000

	)

179 
	#WAVE_FRACTIONS
 0x00080000

	)

181 
	#WAVE_ROM
 0x40000000

	)

182 
	#WAVE_MULAW
 0x20000000

	)

184 
	mÀn
;

185 
	mlo›_°¨t
, 
	mlo›_íd
;

187 
	mba£_‰eq
;

188 
	mba£_nŸe
;

189 
	mhigh_nŸe
;

190 
	mlow_nŸe
;

191 
	m∑¬ög
;

192 
	mdëunög
;

194 
	mív_øã
[ 6 ];

195 
	mív_off£t
[ 6 ];

197 
	måemﬁo_swìp
;

198 
	måemﬁo_øã
;

199 
	måemﬁo_dïth
;

201 
	mvibøto_swìp
;

202 
	mvibøto_øã
;

203 
	mvibøto_dïth
;

205 
	msˇÀ_‰equícy
;

206 
	msˇÀ_Á˘‹
;

208 
	mvﬁume
;

209 
	m‰a˘i⁄s
;

210 
	mª£rved1
;

211 
	m•¨e
[2];

212 
	md©a
[1];

215 
	ssy£x_öfo
 {

216 
	mkey
;

217 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

218 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

219 
	mdevi˚_no
;

220 
	mÀn
;

221 
	md©a
[1];

224 
	#SEQ_NOTEOFF
 0

	)

225 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

226 
	#SEQ_NOTEON
 1

	)

227 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

228 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

229 
	#SEQ_PGMCHANGE
 3

	)

230 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

231 
	#SEQ_SYNCTIMER
 
TMR_START


	)

232 
	#SEQ_MIDIPUTC
 5

	)

233 
	#SEQ_DRUMON
 6

	)

234 
	#SEQ_DRUMOFF
 7

	)

235 
	#SEQ_ECHO
 
TMR_ECHO


	)

236 
	#SEQ_AFTERTOUCH
 9

	)

237 
	#SEQ_CONTROLLER
 10

	)

239 
	#CTL_BANK_SELECT
 0x00

	)

240 
	#CTL_MODWHEEL
 0x01

	)

241 
	#CTL_BREATH
 0x02

	)

243 
	#CTL_FOOT
 0x04

	)

244 
	#CTL_PORTAMENTO_TIME
 0x05

	)

245 
	#CTL_DATA_ENTRY
 0x06

	)

246 
	#CTL_MAIN_VOLUME
 0x07

	)

247 
	#CTL_BALANCE
 0x08

	)

249 
	#CTL_PAN
 0x0a

	)

250 
	#CTL_EXPRESSION
 0x0b

	)

252 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

253 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

254 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

255 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

257 
	#CTL_DAMPER_PEDAL
 0x40

	)

258 
	#CTL_SUSTAIN
 0x40

	)

259 
	#CTL_HOLD
 0x40

	)

260 
	#CTL_PORTAMENTO
 0x41

	)

261 
	#CTL_SOSTENUTO
 0x42

	)

262 
	#CTL_SOFT_PEDAL
 0x43

	)

264 
	#CTL_HOLD2
 0x45

	)

266 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

267 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

268 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

269 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

271 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

272 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

273 
	#CTL_CHORUS_DEPTH
 0x5d

	)

274 
	#CTL_DETUNE_DEPTH
 0x5e

	)

275 
	#CTL_CELESTE_DEPTH
 0x5e

	)

276 
	#CTL_PHASER_DEPTH
 0x5f

	)

277 
	#CTL_DATA_INCREMENT
 0x60

	)

278 
	#CTL_DATA_DECREMENT
 0x61

	)

279 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

280 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

281 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

282 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

284 
	#CTRL_PITCH_BENDER
 255

	)

285 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

286 
	#CTRL_EXPRESSION
 253

	)

287 
	#CTRL_MAIN_VOLUME
 252

	)

288 
	#SEQ_BALANCE
 11

	)

289 
	#SEQ_VOLMODE
 12

	)

291 
	#VOL_METHOD_ADAGIO
 1

	)

292 
	#VOL_METHOD_LINEAR
 2

	)

294 
	#SEQ_FULLSIZE
 0xfd

	)

296 
	#SEQ_PRIVATE
 0x„

	)

297 
	#SEQ_EXTENDED
 0xff

	)

299 
	tsbi_ö°r_d©a
[32];

301 
	ssbi_ö°rumít
 {

302 
	mkey
;

303 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

304 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

305 
	mdevi˚
;

306 
	mch™√l
;

307 
sbi_ö°r_d©a
 
	m›î©‹s
;

310 
	ssy¡h_öfo
 {

311 
	m«me
[30];

312 
	mdevi˚
;

313 
	msy¡h_ty≥
;

314 
	#SYNTH_TYPE_FM
 0

	)

315 
	#SYNTH_TYPE_SAMPLE
 1

	)

316 
	#SYNTH_TYPE_MIDI
 2

	)

318 
	msy¡h_subty≥
;

319 
	#FM_TYPE_ADLIB
 0x00

	)

320 
	#FM_TYPE_OPL3
 0x01

	)

321 
	#MIDI_TYPE_MPU401
 0x401

	)

323 
	#SAMPLE_TYPE_BASIC
 0x10

	)

324 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

325 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

327 
	m≥rc_mode
;

328 
	mƒ_voi˚s
;

329 
	mƒ_drums
;

330 
	mö°r_b™k_size
;

331 
	mˇ∑bûôõs
;

332 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

333 
	#SYNTH_CAP_OPL3
 0x00000002

	)

334 
	#SYNTH_CAP_INPUT
 0x00000004

	)

335 
	mdummõs
[19];

338 
	ssound_timî_öfo
 {

339 
	m«me
[32];

340 
	mˇps
;

343 
	#MIDI_CAP_MPU401
 1

	)

345 
	smidi_öfo
 {

346 
	m«me
[30];

347 
	mdevi˚
;

348 
	mˇ∑bûôõs
;

349 
	mdev_ty≥
;

350 
	mdummõs
[18];

354 
	mcmd
;

355 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

356 
	md©a
[30];

357 } 
	tmpu_comm™d_ªc
;

359 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

360 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

361 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

363 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

364 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

365 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

366 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

367 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

368 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

369 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

370 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

371 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

372 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

373 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

374 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

376 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, )

	)

377 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, )

	)

378 
	#AFMT_QUERY
 0x00000000

	)

379 
	#AFMT_MU_LAW
 0x00000001

	)

380 
	#AFMT_A_LAW
 0x00000002

	)

381 
	#AFMT_IMA_ADPCM
 0x00000004

	)

382 
	#AFMT_U8
 0x00000008

	)

383 
	#AFMT_S16_LE
 0x00000010

	)

384 
	#AFMT_S16_BE
 0x00000020

	)

385 
	#AFMT_S8
 0x00000040

	)

386 
	#AFMT_U16_LE
 0x00000080

	)

387 
	#AFMT_U16_BE
 0x00000100

	)

388 
	#AFMT_MPEG
 0x00000200

	)

389 
	#AFMT_AC3
 0x00000400

	)

391 
	saudio_buf_öfo
 {

392 
	m‰agmíts
;

393 
	m‰ag°ŸÆ
;

394 
	m‰agsize
;

396 
	mbyãs
;

398 } 
	taudio_buf_öfo
;

400 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

401 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

402 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

403 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

404 
	#DSP_CAP_REVISION
 0x000000ff

	)

405 
	#DSP_CAP_DUPLEX
 0x00000100

	)

406 
	#DSP_CAP_REALTIME
 0x00000200

	)

407 
	#DSP_CAP_BATCH
 0x00000400

	)

409 
	#DSP_CAP_COPROC
 0x00000800

	)

411 
	#DSP_CAP_TRIGGER
 0x00001000

	)

412 
	#DSP_CAP_MMAP
 0x00002000

	)

413 
	#DSP_CAP_MULTI
 0x00004000

	)

414 
	#DSP_CAP_BIND
 0x00008000

	)

416 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

417 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

418 
	#PCM_ENABLE_INPUT
 0x00000001

	)

419 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

421 
	scou¡_öfo
 {

422 
	mbyãs
;

423 
	mblocks
;

424 
	m±r
;

425 } 
	tcou¡_öfo
;

427 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

428 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

430 
	sbuffmem_desc
 {

431 *
	mbuf„r
;

432 
	msize
;

433 } 
	tbuffmem_desc
;

434 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

435 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

436 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

437 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

438 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

440 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

441 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

442 
	#DSP_BIND_QUERY
 0x00000000

	)

443 
	#DSP_BIND_FRONT
 0x00000001

	)

444 
	#DSP_BIND_SURR
 0x00000002

	)

445 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

446 
	#DSP_BIND_HANDSET
 0x00000008

	)

447 
	#DSP_BIND_MIC
 0x00000010

	)

448 
	#DSP_BIND_MODEM1
 0x00000020

	)

449 
	#DSP_BIND_MODEM2
 0x00000040

	)

450 
	#DSP_BIND_I2S
 0x00000080

	)

451 
	#DSP_BIND_SPDIF
 0x00000100

	)

453 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

454 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

455 
	#SPDIF_PRO
 0x0001

	)

456 
	#SPDIF_N_AUD
 0x0002

	)

457 
	#SPDIF_COPY
 0x0004

	)

458 
	#SPDIF_PRE
 0x0008

	)

459 
	#SPDIF_CC
 0x07f0

	)

460 
	#SPDIF_L
 0x0800

	)

461 
	#SPDIF_DRS
 0x4000

	)

462 
	#SPDIF_V
 0x8000

	)

464 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

465 
	#APF_NORMAL
 0

	)

466 
	#APF_NETWORK
 1

	)

467 
	#APF_CPUINTENS
 2

	)

469 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

470 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

471 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

472 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

474 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

475 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

476 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

477 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

478 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

479 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

480 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

481 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

482 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

483 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

484 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

485 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

486 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

487 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

488 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

489 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

490 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

491 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

492 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

493 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

495 
	sc›r_buf„r
 {

496 
	mcomm™d
;

497 
	mÊags
;

498 
	#CPF_NONE
 0x0000

	)

499 
	#CPF_FIRST
 0x0001

	)

500 
	#CPF_LAST
 0x0002

	)

501 
	mÀn
;

502 
	moffs
;

504 
	md©a
[4000];

505 } 
	tc›r_buf„r
;

507 
	sc›r_debug_buf
 {

508 
	mcomm™d
;

509 
	m∑rm1
;

510 
	m∑rm2
;

511 
	mÊags
;

512 
	mÀn
;

513 } 
	tc›r_debug_buf
;

515 
	sc›r_msg
 {

516 
	mÀn
;

517 
	md©a
[4000];

518 } 
	tc›r_msg
;

520 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

521 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

522 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

523 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

524 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

525 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

526 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

527 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

528 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

529 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

531 
	#SOUND_MIXER_NRDEVICES
 25

	)

532 
	#SOUND_MIXER_VOLUME
 0

	)

533 
	#SOUND_MIXER_BASS
 1

	)

534 
	#SOUND_MIXER_TREBLE
 2

	)

535 
	#SOUND_MIXER_SYNTH
 3

	)

536 
	#SOUND_MIXER_PCM
 4

	)

537 
	#SOUND_MIXER_SPEAKER
 5

	)

538 
	#SOUND_MIXER_LINE
 6

	)

539 
	#SOUND_MIXER_MIC
 7

	)

540 
	#SOUND_MIXER_CD
 8

	)

541 
	#SOUND_MIXER_IMIX
 9

	)

542 
	#SOUND_MIXER_ALTPCM
 10

	)

543 
	#SOUND_MIXER_RECLEV
 11

	)

544 
	#SOUND_MIXER_IGAIN
 12

	)

545 
	#SOUND_MIXER_OGAIN
 13

	)

547 
	#SOUND_MIXER_LINE1
 14

	)

548 
	#SOUND_MIXER_LINE2
 15

	)

549 
	#SOUND_MIXER_LINE3
 16

	)

550 
	#SOUND_MIXER_DIGITAL1
 17

	)

551 
	#SOUND_MIXER_DIGITAL2
 18

	)

552 
	#SOUND_MIXER_DIGITAL3
 19

	)

553 
	#SOUND_MIXER_PHONEIN
 20

	)

554 
	#SOUND_MIXER_PHONEOUT
 21

	)

555 
	#SOUND_MIXER_VIDEO
 22

	)

556 
	#SOUND_MIXER_RADIO
 23

	)

557 
	#SOUND_MIXER_MONITOR
 24

	)

559 
	#SOUND_ONOFF_MIN
 28

	)

560 
	#SOUND_ONOFF_MAX
 30

	)

562 
	#SOUND_MIXER_NONE
 31

	)

564 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

565 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

566 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

568 
	#SOUND_DEVICE_LABELS
 {"Vﬁ ", "Bas†", "Tªbl", "Sy¡h", "Pcm ", "Spk∏", "Löê", "Mi¯ ", "CD ", "Mix ", "Pcm2 ", "Re¯ ", "IGaö", "OGaö", "Löe1", "Löe2", "Löe3", "DigôÆ1", "DigôÆ2", "DigôÆ3", "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

570 
	#SOUND_DEVICE_NAMES
 {"vﬁ", "bass", "åebÀ", "sy¡h", "pcm", "•ókî", "löe", "mic", "cd", "mix", "pcm2", "ªc", "igaö", "ogaö", "löe1", "löe2", "löe3", "dig1", "dig2", "dig3", "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

572 
	#SOUND_MIXER_RECSRC
 0xff

	)

573 
	#SOUND_MIXER_DEVMASK
 0x„

	)

574 
	#SOUND_MIXER_RECMASK
 0xfd

	)

575 
	#SOUND_MIXER_CAPS
 0xfc

	)

576 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

577 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

578 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

579 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

581 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

582 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

583 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

584 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

585 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

586 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

587 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

588 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

589 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

590 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

591 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

592 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

593 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

594 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

595 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

596 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

597 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

598 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

599 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

600 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

601 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

602 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

603 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

604 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

605 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

607 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

608 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

609 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

611 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

612 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

613 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

614 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

615 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

616 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

617 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

618 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

619 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

620 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

621 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

622 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

623 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

624 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

625 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

626 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

627 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

628 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

630 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

631 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

632 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

634 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

635 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

636 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

637 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

638 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

640 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

641 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

642 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

643 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

644 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

645 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

646 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

647 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

648 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

649 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

650 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

651 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

652 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

653 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

654 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

655 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

656 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

657 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

659 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

660 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

661 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

663 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

665 
	smixî_öfo


667 
	mid
[16];

668 
	m«me
[32];

669 
	mmodify_cou¡î
;

670 
	mfûÀrs
[10];

671 } 
	tmixî_öfo
;

673 
	s_ﬁd_mixî_öfo


675 
	mid
[16];

676 
	m«me
[32];

677 } 
	t_ﬁd_mixî_öfo
;

679 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

680 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

682 
	tmixî_ªc‹d
[128];

684 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

686 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

687 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

689 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

690 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

691 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

692 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

693 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

695 
	smixî_vﬁ_èbÀ
 {

696 
	mnum
;

697 
	m«me
[32];

698 
	mÀvñs
[32];

699 } 
	tmixî_vﬁ_èbÀ
;

701 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

702 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

704 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

706 
	#EV_SEQ_LOCAL
 0x80

	)

707 
	#EV_TIMING
 0x81

	)

708 
	#EV_CHN_COMMON
 0x92

	)

709 
	#EV_CHN_VOICE
 0x93

	)

710 
	#EV_SYSEX
 0x94

	)

712 
	#MIDI_NOTEOFF
 0x80

	)

713 
	#MIDI_NOTEON
 0x90

	)

714 
	#MIDI_KEY_PRESSURE
 0xA0

	)

716 
	#MIDI_CTL_CHANGE
 0xB0

	)

717 
	#MIDI_PGM_CHANGE
 0xC0

	)

718 
	#MIDI_CHN_PRESSURE
 0xD0

	)

719 
	#MIDI_PITCH_BEND
 0xE0

	)

721 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

723 
	#TMR_WAIT_REL
 1

	)

724 
	#TMR_WAIT_ABS
 2

	)

725 
	#TMR_STOP
 3

	)

726 
	#TMR_START
 4

	)

727 
	#TMR_CONTINUE
 5

	)

728 
	#TMR_TEMPO
 6

	)

729 
	#TMR_ECHO
 8

	)

730 
	#TMR_CLOCK
 9

	)

731 
	#TMR_SPP
 10

	)

732 
	#TMR_TIMESIG
 11

	)

734 
	#LOCL_STARTAUDIO
 1

	)

736 #i‡!
deföed
(
__KERNEL__
Ë&& !deföed(
KERNEL
Ë&& !deföed(
INKERNEL
Ë&& !deföed(
_KERNEL
Ë|| deföed(
USE_SEQ_MACROS
)

738 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

740 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

741 #ifde‡
OSSLIB


742 
	#SEQ_USE_EXTBUF
(Ë*
_£qbuf
; 
_£qbuÊí
;
_£qbuÂå


	)

743 
	#SEQ_DEFINEBUF
(
Àn
Ë
	`SEQ_USE_EXTBUF
();
_ªque°ed_£qbuÊí
=
	)
len

744 
	#_SEQ_ADVBUF
(
Àn
Ë
	`OSS_£q_advbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

745 
	#_SEQ_NEEDBUF
(
Àn
Ë
	`OSS_£q_√edbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

746 
	#SEQ_DUMPBUF
(Ë
	`OSS_£qbuf_dump
(
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

748 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
Ë
	`OSS_∑tch_ˇchög
(dev, -1, in°r, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

749 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
Ë
	`OSS_drum_ˇchög
(dev, -1, drum, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

752 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

753 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

755 
	#SEQ_USE_EXTBUF
(Ë
_£qbuf
[]; 
_£qbuÊí
;
_£qbuÂå


	)

757 #i‚de‡
USE_SIMPLE_MACROS


759 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

760 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

761 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

762 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

765 
	#_SEQ_NEEDBUF
(
Àn
)

	)

769 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8); 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
; _£qbuf[_£qbuÂå+1] = 
SEQ_VOLMODE
; _£qbuf[_£qbuÂå+2] = (dev); _£qbuf[_£qbuÂå+3] = (mode); _£qbuf[_£qbuÂå+4] = 0; _£qbuf[_£qbuÂå+5] = 0; _£qbuf[_£qbuÂå+6] = 0; _£qbuf[_£qbuÂå+7] = 0; 
	`_SEQ_ADVBUF
(8);}

	)

771 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8); 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
; _£qbuf[_£qbuÂå+1] = (dev); _£qbuf[_£qbuÂå+2] = (evít); _£qbuf[_£qbuÂå+3] = (chn); _£qbuf[_£qbuÂå+4] = (nŸe); _£qbuf[_£qbuÂå+5] = (∑rm); _£qbuf[_£qbuÂå+6] = (0); _£qbuf[_£qbuÂå+7] = 0; 
	`_SEQ_ADVBUF
(8);}

	)

773 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
Ë
	`_CHN_VOICE
(dev, 
MIDI_NOTEON
, chn,ÇŸe, vﬁ)

	)

775 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
Ë
	`_CHN_VOICE
(dev, 
MIDI_NOTEOFF
, chn,ÇŸe, vﬁ)

	)

777 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
Ë
	`_CHN_VOICE
(dev, 
MIDI_KEY_PRESSURE
, chn,ÇŸe,Öªssuª)

	)

779 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
Ë{
	`_SEQ_NEEDBUF
(8); 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
; _£qbuf[_£qbuÂå+1] = (dev); _£qbuf[_£qbuÂå+2] = (evít); _£qbuf[_£qbuÂå+3] = (chn); _£qbuf[_£qbuÂå+4] = (p1); _£qbuf[_£qbuÂå+5] = (p2); *(*)&_£qbuf[_£qbuÂå+6] = (w14); 
	`_SEQ_ADVBUF
(8);}

	)

781 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
Ë{
ii
, 
Œ
=÷í); *
buÂ
=buf; i‡÷l>6Ól=6; 
	`_SEQ_NEEDBUF
(8); 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
; _£qbuf[_£qbuÂå+1] = (dev); ii=0;ii<Œ;ii++Ë_£qbuf[_£qbuÂå+ii+2] = buÂ[ii]; iiˆl;ii<6;ii++Ë_£qbuf[_£qbuÂå+ii+2] = 0xff; 
	`_SEQ_ADVBUF
(8);}

	)

783 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
Ë
	`_CHN_COMMON
(dev, 
MIDI_CHN_PRESSURE
, chn,Öªssuª, 0, 0)

	)

785 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

786 #ifde‡
OSSLIB


787 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
Ë{
	`OSS_∑tch_ˇchög
(dev, chn,Ö©ch, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
); 
	`_CHN_COMMON
(dev, 
MIDI_PGM_CHANGE
, chn,Ö©ch, 0, 0);}

	)

789 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
Ë
	`_CHN_COMMON
(dev, 
MIDI_PGM_CHANGE
, chn,Ö©ch, 0, 0)

	)

792 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
Ë
	`_CHN_COMMON
(dev, 
MIDI_CTL_CHANGE
, chn, c⁄åﬁÀr, 0, vÆue)

	)

794 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
Ë
	`_CHN_COMMON
(dev, 
MIDI_PITCH_BEND
, chn, 0, 0, vÆue)

	)

796 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8); 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
; _£qbuf[_£qbuÂå+1] = 
SEQ_CONTROLLER
; _£qbuf[_£qbuÂå+2] = (dev); _£qbuf[_£qbuÂå+3] = (voi˚); _£qbuf[_£qbuÂå+4] = (c⁄åﬁÀr); _£qbuf[_£qbuÂå+5] = ((vÆue)&0xff); _£qbuf[_£qbuÂå+6] = ((vÆue>>8)&0xff); _£qbuf[_£qbuÂå+7] = 0; 
	`_SEQ_ADVBUF
(8);}

	)

798 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

799 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

800 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

801 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

802 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

804 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8); 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; _£qbuf[_£qbuÂå+1] = (ev); _£qbuf[_£qbuÂå+2] = 0; _£qbuf[_£qbuÂå+3] = 0; *(*)&_£qbuf[_£qbuÂå+4] = (∑rm); 
	`_SEQ_ADVBUF
(8);}

	)

806 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

807 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

808 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

809 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

810 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

811 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

812 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

813 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

814 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

816 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8); 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; _£qbuf[_£qbuÂå+1] = (ev); _£qbuf[_£qbuÂå+2] = 0; _£qbuf[_£qbuÂå+3] = 0; *(*)&_£qbuf[_£qbuÂå+4] = (∑rm); 
	`_SEQ_ADVBUF
(8);}

	)

818 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

820 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4); 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
; _£qbuf[_£qbuÂå+1] = (byã); _£qbuf[_£qbuÂå+2] = (devi˚); _£qbuf[_£qbuÂå+3] = 0; 
	`_SEQ_ADVBUF
(4);}

	)

822 #ifde‡
OSSLIB


823 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
Ë
	`OSS_wrôe_∑tch
(
£qfd
, (*)’©chx),Üí)

	)

824 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
Ë
	`OSS_wrôe_∑tch2
(
£qfd
, (*)’©chx),Üí)

	)

826 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
Ë{i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
(); i‡(
	`wrôe
(
£qfd
, (*)’©chx),Üí)==-1Ë
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

827 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
Ë(
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)’©chx),Üí))

	)

	@linux/spinlock.h

12 #i‚de‡
__LINUX_SPINLOCK_H


13 
	#__LINUX_SPINLOCK_H


	)

15 
	~<löux/¥ìm±.h
>

16 
	~<löux/lökage.h
>

17 
	~<löux/compûî.h
>

18 
	~<löux/thªad_öfo.h
>

19 
	~<löux/kî√l.h
>

20 
	~<löux/°rögify.h
>

22 
	~<asm/sy°em.h
>

24 
	#LOCK_SECTION_NAME
 ".ãxt.lock."
KBUILD_BASENAME


	)

26 
	#LOCK_SECTION_START
(
exåa
Ë".sub£˘i⁄ 1\n\t"Éxå®".i‚de‡" 
LOCK_SECTION_NAME
 "\n\t" LOCK_SECTION_NAME ":\n\t" ".ídif\n"

	)

28 
	#LOCK_SECTION_END
 ".¥evious\n\t"

	)

30 
	#__lockfunc
 
Á°ˇŒ
 
	`__©åibuã__
((
	`£˘i⁄
(".•ölock.ãxt")))

	)

32 
	~<löux/•ölock_ty≥s.h
>

34 
	~<löux/•ölock_up.h
>

36 
	#•ö_lock_öô
(
lock
Ëdÿ{ *÷ockË
SPIN_LOCK_UNLOCKED
; } 0)

	)

38 
	#rwlock_öô
(
lock
Ëdÿ{ *÷ockË
RW_LOCK_UNLOCKED
; } 0)

	)

40 
	#•ö_is_locked
(
lock
Ë
	`__øw_•ö_is_locked
(&÷ock)->
øw_lock
)

	)

42 
	#•ö_u∆ock_waô
(
lock
Ë
	`__øw_•ö_u∆ock_waô
(&÷ock)->
øw_lock
)

	)

44 
	~<löux/•ölock_≠i_up.h
>

46 
	#_øw_•ö_lock
(
lock
Ë
	`__øw_•ö_lock
(&÷ock)->
øw_lock
)

	)

47 
	#_øw_•ö_lock_Êags
(
lock
, 
Êags
Ë
	`__øw_•ö_lock_Êags
(&÷ock)->
øw_lock
, *(Êags))

	)

48 
	#_øw_•ö_åylock
(
lock
Ë
	`__øw_•ö_åylock
(&÷ock)->
øw_lock
)

	)

49 
	#_øw_•ö_u∆ock
(
lock
Ë
	`__øw_•ö_u∆ock
(&÷ock)->
øw_lock
)

	)

50 
	#_øw_ªad_lock
(
rwlock
Ë
	`__øw_ªad_lock
(&‘wlock)->
øw_lock
)

	)

51 
	#_øw_ªad_åylock
(
rwlock
Ë
	`__øw_ªad_åylock
(&‘wlock)->
øw_lock
)

	)

52 
	#_øw_ªad_u∆ock
(
rwlock
Ë
	`__øw_ªad_u∆ock
(&‘wlock)->
øw_lock
)

	)

53 
	#_øw_wrôe_lock
(
rwlock
Ë
	`__øw_wrôe_lock
(&‘wlock)->
øw_lock
)

	)

54 
	#_øw_wrôe_åylock
(
rwlock
Ë
	`__øw_wrôe_åylock
(&‘wlock)->
øw_lock
)

	)

55 
	#_øw_wrôe_u∆ock
(
rwlock
Ë
	`__øw_wrôe_u∆ock
(&‘wlock)->
øw_lock
)

	)

57 
	#ªad_ˇn_lock
(
rwlock
Ë
	`__øw_ªad_ˇn_lock
(&‘wlock)->
øw_lock
)

	)

58 
	#wrôe_ˇn_lock
(
rwlock
Ë
	`__øw_wrôe_ˇn_lock
(&‘wlock)->
øw_lock
)

	)

60 
	#•ö_åylock
(
lock
Ë
	`__c⁄d_lock
(
	`_•ö_åylock
÷ock))

	)

61 
	#ªad_åylock
(
lock
Ë
	`__c⁄d_lock
(
	`_ªad_åylock
÷ock))

	)

62 
	#wrôe_åylock
(
lock
Ë
	`__c⁄d_lock
(
	`_wrôe_åylock
÷ock))

	)

64 
	#•ö_lock
(
lock
Ë
	`_•ö_lock
÷ock)

	)

66 
	#•ö_lock_√°ed
(
lock
, 
sub˛ass
Ë
	`_•ö_lock
÷ock)

	)

68 
	#wrôe_lock
(
lock
Ë
	`_wrôe_lock
÷ock)

	)

69 
	#ªad_lock
(
lock
Ë
	`_ªad_lock
÷ock)

	)

71 
	#•ö_lock_úqßve
(
lock
, 
Êags
Ë
	`_•ö_lock_úqßve
÷ock, fœgs)

	)

72 
	#ªad_lock_úqßve
(
lock
, 
Êags
Ë
	`_ªad_lock_úqßve
÷ock, fœgs)

	)

73 
	#wrôe_lock_úqßve
(
lock
, 
Êags
Ë
	`_wrôe_lock_úqßve
÷ock, fœgs)

	)

75 
	#•ö_lock_úq
(
lock
Ë
	`_•ö_lock_úq
÷ock)

	)

76 
	#•ö_lock_bh
(
lock
Ë
	`_•ö_lock_bh
÷ock)

	)

78 
	#ªad_lock_úq
(
lock
Ë
	`_ªad_lock_úq
÷ock)

	)

79 
	#ªad_lock_bh
(
lock
Ë
	`_ªad_lock_bh
÷ock)

	)

81 
	#wrôe_lock_úq
(
lock
Ë
	`_wrôe_lock_úq
÷ock)

	)

82 
	#wrôe_lock_bh
(
lock
Ë
	`_wrôe_lock_bh
÷ock)

	)

84 
	#•ö_u∆ock
(
lock
Ë
	`_•ö_u∆ock
÷ock)

	)

85 
	#ªad_u∆ock
(
lock
Ë
	`_ªad_u∆ock
÷ock)

	)

86 
	#wrôe_u∆ock
(
lock
Ë
	`_wrôe_u∆ock
÷ock)

	)

87 
	#•ö_u∆ock_úq
(
lock
Ë
	`_•ö_u∆ock_úq
÷ock)

	)

88 
	#ªad_u∆ock_úq
(
lock
Ë
	`_ªad_u∆ock_úq
÷ock)

	)

89 
	#wrôe_u∆ock_úq
(
lock
Ë
	`_wrôe_u∆ock_úq
÷ock)

	)

91 
	#•ö_u∆ock_úqª°‹e
(
lock
, 
Êags
Ë
	`_•ö_u∆ock_úqª°‹e
÷ock, fœgs)

	)

92 
	#•ö_u∆ock_bh
(
lock
Ë
	`_•ö_u∆ock_bh
÷ock)

	)

94 
	#ªad_u∆ock_úqª°‹e
(
lock
, 
Êags
Ë
	`_ªad_u∆ock_úqª°‹e
÷ock, fœgs)

	)

95 
	#ªad_u∆ock_bh
(
lock
Ë
	`_ªad_u∆ock_bh
÷ock)

	)

97 
	#wrôe_u∆ock_úqª°‹e
(
lock
, 
Êags
Ë
	`_wrôe_u∆ock_úqª°‹e
÷ock, fœgs)

	)

98 
	#wrôe_u∆ock_bh
(
lock
Ë
	`_wrôe_u∆ock_bh
÷ock)

	)

100 
	#•ö_åylock_bh
(
lock
Ë
	`__c⁄d_lock
(
	`_•ö_åylock_bh
÷ock))

	)

102 
	#•ö_åylock_úq
(
lock
Ë({ 
	`loˇl_úq_dißbÀ
(); 
	`_•ö_åylock
÷ockË? 1 : ({ 
	`loˇl_úq_íabÀ
(); 0; }); })

	)

104 
	#•ö_åylock_úqßve
(
lock
, 
Êags
Ë({ 
	`loˇl_úq_ßve
(Êags); 
	`_•ö_åylock
÷ockË? 1 : ({ 
	`loˇl_úq_ª°‹e
(Êags); 0; }); })

	)

106 
	~<asm/©omic.h
>

108 
	#©omic_dec_™d_lock
(
©omic
, 
lock
Ë
	`__c⁄d_lock
(
	`_©omic_dec_™d_lock
◊tomic,Üock))

	)

110 
	#•ö_ˇn_lock
(
lock
Ë(!
	`•ö_is_locked
÷ock))

	)

	@linux/spinlock_api_smp.h

12 #i‚de‡
__LINUX_SPINLOCK_API_SMP_H


13 
	#__LINUX_SPINLOCK_API_SMP_H


	)

15 #i‚de‡
__LINUX_SPINLOCK_H


19 
	#as£π_•ö_locked
(
x
Ë
	`BUG_ON
(!
	`•ö_is_locked
(x))

	)

	@linux/spinlock_api_up.h

12 #i‚de‡
__LINUX_SPINLOCK_API_UP_H


13 
	#__LINUX_SPINLOCK_API_UP_H


	)

15 #i‚de‡
__LINUX_SPINLOCK_H


19 
	#ö_lock_fun˘i⁄s
(
ADDR
Ë0

	)

21 
	#as£π_•ö_locked
(
lock
Ëdÿ{ ()÷ock); } 0)

	)

23 
	#__LOCK
(
lock
Ëdÿ{ 
	`¥ìm±_dißbÀ
(); 
	`__acquúe
÷ock); ()÷ock); } 0)

	)

25 
	#__LOCK_BH
(
lock
Ëdÿ{ 
	`loˇl_bh_dißbÀ
(); 
	`__LOCK
÷ock); } 0)

	)

27 
	#__LOCK_IRQ
(
lock
Ëdÿ{ 
	`loˇl_úq_dißbÀ
(); 
	`__LOCK
÷ock); } 0)

	)

29 
	#__LOCK_IRQSAVE
(
lock
, 
Êags
Ëdÿ{ 
	`loˇl_úq_ßve
(Êags); 
	`__LOCK
÷ock); } 0)

	)

31 
	#__UNLOCK
(
lock
Ëdÿ{ 
	`¥ìm±_íabÀ
(); 
	`__ªÀa£
÷ock); ()÷ock); } 0)

	)

33 
	#__UNLOCK_BH
(
lock
Ëdÿ{ 
	`¥ìm±_íabÀ_no_ªsched
(); 
	`loˇl_bh_íabÀ
(); 
	`__ªÀa£
÷ock); ()÷ock); } 0)

	)

35 
	#__UNLOCK_IRQ
(
lock
Ëdÿ{ 
	`loˇl_úq_íabÀ
(); 
	`__UNLOCK
÷ock); } 0)

	)

37 
	#__UNLOCK_IRQRESTORE
(
lock
, 
Êags
Ëdÿ{ 
	`loˇl_úq_ª°‹e
(Êags); 
	`__UNLOCK
÷ock); } 0)

	)

39 
	#_•ö_lock
(
lock
Ë
	`__LOCK
÷ock)

	)

40 
	#_•ö_lock_√°ed
(
lock
, 
sub˛ass
Ë
	`__LOCK
÷ock)

	)

41 
	#_ªad_lock
(
lock
Ë
	`__LOCK
÷ock)

	)

42 
	#_wrôe_lock
(
lock
Ë
	`__LOCK
÷ock)

	)

43 
	#_•ö_lock_bh
(
lock
Ë
	`__LOCK_BH
÷ock)

	)

44 
	#_ªad_lock_bh
(
lock
Ë
	`__LOCK_BH
÷ock)

	)

45 
	#_wrôe_lock_bh
(
lock
Ë
	`__LOCK_BH
÷ock)

	)

46 
	#_•ö_lock_úq
(
lock
Ë
	`__LOCK_IRQ
÷ock)

	)

47 
	#_ªad_lock_úq
(
lock
Ë
	`__LOCK_IRQ
÷ock)

	)

48 
	#_wrôe_lock_úq
(
lock
Ë
	`__LOCK_IRQ
÷ock)

	)

49 
	#_•ö_lock_úqßve
(
lock
, 
Êags
Ë
	`__LOCK_IRQSAVE
÷ock, fœgs)

	)

50 
	#_ªad_lock_úqßve
(
lock
, 
Êags
Ë
	`__LOCK_IRQSAVE
÷ock, fœgs)

	)

51 
	#_wrôe_lock_úqßve
(
lock
, 
Êags
Ë
	`__LOCK_IRQSAVE
÷ock, fœgs)

	)

52 
	#_•ö_åylock
(
lock
Ë({ 
	`__LOCK
÷ock); 1; })

	)

53 
	#_ªad_åylock
(
lock
Ë({ 
	`__LOCK
÷ock); 1; })

	)

54 
	#_wrôe_åylock
(
lock
Ë({ 
	`__LOCK
÷ock); 1; })

	)

55 
	#_•ö_åylock_bh
(
lock
Ë({ 
	`__LOCK_BH
÷ock); 1; })

	)

56 
	#_•ö_u∆ock
(
lock
Ë
	`__UNLOCK
÷ock)

	)

57 
	#_ªad_u∆ock
(
lock
Ë
	`__UNLOCK
÷ock)

	)

58 
	#_wrôe_u∆ock
(
lock
Ë
	`__UNLOCK
÷ock)

	)

59 
	#_•ö_u∆ock_bh
(
lock
Ë
	`__UNLOCK_BH
÷ock)

	)

60 
	#_wrôe_u∆ock_bh
(
lock
Ë
	`__UNLOCK_BH
÷ock)

	)

61 
	#_ªad_u∆ock_bh
(
lock
Ë
	`__UNLOCK_BH
÷ock)

	)

62 
	#_•ö_u∆ock_úq
(
lock
Ë
	`__UNLOCK_IRQ
÷ock)

	)

63 
	#_ªad_u∆ock_úq
(
lock
Ë
	`__UNLOCK_IRQ
÷ock)

	)

64 
	#_wrôe_u∆ock_úq
(
lock
Ë
	`__UNLOCK_IRQ
÷ock)

	)

65 
	#_•ö_u∆ock_úqª°‹e
(
lock
, 
Êags
Ë
	`__UNLOCK_IRQRESTORE
÷ock, fœgs)

	)

66 
	#_ªad_u∆ock_úqª°‹e
(
lock
, 
Êags
Ë
	`__UNLOCK_IRQRESTORE
÷ock, fœgs)

	)

67 
	#_wrôe_u∆ock_úqª°‹e
(
lock
, 
Êags
Ë
	`__UNLOCK_IRQRESTORE
÷ock, fœgs)

	)

	@linux/spinlock_types.h

12 #i‚de‡
__LINUX_SPINLOCK_TYPES_H


13 
	#__LINUX_SPINLOCK_TYPES_H


	)

15 
	~<löux/lockdï.h
>

17 
	~<löux/•ölock_ty≥s_up.h
>

20 
øw_•ölock_t
 
	møw_lock
;

21 } 
	t•ölock_t
;

23 
	#SPINLOCK_MAGIC
 0xdód4ód

	)

26 
øw_rwlock_t
 
	møw_lock
;

27 } 
	trwlock_t
;

29 
	#RWLOCK_MAGIC
 0xdóf1ìd

	)

31 
	#SPINLOCK_OWNER_INIT
 ((*)-1L)

	)

33 
	#SPIN_DEP_MAP_INIT
(
lock«me
)

	)

35 
	#RW_DEP_MAP_INIT
(
lock«me
)

	)

37 
	#__SPIN_LOCK_UNLOCKED
(
lock«me
Ë(
•ölock_t
Ë{ .
øw_lock
 = 
__RAW_SPIN_LOCK_UNLOCKED
, 
	`SPIN_DEP_MAP_INIT
÷ock«meË}

	)

38 
	#__RW_LOCK_UNLOCKED
(
lock«me
Ë(
rwlock_t
Ë{ .
øw_lock
 = 
__RAW_RW_LOCK_UNLOCKED
, 
	`RW_DEP_MAP_INIT
÷ock«meË}

	)

40 
	#SPIN_LOCK_UNLOCKED
 
	`__SPIN_LOCK_UNLOCKED
(
ﬁd_°yÀ_•ö_öô
)

	)

41 
	#RW_LOCK_UNLOCKED
 
	`__RW_LOCK_UNLOCKED
(
ﬁd_°yÀ_rw_öô
)

	)

43 
	#DEFINE_SPINLOCK
(
x
Ë
•ölock_t
 x = 
	`__SPIN_LOCK_UNLOCKED
(x)

	)

44 
	#DEFINE_RWLOCK
(
x
Ë
rwlock_t
 x = 
	`__RW_LOCK_UNLOCKED
(x)

	)

	@linux/spinlock_types_up.h

12 #i‚de‡
__LINUX_SPINLOCK_TYPES_UP_H


13 
	#__LINUX_SPINLOCK_TYPES_UP_H


	)

15 #i‚de‡
__LINUX_SPINLOCK_TYPES_H


19 °ru˘ { } 
	gøw_•ölock_t
;

21 
	#__RAW_SPIN_LOCK_UNLOCKED
 { }

	)

25 } 
	gøw_rwlock_t
;

27 
	#__RAW_RW_LOCK_UNLOCKED
 { }

	)

	@linux/spinlock_up.h

12 #i‚de‡
__LINUX_SPINLOCK_UP_H


13 
	#__LINUX_SPINLOCK_UP_H


	)

15 #i‚de‡
__LINUX_SPINLOCK_H


19 
	#__øw_•ö_is_locked
(
lock
Ë(()÷ock), 0)

	)

21 
	#__øw_•ö_lock
(
lock
Ëdÿ{ ()÷ock); } 0)

	)

22 
	#__øw_•ö_u∆ock
(
lock
Ëdÿ{ ()÷ock); } 0)

	)

23 
	#__øw_•ö_åylock
(
lock
Ë({ ()÷ock); 1; })

	)

25 
	#__øw_ªad_ˇn_lock
(
lock
Ë((()÷ock), 1))

	)

26 
	#__øw_wrôe_ˇn_lock
(
lock
Ë((()÷ock), 1))

	)

28 
	#__øw_•ö_u∆ock_waô
(
lock
Ëdÿ{ 
	`˝u_ªœx
(); } 
	`__øw_•ö_is_locked
÷ock))

	)

	@linux/stacktrace.h

12 #i‚de‡
__LINUX_STACKTRACE_H


13 
	#__LINUX_STACKTRACE_H


	)

15 
	#ßve_°ack_åa˚
(
åa˚
, 
èsk
, 
Æl
, 
skù
Ëdÿ{ } 0)

	)

16 
	#¥öt_°ack_åa˚
(
åa˚
Ëdÿ{ } 0)

	)

	@linux/stat.h

12 #i‚de‡
_LINUX_STAT_H


13 
	#_LINUX_STAT_H


	)

15 #i‡!
deföed
(
__GLIBC__
) || __GLIBC__ < 2

17 
	#S_IFMT
 00170000

	)

18 
	#S_IFSOCK
 0140000

	)

19 
	#S_IFLNK
 0120000

	)

20 
	#S_IFREG
 0100000

	)

21 
	#S_IFBLK
 0060000

	)

22 
	#S_IFDIR
 0040000

	)

23 
	#S_IFCHR
 0020000

	)

24 
	#S_IFIFO
 0010000

	)

25 
	#S_ISUID
 0004000

	)

26 
	#S_ISGID
 0002000

	)

27 
	#S_ISVTX
 0001000

	)

29 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

30 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

31 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

32 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

33 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

34 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

35 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

37 
	#S_IRWXU
 00700

	)

38 
	#S_IRUSR
 00400

	)

39 
	#S_IWUSR
 00200

	)

40 
	#S_IXUSR
 00100

	)

42 
	#S_IRWXG
 00070

	)

43 
	#S_IRGRP
 00040

	)

44 
	#S_IWGRP
 00020

	)

45 
	#S_IXGRP
 00010

	)

47 
	#S_IRWXO
 00007

	)

48 
	#S_IROTH
 00004

	)

49 
	#S_IWOTH
 00002

	)

50 
	#S_IXOTH
 00001

	)

	@linux/statfs.h

12 #i‚de‡
_LINUX_STATFS_H


13 
	#_LINUX_STATFS_H


	)

15 
	~<löux/ty≥s.h
>

17 
	~<asm/°©fs.h
>

19 
	sk°©fs
 {

20 
	mf_ty≥
;

21 
	mf_bsize
;

22 
u64
 
	mf_blocks
;

23 
u64
 
	mf_b‰ì
;

24 
u64
 
	mf_bavaû
;

25 
u64
 
	mf_fûes
;

26 
u64
 
	mf_f‰ì
;

27 
__kî√l_fsid_t
 
	mf_fsid
;

28 
	mf_«mñí
;

29 
	mf_‰size
;

30 
	mf_•¨e
[5];

	@linux/stddef.h

19 #i‚de‡
_LINUX_STDDEF_H


20 
	#_LINUX_STDDEF_H


	)

21 
	~<löux/compûî.h
>

22 #unde‡
NULL


24 #ifde‡
__˝lu•lus


25 
	#NULL
 0

	)

27 
	#NULL
 ((*)0)

	)

	@linux/string.h

12 #i‚de‡
_LINUX_STRING_H_


13 
	#_LINUX_STRING_H_


	)

	@linux/stringify.h

12 #i‚de‡
__LINUX_STRINGIFY_H


13 
	#__LINUX_STRINGIFY_H


	)

15 
	#__°rögify_1
(
x
Ë#x

	)

16 
	#__°rögify
(
x
Ë
	`__°rögify_1
(x)

	)

	@linux/sunrpc/auth.h

12 #i‚de‡
_LINUX_SUNRPC_AUTH_H


13 
	#_LINUX_SUNRPC_AUTH_H


	)

	@linux/sunrpc/auth_gss.h

12 #i‚de‡
_LINUX_SUNRPC_AUTH_GSS_H


13 
	#_LINUX_SUNRPC_AUTH_GSS_H


	)

	@linux/sunrpc/clnt.h

12 #i‚de‡
_LINUX_SUNRPC_CLNT_H


13 
	#_LINUX_SUNRPC_CLNT_H


	)

15 
	~<löux/suƒpc/msg_¥Ÿ.h
>

16 
	~<löux/suƒpc/sched.h
>

17 
	~<löux/suƒpc/x¥t.h
>

18 
	~<löux/suƒpc/auth.h
>

19 
	~<löux/suƒpc/°©s.h
>

20 
	~<löux/suƒpc/xdr.h
>

21 
	~<löux/suƒpc/timî.h
>

22 
	~<asm/sig«l.h
>

24 
	sΩc_p‹tm≠
 {

25 
__u32
 
	mpm_¥og
;

26 
__u32
 
	mpm_vîs
;

27 
__u32
 
	mpm_¥Ÿ
;

28 
__u16
 
	mpm_p‹t
;

29 
	mpm_bödög
 : 1;

30 
Ωc_waô_queue
 
	mpm_bödwaô
;

33 
	gΩc_öode
;

35 
	sΩc_˛¡
 {

36 
©omic_t
 
	m˛_cou¡
;

37 
©omic_t
 
	m˛_u£rs
;

38 
Ωc_x¥t
 * 
	m˛_x¥t
;

39 
Ωc_¥ocöfo
 * 
	m˛_¥ocöfo
;

40 
u32
 
	m˛_max¥oc
;

42 * 
	m˛_£rvî
;

43 * 
	m˛_¥Ÿ«me
;

44 
Ωc_auth
 * 
	m˛_auth
;

45 
Ωc_°©
 * 
	m˛_°©s
;

46 
Ωc_io°©s
 * 
	m˛_mërics
;

48 
	m˛_so·πry
 : 1,

49 
	m˛_öå
 : 1,

50 
	m˛_autoböd
 : 1,

51 
	m˛_⁄eshŸ
 : 1,

52 
	m˛_dód
 : 1;

54 
Ωc_πt
 * 
	m˛_πt
;

55 
Ωc_p‹tm≠
 * 
	m˛_pm≠
;

57 
	m˛_nodñí
;

58 
	m˛_nodíame
[
UNX_MAXNODENAME
];

59 
	m˛_∑th«me
[30];

60 
vfsmou¡
 * 
	m˛_vfsm¡
;

61 
díåy
 * 
	m˛_díåy
;

62 
Ωc_˛¡
 * 
	m˛_∑ª¡
;

63 
Ωc_πt
 
	m˛_πt_deÁu…
;

64 
Ωc_p‹tm≠
 
	m˛_pm≠_deÁu…
;

65 
	m˛_ölöe_«me
[32];

67 
	#˛_timeout
 
˛_x¥t
->
timeout


	)

68 
	#˛_¥og
 
˛_pm≠
->
pm_¥og


	)

69 
	#˛_vîs
 
˛_pm≠
->
pm_vîs


	)

70 
	#˛_p‹t
 
˛_pm≠
->
pm_p‹t


	)

71 
	#˛_¥Ÿ
 
˛_pm≠
->
pm_¥Ÿ


	)

73 
	#RPC_MAXVERSION
 4

	)

74 
	sΩc_¥ogøm
 {

75 * 
	m«me
;

76 
u32
 
	mnumbî
;

77 
	mƒvîs
;

78 
Ωc_vîsi⁄
 ** 
	mvîsi⁄
;

79 
Ωc_°©
 * 
	m°©s
;

80 * 
	mpùe_dú_«me
;

83 
	sΩc_vîsi⁄
 {

84 
u32
 
	mnumbî
;

85 
	mƒ¥ocs
;

86 
Ωc_¥ocöfo
 * 
	m¥ocs
;

89 
	sΩc_¥ocöfo
 {

90 
u32
 
	mp_¥oc
;

91 
kxdΩroc_t
 
	mp_ícode
;

92 
kxdΩroc_t
 
	mp_decode
;

93 
	mp_bufsiz
;

94 
	mp_cou¡
;

95 
	mp_timî
;

96 
u32
 
	mp_°©idx
;

97 * 
	mp_«me
;

100 
	#RPC_CONGESTED
(
˛¡
Ë(
	`RPCXPRT_CONGESTED
((˛¡)->
˛_x¥t
))

	)

101 
	#RPC_PEERADDR
(
˛¡
Ë(&(˛¡)->
˛_x¥t
->
addr
)

	)

	@linux/sunrpc/debug.h

12 #i‚de‡
_LINUX_SUNRPC_DEBUG_H_


13 
	#_LINUX_SUNRPC_DEBUG_H_


	)

15 
	#RPCDBG_XPRT
 0x0001

	)

16 
	#RPCDBG_CALL
 0x0002

	)

17 
	#RPCDBG_DEBUG
 0x0004

	)

18 
	#RPCDBG_NFS
 0x0008

	)

19 
	#RPCDBG_AUTH
 0x0010

	)

20 
	#RPCDBG_PMAP
 0x0020

	)

21 
	#RPCDBG_SCHED
 0x0040

	)

22 
	#RPCDBG_TRANS
 0x0080

	)

23 
	#RPCDBG_SVCSOCK
 0x0100

	)

24 
	#RPCDBG_SVCDSP
 0x0200

	)

25 
	#RPCDBG_MISC
 0x0400

	)

26 
	#RPCDBG_CACHE
 0x0800

	)

27 
	#RPCDBG_ALL
 0x7fff

	)

29 
	#CTL_SUNRPC
 7249

	)

32 
	mCTL_RPCDEBUG
 = 1,

33 
	mCTL_NFSDEBUG
,

34 
	mCTL_NFSDDEBUG
,

35 
	mCTL_NLMDEBUG
,

36 
	mCTL_SLOTTABLE_UDP
,

37 
	mCTL_SLOTTABLE_TCP
,

38 
	mCTL_MIN_RESVPORT
,

39 
	mCTL_MAX_RESVPORT
,

	@linux/sunrpc/gss_api.h

12 #i‚de‡
_LINUX_SUNRPC_GSS_API_H


13 
	#_LINUX_SUNRPC_GSS_API_H


	)

	@linux/sunrpc/gss_asn1.h

12 
	~<löux/suƒpc/gss_≠i.h
>

14 
	#SIZEOF_INT
 4

	)

16 
	#G_BAD_SERVICE_NAME
 (-2045022976L)

	)

17 
	#G_BAD_STRING_UID
 (-2045022975L)

	)

18 
	#G_NOUSER
 (-2045022974L)

	)

19 
	#G_VALIDATE_FAILED
 (-2045022973L)

	)

20 
	#G_BUFFER_ALLOC
 (-2045022972L)

	)

21 
	#G_BAD_MSG_CTX
 (-2045022971L)

	)

22 
	#G_WRONG_SIZE
 (-2045022970L)

	)

23 
	#G_BAD_USAGE
 (-2045022969L)

	)

24 
	#G_UNKNOWN_QOP
 (-2045022968L)

	)

25 
	#G_NO_HOSTNAME
 (-2045022967L)

	)

26 
	#G_BAD_HOSTNAME
 (-2045022966L)

	)

27 
	#G_WRONG_MECH
 (-2045022965L)

	)

28 
	#G_BAD_TOK_HEADER
 (-2045022964L)

	)

29 
	#G_BAD_DIRECTION
 (-2045022963L)

	)

30 
	#G_TOK_TRUNC
 (-2045022962L)

	)

31 
	#G_REFLECT
 (-2045022961L)

	)

32 
	#G_WRONG_TOKID
 (-2045022960L)

	)

34 
	#g_OID_equÆ
(
o1
,
o2
Ë(((o1)->
Àn
 =(o2)->ÀnË&& (
	`memcmp
((o1)->
d©a
,(o2)->d©a,(Ë(o1)->ÀnË=0))

	)

	@linux/sunrpc/gss_err.h

12 #i‚de‡
_LINUX_SUNRPC_GSS_ERR_H


13 
	#_LINUX_SUNRPC_GSS_ERR_H


	)

	@linux/sunrpc/msg_prot.h

12 #i‚de‡
_LINUX_SUNRPC_MSGPROT_H_


13 
	#_LINUX_SUNRPC_MSGPROT_H_


	)

	@linux/sunrpc/sched.h

12 #i‚de‡
_LINUX_SUNRPC_SCHED_H_


13 
	#_LINUX_SUNRPC_SCHED_H_


	)

15 
	~<löux/timî.h
>

16 
	~<löux/suƒpc/ty≥s.h
>

17 
	~<löux/•ölock.h
>

18 
	~<löux/waô.h
>

19 
	~<löux/w‹kqueue.h
>

20 
	~<löux/suƒpc/xdr.h
>

22 
	gΩc_¥ocöfo
;

23 
	sΩc_mesßge
 {

24 
Ωc_¥ocöfo
 * 
	mΩc_¥oc
;

25 * 
	mΩc_¨gp
;

26 * 
	mΩc_ª•
;

27 
Ωc_¸ed
 * 
	mΩc_¸ed
;

30 
	gΩc_ˇŒ_›s
;

31 
	gΩc_waô_queue
;

32 
	sΩc_waô
 {

33 
li°_hód
 
	mli°
;

34 
li°_hód
 
	mlöks
;

35 
Ωc_waô_queue
 * 
	mΩc_waôq
;

38 
	sΩc_èsk
 {

39 #ifde‡
RPC_DEBUG


40 
	mtk_magic
;

42 
©omic_t
 
	mtk_cou¡
;

43 
li°_hód
 
	mtk_èsk
;

44 
Ωc_˛¡
 * 
	mtk_˛õ¡
;

45 
Ωc_rq°
 * 
	mtk_rq°p
;

46 
	mtk_°©us
;

48 
Ωc_mesßge
 
	mtk_msg
;

49 
__u8
 
	mtk_g¨b_ªåy
;

50 
__u8
 
	mtk_¸ed_ªåy
;

52 
	mtk_cookõ
;

54 (*
	mtk_timeout_‚
)(
	mΩc_èsk
 *);

55 (*
	mtk_ˇŒback
)(
	mΩc_èsk
 *);

56 (*
	mtk_a˘i⁄
)(
	mΩc_èsk
 *);

57 c⁄° 
Ωc_ˇŒ_›s
 *
	mtk_›s
;

58 * 
	mtk_ˇŒd©a
;

60 
timî_li°
 
	mtk_timî
;

61 
	mtk_timeout
;

62 
	mtk_Êags
;

63 
	mtk_¥i‹ôy
 : 2;

64 
	mtk_run°©e
;

65 
w‹kqueue_°ru˘
 *
	mtk_w‹kqueue
;

67 
w‹k_°ru˘
 
	mtk_w‹k
;

68 
Ωc_waô
 
	mtk_waô
;

69 } 
	mu
;

71 
	mtk_timeouts
;

72 
size_t
 
	mtk_byãs_£¡
;

73 
	mtk_°¨t
;

74 
	mtk_πt
;

76 #ifde‡
RPC_DEBUG


77 
	mtk_pid
;

80 
	#tk_auth
 
tk_˛õ¡
->
˛_auth


	)

81 
	#tk_x¥t
 
tk_˛õ¡
->
˛_x¥t


	)

83 
	#èsk_f‹_óch
(
èsk
, 
pos
, 
hód
Ë
	`li°_f‹_óch
’os, hódËi‡(—ask=
	`li°_íåy
’os, 
Ωc_èsk
, 
u
.
tk_waô
.
li°
)),1)

	)

85 
	#èsk_f‹_fú°
(
èsk
, 
hód
Ëi‡(!
	`li°_em±y
(hódË&& (—ask=
	`li°_íåy
((hód)->
√xt
, 
Ωc_èsk
, 
u
.
tk_waô
.
li°
)),1))

	)

87 
	#Æ…ask_f‹_óch
(
èsk
, 
pos
, 
hód
Ë
	`li°_f‹_óch
’os, hódËi‡(—ask=
	`li°_íåy
’os, 
Ωc_èsk
, 
tk_èsk
)),1)

	)

89 (*
	tΩc_a˘i⁄
)(
	tΩc_èsk
 *);

91 
	sΩc_ˇŒ_›s
 {

92 (*
Ωc_ˇŒ_¥ï¨e
)(
Ωc_èsk
 *, *);

93 (*
Ωc_ˇŒ_d⁄e
)(
Ωc_èsk
 *, *);

94 (*
Ωc_ªÀa£
)(*);

97 
	#RPC_TASK_ASYNC
 0x0001

	)

98 
	#RPC_TASK_SWAPPER
 0x0002

	)

99 
	#RPC_TASK_CHILD
 0x0008

	)

100 
	#RPC_CALL_MAJORSEEN
 0x0020

	)

101 
	#RPC_TASK_ROOTCREDS
 0x0040

	)

102 
	#RPC_TASK_DYNAMIC
 0x0080

	)

103 
	#RPC_TASK_KILLED
 0x0100

	)

104 
	#RPC_TASK_SOFT
 0x0200

	)

105 
	#RPC_TASK_NOINTR
 0x0400

	)

107 
	#RPC_IS_ASYNC
(
t
Ë(—)->
tk_Êags
 & 
RPC_TASK_ASYNC
)

	)

108 
	#RPC_IS_CHILD
(
t
Ë(—)->
tk_Êags
 & 
RPC_TASK_CHILD
)

	)

109 
	#RPC_IS_SWAPPER
(
t
Ë(—)->
tk_Êags
 & 
RPC_TASK_SWAPPER
)

	)

110 
	#RPC_DO_ROOTOVERRIDE
(
t
Ë(—)->
tk_Êags
 & 
RPC_TASK_ROOTCREDS
)

	)

111 
	#RPC_ASSASSINATED
(
t
Ë(—)->
tk_Êags
 & 
RPC_TASK_KILLED
)

	)

112 
	#RPC_DO_CALLBACK
(
t
Ë(—)->
tk_ˇŒback
 !
NULL
)

	)

113 
	#RPC_IS_SOFT
(
t
Ë(—)->
tk_Êags
 & 
RPC_TASK_SOFT
)

	)

114 
	#RPC_TASK_UNINTERRUPTIBLE
(
t
Ë(—)->
tk_Êags
 & 
RPC_TASK_NOINTR
)

	)

116 
	#RPC_TASK_RUNNING
 0

	)

117 
	#RPC_TASK_QUEUED
 1

	)

118 
	#RPC_TASK_WAKEUP
 2

	)

119 
	#RPC_TASK_HAS_TIMER
 3

	)

120 
	#RPC_TASK_ACTIVE
 4

	)

122 
	#RPC_IS_RUNNING
(
t
Ë(
	`ã°_bô
(
RPC_TASK_RUNNING
, &—)->
tk_run°©e
))

	)

123 
	#Ωc_£t_ru¬ög
(
t
Ë(
	`£t_bô
(
RPC_TASK_RUNNING
, &—)->
tk_run°©e
))

	)

124 
	#Ωc_ã°_™d_£t_ru¬ög
(
t
Ë(
	`ã°_™d_£t_bô
(
RPC_TASK_RUNNING
, &—)->
tk_run°©e
))

	)

125 
	#Ωc_˛ór_ru¬ög
(
t
Ëdÿ{ 
	`smp_mb__bef‹e_˛ór_bô
(); 
	`˛ór_bô
(
RPC_TASK_RUNNING
, &—)->
tk_run°©e
); 
	`smp_mb__a·î_˛ór_bô
(); 
	}
} 0)

	)

127 
	#RPC_IS_QUEUED
(
t
Ë(
	`ã°_bô
(
RPC_TASK_QUEUED
, &—)->
tk_run°©e
))

	)

128 
	#Ωc_£t_queued
(
t
Ë(
	`£t_bô
(
RPC_TASK_QUEUED
, &—)->
tk_run°©e
))

	)

129 
	#Ωc_˛ór_queued
(
t
Ëdÿ{ 
	`smp_mb__bef‹e_˛ór_bô
(); 
	`˛ór_bô
(
RPC_TASK_QUEUED
, &—)->
tk_run°©e
); 
	`smp_mb__a·î_˛ór_bô
(); } 0)

	)

131 
	#Ωc_°¨t_wakeup
(
t
Ë(
	`ã°_™d_£t_bô
(
RPC_TASK_WAKEUP
, &—)->
tk_run°©e
Ë=0)

	)

132 
	#Ωc_föish_wakeup
(
t
Ëdÿ{ 
	`smp_mb__bef‹e_˛ór_bô
(); 
	`˛ór_bô
(
RPC_TASK_WAKEUP
, &—)->
tk_run°©e
); 
	`smp_mb__a·î_˛ór_bô
(); } 0)

	)

134 
	#RPC_IS_ACTIVATED
(
t
Ë(
	`ã°_bô
(
RPC_TASK_ACTIVE
, &—)->
tk_run°©e
))

	)

135 
	#Ωc_£t_a˘ive
(
t
Ë(
	`£t_bô
(
RPC_TASK_ACTIVE
, &—)->
tk_run°©e
))

	)

136 
	#Ωc_˛ór_a˘ive
(
t
Ëdÿ{ 
	`smp_mb__bef‹e_˛ór_bô
(); 
	`˛ór_bô
(
RPC_TASK_ACTIVE
, &—)->
tk_run°©e
); 
	`smp_mb__a·î_˛ór_bô
(); } 0)

	)

138 
	#RPC_PRIORITY_LOW
 0

	)

139 
	#RPC_PRIORITY_NORMAL
 1

	)

140 
	#RPC_PRIORITY_HIGH
 2

	)

141 
	#RPC_NR_PRIORITY
 (
RPC_PRIORITY_HIGH
+1)

	)

143 
	sΩc_waô_queue
 {

144 
•ölock_t
 
	mlock
;

145 
li°_hód
 
	mèsks
[
RPC_NR_PRIORITY
];

146 
	mcookõ
;

147 
	mmax¥i‹ôy
;

148 
	m¥i‹ôy
;

149 
	mcou¡
;

150 
	mƒ
;

151 
	mqÀn
;

152 #ifde‡
RPC_DEBUG


153 c⁄° * 
	m«me
;

157 
	#RPC_BATCH_COUNT
 16

	)

159 #i‚de‡
RPC_DEBUG


160 
	#RPC_WAITQ_INIT
(
v¨
,
q«me
Ë{ .
lock
 = 
SPIN_LOCK_UNLOCKED
, .
èsks
 = { [0] = 
	`LIST_HEAD_INIT
(v¨.èsks[0]), [1] = LIST_HEAD_INIT(v¨.èsks[1]), [2] = LIST_HEAD_INIT(v¨.èsks[2]), }, }

	)

162 
	#RPC_WAITQ_INIT
(
v¨
,
q«me
Ë{ .
lock
 = 
SPIN_LOCK_UNLOCKED
, .
èsks
 = { [0] = 
	`LIST_HEAD_INIT
(v¨.èsks[0]), [1] = LIST_HEAD_INIT(v¨.èsks[1]), [2] = LIST_HEAD_INIT(v¨.èsks[2]), }, .
«me
 = q«me, }

	)

164 
	#RPC_WAITQ
(
v¨
,
q«me
Ë
Ωc_waô_queue
 v¨ = 
	`RPC_WAITQ_INIT
(v¨,q«me)

	)

166 
	#RPC_IS_PRIORITY
(
q
Ë((q)->
max¥i‹ôy
 > 0)

	)

168 
Ωc_èsk
 *
Ωc_√w_èsk
(
Ωc_˛¡
 *, 
Êags
,

169 c⁄° 
Ωc_ˇŒ_›s
 *
›s
, *
d©a
);

170 
Ωc_èsk
 *
Ωc_run_èsk
(
Ωc_˛¡
 *
˛¡
, 
Êags
,

171 c⁄° 
Ωc_ˇŒ_›s
 *
›s
, *
d©a
);

172 
Ωc_èsk
 *
Ωc_√w_chûd
(
Ωc_˛¡
 *, Ωc_èsk *
∑ª¡
);

174 
Ωc_èsk
 *
Ωc_wake_up_√xt
(
Ωc_waô_queue
 *);

176 #ifde‡
RPC_DEBUG


180 #ifde‡
RPC_DEBUG


	@linux/sunrpc/stats.h

12 #i‚de‡
_LINUX_SUNRPC_STATS_H


13 
	#_LINUX_SUNRPC_STATS_H


	)

15 
	~<löux/¥oc_fs.h
>

17 
	sΩc_°©
 {

18 
Ωc_¥ogøm
 * 
	m¥ogøm
;

20 
	m√t˙t
,

21 
	m√tudp˙t
,

22 
	m√â˝˙t
,

23 
	m√â˝c⁄n
,

24 
	m√åec⁄n
;

25 
	mΩc˙t
,

26 
	mΩ¸ëøns
,

27 
	mΩˇuthª‰esh
,

28 
	mΩcg¨bage
;

31 
	ssvc_°©
 {

32 
svc_¥ogøm
 * 
	m¥ogøm
;

34 
	m√t˙t
,

35 
	m√tudp˙t
,

36 
	m√â˝˙t
,

37 
	m√â˝c⁄n
;

38 
	mΩc˙t
,

39 
	mΩcbadfmt
,

40 
	mΩcbadauth
,

41 
	mΩcbad˛¡
;

44 #ifde‡
MODULE


48 
	#¥oc_√t_Ωc
 
NULL


	)

	@linux/sunrpc/svc.h

12 #i‚de‡
SUNRPC_SVC_H


13 
	#SUNRPC_SVC_H


	)

15 
	~<löux/ö.h
>

16 
	~<löux/suƒpc/ty≥s.h
>

17 
	~<löux/suƒpc/xdr.h
>

18 
	~<löux/suƒpc/svˇuth.h
>

19 
	~<löux/waô.h
>

20 
	~<löux/mm.h
>

22 
	ssvc_£rv
 {

23 
li°_hód
 
	msv_thªads
;

24 
li°_hód
 
	msv_sockës
;

25 
svc_¥ogøm
 * 
	msv_¥ogøm
;

26 
svc_°©
 * 
	msv_°©s
;

27 
•ölock_t
 
	msv_lock
;

28 
	msv_ƒthªads
;

29 
	msv_bufsz
;

30 
	msv_xdrsize
;

32 
li°_hód
 
	msv_≥rmsocks
;

33 
li°_hód
 
	msv_ãmpsocks
;

34 
	msv_tmp˙t
;

36 * 
	msv_«me
;

39 
	#RPCSVC_MAXPAYLOAD
 (64*1024u)

	)

41 
	#RPCSVC_MAXPAGES
 ((
RPCSVC_MAXPAYLOAD
+
PAGE_SIZE
-1)/PAGE_SIZE + 2)

	)

43 
	ssvc_¥ogøm
 {

44 
svc_¥ogøm
 * 
	mpg_√xt
;

45 
u32
 
	mpg_¥og
;

46 
	mpg_lovîs
;

47 
	mpg_hivîs
;

48 
	mpg_nvîs
;

49 
svc_vîsi⁄
 ** 
	mpg_vîs
;

50 * 
	mpg_«me
;

51 * 
	mpg_˛ass
;

52 
svc_°©
 * 
	mpg_°©s
;

53 (*
	mpg_authítiˇã
)(
	msvc_rq°
 *);

56 
	ssvc_vîsi⁄
 {

57 
u32
 
	mvs_vîs
;

58 
u32
 
	mvs_≈roc
;

59 
svc_¥o˚duª
 * 
	mvs_¥oc
;

60 
u32
 
	mvs_xdrsize
;

62 (*
	mvs_di•©ch
)(
	msvc_rq°
 *, 
	mu32
 *);

65 (*
	tsvc_¥ocfunc
)(
	tsvc_rq°
 *, *
	t¨gp
, *
	tª•
);

66 
	ssvc_¥o˚duª
 {

67 
svc_¥ocfunc
 
pc_func
;

68 
kxdΩroc_t
 
pc_decode
;

69 
kxdΩroc_t
 
pc_ícode
;

70 
kxdΩroc_t
 
pc_ªÀa£
;

71 
pc_¨gsize
;

72 
pc_ªssize
;

73 
pc_cou¡
;

74 
pc_ˇchëy≥
;

75 
pc_xdºessize
;

78 (*
	tsvc_thªad_‚
)(
	tsvc_rq°
 *);

80 
svc_£rv
 * 
	`svc_¸óã
(
svc_¥ogøm
 *, );

	@linux/sunrpc/svcauth.h

12 #i‚de‡
_LINUX_SUNRPC_SVCAUTH_H_


13 
	#_LINUX_SUNRPC_SVCAUTH_H_


	)

	@linux/sunrpc/timer.h

12 #i‚de‡
_LINUX_SUNRPC_TIMER_H


13 
	#_LINUX_SUNRPC_TIMER_H


	)

15 
	~<asm/©omic.h
>

17 
	sΩc_πt
 {

18 
	mtimeo
;

19 
	m§â
[5];

20 
	msdπt
[5];

21 
	m¡imeouts
[5];

	@linux/sunrpc/types.h

12 #i‚de‡
_LINUX_SUNRPC_TYPES_H_


13 
	#_LINUX_SUNRPC_TYPES_H_


	)

15 
	~<löux/timî.h
>

16 
	~<löux/w‹kqueue.h
>

17 
	~<löux/suƒpc/debug.h
>

18 
	~<löux/li°.h
>

20 
	#sig«Œed
(Ë(
	`sig«l_≥ndög
(
cuºít
))

	)

	@linux/sunrpc/xdr.h

12 #i‚de‡
_SUNRPC_XDR_H_


13 
	#_SUNRPC_XDR_H_


	)

	@linux/sunrpc/xprt.h

12 #i‚de‡
_LINUX_SUNRPC_XPRT_H


13 
	#_LINUX_SUNRPC_XPRT_H


	)

15 
	~<löux/uio.h
>

16 
	~<löux/sockë.h
>

17 
	~<löux/ö.h
>

18 
	~<löux/suƒpc/sched.h
>

19 
	~<löux/suƒpc/xdr.h
>

21 
	#RPC_MIN_SLOT_TABLE
 (2U)

	)

22 
	#RPC_DEF_SLOT_TABLE
 (16U)

	)

23 
	#RPC_MAX_SLOT_TABLE
 (128U)

	)

25 
	#RPC_CALLHDRSIZE
 6

	)

26 
	#RPC_REPHDRSIZE
 4

	)

28 
	#RPC_MIN_RESVPORT
 (1U)

	)

29 
	#RPC_MAX_RESVPORT
 (65535U)

	)

30 
	#RPC_DEF_MIN_RESVPORT
 (665U)

	)

31 
	#RPC_DEF_MAX_RESVPORT
 (1023U)

	)

33 
	sΩc_timeout
 {

34 
	mto_öôvÆ
,

35 
	mto_maxvÆ
,

36 
	mto_ö¸emít
;

37 
	mto_ªåõs
;

38 
	mto_exp⁄ítül
;

41 
	gΩc_èsk
;

42 
	gΩc_x¥t
;

43 
	g£q_fûe
;

45 
	sΩc_rq°
 {

47 
Ωc_x¥t
 * 
	mrq_x¥t
;

48 
xdr_buf
 
	mrq_¢d_buf
;

49 
xdr_buf
 
	mrq_rcv_buf
;

51 
Ωc_èsk
 * 
	mrq_èsk
;

52 
__u32
 
	mrq_xid
;

53 
	mrq_c⁄g
;

54 
	mrq_ª˚ived
;

55 
u32
 
	mrq_£qno
;

56 
	mrq_íc_∑ges_num
;

57 
∑ge
 **
	mrq_íc_∑ges
;

58 (*
	mrq_ªÀa£_¢d_buf
)(
	mΩc_rq°
 *);

59 
li°_hód
 
	mrq_li°
;

61 
__u32
 * 
	mrq_buf„r
;

62 
size_t
 
	mrq_bufsize
;

64 
xdr_buf
 
	mrq_¥iv©e_buf
;

65 
	mrq_maj‹timeo
;

66 
	mrq_timeout
;

67 
	mrq_ªåõs
;

69 
u32
 
	mrq_byãs_£¡
;

71 
	mrq_xtime
;

72 
	mrq_¡øns
;

74 
	#rq_svec
 
rq_¢d_buf
.
hód


	)

75 
	#rq_¶í
 
rq_¢d_buf
.
Àn


	)

77 
	sΩc_x¥t_›s
 {

78 (*
	m£t_buf„r_size
)(
Ωc_x¥t
 *
	mx¥t
, 
size_t
 
	m¢dsize
, size_à
	mrcvsize
);

79 (*
	mª£rve_x¥t
)(
Ωc_èsk
 *
	mèsk
);

80 (*
	mªÀa£_x¥t
)(
Ωc_x¥t
 *
	mx¥t
, 
Ωc_èsk
 *
	mèsk
);

81 (*
	m£t_p‹t
)(
Ωc_x¥t
 *
	mx¥t
, 
	mp‹t
);

82 (*
	mc⁄√˘
)(
Ωc_èsk
 *
	mèsk
);

83 * (*
	mbuf_Æloc
)(
Ωc_èsk
 *
	mèsk
, 
size_t
 
	msize
);

84 (*
	mbuf_‰ì
)(
Ωc_èsk
 *
	mèsk
);

85 (*
	m£nd_ªque°
)(
Ωc_èsk
 *
	mèsk
);

86 (*
	m£t_ªå™s_timeout
)(
Ωc_èsk
 *
	mèsk
);

87 (*
	mtimî
)(
Ωc_èsk
 *
	mèsk
);

88 (*
	mªÀa£_ªque°
)(
Ωc_èsk
 *
	mèsk
);

89 (*
	m˛o£
)(
Ωc_x¥t
 *
	mx¥t
);

90 (*
	mde°roy
)(
Ωc_x¥t
 *
	mx¥t
);

91 (*
	m¥öt_°©s
)(
Ωc_x¥t
 *
	mx¥t
, 
£q_fûe
 *
	m£q
);

94 
	sΩc_x¥t
 {

95 
Ωc_x¥t_›s
 * 
	m›s
;

96 
sockë
 * 
	msock
;

97 
sock
 * 
	möë
;

99 
Ωc_timeout
 
	mtimeout
;

100 
sockaddr_ö
 
	maddr
;

101 
	m¥Ÿ
;

103 
	mc⁄g
;

104 
	mcwnd
;

106 
size_t
 
	mrcvsize
,

107 
	m¢dsize
;

109 
size_t
 
	mmax_∑ylﬂd
;

110 
	mtsh_size
;

112 
Ωc_waô_queue
 
	m£ndög
;

113 
Ωc_waô_queue
 
	mª£nd
;

114 
Ωc_waô_queue
 
	m≥ndög
;

115 
Ωc_waô_queue
 
	mbacklog
;

116 
li°_hód
 
	m‰ì
;

117 
Ωc_rq°
 * 
	m¶Ÿ
;

118 
	mmax_ªqs
;

119 
	m°©e
;

120 
	mshutdown
 : 1,

121 
	mªsvp‹t
 : 1;

123 
__u32
 
	mxid
;

125 
u32
 
	mt˝_ªcm
,

126 
	mt˝_xid
,

127 
	mt˝_ª˛í
,

128 
	mt˝_off£t
;

129 
	mt˝_c›õd
,

130 
	mt˝_Êags
;

132 
	mc⁄√˘_timeout
,

133 
	mböd_timeout
,

134 
	mªe°ablish_timeout
;

135 
w‹k_°ru˘
 
	mc⁄√˘_w‹kî
;

136 
	mp‹t
;

138 
w‹k_°ru˘
 
	mèsk_˛ónup
;

139 
timî_li°
 
	mtimî
;

140 
	mœ°_u£d
,

141 
	midÀ_timeout
;

143 
•ölock_t
 
	må™•‹t_lock
;

144 
•ölock_t
 
	mª£rve_lock
;

145 
Ωc_èsk
 * 
	m¢d_èsk
;

147 
li°_hód
 
	mªcv
;

150 
	mböd_cou¡
,

151 
	mc⁄√˘_cou¡
,

152 
	mc⁄√˘_°¨t
,

153 
	mc⁄√˘_time
,

154 
	m£nds
,

155 
	mªcvs
,

156 
	mbad_xids
;

158 
	mªq_u
,

159 
	mbklog_u
;

160 } 
	m°©
;

162 (*
	mﬁd_d©a_ªady
)(
	msock
 *, );

163 (*
	mﬁd_°©e_ch™ge
)(
	msock
 *);

164 (*
	mﬁd_wrôe_•a˚
)(
	msock
 *);

167 
	#XPRT_LAST_FRAG
 (1 << 0)

	)

168 
	#XPRT_COPY_RECM
 (1 << 1)

	)

169 
	#XPRT_COPY_XID
 (1 << 2)

	)

170 
	#XPRT_COPY_DATA
 (1 << 3)

	)

	@linux/swap.h

12 #i‚de‡
_LINUX_SWAP_H


13 
	#_LINUX_SWAP_H


	)

15 
	~<löux/•ölock.h
>

16 
	~<löux/lökage.h
>

17 
	~<löux/mmz⁄e.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/sched.h
>

21 
	~<asm/©omic.h
>

22 
	~<asm/∑ge.h
>

24 
	#SWAP_FLAG_PREFER
 0x8000

	)

25 
	#SWAP_FLAG_PRIO_MASK
 0x7fff

	)

26 
	#SWAP_FLAG_PRIO_SHIFT
 0

	)

28 
	#MAX_SWAPFILES_SHIFT
 5

	)

29 
	#MAX_SWAPFILES
 (1 << 
MAX_SWAPFILES_SHIFT
)

	)

32 
	mvÆ
;

33 } 
	tswp_íåy_t
;

35 
	sª˛aim_°©e
 {

36 
	mª˛aimed_¶ab
;

	@linux/sysctl.h

12 #i‚de‡
_LINUX_SYSCTL_H


13 
	#_LINUX_SYSCTL_H


	)

15 
	~<löux/kî√l.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/compûî.h
>

19 
	gfûe
;

20 
	gcom∂ëi⁄
;

22 
	#CTL_MAXNAME
 10

	)

24 
	s__sys˘l_¨gs
 {

25 
__u£r
 *
	m«me
;

26 
	m∆í
;

27 
__u£r
 *
	mﬁdvÆ
;

28 
size_t
 
__u£r
 *
	mﬁdÀ≈
;

29 
__u£r
 *
	m√wvÆ
;

30 
size_t
 
	m√wÀn
;

31 
	m__löux_unu£d
[4];

36 
	mCTL_KERN
=1,

37 
	mCTL_VM
=2,

38 
	mCTL_NET
=3,

40 
	mCTL_FS
=5,

41 
	mCTL_DEBUG
=6,

42 
	mCTL_DEV
=7,

43 
	mCTL_BUS
=8,

44 
	mCTL_ABI
=9,

45 
	mCTL_CPU
=10

50 
	mCTL_BUS_ISA
=1

55 
	mINOTIFY_MAX_USER_INSTANCES
=1,

56 
	mINOTIFY_MAX_USER_WATCHES
=2,

57 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

62 
	mKERN_OSTYPE
=1,

63 
	mKERN_OSRELEASE
=2,

64 
	mKERN_OSREV
=3,

65 
	mKERN_VERSION
=4,

66 
	mKERN_SECUREMASK
=5,

67 
	mKERN_PROF
=6,

68 
	mKERN_NODENAME
=7,

69 
	mKERN_DOMAINNAME
=8,

71 
	mKERN_CAP_BSET
=14,

72 
	mKERN_PANIC
=15,

73 
	mKERN_REALROOTDEV
=16,

75 
	mKERN_SPARC_REBOOT
=21,

76 
	mKERN_CTLALTDEL
=22,

77 
	mKERN_PRINTK
=23,

78 
	mKERN_NAMETRANS
=24,

79 
	mKERN_PPC_HTABRECLAIM
=25,

80 
	mKERN_PPC_ZEROPAGED
=26,

81 
	mKERN_PPC_POWERSAVE_NAP
=27,

82 
	mKERN_MODPROBE
=28,

83 
	mKERN_SG_BIG_BUFF
=29,

84 
	mKERN_ACCT
=30,

85 
	mKERN_PPC_L2CR
=31,

87 
	mKERN_RTSIGNR
=32,

88 
	mKERN_RTSIGMAX
=33,

90 
	mKERN_SHMMAX
=34,

91 
	mKERN_MSGMAX
=35,

92 
	mKERN_MSGMNB
=36,

93 
	mKERN_MSGPOOL
=37,

94 
	mKERN_SYSRQ
=38,

95 
	mKERN_MAX_THREADS
=39,

96 
	mKERN_RANDOM
=40,

97 
	mKERN_SHMALL
=41,

98 
	mKERN_MSGMNI
=42,

99 
	mKERN_SEM
=43,

100 
	mKERN_SPARC_STOP_A
=44,

101 
	mKERN_SHMMNI
=45,

102 
	mKERN_OVERFLOWUID
=46,

103 
	mKERN_OVERFLOWGID
=47,

104 
	mKERN_SHMPATH
=48,

105 
	mKERN_HOTPLUG
=49,

106 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

107 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

108 
	mKERN_CORE_USES_PID
=52,

109 
	mKERN_TAINTED
=53,

110 
	mKERN_CADPID
=54,

111 
	mKERN_PIDMAX
=55,

112 
	mKERN_CORE_PATTERN
=56,

113 
	mKERN_PANIC_ON_OOPS
=57,

114 
	mKERN_HPPA_PWRSW
=58,

115 
	mKERN_HPPA_UNALIGNED
=59,

116 
	mKERN_PRINTK_RATELIMIT
=60,

117 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

118 
	mKERN_PTY
=62,

119 
	mKERN_NGROUPS_MAX
=63,

120 
	mKERN_SPARC_SCONS_PWROFF
=64,

121 
	mKERN_HZ_TIMER
=65,

122 
	mKERN_UNKNOWN_NMI_PANIC
=66,

123 
	mKERN_BOOTLOADER_TYPE
=67,

124 
	mKERN_RANDOMIZE
=68,

125 
	mKERN_SETUID_DUMPABLE
=69,

126 
	mKERN_SPIN_RETRY
=70,

127 
	mKERN_ACPI_VIDEO_FLAGS
=71,

128 
	mKERN_IA64_UNALIGNED
=72,

129 
	mKERN_COMPAT_LOG
=73,

130 
	mKERN_MAX_LOCK_DEPTH
=74,

135 
	mVM_UNUSED1
=1,

136 
	mVM_UNUSED2
=2,

137 
	mVM_UNUSED3
=3,

138 
	mVM_UNUSED4
=4,

139 
	mVM_OVERCOMMIT_MEMORY
=5,

140 
	mVM_UNUSED5
=6,

141 
	mVM_UNUSED7
=7,

142 
	mVM_UNUSED8
=8,

143 
	mVM_UNUSED9
=9,

144 
	mVM_PAGE_CLUSTER
=10,

145 
	mVM_DIRTY_BACKGROUND
=11,

146 
	mVM_DIRTY_RATIO
=12,

147 
	mVM_DIRTY_WB_CS
=13,

148 
	mVM_DIRTY_EXPIRE_CS
=14,

149 
	mVM_NR_PDFLUSH_THREADS
=15,

150 
	mVM_OVERCOMMIT_RATIO
=16,

151 
	mVM_PAGEBUF
=17,

152 
	mVM_HUGETLB_PAGES
=18,

153 
	mVM_SWAPPINESS
=19,

154 
	mVM_LOWMEM_RESERVE_RATIO
=20,

155 
	mVM_MIN_FREE_KBYTES
=21,

156 
	mVM_MAX_MAP_COUNT
=22,

157 
	mVM_LAPTOP_MODE
=23,

158 
	mVM_BLOCK_DUMP
=24,

159 
	mVM_HUGETLB_GROUP
=25,

160 
	mVM_VFS_CACHE_PRESSURE
=26,

161 
	mVM_LEGACY_VA_LAYOUT
=27,

162 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

163 
	mVM_DROP_PAGECACHE
=29,

164 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

165 
	mVM_ZONE_RECLAIM_MODE
=31,

166 
	mVM_MIN_UNMAPPED
=32,

167 
	mVM_PANIC_ON_OOM
=33,

168 
	mVM_VDSO_ENABLED
=34,

173 
	mNET_CORE
=1,

174 
	mNET_ETHER
=2,

175 
	mNET_802
=3,

176 
	mNET_UNIX
=4,

177 
	mNET_IPV4
=5,

178 
	mNET_IPX
=6,

179 
	mNET_ATALK
=7,

180 
	mNET_NETROM
=8,

181 
	mNET_AX25
=9,

182 
	mNET_BRIDGE
=10,

183 
	mNET_ROSE
=11,

184 
	mNET_IPV6
=12,

185 
	mNET_X25
=13,

186 
	mNET_TR
=14,

187 
	mNET_DECNET
=15,

188 
	mNET_ECONET
=16,

189 
	mNET_SCTP
=17,

190 
	mNET_LLC
=18,

191 
	mNET_NETFILTER
=19,

192 
	mNET_DCCP
=20,

197 
	mRANDOM_POOLSIZE
=1,

198 
	mRANDOM_ENTROPY_COUNT
=2,

199 
	mRANDOM_READ_THRESH
=3,

200 
	mRANDOM_WRITE_THRESH
=4,

201 
	mRANDOM_BOOT_ID
=5,

202 
	mRANDOM_UUID
=6

207 
	mPTY_MAX
=1,

208 
	mPTY_NR
=2

213 
	mBUS_ISA_MEM_BASE
=1,

214 
	mBUS_ISA_PORT_BASE
=2,

215 
	mBUS_ISA_PORT_SHIFT
=3

220 
	mNET_CORE_WMEM_MAX
=1,

221 
	mNET_CORE_RMEM_MAX
=2,

222 
	mNET_CORE_WMEM_DEFAULT
=3,

223 
	mNET_CORE_RMEM_DEFAULT
=4,

225 
	mNET_CORE_MAX_BACKLOG
=6,

226 
	mNET_CORE_FASTROUTE
=7,

227 
	mNET_CORE_MSG_COST
=8,

228 
	mNET_CORE_MSG_BURST
=9,

229 
	mNET_CORE_OPTMEM_MAX
=10,

230 
	mNET_CORE_HOT_LIST_LENGTH
=11,

231 
	mNET_CORE_DIVERT_VERSION
=12,

232 
	mNET_CORE_NO_CONG_THRESH
=13,

233 
	mNET_CORE_NO_CONG
=14,

234 
	mNET_CORE_LO_CONG
=15,

235 
	mNET_CORE_MOD_CONG
=16,

236 
	mNET_CORE_DEV_WEIGHT
=17,

237 
	mNET_CORE_SOMAXCONN
=18,

238 
	mNET_CORE_BUDGET
=19,

239 
	mNET_CORE_AEVENT_ETIME
=20,

240 
	mNET_CORE_AEVENT_RSEQTH
=21,

245 
	mNET_UNIX_DESTROY_DELAY
=1,

246 
	mNET_UNIX_DELETE_DELAY
=2,

247 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

252 
	mNET_NF_CONNTRACK_MAX
=1,

253 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

254 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

255 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

256 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

257 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

258 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

259 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

260 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

261 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

262 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

263 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

264 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

265 
	mNET_NF_CONNTRACK_BUCKETS
=14,

266 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

267 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

268 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

269 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

270 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

271 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

272 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

273 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

274 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

275 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

276 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

277 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

278 
	mNET_NF_CONNTRACK_COUNT
=27,

279 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

280 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

281 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

282 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

283 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

289 
	mNET_IPV4_FORWARD
=8,

290 
	mNET_IPV4_DYNADDR
=9,

292 
	mNET_IPV4_CONF
=16,

293 
	mNET_IPV4_NEIGH
=17,

294 
	mNET_IPV4_ROUTE
=18,

295 
	mNET_IPV4_FIB_HASH
=19,

296 
	mNET_IPV4_NETFILTER
=20,

298 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

299 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

300 
	mNET_IPV4_TCP_SACK
=35,

301 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

302 
	mNET_IPV4_DEFAULT_TTL
=37,

303 
	mNET_IPV4_AUTOCONFIG
=38,

304 
	mNET_IPV4_NO_PMTU_DISC
=39,

305 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

306 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

307 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

308 
	mNET_IPV4_IPFRAG_TIME
=43,

309 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

310 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

311 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

312 
	mNET_IPV4_TCP_RETRIES1
=47,

313 
	mNET_IPV4_TCP_RETRIES2
=48,

314 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

315 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

316 
	mNET_TCP_SYNCOOKIES
=51,

317 
	mNET_TCP_STDURG
=52,

318 
	mNET_TCP_RFC1337
=53,

319 
	mNET_TCP_SYN_TAILDROP
=54,

320 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

321 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

322 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

323 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

324 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

325 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

326 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

327 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

328 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

329 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

330 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

331 
	mNET_TCP_TW_RECYCLE
=66,

332 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

333 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

334 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

335 
	mNET_IPV4_INET_PEER_MINTTL
=70,

336 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

337 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

338 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

339 
	mNET_TCP_ORPHAN_RETRIES
=74,

340 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

341 
	mNET_TCP_SYNACK_RETRIES
=76,

342 
	mNET_TCP_MAX_ORPHANS
=77,

343 
	mNET_TCP_MAX_TW_BUCKETS
=78,

344 
	mNET_TCP_FACK
=79,

345 
	mNET_TCP_REORDERING
=80,

346 
	mNET_TCP_ECN
=81,

347 
	mNET_TCP_DSACK
=82,

348 
	mNET_TCP_MEM
=83,

349 
	mNET_TCP_WMEM
=84,

350 
	mNET_TCP_RMEM
=85,

351 
	mNET_TCP_APP_WIN
=86,

352 
	mNET_TCP_ADV_WIN_SCALE
=87,

353 
	mNET_IPV4_NONLOCAL_BIND
=88,

354 
	mNET_IPV4_ICMP_RATELIMIT
=89,

355 
	mNET_IPV4_ICMP_RATEMASK
=90,

356 
	mNET_TCP_TW_REUSE
=91,

357 
	mNET_TCP_FRTO
=92,

358 
	mNET_TCP_LOW_LATENCY
=93,

359 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

360 
	mNET_IPV4_IGMP_MAX_MSF
=96,

361 
	mNET_TCP_NO_METRICS_SAVE
=97,

362 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

363 
	mNET_TCP_MODERATE_RCVBUF
=106,

364 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

365 
	mNET_TCP_BIC_BETA
=108,

366 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

367 
	mNET_TCP_CONG_CONTROL
=110,

368 
	mNET_TCP_ABC
=111,

369 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

370 
	mNET_TCP_MTU_PROBING
=113,

371 
	mNET_TCP_BASE_MSS
=114,

372 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

373 
	mNET_TCP_DMA_COPYBREAK
=116,

374 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

378 
	mNET_IPV4_ROUTE_FLUSH
=1,

379 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

380 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

381 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

382 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

383 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

384 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

385 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

386 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

387 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

388 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

389 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

390 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

391 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

392 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

393 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

394 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

395 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

396 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

401 
	mNET_PROTO_CONF_ALL
=-2,

402 
	mNET_PROTO_CONF_DEFAULT
=-3

408 
	mNET_IPV4_CONF_FORWARDING
=1,

409 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

410 
	mNET_IPV4_CONF_PROXY_ARP
=3,

411 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

412 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

413 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

414 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

415 
	mNET_IPV4_CONF_RP_FILTER
=8,

416 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

417 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

418 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

419 
	mNET_IPV4_CONF_TAG
=12,

420 
	mNET_IPV4_CONF_ARPFILTER
=13,

421 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

422 
	mNET_IPV4_CONF_NOXFRM
=15,

423 
	mNET_IPV4_CONF_NOPOLICY
=16,

424 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

425 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

426 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

427 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

428 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

429 
	m__NET_IPV4_CONF_MAX


434 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

435 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

436 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

437 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

438 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

439 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

440 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

441 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

442 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

443 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

444 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

445 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

446 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

447 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

448 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

449 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

450 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

451 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

452 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

453 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

454 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

455 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

456 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

457 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

458 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

459 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

460 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

461 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

465 
	mNET_IPV6_CONF
=16,

466 
	mNET_IPV6_NEIGH
=17,

467 
	mNET_IPV6_ROUTE
=18,

468 
	mNET_IPV6_ICMP
=19,

469 
	mNET_IPV6_BINDV6ONLY
=20,

470 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

471 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

472 
	mNET_IPV6_IP6FRAG_TIME
=23,

473 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

474 
	mNET_IPV6_MLD_MAX_MSF
=25,

478 
	mNET_IPV6_ROUTE_FLUSH
=1,

479 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

480 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

481 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

482 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

483 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

484 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

485 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

486 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

487 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

491 
	mNET_IPV6_FORWARDING
=1,

492 
	mNET_IPV6_HOP_LIMIT
=2,

493 
	mNET_IPV6_MTU
=3,

494 
	mNET_IPV6_ACCEPT_RA
=4,

495 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

496 
	mNET_IPV6_AUTOCONF
=6,

497 
	mNET_IPV6_DAD_TRANSMITS
=7,

498 
	mNET_IPV6_RTR_SOLICITS
=8,

499 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

500 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

501 
	mNET_IPV6_USE_TEMPADDR
=11,

502 
	mNET_IPV6_TEMP_VALID_LFT
=12,

503 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

504 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

505 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

506 
	mNET_IPV6_MAX_ADDRESSES
=16,

507 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

508 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

509 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

510 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

511 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

512 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

513 
	m__NET_IPV6_MAX


517 
	mNET_IPV6_ICMP_RATELIMIT
=1

521 
	mNET_NEIGH_MCAST_SOLICIT
=1,

522 
	mNET_NEIGH_UCAST_SOLICIT
=2,

523 
	mNET_NEIGH_APP_SOLICIT
=3,

524 
	mNET_NEIGH_RETRANS_TIME
=4,

525 
	mNET_NEIGH_REACHABLE_TIME
=5,

526 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

527 
	mNET_NEIGH_GC_STALE_TIME
=7,

528 
	mNET_NEIGH_UNRES_QLEN
=8,

529 
	mNET_NEIGH_PROXY_QLEN
=9,

530 
	mNET_NEIGH_ANYCAST_DELAY
=10,

531 
	mNET_NEIGH_PROXY_DELAY
=11,

532 
	mNET_NEIGH_LOCKTIME
=12,

533 
	mNET_NEIGH_GC_INTERVAL
=13,

534 
	mNET_NEIGH_GC_THRESH1
=14,

535 
	mNET_NEIGH_GC_THRESH2
=15,

536 
	mNET_NEIGH_GC_THRESH3
=16,

537 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

538 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

539 
	m__NET_NEIGH_MAX


543 
	mNET_DCCP_DEFAULT
=1,

547 
	mNET_DCCP_DEFAULT_SEQ_WINDOW
 = 1,

548 
	mNET_DCCP_DEFAULT_RX_CCID
 = 2,

549 
	mNET_DCCP_DEFAULT_TX_CCID
 = 3,

550 
	mNET_DCCP_DEFAULT_ACK_RATIO
 = 4,

551 
	mNET_DCCP_DEFAULT_SEND_ACKVEC
 = 5,

552 
	mNET_DCCP_DEFAULT_SEND_NDP
 = 6,

556 
	mNET_IPX_PPROP_BROADCASTING
=1,

557 
	mNET_IPX_FORWARDING
=2

561 
	mNET_LLC2
=1,

562 
	mNET_LLC_STATION
=2,

566 
	mNET_LLC2_TIMEOUT
=1,

570 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

574 
	mNET_LLC2_ACK_TIMEOUT
=1,

575 
	mNET_LLC2_P_TIMEOUT
=2,

576 
	mNET_LLC2_REJ_TIMEOUT
=3,

577 
	mNET_LLC2_BUSY_TIMEOUT
=4,

581 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

582 
	mNET_ATALK_AARP_TICK_TIME
=2,

583 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

584 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

588 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

589 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

590 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

591 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

592 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

593 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

594 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

595 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

596 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

597 
	mNET_NETROM_ROUTING_CONTROL
=10,

598 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

599 
	mNET_NETROM_RESET
=12

603 
	mNET_AX25_IP_DEFAULT_MODE
=1,

604 
	mNET_AX25_DEFAULT_MODE
=2,

605 
	mNET_AX25_BACKOFF_TYPE
=3,

606 
	mNET_AX25_CONNECT_MODE
=4,

607 
	mNET_AX25_STANDARD_WINDOW
=5,

608 
	mNET_AX25_EXTENDED_WINDOW
=6,

609 
	mNET_AX25_T1_TIMEOUT
=7,

610 
	mNET_AX25_T2_TIMEOUT
=8,

611 
	mNET_AX25_T3_TIMEOUT
=9,

612 
	mNET_AX25_IDLE_TIMEOUT
=10,

613 
	mNET_AX25_N2
=11,

614 
	mNET_AX25_PACLEN
=12,

615 
	mNET_AX25_PROTOCOL
=13,

616 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

620 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

621 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

622 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

623 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

624 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

625 
	mNET_ROSE_ROUTING_CONTROL
=6,

626 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

627 
	mNET_ROSE_MAX_VCS
=8,

628 
	mNET_ROSE_WINDOW_SIZE
=9,

629 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

633 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

634 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

635 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

636 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

637 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5

642 
	mNET_TR_RIF_TIMEOUT
=1

646 
	mNET_DECNET_NODE_TYPE
 = 1,

647 
	mNET_DECNET_NODE_ADDRESS
 = 2,

648 
	mNET_DECNET_NODE_NAME
 = 3,

649 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

650 
	mNET_DECNET_TIME_WAIT
 = 5,

651 
	mNET_DECNET_DN_COUNT
 = 6,

652 
	mNET_DECNET_DI_COUNT
 = 7,

653 
	mNET_DECNET_DR_COUNT
 = 8,

654 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

655 
	mNET_DECNET_CONF
 = 10,

656 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

657 
	mNET_DECNET_MEM
 = 12,

658 
	mNET_DECNET_RMEM
 = 13,

659 
	mNET_DECNET_WMEM
 = 14,

660 
	mNET_DECNET_DEBUG_LEVEL
 = 255

664 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

665 
	mNET_DECNET_CONF_DDCMP
 = -3,

666 
	mNET_DECNET_CONF_PPP
 = -4,

667 
	mNET_DECNET_CONF_X25
 = -5,

668 
	mNET_DECNET_CONF_GRE
 = -6,

669 
	mNET_DECNET_CONF_ETHER
 = -7

674 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

675 
	mNET_DECNET_CONF_DEV_T1
 = 2,

676 
	mNET_DECNET_CONF_DEV_T2
 = 3,

677 
	mNET_DECNET_CONF_DEV_T3
 = 4,

678 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

679 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

680 
	mNET_DECNET_CONF_DEV_STATE
 = 7

684 
	mNET_SCTP_RTO_INITIAL
 = 1,

685 
	mNET_SCTP_RTO_MIN
 = 2,

686 
	mNET_SCTP_RTO_MAX
 = 3,

687 
	mNET_SCTP_RTO_ALPHA
 = 4,

688 
	mNET_SCTP_RTO_BETA
 = 5,

689 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

690 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

691 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

692 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

693 
	mNET_SCTP_HB_INTERVAL
 = 10,

694 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

695 
	mNET_SCTP_MAX_BURST
 = 12,

696 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

697 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

698 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

699 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

700 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

704 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

705 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

706 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

707 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

712 
	mFS_NRINODE
=1,

713 
	mFS_STATINODE
=2,

714 
	mFS_MAXINODE
=3,

715 
	mFS_NRDQUOT
=4,

716 
	mFS_MAXDQUOT
=5,

717 
	mFS_NRFILE
=6,

718 
	mFS_MAXFILE
=7,

719 
	mFS_DENTRY
=8,

720 
	mFS_NRSUPER
=9,

721 
	mFS_MAXSUPER
=10,

722 
	mFS_OVERFLOWUID
=11,

723 
	mFS_OVERFLOWGID
=12,

724 
	mFS_LEASES
=13,

725 
	mFS_DIR_NOTIFY
=14,

726 
	mFS_LEASE_TIME
=15,

727 
	mFS_DQSTATS
=16,

728 
	mFS_XFS
=17,

729 
	mFS_AIO_NR
=18,

730 
	mFS_AIO_MAX_NR
=19,

731 
	mFS_INOTIFY
=20,

735 
	mFS_DQ_LOOKUPS
 = 1,

736 
	mFS_DQ_DROPS
 = 2,

737 
	mFS_DQ_READS
 = 3,

738 
	mFS_DQ_WRITES
 = 4,

739 
	mFS_DQ_CACHE_HITS
 = 5,

740 
	mFS_DQ_ALLOCATED
 = 6,

741 
	mFS_DQ_FREE
 = 7,

742 
	mFS_DQ_SYNCS
 = 8,

743 
	mFS_DQ_WARNINGS
 = 9,

747 
	mDEV_CDROM
=1,

748 
	mDEV_HWMON
=2,

749 
	mDEV_PARPORT
=3,

750 
	mDEV_RAID
=4,

751 
	mDEV_MAC_HID
=5,

752 
	mDEV_SCSI
=6,

753 
	mDEV_IPMI
=7,

757 
	mDEV_CDROM_INFO
=1,

758 
	mDEV_CDROM_AUTOCLOSE
=2,

759 
	mDEV_CDROM_AUTOEJECT
=3,

760 
	mDEV_CDROM_DEBUG
=4,

761 
	mDEV_CDROM_LOCK
=5,

762 
	mDEV_CDROM_CHECK_MEDIA
=6

766 
	mDEV_PARPORT_DEFAULT
=-3

770 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

771 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

775 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

776 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

780 
	mDEV_PARPORT_SPINTIME
=1,

781 
	mDEV_PARPORT_BASE_ADDR
=2,

782 
	mDEV_PARPORT_IRQ
=3,

783 
	mDEV_PARPORT_DMA
=4,

784 
	mDEV_PARPORT_MODES
=5,

785 
	mDEV_PARPORT_DEVICES
=6,

786 
	mDEV_PARPORT_AUTOPROBE
=16

790 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

794 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

798 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

799 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

800 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

801 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

802 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

803 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

807 
	mDEV_SCSI_LOGGING_LEVEL
=1,

811 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

816 
	mABI_DEFHANDLER_COFF
=1,

817 
	mABI_DEFHANDLER_ELF
=2,

818 
	mABI_DEFHANDLER_LCALL7
=3,

819 
	mABI_DEFHANDLER_LIBCSO
=4,

820 
	mABI_TRACE
=5,

821 
	mABI_FAKE_UTSNAME
=6,

	@linux/sysdev.h

12 #i‚de‡
_SYSDEV_H_


13 
	#_SYSDEV_H_


	)

15 
	~<löux/kobje˘.h
>

16 
	~<löux/pm.h
>

18 
	gsys_devi˚
;

20 
	ssysdev_˛ass
 {

21 
li°_hód
 
	mdrivîs
;

23 (*
	mshutdown
)(
	msys_devi˚
 *);

24 (*
	msu•íd
)(
	msys_devi˚
 *, 
pm_mesßge_t
 
	m°©e
);

25 (*
	mªsume
)(
	msys_devi˚
 *);

26 
k£t
 
	mk£t
;

29 
	ssysdev_˛ass_©åibuã
 {

30 
©åibuã
 
	m©å
;

31 
ssize_t
 (*
show
)(
	msysdev_˛ass
 *, *);

32 
ssize_t
 (*
°‹e
)(
	msysdev_˛ass
 *, c⁄° *, 
	msize_t
);

35 
	#SYSDEV_CLASS_ATTR
(
_«me
,
_mode
,
_show
,
_°‹e
Ë
sysdev_˛ass_©åibuã
 
©å_
##_«mê{ .
©å
 = {.
«me
 = 
	`__°rögify
(_«me), .
mode
 = _modê}, .
show
 = _show, .
°‹e
 = _°‹e, };

	)

37 
	ssysdev_drivî
 {

38 
li°_hód
 
	míåy
;

39 (*
	madd
)(
	msys_devi˚
 *);

40 (*
	mªmove
)(
	msys_devi˚
 *);

41 (*
	mshutdown
)(
	msys_devi˚
 *);

42 (*
	msu•íd
)(
	msys_devi˚
 *, 
pm_mesßge_t
 
	m°©e
);

43 (*
	mªsume
)(
	msys_devi˚
 *);

46 
	ssys_devi˚
 {

47 
u32
 
	mid
;

48 
sysdev_˛ass
 * 
	m˛s
;

49 
kobje˘
 
	mkobj
;

52 
	ssysdev_©åibuã
 {

53 
©åibuã
 
	m©å
;

54 
ssize_t
 (*
show
)(
	msys_devi˚
 *, *);

55 
ssize_t
 (*
°‹e
)(
	msys_devi˚
 *, c⁄° *, 
	msize_t
);

58 
	#SYSDEV_ATTR
(
_«me
,
_mode
,
_show
,
_°‹e
Ë
sysdev_©åibuã
 
©å_
##_«mê{ .
©å
 = {.
«me
 = 
	`__°rögify
(_«me), .
mode
 = _modê}, .
show
 = _show, .
°‹e
 = _°‹e, };

	)

	@linux/sysfs.h

12 #i‚de‡
_SYSFS_H_


13 
	#_SYSFS_H_


	)

15 
	~<asm/©omic.h
>

17 
	gkobje˘
;

18 
	gmoduÀ
;

20 
	s©åibuã
 {

21 c⁄° * 
	m«me
;

22 
moduÀ
 * 
	mow√r
;

23 
mode_t
 
	mmode
;

26 
	s©åibuã_group
 {

27 c⁄° * 
	m«me
;

28 
©åibuã
 ** 
	m©ås
;

31 
	#__ATTR
(
_«me
,
_mode
,
_show
,
_°‹e
Ë{ .
©å
 = {.
«me
 = 
	`__°rögify
(_«me), .
mode
 = _mode, .
ow√r
 = 
THIS_MODULE
 }, .
show
 = _show, .
°‹e
 = _°‹e, }

	)

33 
	#__ATTR_RO
(
_«me
Ë{ .
©å
 = { .
«me
 = 
	`__°rögify
(_«me), .
mode
 = 0444, .
ow√r
 = 
THIS_MODULE
 }, .
show
 = _«me##
_show
, }

	)

35 
	#__ATTR_NULL
 { .
©å
 = { .
«me
 = 
NULL
 } }

	)

37 
	#©å_«me
(
_©å
Ë(_©å).
©å
.
«me


	)

39 
	gvm_¨ó_°ru˘
;

41 
	sbö_©åibuã
 {

42 
©åibuã
 
	m©å
;

43 
size_t
 
	msize
;

44 *
	m¥iv©e
;

45 
ssize_t
 (*
ªad
)(
	mkobje˘
 *, *, 
	mloff_t
, 
	msize_t
);

46 
ssize_t
 (*
wrôe
)(
	mkobje˘
 *, *, 
	mloff_t
, 
	msize_t
);

47 (*
	mmm≠
)(
	mkobje˘
 *, 
bö_©åibuã
 *
	m©å
,

48 
vm_¨ó_°ru˘
 *
	mvma
);

51 
	ssysfs_›s
 {

52 
ssize_t
 (*
show
)(
	mkobje˘
 *, 
	m©åibuã
 *,*);

53 
ssize_t
 (*
°‹e
)(
	mkobje˘
 *,
	m©åibuã
 *,c⁄° *, 
	msize_t
);

56 
	ssysfs_dúít
 {

57 
©omic_t
 
	ms_cou¡
;

58 
li°_hód
 
	ms_siblög
;

59 
li°_hód
 
	ms_chûdªn
;

60 * 
	ms_ñemít
;

61 
	ms_ty≥
;

62 
umode_t
 
	ms_mode
;

63 
díåy
 * 
	ms_díåy
;

64 
üâr
 * 
	ms_üâr
;

65 
©omic_t
 
	ms_evít
;

68 
	#SYSFS_ROOT
 0x0001

	)

69 
	#SYSFS_DIR
 0x0002

	)

70 
	#SYSFS_KOBJ_ATTR
 0x0004

	)

71 
	#SYSFS_KOBJ_BIN_ATTR
 0x0008

	)

72 
	#SYSFS_KOBJ_DEVICE
 0x0010

	)

73 
	#SYSFS_KOBJ_LINK
 0x0020

	)

74 
	#SYSFS_NOT_PINNED
 (
SYSFS_KOBJ_ATTR
 | 
SYSFS_KOBJ_BIN_ATTR
 | 
SYSFS_KOBJ_DEVICE
 | 
SYSFS_KOBJ_LINK
)

	)

	@linux/taskstats.h

12 #i‚de‡
_LINUX_TASKSTATS_H


13 
	#_LINUX_TASKSTATS_H


	)

15 
	#TASKSTATS_VERSION
 1

	)

17 
	sèsk°©s
 {

19 
__u16
 
	mvîsi⁄
;

20 
__u16
 
	m∑ddög
[3];

22 
__u64
 
	m˝u_cou¡
;

23 
__u64
 
	m˝u_dñay_tŸÆ
;

25 
__u64
 
	mblkio_cou¡
;

26 
__u64
 
	mblkio_dñay_tŸÆ
;

28 
__u64
 
	msw≠ö_cou¡
;

29 
__u64
 
	msw≠ö_dñay_tŸÆ
;

31 
__u64
 
	m˝u_run_ªÆ_tŸÆ
;

33 
__u64
 
	m˝u_run_vútuÆ_tŸÆ
;

38 
	mTASKSTATS_CMD_UNSPEC
 = 0,

39 
	mTASKSTATS_CMD_GET
,

40 
	mTASKSTATS_CMD_NEW
,

41 
	m__TASKSTATS_CMD_MAX
,

44 
	#TASKSTATS_CMD_MAX
 (
__TASKSTATS_CMD_MAX
 - 1)

	)

47 
	mTASKSTATS_TYPE_UNSPEC
 = 0,

48 
	mTASKSTATS_TYPE_PID
,

49 
	mTASKSTATS_TYPE_TGID
,

50 
	mTASKSTATS_TYPE_STATS
,

51 
	mTASKSTATS_TYPE_AGGR_PID
,

52 
	mTASKSTATS_TYPE_AGGR_TGID
,

53 
	m__TASKSTATS_TYPE_MAX
,

56 
	#TASKSTATS_TYPE_MAX
 (
__TASKSTATS_TYPE_MAX
 - 1)

	)

59 
	mTASKSTATS_CMD_ATTR_UNSPEC
 = 0,

60 
	mTASKSTATS_CMD_ATTR_PID
,

61 
	mTASKSTATS_CMD_ATTR_TGID
,

62 
	mTASKSTATS_CMD_ATTR_REGISTER_CPUMASK
,

63 
	mTASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK
,

64 
	m__TASKSTATS_CMD_ATTR_MAX
,

67 
	#TASKSTATS_CMD_ATTR_MAX
 (
__TASKSTATS_CMD_ATTR_MAX
 - 1)

	)

69 
	#TASKSTATS_GENL_NAME
 "TASKSTATS"

	)

70 
	#TASKSTATS_GENL_VERSION
 0x1

	)

	@linux/taskstats_kern.h

12 #i‚de‡
_LINUX_TASKSTATS_KERN_H


13 
	#_LINUX_TASKSTATS_KERN_H


	)

15 
	~<löux/èsk°©s.h
>

16 
	~<löux/sched.h
>

17 
	~<√t/gíëlök.h
>

	@linux/tcp.h

12 #i‚de‡
_LINUX_TCP_H


13 
	#_LINUX_TCP_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<asm/byã‹dî.h
>

18 
	st˝hdr
 {

19 
__u16
 
	msour˚
;

20 
__u16
 
	mde°
;

21 
__u32
 
	m£q
;

22 
__u32
 
	mack_£q
;

23 #ifde‡
__LITTLE_ENDIAN_BITFIELD


24 
__u16
 
	mªs1
:4,

25 
	mdoff
:4,

26 
	mfö
:1,

27 
	msyn
:1,

28 
	mr°
:1,

29 
	mpsh
:1,

30 
	mack
:1,

31 
	murg
:1,

32 
	me˚
:1,

33 
	mcwr
:1;

34 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

35 
__u16
 
	mdoff
:4,

36 
	mªs1
:4,

37 
	mcwr
:1,

38 
	me˚
:1,

39 
	murg
:1,

40 
	mack
:1,

41 
	mpsh
:1,

42 
	mr°
:1,

43 
	msyn
:1,

44 
	mfö
:1;

48 
__u16
 
	mwödow
;

49 
__u16
 
	mcheck
;

50 
__u16
 
	murg_±r
;

53 
	ut˝_w‹d_hdr
 {

54 
t˝hdr
 
	mhdr
;

55 
__u32
 
	mw‹ds
[5];

58 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

61 
	mTCP_FLAG_CWR
 = 
__c⁄°™t_ht⁄l
(0x00800000),

62 
	mTCP_FLAG_ECE
 = 
__c⁄°™t_ht⁄l
(0x00400000),

63 
	mTCP_FLAG_URG
 = 
__c⁄°™t_ht⁄l
(0x00200000),

64 
	mTCP_FLAG_ACK
 = 
__c⁄°™t_ht⁄l
(0x00100000),

65 
	mTCP_FLAG_PSH
 = 
__c⁄°™t_ht⁄l
(0x00080000),

66 
	mTCP_FLAG_RST
 = 
__c⁄°™t_ht⁄l
(0x00040000),

67 
	mTCP_FLAG_SYN
 = 
__c⁄°™t_ht⁄l
(0x00020000),

68 
	mTCP_FLAG_FIN
 = 
__c⁄°™t_ht⁄l
(0x00010000),

69 
	mTCP_RESERVED_BITS
 = 
__c⁄°™t_ht⁄l
(0x0F000000),

70 
	mTCP_DATA_OFFSET
 = 
__c⁄°™t_ht⁄l
(0xF0000000)

73 
	#TCP_NODELAY
 1

	)

74 
	#TCP_MAXSEG
 2

	)

75 
	#TCP_CORK
 3

	)

76 
	#TCP_KEEPIDLE
 4

	)

77 
	#TCP_KEEPINTVL
 5

	)

78 
	#TCP_KEEPCNT
 6

	)

79 
	#TCP_SYNCNT
 7

	)

80 
	#TCP_LINGER2
 8

	)

81 
	#TCP_DEFER_ACCEPT
 9

	)

82 
	#TCP_WINDOW_CLAMP
 10

	)

83 
	#TCP_INFO
 11

	)

84 
	#TCP_QUICKACK
 12

	)

85 
	#TCP_CONGESTION
 13

	)

87 
	#TCPI_OPT_TIMESTAMPS
 1

	)

88 
	#TCPI_OPT_SACK
 2

	)

89 
	#TCPI_OPT_WSCALE
 4

	)

90 
	#TCPI_OPT_ECN
 8

	)

92 
	et˝_ˇ_°©e


94 
	mTCP_CA_O≥n
 = 0,

95 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

96 
	mTCP_CA_Dis‹dî
 = 1,

97 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

98 
	mTCP_CA_CWR
 = 2,

99 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

100 
	mTCP_CA_Recovîy
 = 3,

101 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

102 
	mTCP_CA_Loss
 = 4

103 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

106 
	st˝_öfo


108 
__u8
 
	mt˝i_°©e
;

109 
__u8
 
	mt˝i_ˇ_°©e
;

110 
__u8
 
	mt˝i_ªå™smôs
;

111 
__u8
 
	mt˝i_¥obes
;

112 
__u8
 
	mt˝i_backoff
;

113 
__u8
 
	mt˝i_›ti⁄s
;

114 
__u8
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

116 
__u32
 
	mt˝i_πo
;

117 
__u32
 
	mt˝i_©o
;

118 
__u32
 
	mt˝i_¢d_mss
;

119 
__u32
 
	mt˝i_rcv_mss
;

121 
__u32
 
	mt˝i_u«cked
;

122 
__u32
 
	mt˝i_ßcked
;

123 
__u32
 
	mt˝i_lo°
;

124 
__u32
 
	mt˝i_ªå™s
;

125 
__u32
 
	mt˝i_Áckës
;

127 
__u32
 
	mt˝i_œ°_d©a_£¡
;

128 
__u32
 
	mt˝i_œ°_ack_£¡
;

129 
__u32
 
	mt˝i_œ°_d©a_ªcv
;

130 
__u32
 
	mt˝i_œ°_ack_ªcv
;

132 
__u32
 
	mt˝i_pmtu
;

133 
__u32
 
	mt˝i_rcv_s°hªsh
;

134 
__u32
 
	mt˝i_πt
;

135 
__u32
 
	mt˝i_πtv¨
;

136 
__u32
 
	mt˝i_¢d_s°hªsh
;

137 
__u32
 
	mt˝i_¢d_cwnd
;

138 
__u32
 
	mt˝i_advmss
;

139 
__u32
 
	mt˝i_ª‹dîög
;

141 
__u32
 
	mt˝i_rcv_πt
;

142 
__u32
 
	mt˝i_rcv_•a˚
;

144 
__u32
 
	mt˝i_tŸÆ_ªå™s
;

	@linux/telephony.h

12 #i‚de‡
TELEPHONY_H


13 
	#TELEPHONY_H


	)

15 
	#TELEPHONY_VERSION
 3013

	)

17 
	#PHONE_VENDOR_IXJ
 1

	)

18 
	#PHONE_VENDOR_QUICKNET
 
PHONE_VENDOR_IXJ


	)

19 
	#PHONE_VENDOR_VOICETRONIX
 2

	)

20 
	#PHONE_VENDOR_ACULAB
 3

	)

21 
	#PHONE_VENDOR_DIGI
 4

	)

22 
	#PHONE_VENDOR_FRANKLIN
 5

	)

24 
	#QTI_PHONEJACK
 100

	)

25 
	#QTI_LINEJACK
 300

	)

26 
	#QTI_PHONEJACK_LITE
 400

	)

27 
	#QTI_PHONEJACK_PCI
 500

	)

28 
	#QTI_PHONECARD
 600

	)

31 
	mvíd‹
 = 0,

32 
	mdevi˚
,

33 
	mp‹t
,

34 
	mcodec
,

35 
	md•


36 } 
	tph⁄e_ˇp
;

38 
	sph⁄e_ˇ∑bûôy
 {

39 
	mdesc
[80];

40 
ph⁄e_ˇp
 
	mˇ±y≥
;

41 
	mˇp
;

42 
	mh™dÀ
;

46 
	mpŸs
 = 0,

47 
	mp°n
,

48 
	mh™d£t
,

49 
	m•ókî


50 } 
	tph⁄e_p‹ts
;

52 
	#PHONE_CAPABILITIES
 
	`_IO
 ('q', 0x80)

	)

53 
	#PHONE_CAPABILITIES_LIST
 
	`_IOR
 ('q', 0x81, 
ph⁄e_ˇ∑bûôy
 *)

	)

54 
	#PHONE_CAPABILITIES_CHECK
 
	`_IOW
 ('q', 0x82, 
ph⁄e_ˇ∑bûôy
 *)

	)

57 
	mm⁄th
[3];

58 
	mday
[3];

59 
	mhour
[3];

60 
	mmö
[3];

61 
	mnumÀn
;

62 
	mnumbî
[11];

63 
	m«mñí
;

64 
	m«me
[80];

65 } 
	tPHONE_CID
;

67 
	#PHONE_RING
 
	`_IO
 ('q', 0x83)

	)

68 
	#PHONE_HOOKSTATE
 
	`_IO
 ('q', 0x84)

	)

69 
	#PHONE_MAXRINGS
 
	`_IOW
 ('q', 0x85, )

	)

70 
	#PHONE_RING_CADENCE
 
	`_IOW
 ('q', 0x86, )

	)

71 
	#OLD_PHONE_RING_START
 
	`_IO
 ('q', 0x87)

	)

72 
	#PHONE_RING_START
 
	`_IOW
 ('q', 0x87, 
PHONE_CID
 *)

	)

73 
	#PHONE_RING_STOP
 
	`_IO
 ('q', 0x88)

	)

75 
	#USA_RING_CADENCE
 0xC0C0

	)

77 
	#PHONE_REC_CODEC
 
	`_IOW
 ('q', 0x89, )

	)

78 
	#PHONE_REC_START
 
	`_IO
 ('q', 0x8A)

	)

79 
	#PHONE_REC_STOP
 
	`_IO
 ('q', 0x8B)

	)

80 
	#PHONE_REC_DEPTH
 
	`_IOW
 ('q', 0x8C, )

	)

81 
	#PHONE_FRAME
 
	`_IOW
 ('q', 0x8D, )

	)

82 
	#PHONE_REC_VOLUME
 
	`_IOW
 ('q', 0x8E, )

	)

83 
	#PHONE_REC_VOLUME_LINEAR
 
	`_IOW
 ('q', 0xDB, )

	)

84 
	#PHONE_REC_LEVEL
 
	`_IO
 ('q', 0x8F)

	)

86 
	#PHONE_PLAY_CODEC
 
	`_IOW
 ('q', 0x90, )

	)

87 
	#PHONE_PLAY_START
 
	`_IO
 ('q', 0x91)

	)

88 
	#PHONE_PLAY_STOP
 
	`_IO
 ('q', 0x92)

	)

89 
	#PHONE_PLAY_DEPTH
 
	`_IOW
 ('q', 0x93, )

	)

90 
	#PHONE_PLAY_VOLUME
 
	`_IOW
 ('q', 0x94, )

	)

91 
	#PHONE_PLAY_VOLUME_LINEAR
 
	`_IOW
 ('q', 0xDC, )

	)

92 
	#PHONE_PLAY_LEVEL
 
	`_IO
 ('q', 0x95)

	)

93 
	#PHONE_DTMF_READY
 
	`_IOR
 ('q', 0x96, )

	)

94 
	#PHONE_GET_DTMF
 
	`_IOR
 ('q', 0x97, )

	)

95 
	#PHONE_GET_DTMF_ASCII
 
	`_IOR
 ('q', 0x98, )

	)

96 
	#PHONE_DTMF_OOB
 
	`_IOW
 ('q', 0x99, )

	)

97 
	#PHONE_EXCEPTION
 
	`_IOR
 ('q', 0x9A, )

	)

98 
	#PHONE_PLAY_TONE
 
	`_IOW
 ('q', 0x9B, )

	)

99 
	#PHONE_SET_TONE_ON_TIME
 
	`_IOW
 ('q', 0x9C, )

	)

100 
	#PHONE_SET_TONE_OFF_TIME
 
	`_IOW
 ('q', 0x9D, )

	)

101 
	#PHONE_GET_TONE_ON_TIME
 
	`_IO
 ('q', 0x9E)

	)

102 
	#PHONE_GET_TONE_OFF_TIME
 
	`_IO
 ('q', 0x9F)

	)

103 
	#PHONE_GET_TONE_STATE
 
	`_IO
 ('q', 0xA0)

	)

104 
	#PHONE_BUSY
 
	`_IO
 ('q', 0xA1)

	)

105 
	#PHONE_RINGBACK
 
	`_IO
 ('q', 0xA2)

	)

106 
	#PHONE_DIALTONE
 
	`_IO
 ('q', 0xA3)

	)

107 
	#PHONE_CPT_STOP
 
	`_IO
 ('q', 0xA4)

	)

109 
	#PHONE_PSTN_SET_STATE
 
	`_IOW
 ('q', 0xA4, )

	)

110 
	#PHONE_PSTN_GET_STATE
 
	`_IO
 ('q', 0xA5)

	)

112 
	#PSTN_ON_HOOK
 0

	)

113 
	#PSTN_RINGING
 1

	)

114 
	#PSTN_OFF_HOOK
 2

	)

115 
	#PSTN_PULSE_DIAL
 3

	)

117 
	#PHONE_WINK_DURATION
 
	`_IOW
 ('q', 0xA6, )

	)

118 
	#PHONE_WINK
 
	`_IOW
 ('q', 0xAA, )

	)

121 
	mG723_63
 = 1,

122 
	mG723_53
 = 2,

123 
	mTS85
 = 3,

124 
	mTS48
 = 4,

125 
	mTS41
 = 5,

126 
	mG728
 = 6,

127 
	mG729
 = 7,

128 
	mULAW
 = 8,

129 
	mALAW
 = 9,

130 
	mLINEAR16
 = 10,

131 
	mLINEAR8
 = 11,

132 
	mWSS
 = 12,

133 
	mG729B
 = 13

134 } 
	tph⁄e_codec
;

136 
	sph⁄e_codec_d©a


138 
ph⁄e_codec
 
	mty≥
;

139 
	mbuf_mö
, 
	mbuf_›t
, 
	mbuf_max
;

142 
	#PHONE_QUERY_CODEC
 
	`_IOWR
 ('q', 0xA7, 
ph⁄e_codec_d©a
 *)

	)

143 
	#PHONE_PSTN_LINETEST
 
	`_IO
 ('q', 0xA8)

	)

145 
	#PHONE_VAD
 
	`_IOW
 ('q', 0xA9, )

	)

147 
	sph⁄e_ex˚±


149 
	mdtmf_ªady
:1;

150 
	mhook°©e
:1;

151 
	mp°n_rög
:1;

152 
	mˇŒî_id
:1;

153 
	mp°n_wök
:1;

154 
	mf0
:1;

155 
	mf1
:1;

156 
	mf2
:1;

157 
	mf3
:1;

158 
	mÊash
:1;

159 
	mfc0
:1;

160 
	mfc1
:1;

161 
	mfc2
:1;

162 
	mfc3
:1;

163 
	mª£rved
:18;

166 
	uãÀph⁄y_ex˚±i⁄
 {

167 
ph⁄e_ex˚±
 
	mbôs
;

168 
	mbyãs
;

	@linux/termios.h

12 #i‚de‡
_LINUX_TERMIOS_H


13 
	#_LINUX_TERMIOS_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<asm/ãrmios.h
>

	@linux/textsearch.h

12 #i‚de‡
__LINUX_TEXTSEARCH_H


13 
	#__LINUX_TEXTSEARCH_H


	)

	@linux/thread_info.h

12 #i‚de‡
_LINUX_THREAD_INFO_H


13 
	#_LINUX_THREAD_INFO_H


	)

15 
	sª°¨t_block
 {

16 (*
	m‚
)(
	mª°¨t_block
 *);

17 
	m¨g0
, 
	m¨g1
, 
	m¨g2
, 
	m¨g3
;

20 
	~<löux/bô›s.h
>

21 
	~<asm/thªad_öfo.h
>

	@linux/threads.h

12 #i‚de‡
_LINUX_THREADS_H


13 
	#_LINUX_THREADS_H


	)

15 
	#NR_CPUS
 1

	)

17 
	#MIN_THREADS_LEFT_FOR_ROOT
 4

	)

19 
	#PID_MAX_DEFAULT
 (
CONFIG_BASE_SMALL
 ? 0x1000 : 0x8000)

	)

21 
	#PID_MAX_LIMIT
 (
CONFIG_BASE_SMALL
 ? 
PAGE_SIZE
 * 8 : ((Ë> 4 ? 4 * 1024 * 1024 : 
PID_MAX_DEFAULT
))

	)

	@linux/time.h

12 #i‚de‡
_LINUX_TIME_H


13 
	#_LINUX_TIME_H


	)

15 
	~<löux/ty≥s.h
>

17 #i‚de‡
_STRUCT_TIMESPEC


18 
	#_STRUCT_TIMESPEC


	)

19 
	stime•ec
 {

20 
time_t
 
	mtv_£c
;

21 
	mtv_n£c
;

25 
	stimevÆ
 {

26 
time_t
 
	mtv_£c
;

27 
su£c⁄ds_t
 
	mtv_u£c
;

30 
	stimez⁄e
 {

31 
	mtz_möuãswe°
;

32 
	mtz_d°time
;

35 
	#NFDBITS
 
__NFDBITS


	)

37 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

38 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

39 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

40 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

41 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

43 
	#ITIMER_REAL
 0

	)

44 
	#ITIMER_VIRTUAL
 1

	)

45 
	#ITIMER_PROF
 2

	)

47 
	sôimî•ec
 {

48 
time•ec
 
	mô_öãrvÆ
;

49 
time•ec
 
	mô_vÆue
;

52 
	sôimîvÆ
 {

53 
timevÆ
 
	mô_öãrvÆ
;

54 
timevÆ
 
	mô_vÆue
;

57 
	#CLOCK_REALTIME
 0

	)

58 
	#CLOCK_MONOTONIC
 1

	)

59 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

60 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

62 
	#CLOCK_SGI_CYCLE
 10

	)

63 
	#MAX_CLOCKS
 16

	)

64 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

65 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

67 
	#TIMER_ABSTIME
 0x01

	)

	@linux/timer.h

12 #i‚de‡
_LINUX_TIMER_H


13 
	#_LINUX_TIMER_H


	)

15 
	~<löux/li°.h
>

16 
	~<löux/•ölock.h
>

17 
	~<löux/°ddef.h
>

19 
	gtvec_t_ba£_s
;

21 
	stimî_li°
 {

22 
li°_hód
 
	míåy
;

23 
	mexpúes
;

25 (*
	mfun˘i⁄
)();

26 
	md©a
;

28 
tvec_t_ba£_s
 *
	mba£
;

31 
	#TIMER_INITIALIZER
(
_fun˘i⁄
, 
_expúes
, 
_d©a
Ë{ .
fun˘i⁄
 = (_fun˘i⁄), .
expúes
 = (_expúes), .
d©a
 = (_d©a), .
ba£
 = &
boŸ_tvec_ba£s
, }

	)

33 
	#DEFINE_TIMER
(
_«me
, 
_fun˘i⁄
, 
_expúes
, 
_d©a
Ë
timî_li°
 _«mê
	`TIMER_INITIALIZER
(_fun˘i⁄, _expúes, _d©a)

	)

35 
	#åy_to_dñ_timî_sync
(
t
Ë
	`dñ_timî
—)

	)

36 
	#dñ_timî_sync
(
t
Ë
	`dñ_timî
—)

	)

37 
	#dñ_sögÀshŸ_timî_sync
(
t
Ë
	`dñ_timî_sync
—)

	)

39 
	ghπimî
;

	@linux/times.h

12 #i‚de‡
_LINUX_TIMES_H


13 
	#_LINUX_TIMES_H


	)

15 
	~<löux/ty≥s.h
>

17 
	stms
 {

18 
˛ock_t
 
	mtms_utime
;

19 
˛ock_t
 
	mtms_°ime
;

20 
˛ock_t
 
	mtms_cutime
;

21 
˛ock_t
 
	mtms_c°ime
;

	@linux/timex.h

12 #i‚de‡
_LINUX_TIMEX_H


13 
	#_LINUX_TIMEX_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/time.h
>

18 
	~<asm/∑øm.h
>

20 
	#SHIFT_KG
 6

	)

21 
	#SHIFT_KF
 16

	)

22 
	#SHIFT_KH
 2

	)

23 
	#MAXTC
 6

	)

25 
	#SHIFT_SCALE
 22

	)

26 
	#SHIFT_UPDATE
 (
SHIFT_KG
 + 
MAXTC
)

	)

27 
	#SHIFT_USEC
 16

	)

28 
	#FINENSEC
 (1L << (
SHIFT_SCALE
 - 10))

	)

30 
	#MAXPHASE
 512000L

	)

31 
	#MAXFREQ
 (512L << 
SHIFT_USEC
)

	)

32 
	#MINSEC
 16L

	)

33 
	#MAXSEC
 1200L

	)

34 
	#NTP_PHASE_LIMIT
 (
MAXPHASE
 << 5)

	)

36 
	stimex
 {

37 
	mmodes
;

38 
	moff£t
;

39 
	m‰eq
;

40 
	mmaxîr‹
;

41 
	me°îr‹
;

42 
	m°©us
;

43 
	mc⁄°™t
;

44 
	m¥ecisi⁄
;

45 
	mtﬁî™˚
;

46 
timevÆ
 
	mtime
;

47 
	mtick
;

49 
	mµs‰eq
;

50 
	mjôãr
;

51 
	mshi·
;

52 
	m°abû
;

53 
	mjô˙t
;

54 
	mˇl˙t
;

55 
	mîr˙t
;

56 
	m°b˙t
;

63 
	#ADJ_OFFSET
 0x0001

	)

64 
	#ADJ_FREQUENCY
 0x0002

	)

65 
	#ADJ_MAXERROR
 0x0004

	)

66 
	#ADJ_ESTERROR
 0x0008

	)

67 
	#ADJ_STATUS
 0x0010

	)

68 
	#ADJ_TIMECONST
 0x0020

	)

69 
	#ADJ_TICK
 0x4000

	)

70 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

72 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

73 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

74 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

75 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

76 
	#MOD_STATUS
 
ADJ_STATUS


	)

77 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

78 
	#MOD_CLKB
 
ADJ_TICK


	)

79 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

81 
	#STA_PLL
 0x0001

	)

82 
	#STA_PPSFREQ
 0x0002

	)

83 
	#STA_PPSTIME
 0x0004

	)

84 
	#STA_FLL
 0x0008

	)

86 
	#STA_INS
 0x0010

	)

87 
	#STA_DEL
 0x0020

	)

88 
	#STA_UNSYNC
 0x0040

	)

89 
	#STA_FREQHOLD
 0x0080

	)

91 
	#STA_PPSSIGNAL
 0x0100

	)

92 
	#STA_PPSJITTER
 0x0200

	)

93 
	#STA_PPSWANDER
 0x0400

	)

94 
	#STA_PPSERROR
 0x0800

	)

96 
	#STA_CLOCKERR
 0x1000

	)

98 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | 
STA_PPSERROR
 | 
STA_CLOCKERR
)

	)

100 
	#TIME_OK
 0

	)

101 
	#TIME_INS
 1

	)

102 
	#TIME_DEL
 2

	)

103 
	#TIME_OOP
 3

	)

104 
	#TIME_WAIT
 4

	)

105 
	#TIME_ERROR
 5

	)

106 
	#TIME_BAD
 
TIME_ERROR


	)

	@linux/tiocl.h

12 #i‚de‡
_LINUX_TIOCL_H


13 
	#_LINUX_TIOCL_H


	)

15 
	#TIOCL_SETSEL
 2

	)

16 
	#TIOCL_SELCHAR
 0

	)

17 
	#TIOCL_SELWORD
 1

	)

18 
	#TIOCL_SELLINE
 2

	)

19 
	#TIOCL_SELPOINTER
 3

	)

20 
	#TIOCL_SELCLEAR
 4

	)

21 
	#TIOCL_SELMOUSEREPORT
 16

	)

22 
	#TIOCL_SELBUTTONMASK
 15

	)

24 
	stio˛_£À˘i⁄
 {

25 
	mxs
;

26 
	mys
;

27 
	mxe
;

28 
	mye
;

29 
	m£l_mode
;

32 
	#TIOCL_PASTESEL
 3

	)

33 
	#TIOCL_UNBLANKSCREEN
 4

	)

35 
	#TIOCL_SELLOADLUT
 5

	)

37 
	#TIOCL_GETSHIFTSTATE
 6

	)

38 
	#TIOCL_GETMOUSEREPORTING
 7

	)

39 
	#TIOCL_SETVESABLANK
 10

	)

40 
	#TIOCL_SETKMSGREDIRECT
 11

	)

41 
	#TIOCL_GETFGCONSOLE
 12

	)

42 
	#TIOCL_SCROLLCONSOLE
 13

	)

43 
	#TIOCL_BLANKSCREEN
 14

	)

44 
	#TIOCL_BLANKEDSCREEN
 15

	)

45 
	#TIOCL_GETKMSGREDIRECT
 17

	)

	@linux/transport_class.h

12 #i‚de‡
_TRANSPORT_CLASS_H_


13 
	#_TRANSPORT_CLASS_H_


	)

15 
	~<löux/devi˚.h
>

16 
	~<löux/©åibuã_c⁄èöî.h
>

18 
	gå™•‹t_c⁄èöî
;

20 
	så™•‹t_˛ass
 {

21 
˛ass
 
	m˛ass
;

22 (*
	m£tup
)(
	må™•‹t_c⁄èöî
 *, 
	mdevi˚
 *,

23 
	m˛ass_devi˚
 *);

24 (*
	mc⁄figuª
)(
	må™•‹t_c⁄èöî
 *, 
	mdevi˚
 *,

25 
	m˛ass_devi˚
 *);

26 (*
	mªmove
)(
	må™•‹t_c⁄èöî
 *, 
	mdevi˚
 *,

27 
	m˛ass_devi˚
 *);

30 
	#DECLARE_TRANSPORT_CLASS
(
˛s
, 
nm
, 
su
, 
rm
, 
cfg
Ë
å™•‹t_˛ass
 cl†{ .
˛ass
 = { .
«me
 =Çm, }, .
£tup
 = su, .
ªmove
 =Ñm, .
c⁄figuª
 = cfg, }

	)

32 
	s™⁄_å™•‹t_˛ass
 {

33 
å™•‹t_˛ass
 
	mt˛ass
;

34 
©åibuã_c⁄èöî
 
	mc⁄èöî
;

37 
	#DECLARE_ANON_TRANSPORT_CLASS
(
˛s
, 
mtch
, 
cfg
Ë
™⁄_å™•‹t_˛ass
 cl†{ .
t˛ass
 = { .
c⁄figuª
 = cfg, }, . 
c⁄èöî
 = { .
m©ch
 = mtch, }, }

	)

39 
	#˛ass_to_å™•‹t_˛ass
(
x
Ë
	`c⁄èöî_of
(x, 
å™•‹t_˛ass
, 
˛ass
)

	)

41 
	så™•‹t_c⁄èöî
 {

42 
©åibuã_c⁄èöî
 
	mac
;

43 
©åibuã_group
 *
	m°©i°ics
;

46 
	#©åibuã_c⁄èöî_to_å™•‹t_c⁄èöî
(
x
Ë
	`c⁄èöî_of
(x, 
å™•‹t_c⁄èöî
, 
ac
)

	)

	@linux/tty.h

12 #i‚de‡
_LINUX_TTY_H


13 
	#_LINUX_TTY_H


	)

	@linux/types.h

12 #i‚de‡
_LINUX_TYPES_H


13 
	#_LINUX_TYPES_H


	)

15 
	~<löux/posix_ty≥s.h
>

16 
	~<asm/ty≥s.h
>

18 
	#__bôwi£__


	)

19 
	#__bôwi£


	)

21 
__u16
 
	t__bôwi£
 
	t__À16
;

22 
__u16
 
	t__bôwi£
 
	t__be16
;

23 
__u32
 
	t__bôwi£
 
	t__À32
;

24 
__u32
 
	t__bôwi£
 
	t__be32
;

25 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

26 
__u64
 
	t__bôwi£
 
	t__À64
;

27 
__u64
 
	t__bôwi£
 
	t__be64
;

30 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

32 
	su°©
 {

33 
__kî√l_daddr_t
 
	mf_t‰ì
;

34 
__kî√l_öo_t
 
	mf_töode
;

35 
	mf_‚ame
[6];

36 
	mf_Âack
[6];

	@linux/udp.h

12 #i‚de‡
_LINUX_UDP_H


13 
	#_LINUX_UDP_H


	)

15 
	~<löux/ty≥s.h
>

17 
	sudphdr
 {

18 
__u16
 
	msour˚
;

19 
__u16
 
	mde°
;

20 
__u16
 
	mÀn
;

21 
__u16
 
	mcheck
;

24 
	#UDP_CORK
 1

	)

25 
	#UDP_ENCAP
 100

	)

27 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

28 
	#UDP_ENCAP_ESPINUDP
 2

	)

	@linux/ufs_fs_i.h

12 #i‚de‡
_LINUX_UFS_FS_I_H


13 
	#_LINUX_UFS_FS_I_H


	)

15 
	sufs_öode_öfo
 {

17 
__fs32
 
	mi_d©a
[15];

18 
__u8
 
	mi_symlök
[4*15];

19 
__fs64
 
	mu2_i_d©a
[15];

20 } 
	mi_u1
;

21 
__u32
 
	mi_Êags
;

22 
__u32
 
	mi_gí
;

23 
__u32
 
	mi_shadow
;

24 
__u32
 
	mi_unu£d1
;

25 
__u32
 
	mi_unu£d2
;

26 
__u32
 
	mi_€·Êag
;

27 
__u16
 
	mi_osync
;

28 
__u32
 
	mi_œ°‰ag
;

29 
__u32
 
	mi_dú_°¨t_lookup
;

30 
öode
 
	mvfs_öode
;

	@linux/ufs_fs_sb.h

12 #i‚de‡
__LINUX_UFS_FS_SB_H


13 
	#__LINUX_UFS_FS_SB_H


	)

15 
	#UFS_MAX_GROUP_LOADED
 8

	)

16 
	#UFS_CGNO_EMPTY
 (()-1)

	)

18 
	gufs_sb_¥iv©e_öfo
;

19 
	gufs_cg_¥iv©e_öfo
;

20 
	gufs_csum
;

21 
	#UFS_MAXCSBUFS
 31

	)

23 
	sufs_sb_öfo
 {

24 
ufs_sb_¥iv©e_öfo
 * 
	ms_u•i
;

25 
ufs_csum
 * 
	ms_c•
;

26 
	ms_byã£x
;

27 
	ms_Êags
;

28 
buf„r_hód
 ** 
	ms_ucg
;

29 
ufs_cg_¥iv©e_öfo
 * 
	ms_u˝i
[
UFS_MAX_GROUP_LOADED
];

30 
	ms_cgno
[
UFS_MAX_GROUP_LOADED
];

31 
	ms_cg_lﬂded
;

32 
	ms_mou¡_›t
;

	@linux/uio.h

12 #i‚de‡
__LINUX_UIO_H


13 
	#__LINUX_UIO_H


	)

15 
	~<löux/compûî.h
>

16 
	~<löux/ty≥s.h
>

18 
	siovec


20 
__u£r
 *
	miov_ba£
;

21 
__kî√l_size_t
 
	miov_Àn
;

24 
	#UIO_FASTIOV
 8

	)

25 
	#UIO_MAXIOV
 1024

	)

	@linux/un.h

12 #i‚de‡
_LINUX_UN_H


13 
	#_LINUX_UN_H


	)

15 
	#UNIX_PATH_MAX
 108

	)

17 
	ssockaddr_un
 {

18 
ß_Ámûy_t
 
	msun_Ámûy
;

19 
	msun_∑th
[
UNIX_PATH_MAX
];

	@linux/unistd.h

12 #i‚de‡
_LINUX_UNISTD_H_


13 
	#_LINUX_UNISTD_H_


	)

15 
	~<asm/uni°d.h
>

	@linux/usb.h

12 #i‚de‡
__LINUX_USB_H


13 
	#__LINUX_USB_H


	)

15 
	~<löux/mod_devi˚èbÀ.h
>

16 
	~<löux/usb_ch9.h
>

18 
	#USB_MAJOR
 180

	)

19 
	#USB_DEVICE_MAJOR
 189

	)

	@linux/usb_ch9.h

12 #i‚de‡
__LINUX_USB_CH9_H


13 
	#__LINUX_USB_CH9_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#USB_DIR_OUT
 0

	)

18 
	#USB_DIR_IN
 0x80

	)

20 
	#USB_TYPE_MASK
 (0x03 << 5)

	)

21 
	#USB_TYPE_STANDARD
 (0x00 << 5)

	)

22 
	#USB_TYPE_CLASS
 (0x01 << 5)

	)

23 
	#USB_TYPE_VENDOR
 (0x02 << 5)

	)

24 
	#USB_TYPE_RESERVED
 (0x03 << 5)

	)

26 
	#USB_RECIP_MASK
 0x1f

	)

27 
	#USB_RECIP_DEVICE
 0x00

	)

28 
	#USB_RECIP_INTERFACE
 0x01

	)

29 
	#USB_RECIP_ENDPOINT
 0x02

	)

30 
	#USB_RECIP_OTHER
 0x03

	)

32 
	#USB_RECIP_PORT
 0x04

	)

33 
	#USB_RECIP_RPIPE
 0x05

	)

35 
	#USB_REQ_GET_STATUS
 0x00

	)

36 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

37 
	#USB_REQ_SET_FEATURE
 0x03

	)

38 
	#USB_REQ_SET_ADDRESS
 0x05

	)

39 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

40 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

41 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

42 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

43 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

44 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

45 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

47 
	#USB_REQ_SET_ENCRYPTION
 0x0D

	)

48 
	#USB_REQ_GET_ENCRYPTION
 0x0E

	)

49 
	#USB_REQ_RPIPE_ABORT
 0x0E

	)

50 
	#USB_REQ_SET_HANDSHAKE
 0x0F

	)

51 
	#USB_REQ_RPIPE_RESET
 0x0F

	)

52 
	#USB_REQ_GET_HANDSHAKE
 0x10

	)

53 
	#USB_REQ_SET_CONNECTION
 0x11

	)

54 
	#USB_REQ_SET_SECURITY_DATA
 0x12

	)

55 
	#USB_REQ_GET_SECURITY_DATA
 0x13

	)

56 
	#USB_REQ_SET_WUSB_DATA
 0x14

	)

57 
	#USB_REQ_LOOPBACK_DATA_WRITE
 0x15

	)

58 
	#USB_REQ_LOOPBACK_DATA_READ
 0x16

	)

59 
	#USB_REQ_SET_INTERFACE_DS
 0x17

	)

61 
	#USB_DEVICE_SELF_POWERED
 0

	)

62 
	#USB_DEVICE_REMOTE_WAKEUP
 1

	)

63 
	#USB_DEVICE_TEST_MODE
 2

	)

64 
	#USB_DEVICE_BATTERY
 2

	)

65 
	#USB_DEVICE_B_HNP_ENABLE
 3

	)

66 
	#USB_DEVICE_WUSB_DEVICE
 3

	)

67 
	#USB_DEVICE_A_HNP_SUPPORT
 4

	)

68 
	#USB_DEVICE_A_ALT_HNP_SUPPORT
 5

	)

69 
	#USB_DEVICE_DEBUG_MODE
 6

	)

71 
	#USB_ENDPOINT_HALT
 0

	)

73 
	susb_˘æªque°
 {

74 
__u8
 
	mbReque°Ty≥
;

75 
__u8
 
	mbReque°
;

76 
__À16
 
	mwVÆue
;

77 
__À16
 
	mwIndex
;

78 
__À16
 
	mwLígth
;

79 } 
__©åibuã__
 ((
∑cked
));

81 
	#USB_DT_DEVICE
 0x01

	)

82 
	#USB_DT_CONFIG
 0x02

	)

83 
	#USB_DT_STRING
 0x03

	)

84 
	#USB_DT_INTERFACE
 0x04

	)

85 
	#USB_DT_ENDPOINT
 0x05

	)

86 
	#USB_DT_DEVICE_QUALIFIER
 0x06

	)

87 
	#USB_DT_OTHER_SPEED_CONFIG
 0x07

	)

88 
	#USB_DT_INTERFACE_POWER
 0x08

	)

90 
	#USB_DT_OTG
 0x09

	)

91 
	#USB_DT_DEBUG
 0x0a

	)

92 
	#USB_DT_INTERFACE_ASSOCIATION
 0x0b

	)

94 
	#USB_DT_SECURITY
 0x0c

	)

95 
	#USB_DT_KEY
 0x0d

	)

96 
	#USB_DT_ENCRYPTION_TYPE
 0x0e

	)

97 
	#USB_DT_BOS
 0x0f

	)

98 
	#USB_DT_DEVICE_CAPABILITY
 0x10

	)

99 
	#USB_DT_WIRELESS_ENDPOINT_COMP
 0x11

	)

100 
	#USB_DT_WIRE_ADAPTER
 0x21

	)

101 
	#USB_DT_RPIPE
 0x22

	)

103 
	#USB_DT_CS_DEVICE
 0x21

	)

104 
	#USB_DT_CS_CONFIG
 0x22

	)

105 
	#USB_DT_CS_STRING
 0x23

	)

106 
	#USB_DT_CS_INTERFACE
 0x24

	)

107 
	#USB_DT_CS_ENDPOINT
 0x25

	)

109 
	susb_des¸ùt‹_hódî
 {

110 
__u8
 
	mbLígth
;

111 
__u8
 
	mbDes¸ùt‹Ty≥
;

112 } 
__©åibuã__
 ((
∑cked
));

114 
	susb_devi˚_des¸ùt‹
 {

115 
__u8
 
	mbLígth
;

116 
__u8
 
	mbDes¸ùt‹Ty≥
;

118 
__À16
 
	mbcdUSB
;

119 
__u8
 
	mbDevi˚Cœss
;

120 
__u8
 
	mbDevi˚SubCœss
;

121 
__u8
 
	mbDevi˚PrŸocﬁ
;

122 
__u8
 
	mbMaxPackëSize0
;

123 
__À16
 
	midVíd‹
;

124 
__À16
 
	midProdu˘
;

125 
__À16
 
	mbcdDevi˚
;

126 
__u8
 
	miM™uÁ˘uªr
;

127 
__u8
 
	miProdu˘
;

128 
__u8
 
	miSîülNumbî
;

129 
__u8
 
	mbNumC⁄figuøti⁄s
;

130 } 
__©åibuã__
 ((
∑cked
));

132 
	#USB_DT_DEVICE_SIZE
 18

	)

134 
	#USB_CLASS_PER_INTERFACE
 0

	)

135 
	#USB_CLASS_AUDIO
 1

	)

136 
	#USB_CLASS_COMM
 2

	)

137 
	#USB_CLASS_HID
 3

	)

138 
	#USB_CLASS_PHYSICAL
 5

	)

139 
	#USB_CLASS_STILL_IMAGE
 6

	)

140 
	#USB_CLASS_PRINTER
 7

	)

141 
	#USB_CLASS_MASS_STORAGE
 8

	)

142 
	#USB_CLASS_HUB
 9

	)

143 
	#USB_CLASS_CDC_DATA
 0x0a

	)

144 
	#USB_CLASS_CSCID
 0x0b

	)

145 
	#USB_CLASS_CONTENT_SEC
 0x0d

	)

146 
	#USB_CLASS_VIDEO
 0x0e

	)

147 
	#USB_CLASS_WIRELESS_CONTROLLER
 0xe0

	)

148 
	#USB_CLASS_APP_SPEC
 0x„

	)

149 
	#USB_CLASS_VENDOR_SPEC
 0xff

	)

151 
	susb_c⁄fig_des¸ùt‹
 {

152 
__u8
 
	mbLígth
;

153 
__u8
 
	mbDes¸ùt‹Ty≥
;

155 
__À16
 
	mwTŸÆLígth
;

156 
__u8
 
	mbNumI¡îÁ˚s
;

157 
__u8
 
	mbC⁄figuøti⁄VÆue
;

158 
__u8
 
	miC⁄figuøti⁄
;

159 
__u8
 
	mbmAâribuãs
;

160 
__u8
 
	mbMaxPowî
;

161 } 
__©åibuã__
 ((
∑cked
));

163 
	#USB_DT_CONFIG_SIZE
 9

	)

165 
	#USB_CONFIG_ATT_ONE
 (1 << 7)

	)

166 
	#USB_CONFIG_ATT_SELFPOWER
 (1 << 6)

	)

167 
	#USB_CONFIG_ATT_WAKEUP
 (1 << 5)

	)

168 
	#USB_CONFIG_ATT_BATTERY
 (1 << 4)

	)

170 
	susb_°rög_des¸ùt‹
 {

171 
__u8
 
	mbLígth
;

172 
__u8
 
	mbDes¸ùt‹Ty≥
;

174 
__À16
 
	mwD©a
[1];

175 } 
__©åibuã__
 ((
∑cked
));

177 
	susb_öãrÁ˚_des¸ùt‹
 {

178 
__u8
 
	mbLígth
;

179 
__u8
 
	mbDes¸ùt‹Ty≥
;

181 
__u8
 
	mbI¡îÁ˚Numbî
;

182 
__u8
 
	mbA…î«ãSëtög
;

183 
__u8
 
	mbNumEndpoöts
;

184 
__u8
 
	mbI¡îÁ˚Cœss
;

185 
__u8
 
	mbI¡îÁ˚SubCœss
;

186 
__u8
 
	mbI¡îÁ˚PrŸocﬁ
;

187 
__u8
 
	miI¡îÁ˚
;

188 } 
__©åibuã__
 ((
∑cked
));

190 
	#USB_DT_INTERFACE_SIZE
 9

	)

192 
	susb_ídpoöt_des¸ùt‹
 {

193 
__u8
 
	mbLígth
;

194 
__u8
 
	mbDes¸ùt‹Ty≥
;

196 
__u8
 
	mbEndpoötAddªss
;

197 
__u8
 
	mbmAâribuãs
;

198 
__À16
 
	mwMaxPackëSize
;

199 
__u8
 
	mbI¡îvÆ
;

201 
__u8
 
	mbRe‰esh
;

202 
__u8
 
	mbSynchAddªss
;

203 } 
__©åibuã__
 ((
∑cked
));

205 
	#USB_DT_ENDPOINT_SIZE
 7

	)

206 
	#USB_DT_ENDPOINT_AUDIO_SIZE
 9

	)

208 
	#USB_ENDPOINT_NUMBER_MASK
 0x0f

	)

209 
	#USB_ENDPOINT_DIR_MASK
 0x80

	)

211 
	#USB_ENDPOINT_XFERTYPE_MASK
 0x03

	)

212 
	#USB_ENDPOINT_XFER_CONTROL
 0

	)

213 
	#USB_ENDPOINT_XFER_ISOC
 1

	)

214 
	#USB_ENDPOINT_XFER_BULK
 2

	)

215 
	#USB_ENDPOINT_XFER_INT
 3

	)

216 
	#USB_ENDPOINT_MAX_ADJUSTABLE
 0x80

	)

218 
	susb_quÆifõr_des¸ùt‹
 {

219 
__u8
 
	mbLígth
;

220 
__u8
 
	mbDes¸ùt‹Ty≥
;

222 
__À16
 
	mbcdUSB
;

223 
__u8
 
	mbDevi˚Cœss
;

224 
__u8
 
	mbDevi˚SubCœss
;

225 
__u8
 
	mbDevi˚PrŸocﬁ
;

226 
__u8
 
	mbMaxPackëSize0
;

227 
__u8
 
	mbNumC⁄figuøti⁄s
;

228 
__u8
 
	mbRESERVED
;

229 } 
__©åibuã__
 ((
∑cked
));

231 
	susb_Ÿg_des¸ùt‹
 {

232 
__u8
 
	mbLígth
;

233 
__u8
 
	mbDes¸ùt‹Ty≥
;

235 
__u8
 
	mbmAâribuãs
;

236 } 
__©åibuã__
 ((
∑cked
));

238 
	#USB_OTG_SRP
 (1 << 0)

	)

239 
	#USB_OTG_HNP
 (1 << 1)

	)

241 
	susb_debug_des¸ùt‹
 {

242 
__u8
 
	mbLígth
;

243 
__u8
 
	mbDes¸ùt‹Ty≥
;

245 
__u8
 
	mbDebugInEndpoöt
;

246 
__u8
 
	mbDebugOutEndpoöt
;

249 
	susb_öãrÁ˚_assoc_des¸ùt‹
 {

250 
__u8
 
	mbLígth
;

251 
__u8
 
	mbDes¸ùt‹Ty≥
;

253 
__u8
 
	mbFú°I¡îÁ˚
;

254 
__u8
 
	mbI¡îÁ˚Cou¡
;

255 
__u8
 
	mbFun˘i⁄Cœss
;

256 
__u8
 
	mbFun˘i⁄SubCœss
;

257 
__u8
 
	mbFun˘i⁄PrŸocﬁ
;

258 
__u8
 
	miFun˘i⁄
;

259 } 
__©åibuã__
 ((
∑cked
));

261 
	susb_£curôy_des¸ùt‹
 {

262 
__u8
 
	mbLígth
;

263 
__u8
 
	mbDes¸ùt‹Ty≥
;

265 
__À16
 
	mwTŸÆLígth
;

266 
__u8
 
	mbNumEn¸y±i⁄Ty≥s
;

269 
	susb_key_des¸ùt‹
 {

270 
__u8
 
	mbLígth
;

271 
__u8
 
	mbDes¸ùt‹Ty≥
;

273 
__u8
 
	mtTKID
[3];

274 
__u8
 
	mbRe£rved
;

275 
__u8
 
	mbKeyD©a
[0];

278 
	susb_í¸y±i⁄_des¸ùt‹
 {

279 
__u8
 
	mbLígth
;

280 
__u8
 
	mbDes¸ùt‹Ty≥
;

282 
__u8
 
	mbEn¸y±i⁄Ty≥
;

283 
	#USB_ENC_TYPE_UNSECURE
 0

	)

284 
	#USB_ENC_TYPE_WIRED
 1

	)

285 
	#USB_ENC_TYPE_CCM_1
 2

	)

286 
	#USB_ENC_TYPE_RSA_1
 3

	)

287 
__u8
 
	mbEn¸y±i⁄VÆue
;

288 
__u8
 
	mbAuthKeyIndex
;

291 
	susb_bos_des¸ùt‹
 {

292 
__u8
 
	mbLígth
;

293 
__u8
 
	mbDes¸ùt‹Ty≥
;

295 
__À16
 
	mwTŸÆLígth
;

296 
__u8
 
	mbNumDevi˚C≠s
;

299 
	susb_dev_ˇp_hódî
 {

300 
__u8
 
	mbLígth
;

301 
__u8
 
	mbDes¸ùt‹Ty≥
;

302 
__u8
 
	mbDevC≠abûôyTy≥
;

305 
	#USB_CAP_TYPE_WIRELESS_USB
 1

	)

307 
	susb_wúñess_ˇp_des¸ùt‹
 {

308 
__u8
 
	mbLígth
;

309 
__u8
 
	mbDes¸ùt‹Ty≥
;

310 
__u8
 
	mbDevC≠abûôyTy≥
;

312 
__u8
 
	mbmAâribuãs
;

313 
	#USB_WIRELESS_P2P_DRD
 (1 << 1)

	)

314 
	#USB_WIRELESS_BEACON_MASK
 (3 << 2)

	)

315 
	#USB_WIRELESS_BEACON_SELF
 (1 << 2)

	)

316 
	#USB_WIRELESS_BEACON_DIRECTED
 (2 << 2)

	)

317 
	#USB_WIRELESS_BEACON_NONE
 (3 << 2)

	)

318 
__À16
 
	mwPHYR©es
;

319 
	#USB_WIRELESS_PHY_53
 (1 << 0)

	)

320 
	#USB_WIRELESS_PHY_80
 (1 << 1)

	)

321 
	#USB_WIRELESS_PHY_107
 (1 << 2)

	)

322 
	#USB_WIRELESS_PHY_160
 (1 << 3)

	)

323 
	#USB_WIRELESS_PHY_200
 (1 << 4)

	)

324 
	#USB_WIRELESS_PHY_320
 (1 << 5)

	)

325 
	#USB_WIRELESS_PHY_400
 (1 << 6)

	)

326 
	#USB_WIRELESS_PHY_480
 (1 << 7)

	)

327 
__u8
 
	mbmTFITXPowîInfo
;

328 
__u8
 
	mbmFFITXPowîInfo
;

329 
__À16
 
	mbmB™dGroup
;

330 
__u8
 
	mbRe£rved
;

333 
	susb_wúñess_ï_comp_des¸ùt‹
 {

334 
__u8
 
	mbLígth
;

335 
__u8
 
	mbDes¸ùt‹Ty≥
;

337 
__u8
 
	mbMaxBur°
;

338 
__u8
 
	mbMaxSequí˚
;

339 
__À16
 
	mwMaxSåómDñay
;

340 
__À16
 
	mwOvîTheAúPackëSize
;

341 
__u8
 
	mbOvîTheAúI¡îvÆ
;

342 
__u8
 
	mbmCompAâribuãs
;

343 
	#USB_ENDPOINT_SWITCH_MASK
 0x03

	)

344 
	#USB_ENDPOINT_SWITCH_NO
 0

	)

345 
	#USB_ENDPOINT_SWITCH_SWITCH
 1

	)

346 
	#USB_ENDPOINT_SWITCH_SCALE
 2

	)

349 
	susb_h™dshake
 {

350 
__u8
 
	mbMesßgeNumbî
;

351 
__u8
 
	mbSètus
;

352 
__u8
 
	mtTKID
[3];

353 
__u8
 
	mbRe£rved
;

354 
__u8
 
	mCDID
[16];

355 
__u8
 
	mn⁄˚
[16];

356 
__u8
 
	mMIC
[8];

359 
	susb_c⁄√˘i⁄_c⁄ãxt
 {

360 
__u8
 
	mCHID
[16];

361 
__u8
 
	mCDID
[16];

362 
__u8
 
	mCK
[16];

365 
	eusb_devi˚_•ìd
 {

366 
	mUSB_SPEED_UNKNOWN
 = 0,

367 
	mUSB_SPEED_LOW
, 
	mUSB_SPEED_FULL
,

368 
	mUSB_SPEED_HIGH
,

369 
	mUSB_SPEED_VARIABLE
,

372 
	eusb_devi˚_°©e
 {

374 
	mUSB_STATE_NOTATTACHED
 = 0,

376 
	mUSB_STATE_ATTACHED
,

377 
	mUSB_STATE_POWERED
,

378 
	mUSB_STATE_UNAUTHENTICATED
,

379 
	mUSB_STATE_RECONNECTING
,

380 
	mUSB_STATE_DEFAULT
,

381 
	mUSB_STATE_ADDRESS
,

382 
	mUSB_STATE_CONFIGURED
,

384 
	mUSB_STATE_SUSPENDED


	@linux/usbdevice_fs.h

12 #i‚de‡
_LINUX_USBDEVICE_FS_H


13 
	#_LINUX_USBDEVICE_FS_H


	)

15 
	~<löux/ty≥s.h
>

17 
	#USBDEVICE_SUPER_MAGIC
 0x9Á2

	)

19 
	susbdevfs_˘æå™s„r
 {

20 
__u8
 
	mbReque°Ty≥
;

21 
__u8
 
	mbReque°
;

22 
__u16
 
	mwVÆue
;

23 
__u16
 
	mwIndex
;

24 
__u16
 
	mwLígth
;

25 
__u32
 
	mtimeout
;

26 
__u£r
 *
	md©a
;

29 
	susbdevfs_bulkå™s„r
 {

30 
	mï
;

31 
	mÀn
;

32 
	mtimeout
;

33 
__u£r
 *
	md©a
;

36 
	susbdevfs_£töãrÁ˚
 {

37 
	möãrÁ˚
;

38 
	mÆt£âög
;

41 
	susbdevfs_disc⁄√˘sig«l
 {

42 
	msigƒ
;

43 
__u£r
 *
	mc⁄ãxt
;

46 
	#USBDEVFS_MAXDRIVERNAME
 255

	)

48 
	susbdevfs_gëdrivî
 {

49 
	möãrÁ˚
;

50 
	mdrivî
[
USBDEVFS_MAXDRIVERNAME
 + 1];

53 
	susbdevfs_c⁄√˘öfo
 {

54 
	mdevnum
;

55 
	m¶ow
;

58 
	#USBDEVFS_URB_SHORT_NOT_OK
 1

	)

59 
	#USBDEVFS_URB_ISO_ASAP
 2

	)

61 
	#USBDEVFS_URB_TYPE_ISO
 0

	)

62 
	#USBDEVFS_URB_TYPE_INTERRUPT
 1

	)

63 
	#USBDEVFS_URB_TYPE_CONTROL
 2

	)

64 
	#USBDEVFS_URB_TYPE_BULK
 3

	)

66 
	susbdevfs_iso_∑ckë_desc
 {

67 
	mÀngth
;

68 
	ma˘uÆ_Àngth
;

69 
	m°©us
;

72 
	susbdevfs_urb
 {

73 
	mty≥
;

74 
	mídpoöt
;

75 
	m°©us
;

76 
	mÊags
;

77 
__u£r
 *
	mbuf„r
;

78 
	mbuf„r_Àngth
;

79 
	ma˘uÆ_Àngth
;

80 
	m°¨t_‰ame
;

81 
	mnumbî_of_∑ckës
;

82 
	mîr‹_cou¡
;

83 
	msigƒ
;

84 *
	mu£rc⁄ãxt
;

85 
usbdevfs_iso_∑ckë_desc
 
	miso_‰ame_desc
[0];

88 
	susbdevfs_io˘l
 {

89 
	mi‚o
;

90 
	mio˘l_code
;

91 
__u£r
 *
	md©a
;

94 
	susbdevfs_hub_p‹töfo
 {

95 
	m≈‹ts
;

96 
	mp‹t
 [127];

99 
	#USBDEVFS_CONTROL
 
	`_IOWR
('U', 0, 
usbdevfs_˘æå™s„r
)

	)

100 
	#USBDEVFS_BULK
 
	`_IOWR
('U', 2, 
usbdevfs_bulkå™s„r
)

	)

101 
	#USBDEVFS_RESETEP
 
	`_IOR
('U', 3, )

	)

102 
	#USBDEVFS_SETINTERFACE
 
	`_IOR
('U', 4, 
usbdevfs_£töãrÁ˚
)

	)

103 
	#USBDEVFS_SETCONFIGURATION
 
	`_IOR
('U', 5, )

	)

104 
	#USBDEVFS_GETDRIVER
 
	`_IOW
('U', 8, 
usbdevfs_gëdrivî
)

	)

105 
	#USBDEVFS_SUBMITURB
 
	`_IOR
('U', 10, 
usbdevfs_urb
)

	)

106 
	#USBDEVFS_SUBMITURB32
 
	`_IOR
('U', 10, 
usbdevfs_urb32
)

	)

107 
	#USBDEVFS_DISCARDURB
 
	`_IO
('U', 11)

	)

108 
	#USBDEVFS_REAPURB
 
	`_IOW
('U', 12, *)

	)

109 
	#USBDEVFS_REAPURB32
 
	`_IOW
('U', 12, 
u32
)

	)

110 
	#USBDEVFS_REAPURBNDELAY
 
	`_IOW
('U', 13, *)

	)

111 
	#USBDEVFS_REAPURBNDELAY32
 
	`_IOW
('U', 13, 
u32
)

	)

112 
	#USBDEVFS_DISCSIGNAL
 
	`_IOR
('U', 14, 
usbdevfs_disc⁄√˘sig«l
)

	)

113 
	#USBDEVFS_CLAIMINTERFACE
 
	`_IOR
('U', 15, )

	)

114 
	#USBDEVFS_RELEASEINTERFACE
 
	`_IOR
('U', 16, )

	)

115 
	#USBDEVFS_CONNECTINFO
 
	`_IOW
('U', 17, 
usbdevfs_c⁄√˘öfo
)

	)

116 
	#USBDEVFS_IOCTL
 
	`_IOWR
('U', 18, 
usbdevfs_io˘l
)

	)

117 
	#USBDEVFS_IOCTL32
 
	`_IOWR
('U', 18, 
usbdevfs_io˘l32
)

	)

118 
	#USBDEVFS_HUB_PORTINFO
 
	`_IOR
('U', 19, 
usbdevfs_hub_p‹töfo
)

	)

119 
	#USBDEVFS_RESET
 
	`_IO
('U', 20)

	)

120 
	#USBDEVFS_CLEAR_HALT
 
	`_IOR
('U', 21, )

	)

121 
	#USBDEVFS_DISCONNECT
 
	`_IO
('U', 22)

	)

122 
	#USBDEVFS_CONNECT
 
	`_IO
('U', 23)

	)

	@linux/user.h

12 
	~<asm/u£r.h
>

	@linux/utime.h

12 #i‚de‡
_LINUX_UTIME_H


13 
	#_LINUX_UTIME_H


	)

15 
	sutimbuf
 {

16 
time_t
 
	ma˘ime
;

17 
time_t
 
	mmodtime
;

	@linux/utsname.h

12 #i‚de‡
_LINUX_UTSNAME_H


13 
	#_LINUX_UTSNAME_H


	)

15 
	#__OLD_UTS_LEN
 8

	)

17 
	sﬁdﬁd_ut¢ame
 {

18 
	msy¢ame
[9];

19 
	mnodíame
[9];

20 
	mªÀa£
[9];

21 
	mvîsi⁄
[9];

22 
	mmachöe
[9];

25 
	#__NEW_UTS_LEN
 64

	)

27 
	sﬁd_ut¢ame
 {

28 
	msy¢ame
[65];

29 
	mnodíame
[65];

30 
	mªÀa£
[65];

31 
	mvîsi⁄
[65];

32 
	mmachöe
[65];

35 
	s√w_ut¢ame
 {

36 
	msy¢ame
[65];

37 
	mnodíame
[65];

38 
	mªÀa£
[65];

39 
	mvîsi⁄
[65];

40 
	mmachöe
[65];

41 
	mdomaö«me
[65];

	@linux/version.h

12 
	#LINUX_VERSION_CODE
 132626

	)

13 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@linux/vfs.h

12 #i‚de‡
_LINUX_VFS_H


13 
	#_LINUX_VFS_H


	)

15 
	~<löux/°©fs.h
>

	@linux/videodev.h

12 #i‚de‡
__LINUX_VIDEODEV_H


13 
	#__LINUX_VIDEODEV_H


	)

15 
	~<löux/videodev2.h
>

17 
	svideo_ˇ∑bûôy


19 
	m«me
[32];

20 
	mty≥
;

21 
	mch™√ls
;

22 
	maudios
;

23 
	mmaxwidth
;

24 
	mmaxheight
;

25 
	mmöwidth
;

26 
	mmöheight
;

29 
	svideo_ch™√l


31 
	mch™√l
;

32 
	m«me
[32];

33 
	mtu√rs
;

34 
__u32
 
	mÊags
;

35 
	#VIDEO_VC_TUNER
 1

	)

36 
	#VIDEO_VC_AUDIO
 2

	)

37 
__u16
 
	mty≥
;

38 
	#VIDEO_TYPE_TV
 1

	)

39 
	#VIDEO_TYPE_CAMERA
 2

	)

40 
__u16
 
	mn‹m
;

43 
	svideo_tu√r


45 
	mtu√r
;

46 
	m«me
[32];

47 
	møngñow
, 
	møngehigh
;

48 
__u32
 
	mÊags
;

49 
	#VIDEO_TUNER_PAL
 1

	)

50 
	#VIDEO_TUNER_NTSC
 2

	)

51 
	#VIDEO_TUNER_SECAM
 4

	)

52 
	#VIDEO_TUNER_LOW
 8

	)

53 
	#VIDEO_TUNER_NORM
 16

	)

54 
	#VIDEO_TUNER_STEREO_ON
 128

	)

55 
	#VIDEO_TUNER_RDS_ON
 256

	)

56 
	#VIDEO_TUNER_MBS_ON
 512

	)

57 
__u16
 
	mmode
;

58 
	#VIDEO_MODE_PAL
 0

	)

59 
	#VIDEO_MODE_NTSC
 1

	)

60 
	#VIDEO_MODE_SECAM
 2

	)

61 
	#VIDEO_MODE_AUTO
 3

	)

62 
__u16
 
	msig«l
;

65 
	svideo_pi˘uª


67 
__u16
 
	mbrighäess
;

68 
__u16
 
	mhue
;

69 
__u16
 
	mcﬁour
;

70 
__u16
 
	mc⁄åa°
;

71 
__u16
 
	mwhôíess
;

72 
__u16
 
	mdïth
;

73 
__u16
 
	m∑Àâe
;

74 
	#VIDEO_PALETTE_GREY
 1

	)

75 
	#VIDEO_PALETTE_HI240
 2

	)

76 
	#VIDEO_PALETTE_RGB565
 3

	)

77 
	#VIDEO_PALETTE_RGB24
 4

	)

78 
	#VIDEO_PALETTE_RGB32
 5

	)

79 
	#VIDEO_PALETTE_RGB555
 6

	)

80 
	#VIDEO_PALETTE_YUV422
 7

	)

81 
	#VIDEO_PALETTE_YUYV
 8

	)

82 
	#VIDEO_PALETTE_UYVY
 9

	)

83 
	#VIDEO_PALETTE_YUV420
 10

	)

84 
	#VIDEO_PALETTE_YUV411
 11

	)

85 
	#VIDEO_PALETTE_RAW
 12

	)

86 
	#VIDEO_PALETTE_YUV422P
 13

	)

87 
	#VIDEO_PALETTE_YUV411P
 14

	)

88 
	#VIDEO_PALETTE_YUV420P
 15

	)

89 
	#VIDEO_PALETTE_YUV410P
 16

	)

90 
	#VIDEO_PALETTE_PLANAR
 13

	)

91 
	#VIDEO_PALETTE_COMPONENT
 7

	)

94 
	svideo_audio


96 
	maudio
;

97 
__u16
 
	mvﬁume
;

98 
__u16
 
	mbass
, 
	måebÀ
;

99 
__u32
 
	mÊags
;

100 
	#VIDEO_AUDIO_MUTE
 1

	)

101 
	#VIDEO_AUDIO_MUTABLE
 2

	)

102 
	#VIDEO_AUDIO_VOLUME
 4

	)

103 
	#VIDEO_AUDIO_BASS
 8

	)

104 
	#VIDEO_AUDIO_TREBLE
 16

	)

105 
	#VIDEO_AUDIO_BALANCE
 32

	)

106 
	m«me
[16];

107 
	#VIDEO_SOUND_MONO
 1

	)

108 
	#VIDEO_SOUND_STEREO
 2

	)

109 
	#VIDEO_SOUND_LANG1
 4

	)

110 
	#VIDEO_SOUND_LANG2
 8

	)

111 
__u16
 
	mmode
;

112 
__u16
 
	mbÆ™˚
;

113 
__u16
 
	m°ï
;

116 
	svideo_˛ù


118 
__s32
 
	mx
,
	my
;

119 
__s32
 
	mwidth
, 
	mheight
;

120 
video_˛ù
 *
	m√xt
;

123 
	svideo_wödow


125 
__u32
 
	mx
,
	my
;

126 
__u32
 
	mwidth
,
	mheight
;

127 
__u32
 
	mchromakey
;

128 
__u32
 
	mÊags
;

129 
video_˛ù
 
__u£r
 *
	m˛ùs
;

130 
	m˛ùcou¡
;

131 
	#VIDEO_WINDOW_INTERLACE
 1

	)

132 
	#VIDEO_WINDOW_CHROMAKEY
 16

	)

133 
	#VIDEO_CLIP_BITMAP
 -1

	)

135 
	#VIDEO_CLIPMAP_SIZE
 (128 * 625)

	)

138 
	svideo_ˇ±uª


140 
__u32
 
	mx
,
	my
;

141 
__u32
 
	mwidth
, 
	mheight
;

142 
__u16
 
	mdecim©i⁄
;

143 
__u16
 
	mÊags
;

144 
	#VIDEO_CAPTURE_ODD
 0

	)

145 
	#VIDEO_CAPTURE_EVEN
 1

	)

148 
	svideo_buf„r


150 *
	mba£
;

151 
	mheight
,
	mwidth
;

152 
	mdïth
;

153 
	mbyã•îlöe
;

156 
	svideo_mm≠


158 
	m‰ame
;

159 
	mheight
,
	mwidth
;

160 
	mf‹m©
;

163 
	svideo_key


165 
__u8
 
	mkey
[8];

166 
__u32
 
	mÊags
;

169 
	svideo_mbuf


171 
	msize
;

172 
	m‰ames
;

173 
	moff£ts
[
VIDEO_MAX_FRAME
];

176 
	#VIDEO_NO_UNIT
 (-1)

	)

178 
	svideo_unô


180 
	mvideo
;

181 
	mvbi
;

182 
	mødio
;

183 
	maudio
;

184 
	mãÀãxt
;

187 
	svbi_f‹m©
 {

188 
__u32
 
	mßm∂ög_øã
;

189 
__u32
 
	mßm∂es_≥r_löe
;

190 
__u32
 
	mßm∂e_f‹m©
;

191 
__s32
 
	m°¨t
[2];

192 
__u32
 
	mcou¡
[2];

193 
__u32
 
	mÊags
;

194 
	#VBI_UNSYNC
 1

	)

195 
	#VBI_INTERLACED
 2

	)

198 
	svideo_öfo


200 
__u32
 
	m‰ame_cou¡
;

201 
__u32
 
	mh_size
;

202 
__u32
 
	mv_size
;

203 
__u32
 
	msm±e_timecode
;

204 
__u32
 
	mpi˘uª_ty≥
;

205 
__u32
 
	mãmp‹Æ_ª„ªn˚
;

206 
__u8
 
	mu£r_d©a
[256];

210 
	svideo_∂ay_mode


212 
	mmode
;

213 
	mp1
;

214 
	mp2
;

217 
	svideo_code


219 
	mlﬂdwh©
[16];

220 
	md©asize
;

221 
__u8
 *
	md©a
;

224 
	#VIDIOCGCAP
 
	`_IOR
('v',1,
video_ˇ∑bûôy
)

	)

225 
	#VIDIOCGCHAN
 
	`_IOWR
('v',2,
video_ch™√l
)

	)

226 
	#VIDIOCSCHAN
 
	`_IOW
('v',3,
video_ch™√l
)

	)

227 
	#VIDIOCGTUNER
 
	`_IOWR
('v',4,
video_tu√r
)

	)

228 
	#VIDIOCSTUNER
 
	`_IOW
('v',5,
video_tu√r
)

	)

229 
	#VIDIOCGPICT
 
	`_IOR
('v',6,
video_pi˘uª
)

	)

230 
	#VIDIOCSPICT
 
	`_IOW
('v',7,
video_pi˘uª
)

	)

231 
	#VIDIOCCAPTURE
 
	`_IOW
('v',8,)

	)

232 
	#VIDIOCGWIN
 
	`_IOR
('v',9, 
video_wödow
)

	)

233 
	#VIDIOCSWIN
 
	`_IOW
('v',10, 
video_wödow
)

	)

234 
	#VIDIOCGFBUF
 
	`_IOR
('v',11, 
video_buf„r
)

	)

235 
	#VIDIOCSFBUF
 
	`_IOW
('v',12, 
video_buf„r
)

	)

236 
	#VIDIOCKEY
 
	`_IOR
('v',13, 
video_key
)

	)

237 
	#VIDIOCGFREQ
 
	`_IOR
('v',14, )

	)

238 
	#VIDIOCSFREQ
 
	`_IOW
('v',15, )

	)

239 
	#VIDIOCGAUDIO
 
	`_IOR
('v',16, 
video_audio
)

	)

240 
	#VIDIOCSAUDIO
 
	`_IOW
('v',17, 
video_audio
)

	)

241 
	#VIDIOCSYNC
 
	`_IOW
('v',18, )

	)

242 
	#VIDIOCMCAPTURE
 
	`_IOW
('v',19, 
video_mm≠
)

	)

243 
	#VIDIOCGMBUF
 
	`_IOR
('v',20, 
video_mbuf
)

	)

244 
	#VIDIOCGUNIT
 
	`_IOR
('v',21, 
video_unô
)

	)

245 
	#VIDIOCGCAPTURE
 
	`_IOR
('v',22, 
video_ˇ±uª
)

	)

246 
	#VIDIOCSCAPTURE
 
	`_IOW
('v',23, 
video_ˇ±uª
)

	)

247 
	#VIDIOCSPLAYMODE
 
	`_IOW
('v',24, 
video_∂ay_mode
)

	)

248 
	#VIDIOCSWRITEMODE
 
	`_IOW
('v',25, )

	)

249 
	#VIDIOCGPLAYINFO
 
	`_IOR
('v',26, 
video_öfo
)

	)

250 
	#VIDIOCSMICROCODE
 
	`_IOW
('v',27, 
video_code
)

	)

251 
	#VIDIOCGVBIFMT
 
	`_IOR
('v',28, 
vbi_f‹m©
)

	)

252 
	#VIDIOCSVBIFMT
 
	`_IOW
('v',29, 
vbi_f‹m©
)

	)

254 
	#BASE_VIDIOCPRIVATE
 192

	)

256 
	#VID_WRITE_MPEG_AUD
 0

	)

257 
	#VID_WRITE_MPEG_VID
 1

	)

258 
	#VID_WRITE_OSD
 2

	)

259 
	#VID_WRITE_TTX
 3

	)

260 
	#VID_WRITE_CC
 4

	)

261 
	#VID_WRITE_MJPEG
 5

	)

263 
	#VID_PLAY_VID_OUT_MODE
 0

	)

265 
	#VID_PLAY_GENLOCK
 1

	)

267 
	#VID_PLAY_NORMAL
 2

	)

268 
	#VID_PLAY_PAUSE
 3

	)

269 
	#VID_PLAY_SINGLE_FRAME
 4

	)

270 
	#VID_PLAY_FAST_FORWARD
 5

	)

271 
	#VID_PLAY_SLOW_MOTION
 6

	)

272 
	#VID_PLAY_IMMEDIATE_NORMAL
 7

	)

273 
	#VID_PLAY_SWITCH_CHANNELS
 8

	)

274 
	#VID_PLAY_FREEZE_FRAME
 9

	)

275 
	#VID_PLAY_STILL_MODE
 10

	)

276 
	#VID_PLAY_MASTER_MODE
 11

	)

278 
	#VID_PLAY_MASTER_NONE
 1

	)

279 
	#VID_PLAY_MASTER_VIDEO
 2

	)

280 
	#VID_PLAY_MASTER_AUDIO
 3

	)

281 
	#VID_PLAY_ACTIVE_SCANLINES
 12

	)

283 
	#VID_PLAY_RESET
 13

	)

284 
	#VID_PLAY_END_MARK
 14

	)

286 
	#VID_HARDWARE_BT848
 1

	)

287 
	#VID_HARDWARE_QCAM_BW
 2

	)

288 
	#VID_HARDWARE_PMS
 3

	)

289 
	#VID_HARDWARE_QCAM_C
 4

	)

290 
	#VID_HARDWARE_PSEUDO
 5

	)

291 
	#VID_HARDWARE_SAA5249
 6

	)

292 
	#VID_HARDWARE_AZTECH
 7

	)

293 
	#VID_HARDWARE_SF16MI
 8

	)

294 
	#VID_HARDWARE_RTRACK
 9

	)

295 
	#VID_HARDWARE_ZOLTRIX
 10

	)

296 
	#VID_HARDWARE_SAA7146
 11

	)

297 
	#VID_HARDWARE_VIDEUM
 12

	)

298 
	#VID_HARDWARE_RTRACK2
 13

	)

299 
	#VID_HARDWARE_PERMEDIA2
 14

	)

300 
	#VID_HARDWARE_RIVA128
 15

	)

301 
	#VID_HARDWARE_PLANB
 16

	)

302 
	#VID_HARDWARE_BROADWAY
 17

	)

303 
	#VID_HARDWARE_GEMTEK
 18

	)

304 
	#VID_HARDWARE_TYPHOON
 19

	)

305 
	#VID_HARDWARE_VINO
 20

	)

306 
	#VID_HARDWARE_CADET
 21

	)

307 
	#VID_HARDWARE_TRUST
 22

	)

308 
	#VID_HARDWARE_TERRATEC
 23

	)

309 
	#VID_HARDWARE_CPIA
 24

	)

310 
	#VID_HARDWARE_ZR36120
 25

	)

311 
	#VID_HARDWARE_ZR36067
 26

	)

312 
	#VID_HARDWARE_OV511
 27

	)

313 
	#VID_HARDWARE_ZR356700
 28

	)

314 
	#VID_HARDWARE_W9966
 29

	)

315 
	#VID_HARDWARE_SE401
 30

	)

316 
	#VID_HARDWARE_PWC
 31

	)

317 
	#VID_HARDWARE_MEYE
 32

	)

318 
	#VID_HARDWARE_CPIA2
 33

	)

319 
	#VID_HARDWARE_VICAM
 34

	)

320 
	#VID_HARDWARE_SF16FMR2
 35

	)

321 
	#VID_HARDWARE_W9968CF
 36

	)

322 
	#VID_HARDWARE_SAA7114H
 37

	)

323 
	#VID_HARDWARE_SN9C102
 38

	)

324 
	#VID_HARDWARE_ARV
 39

	)

	@linux/videodev2.h

12 #i‚de‡
__LINUX_VIDEODEV2_H


13 
	#__LINUX_VIDEODEV2_H


	)

14 
	#__u£r


	)

15 
	~<löux/ty≥s.h
>

17 
	#VIDEO_MAX_FRAME
 32

	)

19 
	#VID_TYPE_CAPTURE
 1

	)

20 
	#VID_TYPE_TUNER
 2

	)

21 
	#VID_TYPE_TELETEXT
 4

	)

22 
	#VID_TYPE_OVERLAY
 8

	)

23 
	#VID_TYPE_CHROMAKEY
 16

	)

24 
	#VID_TYPE_CLIPPING
 32

	)

25 
	#VID_TYPE_FRAMERAM
 64

	)

26 
	#VID_TYPE_SCALES
 128

	)

27 
	#VID_TYPE_MONOCHROME
 256

	)

28 
	#VID_TYPE_SUBCAPTURE
 512

	)

29 
	#VID_TYPE_MPEG_DECODER
 1024

	)

30 
	#VID_TYPE_MPEG_ENCODER
 2048

	)

31 
	#VID_TYPE_MJPEG_DECODER
 4096

	)

32 
	#VID_TYPE_MJPEG_ENCODER
 8192

	)

34 
	#v4l2_fourcc
(
a
,
b
,
c
,
d
Ë(((
__u32
)◊)<<0)|((__u32)(b)<<8)|((__u32)(c)<<16)|((__u32)(d)<<24))

	)

36 
	ev4l2_fõld
 {

37 
	mV4L2_FIELD_ANY
 = 0,

38 
	mV4L2_FIELD_NONE
 = 1,

39 
	mV4L2_FIELD_TOP
 = 2,

40 
	mV4L2_FIELD_BOTTOM
 = 3,

41 
	mV4L2_FIELD_INTERLACED
 = 4,

42 
	mV4L2_FIELD_SEQ_TB
 = 5,

43 
	mV4L2_FIELD_SEQ_BT
 = 6,

44 
	mV4L2_FIELD_ALTERNATE
 = 7,

46 
	#V4L2_FIELD_HAS_TOP
(
fõld
Ë((fõldË=
V4L2_FIELD_TOP
 || (fõldË=
V4L2_FIELD_INTERLACED
 || (fõldË=
V4L2_FIELD_SEQ_TB
 || (fõldË=
V4L2_FIELD_SEQ_BT
)

	)

47 
	#V4L2_FIELD_HAS_BOTTOM
(
fõld
Ë((fõldË=
V4L2_FIELD_BOTTOM
 || (fõldË=
V4L2_FIELD_INTERLACED
 || (fõldË=
V4L2_FIELD_SEQ_TB
 || (fõldË=
V4L2_FIELD_SEQ_BT
)

	)

48 
	#V4L2_FIELD_HAS_BOTH
(
fõld
Ë((fõldË=
V4L2_FIELD_INTERLACED
 || (fõldË=
V4L2_FIELD_SEQ_TB
 || (fõldË=
V4L2_FIELD_SEQ_BT
)

	)

50 
	ev4l2_buf_ty≥
 {

51 
	mV4L2_BUF_TYPE_VIDEO_CAPTURE
 = 1,

52 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT
 = 2,

53 
	mV4L2_BUF_TYPE_VIDEO_OVERLAY
 = 3,

54 
	mV4L2_BUF_TYPE_VBI_CAPTURE
 = 4,

55 
	mV4L2_BUF_TYPE_VBI_OUTPUT
 = 5,

57 
	mV4L2_BUF_TYPE_SLICED_VBI_CAPTURE
 = 6,

58 
	mV4L2_BUF_TYPE_SLICED_VBI_OUTPUT
 = 7,

59 
	mV4L2_BUF_TYPE_PRIVATE
 = 0x80,

62 
	ev4l2_˘æ_ty≥
 {

63 
	mV4L2_CTRL_TYPE_INTEGER
 = 1,

64 
	mV4L2_CTRL_TYPE_BOOLEAN
 = 2,

65 
	mV4L2_CTRL_TYPE_MENU
 = 3,

66 
	mV4L2_CTRL_TYPE_BUTTON
 = 4,

67 
	mV4L2_CTRL_TYPE_INTEGER64
 = 5,

68 
	mV4L2_CTRL_TYPE_CTRL_CLASS
 = 6,

71 
	ev4l2_tu√r_ty≥
 {

72 
	mV4L2_TUNER_RADIO
 = 1,

73 
	mV4L2_TUNER_ANALOG_TV
 = 2,

74 
	mV4L2_TUNER_DIGITAL_TV
 = 3,

77 
	ev4l2_mem‹y
 {

78 
	mV4L2_MEMORY_MMAP
 = 1,

79 
	mV4L2_MEMORY_USERPTR
 = 2,

80 
	mV4L2_MEMORY_OVERLAY
 = 3,

83 
	ev4l2_cﬁ‹•a˚
 {

85 
	mV4L2_COLORSPACE_SMPTE170M
 = 1,

87 
	mV4L2_COLORSPACE_SMPTE240M
 = 2,

89 
	mV4L2_COLORSPACE_REC709
 = 3,

91 
	mV4L2_COLORSPACE_BT878
 = 4,

93 
	mV4L2_COLORSPACE_470_SYSTEM_M
 = 5,

94 
	mV4L2_COLORSPACE_470_SYSTEM_BG
 = 6,

96 
	mV4L2_COLORSPACE_JPEG
 = 7,

98 
	mV4L2_COLORSPACE_SRGB
 = 8,

101 
	ev4l2_¥i‹ôy
 {

102 
	mV4L2_PRIORITY_UNSET
 = 0,

103 
	mV4L2_PRIORITY_BACKGROUND
 = 1,

104 
	mV4L2_PRIORITY_INTERACTIVE
 = 2,

105 
	mV4L2_PRIORITY_RECORD
 = 3,

106 
	mV4L2_PRIORITY_DEFAULT
 = 
V4L2_PRIORITY_INTERACTIVE
,

109 
	sv4l2_ª˘
 {

110 
__s32
 
	mÀ·
;

111 
__s32
 
	mt›
;

112 
__s32
 
	mwidth
;

113 
__s32
 
	mheight
;

116 
	sv4l2_‰a˘
 {

117 
__u32
 
	mnumî©‹
;

118 
__u32
 
	mdíomö©‹
;

121 
	sv4l2_ˇ∑bûôy


123 
__u8
 
	mdrivî
[16];

124 
__u8
 
	mˇrd
[32];

125 
__u8
 
	mbus_öfo
[32];

126 
__u32
 
	mvîsi⁄
;

127 
__u32
 
	mˇ∑bûôõs
;

128 
__u32
 
	mª£rved
[4];

131 
	#V4L2_CAP_VIDEO_CAPTURE
 0x00000001

	)

132 
	#V4L2_CAP_VIDEO_OUTPUT
 0x00000002

	)

133 
	#V4L2_CAP_VIDEO_OVERLAY
 0x00000004

	)

134 
	#V4L2_CAP_VBI_CAPTURE
 0x00000010

	)

135 
	#V4L2_CAP_VBI_OUTPUT
 0x00000020

	)

136 
	#V4L2_CAP_SLICED_VBI_CAPTURE
 0x00000040

	)

137 
	#V4L2_CAP_SLICED_VBI_OUTPUT
 0x00000080

	)

138 
	#V4L2_CAP_RDS_CAPTURE
 0x00000100

	)

140 
	#V4L2_CAP_TUNER
 0x00010000

	)

141 
	#V4L2_CAP_AUDIO
 0x00020000

	)

142 
	#V4L2_CAP_RADIO
 0x00040000

	)

144 
	#V4L2_CAP_READWRITE
 0x01000000

	)

145 
	#V4L2_CAP_ASYNCIO
 0x02000000

	)

146 
	#V4L2_CAP_STREAMING
 0x04000000

	)

148 
	sv4l2_pix_f‹m©


150 
__u32
 
	mwidth
;

151 
__u32
 
	mheight
;

152 
__u32
 
	mpixñf‹m©
;

153 
v4l2_fõld
 
	mfõld
;

154 
__u32
 
	mbyã•îlöe
;

155 
__u32
 
	msizeimage
;

156 
v4l2_cﬁ‹•a˚
 
	mcﬁ‹•a˚
;

157 
__u32
 
	m¥iv
;

160 
	#V4L2_PIX_FMT_RGB332
 
	`v4l2_fourcc
('R','G','B','1')

	)

161 
	#V4L2_PIX_FMT_RGB555
 
	`v4l2_fourcc
('R','G','B','O')

	)

162 
	#V4L2_PIX_FMT_RGB565
 
	`v4l2_fourcc
('R','G','B','P')

	)

163 
	#V4L2_PIX_FMT_RGB555X
 
	`v4l2_fourcc
('R','G','B','Q')

	)

164 
	#V4L2_PIX_FMT_RGB565X
 
	`v4l2_fourcc
('R','G','B','R')

	)

165 
	#V4L2_PIX_FMT_BGR24
 
	`v4l2_fourcc
('B','G','R','3')

	)

166 
	#V4L2_PIX_FMT_RGB24
 
	`v4l2_fourcc
('R','G','B','3')

	)

167 
	#V4L2_PIX_FMT_BGR32
 
	`v4l2_fourcc
('B','G','R','4')

	)

168 
	#V4L2_PIX_FMT_RGB32
 
	`v4l2_fourcc
('R','G','B','4')

	)

169 
	#V4L2_PIX_FMT_GREY
 
	`v4l2_fourcc
('G','R','E','Y')

	)

170 
	#V4L2_PIX_FMT_YVU410
 
	`v4l2_fourcc
('Y','V','U','9')

	)

171 
	#V4L2_PIX_FMT_YVU420
 
	`v4l2_fourcc
('Y','V','1','2')

	)

172 
	#V4L2_PIX_FMT_YUYV
 
	`v4l2_fourcc
('Y','U','Y','V')

	)

173 
	#V4L2_PIX_FMT_UYVY
 
	`v4l2_fourcc
('U','Y','V','Y')

	)

174 
	#V4L2_PIX_FMT_YUV422P
 
	`v4l2_fourcc
('4','2','2','P')

	)

175 
	#V4L2_PIX_FMT_YUV411P
 
	`v4l2_fourcc
('4','1','1','P')

	)

176 
	#V4L2_PIX_FMT_Y41P
 
	`v4l2_fourcc
('Y','4','1','P')

	)

178 
	#V4L2_PIX_FMT_NV12
 
	`v4l2_fourcc
('N','V','1','2')

	)

179 
	#V4L2_PIX_FMT_NV21
 
	`v4l2_fourcc
('N','V','2','1')

	)

181 
	#V4L2_PIX_FMT_YUV410
 
	`v4l2_fourcc
('Y','U','V','9')

	)

182 
	#V4L2_PIX_FMT_YUV420
 
	`v4l2_fourcc
('Y','U','1','2')

	)

183 
	#V4L2_PIX_FMT_YYUV
 
	`v4l2_fourcc
('Y','Y','U','V')

	)

184 
	#V4L2_PIX_FMT_HI240
 
	`v4l2_fourcc
('H','I','2','4')

	)

185 
	#V4L2_PIX_FMT_HM12
 
	`v4l2_fourcc
('H','M','1','2')

	)

187 
	#V4L2_PIX_FMT_SBGGR8
 
	`v4l2_fourcc
('B','A','8','1')

	)

189 
	#V4L2_PIX_FMT_MJPEG
 
	`v4l2_fourcc
('M','J','P','G')

	)

190 
	#V4L2_PIX_FMT_JPEG
 
	`v4l2_fourcc
('J','P','E','G')

	)

191 
	#V4L2_PIX_FMT_DV
 
	`v4l2_fourcc
('d','v','s','d')

	)

192 
	#V4L2_PIX_FMT_MPEG
 
	`v4l2_fourcc
('M','P','E','G')

	)

194 
	#V4L2_PIX_FMT_WNVA
 
	`v4l2_fourcc
('W','N','V','A')

	)

195 
	#V4L2_PIX_FMT_SN9C10X
 
	`v4l2_fourcc
('S','9','1','0')

	)

196 
	#V4L2_PIX_FMT_PWC1
 
	`v4l2_fourcc
('P','W','C','1')

	)

197 
	#V4L2_PIX_FMT_PWC2
 
	`v4l2_fourcc
('P','W','C','2')

	)

198 
	#V4L2_PIX_FMT_ET61X251
 
	`v4l2_fourcc
('E','6','2','5')

	)

200 
	sv4l2_fmtdesc


202 
__u32
 
	mödex
;

203 
v4l2_buf_ty≥
 
	mty≥
;

204 
__u32
 
	mÊags
;

205 
__u8
 
	mdes¸ùti⁄
[32];

206 
__u32
 
	mpixñf‹m©
;

207 
__u32
 
	mª£rved
[4];

210 
	#V4L2_FMT_FLAG_COMPRESSED
 0x0001

	)

212 
	sv4l2_timecode


214 
__u32
 
	mty≥
;

215 
__u32
 
	mÊags
;

216 
__u8
 
	m‰ames
;

217 
__u8
 
	m£c⁄ds
;

218 
__u8
 
	mmöuãs
;

219 
__u8
 
	mhours
;

220 
__u8
 
	mu£rbôs
[4];

223 
	#V4L2_TC_TYPE_24FPS
 1

	)

224 
	#V4L2_TC_TYPE_25FPS
 2

	)

225 
	#V4L2_TC_TYPE_30FPS
 3

	)

226 
	#V4L2_TC_TYPE_50FPS
 4

	)

227 
	#V4L2_TC_TYPE_60FPS
 5

	)

229 
	#V4L2_TC_FLAG_DROPFRAME
 0x0001

	)

230 
	#V4L2_TC_FLAG_COLORFRAME
 0x0002

	)

231 
	#V4L2_TC_USERBITS_fõld
 0x000C

	)

232 
	#V4L2_TC_USERBITS_USERDEFINED
 0x0000

	)

233 
	#V4L2_TC_USERBITS_8BITCHARS
 0x0008

	)

235 
	sv4l2_j≥gcom¥essi⁄


237 
	mquÆôy
;

239 
	mAPPn
;

240 
	mAPP_Àn
;

241 
	mAPP_d©a
[60];

243 
	mCOM_Àn
;

244 
	mCOM_d©a
[60];

246 
__u32
 
	mj≥g_m¨kîs
;

248 
	#V4L2_JPEG_MARKER_DHT
 (1<<3)

	)

249 
	#V4L2_JPEG_MARKER_DQT
 (1<<4)

	)

250 
	#V4L2_JPEG_MARKER_DRI
 (1<<5)

	)

251 
	#V4L2_JPEG_MARKER_COM
 (1<<6)

	)

252 
	#V4L2_JPEG_MARKER_APP
 (1<<7)

	)

255 
	sv4l2_ªque°buf„rs


257 
__u32
 
	mcou¡
;

258 
v4l2_buf_ty≥
 
	mty≥
;

259 
v4l2_mem‹y
 
	mmem‹y
;

260 
__u32
 
	mª£rved
[2];

263 
	sv4l2_buf„r


265 
__u32
 
	mödex
;

266 
v4l2_buf_ty≥
 
	mty≥
;

267 
__u32
 
	mbyãsu£d
;

268 
__u32
 
	mÊags
;

269 
v4l2_fõld
 
	mfõld
;

270 
timevÆ
 
	mtime°amp
;

271 
v4l2_timecode
 
	mtimecode
;

272 
__u32
 
	m£quí˚
;

274 
v4l2_mem‹y
 
	mmem‹y
;

276 
__u32
 
	moff£t
;

277 
	mu£Ωå
;

278 } 
	mm
;

279 
__u32
 
	mÀngth
;

280 
__u32
 
	möput
;

281 
__u32
 
	mª£rved
;

284 
	#V4L2_BUF_FLAG_MAPPED
 0x0001

	)

285 
	#V4L2_BUF_FLAG_QUEUED
 0x0002

	)

286 
	#V4L2_BUF_FLAG_DONE
 0x0004

	)

287 
	#V4L2_BUF_FLAG_KEYFRAME
 0x0008

	)

288 
	#V4L2_BUF_FLAG_PFRAME
 0x0010

	)

289 
	#V4L2_BUF_FLAG_BFRAME
 0x0020

	)

290 
	#V4L2_BUF_FLAG_TIMECODE
 0x0100

	)

291 
	#V4L2_BUF_FLAG_INPUT
 0x0200

	)

293 
	sv4l2_‰amebuf„r


295 
__u32
 
	mˇ∑bûôy
;

296 
__u32
 
	mÊags
;

298 * 
	mba£
;

299 
v4l2_pix_f‹m©
 
	mfmt
;

302 
	#V4L2_FBUF_CAP_EXTERNOVERLAY
 0x0001

	)

303 
	#V4L2_FBUF_CAP_CHROMAKEY
 0x0002

	)

304 
	#V4L2_FBUF_CAP_LIST_CLIPPING
 0x0004

	)

305 
	#V4L2_FBUF_CAP_BITMAP_CLIPPING
 0x0008

	)

307 
	#V4L2_FBUF_FLAG_PRIMARY
 0x0001

	)

308 
	#V4L2_FBUF_FLAG_OVERLAY
 0x0002

	)

309 
	#V4L2_FBUF_FLAG_CHROMAKEY
 0x0004

	)

311 
	sv4l2_˛ù


313 
v4l2_ª˘
 
	mc
;

314 
v4l2_˛ù
 
__u£r
 *
	m√xt
;

317 
	sv4l2_wödow


319 
v4l2_ª˘
 
	mw
;

320 
v4l2_fõld
 
	mfõld
;

321 
__u32
 
	mchromakey
;

322 
v4l2_˛ù
 
__u£r
 *
	m˛ùs
;

323 
__u32
 
	m˛ùcou¡
;

324 
__u£r
 *
	mbôm≠
;

327 
	sv4l2_ˇ±uª∑rm


329 
__u32
 
	mˇ∑bûôy
;

330 
__u32
 
	mˇ±uªmode
;

331 
v4l2_‰a˘
 
	mtimïî‰ame
;

332 
__u32
 
	mexãndedmode
;

333 
__u32
 
	mªadbuf„rs
;

334 
__u32
 
	mª£rved
[4];

337 
	#V4L2_MODE_HIGHQUALITY
 0x0001

	)

338 
	#V4L2_CAP_TIMEPERFRAME
 0x1000

	)

340 
	sv4l2_ouçuç¨m


342 
__u32
 
	mˇ∑bûôy
;

343 
__u32
 
	mouçutmode
;

344 
v4l2_‰a˘
 
	mtimïî‰ame
;

345 
__u32
 
	mexãndedmode
;

346 
__u32
 
	mwrôebuf„rs
;

347 
__u32
 
	mª£rved
[4];

350 
	sv4l2_¸›ˇp
 {

351 
v4l2_buf_ty≥
 
	mty≥
;

352 
v4l2_ª˘
 
	mbounds
;

353 
v4l2_ª˘
 
	mde‰e˘
;

354 
v4l2_‰a˘
 
	mpixña•e˘
;

357 
	sv4l2_¸›
 {

358 
v4l2_buf_ty≥
 
	mty≥
;

359 
v4l2_ª˘
 
	mc
;

362 
__u64
 
	tv4l2_°d_id
;

364 
	#V4L2_STD_PAL_B
 ((
v4l2_°d_id
)0x00000001)

	)

365 
	#V4L2_STD_PAL_B1
 ((
v4l2_°d_id
)0x00000002)

	)

366 
	#V4L2_STD_PAL_G
 ((
v4l2_°d_id
)0x00000004)

	)

367 
	#V4L2_STD_PAL_H
 ((
v4l2_°d_id
)0x00000008)

	)

368 
	#V4L2_STD_PAL_I
 ((
v4l2_°d_id
)0x00000010)

	)

369 
	#V4L2_STD_PAL_D
 ((
v4l2_°d_id
)0x00000020)

	)

370 
	#V4L2_STD_PAL_D1
 ((
v4l2_°d_id
)0x00000040)

	)

371 
	#V4L2_STD_PAL_K
 ((
v4l2_°d_id
)0x00000080)

	)

373 
	#V4L2_STD_PAL_M
 ((
v4l2_°d_id
)0x00000100)

	)

374 
	#V4L2_STD_PAL_N
 ((
v4l2_°d_id
)0x00000200)

	)

375 
	#V4L2_STD_PAL_Nc
 ((
v4l2_°d_id
)0x00000400)

	)

376 
	#V4L2_STD_PAL_60
 ((
v4l2_°d_id
)0x00000800)

	)

378 
	#V4L2_STD_NTSC_M
 ((
v4l2_°d_id
)0x00001000)

	)

379 
	#V4L2_STD_NTSC_M_JP
 ((
v4l2_°d_id
)0x00002000)

	)

380 
	#V4L2_STD_NTSC_443
 ((
v4l2_°d_id
)0x00004000)

	)

381 
	#V4L2_STD_NTSC_M_KR
 ((
v4l2_°d_id
)0x00008000)

	)

383 
	#V4L2_STD_SECAM_B
 ((
v4l2_°d_id
)0x00010000)

	)

384 
	#V4L2_STD_SECAM_D
 ((
v4l2_°d_id
)0x00020000)

	)

385 
	#V4L2_STD_SECAM_G
 ((
v4l2_°d_id
)0x00040000)

	)

386 
	#V4L2_STD_SECAM_H
 ((
v4l2_°d_id
)0x00080000)

	)

387 
	#V4L2_STD_SECAM_K
 ((
v4l2_°d_id
)0x00100000)

	)

388 
	#V4L2_STD_SECAM_K1
 ((
v4l2_°d_id
)0x00200000)

	)

389 
	#V4L2_STD_SECAM_L
 ((
v4l2_°d_id
)0x00400000)

	)

390 
	#V4L2_STD_SECAM_LC
 ((
v4l2_°d_id
)0x00800000)

	)

392 
	#V4L2_STD_ATSC_8_VSB
 ((
v4l2_°d_id
)0x01000000)

	)

393 
	#V4L2_STD_ATSC_16_VSB
 ((
v4l2_°d_id
)0x02000000)

	)

395 
	#V4L2_STD_MN
 (
V4L2_STD_PAL_M
|
V4L2_STD_PAL_N
|
V4L2_STD_PAL_Nc
|
V4L2_STD_NTSC
)

	)

396 
	#V4L2_STD_B
 (
V4L2_STD_PAL_B
|
V4L2_STD_PAL_B1
|
V4L2_STD_SECAM_B
)

	)

397 
	#V4L2_STD_GH
 (
V4L2_STD_PAL_G
|
V4L2_STD_PAL_H
|
V4L2_STD_SECAM_G
|
V4L2_STD_SECAM_H
)

	)

398 
	#V4L2_STD_DK
 (
V4L2_STD_PAL_DK
|
V4L2_STD_SECAM_DK
)

	)

400 
	#V4L2_STD_PAL_BG
 (
V4L2_STD_PAL_B
 | 
V4L2_STD_PAL_B1
 | 
V4L2_STD_PAL_G
)

	)

401 
	#V4L2_STD_PAL_DK
 (
V4L2_STD_PAL_D
 | 
V4L2_STD_PAL_D1
 | 
V4L2_STD_PAL_K
)

	)

402 
	#V4L2_STD_PAL
 (
V4L2_STD_PAL_BG
 | 
V4L2_STD_PAL_DK
 | 
V4L2_STD_PAL_H
 | 
V4L2_STD_PAL_I
)

	)

403 
	#V4L2_STD_NTSC
 (
V4L2_STD_NTSC_M
 | 
V4L2_STD_NTSC_M_JP
 | 
V4L2_STD_NTSC_M_KR
)

	)

404 
	#V4L2_STD_SECAM_DK
 (
V4L2_STD_SECAM_D
 | 
V4L2_STD_SECAM_K
 | 
V4L2_STD_SECAM_K1
)

	)

405 
	#V4L2_STD_SECAM
 (
V4L2_STD_SECAM_B
 | 
V4L2_STD_SECAM_G
 | 
V4L2_STD_SECAM_H
 | 
V4L2_STD_SECAM_DK
 | 
V4L2_STD_SECAM_L
 | 
V4L2_STD_SECAM_LC
)

	)

407 
	#V4L2_STD_525_60
 (
V4L2_STD_PAL_M
 | 
V4L2_STD_PAL_60
 | 
V4L2_STD_NTSC
 | 
V4L2_STD_NTSC_443
)

	)

408 
	#V4L2_STD_625_50
 (
V4L2_STD_PAL
 | 
V4L2_STD_PAL_N
 | 
V4L2_STD_PAL_Nc
 | 
V4L2_STD_SECAM
)

	)

409 
	#V4L2_STD_ATSC
 (
V4L2_STD_ATSC_8_VSB
 | 
V4L2_STD_ATSC_16_VSB
)

	)

411 
	#V4L2_STD_UNKNOWN
 0

	)

412 
	#V4L2_STD_ALL
 (
V4L2_STD_525_60
 | 
V4L2_STD_625_50
)

	)

414 
	sv4l2_°™d¨d


416 
__u32
 
	mödex
;

417 
v4l2_°d_id
 
	mid
;

418 
__u8
 
	m«me
[24];

419 
v4l2_‰a˘
 
	m‰amïîiod
;

420 
__u32
 
	m‰amñöes
;

421 
__u32
 
	mª£rved
[4];

424 
	sv4l2_öput


426 
__u32
 
	mödex
;

427 
__u8
 
	m«me
[32];

428 
__u32
 
	mty≥
;

429 
__u32
 
	maudio£t
;

430 
__u32
 
	mtu√r
;

431 
v4l2_°d_id
 
	m°d
;

432 
__u32
 
	m°©us
;

433 
__u32
 
	mª£rved
[4];

436 
	#V4L2_INPUT_TYPE_TUNER
 1

	)

437 
	#V4L2_INPUT_TYPE_CAMERA
 2

	)

439 
	#V4L2_IN_ST_NO_POWER
 0x00000001

	)

440 
	#V4L2_IN_ST_NO_SIGNAL
 0x00000002

	)

441 
	#V4L2_IN_ST_NO_COLOR
 0x00000004

	)

443 
	#V4L2_IN_ST_NO_H_LOCK
 0x00000100

	)

444 
	#V4L2_IN_ST_COLOR_KILL
 0x00000200

	)

446 
	#V4L2_IN_ST_NO_SYNC
 0x00010000

	)

447 
	#V4L2_IN_ST_NO_EQU
 0x00020000

	)

448 
	#V4L2_IN_ST_NO_CARRIER
 0x00040000

	)

450 
	#V4L2_IN_ST_MACROVISION
 0x01000000

	)

451 
	#V4L2_IN_ST_NO_ACCESS
 0x02000000

	)

452 
	#V4L2_IN_ST_VTR
 0x04000000

	)

454 
	sv4l2_ouçut


456 
__u32
 
	mödex
;

457 
__u8
 
	m«me
[32];

458 
__u32
 
	mty≥
;

459 
__u32
 
	maudio£t
;

460 
__u32
 
	mmoduœt‹
;

461 
v4l2_°d_id
 
	m°d
;

462 
__u32
 
	mª£rved
[4];

465 
	#V4L2_OUTPUT_TYPE_MODULATOR
 1

	)

466 
	#V4L2_OUTPUT_TYPE_ANALOG
 2

	)

467 
	#V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY
 3

	)

469 
	sv4l2_c⁄åﬁ


471 
__u32
 
	mid
;

472 
__s32
 
	mvÆue
;

475 
	sv4l2_ext_c⁄åﬁ


477 
__u32
 
	mid
;

478 
__u32
 
	mª£rved2
[2];

480 
__s32
 
	mvÆue
;

481 
__s64
 
	mvÆue64
;

482 *
	mª£rved
;

484 } 
__©åibuã__
 ((
∑cked
));

486 
	sv4l2_ext_c⁄åﬁs


488 
__u32
 
	m˘æ_˛ass
;

489 
__u32
 
	mcou¡
;

490 
__u32
 
	mîr‹_idx
;

491 
__u32
 
	mª£rved
[2];

492 
v4l2_ext_c⁄åﬁ
 *
	mc⁄åﬁs
;

495 
	#V4L2_CTRL_CLASS_USER
 0x00980000

	)

496 
	#V4L2_CTRL_CLASS_MPEG
 0x00990000

	)

498 
	#V4L2_CTRL_ID_MASK
 (0x0fffffff)

	)

499 
	#V4L2_CTRL_ID2CLASS
(
id
Ë((idË& 0x0fff0000UL)

	)

500 
	#V4L2_CTRL_DRIVER_PRIV
(
id
Ë(((idË& 0xffffË>0x1000)

	)

502 
	sv4l2_quîy˘æ


504 
__u32
 
	mid
;

505 
v4l2_˘æ_ty≥
 
	mty≥
;

506 
__u8
 
	m«me
[32];

507 
__s32
 
	mmöimum
;

508 
__s32
 
	mmaximum
;

509 
__s32
 
	m°ï
;

510 
__s32
 
	mdeÁu…_vÆue
;

511 
__u32
 
	mÊags
;

512 
__u32
 
	mª£rved
[2];

515 
	sv4l2_quîymíu


517 
__u32
 
	mid
;

518 
__u32
 
	mödex
;

519 
__u8
 
	m«me
[32];

520 
__u32
 
	mª£rved
;

523 
	#V4L2_CTRL_FLAG_DISABLED
 0x0001

	)

524 
	#V4L2_CTRL_FLAG_GRABBED
 0x0002

	)

525 
	#V4L2_CTRL_FLAG_READ_ONLY
 0x0004

	)

526 
	#V4L2_CTRL_FLAG_UPDATE
 0x0008

	)

527 
	#V4L2_CTRL_FLAG_INACTIVE
 0x0010

	)

528 
	#V4L2_CTRL_FLAG_SLIDER
 0x0020

	)

530 
	#V4L2_CTRL_FLAG_NEXT_CTRL
 0x80000000

	)

532 
	#V4L2_CID_BASE
 (
V4L2_CTRL_CLASS_USER
 | 0x900)

	)

533 
	#V4L2_CID_USER_BASE
 
V4L2_CID_BASE


	)

535 
	#V4L2_CID_PRIVATE_BASE
 0x08000000

	)

537 
	#V4L2_CID_USER_CLASS
 (
V4L2_CTRL_CLASS_USER
 | 1)

	)

538 
	#V4L2_CID_BRIGHTNESS
 (
V4L2_CID_BASE
+0)

	)

539 
	#V4L2_CID_CONTRAST
 (
V4L2_CID_BASE
+1)

	)

540 
	#V4L2_CID_SATURATION
 (
V4L2_CID_BASE
+2)

	)

541 
	#V4L2_CID_HUE
 (
V4L2_CID_BASE
+3)

	)

542 
	#V4L2_CID_AUDIO_VOLUME
 (
V4L2_CID_BASE
+5)

	)

543 
	#V4L2_CID_AUDIO_BALANCE
 (
V4L2_CID_BASE
+6)

	)

544 
	#V4L2_CID_AUDIO_BASS
 (
V4L2_CID_BASE
+7)

	)

545 
	#V4L2_CID_AUDIO_TREBLE
 (
V4L2_CID_BASE
+8)

	)

546 
	#V4L2_CID_AUDIO_MUTE
 (
V4L2_CID_BASE
+9)

	)

547 
	#V4L2_CID_AUDIO_LOUDNESS
 (
V4L2_CID_BASE
+10)

	)

548 
	#V4L2_CID_BLACK_LEVEL
 (
V4L2_CID_BASE
+11)

	)

549 
	#V4L2_CID_AUTO_WHITE_BALANCE
 (
V4L2_CID_BASE
+12)

	)

550 
	#V4L2_CID_DO_WHITE_BALANCE
 (
V4L2_CID_BASE
+13)

	)

551 
	#V4L2_CID_RED_BALANCE
 (
V4L2_CID_BASE
+14)

	)

552 
	#V4L2_CID_BLUE_BALANCE
 (
V4L2_CID_BASE
+15)

	)

553 
	#V4L2_CID_GAMMA
 (
V4L2_CID_BASE
+16)

	)

554 
	#V4L2_CID_WHITENESS
 (
V4L2_CID_GAMMA
)

	)

555 
	#V4L2_CID_EXPOSURE
 (
V4L2_CID_BASE
+17)

	)

556 
	#V4L2_CID_AUTOGAIN
 (
V4L2_CID_BASE
+18)

	)

557 
	#V4L2_CID_GAIN
 (
V4L2_CID_BASE
+19)

	)

558 
	#V4L2_CID_HFLIP
 (
V4L2_CID_BASE
+20)

	)

559 
	#V4L2_CID_VFLIP
 (
V4L2_CID_BASE
+21)

	)

560 
	#V4L2_CID_HCENTER
 (
V4L2_CID_BASE
+22)

	)

561 
	#V4L2_CID_VCENTER
 (
V4L2_CID_BASE
+23)

	)

562 
	#V4L2_CID_LASTP1
 (
V4L2_CID_BASE
+24)

	)

564 
	#V4L2_CID_MPEG_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x900)

	)

565 
	#V4L2_CID_MPEG_CLASS
 (
V4L2_CTRL_CLASS_MPEG
 | 1)

	)

567 
	#V4L2_CID_MPEG_STREAM_TYPE
 (
V4L2_CID_MPEG_BASE
+0)

	)

568 
	ev4l2_m≥g_°ªam_ty≥
 {

569 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_PS
 = 0,

570 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_TS
 = 1,

571 
	mV4L2_MPEG_STREAM_TYPE_MPEG1_SS
 = 2,

572 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_DVD
 = 3,

573 
	mV4L2_MPEG_STREAM_TYPE_MPEG1_VCD
 = 4,

574 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_SVCD
 = 5,

576 
	#V4L2_CID_MPEG_STREAM_PID_PMT
 (
V4L2_CID_MPEG_BASE
+1)

	)

577 
	#V4L2_CID_MPEG_STREAM_PID_AUDIO
 (
V4L2_CID_MPEG_BASE
+2)

	)

578 
	#V4L2_CID_MPEG_STREAM_PID_VIDEO
 (
V4L2_CID_MPEG_BASE
+3)

	)

579 
	#V4L2_CID_MPEG_STREAM_PID_PCR
 (
V4L2_CID_MPEG_BASE
+4)

	)

580 
	#V4L2_CID_MPEG_STREAM_PES_ID_AUDIO
 (
V4L2_CID_MPEG_BASE
+5)

	)

581 
	#V4L2_CID_MPEG_STREAM_PES_ID_VIDEO
 (
V4L2_CID_MPEG_BASE
+6)

	)

582 
	#V4L2_CID_MPEG_STREAM_VBI_FMT
 (
V4L2_CID_MPEG_BASE
+7)

	)

583 
	ev4l2_m≥g_°ªam_vbi_fmt
 {

584 
	mV4L2_MPEG_STREAM_VBI_FMT_NONE
 = 0,

585 
	mV4L2_MPEG_STREAM_VBI_FMT_IVTV
 = 1,

588 
	#V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ
 (
V4L2_CID_MPEG_BASE
+100)

	)

589 
	ev4l2_m≥g_audio_ßm∂ög_‰eq
 {

590 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_44100
 = 0,

591 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_48000
 = 1,

592 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_32000
 = 2,

594 
	#V4L2_CID_MPEG_AUDIO_ENCODING
 (
V4L2_CID_MPEG_BASE
+101)

	)

595 
	ev4l2_m≥g_audio_ícodög
 {

596 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_1
 = 0,

597 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_2
 = 1,

598 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_3
 = 2,

600 
	#V4L2_CID_MPEG_AUDIO_L1_BITRATE
 (
V4L2_CID_MPEG_BASE
+102)

	)

601 
	ev4l2_m≥g_audio_l1_bôøã
 {

602 
	mV4L2_MPEG_AUDIO_L1_BITRATE_32K
 = 0,

603 
	mV4L2_MPEG_AUDIO_L1_BITRATE_64K
 = 1,

604 
	mV4L2_MPEG_AUDIO_L1_BITRATE_96K
 = 2,

605 
	mV4L2_MPEG_AUDIO_L1_BITRATE_128K
 = 3,

606 
	mV4L2_MPEG_AUDIO_L1_BITRATE_160K
 = 4,

607 
	mV4L2_MPEG_AUDIO_L1_BITRATE_192K
 = 5,

608 
	mV4L2_MPEG_AUDIO_L1_BITRATE_224K
 = 6,

609 
	mV4L2_MPEG_AUDIO_L1_BITRATE_256K
 = 7,

610 
	mV4L2_MPEG_AUDIO_L1_BITRATE_288K
 = 8,

611 
	mV4L2_MPEG_AUDIO_L1_BITRATE_320K
 = 9,

612 
	mV4L2_MPEG_AUDIO_L1_BITRATE_352K
 = 10,

613 
	mV4L2_MPEG_AUDIO_L1_BITRATE_384K
 = 11,

614 
	mV4L2_MPEG_AUDIO_L1_BITRATE_416K
 = 12,

615 
	mV4L2_MPEG_AUDIO_L1_BITRATE_448K
 = 13,

617 
	#V4L2_CID_MPEG_AUDIO_L2_BITRATE
 (
V4L2_CID_MPEG_BASE
+103)

	)

618 
	ev4l2_m≥g_audio_l2_bôøã
 {

619 
	mV4L2_MPEG_AUDIO_L2_BITRATE_32K
 = 0,

620 
	mV4L2_MPEG_AUDIO_L2_BITRATE_48K
 = 1,

621 
	mV4L2_MPEG_AUDIO_L2_BITRATE_56K
 = 2,

622 
	mV4L2_MPEG_AUDIO_L2_BITRATE_64K
 = 3,

623 
	mV4L2_MPEG_AUDIO_L2_BITRATE_80K
 = 4,

624 
	mV4L2_MPEG_AUDIO_L2_BITRATE_96K
 = 5,

625 
	mV4L2_MPEG_AUDIO_L2_BITRATE_112K
 = 6,

626 
	mV4L2_MPEG_AUDIO_L2_BITRATE_128K
 = 7,

627 
	mV4L2_MPEG_AUDIO_L2_BITRATE_160K
 = 8,

628 
	mV4L2_MPEG_AUDIO_L2_BITRATE_192K
 = 9,

629 
	mV4L2_MPEG_AUDIO_L2_BITRATE_224K
 = 10,

630 
	mV4L2_MPEG_AUDIO_L2_BITRATE_256K
 = 11,

631 
	mV4L2_MPEG_AUDIO_L2_BITRATE_320K
 = 12,

632 
	mV4L2_MPEG_AUDIO_L2_BITRATE_384K
 = 13,

634 
	#V4L2_CID_MPEG_AUDIO_L3_BITRATE
 (
V4L2_CID_MPEG_BASE
+104)

	)

635 
	ev4l2_m≥g_audio_l3_bôøã
 {

636 
	mV4L2_MPEG_AUDIO_L3_BITRATE_32K
 = 0,

637 
	mV4L2_MPEG_AUDIO_L3_BITRATE_40K
 = 1,

638 
	mV4L2_MPEG_AUDIO_L3_BITRATE_48K
 = 2,

639 
	mV4L2_MPEG_AUDIO_L3_BITRATE_56K
 = 3,

640 
	mV4L2_MPEG_AUDIO_L3_BITRATE_64K
 = 4,

641 
	mV4L2_MPEG_AUDIO_L3_BITRATE_80K
 = 5,

642 
	mV4L2_MPEG_AUDIO_L3_BITRATE_96K
 = 6,

643 
	mV4L2_MPEG_AUDIO_L3_BITRATE_112K
 = 7,

644 
	mV4L2_MPEG_AUDIO_L3_BITRATE_128K
 = 8,

645 
	mV4L2_MPEG_AUDIO_L3_BITRATE_160K
 = 9,

646 
	mV4L2_MPEG_AUDIO_L3_BITRATE_192K
 = 10,

647 
	mV4L2_MPEG_AUDIO_L3_BITRATE_224K
 = 11,

648 
	mV4L2_MPEG_AUDIO_L3_BITRATE_256K
 = 12,

649 
	mV4L2_MPEG_AUDIO_L3_BITRATE_320K
 = 13,

651 
	#V4L2_CID_MPEG_AUDIO_MODE
 (
V4L2_CID_MPEG_BASE
+105)

	)

652 
	ev4l2_m≥g_audio_mode
 {

653 
	mV4L2_MPEG_AUDIO_MODE_STEREO
 = 0,

654 
	mV4L2_MPEG_AUDIO_MODE_JOINT_STEREO
 = 1,

655 
	mV4L2_MPEG_AUDIO_MODE_DUAL
 = 2,

656 
	mV4L2_MPEG_AUDIO_MODE_MONO
 = 3,

658 
	#V4L2_CID_MPEG_AUDIO_MODE_EXTENSION
 (
V4L2_CID_MPEG_BASE
+106)

	)

659 
	ev4l2_m≥g_audio_mode_exãnsi⁄
 {

660 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4
 = 0,

661 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8
 = 1,

662 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12
 = 2,

663 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16
 = 3,

665 
	#V4L2_CID_MPEG_AUDIO_EMPHASIS
 (
V4L2_CID_MPEG_BASE
+107)

	)

666 
	ev4l2_m≥g_audio_emphasis
 {

667 
	mV4L2_MPEG_AUDIO_EMPHASIS_NONE
 = 0,

668 
	mV4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS
 = 1,

669 
	mV4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17
 = 2,

671 
	#V4L2_CID_MPEG_AUDIO_CRC
 (
V4L2_CID_MPEG_BASE
+108)

	)

672 
	ev4l2_m≥g_audio_¸c
 {

673 
	mV4L2_MPEG_AUDIO_CRC_NONE
 = 0,

674 
	mV4L2_MPEG_AUDIO_CRC_CRC16
 = 1,

677 
	#V4L2_CID_MPEG_VIDEO_ENCODING
 (
V4L2_CID_MPEG_BASE
+200)

	)

678 
	ev4l2_m≥g_video_ícodög
 {

679 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_1
 = 0,

680 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_2
 = 1,

682 
	#V4L2_CID_MPEG_VIDEO_ASPECT
 (
V4L2_CID_MPEG_BASE
+201)

	)

683 
	ev4l2_m≥g_video_a•e˘
 {

684 
	mV4L2_MPEG_VIDEO_ASPECT_1x1
 = 0,

685 
	mV4L2_MPEG_VIDEO_ASPECT_4x3
 = 1,

686 
	mV4L2_MPEG_VIDEO_ASPECT_16x9
 = 2,

687 
	mV4L2_MPEG_VIDEO_ASPECT_221x100
 = 3,

689 
	#V4L2_CID_MPEG_VIDEO_B_FRAMES
 (
V4L2_CID_MPEG_BASE
+202)

	)

690 
	#V4L2_CID_MPEG_VIDEO_GOP_SIZE
 (
V4L2_CID_MPEG_BASE
+203)

	)

691 
	#V4L2_CID_MPEG_VIDEO_GOP_CLOSURE
 (
V4L2_CID_MPEG_BASE
+204)

	)

692 
	#V4L2_CID_MPEG_VIDEO_PULLDOWN
 (
V4L2_CID_MPEG_BASE
+205)

	)

693 
	#V4L2_CID_MPEG_VIDEO_BITRATE_MODE
 (
V4L2_CID_MPEG_BASE
+206)

	)

694 
	ev4l2_m≥g_video_bôøã_mode
 {

695 
	mV4L2_MPEG_VIDEO_BITRATE_MODE_VBR
 = 0,

696 
	mV4L2_MPEG_VIDEO_BITRATE_MODE_CBR
 = 1,

698 
	#V4L2_CID_MPEG_VIDEO_BITRATE
 (
V4L2_CID_MPEG_BASE
+207)

	)

699 
	#V4L2_CID_MPEG_VIDEO_BITRATE_PEAK
 (
V4L2_CID_MPEG_BASE
+208)

	)

700 
	#V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION
 (
V4L2_CID_MPEG_BASE
+209)

	)

702 
	#V4L2_CID_MPEG_CX2341X_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x1000)

	)

703 
	#V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE
 (
V4L2_CID_MPEG_CX2341X_BASE
+0)

	)

704 
	ev4l2_m≥g_cx2341x_video_•©ül_fûãr_mode
 {

705 
	mV4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL
 = 0,

706 
	mV4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO
 = 1,

708 
	#V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER
 (
V4L2_CID_MPEG_CX2341X_BASE
+1)

	)

709 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+2)

	)

710 
	ev4l2_m≥g_cx2341x_video_luma_•©ül_fûãr_ty≥
 {

711 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF
 = 0,

712 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR
 = 1,

713 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT
 = 2,

714 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE
 = 3,

715 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE
 = 4,

717 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+3)

	)

718 
	ev4l2_m≥g_cx2341x_video_chroma_•©ül_fûãr_ty≥
 {

719 
	mV4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF
 = 0,

720 
	mV4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR
 = 1,

722 
	#V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE
 (
V4L2_CID_MPEG_CX2341X_BASE
+4)

	)

723 
	ev4l2_m≥g_cx2341x_video_ãmp‹Æ_fûãr_mode
 {

724 
	mV4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL
 = 0,

725 
	mV4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO
 = 1,

727 
	#V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER
 (
V4L2_CID_MPEG_CX2341X_BASE
+5)

	)

728 
	#V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+6)

	)

729 
	ev4l2_m≥g_cx2341x_video_medün_fûãr_ty≥
 {

730 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF
 = 0,

731 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR
 = 1,

732 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT
 = 2,

733 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT
 = 3,

734 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG
 = 4,

736 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM
 (
V4L2_CID_MPEG_CX2341X_BASE
+7)

	)

737 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP
 (
V4L2_CID_MPEG_CX2341X_BASE
+8)

	)

738 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM
 (
V4L2_CID_MPEG_CX2341X_BASE
+9)

	)

739 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP
 (
V4L2_CID_MPEG_CX2341X_BASE
+10)

	)

741 
	sv4l2_tu√r


743 
__u32
 
	mödex
;

744 
__u8
 
	m«me
[32];

745 
v4l2_tu√r_ty≥
 
	mty≥
;

746 
__u32
 
	mˇ∑bûôy
;

747 
__u32
 
	møngñow
;

748 
__u32
 
	møngehigh
;

749 
__u32
 
	mrxsubch™s
;

750 
__u32
 
	maudmode
;

751 
__s32
 
	msig«l
;

752 
__s32
 
	mafc
;

753 
__u32
 
	mª£rved
[4];

756 
	sv4l2_moduœt‹


758 
__u32
 
	mödex
;

759 
__u8
 
	m«me
[32];

760 
__u32
 
	mˇ∑bûôy
;

761 
__u32
 
	møngñow
;

762 
__u32
 
	møngehigh
;

763 
__u32
 
	mtxsubch™s
;

764 
__u32
 
	mª£rved
[4];

767 
	#V4L2_TUNER_CAP_LOW
 0x0001

	)

768 
	#V4L2_TUNER_CAP_NORM
 0x0002

	)

769 
	#V4L2_TUNER_CAP_STEREO
 0x0010

	)

770 
	#V4L2_TUNER_CAP_LANG2
 0x0020

	)

771 
	#V4L2_TUNER_CAP_SAP
 0x0020

	)

772 
	#V4L2_TUNER_CAP_LANG1
 0x0040

	)

774 
	#V4L2_TUNER_SUB_MONO
 0x0001

	)

775 
	#V4L2_TUNER_SUB_STEREO
 0x0002

	)

776 
	#V4L2_TUNER_SUB_LANG2
 0x0004

	)

777 
	#V4L2_TUNER_SUB_SAP
 0x0004

	)

778 
	#V4L2_TUNER_SUB_LANG1
 0x0008

	)

780 
	#V4L2_TUNER_MODE_MONO
 0x0000

	)

781 
	#V4L2_TUNER_MODE_STEREO
 0x0001

	)

782 
	#V4L2_TUNER_MODE_LANG2
 0x0002

	)

783 
	#V4L2_TUNER_MODE_SAP
 0x0002

	)

784 
	#V4L2_TUNER_MODE_LANG1
 0x0003

	)

785 
	#V4L2_TUNER_MODE_LANG1_LANG2
 0x0004

	)

787 
	sv4l2_‰equícy


789 
__u32
 
	mtu√r
;

790 
v4l2_tu√r_ty≥
 
	mty≥
;

791 
__u32
 
	m‰equícy
;

792 
__u32
 
	mª£rved
[8];

795 
	sv4l2_audio


797 
__u32
 
	mödex
;

798 
__u8
 
	m«me
[32];

799 
__u32
 
	mˇ∑bûôy
;

800 
__u32
 
	mmode
;

801 
__u32
 
	mª£rved
[2];

804 
	#V4L2_AUDCAP_STEREO
 0x00001

	)

805 
	#V4L2_AUDCAP_AVL
 0x00002

	)

807 
	#V4L2_AUDMODE_AVL
 0x00001

	)

809 
	sv4l2_audioout


811 
__u32
 
	mödex
;

812 
__u8
 
	m«me
[32];

813 
__u32
 
	mˇ∑bûôy
;

814 
__u32
 
	mmode
;

815 
__u32
 
	mª£rved
[2];

818 
	sv4l2_vbi_f‹m©


820 
__u32
 
	mßm∂ög_øã
;

821 
__u32
 
	moff£t
;

822 
__u32
 
	mßm∂es_≥r_löe
;

823 
__u32
 
	mßm∂e_f‹m©
;

824 
__s32
 
	m°¨t
[2];

825 
__u32
 
	mcou¡
[2];

826 
__u32
 
	mÊags
;

827 
__u32
 
	mª£rved
[2];

830 
	#V4L2_VBI_UNSYNC
 (1<< 0)

	)

831 
	#V4L2_VBI_INTERLACED
 (1<< 1)

	)

833 
	sv4l2_¶i˚d_vbi_f‹m©


835 
__u16
 
	m£rvi˚_£t
;

837 
__u16
 
	m£rvi˚_löes
[2][24];

838 
__u32
 
	mio_size
;

839 
__u32
 
	mª£rved
[2];

842 
	#V4L2_SLICED_TELETEXT_B
 (0x0001)

	)

844 
	#V4L2_SLICED_VPS
 (0x0400)

	)

846 
	#V4L2_SLICED_CAPTION_525
 (0x1000)

	)

848 
	#V4L2_SLICED_WSS_625
 (0x4000)

	)

850 
	#V4L2_SLICED_VBI_525
 (
V4L2_SLICED_CAPTION_525
)

	)

851 
	#V4L2_SLICED_VBI_625
 (
V4L2_SLICED_TELETEXT_B
 | 
V4L2_SLICED_VPS
 | 
V4L2_SLICED_WSS_625
)

	)

853 
	sv4l2_¶i˚d_vbi_ˇp


855 
__u16
 
	m£rvi˚_£t
;

857 
__u16
 
	m£rvi˚_löes
[2][24];

858 
__u32
 
	mª£rved
[4];

861 
	sv4l2_¶i˚d_vbi_d©a


863 
__u32
 
	mid
;

864 
__u32
 
	mfõld
;

865 
__u32
 
	mlöe
;

866 
__u32
 
	mª£rved
;

867 
__u8
 
	md©a
[48];

870 
	sv4l2_f‹m©


872 
v4l2_buf_ty≥
 
	mty≥
;

875 
v4l2_pix_f‹m©
 
	mpix
;

876 
v4l2_wödow
 
	mwö
;

877 
v4l2_vbi_f‹m©
 
	mvbi
;

878 
v4l2_¶i˚d_vbi_f‹m©
 
	m¶i˚d
;

879 
__u8
 
	møw_d©a
[200];

880 } 
	mfmt
;

883 
	sv4l2_°ªam∑rm


885 
v4l2_buf_ty≥
 
	mty≥
;

888 
v4l2_ˇ±uª∑rm
 
	mˇ±uª
;

889 
v4l2_ouçuç¨m
 
	mouçut
;

890 
__u8
 
	møw_d©a
[200];

891 } 
	m∑rm
;

894 
	#VIDIOC_QUERYCAP
 
	`_IOR
 ('V', 0, 
v4l2_ˇ∑bûôy
)

	)

895 
	#VIDIOC_RESERVED
 
	`_IO
 ('V', 1)

	)

896 
	#VIDIOC_ENUM_FMT
 
	`_IOWR
 ('V', 2, 
v4l2_fmtdesc
)

	)

897 
	#VIDIOC_G_FMT
 
	`_IOWR
 ('V', 4, 
v4l2_f‹m©
)

	)

898 
	#VIDIOC_S_FMT
 
	`_IOWR
 ('V', 5, 
v4l2_f‹m©
)

	)

899 
	#VIDIOC_REQBUFS
 
	`_IOWR
 ('V', 8, 
v4l2_ªque°buf„rs
)

	)

900 
	#VIDIOC_QUERYBUF
 
	`_IOWR
 ('V', 9, 
v4l2_buf„r
)

	)

901 
	#VIDIOC_G_FBUF
 
	`_IOR
 ('V', 10, 
v4l2_‰amebuf„r
)

	)

902 
	#VIDIOC_S_FBUF
 
	`_IOW
 ('V', 11, 
v4l2_‰amebuf„r
)

	)

903 
	#VIDIOC_OVERLAY
 
	`_IOW
 ('V', 14, )

	)

904 
	#VIDIOC_QBUF
 
	`_IOWR
 ('V', 15, 
v4l2_buf„r
)

	)

905 
	#VIDIOC_DQBUF
 
	`_IOWR
 ('V', 17, 
v4l2_buf„r
)

	)

906 
	#VIDIOC_STREAMON
 
	`_IOW
 ('V', 18, )

	)

907 
	#VIDIOC_STREAMOFF
 
	`_IOW
 ('V', 19, )

	)

908 
	#VIDIOC_G_PARM
 
	`_IOWR
 ('V', 21, 
v4l2_°ªam∑rm
)

	)

909 
	#VIDIOC_S_PARM
 
	`_IOWR
 ('V', 22, 
v4l2_°ªam∑rm
)

	)

910 
	#VIDIOC_G_STD
 
	`_IOR
 ('V', 23, 
v4l2_°d_id
)

	)

911 
	#VIDIOC_S_STD
 
	`_IOW
 ('V', 24, 
v4l2_°d_id
)

	)

912 
	#VIDIOC_ENUMSTD
 
	`_IOWR
 ('V', 25, 
v4l2_°™d¨d
)

	)

913 
	#VIDIOC_ENUMINPUT
 
	`_IOWR
 ('V', 26, 
v4l2_öput
)

	)

914 
	#VIDIOC_G_CTRL
 
	`_IOWR
 ('V', 27, 
v4l2_c⁄åﬁ
)

	)

915 
	#VIDIOC_S_CTRL
 
	`_IOWR
 ('V', 28, 
v4l2_c⁄åﬁ
)

	)

916 
	#VIDIOC_G_TUNER
 
	`_IOWR
 ('V', 29, 
v4l2_tu√r
)

	)

917 
	#VIDIOC_S_TUNER
 
	`_IOW
 ('V', 30, 
v4l2_tu√r
)

	)

918 
	#VIDIOC_G_AUDIO
 
	`_IOR
 ('V', 33, 
v4l2_audio
)

	)

919 
	#VIDIOC_S_AUDIO
 
	`_IOW
 ('V', 34, 
v4l2_audio
)

	)

920 
	#VIDIOC_QUERYCTRL
 
	`_IOWR
 ('V', 36, 
v4l2_quîy˘æ
)

	)

921 
	#VIDIOC_QUERYMENU
 
	`_IOWR
 ('V', 37, 
v4l2_quîymíu
)

	)

922 
	#VIDIOC_G_INPUT
 
	`_IOR
 ('V', 38, )

	)

923 
	#VIDIOC_S_INPUT
 
	`_IOWR
 ('V', 39, )

	)

924 
	#VIDIOC_G_OUTPUT
 
	`_IOR
 ('V', 46, )

	)

925 
	#VIDIOC_S_OUTPUT
 
	`_IOWR
 ('V', 47, )

	)

926 
	#VIDIOC_ENUMOUTPUT
 
	`_IOWR
 ('V', 48, 
v4l2_ouçut
)

	)

927 
	#VIDIOC_G_AUDOUT
 
	`_IOR
 ('V', 49, 
v4l2_audioout
)

	)

928 
	#VIDIOC_S_AUDOUT
 
	`_IOW
 ('V', 50, 
v4l2_audioout
)

	)

929 
	#VIDIOC_G_MODULATOR
 
	`_IOWR
 ('V', 54, 
v4l2_moduœt‹
)

	)

930 
	#VIDIOC_S_MODULATOR
 
	`_IOW
 ('V', 55, 
v4l2_moduœt‹
)

	)

931 
	#VIDIOC_G_FREQUENCY
 
	`_IOWR
 ('V', 56, 
v4l2_‰equícy
)

	)

932 
	#VIDIOC_S_FREQUENCY
 
	`_IOW
 ('V', 57, 
v4l2_‰equícy
)

	)

933 
	#VIDIOC_CROPCAP
 
	`_IOWR
 ('V', 58, 
v4l2_¸›ˇp
)

	)

934 
	#VIDIOC_G_CROP
 
	`_IOWR
 ('V', 59, 
v4l2_¸›
)

	)

935 
	#VIDIOC_S_CROP
 
	`_IOW
 ('V', 60, 
v4l2_¸›
)

	)

936 
	#VIDIOC_G_JPEGCOMP
 
	`_IOR
 ('V', 61, 
v4l2_j≥gcom¥essi⁄
)

	)

937 
	#VIDIOC_S_JPEGCOMP
 
	`_IOW
 ('V', 62, 
v4l2_j≥gcom¥essi⁄
)

	)

938 
	#VIDIOC_QUERYSTD
 
	`_IOR
 ('V', 63, 
v4l2_°d_id
)

	)

939 
	#VIDIOC_TRY_FMT
 
	`_IOWR
 ('V', 64, 
v4l2_f‹m©
)

	)

940 
	#VIDIOC_ENUMAUDIO
 
	`_IOWR
 ('V', 65, 
v4l2_audio
)

	)

941 
	#VIDIOC_ENUMAUDOUT
 
	`_IOWR
 ('V', 66, 
v4l2_audioout
)

	)

942 
	#VIDIOC_G_PRIORITY
 
	`_IOR
 ('V', 67, 
v4l2_¥i‹ôy
)

	)

943 
	#VIDIOC_S_PRIORITY
 
	`_IOW
 ('V', 68, 
v4l2_¥i‹ôy
)

	)

944 
	#VIDIOC_G_SLICED_VBI_CAP
 
	`_IOR
 ('V', 69, 
v4l2_¶i˚d_vbi_ˇp
)

	)

945 
	#VIDIOC_LOG_STATUS
 
	`_IO
 ('V', 70)

	)

946 
	#VIDIOC_G_EXT_CTRLS
 
	`_IOWR
 ('V', 71, 
v4l2_ext_c⁄åﬁs
)

	)

947 
	#VIDIOC_S_EXT_CTRLS
 
	`_IOWR
 ('V', 72, 
v4l2_ext_c⁄åﬁs
)

	)

948 
	#VIDIOC_TRY_EXT_CTRLS
 
	`_IOWR
 ('V', 73, 
v4l2_ext_c⁄åﬁs
)

	)

950 #ifde‡
__OLD_VIDIOC_


952 
	#VIDIOC_OVERLAY_OLD
 
	`_IOWR
 ('V', 14, )

	)

953 
	#VIDIOC_S_PARM_OLD
 
	`_IOW
 ('V', 22, 
v4l2_°ªam∑rm
)

	)

954 
	#VIDIOC_S_CTRL_OLD
 
	`_IOW
 ('V', 28, 
v4l2_c⁄åﬁ
)

	)

955 
	#VIDIOC_G_AUDIO_OLD
 
	`_IOWR
 ('V', 33, 
v4l2_audio
)

	)

956 
	#VIDIOC_G_AUDOUT_OLD
 
	`_IOWR
 ('V', 49, 
v4l2_audioout
)

	)

957 
	#VIDIOC_CROPCAP_OLD
 
	`_IOR
 ('V', 58, 
v4l2_¸›ˇp
)

	)

960 
	#BASE_VIDIOC_PRIVATE
 192

	)

	@linux/vmalloc.h

12 #i‚de‡
_LINUX_VMALLOC_H


13 
	#_LINUX_VMALLOC_H


	)

15 
	~<löux/•ölock.h
>

16 
	~<asm/∑ge.h
>

18 
	gvm_¨ó_°ru˘
;

20 
	#VM_IOREMAP
 0x00000001

	)

21 
	#VM_ALLOC
 0x00000002

	)

22 
	#VM_MAP
 0x00000004

	)

23 
	#VM_USERMAP
 0x00000008

	)

24 
	#VM_VPAGES
 0x00000010

	)

26 #i‚de‡
IOREMAP_MAX_ORDER


27 
	#IOREMAP_MAX_ORDER
 (7 + 
PAGE_SHIFT
)

	)

30 
	svm_°ru˘
 {

31 *
	maddr
;

32 
	msize
;

33 
	mÊags
;

34 
∑ge
 **
	m∑ges
;

35 
	mƒ_∑ges
;

36 
	mphys_addr
;

37 
vm_°ru˘
 *
	m√xt
;

	@linux/vt.h

12 #i‚de‡
_LINUX_VT_H


13 
	#_LINUX_VT_H


	)

15 
	#MIN_NR_CONSOLES
 1

	)

16 
	#MAX_NR_CONSOLES
 63

	)

17 
	#MAX_NR_USER_CONSOLES
 63

	)

19 
	#VT_OPENQRY
 0x5600

	)

21 
	svt_mode
 {

22 
	mmode
;

23 
	mwaôv
;

24 
	mªlsig
;

25 
	macqsig
;

26 
	m‰sig
;

28 
	#VT_GETMODE
 0x5601

	)

29 
	#VT_SETMODE
 0x5602

	)

30 
	#VT_AUTO
 0x00

	)

31 
	#VT_PROCESS
 0x01

	)

32 
	#VT_ACKACQ
 0x02

	)

34 
	svt_°©
 {

35 
	mv_a˘ive
;

36 
	mv_sig«l
;

37 
	mv_°©e
;

39 
	#VT_GETSTATE
 0x5603

	)

40 
	#VT_SENDSIG
 0x5604

	)

42 
	#VT_RELDISP
 0x5605

	)

44 
	#VT_ACTIVATE
 0x5606

	)

45 
	#VT_WAITACTIVE
 0x5607

	)

46 
	#VT_DISALLOCATE
 0x5608

	)

48 
	svt_sizes
 {

49 
	mv_rows
;

50 
	mv_cﬁs
;

51 
	mv_s¸ﬁlsize
;

53 
	#VT_RESIZE
 0x5609

	)

55 
	svt_c⁄size
 {

56 
	mv_rows
;

57 
	mv_cﬁs
;

58 
	mv_vlö
;

59 
	mv_˛ö
;

60 
	mv_vcﬁ
;

61 
	mv_ccﬁ
;

63 
	#VT_RESIZEX
 0x560A

	)

64 
	#VT_LOCKSWITCH
 0x560B

	)

65 
	#VT_UNLOCKSWITCH
 0x560C

	)

66 
	#VT_GETHIFONTMASK
 0x560D

	)

	@linux/vt_buffer.h

12 #i‚de‡
_LINUX_VT_BUFFER_H_


13 
	#_LINUX_VT_BUFFER_H_


	)

15 #i‚de‡
VT_BUF_HAVE_RW


16 
	#s¸_wrôew
(
vÆ
, 
addr
Ë(*◊ddrË(vÆ))

	)

17 
	#s¸_ªadw
(
addr
Ë(*◊ddr))

	)

18 
	#s¸_mem˝yw
(
d
, 
s
, 
c
Ë
	`mem˝y
(d, s, c)

	)

19 
	#s¸_memmovew
(
d
, 
s
, 
c
Ë
	`memmove
(d, s, c)

	)

20 
	#VT_BUF_HAVE_MEMCPYW


	)

21 
	#VT_BUF_HAVE_MEMMOVEW


	)

24 #i‚de‡
VT_BUF_HAVE_MEMSETW


26 #i‚de‡
VT_BUF_HAVE_MEMCPYW


28 #i‚de‡
VT_BUF_HAVE_MEMMOVEW


	@linux/wait.h

12 #i‚de‡
_LINUX_WAIT_H


13 
	#_LINUX_WAIT_H


	)

15 
	#WNOHANG
 0x00000001

	)

16 
	#WUNTRACED
 0x00000002

	)

17 
	#WSTOPPED
 
WUNTRACED


	)

18 
	#WEXITED
 0x00000004

	)

19 
	#WCONTINUED
 0x00000008

	)

20 
	#WNOWAIT
 0x01000000

	)

22 
	#__WNOTHREAD
 0x20000000

	)

23 
	#__WALL
 0x40000000

	)

24 
	#__WCLONE
 0x80000000

	)

26 
	#P_ALL
 0

	)

27 
	#P_PID
 1

	)

28 
	#P_PGID
 2

	)

	@linux/wanrouter.h

12 #i‚de‡
_ROUTER_H


13 
	#_ROUTER_H


	)

15 
	#ROUTER_NAME
 "w™rouãr"

	)

16 
	#ROUTER_VERSION
 1

	)

17 
	#ROUTER_RELEASE
 1

	)

18 
	#ROUTER_IOCTL
 'W'

	)

19 
	#ROUTER_MAGIC
 0x524D4157L

	)

21 
	erouãr_io˘ls


23 
	mROUTER_SETUP
 = 
ROUTER_IOCTL
<<8,

24 
	mROUTER_DOWN
,

25 
	mROUTER_STAT
,

26 
	mROUTER_IFNEW
,

27 
	mROUTER_IFDEL
,

28 
	mROUTER_IFSTAT
,

29 
	mROUTER_USER
 = (
ROUTER_IOCTL
<<8)+16,

30 
	mROUTER_USER_MAX
 = (
ROUTER_IOCTL
<<8)+31

33 
	#PROC_DATA_PORT_0
 0x8000

	)

34 
	#PROC_DATA_PORT_1
 0x8001

	)

36 
	#NLPID_IP
 0xCC

	)

37 
	#NLPID_SNAP
 0x80

	)

38 
	#NLPID_CLNP
 0x81

	)

39 
	#NLPID_ESIS
 0x82

	)

40 
	#NLPID_ISIS
 0x83

	)

41 
	#NLPID_Q933
 0x08

	)

43 
	#WAN_IFNAME_SZ
 15

	)

44 
	#WAN_DRVNAME_SZ
 15

	)

45 
	#WAN_ADDRESS_SZ
 31

	)

46 
	#USED_BY_FIELD
 8

	)

48 
	#UDP_PTPIPE_TYPE
 0x01

	)

49 
	#UDP_FPIPE_TYPE
 0x02

	)

50 
	#UDP_CPIPE_TYPE
 0x03

	)

51 
	#UDP_DRVSTATS_TYPE
 0x04

	)

52 
	#UDP_INVALID_TYPE
 0x05

	)

54 
	#CMD_OK
 0

	)

55 
	#CMD_TIMEOUT
 0xFF

	)

57 
	#UDP_PKT_FRM_STACK
 0x00

	)

58 
	#UDP_PKT_FRM_NETWORK
 0x01

	)

60 
	#MAX_INTR_TEST_COUNTER
 100

	)

62 
	#CRITICAL_IN_ISR
 0xA1

	)

63 
	#CRITICAL_INTR_HANDLED
 0xB1

	)

65 
	sw™_x25_c⁄f


67 
	mlo_pvc
;

68 
	mhi_pvc
;

69 
	mlo_svc
;

70 
	mhi_svc
;

71 
	mhdlc_wödow
;

72 
	mpkt_wödow
;

73 
	mt1
;

74 
	mt2
;

75 
	mt4
;

76 
	mn2
;

77 
	mt10_t20
;

78 
	mt11_t21
;

79 
	mt12_t22
;

80 
	mt13_t23
;

81 
	mt16_t26
;

82 
	mt28
;

83 
	mr10_r20
;

84 
	mr12_r22
;

85 
	mr13_r23
;

86 
	mccôt_com∑t
;

87 
	mx25_c⁄f_›t
;

88 
	mLAPB_hdlc_⁄ly
;

89 
	mloggög
;

90 
	moob_⁄_modem
;

91 } 
	tw™_x25_c⁄f_t
;

93 
	sw™_‰_c⁄f


95 
	msig«Œög
;

96 
	mt391
;

97 
	mt392
;

98 
	mn391
;

99 
	mn392
;

100 
	mn393
;

101 
	mdlci_num
;

102 
	mdlci
[100];

103 } 
	tw™_‰_c⁄f_t
;

105 
	sw™_µp_c⁄f


107 
	mª°¨t_tmr
;

108 
	mauth_r§t_tmr
;

109 
	mauth_waô_tmr
;

110 
	mmdm_Áû_tmr
;

111 
	mdå_dr›_tmr
;

112 
	mc⁄√˘_tmout
;

113 
	mc⁄f_ªåy
;

114 
	mãrm_ªåy
;

115 
	mÁû_ªåy
;

116 
	mauth_ªåy
;

117 
	mauth_›ti⁄s
;

118 
	mù_›ti⁄s
;

119 
	mauthítiˇt‹
;

120 
	mù_mode
;

121 } 
	tw™_µp_c⁄f_t
;

123 
	sw™_chdlc_c⁄f


125 
	mign‹e_dcd
;

126 
	mign‹e_˘s
;

127 
	mign‹e_kì∑live
;

128 
	mhdlc_°ªamög
;

129 
	mª˚ive_⁄ly
;

130 
	mkì∑live_tx_tmr
;

131 
	mkì∑live_rx_tmr
;

132 
	mkì∑live_îr_m¨gö
;

133 
	m¶¨p_timî
;

134 } 
	tw™_chdlc_c⁄f_t
;

136 
	sw™dev_c⁄f


138 
	mmagic
;

139 
	mc⁄fig_id
;

141 
	mi›‹t
;

142 
	mmaddr
;

143 
	mmsize
;

144 
	múq
;

145 
	mdma
;

146 
	mS514_CPU_no
[1];

147 
	mPCI_¶Ÿ_no
;

148 
	mauto_pci_cfg
;

149 
	mcomm_p‹t
;

150 
	mbps
;

151 
	mmtu
;

152 
	mudp_p‹t
;

153 
	mâl
;

154 
	m·1
;

155 
	möãrÁ˚
;

156 
	m˛ockög
;

157 
	mlöe_codög
;

158 
	m°©i⁄
;

159 
	mc⁄√˘i⁄
;

160 
	mªad_mode
;

161 
	mª˚ive_⁄ly
;

162 
	mây
;

163 
	mây_maj‹
;

164 
	mây_mö‹
;

165 
	mây_mode
;

166 
	mbackup
;

167 
	mhw_›t
[4];

168 
	mª£rved
[4];

170 
	md©a_size
;

171 * 
	md©a
;

174 
w™_x25_c⁄f_t
 
	mx25
;

175 
w™_µp_c⁄f_t
 
	mµp
;

176 
w™_‰_c⁄f_t
 
	m‰
;

177 
w™_chdlc_c⁄f_t
 
	mchdlc
;

178 } 
	mu
;

179 } 
	tw™dev_c⁄f_t
;

181 
	#WANCONFIG_X25
 101

	)

182 
	#WANCONFIG_FR
 102

	)

183 
	#WANCONFIG_PPP
 103

	)

184 
	#WANCONFIG_CHDLC
 104

	)

185 
	#WANCONFIG_BSC
 105

	)

186 
	#WANCONFIG_HDLC
 106

	)

187 
	#WANCONFIG_MPPP
 107

	)

189 
	#WANOPT_OFF
 0

	)

190 
	#WANOPT_ON
 1

	)

191 
	#WANOPT_NO
 0

	)

192 
	#WANOPT_YES
 1

	)

194 
	#WANOPT_RS232
 0

	)

195 
	#WANOPT_V35
 1

	)

197 
	#WANOPT_NRZ
 0

	)

198 
	#WANOPT_NRZI
 1

	)

199 
	#WANOPT_FM0
 2

	)

200 
	#WANOPT_FM1
 3

	)

202 
	#WANOPT_POINTTOPOINT
 0

	)

203 
	#WANOPT_MULTIDROP
 1

	)

205 
	#WANOPT_EXTERNAL
 0

	)

206 
	#WANOPT_INTERNAL
 1

	)

208 
	#WANOPT_DTE
 0

	)

209 
	#WANOPT_DCE
 1

	)

210 
	#WANOPT_CPE
 0

	)

211 
	#WANOPT_NODE
 1

	)

212 
	#WANOPT_SECONDARY
 0

	)

213 
	#WANOPT_PRIMARY
 1

	)

215 
	#WANOPT_PERMANENT
 0

	)

216 
	#WANOPT_SWITCHED
 1

	)

217 
	#WANOPT_ONDEMAND
 2

	)

219 
	#WANOPT_FR_ANSI
 1

	)

220 
	#WANOPT_FR_Q933
 2

	)

221 
	#WANOPT_FR_LMI
 3

	)

223 
	#WANOPT_PPP_STATIC
 0

	)

224 
	#WANOPT_PPP_HOST
 1

	)

225 
	#WANOPT_PPP_PEER
 2

	)

227 
	#WANOPT_ONE
 1

	)

228 
	#WANOPT_TWO
 2

	)

229 
	#WANOPT_ONE_AND_HALF
 3

	)

231 
	#WANOPT_NONE
 0

	)

232 
	#WANOPT_ODD
 1

	)

233 
	#WANOPT_EVEN
 2

	)

235 
	#WANOPT_PRI
 0

	)

236 
	#WANOPT_SEC
 1

	)

238 
	#WANOPT_INTR
 0

	)

239 
	#WANOPT_POLL
 1

	)

241 
	#WANOPT_TTY_SYNC
 0

	)

242 
	#WANOPT_TTY_ASYNC
 1

	)

244 
	sw™dev_°©


246 
	m°©e
;

247 
	mndev
;

249 
	mc⁄√˘i⁄
;

250 
	mmedü_ty≥
;

251 
	mmtu
;

253 
	mmodem_°©us
;

254 
	mrx_‰ames
;

255 
	mrx_ovîruns
;

256 
	mrx_¸c_îr
;

257 
	mrx_ab‹ts
;

258 
	mrx_bad_Àngth
;

259 
	mrx_dr›≥d
;

260 
	mtx_‰ames
;

261 
	mtx_undîruns
;

262 
	mtx_timeouts
;

263 
	mtx_ªje˘s
;

265 
	mrx_bad_f‹m©
;

266 
	mrx_bad_addr
;

267 
	mtx_ªåõs
;

268 
	mª£rved
[16];

269 } 
	tw™dev_°©_t
;

271 
	ew™_°©es


273 
	mWAN_UNCONFIGURED
,

274 
	mWAN_DISCONNECTED
,

275 
	mWAN_CONNECTING
,

276 
	mWAN_CONNECTED
,

277 
	mWAN_LIMIT
,

278 
	mWAN_DUALPORT
,

279 
	mWAN_DISCONNECTING
,

280 
	mWAN_FT1_READY


284 
	mWAN_LOCAL_IP
,

285 
	mWAN_POINTOPOINT_IP
,

286 
	mWAN_NETMASK_IP
,

287 
	mWAN_BROADCAST_IP


290 
	#WAN_MODEM_CTS
 0x0001

	)

291 
	#WAN_MODEM_DCD
 0x0002

	)

292 
	#WAN_MODEM_DTR
 0x0010

	)

293 
	#WAN_MODEM_RTS
 0x0020

	)

295 
	sw™if_c⁄f


297 
	mmagic
;

298 
	mc⁄fig_id
;

299 
	m«me
[
WAN_IFNAME_SZ
+1];

300 
	maddr
[
WAN_ADDRESS_SZ
+1];

301 
	mu£dby
[
USED_BY_FIELD
];

302 
	midÀ_timeout
;

303 
	mhﬁd_timeout
;

304 
	mcú
;

305 
	mbc
;

306 
	mbe
;

307 
	míabÀ_IPX
;

308 
	mö¨p
;

309 
	mö¨p_öãrvÆ
;

310 
	m√tw‹k_numbî
;

311 
	mmc
;

312 
	mloˇl_addr
[
WAN_ADDRESS_SZ
+1];

313 
	mp‹t
;

314 
	m¥Ÿocﬁ
;

315 
	m∑p
;

316 
	mch≠
;

317 
	mu£rid
[511];

318 
	m∑sswd
[511];

319 
	msy¢ame
[31];

320 
	mign‹e_dcd
;

321 
	mign‹e_˘s
;

322 
	mign‹e_kì∑live
;

323 
	mhdlc_°ªamög
;

324 
	mkì∑live_tx_tmr
;

325 
	mkì∑live_rx_tmr
;

326 
	mkì∑live_îr_m¨gö
;

327 
	m¶¨p_timî
;

328 
	mâl
;

329 
	möãrÁ˚
;

330 
	m˛ockög
;

331 
	mbps
;

332 
	mmtu
;

333 
	mif_down
;

334 
	mg©eway
;

335 
	måue_if_ícodög
;

337 
	masy_d©a_å™s
;

338 
	mπs_hs_f‹_ª˚ive
;

339 
	mx⁄_xoff_hs_f‹_ª˚ive
;

340 
	mx⁄_xoff_hs_f‹_å™smô
;

341 
	mdcd_hs_f‹_å™smô
;

342 
	m˘s_hs_f‹_å™smô
;

343 
	masync_mode
;

344 
	mtx_bôs_≥r_ch¨
;

345 
	mrx_bôs_≥r_ch¨
;

346 
	m°›_bôs
;

347 
	m∑rôy
;

348 
	mbªak_timî
;

349 
	möãr_ch¨_timî
;

350 
	mrx_com∂ëe_Àngth
;

351 
	mx⁄_ch¨
;

352 
	mxoff_ch¨
;

353 
	mª˚ive_⁄ly
;

354 } 
	tw™if_c⁄f_t
;

	@linux/wireless.h

12 #i‚de‡
_LINUX_WIRELESS_H


13 
	#_LINUX_WIRELESS_H


	)

15 
	~<löux/ty≥s.h
>

16 
	~<löux/sockë.h
>

17 
	~<löux/if.h
>

19 
	#WIRELESS_EXT
 20

	)

21 
	#SIOCSIWCOMMIT
 0x8B00

	)

22 
	#SIOCGIWNAME
 0x8B01

	)

24 
	#SIOCSIWNWID
 0x8B02

	)

25 
	#SIOCGIWNWID
 0x8B03

	)

26 
	#SIOCSIWFREQ
 0x8B04

	)

27 
	#SIOCGIWFREQ
 0x8B05

	)

28 
	#SIOCSIWMODE
 0x8B06

	)

29 
	#SIOCGIWMODE
 0x8B07

	)

30 
	#SIOCSIWSENS
 0x8B08

	)

31 
	#SIOCGIWSENS
 0x8B09

	)

33 
	#SIOCSIWRANGE
 0x8B0A

	)

34 
	#SIOCGIWRANGE
 0x8B0B

	)

35 
	#SIOCSIWPRIV
 0x8B0C

	)

36 
	#SIOCGIWPRIV
 0x8B0D

	)

37 
	#SIOCSIWSTATS
 0x8B0E

	)

38 
	#SIOCGIWSTATS
 0x8B0F

	)

40 
	#SIOCSIWSPY
 0x8B10

	)

41 
	#SIOCGIWSPY
 0x8B11

	)

42 
	#SIOCSIWTHRSPY
 0x8B12

	)

43 
	#SIOCGIWTHRSPY
 0x8B13

	)

45 
	#SIOCSIWAP
 0x8B14

	)

46 
	#SIOCGIWAP
 0x8B15

	)

47 
	#SIOCGIWAPLIST
 0x8B17

	)

48 
	#SIOCSIWSCAN
 0x8B18

	)

49 
	#SIOCGIWSCAN
 0x8B19

	)

51 
	#SIOCSIWESSID
 0x8B1A

	)

52 
	#SIOCGIWESSID
 0x8B1B

	)

53 
	#SIOCSIWNICKN
 0x8B1C

	)

54 
	#SIOCGIWNICKN
 0x8B1D

	)

56 
	#SIOCSIWRATE
 0x8B20

	)

57 
	#SIOCGIWRATE
 0x8B21

	)

58 
	#SIOCSIWRTS
 0x8B22

	)

59 
	#SIOCGIWRTS
 0x8B23

	)

60 
	#SIOCSIWFRAG
 0x8B24

	)

61 
	#SIOCGIWFRAG
 0x8B25

	)

62 
	#SIOCSIWTXPOW
 0x8B26

	)

63 
	#SIOCGIWTXPOW
 0x8B27

	)

64 
	#SIOCSIWRETRY
 0x8B28

	)

65 
	#SIOCGIWRETRY
 0x8B29

	)

67 
	#SIOCSIWENCODE
 0x8B2A

	)

68 
	#SIOCGIWENCODE
 0x8B2B

	)

70 
	#SIOCSIWPOWER
 0x8B2C

	)

71 
	#SIOCGIWPOWER
 0x8B2D

	)

73 
	#SIOCSIWGENIE
 0x8B30

	)

74 
	#SIOCGIWGENIE
 0x8B31

	)

76 
	#SIOCSIWMLME
 0x8B16

	)

78 
	#SIOCSIWAUTH
 0x8B32

	)

79 
	#SIOCGIWAUTH
 0x8B33

	)

81 
	#SIOCSIWENCODEEXT
 0x8B34

	)

82 
	#SIOCGIWENCODEEXT
 0x8B35

	)

84 
	#SIOCSIWPMKSA
 0x8B36

	)

86 
	#SIOCIWFIRSTPRIV
 0x8BE0

	)

87 
	#SIOCIWLASTPRIV
 0x8BFF

	)

89 
	#SIOCIWFIRST
 0x8B00

	)

90 
	#SIOCIWLAST
 
SIOCIWLASTPRIV


	)

91 
	#IW_IOCTL_IDX
(
cmd
Ë((cmdË- 
SIOCIWFIRST
)

	)

93 
	#IW_IS_SET
(
cmd
Ë(!((cmdË& 0x1))

	)

94 
	#IW_IS_GET
(
cmd
Ë((cmdË& 0x1)

	)

96 
	#IWEVTXDROP
 0x8C00

	)

97 
	#IWEVQUAL
 0x8C01

	)

98 
	#IWEVCUSTOM
 0x8C02

	)

99 
	#IWEVREGISTERED
 0x8C03

	)

100 
	#IWEVEXPIRED
 0x8C04

	)

101 
	#IWEVGENIE
 0x8C05

	)

102 
	#IWEVMICHAELMICFAILURE
 0x8C06

	)

103 
	#IWEVASSOCREQIE
 0x8C07

	)

104 
	#IWEVASSOCRESPIE
 0x8C08

	)

105 
	#IWEVPMKIDCAND
 0x8C09

	)

107 
	#IWEVFIRST
 0x8C00

	)

108 
	#IW_EVENT_IDX
(
cmd
Ë((cmdË- 
IWEVFIRST
)

	)

110 
	#IW_PRIV_TYPE_MASK
 0x7000

	)

111 
	#IW_PRIV_TYPE_NONE
 0x0000

	)

112 
	#IW_PRIV_TYPE_BYTE
 0x1000

	)

113 
	#IW_PRIV_TYPE_CHAR
 0x2000

	)

114 
	#IW_PRIV_TYPE_INT
 0x4000

	)

115 
	#IW_PRIV_TYPE_FLOAT
 0x5000

	)

116 
	#IW_PRIV_TYPE_ADDR
 0x6000

	)

118 
	#IW_PRIV_SIZE_FIXED
 0x0800

	)

120 
	#IW_PRIV_SIZE_MASK
 0x07FF

	)

122 
	#IW_MAX_FREQUENCIES
 32

	)

124 
	#IW_MAX_BITRATES
 32

	)

126 
	#IW_MAX_TXPOWER
 8

	)

128 
	#IW_MAX_SPY
 8

	)

130 
	#IW_MAX_AP
 64

	)

132 
	#IW_ESSID_MAX_SIZE
 32

	)

134 
	#IW_MODE_AUTO
 0

	)

135 
	#IW_MODE_ADHOC
 1

	)

136 
	#IW_MODE_INFRA
 2

	)

137 
	#IW_MODE_MASTER
 3

	)

138 
	#IW_MODE_REPEAT
 4

	)

139 
	#IW_MODE_SECOND
 5

	)

140 
	#IW_MODE_MONITOR
 6

	)

142 
	#IW_QUAL_QUAL_UPDATED
 0x01

	)

143 
	#IW_QUAL_LEVEL_UPDATED
 0x02

	)

144 
	#IW_QUAL_NOISE_UPDATED
 0x04

	)

145 
	#IW_QUAL_ALL_UPDATED
 0x07

	)

146 
	#IW_QUAL_DBM
 0x08

	)

147 
	#IW_QUAL_QUAL_INVALID
 0x10

	)

148 
	#IW_QUAL_LEVEL_INVALID
 0x20

	)

149 
	#IW_QUAL_NOISE_INVALID
 0x40

	)

150 
	#IW_QUAL_ALL_INVALID
 0x70

	)

152 
	#IW_FREQ_AUTO
 0x00

	)

153 
	#IW_FREQ_FIXED
 0x01

	)

155 
	#IW_MAX_ENCODING_SIZES
 8

	)

157 
	#IW_ENCODING_TOKEN_MAX
 64

	)

159 
	#IW_ENCODE_INDEX
 0x00FF

	)

160 
	#IW_ENCODE_FLAGS
 0xFF00

	)

161 
	#IW_ENCODE_MODE
 0xF000

	)

162 
	#IW_ENCODE_DISABLED
 0x8000

	)

163 
	#IW_ENCODE_ENABLED
 0x0000

	)

164 
	#IW_ENCODE_RESTRICTED
 0x4000

	)

165 
	#IW_ENCODE_OPEN
 0x2000

	)

166 
	#IW_ENCODE_NOKEY
 0x0800

	)

167 
	#IW_ENCODE_TEMP
 0x0400

	)

169 
	#IW_POWER_ON
 0x0000

	)

170 
	#IW_POWER_TYPE
 0xF000

	)

171 
	#IW_POWER_PERIOD
 0x1000

	)

172 
	#IW_POWER_TIMEOUT
 0x2000

	)

173 
	#IW_POWER_MODE
 0x0F00

	)

174 
	#IW_POWER_UNICAST_R
 0x0100

	)

175 
	#IW_POWER_MULTICAST_R
 0x0200

	)

176 
	#IW_POWER_ALL_R
 0x0300

	)

177 
	#IW_POWER_FORCE_S
 0x0400

	)

178 
	#IW_POWER_REPEATER
 0x0800

	)

179 
	#IW_POWER_MODIFIER
 0x000F

	)

180 
	#IW_POWER_MIN
 0x0001

	)

181 
	#IW_POWER_MAX
 0x0002

	)

182 
	#IW_POWER_RELATIVE
 0x0004

	)

184 
	#IW_TXPOW_TYPE
 0x00FF

	)

185 
	#IW_TXPOW_DBM
 0x0000

	)

186 
	#IW_TXPOW_MWATT
 0x0001

	)

187 
	#IW_TXPOW_RELATIVE
 0x0002

	)

188 
	#IW_TXPOW_RANGE
 0x1000

	)

190 
	#IW_RETRY_ON
 0x0000

	)

191 
	#IW_RETRY_TYPE
 0xF000

	)

192 
	#IW_RETRY_LIMIT
 0x1000

	)

193 
	#IW_RETRY_LIFETIME
 0x2000

	)

194 
	#IW_RETRY_MODIFIER
 0x000F

	)

195 
	#IW_RETRY_MIN
 0x0001

	)

196 
	#IW_RETRY_MAX
 0x0002

	)

197 
	#IW_RETRY_RELATIVE
 0x0004

	)

199 
	#IW_SCAN_DEFAULT
 0x0000

	)

200 
	#IW_SCAN_ALL_ESSID
 0x0001

	)

201 
	#IW_SCAN_THIS_ESSID
 0x0002

	)

202 
	#IW_SCAN_ALL_FREQ
 0x0004

	)

203 
	#IW_SCAN_THIS_FREQ
 0x0008

	)

204 
	#IW_SCAN_ALL_MODE
 0x0010

	)

205 
	#IW_SCAN_THIS_MODE
 0x0020

	)

206 
	#IW_SCAN_ALL_RATE
 0x0040

	)

207 
	#IW_SCAN_THIS_RATE
 0x0080

	)

209 
	#IW_SCAN_TYPE_ACTIVE
 0

	)

210 
	#IW_SCAN_TYPE_PASSIVE
 1

	)

212 
	#IW_SCAN_MAX_DATA
 4096

	)

214 
	#IW_CUSTOM_MAX
 256

	)

216 
	#IW_GENERIC_IE_MAX
 1024

	)

218 
	#IW_MLME_DEAUTH
 0

	)

219 
	#IW_MLME_DISASSOC
 1

	)

221 
	#IW_AUTH_INDEX
 0x0FFF

	)

222 
	#IW_AUTH_FLAGS
 0xF000

	)

224 
	#IW_AUTH_WPA_VERSION
 0

	)

225 
	#IW_AUTH_CIPHER_PAIRWISE
 1

	)

226 
	#IW_AUTH_CIPHER_GROUP
 2

	)

227 
	#IW_AUTH_KEY_MGMT
 3

	)

228 
	#IW_AUTH_TKIP_COUNTERMEASURES
 4

	)

229 
	#IW_AUTH_DROP_UNENCRYPTED
 5

	)

230 
	#IW_AUTH_80211_AUTH_ALG
 6

	)

231 
	#IW_AUTH_WPA_ENABLED
 7

	)

232 
	#IW_AUTH_RX_UNENCRYPTED_EAPOL
 8

	)

233 
	#IW_AUTH_ROAMING_CONTROL
 9

	)

234 
	#IW_AUTH_PRIVACY_INVOKED
 10

	)

236 
	#IW_AUTH_WPA_VERSION_DISABLED
 0x00000001

	)

237 
	#IW_AUTH_WPA_VERSION_WPA
 0x00000002

	)

238 
	#IW_AUTH_WPA_VERSION_WPA2
 0x00000004

	)

240 
	#IW_AUTH_CIPHER_NONE
 0x00000001

	)

241 
	#IW_AUTH_CIPHER_WEP40
 0x00000002

	)

242 
	#IW_AUTH_CIPHER_TKIP
 0x00000004

	)

243 
	#IW_AUTH_CIPHER_CCMP
 0x00000008

	)

244 
	#IW_AUTH_CIPHER_WEP104
 0x00000010

	)

246 
	#IW_AUTH_KEY_MGMT_802_1X
 1

	)

247 
	#IW_AUTH_KEY_MGMT_PSK
 2

	)

249 
	#IW_AUTH_ALG_OPEN_SYSTEM
 0x00000001

	)

250 
	#IW_AUTH_ALG_SHARED_KEY
 0x00000002

	)

251 
	#IW_AUTH_ALG_LEAP
 0x00000004

	)

253 
	#IW_AUTH_ROAMING_ENABLE
 0

	)

254 
	#IW_AUTH_ROAMING_DISABLE
 1

	)

256 
	#IW_ENCODE_SEQ_MAX_SIZE
 8

	)

258 
	#IW_ENCODE_ALG_NONE
 0

	)

259 
	#IW_ENCODE_ALG_WEP
 1

	)

260 
	#IW_ENCODE_ALG_TKIP
 2

	)

261 
	#IW_ENCODE_ALG_CCMP
 3

	)

263 
	#IW_ENCODE_EXT_TX_SEQ_VALID
 0x00000001

	)

264 
	#IW_ENCODE_EXT_RX_SEQ_VALID
 0x00000002

	)

265 
	#IW_ENCODE_EXT_GROUP_KEY
 0x00000004

	)

266 
	#IW_ENCODE_EXT_SET_TX_KEY
 0x00000008

	)

268 
	#IW_MICFAILURE_KEY_ID
 0x00000003

	)

269 
	#IW_MICFAILURE_GROUP
 0x00000004

	)

270 
	#IW_MICFAILURE_PAIRWISE
 0x00000008

	)

271 
	#IW_MICFAILURE_STAKEY
 0x00000010

	)

272 
	#IW_MICFAILURE_COUNT
 0x00000060

	)

274 
	#IW_ENC_CAPA_WPA
 0x00000001

	)

275 
	#IW_ENC_CAPA_WPA2
 0x00000002

	)

276 
	#IW_ENC_CAPA_CIPHER_TKIP
 0x00000004

	)

277 
	#IW_ENC_CAPA_CIPHER_CCMP
 0x00000008

	)

279 
	#IW_EVENT_CAPA_BASE
(
cmd
Ë((cmd >
SIOCIWFIRSTPRIV
Ë? (cmd - SIOCIWFIRSTPRIV + 0x60Ë: (cmd - 
SIOCSIWCOMMIT
))

	)

280 
	#IW_EVENT_CAPA_INDEX
(
cmd
Ë(
	`IW_EVENT_CAPA_BASE
(cmdË>> 5)

	)

281 
	#IW_EVENT_CAPA_MASK
(
cmd
Ë(1 << (
	`IW_EVENT_CAPA_BASE
(cmdË& 0x1F))

	)

283 
	#IW_EVENT_CAPA_K_0
 (
	`IW_EVENT_CAPA_MASK
(0x8B04Ë| IW_EVENT_CAPA_MASK(0x8B06Ë| IW_EVENT_CAPA_MASK(0x8B1A))

	)

284 
	#IW_EVENT_CAPA_K_1
 (
	`IW_EVENT_CAPA_MASK
(0x8B2A))

	)

286 
	#IW_EVENT_CAPA_SET
(
evít_ˇ∑
, 
cmd
Ë”vít_ˇ∑[
	`IW_EVENT_CAPA_INDEX
(cmd)] |
	`IW_EVENT_CAPA_MASK
(cmd))

	)

287 
	#IW_EVENT_CAPA_SET_KERNEL
(
evít_ˇ∑
Ë{evít_ˇ∑[0] |
IW_EVENT_CAPA_K_0
;Évít_ˇ∑[1] |
IW_EVENT_CAPA_K_1
; }

	)

289 
	siw_∑øm


291 
__s32
 
	mvÆue
;

292 
__u8
 
	mfixed
;

293 
__u8
 
	mdißbÀd
;

294 
__u16
 
	mÊags
;

297 
	siw_poöt


299 
__u£r
 *
	mpoöãr
;

300 
__u16
 
	mÀngth
;

301 
__u16
 
	mÊags
;

304 
	siw_‰eq


306 
__s32
 
	mm
;

307 
__s16
 
	me
;

308 
__u8
 
	mi
;

309 
__u8
 
	mÊags
;

312 
	siw_quÆôy


314 
__u8
 
	mquÆ
;

315 
__u8
 
	mÀvñ
;

316 
__u8
 
	mnoi£
;

317 
__u8
 
	mupd©ed
;

320 
	siw_disˇrded


322 
__u32
 
	mnwid
;

323 
__u32
 
	mcode
;

324 
__u32
 
	m‰agmít
;

325 
__u32
 
	mªåõs
;

326 
__u32
 
	mmisc
;

329 
	siw_mis£d


331 
__u32
 
	mbóc⁄
;

334 
	siw_thr•y


336 
sockaddr
 
	maddr
;

337 
iw_quÆôy
 
	mquÆ
;

338 
iw_quÆôy
 
	mlow
;

339 
iw_quÆôy
 
	mhigh
;

342 
	siw_sˇn_ªq


344 
__u8
 
	msˇn_ty≥
;

345 
__u8
 
	messid_Àn
;

346 
__u8
 
	mnum_ch™√ls
;

347 
__u8
 
	mÊags
;

348 
sockaddr
 
	mbssid
;

350 
__u8
 
	messid
[
IW_ESSID_MAX_SIZE
];

352 
__u32
 
	mmö_ch™√l_time
;

353 
__u32
 
	mmax_ch™√l_time
;

355 
iw_‰eq
 
	mch™√l_li°
[
IW_MAX_FREQUENCIES
];

358 
	siw_ícode_ext


360 
__u32
 
	mext_Êags
;

361 
__u8
 
	mtx_£q
[
IW_ENCODE_SEQ_MAX_SIZE
];

362 
__u8
 
	mrx_£q
[
IW_ENCODE_SEQ_MAX_SIZE
];

363 
sockaddr
 
	maddr
;

364 
__u16
 
	mÆg
;

365 
__u16
 
	mkey_Àn
;

366 
__u8
 
	mkey
[0];

369 
	siw_mlme


371 
__u16
 
	mcmd
;

372 
__u16
 
	mªas⁄_code
;

373 
sockaddr
 
	maddr
;

376 
	#IW_PMKSA_ADD
 1

	)

377 
	#IW_PMKSA_REMOVE
 2

	)

378 
	#IW_PMKSA_FLUSH
 3

	)

380 
	#IW_PMKID_LEN
 16

	)

382 
	siw_pmkß


384 
__u32
 
	mcmd
;

385 
sockaddr
 
	mbssid
;

386 
__u8
 
	mpmkid
[
IW_PMKID_LEN
];

389 
	siw_mich´lmicÁûuª


391 
__u32
 
	mÊags
;

392 
sockaddr
 
	m§c_addr
;

393 
__u8
 
	mtsc
[
IW_ENCODE_SEQ_MAX_SIZE
];

396 
	#IW_PMKID_CAND_PREAUTH
 0x00000001

	)

397 
	siw_pmkid_ˇnd


399 
__u32
 
	mÊags
;

400 
__u32
 
	mödex
;

401 
sockaddr
 
	mbssid
;

404 
	siw_°©i°ics


406 
__u16
 
	m°©us
;

408 
iw_quÆôy
 
	mquÆ
;

409 
iw_disˇrded
 
	mdisˇrd
;

410 
iw_mis£d
 
	mmiss
;

413 
	uiwªq_d©a


416 
	m«me
[
IFNAMSIZ
];

418 
iw_poöt
 
	messid
;

419 
iw_∑øm
 
	mnwid
;

420 
iw_‰eq
 
	m‰eq
;

422 
iw_∑øm
 
	m£ns
;

423 
iw_∑øm
 
	mbôøã
;

424 
iw_∑øm
 
	mtxpowî
;

425 
iw_∑øm
 
	mπs
;

426 
iw_∑øm
 
	m‰ag
;

427 
__u32
 
	mmode
;

428 
iw_∑øm
 
	mªåy
;

430 
iw_poöt
 
	mícodög
;

431 
iw_∑øm
 
	mpowî
;

432 
iw_quÆôy
 
	mquÆ
;

434 
sockaddr
 
	m≠_addr
;

435 
sockaddr
 
	maddr
;

437 
iw_∑øm
 
	m∑øm
;

438 
iw_poöt
 
	md©a
;

441 
	siwªq


445 
	mi‰n_«me
[
IFNAMSIZ
];

446 } 
	mi‰_i‰n
;

448 
iwªq_d©a
 
	mu
;

451 
	siw_ønge


454 
__u32
 
	mthroughput
;

456 
__u32
 
	mmö_nwid
;

457 
__u32
 
	mmax_nwid
;

459 
__u16
 
	mﬁd_num_ch™√ls
;

460 
__u8
 
	mﬁd_num_‰equícy
;

462 
__u32
 
	mevít_ˇ∑
[6];

464 
__s32
 
	m£nsôivôy
;

466 
iw_quÆôy
 
	mmax_quÆ
;

468 
iw_quÆôy
 
	mavg_quÆ
;

470 
__u8
 
	mnum_bôøãs
;

471 
__s32
 
	mbôøã
[
IW_MAX_BITRATES
];

473 
__s32
 
	mmö_πs
;

474 
__s32
 
	mmax_πs
;

476 
__s32
 
	mmö_‰ag
;

477 
__s32
 
	mmax_‰ag
;

479 
__s32
 
	mmö_pmp
;

480 
__s32
 
	mmax_pmp
;

481 
__s32
 
	mmö_pmt
;

482 
__s32
 
	mmax_pmt
;

483 
__u16
 
	mpmp_Êags
;

484 
__u16
 
	mpmt_Êags
;

485 
__u16
 
	mpm_ˇ∑
;

487 
__u16
 
	mícodög_size
[
IW_MAX_ENCODING_SIZES
];

488 
__u8
 
	mnum_ícodög_sizes
;

489 
__u8
 
	mmax_ícodög_tokís
;

491 
__u8
 
	mícodög_logö_ödex
;

493 
__u16
 
	mtxpowî_ˇ∑
;

494 
__u8
 
	mnum_txpowî
;

495 
__s32
 
	mtxpowî
[
IW_MAX_TXPOWER
];

497 
__u8
 
	mwe_vîsi⁄_compûed
;

498 
__u8
 
	mwe_vîsi⁄_sour˚
;

500 
__u16
 
	mªåy_ˇ∑
;

501 
__u16
 
	mªåy_Êags
;

502 
__u16
 
	mr_time_Êags
;

503 
__s32
 
	mmö_ªåy
;

504 
__s32
 
	mmax_ªåy
;

505 
__s32
 
	mmö_r_time
;

506 
__s32
 
	mmax_r_time
;

508 
__u16
 
	mnum_ch™√ls
;

509 
__u8
 
	mnum_‰equícy
;

510 
iw_‰eq
 
	m‰eq
[
IW_MAX_FREQUENCIES
];

512 
__u32
 
	míc_ˇ∑
;

515 
	siw_¥iv_¨gs


517 
__u32
 
	mcmd
;

518 
__u16
 
	m£t_¨gs
;

519 
__u16
 
	mgë_¨gs
;

520 
	m«me
[
IFNAMSIZ
];

523 
	siw_evít


525 
__u16
 
	mÀn
;

526 
__u16
 
	mcmd
;

527 
iwªq_d©a
 
	mu
;

530 
	#IW_EV_LCP_LEN
 ((
iw_evít
Ë- (
iwªq_d©a
))

	)

532 
	#IW_EV_CHAR_LEN
 (
IW_EV_LCP_LEN
 + 
IFNAMSIZ
)

	)

533 
	#IW_EV_UINT_LEN
 (
IW_EV_LCP_LEN
 + (
__u32
))

	)

534 
	#IW_EV_FREQ_LEN
 (
IW_EV_LCP_LEN
 + (
iw_‰eq
))

	)

535 
	#IW_EV_PARAM_LEN
 (
IW_EV_LCP_LEN
 + (
iw_∑øm
))

	)

536 
	#IW_EV_ADDR_LEN
 (
IW_EV_LCP_LEN
 + (
sockaddr
))

	)

537 
	#IW_EV_QUAL_LEN
 (
IW_EV_LCP_LEN
 + (
iw_quÆôy
))

	)

539 
	#IW_EV_POINT_OFF
 (((*Ë&(((
iw_poöt
 *Ë
NULL
)->
Àngth
)Ë- (*ËNULL)

	)

540 
	#IW_EV_POINT_LEN
 (
IW_EV_LCP_LEN
 + (
iw_poöt
Ë- 
IW_EV_POINT_OFF
)

	)

	@linux/workqueue.h

12 #i‚de‡
_LINUX_WORKQUEUE_H


13 
	#_LINUX_WORKQUEUE_H


	)

15 
	~<löux/timî.h
>

16 
	~<löux/lökage.h
>

17 
	~<löux/bô›s.h
>

19 
	gw‹kqueue_°ru˘
;

21 
	sw‹k_°ru˘
 {

22 
	m≥ndög
;

23 
li°_hód
 
	míåy
;

24 (*
	mfunc
)(*);

25 *
	md©a
;

26 *
	mwq_d©a
;

27 
timî_li°
 
	mtimî
;

30 
	sexecuã_w‹k
 {

31 
w‹k_°ru˘
 
	mw‹k
;

34 
	#__WORK_INITIALIZER
(
n
, 
f
, 
d
Ë{ .
íåy
 = { &“).íåy, &“).íåy }, .
func
 = (f), .
d©a
 = (d), .
timî
 = 
	`TIMER_INITIALIZER
(
NULL
, 0, 0), }

	)

36 
	#DECLARE_WORK
(
n
, 
f
, 
d
Ë
w‹k_°ru˘
Ç = 
	`__WORK_INITIALIZER
“, f, d)

	)

38 
	#PREPARE_WORK
(
_w‹k
, 
_func
, 
_d©a
Ëdÿ{ (_w‹k)->
func
 = _func; (_w‹k)->
d©a
 = _d©a; } 0)

	)

40 
	#INIT_WORK
(
_w‹k
, 
_func
, 
_d©a
Ëdÿ{ 
	`INIT_LIST_HEAD
(&(_w‹k)->
íåy
); (_w‹k)->
≥ndög
 = 0; 
	`PREPARE_WORK
((_w‹k), (_func), (_d©a)); 
	`öô_timî
(&(_w‹k)->
timî
); } 0)

	)

42 
	#¸óã_w‹kqueue
(
«me
Ë
	`__¸óã_w‹kqueue
(“ame), 0)

	)

43 
	#¸óã_sögÀthªad_w‹kqueue
(
«me
Ë
	`__¸óã_w‹kqueue
(“ame), 1)

	)

	@linux/xattr.h

12 #i‚de‡
_LINUX_XATTR_H


13 
	#_LINUX_XATTR_H


	)

15 
	#XATTR_CREATE
 0x1

	)

16 
	#XATTR_REPLACE
 0x2

	)

18 
	#XATTR_OS2_PREFIX
 "os2."

	)

19 
	#XATTR_OS2_PREFIX_LEN
 ( (
XATTR_OS2_PREFIX
Ë- 1)

	)

21 
	#XATTR_SECURITY_PREFIX
 "£curôy."

	)

22 
	#XATTR_SECURITY_PREFIX_LEN
 ( (
XATTR_SECURITY_PREFIX
Ë- 1)

	)

24 
	#XATTR_SYSTEM_PREFIX
 "sy°em."

	)

25 
	#XATTR_SYSTEM_PREFIX_LEN
 ( (
XATTR_SYSTEM_PREFIX
Ë- 1)

	)

27 
	#XATTR_TRUSTED_PREFIX
 "åu°ed."

	)

28 
	#XATTR_TRUSTED_PREFIX_LEN
 ( (
XATTR_TRUSTED_PREFIX
Ë- 1)

	)

30 
	#XATTR_USER_PREFIX
 "u£r."

	)

31 
	#XATTR_USER_PREFIX_LEN
 ( (
XATTR_USER_PREFIX
Ë- 1)

	)

33 
	sx©å_h™dÀr
 {

34 *
	m¥efix
;

35 
size_t
 (*
li°
)(
öode
 *
	möode
, *
	mli°
, size_à
	mli°_size
,

36 c⁄° *
	m«me
, 
size_t
 
	m«me_Àn
);

37 (*
	mgë
)(
öode
 *
	möode
, c⁄° *
	m«me
, *
	mbuf„r
,

38 
size_t
 
	msize
);

39 (*
	m£t
)(
öode
 *
	möode
, c⁄° *
	m«me
, c⁄° *
	mbuf„r
,

40 
size_t
 
	msize
, 
	mÊags
);

	@linux/zconf.h

12 #i‚de‡
_ZCONF_H


13 
	#_ZCONF_H


	)

15 #i‚de‡
MAX_MEM_LEVEL


16 
	#MAX_MEM_LEVEL
 8

	)

19 #i‚de‡
MAX_WBITS


20 
	#MAX_WBITS
 15

	)

23 #i‚de‡
DEF_WBITS


24 
	#DEF_WBITS
 
MAX_WBITS


	)

27 #i‡
MAX_MEM_LEVEL
 >= 8

28 
	#DEF_MEM_LEVEL
 8

	)

30 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

33 
	tByã
;

34 
	tuI¡
;

35 
	tuL⁄g
;

36 *
	tvoidp
;

	@linux/zlib.h

12 #i‚de‡
_ZLIB_H


13 
	#_ZLIB_H


	)

15 
	~<löux/zc⁄f.h
>

17 
	göã∫Æ_°©e
;

19 
	sz_°ªam_s
 {

20 
Byã
 *
	m√xt_ö
;

21 
uI¡
 
	mavaû_ö
;

22 
uL⁄g
 
	mtŸÆ_ö
;

24 
Byã
 *
	m√xt_out
;

25 
uI¡
 
	mavaû_out
;

26 
uL⁄g
 
	mtŸÆ_out
;

28 *
	mmsg
;

29 
öã∫Æ_°©e
 *
	m°©e
;

31 *
	mw‹k•a˚
;

33 
	md©a_ty≥
;

34 
uL⁄g
 
	madÀr
;

35 
uL⁄g
 
	mª£rved
;

36 } 
	tz_°ªam
;

38 
z_°ªam
 *
	tz_°ªamp
;

40 
	#Z_NO_FLUSH
 0

	)

41 
	#Z_PARTIAL_FLUSH
 1

	)

42 
	#Z_PACKET_FLUSH
 2

	)

43 
	#Z_SYNC_FLUSH
 3

	)

44 
	#Z_FULL_FLUSH
 4

	)

45 
	#Z_FINISH
 5

	)

46 
	#Z_BLOCK
 6

	)

48 
	#Z_OK
 0

	)

49 
	#Z_STREAM_END
 1

	)

50 
	#Z_NEED_DICT
 2

	)

51 
	#Z_ERRNO
 (-1)

	)

52 
	#Z_STREAM_ERROR
 (-2)

	)

53 
	#Z_DATA_ERROR
 (-3)

	)

54 
	#Z_MEM_ERROR
 (-4)

	)

55 
	#Z_BUF_ERROR
 (-5)

	)

56 
	#Z_VERSION_ERROR
 (-6)

	)

58 
	#Z_NO_COMPRESSION
 0

	)

59 
	#Z_BEST_SPEED
 1

	)

60 
	#Z_BEST_COMPRESSION
 9

	)

61 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

63 
	#Z_FILTERED
 1

	)

64 
	#Z_HUFFMAN_ONLY
 2

	)

65 
	#Z_DEFAULT_STRATEGY
 0

	)

67 
	#Z_BINARY
 0

	)

68 
	#Z_ASCII
 1

	)

69 
	#Z_UNKNOWN
 2

	)

71 
	#Z_DEFLATED
 8

	)

73 
	#zlib_deÊ©eInô
(
°rm
, 
Àvñ
Ë
	`zlib_deÊ©eInô2
((°rm), (Àvñ), 
Z_DEFLATED
, 
MAX_WBITS
, 
DEF_MEM_LEVEL
, 
Z_DEFAULT_STRATEGY
)

	)

74 
	#zlib_öÊ©eInô
(
°rm
Ë
	`zlib_öÊ©eInô2
((°rm), 
DEF_WBITS
)

	)

76 #i‡!
deföed
(
_Z_UTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

77 
	söã∫Æ_°©e
 {
	mdummy
;};

	@linux/zorro_ids.h

12 
	#ZORRO_MANUF_PACIFIC_PERIPHERALS
 0x00D3

	)

13 
	#ZORRO_PROD_PACIFIC_PERIPHERALS_SE_2000_A500
 
	`ZORRO_ID
(
PACIFIC_PERIPHERALS
, 0x00, 0)

	)

14 
	#ZORRO_PROD_PACIFIC_PERIPHERALS_SCSI
 
	`ZORRO_ID
(
PACIFIC_PERIPHERALS
, 0x0A, 0)

	)

16 
	#ZORRO_MANUF_MACROSYSTEMS_USA_2
 0x0100

	)

17 
	#ZORRO_PROD_MACROSYSTEMS_WARP_ENGINE
 
	`ZORRO_ID
(
MACROSYSTEMS_USA_2
, 0x13, 0)

	)

19 
	#ZORRO_MANUF_KUPKE_1
 0x00DD

	)

20 
	#ZORRO_PROD_KUPKE_GOLEM_RAM_BOX_2MB
 
	`ZORRO_ID
(
KUPKE_1
, 0x00, 0)

	)

22 
	#ZORRO_MANUF_MEMPHIS
 0x0100

	)

23 
	#ZORRO_PROD_MEMPHIS_STORMBRINGER
 
	`ZORRO_ID
(
MEMPHIS
, 0x00, 0)

	)

25 
	#ZORRO_MANUF_3_STATE
 0x0200

	)

26 
	#ZORRO_PROD_3_STATE_MEGAMIX_2000
 
	`ZORRO_ID
(3
_STATE
, 0x02, 0)

	)

28 
	#ZORRO_MANUF_COMMODORE_BRAUNSCHWEIG
 0x0201

	)

29 
	#ZORRO_PROD_CBM_A2088_A2286
 
	`ZORRO_ID
(
COMMODORE_BRAUNSCHWEIG
, 0x01, 0)

	)

30 
	#ZORRO_PROD_CBM_A2286
 
	`ZORRO_ID
(
COMMODORE_BRAUNSCHWEIG
, 0x02, 0)

	)

31 
	#ZORRO_PROD_CBM_A4091_1
 
	`ZORRO_ID
(
COMMODORE_BRAUNSCHWEIG
, 0x54, 0)

	)

32 
	#ZORRO_PROD_CBM_A2386SX_1
 
	`ZORRO_ID
(
COMMODORE_BRAUNSCHWEIG
, 0x67, 0)

	)

34 
	#ZORRO_MANUF_COMMODORE_WEST_CHESTER_1
 0x0202

	)

35 
	#ZORRO_PROD_CBM_A2090A
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x01, 0)

	)

36 
	#ZORRO_PROD_CBM_A590_A2091_1
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x02, 0)

	)

37 
	#ZORRO_PROD_CBM_A590_A2091_2
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x03, 0)

	)

38 
	#ZORRO_PROD_CBM_A2090B
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x04, 0)

	)

39 
	#ZORRO_PROD_CBM_A2060
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x09, 0)

	)

40 
	#ZORRO_PROD_CBM_A590_A2052_A2058_A2091
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x0A, 0)

	)

41 
	#ZORRO_PROD_CBM_A560_RAM
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x20, 0)

	)

42 
	#ZORRO_PROD_CBM_A2232_PROTOTYPE
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x45, 0)

	)

43 
	#ZORRO_PROD_CBM_A2232
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x46, 0)

	)

44 
	#ZORRO_PROD_CBM_A2620
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x50, 0)

	)

45 
	#ZORRO_PROD_CBM_A2630
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x51, 0)

	)

46 
	#ZORRO_PROD_CBM_A4091_2
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x54, 0)

	)

47 
	#ZORRO_PROD_CBM_A2065_1
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x5A, 0)

	)

48 
	#ZORRO_PROD_CBM_ROMULATOR
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x60, 0)

	)

49 
	#ZORRO_PROD_CBM_A3000_TEST_FIXTURE
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x61, 0)

	)

50 
	#ZORRO_PROD_CBM_A2386SX_2
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x67, 0)

	)

51 
	#ZORRO_PROD_CBM_A2065_2
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_1
, 0x70, 0)

	)

53 
	#ZORRO_MANUF_COMMODORE_WEST_CHESTER_2
 0x0203

	)

54 
	#ZORRO_PROD_CBM_A2090A_CM
 
	`ZORRO_ID
(
COMMODORE_WEST_CHESTER_2
, 0x03, 0)

	)

56 
	#ZORRO_MANUF_PROGRESSIVE_PERIPHERALS_AND_SYSTEMS_2
 0x02F4

	)

57 
	#ZORRO_PROD_PPS_EXP8000
 
	`ZORRO_ID
(
PROGRESSIVE_PERIPHERALS_AND_SYSTEMS_2
, 0x02, 0)

	)

59 
	#ZORRO_MANUF_KOLFF_COMPUTER_SUPPLIES
 0x02FF

	)

60 
	#ZORRO_PROD_KCS_POWER_PC_BOARD
 
	`ZORRO_ID
(
KOLFF_COMPUTER_SUPPLIES
, 0x00, 0)

	)

62 
	#ZORRO_MANUF_CARDCO_1
 0x03EC

	)

63 
	#ZORRO_PROD_CARDCO_KRONOS_2000_1
 
	`ZORRO_ID
(
CARDCO_1
, 0x04, 0)

	)

64 
	#ZORRO_PROD_CARDCO_A1000_1
 
	`ZORRO_ID
(
CARDCO_1
, 0x0C, 0)

	)

65 
	#ZORRO_PROD_CARDCO_ESCORT
 
	`ZORRO_ID
(
CARDCO_1
, 0x0E, 0)

	)

66 
	#ZORRO_PROD_CARDCO_A2410
 
	`ZORRO_ID
(
CARDCO_1
, 0xF5, 0)

	)

68 
	#ZORRO_MANUF_A_SQUARED
 0x03ED

	)

69 
	#ZORRO_PROD_A_SQUARED_LIVE_2000
 
	`ZORRO_ID
(
A_SQUARED
, 0x01, 0)

	)

71 
	#ZORRO_MANUF_COMSPEC_COMMUNICATIONS
 0x03EE

	)

72 
	#ZORRO_PROD_COMSPEC_COMMUNICATIONS_AX2000
 
	`ZORRO_ID
(
COMSPEC_COMMUNICATIONS
, 0x01, 0)

	)

74 
	#ZORRO_MANUF_ANAKIN_RESEARCH
 0x03F1

	)

75 
	#ZORRO_PROD_ANAKIN_RESEARCH_EASYL
 
	`ZORRO_ID
(
ANAKIN_RESEARCH
, 0x01, 0)

	)

77 
	#ZORRO_MANUF_MICROBOTICS
 0x03F2

	)

78 
	#ZORRO_PROD_MICROBOTICS_STARBOARD_II
 
	`ZORRO_ID
(
MICROBOTICS
, 0x00, 0)

	)

79 
	#ZORRO_PROD_MICROBOTICS_STARDRIVE
 
	`ZORRO_ID
(
MICROBOTICS
, 0x02, 0)

	)

80 
	#ZORRO_PROD_MICROBOTICS_8_UP_A
 
	`ZORRO_ID
(
MICROBOTICS
, 0x03, 0)

	)

81 
	#ZORRO_PROD_MICROBOTICS_8_UP_Z
 
	`ZORRO_ID
(
MICROBOTICS
, 0x04, 0)

	)

82 
	#ZORRO_PROD_MICROBOTICS_DELTA_RAM
 
	`ZORRO_ID
(
MICROBOTICS
, 0x20, 0)

	)

83 
	#ZORRO_PROD_MICROBOTICS_8_STAR_RAM
 
	`ZORRO_ID
(
MICROBOTICS
, 0x40, 0)

	)

84 
	#ZORRO_PROD_MICROBOTICS_8_STAR
 
	`ZORRO_ID
(
MICROBOTICS
, 0x41, 0)

	)

85 
	#ZORRO_PROD_MICROBOTICS_VXL_RAM_32
 
	`ZORRO_ID
(
MICROBOTICS
, 0x44, 0)

	)

86 
	#ZORRO_PROD_MICROBOTICS_VXL_68030
 
	`ZORRO_ID
(
MICROBOTICS
, 0x45, 0)

	)

87 
	#ZORRO_PROD_MICROBOTICS_DELTA
 
	`ZORRO_ID
(
MICROBOTICS
, 0x60, 0)

	)

88 
	#ZORRO_PROD_MICROBOTICS_MBX_1200_1200Z_RAM
 
	`ZORRO_ID
(
MICROBOTICS
, 0x81, 0)

	)

89 
	#ZORRO_PROD_MICROBOTICS_HARDFRAME_2000_1
 
	`ZORRO_ID
(
MICROBOTICS
, 0x96, 0)

	)

90 
	#ZORRO_PROD_MICROBOTICS_HARDFRAME_2000_2
 
	`ZORRO_ID
(
MICROBOTICS
, 0x9E, 0)

	)

91 
	#ZORRO_PROD_MICROBOTICS_MBX_1200_1200Z
 
	`ZORRO_ID
(
MICROBOTICS
, 0xC1, 0)

	)

93 
	#ZORRO_MANUF_ACCESS_ASSOCIATES_ALEGRA
 0x03F4

	)

95 
	#ZORRO_MANUF_EXPANSION_TECHNOLOGIES
 0x03F6

	)

97 
	#ZORRO_MANUF_ASDG
 0x03FF

	)

98 
	#ZORRO_PROD_ASDG_MEMORY_1
 
	`ZORRO_ID
(
ASDG
, 0x01, 0)

	)

99 
	#ZORRO_PROD_ASDG_MEMORY_2
 
	`ZORRO_ID
(
ASDG
, 0x02, 0)

	)

100 
	#ZORRO_PROD_ASDG_EB920_LAN_ROVER
 
	`ZORRO_ID
(
ASDG
, 0xFE, 0)

	)

101 
	#ZORRO_PROD_ASDG_GPIB_DUALIEEE488_TWIN_X
 
	`ZORRO_ID
(
ASDG
, 0xFF, 0)

	)

103 
	#ZORRO_MANUF_IMTRONICS_1
 0x0404

	)

104 
	#ZORRO_PROD_IMTRONICS_HURRICANE_2800_1
 
	`ZORRO_ID
(
IMTRONICS_1
, 0x39, 0)

	)

105 
	#ZORRO_PROD_IMTRONICS_HURRICANE_2800_2
 
	`ZORRO_ID
(
IMTRONICS_1
, 0x57, 0)

	)

107 
	#ZORRO_MANUF_CBM_UNIVERSITY_OF_LOWELL
 0x0406

	)

108 
	#ZORRO_PROD_CBM_A2410
 
	`ZORRO_ID
(
CBM_UNIVERSITY_OF_LOWELL
, 0x00, 0)

	)

110 
	#ZORRO_MANUF_AMERISTAR
 0x041D

	)

111 
	#ZORRO_PROD_AMERISTAR_A2065
 
	`ZORRO_ID
(
AMERISTAR
, 0x01, 0)

	)

112 
	#ZORRO_PROD_AMERISTAR_A560
 
	`ZORRO_ID
(
AMERISTAR
, 0x09, 0)

	)

113 
	#ZORRO_PROD_AMERISTAR_A4066
 
	`ZORRO_ID
(
AMERISTAR
, 0x0A, 0)

	)

115 
	#ZORRO_MANUF_SUPRA
 0x0420

	)

116 
	#ZORRO_PROD_SUPRA_SUPRADRIVE_4x4
 
	`ZORRO_ID
(
SUPRA
, 0x01, 0)

	)

117 
	#ZORRO_PROD_SUPRA_1000_RAM
 
	`ZORRO_ID
(
SUPRA
, 0x02, 0)

	)

118 
	#ZORRO_PROD_SUPRA_2000_DMA
 
	`ZORRO_ID
(
SUPRA
, 0x03, 0)

	)

119 
	#ZORRO_PROD_SUPRA_500
 
	`ZORRO_ID
(
SUPRA
, 0x05, 0)

	)

120 
	#ZORRO_PROD_SUPRA_500_SCSI
 
	`ZORRO_ID
(
SUPRA
, 0x08, 0)

	)

121 
	#ZORRO_PROD_SUPRA_500XP_2000_RAM
 
	`ZORRO_ID
(
SUPRA
, 0x09, 0)

	)

122 
	#ZORRO_PROD_SUPRA_500RX_2000_RAM
 
	`ZORRO_ID
(
SUPRA
, 0x0A, 0)

	)

123 
	#ZORRO_PROD_SUPRA_2400ZI
 
	`ZORRO_ID
(
SUPRA
, 0x0B, 0)

	)

124 
	#ZORRO_PROD_SUPRA_500XP_SUPRADRIVE_WORDSYNC
 
	`ZORRO_ID
(
SUPRA
, 0x0C, 0)

	)

125 
	#ZORRO_PROD_SUPRA_SUPRADRIVE_WORDSYNC_II
 
	`ZORRO_ID
(
SUPRA
, 0x0D, 0)

	)

126 
	#ZORRO_PROD_SUPRA_2400ZIPLUS
 
	`ZORRO_ID
(
SUPRA
, 0x10, 0)

	)

128 
	#ZORRO_MANUF_COMPUTER_SYSTEMS_ASSOCIATES
 0x0422

	)

129 
	#ZORRO_PROD_CSA_MAGNUM
 
	`ZORRO_ID
(
COMPUTER_SYSTEMS_ASSOCIATES
, 0x11, 0)

	)

130 
	#ZORRO_PROD_CSA_12_GAUGE
 
	`ZORRO_ID
(
COMPUTER_SYSTEMS_ASSOCIATES
, 0x15, 0)

	)

132 
	#ZORRO_MANUF_MARC_MICHAEL_GROTH
 0x0439

	)

134 
	#ZORRO_MANUF_M_TECH
 0x0502

	)

135 
	#ZORRO_PROD_MTEC_AT500_1
 
	`ZORRO_ID
(
M_TECH
, 0x03, 0)

	)

137 
	#ZORRO_MANUF_GREAT_VALLEY_PRODUCTS_1
 0x06E1

	)

138 
	#ZORRO_PROD_GVP_IMPACT_SERIES_I
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_1
, 0x08, 0)

	)

140 
	#ZORRO_MANUF_BYTEBOX
 0x07DA

	)

141 
	#ZORRO_PROD_BYTEBOX_A500
 
	`ZORRO_ID
(
BYTEBOX
, 0x00, 0)

	)

143 
	#ZORRO_MANUF_DKB_POWER_COMPUTING
 0x07DC

	)

144 
	#ZORRO_PROD_DKB_POWER_COMPUTING_SECUREKEY
 
	`ZORRO_ID
(
DKB_POWER_COMPUTING
, 0x09, 0)

	)

145 
	#ZORRO_PROD_DKB_POWER_COMPUTING_DKM_3128
 
	`ZORRO_ID
(
DKB_POWER_COMPUTING
, 0x0E, 0)

	)

146 
	#ZORRO_PROD_DKB_POWER_COMPUTING_RAPID_FIRE
 
	`ZORRO_ID
(
DKB_POWER_COMPUTING
, 0x0F, 0)

	)

147 
	#ZORRO_PROD_DKB_POWER_COMPUTING_DKM_1202
 
	`ZORRO_ID
(
DKB_POWER_COMPUTING
, 0x10, 0)

	)

148 
	#ZORRO_PROD_DKB_POWER_COMPUTING_COBRA_VIPER_II_68EC030
 
	`ZORRO_ID
(
DKB_POWER_COMPUTING
, 0x12, 0)

	)

149 
	#ZORRO_PROD_DKB_POWER_COMPUTING_WILDFIRE_060_1
 
	`ZORRO_ID
(
DKB_POWER_COMPUTING
, 0x17, 0)

	)

150 
	#ZORRO_PROD_DKB_POWER_COMPUTING_WILDFIRE_060_2
 
	`ZORRO_ID
(
DKB_POWER_COMPUTING
, 0xFF, 0)

	)

152 
	#ZORRO_MANUF_GREAT_VALLEY_PRODUCTS_2
 0x07E1

	)

153 
	#ZORRO_PROD_GVP_IMPACT_SERIES_I_4K
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x01, 0)

	)

154 
	#ZORRO_PROD_GVP_IMPACT_SERIES_I_16K_2
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x02, 0)

	)

155 
	#ZORRO_PROD_GVP_IMPACT_SERIES_I_16K_3
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x03, 0)

	)

156 
	#ZORRO_PROD_GVP_IMPACT_3001_IDE_1
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x08, 0)

	)

157 
	#ZORRO_PROD_GVP_IMPACT_3001_RAM
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x09, 0)

	)

158 
	#ZORRO_PROD_GVP_IMPACT_SERIES_II_RAM_1
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0A, 0)

	)

159 
	#ZORRO_PROD_GVP_EPC_BASE
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0)

	)

160 
	#ZORRO_PROD_GVP_GFORCE_040_1
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0x20)

	)

161 
	#ZORRO_PROD_GVP_GFORCE_040_SCSI_1
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0x30)

	)

162 
	#ZORRO_PROD_GVP_A1291
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0x40)

	)

163 
	#ZORRO_PROD_GVP_COMBO_030_R4
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0x60)

	)

164 
	#ZORRO_PROD_GVP_COMBO_030_R4_SCSI
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0x70)

	)

165 
	#ZORRO_PROD_GVP_PHONEPAK
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0x78)

	)

166 
	#ZORRO_PROD_GVP_IO_EXTENDER
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0x98)

	)

167 
	#ZORRO_PROD_GVP_GFORCE_030
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0xa0)

	)

168 
	#ZORRO_PROD_GVP_GFORCE_030_SCSI
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0xb0)

	)

169 
	#ZORRO_PROD_GVP_A530
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0xc0)

	)

170 
	#ZORRO_PROD_GVP_A530_SCSI
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0xd0)

	)

171 
	#ZORRO_PROD_GVP_COMBO_030_R3
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0xe0)

	)

172 
	#ZORRO_PROD_GVP_COMBO_030_R3_SCSI
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0xf0)

	)

173 
	#ZORRO_PROD_GVP_SERIES_II
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0B, 0xf8)

	)

174 
	#ZORRO_PROD_GVP_IMPACT_3001_IDE_2
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x0D, 0)

	)

176 
	#ZORRO_PROD_GVP_GFORCE_040_060
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x16, 0)

	)

177 
	#ZORRO_PROD_GVP_IMPACT_VISION_24
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0x20, 0)

	)

178 
	#ZORRO_PROD_GVP_GFORCE_040_2
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_2
, 0xFF, 0)

	)

180 
	#ZORRO_MANUF_CALIFORNIA_ACCESS_SYNERGY
 0x07E5

	)

181 
	#ZORRO_PROD_CALIFORNIA_ACCESS_SYNERGY_MALIBU
 
	`ZORRO_ID
(
CALIFORNIA_ACCESS_SYNERGY
, 0x01, 0)

	)

183 
	#ZORRO_MANUF_XETEC
 0x07E6

	)

184 
	#ZORRO_PROD_XETEC_FASTCARD
 
	`ZORRO_ID
(
XETEC
, 0x01, 0)

	)

185 
	#ZORRO_PROD_XETEC_FASTCARD_RAM
 
	`ZORRO_ID
(
XETEC
, 0x02, 0)

	)

186 
	#ZORRO_PROD_XETEC_FASTCARD_PLUS
 
	`ZORRO_ID
(
XETEC
, 0x03, 0)

	)

188 
	#ZORRO_MANUF_PROGRESSIVE_PERIPHERALS_AND_SYSTEMS
 0x07EA

	)

189 
	#ZORRO_PROD_PPS_MERCURY
 
	`ZORRO_ID
(
PROGRESSIVE_PERIPHERALS_AND_SYSTEMS
, 0x00, 0)

	)

190 
	#ZORRO_PROD_PPS_A3000_68040
 
	`ZORRO_ID
(
PROGRESSIVE_PERIPHERALS_AND_SYSTEMS
, 0x01, 0)

	)

191 
	#ZORRO_PROD_PPS_A2000_68040
 
	`ZORRO_ID
(
PROGRESSIVE_PERIPHERALS_AND_SYSTEMS
, 0x69, 0)

	)

192 
	#ZORRO_PROD_PPS_ZEUS
 
	`ZORRO_ID
(
PROGRESSIVE_PERIPHERALS_AND_SYSTEMS
, 0x96, 0)

	)

193 
	#ZORRO_PROD_PPS_A500_68040
 
	`ZORRO_ID
(
PROGRESSIVE_PERIPHERALS_AND_SYSTEMS
, 0xBB, 0)

	)

195 
	#ZORRO_MANUF_XEBEC
 0x07EC

	)

197 
	#ZORRO_MANUF_SPIRIT_TECHNOLOGY
 0x07F2

	)

198 
	#ZORRO_PROD_SPIRIT_TECHNOLOGY_INSIDER_IN1000
 
	`ZORRO_ID
(
SPIRIT_TECHNOLOGY
, 0x01, 0)

	)

199 
	#ZORRO_PROD_SPIRIT_TECHNOLOGY_INSIDER_IN500
 
	`ZORRO_ID
(
SPIRIT_TECHNOLOGY
, 0x02, 0)

	)

200 
	#ZORRO_PROD_SPIRIT_TECHNOLOGY_SIN500
 
	`ZORRO_ID
(
SPIRIT_TECHNOLOGY
, 0x03, 0)

	)

201 
	#ZORRO_PROD_SPIRIT_TECHNOLOGY_HDA_506
 
	`ZORRO_ID
(
SPIRIT_TECHNOLOGY
, 0x04, 0)

	)

202 
	#ZORRO_PROD_SPIRIT_TECHNOLOGY_AX_S
 
	`ZORRO_ID
(
SPIRIT_TECHNOLOGY
, 0x05, 0)

	)

203 
	#ZORRO_PROD_SPIRIT_TECHNOLOGY_OCTABYTE
 
	`ZORRO_ID
(
SPIRIT_TECHNOLOGY
, 0x06, 0)

	)

204 
	#ZORRO_PROD_SPIRIT_TECHNOLOGY_INMATE
 
	`ZORRO_ID
(
SPIRIT_TECHNOLOGY
, 0x08, 0)

	)

206 
	#ZORRO_MANUF_SPIRIT_TECHNOLOGY_2
 0x07F3

	)

208 
	#ZORRO_MANUF_BSC_ALFADATA_1
 0x07FE

	)

209 
	#ZORRO_PROD_BSC_ALF_3_1
 
	`ZORRO_ID
(
BSC_ALFADATA_1
, 0x03, 0)

	)

211 
	#ZORRO_MANUF_BSC_ALFADATA_2
 0x0801

	)

212 
	#ZORRO_PROD_BSC_ALF_2_1
 
	`ZORRO_ID
(
BSC_ALFADATA_2
, 0x01, 0)

	)

213 
	#ZORRO_PROD_BSC_ALF_2_2
 
	`ZORRO_ID
(
BSC_ALFADATA_2
, 0x02, 0)

	)

214 
	#ZORRO_PROD_BSC_ALF_3_2
 
	`ZORRO_ID
(
BSC_ALFADATA_2
, 0x03, 0)

	)

216 
	#ZORRO_MANUF_CARDCO_2
 0x0802

	)

217 
	#ZORRO_PROD_CARDCO_KRONOS_2000_2
 
	`ZORRO_ID
(
CARDCO_2
, 0x04, 0)

	)

218 
	#ZORRO_PROD_CARDCO_A1000_2
 
	`ZORRO_ID
(
CARDCO_2
, 0x0C, 0)

	)

220 
	#ZORRO_MANUF_JOCHHEIM
 0x0804

	)

221 
	#ZORRO_PROD_JOCHHEIM_RAM
 
	`ZORRO_ID
(
JOCHHEIM
, 0x01, 0)

	)

223 
	#ZORRO_MANUF_CHECKPOINT_TECHNOLOGIES
 0x0807

	)

224 
	#ZORRO_PROD_CHECKPOINT_TECHNOLOGIES_SERIAL_SOLUTION
 
	`ZORRO_ID
(
CHECKPOINT_TECHNOLOGIES
, 0x00, 0)

	)

226 
	#ZORRO_MANUF_EDOTRONIK
 0x0810

	)

227 
	#ZORRO_PROD_EDOTRONIK_IEEE_488
 
	`ZORRO_ID
(
EDOTRONIK
, 0x01, 0)

	)

228 
	#ZORRO_PROD_EDOTRONIK_8032
 
	`ZORRO_ID
(
EDOTRONIK
, 0x02, 0)

	)

229 
	#ZORRO_PROD_EDOTRONIK_MULTISERIAL
 
	`ZORRO_ID
(
EDOTRONIK
, 0x03, 0)

	)

230 
	#ZORRO_PROD_EDOTRONIK_VIDEODIGITIZER
 
	`ZORRO_ID
(
EDOTRONIK
, 0x04, 0)

	)

231 
	#ZORRO_PROD_EDOTRONIK_PARALLEL_IO
 
	`ZORRO_ID
(
EDOTRONIK
, 0x05, 0)

	)

232 
	#ZORRO_PROD_EDOTRONIK_PIC_PROTOYPING
 
	`ZORRO_ID
(
EDOTRONIK
, 0x06, 0)

	)

233 
	#ZORRO_PROD_EDOTRONIK_ADC
 
	`ZORRO_ID
(
EDOTRONIK
, 0x07, 0)

	)

234 
	#ZORRO_PROD_EDOTRONIK_VME
 
	`ZORRO_ID
(
EDOTRONIK
, 0x08, 0)

	)

235 
	#ZORRO_PROD_EDOTRONIK_DSP96000
 
	`ZORRO_ID
(
EDOTRONIK
, 0x09, 0)

	)

237 
	#ZORRO_MANUF_NES_INC
 0x0813

	)

238 
	#ZORRO_PROD_NES_INC_RAM
 
	`ZORRO_ID
(
NES_INC
, 0x00, 0)

	)

240 
	#ZORRO_MANUF_ICD
 0x0817

	)

241 
	#ZORRO_PROD_ICD_ADVANTAGE_2000_SCSI
 
	`ZORRO_ID
(
ICD
, 0x01, 0)

	)

242 
	#ZORRO_PROD_ICD_ADVANTAGE_IDE
 
	`ZORRO_ID
(
ICD
, 0x03, 0)

	)

243 
	#ZORRO_PROD_ICD_ADVANTAGE_2080_RAM
 
	`ZORRO_ID
(
ICD
, 0x04, 0)

	)

245 
	#ZORRO_MANUF_KUPKE_2
 0x0819

	)

246 
	#ZORRO_PROD_KUPKE_OMTI
 
	`ZORRO_ID
(
KUPKE_2
, 0x01, 0)

	)

247 
	#ZORRO_PROD_KUPKE_SCSI_II
 
	`ZORRO_ID
(
KUPKE_2
, 0x02, 0)

	)

248 
	#ZORRO_PROD_KUPKE_GOLEM_BOX
 
	`ZORRO_ID
(
KUPKE_2
, 0x03, 0)

	)

249 
	#ZORRO_PROD_KUPKE_030_882
 
	`ZORRO_ID
(
KUPKE_2
, 0x04, 0)

	)

250 
	#ZORRO_PROD_KUPKE_SCSI_AT
 
	`ZORRO_ID
(
KUPKE_2
, 0x05, 0)

	)

252 
	#ZORRO_MANUF_GREAT_VALLEY_PRODUCTS_3
 0x081D

	)

253 
	#ZORRO_PROD_GVP_A2000_RAM8
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_3
, 0x09, 0)

	)

254 
	#ZORRO_PROD_GVP_IMPACT_SERIES_II_RAM_2
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_3
, 0x0A, 0)

	)

256 
	#ZORRO_MANUF_INTERWORKS_NETWORK
 0x081E

	)

258 
	#ZORRO_MANUF_HARDITAL_SYNTHESIS
 0x0820

	)

259 
	#ZORRO_PROD_HARDITAL_SYNTHESIS_TQM_68030_68882
 
	`ZORRO_ID
(
HARDITAL_SYNTHESIS
, 0x14, 0)

	)

261 
	#ZORRO_MANUF_APPLIED_ENGINEERING
 0x0828

	)

262 
	#ZORRO_PROD_APPLIED_ENGINEERING_DL2000
 
	`ZORRO_ID
(
APPLIED_ENGINEERING
, 0x10, 0)

	)

263 
	#ZORRO_PROD_APPLIED_ENGINEERING_RAM_WORKS
 
	`ZORRO_ID
(
APPLIED_ENGINEERING
, 0xE0, 0)

	)

265 
	#ZORRO_MANUF_BSC_ALFADATA_3
 0x082C

	)

266 
	#ZORRO_PROD_BSC_OKTAGON_2008
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x05, 0)

	)

267 
	#ZORRO_PROD_BSC_TANDEM_AT_2008_508
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x06, 0)

	)

268 
	#ZORRO_PROD_BSC_ALFA_RAM_1200
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x07, 0)

	)

269 
	#ZORRO_PROD_BSC_OKTAGON_2008_RAM
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x08, 0)

	)

270 
	#ZORRO_PROD_BSC_MULTIFACE_I
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x10, 0)

	)

271 
	#ZORRO_PROD_BSC_MULTIFACE_II
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x11, 0)

	)

272 
	#ZORRO_PROD_BSC_MULTIFACE_III
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x12, 0)

	)

273 
	#ZORRO_PROD_BSC_FRAMEMASTER_II
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x20, 0)

	)

274 
	#ZORRO_PROD_BSC_GRAFFITI_RAM
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x21, 0)

	)

275 
	#ZORRO_PROD_BSC_GRAFFITI_REG
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x22, 0)

	)

276 
	#ZORRO_PROD_BSC_ISDN_MASTERCARD
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x40, 0)

	)

277 
	#ZORRO_PROD_BSC_ISDN_MASTERCARD_II
 
	`ZORRO_ID
(
BSC_ALFADATA_3
, 0x41, 0)

	)

279 
	#ZORRO_MANUF_PHOENIX
 0x0835

	)

280 
	#ZORRO_PROD_PHOENIX_ST506
 
	`ZORRO_ID
(
PHOENIX
, 0x21, 0)

	)

281 
	#ZORRO_PROD_PHOENIX_SCSI
 
	`ZORRO_ID
(
PHOENIX
, 0x22, 0)

	)

282 
	#ZORRO_PROD_PHOENIX_RAM
 
	`ZORRO_ID
(
PHOENIX
, 0xBE, 0)

	)

284 
	#ZORRO_MANUF_ADVANCED_STORAGE_SYSTEMS
 0x0836

	)

285 
	#ZORRO_PROD_ADVANCED_STORAGE_SYSTEMS_NEXUS
 
	`ZORRO_ID
(
ADVANCED_STORAGE_SYSTEMS
, 0x01, 0)

	)

286 
	#ZORRO_PROD_ADVANCED_STORAGE_SYSTEMS_NEXUS_RAM
 
	`ZORRO_ID
(
ADVANCED_STORAGE_SYSTEMS
, 0x08, 0)

	)

288 
	#ZORRO_MANUF_IMPULSE
 0x0838

	)

289 
	#ZORRO_PROD_IMPULSE_FIRECRACKER_24
 
	`ZORRO_ID
(
IMPULSE
, 0x00, 0)

	)

291 
	#ZORRO_MANUF_IVS
 0x0840

	)

292 
	#ZORRO_PROD_IVS_GRANDSLAM_PIC_2
 
	`ZORRO_ID
(
IVS
, 0x02, 0)

	)

293 
	#ZORRO_PROD_IVS_GRANDSLAM_PIC_1
 
	`ZORRO_ID
(
IVS
, 0x04, 0)

	)

294 
	#ZORRO_PROD_IVS_OVERDRIVE
 
	`ZORRO_ID
(
IVS
, 0x10, 0)

	)

295 
	#ZORRO_PROD_IVS_TRUMPCARD_CLASSIC
 
	`ZORRO_ID
(
IVS
, 0x30, 0)

	)

296 
	#ZORRO_PROD_IVS_TRUMPCARD_PRO_GRANDSLAM
 
	`ZORRO_ID
(
IVS
, 0x34, 0)

	)

297 
	#ZORRO_PROD_IVS_META_4
 
	`ZORRO_ID
(
IVS
, 0x40, 0)

	)

298 
	#ZORRO_PROD_IVS_WAVETOOLS
 
	`ZORRO_ID
(
IVS
, 0xBF, 0)

	)

299 
	#ZORRO_PROD_IVS_VECTOR_1
 
	`ZORRO_ID
(
IVS
, 0xF3, 0)

	)

300 
	#ZORRO_PROD_IVS_VECTOR_2
 
	`ZORRO_ID
(
IVS
, 0xF4, 0)

	)

302 
	#ZORRO_MANUF_VECTOR_1
 0x0841

	)

303 
	#ZORRO_PROD_VECTOR_CONNECTION_1
 
	`ZORRO_ID
(
VECTOR_1
, 0xE3, 0)

	)

305 
	#ZORRO_MANUF_XPERT_PRODEV
 0x0845

	)

306 
	#ZORRO_PROD_XPERT_PRODEV_VISIONA_RAM
 
	`ZORRO_ID
(
XPERT_PRODEV
, 0x01, 0)

	)

307 
	#ZORRO_PROD_XPERT_PRODEV_VISIONA_REG
 
	`ZORRO_ID
(
XPERT_PRODEV
, 0x02, 0)

	)

308 
	#ZORRO_PROD_XPERT_PRODEV_MERLIN_RAM
 
	`ZORRO_ID
(
XPERT_PRODEV
, 0x03, 0)

	)

309 
	#ZORRO_PROD_XPERT_PRODEV_MERLIN_REG_1
 
	`ZORRO_ID
(
XPERT_PRODEV
, 0x04, 0)

	)

310 
	#ZORRO_PROD_XPERT_PRODEV_MERLIN_REG_2
 
	`ZORRO_ID
(
XPERT_PRODEV
, 0xC9, 0)

	)

312 
	#ZORRO_MANUF_HYDRA_SYSTEMS
 0x0849

	)

313 
	#ZORRO_PROD_HYDRA_SYSTEMS_AMIGANET
 
	`ZORRO_ID
(
HYDRA_SYSTEMS
, 0x01, 0)

	)

315 
	#ZORRO_MANUF_SUNRIZE_INDUSTRIES
 0x084F

	)

316 
	#ZORRO_PROD_SUNRIZE_INDUSTRIES_AD1012
 
	`ZORRO_ID
(
SUNRIZE_INDUSTRIES
, 0x01, 0)

	)

317 
	#ZORRO_PROD_SUNRIZE_INDUSTRIES_AD516
 
	`ZORRO_ID
(
SUNRIZE_INDUSTRIES
, 0x02, 0)

	)

318 
	#ZORRO_PROD_SUNRIZE_INDUSTRIES_DD512
 
	`ZORRO_ID
(
SUNRIZE_INDUSTRIES
, 0x03, 0)

	)

320 
	#ZORRO_MANUF_TRICERATOPS
 0x0850

	)

321 
	#ZORRO_PROD_TRICERATOPS_MULTI_IO
 
	`ZORRO_ID
(
TRICERATOPS
, 0x01, 0)

	)

323 
	#ZORRO_MANUF_APPLIED_MAGIC
 0x0851

	)

324 
	#ZORRO_PROD_APPLIED_MAGIC_DMI_RESOLVER
 
	`ZORRO_ID
(
APPLIED_MAGIC
, 0x01, 0)

	)

325 
	#ZORRO_PROD_APPLIED_MAGIC_DIGITAL_BROADCASTER
 
	`ZORRO_ID
(
APPLIED_MAGIC
, 0x06, 0)

	)

327 
	#ZORRO_MANUF_GFX_BASE
 0x085E

	)

328 
	#ZORRO_PROD_GFX_BASE_GDA_1_VRAM
 
	`ZORRO_ID
(
GFX_BASE
, 0x00, 0)

	)

329 
	#ZORRO_PROD_GFX_BASE_GDA_1
 
	`ZORRO_ID
(
GFX_BASE
, 0x01, 0)

	)

331 
	#ZORRO_MANUF_ROCTEC
 0x0860

	)

332 
	#ZORRO_PROD_ROCTEC_RH_800C
 
	`ZORRO_ID
(
ROCTEC
, 0x01, 0)

	)

333 
	#ZORRO_PROD_ROCTEC_RH_800C_RAM
 
	`ZORRO_ID
(
ROCTEC
, 0x01, 0)

	)

335 
	#ZORRO_MANUF_KATO
 0x0861

	)

336 
	#ZORRO_PROD_KATO_MELODY
 
	`ZORRO_ID
(
KATO
, 0x80, 0)

	)

338 
	#ZORRO_MANUF_HELFRICH_1
 0x0861

	)

339 
	#ZORRO_PROD_HELFRICH_RAINBOW_II
 
	`ZORRO_ID
(
HELFRICH_1
, 0x20, 0)

	)

340 
	#ZORRO_PROD_HELFRICH_RAINBOW_III
 
	`ZORRO_ID
(
HELFRICH_1
, 0x21, 0)

	)

342 
	#ZORRO_MANUF_ATLANTIS
 0x0862

	)

344 
	#ZORRO_MANUF_PROTAR
 0x0864

	)

346 
	#ZORRO_MANUF_ACS
 0x0865

	)

348 
	#ZORRO_MANUF_SOFTWARE_RESULTS_ENTERPRISES
 0x0866

	)

349 
	#ZORRO_PROD_SOFTWARE_RESULTS_ENTERPRISES_GOLDEN_GATE_2_BUS_PLUS
 
	`ZORRO_ID
(
SOFTWARE_RESULTS_ENTERPRISES
, 0x01, 0)

	)

351 
	#ZORRO_MANUF_MASOBOSHI
 0x086D

	)

352 
	#ZORRO_PROD_MASOBOSHI_MASTER_CARD_SC201
 
	`ZORRO_ID
(
MASOBOSHI
, 0x03, 0)

	)

353 
	#ZORRO_PROD_MASOBOSHI_MASTER_CARD_MC702
 
	`ZORRO_ID
(
MASOBOSHI
, 0x04, 0)

	)

354 
	#ZORRO_PROD_MASOBOSHI_MVD_819
 
	`ZORRO_ID
(
MASOBOSHI
, 0x07, 0)

	)

356 
	#ZORRO_MANUF_MAINHATTAN_DATA
 0x086F

	)

357 
	#ZORRO_PROD_MAINHATTAN_DATA_IDE
 
	`ZORRO_ID
(
MAINHATTAN_DATA
, 0x01, 0)

	)

359 
	#ZORRO_MANUF_VILLAGE_TRONIC
 0x0877

	)

360 
	#ZORRO_PROD_VILLAGE_TRONIC_DOMINO_RAM
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x01, 0)

	)

361 
	#ZORRO_PROD_VILLAGE_TRONIC_DOMINO_REG
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x02, 0)

	)

362 
	#ZORRO_PROD_VILLAGE_TRONIC_DOMINO_16M_PROTOTYPE
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x03, 0)

	)

363 
	#ZORRO_PROD_VILLAGE_TRONIC_PICASSO_II_II_PLUS_RAM
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x0B, 0)

	)

364 
	#ZORRO_PROD_VILLAGE_TRONIC_PICASSO_II_II_PLUS_REG
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x0C, 0)

	)

365 
	#ZORRO_PROD_VILLAGE_TRONIC_PICASSO_II_II_PLUS_SEGMENTED_MODE
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x0D, 0)

	)

366 
	#ZORRO_PROD_VILLAGE_TRONIC_PICASSO_IV_Z2_MEM1
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x15, 0)

	)

367 
	#ZORRO_PROD_VILLAGE_TRONIC_PICASSO_IV_Z2_MEM2
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x16, 0)

	)

368 
	#ZORRO_PROD_VILLAGE_TRONIC_PICASSO_IV_Z2_REG
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x17, 0)

	)

369 
	#ZORRO_PROD_VILLAGE_TRONIC_PICASSO_IV_Z3
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0x18, 0)

	)

370 
	#ZORRO_PROD_VILLAGE_TRONIC_ARIADNE
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0xC9, 0)

	)

371 
	#ZORRO_PROD_VILLAGE_TRONIC_ARIADNE2
 
	`ZORRO_ID
(
VILLAGE_TRONIC
, 0xCA, 0)

	)

373 
	#ZORRO_MANUF_UTILITIES_UNLIMITED
 0x087B

	)

374 
	#ZORRO_PROD_UTILITIES_UNLIMITED_EMPLANT_DELUXE
 
	`ZORRO_ID
(
UTILITIES_UNLIMITED
, 0x15, 0)

	)

375 
	#ZORRO_PROD_UTILITIES_UNLIMITED_EMPLANT_DELUXE2
 
	`ZORRO_ID
(
UTILITIES_UNLIMITED
, 0x20, 0)

	)

377 
	#ZORRO_MANUF_AMITRIX
 0x0880

	)

378 
	#ZORRO_PROD_AMITRIX_MULTI_IO
 
	`ZORRO_ID
(
AMITRIX
, 0x01, 0)

	)

379 
	#ZORRO_PROD_AMITRIX_CD_RAM
 
	`ZORRO_ID
(
AMITRIX
, 0x02, 0)

	)

381 
	#ZORRO_MANUF_ARMAX
 0x0885

	)

382 
	#ZORRO_PROD_ARMAX_OMNIBUS
 
	`ZORRO_ID
(
ARMAX
, 0x00, 0)

	)

384 
	#ZORRO_MANUF_ZEUS
 0x088D

	)

385 
	#ZORRO_PROD_ZEUS_SPIDER
 
	`ZORRO_ID
(
ZEUS
, 0x04, 0)

	)

387 
	#ZORRO_MANUF_NEWTEK
 0x088F

	)

388 
	#ZORRO_PROD_NEWTEK_VIDEOTOASTER
 
	`ZORRO_ID
(
NEWTEK
, 0x00, 0)

	)

390 
	#ZORRO_MANUF_M_TECH_GERMANY
 0x0890

	)

391 
	#ZORRO_PROD_MTEC_AT500_2
 
	`ZORRO_ID
(
M_TECH_GERMANY
, 0x01, 0)

	)

392 
	#ZORRO_PROD_MTEC_68030
 
	`ZORRO_ID
(
M_TECH_GERMANY
, 0x03, 0)

	)

393 
	#ZORRO_PROD_MTEC_68020I
 
	`ZORRO_ID
(
M_TECH_GERMANY
, 0x06, 0)

	)

394 
	#ZORRO_PROD_MTEC_A1200_T68030_RTC
 
	`ZORRO_ID
(
M_TECH_GERMANY
, 0x20, 0)

	)

395 
	#ZORRO_PROD_MTEC_VIPER_MK_V_E_MATRIX_530
 
	`ZORRO_ID
(
M_TECH_GERMANY
, 0x21, 0)

	)

396 
	#ZORRO_PROD_MTEC_8_MB_RAM
 
	`ZORRO_ID
(
M_TECH_GERMANY
, 0x22, 0)

	)

397 
	#ZORRO_PROD_MTEC_VIPER_MK_V_E_MATRIX_530_SCSI_IDE
 
	`ZORRO_ID
(
M_TECH_GERMANY
, 0x24, 0)

	)

399 
	#ZORRO_MANUF_GREAT_VALLEY_PRODUCTS_4
 0x0891

	)

400 
	#ZORRO_PROD_GVP_EGS_28_24_SPECTRUM_RAM
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_4
, 0x01, 0)

	)

401 
	#ZORRO_PROD_GVP_EGS_28_24_SPECTRUM_REG
 
	`ZORRO_ID
(
GREAT_VALLEY_PRODUCTS_4
, 0x02, 0)

	)

403 
	#ZORRO_MANUF_APOLLO_1
 0x0892

	)

404 
	#ZORRO_PROD_APOLLO_A1200
 
	`ZORRO_ID
(
APOLLO_1
, 0x01, 0)

	)

406 
	#ZORRO_MANUF_HELFRICH_2
 0x0893

	)

407 
	#ZORRO_PROD_HELFRICH_PICCOLO_RAM
 
	`ZORRO_ID
(
HELFRICH_2
, 0x05, 0)

	)

408 
	#ZORRO_PROD_HELFRICH_PICCOLO_REG
 
	`ZORRO_ID
(
HELFRICH_2
, 0x06, 0)

	)

409 
	#ZORRO_PROD_HELFRICH_PEGGY_PLUS_MPEG
 
	`ZORRO_ID
(
HELFRICH_2
, 0x07, 0)

	)

410 
	#ZORRO_PROD_HELFRICH_VIDEOCRUNCHER
 
	`ZORRO_ID
(
HELFRICH_2
, 0x08, 0)

	)

411 
	#ZORRO_PROD_HELFRICH_SD64_RAM
 
	`ZORRO_ID
(
HELFRICH_2
, 0x0A, 0)

	)

412 
	#ZORRO_PROD_HELFRICH_SD64_REG
 
	`ZORRO_ID
(
HELFRICH_2
, 0x0B, 0)

	)

414 
	#ZORRO_MANUF_MACROSYSTEMS_USA
 0x089B

	)

415 
	#ZORRO_PROD_MACROSYSTEMS_WARP_ENGINE_40xx
 
	`ZORRO_ID
(
MACROSYSTEMS_USA
, 0x13, 0)

	)

417 
	#ZORRO_MANUF_ELBOX_COMPUTER
 0x089E

	)

418 
	#ZORRO_PROD_ELBOX_COMPUTER_1200_4
 
	`ZORRO_ID
(
ELBOX_COMPUTER
, 0x06, 0)

	)

420 
	#ZORRO_MANUF_HARMS_PROFESSIONAL
 0x0A00

	)

421 
	#ZORRO_PROD_HARMS_PROFESSIONAL_030_PLUS
 
	`ZORRO_ID
(
HARMS_PROFESSIONAL
, 0x10, 0)

	)

422 
	#ZORRO_PROD_HARMS_PROFESSIONAL_3500
 
	`ZORRO_ID
(
HARMS_PROFESSIONAL
, 0xD0, 0)

	)

424 
	#ZORRO_MANUF_MICRONIK
 0x0A50

	)

425 
	#ZORRO_PROD_MICRONIK_RCA_120
 
	`ZORRO_ID
(
MICRONIK
, 0x0A, 0)

	)

427 
	#ZORRO_MANUF_MICRONIK2
 0x0F0F

	)

428 
	#ZORRO_PROD_MICRONIK2_Z3I
 
	`ZORRO_ID
(
MICRONIK2
, 0x01, 0)

	)

430 
	#ZORRO_MANUF_MEGAMICRO
 0x1000

	)

431 
	#ZORRO_PROD_MEGAMICRO_SCRAM_500
 
	`ZORRO_ID
(
MEGAMICRO
, 0x03, 0)

	)

432 
	#ZORRO_PROD_MEGAMICRO_SCRAM_500_RAM
 
	`ZORRO_ID
(
MEGAMICRO
, 0x04, 0)

	)

434 
	#ZORRO_MANUF_IMTRONICS_2
 0x1028

	)

435 
	#ZORRO_PROD_IMTRONICS_HURRICANE_2800_3
 
	`ZORRO_ID
(
IMTRONICS_2
, 0x39, 0)

	)

436 
	#ZORRO_PROD_IMTRONICS_HURRICANE_2800_4
 
	`ZORRO_ID
(
IMTRONICS_2
, 0x57, 0)

	)

438 
	#ZORRO_MANUF_INDIVIDUAL_COMPUTERS
 0x1212

	)

439 
	#ZORRO_PROD_INDIVIDUAL_COMPUTERS_BUDDHA
 
	`ZORRO_ID
(
INDIVIDUAL_COMPUTERS
, 0x00, 0)

	)

440 
	#ZORRO_PROD_INDIVIDUAL_COMPUTERS_X_SURF
 
	`ZORRO_ID
(
INDIVIDUAL_COMPUTERS
, 0x17, 0)

	)

441 
	#ZORRO_PROD_INDIVIDUAL_COMPUTERS_CATWEASEL
 
	`ZORRO_ID
(
INDIVIDUAL_COMPUTERS
, 0x2A, 0)

	)

443 
	#ZORRO_MANUF_KUPKE_3
 0x1248

	)

444 
	#ZORRO_PROD_KUPKE_GOLEM_HD_3000
 
	`ZORRO_ID
(
KUPKE_3
, 0x01, 0)

	)

446 
	#ZORRO_MANUF_ITH
 0x1388

	)

447 
	#ZORRO_PROD_ITH_ISDN_MASTER_II
 
	`ZORRO_ID
(
ITH
, 0x01, 0)

	)

449 
	#ZORRO_MANUF_VMC
 0x1389

	)

450 
	#ZORRO_PROD_VMC_ISDN_BLASTER_Z2
 
	`ZORRO_ID
(
VMC
, 0x01, 0)

	)

451 
	#ZORRO_PROD_VMC_HYPERCOM_4
 
	`ZORRO_ID
(
VMC
, 0x02, 0)

	)

453 
	#ZORRO_MANUF_INFORMATION
 0x157C

	)

454 
	#ZORRO_PROD_INFORMATION_ISDN_ENGINE_I
 
	`ZORRO_ID
(
INFORMATION
, 0x64, 0)

	)

456 
	#ZORRO_MANUF_VORTEX
 0x2017

	)

457 
	#ZORRO_PROD_VORTEX_GOLDEN_GATE_80386SX
 
	`ZORRO_ID
(
VORTEX
, 0x07, 0)

	)

458 
	#ZORRO_PROD_VORTEX_GOLDEN_GATE_RAM
 
	`ZORRO_ID
(
VORTEX
, 0x08, 0)

	)

459 
	#ZORRO_PROD_VORTEX_GOLDEN_GATE_80486
 
	`ZORRO_ID
(
VORTEX
, 0x09, 0)

	)

461 
	#ZORRO_MANUF_EXPANSION_SYSTEMS
 0x2062

	)

462 
	#ZORRO_PROD_EXPANSION_SYSTEMS_DATAFLYER_4000SX
 
	`ZORRO_ID
(
EXPANSION_SYSTEMS
, 0x01, 0)

	)

463 
	#ZORRO_PROD_EXPANSION_SYSTEMS_DATAFLYER_4000SX_RAM
 
	`ZORRO_ID
(
EXPANSION_SYSTEMS
, 0x02, 0)

	)

465 
	#ZORRO_MANUF_READYSOFT
 0x2100

	)

466 
	#ZORRO_PROD_READYSOFT_AMAX_II_IV
 
	`ZORRO_ID
(
READYSOFT
, 0x01, 0)

	)

468 
	#ZORRO_MANUF_PHASE5
 0x2140

	)

469 
	#ZORRO_PROD_PHASE5_BLIZZARD_RAM
 
	`ZORRO_ID
(
PHASE5
, 0x01, 0)

	)

470 
	#ZORRO_PROD_PHASE5_BLIZZARD
 
	`ZORRO_ID
(
PHASE5
, 0x02, 0)

	)

471 
	#ZORRO_PROD_PHASE5_BLIZZARD_1220_IV
 
	`ZORRO_ID
(
PHASE5
, 0x06, 0)

	)

472 
	#ZORRO_PROD_PHASE5_FASTLANE_Z3_RAM
 
	`ZORRO_ID
(
PHASE5
, 0x0A, 0)

	)

473 
	#ZORRO_PROD_PHASE5_BLIZZARD_1230_II_FASTLANE_Z3_CYBERSCSI_CYBERSTORM060
 
	`ZORRO_ID
(
PHASE5
, 0x0B, 0)

	)

474 
	#ZORRO_PROD_PHASE5_BLIZZARD_1220_CYBERSTORM
 
	`ZORRO_ID
(
PHASE5
, 0x0C, 0)

	)

475 
	#ZORRO_PROD_PHASE5_BLIZZARD_1230
 
	`ZORRO_ID
(
PHASE5
, 0x0D, 0)

	)

476 
	#ZORRO_PROD_PHASE5_BLIZZARD_1230_IV_1260
 
	`ZORRO_ID
(
PHASE5
, 0x11, 0)

	)

477 
	#ZORRO_PROD_PHASE5_BLIZZARD_2060
 
	`ZORRO_ID
(
PHASE5
, 0x18, 0)

	)

478 
	#ZORRO_PROD_PHASE5_CYBERSTORM_MK_II
 
	`ZORRO_ID
(
PHASE5
, 0x19, 0)

	)

479 
	#ZORRO_PROD_PHASE5_CYBERVISION64
 
	`ZORRO_ID
(
PHASE5
, 0x22, 0)

	)

480 
	#ZORRO_PROD_PHASE5_CYBERVISION64_3D_PROTOTYPE
 
	`ZORRO_ID
(
PHASE5
, 0x32, 0)

	)

481 
	#ZORRO_PROD_PHASE5_CYBERVISION64_3D
 
	`ZORRO_ID
(
PHASE5
, 0x43, 0)

	)

482 
	#ZORRO_PROD_PHASE5_CYBERSTORM_MK_III
 
	`ZORRO_ID
(
PHASE5
, 0x64, 0)

	)

483 
	#ZORRO_PROD_PHASE5_BLIZZARD_603E_PLUS
 
	`ZORRO_ID
(
PHASE5
, 0x6e, 0)

	)

485 
	#ZORRO_MANUF_DPS
 0x2169

	)

486 
	#ZORRO_PROD_DPS_PERSONAL_ANIMATION_RECORDER
 
	`ZORRO_ID
(
DPS
, 0x01, 0)

	)

488 
	#ZORRO_MANUF_APOLLO_2
 0x2200

	)

489 
	#ZORRO_PROD_APOLLO_A620_68020_1
 
	`ZORRO_ID
(
APOLLO_2
, 0x00, 0)

	)

490 
	#ZORRO_PROD_APOLLO_A620_68020_2
 
	`ZORRO_ID
(
APOLLO_2
, 0x01, 0)

	)

492 
	#ZORRO_MANUF_APOLLO_3
 0x2222

	)

493 
	#ZORRO_PROD_APOLLO_AT_APOLLO
 
	`ZORRO_ID
(
APOLLO_3
, 0x22, 0)

	)

494 
	#ZORRO_PROD_APOLLO_1230_1240_1260_2030_4040_4060
 
	`ZORRO_ID
(
APOLLO_3
, 0x23, 0)

	)

496 
	#ZORRO_MANUF_PETSOFF_LP
 0x38A5

	)

497 
	#ZORRO_PROD_PETSOFF_LP_DELFINA
 
	`ZORRO_ID
(
PETSOFF_LP
, 0x00, 0)

	)

498 
	#ZORRO_PROD_PETSOFF_LP_DELFINA_LITE
 
	`ZORRO_ID
(
PETSOFF_LP
, 0x01, 0)

	)

500 
	#ZORRO_MANUF_UWE_GERLACH
 0x3FF7

	)

501 
	#ZORRO_PROD_UWE_GERLACH_RAM_ROM
 
	`ZORRO_ID
(
UWE_GERLACH
, 0xd4, 0)

	)

503 
	#ZORRO_MANUF_ACT
 0x4231

	)

504 
	#ZORRO_PROD_ACT_PRELUDE
 
	`ZORRO_ID
(
ACT
, 0x01, 0)

	)

506 
	#ZORRO_MANUF_MACROSYSTEMS_GERMANY
 0x4754

	)

507 
	#ZORRO_PROD_MACROSYSTEMS_MAESTRO
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x03, 0)

	)

508 
	#ZORRO_PROD_MACROSYSTEMS_VLAB
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x04, 0)

	)

509 
	#ZORRO_PROD_MACROSYSTEMS_MAESTRO_PRO
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x05, 0)

	)

510 
	#ZORRO_PROD_MACROSYSTEMS_RETINA
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x06, 0)

	)

511 
	#ZORRO_PROD_MACROSYSTEMS_MULTI_EVOLUTION
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x08, 0)

	)

512 
	#ZORRO_PROD_MACROSYSTEMS_TOCCATA
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x0C, 0)

	)

513 
	#ZORRO_PROD_MACROSYSTEMS_RETINA_Z3
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x10, 0)

	)

514 
	#ZORRO_PROD_MACROSYSTEMS_VLAB_MOTION
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x12, 0)

	)

515 
	#ZORRO_PROD_MACROSYSTEMS_ALTAIS
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0x13, 0)

	)

516 
	#ZORRO_PROD_MACROSYSTEMS_FALCON_040
 
	`ZORRO_ID
(
MACROSYSTEMS_GERMANY
, 0xFD, 0)

	)

518 
	#ZORRO_MANUF_COMBITEC
 0x6766

	)

520 
	#ZORRO_MANUF_SKI_PERIPHERALS
 0x8000

	)

521 
	#ZORRO_PROD_SKI_PERIPHERALS_MAST_FIREBALL
 
	`ZORRO_ID
(
SKI_PERIPHERALS
, 0x08, 0)

	)

522 
	#ZORRO_PROD_SKI_PERIPHERALS_SCSI_DUAL_SERIAL
 
	`ZORRO_ID
(
SKI_PERIPHERALS
, 0x80, 0)

	)

524 
	#ZORRO_MANUF_REIS_WARE_2
 0xA9AD

	)

525 
	#ZORRO_PROD_REIS_WARE_SCAN_KING
 
	`ZORRO_ID
(
REIS_WARE_2
, 0x11, 0)

	)

527 
	#ZORRO_MANUF_CAMERON
 0xAA01

	)

528 
	#ZORRO_PROD_CAMERON_PERSONAL_A4
 
	`ZORRO_ID
(
CAMERON
, 0x10, 0)

	)

530 
	#ZORRO_MANUF_REIS_WARE
 0xAA11

	)

531 
	#ZORRO_PROD_REIS_WARE_HANDYSCANNER
 
	`ZORRO_ID
(
REIS_WARE
, 0x11, 0)

	)

533 
	#ZORRO_MANUF_PHOENIX_2
 0xB5A8

	)

534 
	#ZORRO_PROD_PHOENIX_ST506_2
 
	`ZORRO_ID
(
PHOENIX_2
, 0x21, 0)

	)

535 
	#ZORRO_PROD_PHOENIX_SCSI_2
 
	`ZORRO_ID
(
PHOENIX_2
, 0x22, 0)

	)

536 
	#ZORRO_PROD_PHOENIX_RAM_2
 
	`ZORRO_ID
(
PHOENIX_2
, 0xBE, 0)

	)

538 
	#ZORRO_MANUF_COMBITEC_2
 0xC008

	)

539 
	#ZORRO_PROD_COMBITEC_HD
 
	`ZORRO_ID
(
COMBITEC_2
, 0x2A, 0)

	)

540 
	#ZORRO_PROD_COMBITEC_SRAM
 
	`ZORRO_ID
(
COMBITEC_2
, 0x2B, 0)

	)

542 
	#ZORRO_MANUF_HACKER
 0x07DB

	)

543 
	#ZORRO_PROD_GENERAL_PROTOTYPE
 
	`ZORRO_ID
(
HACKER
, 0x00, 0)

	)

544 
	#ZORRO_PROD_HACKER_SCSI
 
	`ZORRO_ID
(
HACKER
, 0x01, 0)

	)

545 
	#ZORRO_PROD_RESOURCE_MANAGEMENT_FORCE_QUICKNET_QN2000
 
	`ZORRO_ID
(
HACKER
, 0x02, 0)

	)

546 
	#ZORRO_PROD_VECTOR_CONNECTION_2
 
	`ZORRO_ID
(
HACKER
, 0xE0, 0)

	)

547 
	#ZORRO_PROD_VECTOR_CONNECTION_3
 
	`ZORRO_ID
(
HACKER
, 0xE1, 0)

	)

548 
	#ZORRO_PROD_VECTOR_CONNECTION_4
 
	`ZORRO_ID
(
HACKER
, 0xE2, 0)

	)

549 
	#ZORRO_PROD_VECTOR_CONNECTION_5
 
	`ZORRO_ID
(
HACKER
, 0xE3, 0)

	)

	@locale.h

28 #i‚de‡
_LOCALE_H_


29 
	#_LOCALE_H_


	)

31 
	~<sys/cdefs.h
>

33 
__BEGIN_DECLS


36 
	mLC_CTYPE
 = 0,

37 
	mLC_NUMERIC
 = 1,

38 
	mLC_TIME
 = 2,

39 
	mLC_COLLATE
 = 3,

40 
	mLC_MONETARY
 = 4,

41 
	mLC_MESSAGES
 = 5,

42 
	mLC_ALL
 = 6,

43 
	mLC_PAPER
 = 7,

44 
	mLC_NAME
 = 8,

45 
	mLC_ADDRESS
 = 9,

47 
	mLC_TELEPHONE
 = 10,

48 
	mLC_MEASUREMENT
 = 11,

49 
	mLC_IDENTIFICATION
 = 12

52 *
£éoˇÀ
(
ˇãg‹y
, c⁄° *
loˇÀ
);

55 
	slc⁄v
 { };

56 
lc⁄v
 *
loˇÀc⁄v
();

59 
	g__END_DECLS


	@machine/_types.h

35 #i‚de‡
_ARM__TYPES_H_


36 
	#_ARM__TYPES_H_


	)

39 
__sig√d
 
	t__öt8_t
;

40 
	t__uöt8_t
;

41 
	t__öt16_t
;

42 
	t__uöt16_t
;

43 
	t__öt32_t
;

44 
	t__uöt32_t
;

46 
	t__öt64_t
;

48 
	t__uöt64_t
;

51 
__öt8_t
 
	t__öt_Àa°8_t
;

52 
__uöt8_t
 
	t__uöt_Àa°8_t
;

53 
__öt16_t
 
	t__öt_Àa°16_t
;

54 
__uöt16_t
 
	t__uöt_Àa°16_t
;

55 
__öt32_t
 
	t__öt_Àa°32_t
;

56 
__uöt32_t
 
	t__uöt_Àa°32_t
;

57 
__öt64_t
 
	t__öt_Àa°64_t
;

58 
__uöt64_t
 
	t__uöt_Àa°64_t
;

61 
__öt32_t
 
	t__öt_Á°8_t
;

62 
__uöt32_t
 
	t__uöt_Á°8_t
;

63 
__öt32_t
 
	t__öt_Á°16_t
;

64 
__uöt32_t
 
	t__uöt_Á°16_t
;

65 
__öt32_t
 
	t__öt_Á°32_t
;

66 
__uöt32_t
 
	t__uöt_Á°32_t
;

67 
__öt64_t
 
	t__öt_Á°64_t
;

68 
__uöt64_t
 
	t__uöt_Á°64_t
;

71 
	t__öçå_t
;

72 
	t__uöçå_t
;

75 
__öt64_t
 
	t__ötmax_t
;

76 
__uöt64_t
 
	t__uötmax_t
;

79 
__öt32_t
 
	t__ªgi°î_t
;

82 
	t__vaddr_t
;

83 
	t__∑ddr_t
;

84 
	t__vsize_t
;

85 
	t__psize_t
;

88 
	t__˛ock_t
;

89 
	t__˛ockid_t
;

90 
	t__±rdiff_t
;

91 
	t__time_t
;

92 
	t__timî_t
;

93 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

94 
__buûtö_va_li°
 
	t__va_li°
;

96 * 
	t__va_li°
;

100 #i‚de‡
__˝lu•lus


101 
	t__wch¨_t
;

103 
	t__wöt_t
;

104 
	t__ru√_t
;

105 * 
	t__w˘øns_t
;

106 * 
	t__w˘y≥_t
;

	@machine/asm.h

38 #i‚de‡
_ARM32_ASM_H_


39 
	#_ARM32_ASM_H_


	)

41 #ifde‡
__ELF__


42 
	#_C_LABEL
(
x
Ë
	)
x

44 #ifde‡
__STDC__


45 
	#_C_LABEL
(
x
Ë
_
 ## 
	)
x

47 
	#_C_LABEL
(
x
Ë
_
 
	)
x

50 
	#_ASM_LABEL
(
x
Ë
	)
x

52 #ifde‡
__STDC__


53 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

54 
	#__STRING
(
x
Ë#x

	)

56 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

57 
	#__STRING
(
x
Ë"x"

	)

60 #i‚de‡
_ALIGN_TEXT


61 
	#_ALIGN_TEXT
 .
Æign
 0

	)

70 
	#_ASM_TYPE_FUNCTION
 #fun˘i⁄

	)

71 
	#_ASM_TYPE_OBJECT
 #obje˘

	)

72 
	#_ENTRY
(
x
) \

73 .
ãxt
; 
_ALIGN_TEXT
; .
globl
 
x
; .
ty≥
 x,
_ASM_TYPE_FUNCTION
; x: .
‚°¨t


	)

75 
	#_ASM_SIZE
(
x
Ë.
size
 x, .-x;

	)

77 
	#_END
(
x
) \

78 .
‚íd
; \

79 
	`_ASM_SIZE
(
x
)

	)

81 #ifde‡
GPROF


82 #ifde‡
__ELF__


83 
	#_PROF_PROLOGUE
 \

84 
mov
 
ù
, 
Ã
; 
bl
 
__mcou¡


	)

86 
	#_PROF_PROLOGUE
 \

87 
mov
 
ù
,
Ã
; 
bl
 
mcou¡


	)

90 
	#_PROF_PROLOGUE


	)

93 
	#ENTRY
(
y
Ë
	`_ENTRY
(
	`_C_LABEL
(y)); 
_PROF_PROLOGUE


	)

94 
	#ENTRY_NP
(
y
Ë
	`_ENTRY
(
	`_C_LABEL
(y))

	)

95 
	#END
(
y
Ë
	`_END
(
	`_C_LABEL
(y))

	)

96 
	#ASENTRY
(
y
Ë
	`_ENTRY
(
	`_ASM_LABEL
(y)); 
_PROF_PROLOGUE


	)

97 
	#ASENTRY_NP
(
y
Ë
	`_ENTRY
(
	`_ASM_LABEL
(y))

	)

98 
	#ASEND
(
y
Ë
	`_END
(
	`_ASM_LABEL
(y))

	)

100 #ifde‡
__ELF__


101 
	#ENTRY_PRIVATE
(
y
Ë
	`ENTRY
(y); .
hiddí
 
	`_C_LABEL
(y)

	)

103 
	#ENTRY_PRIVATE
(
y
Ë
	`ENTRY
(y)

	)

106 
	#ASMSTR
 .
asciz


	)

108 #i‡
deföed
(
__ELF__
Ë&& deföed(
PIC
)

109 #ifde‡
__STDC__


110 
	#PIC_SYM
(
x
,
y
Ëx ## ( ## y ## )

	)

112 
	#PIC_SYM
(
x
,
y
Ëx ( y )

	)

115 
	#PIC_SYM
(
x
,
y
Ë
	)
x

118 #ifde‡
__ELF__


119 
	#RCSID
(
x
Ë.
£˘i⁄
 ".idít"; .
asciz
 
	)
x

121 
	#RCSID
(
x
Ë.
ãxt
; .
asciz
 
	)
x

124 #ifde‡
__ELF__


125 
	#WEAK_ALIAS
(
Æüs
,
sym
) \

126 .
wók
 
Æüs
; \

127 
Æüs
 = 
sym


	)

130 #ifde‡
__STDC__


131 
	#WARN_REFERENCES
(
sym
,
msg
) \

132 .
°abs
 
msg
 ## ,30,0,0,0 ; \

133 .
°abs
 
	`__STRING
(
	`_C_LABEL
(
sym
)Ë## ,1,0,0,0

	)

134 #ñi‡
deföed
(
__ELF__
)

135 
	#WARN_REFERENCES
(
sym
,
msg
) \

136 .
°abs
 
msg
,30,0,0,0 ; \

137 .
°abs
 
	`__STRING
(
sym
),1,0,0,0

	)

139 
	#WARN_REFERENCES
(
sym
,
msg
) \

140 .
°abs
 
msg
,30,0,0,0 ; \

141 .
°abs
 
	`__STRING
(
_
 
sym
),1,0,0,0

	)

	@machine/cdefs.h

3 #i‚def 
_MACHINE_CDEFS_H_


4 
	#_MACHINE_CDEFS_H_


	)

6 #i‡
deföed
(
löt
)

7 
	#__ödr_ª„ªn˚
(
sym
,
Æüs
Ë
	`__löt_equÆ__
(sym,Æüs)

	)

8 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
)

	)

9 
	#__wók_Æüs
(
Æüs
,
sym
Ë
	`__löt_equÆ__
(sym,Æüs)

	)

10 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__STDC__
)

11 
	#__wók_Æüs
(
Æüs
,
sym
) \

12 
	`__asm__
(".wók " 
	`__STRING
(
Æüs
) " ; " __STRING(alias) \

13 " = " 
	`__STRING
(
sym
));

	)

14 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

15 
	`__asm__
(".£˘i⁄ .gnu.w¨nög." 
	`__STRING
(
sym
) \

16 " ; .asciò\"" 
msg
 "\" ; .ãxt");

	)

	@machine/cpu-features.h

28 #i‚de‡
_ARM_MACHINE_CPU_FEATURES_H


29 
	#_ARM_MACHINE_CPU_FEATURES_H


	)

50 #i‚de‡
__ARM_ARCH__


52 #i‡
deföed
 
__ARM_ARCH_7__
 || deföed 
__ARM_ARCH_7A__
 || \

53 
deföed
 
	g__ARM_ARCH_7R__
 || deföed 
	g__ARM_ARCH_7M__


55 
	#__ARM_ARCH__
 7

	)

57 #ñi‡
deföed
 
__ARM_ARCH_6__
 || deföed 
__ARM_ARCH_6J__
 || \

58 
deföed
 
	g__ARM_ARCH_6K__
 || deföed 
	g__ARM_ARCH_6Z__
 || \

59 
deföed
 
	g__ARM_ARCH_6KZ__
 || deföed 
	g__ARM_ARCH_6T2__


60 
#deföê
	#__ARM_ARCH__
 6

	)

62 #
#ñi‡
deföed
 
__ARM_ARCH_5__
 || deföed 
__ARM_ARCH_5T__
 || \

64 
deföed
 
	g__ARM_ARCH_5TE__
 || deföed 
	g__ARM_ARCH_5TEJ__


65 
#deföê
	#__ARM_ARCH__
 5

	)

67 #
#ñi‡
deföed
 
__ARM_ARCH_4T__


69 
#deföê
	#__ARM_ARCH__
 4

	)

71 #
#ñi‡
deföed
 
__ARM_ARCH_4__


73 #îr‹ 
ARMv4
 
is
 
nŸ
 
suµ‹ãd
, 
∂ó£
 
u£
 
ARMv4T
 
©
 
a
 
möimum


75 #îr‹ 
Unknown
 
‹
 
unsuµ‹ãd
 
ARM
 
¨chôe˘uª


81 #ifde‡
BIONIC_EXPERIMENTAL_FORCE_ARMV4


82 #unde‡
__ARM_ARCH__


83 
	#__ARM_ARCH__
 4

	)

87 #i‡
__ARM_ARCH__
 > 5

88 
	#__ARM_HAVE_5TE
 1

	)

89 #ñi‡
__ARM_ARCH__
 == 5

90 #i‡
deföed
 
__ARM_ARCH_5TE__
 || deföed 
__ARM_ARCH_5TEJ__


91 
	#__ARM_HAVE_5TE
 1

	)

96 #i‡
__ARM_ARCH__
 >= 5

97 
	#__ARM_HAVE_BLX
 1

	)

98 
	#__ARM_HAVE_CLZ
 1

	)

99 
	#__ARM_HAVE_LDC2
 1

	)

100 
	#__ARM_HAVE_MCR2
 1

	)

101 
	#__ARM_HAVE_MRC2
 1

	)

102 
	#__ARM_HAVE_STC2
 1

	)

106 #i‡
__ARM_HAVE_5TE


107 
	#__ARM_HAVE_PLD
 1

	)

108 
	#__ARM_HAVE_MCRR
 1

	)

109 
	#__ARM_HAVE_MRRC
 1

	)

115 #i‡
__ARM_HAVE_5TE


116 
	#__ARM_HAVE_HALFWORD_MULTIPLY
 1

	)

122 #i‡
__ARM_HAVE_5TE


123 
	#__ARM_HAVE_PAIR_LOAD_STORE
 1

	)

129 #i‡
__ARM_HAVE_5TE


130 
	#__ARM_HAVE_SATURATED_ARITHMETIC
 1

	)

148 #i‡
__ARM_ARCH__
 >= 5

149 
	#__ARM_HAVE_PC_INTERWORK


	)

155 #i‡
__ARM_ARCH__
 >= 6

156 
	#__ARM_HAVE_LDREX_STREX


	)

161 #i‡
__ARM_ARCH__
 >= 7

162 
	#__ARM_HAVE_DMB


	)

169 #i‡
__ARM_ARCH__
 >= 7

170 
	#__ARM_HAVE_LDREXD


	)

175 #i‡
__ARM_ARCH__
 >7 && 
deföed
 
__VFP_FP__


176 
	#__ARM_HAVE_VFP


	)

183 #i‡
__ARM_ARCH__
 >7 && 
deföed
 
__ARM_NEON__


184 
	#__ARM_HAVE_NEON


	)

188 #ifde‡
__ASSEMBLY__


193 #i‡
__ARM_HAVE_PLD


194 
	#PLD
(
ªg
,
off£t
Ë
∂d
 [ªg, off£t]

	)

196 
	#PLD
(
ªg
,
off£t
Ë

	)

	@machine/endian.h

31 #i‚de‡
_ARM_ENDIAN_H_


32 
	#_ARM_ENDIAN_H_


	)

34 #ifde‡
__GNUC__


41 #i‡!
deföed
 
__ARM_ARCH_5__
 && !deföed 
__ARM_ARCH_5T__
 && \

42 !
deföed
 
	g__ARM_ARCH_5TE__
 && !deföed 
	g__ARM_ARCH_5TEJ__
 && \

43 !
deföed
 
	g__ARM_ARCH_4T__
 && !deföed 
	g__ARM_ARCH_4__


56 
	#__sw≠16md
(
x
) ({ \

57 
u_öt16_t
 
_x
 = (
x
); \

58 
__asm
 vﬁ©ûê("ªv16 %0, %0" : "+l" (
_x
)); \

59 
_x
; \

60 })

	)

62 
	#__sw≠32md
(
x
) ({ \

63 
u_öt32_t
 
_x
 = (
x
); \

64 
__asm
 vﬁ©ûê("ªv %0, %0" : "+l" (
_x
)); \

65 
_x
; \

66 })

	)

68 
	#__sw≠64md
(
x
) ({ \

69 
u_öt64_t
 
_sw≠64md_x
 = (
x
); \

70 (
u_öt64_t
Ë
	`__sw≠32md
(
_sw≠64md_x
 >> 32) | \

71 (
u_öt64_t
Ë
	`__sw≠32md
(
_sw≠64md_x
 & 0xffffffff) << 32; \

72 })

	)

75 
	#MD_SWAP


	)

80 #i‡
deföed
(
__ARMEB__
)

81 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

83 
	#_BYTE_ORDER
 
_LITTLE_ENDIAN


	)

85 
	#__STRICT_ALIGNMENT


	)

86 
	~<sys/ty≥s.h
>

87 
	~<sys/ídün.h
>

	@machine/exec.h

31 #i‚de‡
_ARM_EXEC_H_


32 
	#_ARM_EXEC_H_


	)

34 
	#__LDPGSZ
 4096

	)

36 
	#NATIVE_EXEC_ELF


	)

38 
	#ARCH_ELFSIZE
 32

	)

40 
	#ELF_TARG_CLASS
 
ELFCLASS32


	)

41 
	#ELF_TARG_DATA
 
ELFDATA2LSB


	)

42 
	#ELF_TARG_MACH
 
EM_ARM


	)

44 
	#_NLIST_DO_AOUT


	)

45 
	#_NLIST_DO_ELF


	)

47 
	#_KERN_DO_AOUT


	)

48 
	#_KERN_DO_ELF


	)

	@machine/ieee.h

91 
	#SNG_EXPBITS
 8

	)

92 
	#SNG_FRACBITS
 23

	)

94 
	#DBL_EXPBITS
 11

	)

95 
	#DBL_FRACBITS
 52

	)

97 #i‚de‡
__VFP_FP__


98 
	#E80_EXPBITS
 15

	)

99 
	#E80_FRACBITS
 64

	)

101 
	#EXT_EXPBITS
 15

	)

102 
	#EXT_FRACBITS
 112

	)

105 
	sõì_sögÀ
 {

106 
u_öt
 
	m¢g_‰ac
:23;

107 
u_öt
 
	m¢g_exp⁄ít
:8;

108 
u_öt
 
	m¢g_sign
:1;

111 #ifde‡
__VFP_FP__


112 
	sõì_doubÀ
 {

113 #ifde‡
__ARMEB__


114 
u_öt
 
	mdbl_sign
:1;

115 
u_öt
 
	mdbl_exp
:11;

116 
u_öt
 
	mdbl_‰ach
:20;

117 
u_öt
 
	mdbl_‰a˛
;

119 
u_öt
 
	mdbl_‰a˛
;

120 
u_öt
 
	mdbl_‰ach
:20;

121 
u_öt
 
	mdbl_exp
:11;

122 
u_öt
 
	mdbl_sign
:1;

126 
	sõì_doubÀ
 {

127 
u_öt
 
	mdbl_‰ach
:20;

128 
u_öt
 
	mdbl_exp
:11;

129 
u_öt
 
	mdbl_sign
:1;

130 
u_öt
 
	mdbl_‰a˛
;

133 
	uõì_doubÀ_u
 {

134 
	mdblu_d
;

135 
õì_doubÀ
 
	mdblu_dbl
;

139 
	sõì_e80
 {

140 
u_öt
 
	me80_exp
:15;

141 
u_öt
 
	me80_zîo
:16;

142 
u_öt
 
	me80_sign
:1;

143 
u_öt
 
	me80_‰ach
:31;

144 
u_öt
 
	me80_j
:1;

145 
u_öt
 
	me80_‰a˛
;

148 
	sõì_ext
 {

149 
u_öt
 
	mext_‰ach
:16;

150 
u_öt
 
	mext_exp
:15;

151 
u_öt
 
	mext_sign
:1;

152 
u_öt
 
	mext_‰achm
;

153 
u_öt
 
	mext_‰a˛m
;

154 
u_öt
 
	mext_‰a˛
;

167 
	#SNG_EXP_INFNAN
 255

	)

168 
	#DBL_EXP_INFNAN
 2047

	)

169 #i‚de‡
__VFP_FP__


170 
	#E80_EXP_INFNAN
 32767

	)

171 
	#EXT_EXP_INFNAN
 32767

	)

175 
	#SNG_QUIETNAN
 (1 << 22)

	)

176 
	#DBL_QUIETNAN
 (1 << 19)

	)

177 #i‚de‡
__VFP_FP__


178 
	#E80_QUIETNAN
 (1 << 15)

	)

179 
	#EXT_QUIETNAN
 (1 << 15)

	)

186 
	#SNG_EXP_BIAS
 127

	)

187 
	#DBL_EXP_BIAS
 1023

	)

188 #i‚de‡
__VFP_FP__


189 
	#E80_EXP_BIAS
 16383

	)

190 
	#EXT_EXP_BIAS
 16383

	)

	@machine/internal_types.h

3 #i‚de‡
_ARM_INTERNAL_TYPES_H_


4 
	#_ARM_INTERNAL_TYPES_H_


	)

6 #ifde‡
__CHAR_UNSIGNED__


7 
	#__machöe_has_unsig√d_ch¨s


	)

	@machine/kernel.h

28 #i‚de‡
_ARCH_ARM_KERNEL_H


29 
	#_ARCH_ARM_KERNEL_H


	)

34 
	t__kî√l_blk˙t_t
;

35 
	t__kî√l_blksize_t
;

38 
	t__kî√l_fsblk˙t_t
;

39 
	t__kî√l_fsfû˙t_t
;

40 
	t__kî√l_id_t
;

	@machine/limits.h

35 #i‚def 
_ARM32_LIMITS_H_


36 
	#_ARM32_LIMITS_H_


	)

38 
	~<sys/cdefs.h
>

40 
	#MB_LEN_MAX
 1

	)

42 #i‚def 
SIZE_MAX


43 
	#SIZE_MAX
 
UINT_MAX


	)

45 #i‚de‡
SSIZE_MAX


46 
	#SSIZE_MAX
 
INT_MAX


	)

49 #i‡
__BSD_VISIBLE


50 
	#SIZE_T_MAX
 
UINT_MAX


	)

52 
	#UQUAD_MAX
 0xffffffffffffffffULL

	)

53 
	#QUAD_MAX
 0x7fffffffffffffffLL

	)

54 
	#QUAD_MIN
 (-0x7fffffffffffffffLL-1Ë

	)

58 
	#LONGLONG_BIT
 64

	)

59 
	#LONGLONG_MIN
 (-9223372036854775807LL-1)

	)

60 
	#LONGLONG_MAX
 9223372036854775807LL

	)

61 
	#ULONGLONG_MAX
 18446744073709551615ULL

	)

	@machine/setjmp.h

39 
	#_JBLEN
 64

	)

75 
	#_JB_MAGIC
 0

	)

76 
	#_JB_SIGMASK
 (
_JB_MAGIC
+1)

	)

77 
	#_JB_FLOAT_BASE
 (
_JB_SIGMASK
+1)

	)

78 
	#_JB_FLOAT_STATE
 (
_JB_FLOAT_BASE
 + (15-8+1)*2)

	)

79 
	#_JB_CORE_BASE
 (
_JB_FLOAT_STATE
+1)

	)

81 
	#_JB_MAGIC__SETJMP
 0x4278f500

	)

82 
	#_JB_MAGIC_SETJMP
 0x4278f501

	)

	@malloc.h

17 #i‚de‡
LIBC_INCLUDE_MALLOC_H_


18 
	#LIBC_INCLUDE_MALLOC_H_


	)

25 
	~<sys/cdefs.h
>

26 
	~<°ddef.h
>

28 
__BEGIN_DECLS


30 
__mÆlocfunc
 * 
mÆloc
(
size_t
);

31 
__mÆlocfunc
 * 
ˇŒoc
(
size_t
, size_t);

32 * 
ªÆloc
(*, 
size_t
);

33 
‰ì
(*);

35 * 
memÆign
(
size_t
 
Æignmít
, size_à
byãsize
);

36 
size_t
 
mÆloc_ußbÀ_size
(const *);

38 * 
vÆloc
(
size_t
 
byãsize
);

39 * 
pvÆloc
(
size_t
 
byãsize
);

41 #i‚de‡
STRUCT_MALLINFO_DECLARED


42 
	#STRUCT_MALLINFO_DECLARED
 1

	)

43 
	smÆlöfo
 {

44 
size_t
 
	m¨ía
;

45 
size_t
 
	m‹dblks
;

46 
size_t
 
	msmblks
;

47 
size_t
 
	mhblks
;

48 
size_t
 
	mhblkhd
;

49 
size_t
 
	musmblks
;

50 
size_t
 
	mfsmblks
;

51 
size_t
 
	mu‹dblks
;

52 
size_t
 
	mf‹dblks
;

53 
size_t
 
	mkìpco°
;

57 
mÆlöfo
 mallinfo();

59 
	g__END_DECLS


	@math.h

17 #i‚de‡
_MATH_H_


18 
	#_MATH_H_


	)

20 
	~<sys/cdefs.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<limôs.h
>

24 
	#__puª2


	)

29 c⁄° 
	u__öföôy_un
 {

30 
__uc
[8];

31 
__ud
;

32 } 
__öföôy
;

34 c⁄° 
	u__«n_un
 {

35 
__uc
[()];

36 
__uf
;

37 } 
__«n
;

41 
	#__MATH_BUILTIN_CONSTANTS


	)

46 
	#__MATH_BUILTIN_RELOPS


	)

51 
	#HUGE_VAL
 
	`__buûtö_huge_vÆ
()

	)

53 
	#HUGE_VAL
 (
__öföôy
.
__ud
)

	)

58 
	#FP_ILOGB0
 (-
__INT_MAX
)

	)

59 
	#FP_ILOGBNAN
 
__INT_MAX


	)

61 
	#FP_ILOGB0
 (-
INT_MAX
)

	)

62 
	#FP_ILOGBNAN
 
INT_MAX


	)

65 #ifde‡
__MATH_BUILTIN_CONSTANTS


66 
	#HUGE_VALF
 
	`__buûtö_huge_vÆf
()

	)

67 
	#HUGE_VALL
 
	`__buûtö_huge_vÆl
()

	)

68 
	#INFINITY
 
	`__buûtö_öf
()

	)

69 
	#NAN
 
	`__buûtö_«n
("")

	)

71 
	#HUGE_VALF
 ()
HUGE_VAL


	)

72 
	#HUGE_VALL
 ()
HUGE_VAL


	)

73 
	#INFINITY
 
HUGE_VALF


	)

74 
	#NAN
 (
__«n
.
__uf
)

	)

77 
	#MATH_ERRNO
 1

	)

78 
	#MATH_ERREXCEPT
 2

	)

79 
	#m©h_îrh™dlög
 
MATH_ERREXCEPT


	)

82 #i‡
deföed
(
__ü64__
Ë|| deföed(
__•¨c64__
)

83 
	#FP_FAST_FMA


	)

85 #ifde‡
__ü64__


86 
	#FP_FAST_FMAL


	)

88 
	#FP_FAST_FMAF


	)

91 
	#FP_INFINITE
 0x01

	)

92 
	#FP_NAN
 0x02

	)

93 
	#FP_NORMAL
 0x04

	)

94 
	#FP_SUBNORMAL
 0x08

	)

95 
	#FP_ZERO
 0x10

	)

96 
	#Â˛assify
(
x
) \

97 (( (
x
Ë= ()Ë? 
	`__Â˛assifyf
(x) \

98 : ( (
x
Ë= ()Ë? 
	`__Â˛assifyd
(x) \

99 : 
	`__Â˛assifyl
(
x
))

	)

101 
	#isföôe
(
x
) \

102 (( (
x
Ë= ()Ë? 
	`__isföôef
(x) \

103 : ( (
x
Ë= ()Ë? 
	`__isföôe
(x) \

104 : 
	`__isföôñ
(
x
))

	)

105 
	#isöf
(
x
) \

106 (( (
x
Ë= ()Ë? 
	`__isöff
(x) \

107 : ( (
x
Ë= ()Ë? 
	`__isöf
(x) \

108 : 
	`__isöÊ
(
x
))

	)

109 
	#i¢™
(
x
) \

110 (( (
x
Ë= ()Ë? 
	`i¢™f
(x) \

111 : ( (
x
Ë= ()Ë? 
	`i¢™
(x) \

112 : 
	`__i¢™l
(
x
))

	)

113 
	#i¢‹mÆ
(
x
) \

114 (( (
x
Ë= ()Ë? 
	`__i¢‹mÆf
(x) \

115 : ( (
x
Ë= ()Ë? 
	`__i¢‹mÆ
(x) \

116 : 
	`__i¢‹mÆl
(
x
))

	)

118 #ifde‡
__MATH_BUILTIN_RELOPS


119 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
((x), (y))

	)

120 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
((x), (y))

	)

121 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
((x), (y))

	)

122 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
((x), (y))

	)

123 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
((x), (y))

	)

124 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
((x), (y))

	)

126 
	#isgª©î
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË> (y))

	)

127 
	#isgª©îequÆ
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË>(y))

	)

128 
	#i¶ess
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË< (y))

	)

129 
	#i¶es£quÆ
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË<(y))

	)

130 
	#i¶essgª©î
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)) && \

131 ((
x
Ë> (
y
Ë|| (yË> (x)))

	)

132 
	#isun‹dîed
(
x
, 
y
Ë(
	`i¢™
(xË|| i¢™(y))

	)

135 
	#signbô
(
x
) \

136 (( (
x
Ë= ()Ë? 
	`__signbôf
(x) \

137 : ( (
x
Ë= ()Ë? 
	`__signbô
(x) \

138 : 
	`__signbôl
(
x
))

	)

141 
__doubÀ_t
 
	tdoubÀ_t
;

142 
__Êﬂt_t
 
	tÊﬂt_t
;

150 
	#M_E
 2.7182818284590452354

	)

151 
	#M_LOG2E
 1.4426950408889634074

	)

152 
	#M_LOG10E
 0.43429448190325182765

	)

153 
	#M_LN2
 0.69314718055994530942

	)

154 
	#M_LN10
 2.30258509299404568402

	)

155 
	#M_PI
 3.14159265358979323846

	)

156 
	#M_PI_2
 1.57079632679489661923

	)

157 
	#M_PI_4
 0.78539816339744830962

	)

158 
	#M_1_PI
 0.31830988618379067154

	)

159 
	#M_2_PI
 0.63661977236758134308

	)

160 
	#M_2_SQRTPI
 1.12837916709551257390

	)

161 
	#M_SQRT2
 1.41421356237309504880

	)

162 
	#M_SQRT1_2
 0.70710678118654752440

	)

164 
	#MAXFLOAT
 (()3.40282346638528860e+38)

	)

165 
signgam
;

168 #i‡
__BSD_VISIBLE


171 
	#HUGE
 
HUGE_VAL


	)

173 
	#HUGE
 
MAXFLOAT


	)

182 
__BEGIN_DECLS


186 
	$__Â˛assifyd
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

187 
	$__Â˛assifyf
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

188 
	$__Â˛assifyl
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

189 
	$__isföôef
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

190 
	$__isföôe
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

191 
	$__isföôñ
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

192 
	$__isöff
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

193 
	$__isöf
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

194 
	$__isöÊ
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

195 
	$__i¢™l
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

196 
	$__i¢‹mÆf
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

197 
	$__i¢‹mÆ
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

198 
	$__i¢‹mÆl
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

199 
	$__signbô
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

200 
	$__signbôf
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

201 
	$__signbôl
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

203 
	$acos
(Ë
__NDK_FPABI_MATH__
;

204 
	$asö
(Ë
__NDK_FPABI_MATH__
;

205 
	$©™
(Ë
__NDK_FPABI_MATH__
;

206 
	$©™2
(, Ë
__NDK_FPABI_MATH__
;

207 
	$cos
(Ë
__NDK_FPABI_MATH__
;

208 
	$sö
(Ë
__NDK_FPABI_MATH__
;

209 
	$èn
(Ë
__NDK_FPABI_MATH__
;

211 
	$cosh
(Ë
__NDK_FPABI_MATH__
;

212 
	$söh
(Ë
__NDK_FPABI_MATH__
;

213 
	$ènh
(Ë
__NDK_FPABI_MATH__
;

215 
	$exp
(Ë
__NDK_FPABI_MATH__
;

216 
	$‰exp
(, *Ë
__NDK_FPABI_MATH__
;

217 
	$ldexp
(, Ë
__NDK_FPABI_MATH__
;

218 
	$log
(Ë
__NDK_FPABI_MATH__
;

219 
	$log10
(Ë
__NDK_FPABI_MATH__
;

220 
	$modf
(, *Ë
__NDK_FPABI_MATH__
;

222 
	$pow
(, Ë
__NDK_FPABI_MATH__
;

223 
	$sqπ
(Ë
__NDK_FPABI_MATH__
;

225 
	$˚û
(Ë
__NDK_FPABI_MATH__
;

226 
	$Ábs
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

227 
	$Êo‹
(Ë
__NDK_FPABI_MATH__
;

228 
	$fmod
(, Ë
__NDK_FPABI_MATH__
;

234 
	$acosh
(Ë
__NDK_FPABI_MATH__
;

235 
	$asöh
(Ë
__NDK_FPABI_MATH__
;

236 
	$©™h
(Ë
__NDK_FPABI_MATH__
;

237 
	$cbπ
(Ë
__NDK_FPABI_MATH__
;

238 
	$îf
(Ë
__NDK_FPABI_MATH__
;

239 
	$îfc
(Ë
__NDK_FPABI_MATH__
;

240 
	$exp2
(Ë
__NDK_FPABI_MATH__
;

241 
	$expm1
(Ë
__NDK_FPABI_MATH__
;

242 
	$fma
(, , Ë
__NDK_FPABI_MATH__
;

243 
	$hypŸ
(, Ë
__NDK_FPABI_MATH__
;

244 
	$ûogb
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

246 (
i¢™
)(Ë
__NDK_FPABI_MATH__
 
__puª2
;

247 
	$lgamma
(Ë
__NDK_FPABI_MATH__
;

248 
	$Œröt
(Ë
__NDK_FPABI_MATH__
;

249 
	$Œround
(Ë
__NDK_FPABI_MATH__
;

250 
	$log1p
(Ë
__NDK_FPABI_MATH__
;

251 
	$logb
(Ë
__NDK_FPABI_MATH__
;

252 
	$Ãöt
(Ë
__NDK_FPABI_MATH__
;

253 
	$Ãound
(Ë
__NDK_FPABI_MATH__
;

254 
	$√xè·î
(, Ë
__NDK_FPABI_MATH__
;

255 
	$ªmaödî
(, Ë
__NDK_FPABI_MATH__
;

256 
	$ªmquo
(, , *Ë
__NDK_FPABI_MATH__
;

257 
	$röt
(Ë
__NDK_FPABI_MATH__
;

261 
	$j0
(Ë
__NDK_FPABI_MATH__
;

262 
	$j1
(Ë
__NDK_FPABI_MATH__
;

263 
	$jn
(, Ë
__NDK_FPABI_MATH__
;

264 
	$sˇlb
(, Ë
__NDK_FPABI_MATH__
;

265 
	$y0
(Ë
__NDK_FPABI_MATH__
;

266 
	$y1
(Ë
__NDK_FPABI_MATH__
;

267 
	$yn
(, Ë
__NDK_FPABI_MATH__
;

270 
	$gamma
(Ë
__NDK_FPABI_MATH__
;

275 
	$c›ysign
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

276 
	$fdim
(, Ë
__NDK_FPABI_MATH__
;

277 
	$fmax
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

278 
	$fmö
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

279 
	$√¨byöt
(Ë
__NDK_FPABI_MATH__
;

280 
	$round
(Ë
__NDK_FPABI_MATH__
;

281 
	$sˇlb 
(, Ë
__NDK_FPABI_MATH__
;

282 
	$sˇlbn
(, Ë
__NDK_FPABI_MATH__
;

283 
	$tgamma
(Ë
__NDK_FPABI_MATH__
;

284 
	$åunc
(Ë
__NDK_FPABI_MATH__
;

291 
	$dªm
(, Ë
__NDK_FPABI_MATH__
;

292 
	$föôe
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

293 
	$i¢™f
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

299 
	$gamma_r
(, *Ë
__NDK_FPABI_MATH__
;

300 
	$lgamma_r
(, *Ë
__NDK_FPABI_MATH__
;

305 
	$signifiˇnd
(Ë
__NDK_FPABI_MATH__
;

310 
	$acosf
(Ë
__NDK_FPABI_MATH__
;

311 
	$asöf
(Ë
__NDK_FPABI_MATH__
;

312 
	$©™f
(Ë
__NDK_FPABI_MATH__
;

313 
	$©™2f
(, Ë
__NDK_FPABI_MATH__
;

314 
	$cosf
(Ë
__NDK_FPABI_MATH__
;

315 
	$söf
(Ë
__NDK_FPABI_MATH__
;

316 
	$ènf
(Ë
__NDK_FPABI_MATH__
;

318 
	$coshf
(Ë
__NDK_FPABI_MATH__
;

319 
	$söhf
(Ë
__NDK_FPABI_MATH__
;

320 
	$ènhf
(Ë
__NDK_FPABI_MATH__
;

322 
	$exp2f
(Ë
__NDK_FPABI_MATH__
;

323 
	$expf
(Ë
__NDK_FPABI_MATH__
;

324 
	$expm1f
(Ë
__NDK_FPABI_MATH__
;

325 
	$‰expf
(, *Ë
__NDK_FPABI_MATH__
;

326 
	$ûogbf
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

327 
	$ldexpf
(, Ë
__NDK_FPABI_MATH__
;

328 
	$log10f
(Ë
__NDK_FPABI_MATH__
;

329 
	$log1pf
(Ë
__NDK_FPABI_MATH__
;

330 
	$logf
(Ë
__NDK_FPABI_MATH__
;

331 
	$modff
(, *Ë
__NDK_FPABI_MATH__
;

333 
	$powf
(, Ë
__NDK_FPABI_MATH__
;

334 
	$sqπf
(Ë
__NDK_FPABI_MATH__
;

336 
	$˚ûf
(Ë
__NDK_FPABI_MATH__
;

337 
	$Ábsf
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

338 
	$Êo‹f
(Ë
__NDK_FPABI_MATH__
;

339 
	$fmodf
(, Ë
__NDK_FPABI_MATH__
;

340 
	$roundf
(Ë
__NDK_FPABI_MATH__
;

342 
	$îff
(Ë
__NDK_FPABI_MATH__
;

343 
	$îfcf
(Ë
__NDK_FPABI_MATH__
;

344 
	$hypŸf
(, Ë
__NDK_FPABI_MATH__
;

345 
	$lgammaf
(Ë
__NDK_FPABI_MATH__
;

347 
	$acoshf
(Ë
__NDK_FPABI_MATH__
;

348 
	$asöhf
(Ë
__NDK_FPABI_MATH__
;

349 
	$©™hf
(Ë
__NDK_FPABI_MATH__
;

350 
	$cbπf
(Ë
__NDK_FPABI_MATH__
;

351 
	$logbf
(Ë
__NDK_FPABI_MATH__
;

352 
	$c›ysignf
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

353 
	$Œrötf
(Ë
__NDK_FPABI_MATH__
;

354 
	$Œroundf
(Ë
__NDK_FPABI_MATH__
;

355 
	$Ãötf
(Ë
__NDK_FPABI_MATH__
;

356 
	$Ãoundf
(Ë
__NDK_FPABI_MATH__
;

357 
	$√¨byötf
(Ë
__NDK_FPABI_MATH__
;

358 
	$√xè·îf
(, Ë
__NDK_FPABI_MATH__
;

359 
	$ªmaödîf
(, Ë
__NDK_FPABI_MATH__
;

360 
	$ªmquof
(, , *Ë
__NDK_FPABI_MATH__
;

361 
	$rötf
(Ë
__NDK_FPABI_MATH__
;

362 
	$sˇlb f
(, Ë
__NDK_FPABI_MATH__
;

363 
	$sˇlbnf
(, Ë
__NDK_FPABI_MATH__
;

364 
	$åuncf
(Ë
__NDK_FPABI_MATH__
;

366 
	$fdimf
(, Ë
__NDK_FPABI_MATH__
;

367 
	$fmaf
(, , Ë
__NDK_FPABI_MATH__
;

368 
	$fmaxf
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

369 
	$fmöf
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

376 
	$dªmf
(, Ë
__NDK_FPABI_MATH__
;

377 
	$föôef
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

378 
	$gammaf
(Ë
__NDK_FPABI_MATH__
;

379 
	$j0f
(Ë
__NDK_FPABI_MATH__
;

380 
	$j1f
(Ë
__NDK_FPABI_MATH__
;

381 
	$jnf
(, Ë
__NDK_FPABI_MATH__
;

382 
	$sˇlbf
(, Ë
__NDK_FPABI_MATH__
;

383 
	$y0f
(Ë
__NDK_FPABI_MATH__
;

384 
	$y1f
(Ë
__NDK_FPABI_MATH__
;

385 
	$ynf
(, Ë
__NDK_FPABI_MATH__
;

392 
	$gammaf_r
(, *Ë
__NDK_FPABI_MATH__
;

393 
	$lgammaf_r
(, *Ë
__NDK_FPABI_MATH__
;

398 
	$signifiˇndf
(Ë
__NDK_FPABI_MATH__
;

406 
	$acoshl
(Ë
__NDK_FPABI_MATH__
;

407 
	$aco¶
(Ë
__NDK_FPABI_MATH__
;

408 
	$asöhl
(Ë
__NDK_FPABI_MATH__
;

409 
	$asöl
(Ë
__NDK_FPABI_MATH__
;

410 
	$©™2l
(, Ë
__NDK_FPABI_MATH__
;

411 
	$©™hl
(Ë
__NDK_FPABI_MATH__
;

412 
	$©™l
(Ë
__NDK_FPABI_MATH__
;

413 
	$cbπl
(Ë
__NDK_FPABI_MATH__
;

415 
	$˚ûl
(Ë
__NDK_FPABI_MATH__
;

416 
	$c›ysig∆
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

418 
	$coshl
(Ë
__NDK_FPABI_MATH__
;

419 
	$co¶
(Ë
__NDK_FPABI_MATH__
;

420 
	$îf˛
(Ë
__NDK_FPABI_MATH__
;

421 
	$îÊ
(Ë
__NDK_FPABI_MATH__
;

422 
	$exp2l
(Ë
__NDK_FPABI_MATH__
;

423 
	$ex∂
(Ë
__NDK_FPABI_MATH__
;

424 
	$expm1l
(Ë
__NDK_FPABI_MATH__
;

426 
	$Áb¶
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

427 
	$fdiml
(, Ë
__NDK_FPABI_MATH__
;

428 
	$Êo‹l
(Ë
__NDK_FPABI_MATH__
;

429 
	$fmÆ
(, , Ë
__NDK_FPABI_MATH__
;

430 
	$fmaxl
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

431 
	$fmöl
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

433 
	$fmodl
(, Ë
__NDK_FPABI_MATH__
;

435 
	$‰ex∂
(
vÆue
, *Ë
__NDK_FPABI_MATH__
;

437 
	$hypŸl
(, Ë
__NDK_FPABI_MATH__
;

439 
	$ûogbl
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

440 
	$ldex∂
(, Ë
__NDK_FPABI_MATH__
;

442 
	$lgammÆ
(Ë
__NDK_FPABI_MATH__
;

443 
	$Œröé
(Ë
__NDK_FPABI_MATH__
;

445 
	$Œroundl
(Ë
__NDK_FPABI_MATH__
;

447 
	$log10l
(Ë
__NDK_FPABI_MATH__
;

448 
	$log1∂
(Ë
__NDK_FPABI_MATH__
;

449 
	$log2l
(Ë
__NDK_FPABI_MATH__
;

450 
	$logbl
(Ë
__NDK_FPABI_MATH__
;

451 
	$logl
(Ë
__NDK_FPABI_MATH__
;

452 
	$Ãöé
(Ë
__NDK_FPABI_MATH__
;

454 
	$Ãoundl
(Ë
__NDK_FPABI_MATH__
;

456 
	$modÊ
(, *Ë
__NDK_FPABI_MATH__
;

457 
	$«∆
(c⁄° *Ë
__NDK_FPABI_MATH__
 
__puª2
;

458 
	$√¨byöé
(Ë
__NDK_FPABI_MATH__
;

460 
	$√xè·îl
(, Ë
__NDK_FPABI_MATH__
;

461 
	$√xâow¨d
(, Ë
__NDK_FPABI_MATH__
;

462 
	$√xâow¨df
(, Ë
__NDK_FPABI_MATH__
;

463 
	$√xâow¨dl
(, Ë
__NDK_FPABI_MATH__
;

465 
	$powl
(, Ë
__NDK_FPABI_MATH__
;

466 
	$ªmaödîl
(, Ë
__NDK_FPABI_MATH__
;

467 
	$ªmquﬁ
(, , *Ë
__NDK_FPABI_MATH__
;

468 
	$röé
(Ë
__NDK_FPABI_MATH__
;

470 
	$roundl
(Ë
__NDK_FPABI_MATH__
;

471 
	$sˇlb l
(, Ë
__NDK_FPABI_MATH__
;

472 
	$sˇlb∆
(, Ë
__NDK_FPABI_MATH__
;

474 
	$söhl
(Ë
__NDK_FPABI_MATH__
;

475 
	$söl
(Ë
__NDK_FPABI_MATH__
;

476 
	$sqπl
(Ë
__NDK_FPABI_MATH__
;

477 
	$ènhl
(Ë
__NDK_FPABI_MATH__
;

478 
	$è∆
(Ë
__NDK_FPABI_MATH__
;

479 
	$tgammÆ
(Ë
__NDK_FPABI_MATH__
;

481 
	$åun˛
(Ë
__NDK_FPABI_MATH__
;

484 #ifde‡
_GNU_SOURCE


485 
	$söcos
(
x
, *
sö
, *
cos
Ë
__NDK_FPABI_MATH__
;

486 
	$söcosf
(
x
, *
sö
, *
cos
Ë
__NDK_FPABI_MATH__
;

487 
	$söco¶
(
x
, *
sö
, *
cos
Ë
__NDK_FPABI_MATH__
;

492 
	$__buûtö_acos
(Ë
__NDK_FPABI_MATH__
;

493 
	$__buûtö_asö
(Ë
__NDK_FPABI_MATH__
;

494 
	$__buûtö_©™
(Ë
__NDK_FPABI_MATH__
;

495 
	$__buûtö_©™2
(, Ë
__NDK_FPABI_MATH__
;

496 
	$__buûtö_cos
(Ë
__NDK_FPABI_MATH__
;

497 
	$__buûtö_sö
(Ë
__NDK_FPABI_MATH__
;

498 
	$__buûtö_èn
(Ë
__NDK_FPABI_MATH__
;

499 
	$__buûtö_cosh
(Ë
__NDK_FPABI_MATH__
;

500 
	$__buûtö_söh
(Ë
__NDK_FPABI_MATH__
;

501 
	$__buûtö_ènh
(Ë
__NDK_FPABI_MATH__
;

502 
	$__buûtö_exp
(Ë
__NDK_FPABI_MATH__
;

503 
	$__buûtö_‰exp
(, *Ë
__NDK_FPABI_MATH__
;

504 
	$__buûtö_ldexp
(, Ë
__NDK_FPABI_MATH__
;

505 
	$__buûtö_log
(Ë
__NDK_FPABI_MATH__
;

506 
	$__buûtö_log10
(Ë
__NDK_FPABI_MATH__
;

507 
	$__buûtö_modf
(, *Ë
__NDK_FPABI_MATH__
;

508 
	$__buûtö_pow
(, Ë
__NDK_FPABI_MATH__
;

509 
	$__buûtö_sqπ
(Ë
__NDK_FPABI_MATH__
;

510 
	$__buûtö_˚û
(Ë
__NDK_FPABI_MATH__
;

511 
	$__buûtö_Ábs
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

512 
	$__buûtö_Êo‹
(Ë
__NDK_FPABI_MATH__
;

513 
	$__buûtö_fmod
(, Ë
__NDK_FPABI_MATH__
;

514 
	$__buûtö_acosh
(Ë
__NDK_FPABI_MATH__
;

515 
	$__buûtö_asöh
(Ë
__NDK_FPABI_MATH__
;

516 
	$__buûtö_©™h
(Ë
__NDK_FPABI_MATH__
;

517 
	$__buûtö_cbπ
(Ë
__NDK_FPABI_MATH__
;

518 
	$__buûtö_îf
(Ë
__NDK_FPABI_MATH__
;

519 
	$__buûtö_îfc
(Ë
__NDK_FPABI_MATH__
;

520 
	$__buûtö_exp2
(Ë
__NDK_FPABI_MATH__
;

521 
	$__buûtö_expm1
(Ë
__NDK_FPABI_MATH__
;

522 
	$__buûtö_fma
(, , Ë
__NDK_FPABI_MATH__
;

523 
	$__buûtö_hypŸ
(, Ë
__NDK_FPABI_MATH__
;

524 
	$__buûtö_ûogb
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

526 #i‡!
	`deföed
(
__˛™g__
Ë|| 
__˛™g_maj‹__
 > 3 || (__˛™g_maj‹__ =3 && 
__˛™g_mö‹__
 >= 6)

527 
	$__buûtö_i¢™
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

531 
	$__buûtö_lgamma
(Ë
__NDK_FPABI_MATH__
;

532 
	$__buûtö_Œröt
(Ë
__NDK_FPABI_MATH__
;

533 
	$__buûtö_Œround
(Ë
__NDK_FPABI_MATH__
;

534 
	$__buûtö_log1p
(Ë
__NDK_FPABI_MATH__
;

535 
	$__buûtö_logb
(Ë
__NDK_FPABI_MATH__
;

536 
	$__buûtö_Ãöt
(Ë
__NDK_FPABI_MATH__
;

537 
	$__buûtö_Ãound
(Ë
__NDK_FPABI_MATH__
;

538 
	$__buûtö_√xè·î
(, Ë
__NDK_FPABI_MATH__
;

539 
	$__buûtö_ªmaödî
(, Ë
__NDK_FPABI_MATH__
;

540 
	$__buûtö_ªmquo
(, , *Ë
__NDK_FPABI_MATH__
;

541 
	$__buûtö_röt
(Ë
__NDK_FPABI_MATH__
;

542 
	$__buûtö_j0
(Ë
__NDK_FPABI_MATH__
;

543 
	$__buûtö_j1
(Ë
__NDK_FPABI_MATH__
;

544 
	$__buûtö_jn
(, Ë
__NDK_FPABI_MATH__
;

545 
	$__buûtö_sˇlb
(, Ë
__NDK_FPABI_MATH__
;

546 
	$__buûtö_y0
(Ë
__NDK_FPABI_MATH__
;

547 
	$__buûtö_y1
(Ë
__NDK_FPABI_MATH__
;

548 
	$__buûtö_yn
(, Ë
__NDK_FPABI_MATH__
;

549 
	$__buûtö_gamma
(Ë
__NDK_FPABI_MATH__
;

550 
	$__buûtö_c›ysign
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

551 
	$__buûtö_fdim
(, Ë
__NDK_FPABI_MATH__
;

552 
	$__buûtö_fmax
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

553 
	$__buûtö_fmö
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

554 
	$__buûtö_√¨byöt
(Ë
__NDK_FPABI_MATH__
;

555 
	$__buûtö_round
(Ë
__NDK_FPABI_MATH__
;

556 
	$__buûtö_sˇlb 
(, Ë
__NDK_FPABI_MATH__
;

557 
	$__buûtö_sˇlbn
(, Ë
__NDK_FPABI_MATH__
;

558 
	$__buûtö_tgamma
(Ë
__NDK_FPABI_MATH__
;

559 
	$__buûtö_åunc
(Ë
__NDK_FPABI_MATH__
;

560 
	$__buûtö_dªm
(, Ë
__NDK_FPABI_MATH__
;

561 
	$__buûtö_föôe
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

562 
	$__buûtö_i¢™f
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

563 
	$__buûtö_gamma_r
(, *Ë
__NDK_FPABI_MATH__
;

564 
	$__buûtö_lgamma_r
(, *Ë
__NDK_FPABI_MATH__
;

565 
	$__buûtö_signifiˇnd
(Ë
__NDK_FPABI_MATH__
;

566 
	$__buûtö_acosf
(Ë
__NDK_FPABI_MATH__
;

567 
	$__buûtö_asöf
(Ë
__NDK_FPABI_MATH__
;

568 
	$__buûtö_©™f
(Ë
__NDK_FPABI_MATH__
;

569 
	$__buûtö_©™2f
(, Ë
__NDK_FPABI_MATH__
;

570 
	$__buûtö_cosf
(Ë
__NDK_FPABI_MATH__
;

571 
	$__buûtö_söf
(Ë
__NDK_FPABI_MATH__
;

572 
	$__buûtö_ènf
(Ë
__NDK_FPABI_MATH__
;

573 
	$__buûtö_coshf
(Ë
__NDK_FPABI_MATH__
;

574 
	$__buûtö_söhf
(Ë
__NDK_FPABI_MATH__
;

575 
	$__buûtö_ènhf
(Ë
__NDK_FPABI_MATH__
;

576 
	$__buûtö_exp2f
(Ë
__NDK_FPABI_MATH__
;

577 
	$__buûtö_expf
(Ë
__NDK_FPABI_MATH__
;

578 
	$__buûtö_expm1f
(Ë
__NDK_FPABI_MATH__
;

579 
	$__buûtö_‰expf
(, *Ë
__NDK_FPABI_MATH__
;

580 
	$__buûtö_ûogbf
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

581 
	$__buûtö_ldexpf
(, Ë
__NDK_FPABI_MATH__
;

582 
	$__buûtö_log10f
(Ë
__NDK_FPABI_MATH__
;

583 
	$__buûtö_log1pf
(Ë
__NDK_FPABI_MATH__
;

584 
	$__buûtö_logf
(Ë
__NDK_FPABI_MATH__
;

585 
	$__buûtö_modff
(, *Ë
__NDK_FPABI_MATH__
;

586 
	$__buûtö_powf
(, Ë
__NDK_FPABI_MATH__
;

587 
	$__buûtö_sqπf
(Ë
__NDK_FPABI_MATH__
;

588 
	$__buûtö_˚ûf
(Ë
__NDK_FPABI_MATH__
;

589 
	$__buûtö_Ábsf
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

590 
	$__buûtö_Êo‹f
(Ë
__NDK_FPABI_MATH__
;

591 
	$__buûtö_fmodf
(, Ë
__NDK_FPABI_MATH__
;

592 
	$__buûtö_roundf
(Ë
__NDK_FPABI_MATH__
;

593 
	$__buûtö_îff
(Ë
__NDK_FPABI_MATH__
;

594 
	$__buûtö_îfcf
(Ë
__NDK_FPABI_MATH__
;

595 
	$__buûtö_hypŸf
(, Ë
__NDK_FPABI_MATH__
;

596 
	$__buûtö_lgammaf
(Ë
__NDK_FPABI_MATH__
;

597 
	$__buûtö_acoshf
(Ë
__NDK_FPABI_MATH__
;

598 
	$__buûtö_asöhf
(Ë
__NDK_FPABI_MATH__
;

599 
	$__buûtö_©™hf
(Ë
__NDK_FPABI_MATH__
;

600 
	$__buûtö_cbπf
(Ë
__NDK_FPABI_MATH__
;

601 
	$__buûtö_logbf
(Ë
__NDK_FPABI_MATH__
;

602 
	$__buûtö_c›ysignf
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

603 
	$__buûtö_Œrötf
(Ë
__NDK_FPABI_MATH__
;

604 
	$__buûtö_Œroundf
(Ë
__NDK_FPABI_MATH__
;

605 
	$__buûtö_Ãötf
(Ë
__NDK_FPABI_MATH__
;

606 
	$__buûtö_Ãoundf
(Ë
__NDK_FPABI_MATH__
;

607 
	$__buûtö_√¨byötf
(Ë
__NDK_FPABI_MATH__
;

608 
	$__buûtö_√xè·îf
(, Ë
__NDK_FPABI_MATH__
;

609 
	$__buûtö_ªmaödîf
(, Ë
__NDK_FPABI_MATH__
;

610 
	$__buûtö_ªmquof
(, , *Ë
__NDK_FPABI_MATH__
;

611 
	$__buûtö_rötf
(Ë
__NDK_FPABI_MATH__
;

612 
	$__buûtö_sˇlb f
(, Ë
__NDK_FPABI_MATH__
;

613 
	$__buûtö_sˇlbnf
(, Ë
__NDK_FPABI_MATH__
;

614 
	$__buûtö_åuncf
(Ë
__NDK_FPABI_MATH__
;

615 
	$__buûtö_fdimf
(, Ë
__NDK_FPABI_MATH__
;

616 
	$__buûtö_fmaf
(, , Ë
__NDK_FPABI_MATH__
;

617 
	$__buûtö_fmaxf
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

618 
	$__buûtö_fmöf
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

619 
	$__buûtö_dªmf
(, Ë
__NDK_FPABI_MATH__
;

620 
	$__buûtö_föôef
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

621 
	$__buûtö_gammaf
(Ë
__NDK_FPABI_MATH__
;

622 
	$__buûtö_j0f
(Ë
__NDK_FPABI_MATH__
;

623 
	$__buûtö_j1f
(Ë
__NDK_FPABI_MATH__
;

624 
	$__buûtö_jnf
(, Ë
__NDK_FPABI_MATH__
;

625 
	$__buûtö_sˇlbf
(, Ë
__NDK_FPABI_MATH__
;

626 
	$__buûtö_y0f
(Ë
__NDK_FPABI_MATH__
;

627 
	$__buûtö_y1f
(Ë
__NDK_FPABI_MATH__
;

628 
	$__buûtö_ynf
(, Ë
__NDK_FPABI_MATH__
;

629 
	$__buûtö_gammaf_r
(, *Ë
__NDK_FPABI_MATH__
;

630 
	$__buûtö_lgammaf_r
(, *Ë
__NDK_FPABI_MATH__
;

631 
	$__buûtö_signifiˇndf
(Ë
__NDK_FPABI_MATH__
;

632 
	$__buûtö_acoshl
(Ë
__NDK_FPABI_MATH__
;

633 
	$__buûtö_aco¶
(Ë
__NDK_FPABI_MATH__
;

634 
	$__buûtö_asöhl
(Ë
__NDK_FPABI_MATH__
;

635 
	$__buûtö_asöl
(Ë
__NDK_FPABI_MATH__
;

636 
	$__buûtö_©™2l
(, Ë
__NDK_FPABI_MATH__
;

637 
	$__buûtö_©™hl
(Ë
__NDK_FPABI_MATH__
;

638 
	$__buûtö_©™l
(Ë
__NDK_FPABI_MATH__
;

639 
	$__buûtö_cbπl
(Ë
__NDK_FPABI_MATH__
;

640 
	$__buûtö_˚ûl
(Ë
__NDK_FPABI_MATH__
;

641 
	$__buûtö_c›ysig∆
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

642 
	$__buûtö_coshl
(Ë
__NDK_FPABI_MATH__
;

643 
	$__buûtö_co¶
(Ë
__NDK_FPABI_MATH__
;

644 
	$__buûtö_îf˛
(Ë
__NDK_FPABI_MATH__
;

645 
	$__buûtö_îÊ
(Ë
__NDK_FPABI_MATH__
;

646 
	$__buûtö_exp2l
(Ë
__NDK_FPABI_MATH__
;

647 
	$__buûtö_ex∂
(Ë
__NDK_FPABI_MATH__
;

648 
	$__buûtö_expm1l
(Ë
__NDK_FPABI_MATH__
;

649 
	$__buûtö_Áb¶
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

650 
	$__buûtö_fdiml
(, Ë
__NDK_FPABI_MATH__
;

651 
	$__buûtö_Êo‹l
(Ë
__NDK_FPABI_MATH__
;

652 
	$__buûtö_fmÆ
(, , Ë
__NDK_FPABI_MATH__
;

653 
	$__buûtö_fmaxl
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

654 
	$__buûtö_fmöl
(, Ë
__NDK_FPABI_MATH__
 
__puª2
;

655 
	$__buûtö_fmodl
(, Ë
__NDK_FPABI_MATH__
;

656 
	$__buûtö_‰ex∂
(
vÆue
, *Ë
__NDK_FPABI_MATH__
;

657 
	$__buûtö_hypŸl
(, Ë
__NDK_FPABI_MATH__
;

658 
	$__buûtö_ûogbl
(Ë
__NDK_FPABI_MATH__
 
__puª2
;

659 
	$__buûtö_ldex∂
(, Ë
__NDK_FPABI_MATH__
;

660 
	$__buûtö_lgammÆ
(Ë
__NDK_FPABI_MATH__
;

661 
	$__buûtö_Œröé
(Ë
__NDK_FPABI_MATH__
;

662 
	$__buûtö_Œroundl
(Ë
__NDK_FPABI_MATH__
;

663 
	$__buûtö_log10l
(Ë
__NDK_FPABI_MATH__
;

664 
	$__buûtö_log1∂
(Ë
__NDK_FPABI_MATH__
;

665 
	$__buûtö_log2l
(Ë
__NDK_FPABI_MATH__
;

666 
	$__buûtö_logbl
(Ë
__NDK_FPABI_MATH__
;

667 
	$__buûtö_logl
(Ë
__NDK_FPABI_MATH__
;

668 
	$__buûtö_Ãöé
(Ë
__NDK_FPABI_MATH__
;

669 
	$__buûtö_Ãoundl
(Ë
__NDK_FPABI_MATH__
;

670 
	$__buûtö_modÊ
(, *Ë
__NDK_FPABI_MATH__
;

671 
	$__buûtö_«∆
(c⁄° *Ë
__NDK_FPABI_MATH__
 
__puª2
;

672 
	$__buûtö_√¨byöé
(Ë
__NDK_FPABI_MATH__
;

673 
	$__buûtö_√xè·îl
(, Ë
__NDK_FPABI_MATH__
;

674 #i‡!
	`deföed
(
__˛™g__
Ë|| 
__˛™g_maj‹__
 > 3 || (__˛™g_maj‹__ =3 && 
__˛™g_mö‹__
 >= 4)

675 
	$__buûtö_√xâow¨d
(, Ë
__NDK_FPABI_MATH__
;

676 
	$__buûtö_√xâow¨df
(, Ë
__NDK_FPABI_MATH__
;

679 
	$__buûtö_√xâow¨d
(, Ë
__NDK_FPABI_MATH__
;

680 
	$__buûtö_√xâow¨df
(, Ë
__NDK_FPABI_MATH__
;

682 
	$__buûtö_√xâow¨dl
(, Ë
__NDK_FPABI_MATH__
;

683 
	$__buûtö_powl
(, Ë
__NDK_FPABI_MATH__
;

684 
	$__buûtö_ªmaödîl
(, Ë
__NDK_FPABI_MATH__
;

685 
	$__buûtö_ªmquﬁ
(, , *Ë
__NDK_FPABI_MATH__
;

686 
	$__buûtö_röé
(Ë
__NDK_FPABI_MATH__
;

687 
	$__buûtö_roundl
(Ë
__NDK_FPABI_MATH__
;

688 
	$__buûtö_sˇlb l
(, Ë
__NDK_FPABI_MATH__
;

689 
	$__buûtö_sˇlb∆
(, Ë
__NDK_FPABI_MATH__
;

690 
	$__buûtö_söhl
(Ë
__NDK_FPABI_MATH__
;

691 
	$__buûtö_söl
(Ë
__NDK_FPABI_MATH__
;

692 
	$__buûtö_sqπl
(Ë
__NDK_FPABI_MATH__
;

693 
	$__buûtö_ènhl
(Ë
__NDK_FPABI_MATH__
;

694 
	$__buûtö_è∆
(Ë
__NDK_FPABI_MATH__
;

695 
	$__buûtö_tgammÆ
(Ë
__NDK_FPABI_MATH__
;

696 
	$__buûtö_åun˛
(Ë
__NDK_FPABI_MATH__
;

697 
	$__buûtö_söcos
(
x
, *
sö
, *
cos
Ë
__NDK_FPABI_MATH__
;

698 
	$__buûtö_söcosf
(
x
, *
sö
, *
cos
Ë
__NDK_FPABI_MATH__
;

699 
	$__buûtö_söco¶
(
x
, *
sö
, *
cos
Ë
__NDK_FPABI_MATH__
;

702 
__END_DECLS


	@memory.h

	@mntent.h

28 #i‚de‡
_MNTENT_H_


29 
	#_MNTENT_H_


	)

31 
	~<°dio.h
>

33 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

35 
	sm¡ít


37 * 
	mm¡_f¢ame
;

38 * 
	mm¡_dú
;

39 * 
	mm¡_ty≥
;

40 * 
	mm¡_›ts
;

41 
	mm¡_‰eq
;

42 
	mm¡_∑s¢o
;

46 
__BEGIN_DECLS


49 
m¡ít
* 
gëm¡ít
(
FILE
*);

51 
	g__END_DECLS


	@mtd/mtd-abi.h

12 #i‚de‡
__MTD_ABI_H__


13 
	#__MTD_ABI_H__


	)

15 
	sîa£_öfo_u£r
 {

16 
uöt32_t
 
	m°¨t
;

17 
uöt32_t
 
	mÀngth
;

20 
	smtd_oob_buf
 {

21 
uöt32_t
 
	m°¨t
;

22 
uöt32_t
 
	mÀngth
;

23 
__u£r
 *
	m±r
;

26 
	#MTD_ABSENT
 0

	)

27 
	#MTD_RAM
 1

	)

28 
	#MTD_ROM
 2

	)

29 
	#MTD_NORFLASH
 3

	)

30 
	#MTD_NANDFLASH
 4

	)

31 
	#MTD_DATAFLASH
 6

	)

33 
	#MTD_WRITEABLE
 0x400

	)

34 
	#MTD_BIT_WRITEABLE
 0x800

	)

35 
	#MTD_NO_ERASE
 0x1000

	)

36 
	#MTD_STUPID_LOCK
 0x2000

	)

38 
	#MTD_CAP_ROM
 0

	)

39 
	#MTD_CAP_RAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

40 
	#MTD_CAP_NORFLASH
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
)

	)

41 
	#MTD_CAP_NANDFLASH
 (
MTD_WRITEABLE
)

	)

43 
	#MTD_NANDECC_OFF
 0

	)

44 
	#MTD_NANDECC_PLACE
 1

	)

45 
	#MTD_NANDECC_AUTOPLACE
 2

	)

46 
	#MTD_NANDECC_PLACEONLY
 3

	)

47 
	#MTD_NANDECC_AUTOPL_USR
 4

	)

49 
	#MTD_OTP_OFF
 0

	)

50 
	#MTD_OTP_FACTORY
 1

	)

51 
	#MTD_OTP_USER
 2

	)

53 
	smtd_öfo_u£r
 {

54 
uöt8_t
 
	mty≥
;

55 
uöt32_t
 
	mÊags
;

56 
uöt32_t
 
	msize
;

57 
uöt32_t
 
	mîa£size
;

58 
uöt32_t
 
	mwrôesize
;

59 
uöt32_t
 
	moobsize
;

61 
uöt32_t
 
	mec˘y≥
;

62 
uöt32_t
 
	meccsize
;

65 
	sªgi⁄_öfo_u£r
 {

66 
uöt32_t
 
	moff£t
;

67 
uöt32_t
 
	mîa£size
;

68 
uöt32_t
 
	mnumblocks
;

69 
uöt32_t
 
	mªgi⁄ödex
;

72 
	sŸp_öfo
 {

73 
uöt32_t
 
	m°¨t
;

74 
uöt32_t
 
	mÀngth
;

75 
uöt32_t
 
	mlocked
;

78 
	#MEMGETINFO
 
	`_IOR
('M', 1, 
mtd_öfo_u£r
)

	)

79 
	#MEMERASE
 
	`_IOW
('M', 2, 
îa£_öfo_u£r
)

	)

80 
	#MEMWRITEOOB
 
	`_IOWR
('M', 3, 
mtd_oob_buf
)

	)

81 
	#MEMREADOOB
 
	`_IOWR
('M', 4, 
mtd_oob_buf
)

	)

82 
	#MEMLOCK
 
	`_IOW
('M', 5, 
îa£_öfo_u£r
)

	)

83 
	#MEMUNLOCK
 
	`_IOW
('M', 6, 
îa£_öfo_u£r
)

	)

84 
	#MEMGETREGIONCOUNT
 
	`_IOR
('M', 7, )

	)

85 
	#MEMGETREGIONINFO
 
	`_IOWR
('M', 8, 
ªgi⁄_öfo_u£r
)

	)

86 
	#MEMSETOOBSEL
 
	`_IOW
('M', 9, 
«nd_ooböfo
)

	)

87 
	#MEMGETOOBSEL
 
	`_IOR
('M', 10, 
«nd_ooböfo
)

	)

88 
	#MEMGETBADBLOCK
 
	`_IOW
('M', 11, 
loff_t
)

	)

89 
	#MEMSETBADBLOCK
 
	`_IOW
('M', 12, 
loff_t
)

	)

90 
	#OTPSELECT
 
	`_IOR
('M', 13, )

	)

91 
	#OTPGETREGIONCOUNT
 
	`_IOW
('M', 14, )

	)

92 
	#OTPGETREGIONINFO
 
	`_IOW
('M', 15, 
Ÿp_öfo
)

	)

93 
	#OTPLOCK
 
	`_IOR
('M', 16, 
Ÿp_öfo
)

	)

94 
	#ECCGETLAYOUT
 
	`_IOR
('M', 17, 
«nd_ec˛ayout
)

	)

95 
	#ECCGETSTATS
 
	`_IOR
('M', 18, 
mtd_ecc_°©s
)

	)

96 
	#MTDFILEMODE
 
	`_IO
('M', 19)

	)

98 
	s«nd_ooböfo
 {

99 
uöt32_t
 
	mu£ecc
;

100 
uöt32_t
 
	meccbyãs
;

101 
uöt32_t
 
	moob‰ì
[8][2];

102 
uöt32_t
 
	mec˝os
[32];

105 
	s«nd_oob‰ì
 {

106 
uöt32_t
 
	moff£t
;

107 
uöt32_t
 
	mÀngth
;

110 
	#MTD_MAX_OOBFREE_ENTRIES
 8

	)

112 
	s«nd_ec˛ayout
 {

113 
uöt32_t
 
	meccbyãs
;

114 
uöt32_t
 
	mec˝os
[64];

115 
uöt32_t
 
	moobavaû
;

116 
«nd_oob‰ì
 
	moob‰ì
[
MTD_MAX_OOBFREE_ENTRIES
];

119 
	smtd_ecc_°©s
 {

120 
uöt32_t
 
	mc‹ª˘ed
;

121 
uöt32_t
 
	mÁûed
;

122 
uöt32_t
 
	mbadblocks
;

123 
uöt32_t
 
	mbbtblocks
;

126 
	emtd_fûe_modes
 {

127 
	mMTD_MODE_NORMAL
 = 
MTD_OTP_OFF
,

128 
	mMTD_MODE_OTP_FACTORY
 = 
MTD_OTP_FACTORY
,

129 
	mMTD_MODE_OTP_USER
 = 
MTD_OTP_USER
,

130 
	mMTD_MODE_RAW
,

	@mtd/mtd-user.h

12 #i‚de‡
__MTD_USER_H__


13 
	#__MTD_USER_H__


	)

15 
	~<°döt.h
>

17 
	~<mtd/mtd-abi.h
>

19 
mtd_öfo_u£r
 
	tmtd_öfo_t
;

20 
îa£_öfo_u£r
 
	tîa£_öfo_t
;

21 
ªgi⁄_öfo_u£r
 
	tªgi⁄_öfo_t
;

22 
«nd_ooböfo
 
	t«nd_ooböfo_t
;

23 
«nd_ec˛ayout
 
	t«nd_ec˛ayout_t
;

	@net/ethernet.h

28 #i‚de‡
_NET_ETHERNET_H_


29 
	#_NET_IF_ETHERNET_H_


	)

30 
	~<löux/if_ëhî.h
>

31 
	~<√t/if_ëhî.h
>

	@net/ethertypes.h

49 #i‚de‡
_NET_ETHERTYPES_H_


50 
	#_NET_ETHERTYPES_H_


	)

57 
	#ETHERTYPE_8023
 0x0004

	)

59 
	#ETHERTYPE_PUP
 0x0200

	)

60 
	#ETHERTYPE_PUPAT
 0x0200

	)

61 
	#ETHERTYPE_SPRITE
 0x0500

	)

63 
	#ETHERTYPE_NS
 0x0600

	)

64 
	#ETHERTYPE_NSAT
 0x0601

	)

65 
	#ETHERTYPE_DLOG1
 0x0660

	)

66 
	#ETHERTYPE_DLOG2
 0x0661

	)

67 
	#ETHERTYPE_IP
 0x0800

	)

68 
	#ETHERTYPE_X75
 0x0801

	)

69 
	#ETHERTYPE_NBS
 0x0802

	)

70 
	#ETHERTYPE_ECMA
 0x0803

	)

71 
	#ETHERTYPE_CHAOS
 0x0804

	)

72 
	#ETHERTYPE_X25
 0x0805

	)

73 
	#ETHERTYPE_ARP
 0x0806

	)

74 
	#ETHERTYPE_NSCOMPAT
 0x0807

	)

75 
	#ETHERTYPE_FRARP
 0x0808

	)

78 
	#ETHERTYPE_UBDEBUG
 0x0900

	)

79 
	#ETHERTYPE_IEEEPUP
 0x0A00

	)

80 
	#ETHERTYPE_IEEEPUPAT
 0x0A01

	)

81 
	#ETHERTYPE_VINES
 0x0BAD

	)

82 
	#ETHERTYPE_VINESLOOP
 0x0BAE

	)

83 
	#ETHERTYPE_VINESECHO
 0x0BAF

	)

91 
	#ETHERTYPE_TRAIL
 0x1000

	)

92 
	#ETHERTYPE_NTRAILER
 16

	)

94 
	#ETHERTYPE_DCA
 0x1234

	)

95 
	#ETHERTYPE_VALID
 0x1600

	)

96 
	#ETHERTYPE_DOGFIGHT
 0x1989

	)

97 
	#ETHERTYPE_RCL
 0x1995

	)

101 
	#ETHERTYPE_NBPVCD
 0x3C00

	)

102 
	#ETHERTYPE_NBPSCD
 0x3C01

	)

103 
	#ETHERTYPE_NBPCREQ
 0x3C02

	)

104 
	#ETHERTYPE_NBPCRSP
 0x3C03

	)

105 
	#ETHERTYPE_NBPCC
 0x3C04

	)

106 
	#ETHERTYPE_NBPCLREQ
 0x3C05

	)

107 
	#ETHERTYPE_NBPCLRSP
 0x3C06

	)

108 
	#ETHERTYPE_NBPDG
 0x3C07

	)

109 
	#ETHERTYPE_NBPDGB
 0x3C08

	)

110 
	#ETHERTYPE_NBPCLAIM
 0x3C09

	)

111 
	#ETHERTYPE_NBPDLTE
 0x3C0A

	)

112 
	#ETHERTYPE_NBPRAS
 0x3C0B

	)

113 
	#ETHERTYPE_NBPRAR
 0x3C0C

	)

114 
	#ETHERTYPE_NBPRST
 0x3C0D

	)

116 
	#ETHERTYPE_PCS
 0x4242

	)

117 
	#ETHERTYPE_IMLBLDIAG
 0x424C

	)

118 
	#ETHERTYPE_DIDDLE
 0x4321

	)

119 
	#ETHERTYPE_IMLBL
 0x4C42

	)

120 
	#ETHERTYPE_SIMNET
 0x5208

	)

121 
	#ETHERTYPE_DECEXPER
 0x6000

	)

122 
	#ETHERTYPE_MOPDL
 0x6001

	)

123 
	#ETHERTYPE_MOPRC
 0x6002

	)

124 
	#ETHERTYPE_DEC√t
 0x6003

	)

125 
	#ETHERTYPE_DN
 
ETHERTYPE_DEC√t


	)

126 
	#ETHERTYPE_LAT
 0x6004

	)

127 
	#ETHERTYPE_DECDIAG
 0x6005

	)

128 
	#ETHERTYPE_DECCUST
 0x6006

	)

129 
	#ETHERTYPE_SCA
 0x6007

	)

130 
	#ETHERTYPE_AMBER
 0x6008

	)

131 
	#ETHERTYPE_DECMUMPS
 0x6009

	)

133 
	#ETHERTYPE_TRANSETHER
 0x6558

	)

134 
	#ETHERTYPE_RAWFR
 0x6559

	)

135 
	#ETHERTYPE_UBDL
 0x7000

	)

136 
	#ETHERTYPE_UBNIU
 0x7001

	)

137 
	#ETHERTYPE_UBDIAGLOOP
 0x7002

	)

138 
	#ETHERTYPE_UBNMC
 0x7003

	)

139 
	#ETHERTYPE_UBBST
 0x7005

	)

140 
	#ETHERTYPE_OS9
 0x7007

	)

141 
	#ETHERTYPE_OS9NET
 0x7009

	)

143 
	#ETHERTYPE_RACAL
 0x7030

	)

144 
	#ETHERTYPE_PRIMENTS
 0x7031

	)

145 
	#ETHERTYPE_CABLETRON
 0x7034

	)

146 
	#ETHERTYPE_CRONUSVLN
 0x8003

	)

147 
	#ETHERTYPE_CRONUS
 0x8004

	)

148 
	#ETHERTYPE_HP
 0x8005

	)

149 
	#ETHERTYPE_NESTAR
 0x8006

	)

150 
	#ETHERTYPE_ATTSTANFORD
 0x8008

	)

151 
	#ETHERTYPE_EXCELAN
 0x8010

	)

152 
	#ETHERTYPE_SG_DIAG
 0x8013

	)

153 
	#ETHERTYPE_SG_NETGAMES
 0x8014

	)

154 
	#ETHERTYPE_SG_RESV
 0x8015

	)

155 
	#ETHERTYPE_SG_BOUNCE
 0x8016

	)

156 
	#ETHERTYPE_APOLLODOMAIN
 0x8019

	)

157 
	#ETHERTYPE_TYMSHARE
 0x802E

	)

158 
	#ETHERTYPE_TIGAN
 0x802F

	)

159 
	#ETHERTYPE_REVARP
 0x8035

	)

160 
	#ETHERTYPE_AEONIC
 0x8036

	)

161 
	#ETHERTYPE_IPXNEW
 0x8037

	)

162 
	#ETHERTYPE_LANBRIDGE
 0x8038

	)

163 
	#ETHERTYPE_DSMD
 0x8039

	)

164 
	#ETHERTYPE_ARGONAUT
 0x803A

	)

165 
	#ETHERTYPE_VAXELN
 0x803B

	)

166 
	#ETHERTYPE_DECDNS
 0x803C

	)

167 
	#ETHERTYPE_ENCRYPT
 0x803D

	)

168 
	#ETHERTYPE_DECDTS
 0x803E

	)

169 
	#ETHERTYPE_DECLTM
 0x803F

	)

170 
	#ETHERTYPE_DECNETBIOS
 0x8040

	)

171 
	#ETHERTYPE_DECLAST
 0x8041

	)

173 
	#ETHERTYPE_PLANNING
 0x8044

	)

175 
	#ETHERTYPE_DECAM
 0x8048

	)

176 
	#ETHERTYPE_EXPERDATA
 0x8049

	)

177 
	#ETHERTYPE_VEXP
 0x805B

	)

178 
	#ETHERTYPE_VPROD
 0x805C

	)

179 
	#ETHERTYPE_ES
 0x805D

	)

180 
	#ETHERTYPE_LITTLE
 0x8060

	)

181 
	#ETHERTYPE_COUNTERPOINT
 0x8062

	)

183 
	#ETHERTYPE_VEECO
 0x8067

	)

184 
	#ETHERTYPE_GENDYN
 0x8068

	)

185 
	#ETHERTYPE_ATT
 0x8069

	)

186 
	#ETHERTYPE_AUTOPHON
 0x806A

	)

187 
	#ETHERTYPE_COMDESIGN
 0x806C

	)

188 
	#ETHERTYPE_COMPUGRAPHIC
 0x806D

	)

190 
	#ETHERTYPE_MATRA
 0x807A

	)

191 
	#ETHERTYPE_DDE
 0x807B

	)

192 
	#ETHERTYPE_MERIT
 0x807C

	)

194 
	#ETHERTYPE_VLTLMAN
 0x8080

	)

197 
	#ETHERTYPE_ATALK
 0x809B

	)

198 
	#ETHERTYPE_AT
 
ETHERTYPE_ATALK


	)

199 
	#ETHERTYPE_APPLETALK
 
ETHERTYPE_ATALK


	)

201 
	#ETHERTYPE_SPIDER
 0x809F

	)

206 
	#ETHERTYPE_PACER
 0x80C6

	)

207 
	#ETHERTYPE_APPLITEK
 0x80C7

	)

212 
	#ETHERTYPE_SNA
 0x80D5

	)

213 
	#ETHERTYPE_VARIAN
 0x80DD

	)

217 
	#ETHERTYPE_RETIX
 0x80F2

	)

218 
	#ETHERTYPE_AARP
 0x80F3

	)

220 
	#ETHERTYPE_APOLLO
 0x80F7

	)

221 
	#ETHERTYPE_VLAN
 0x8100

	)

223 
	#ETHERTYPE_BOFL
 0x8102

	)

224 
	#ETHERTYPE_WELLFLEET
 0x8103

	)

226 
	#ETHERTYPE_TALARIS
 0x812B

	)

227 
	#ETHERTYPE_WATERLOO
 0x8130

	)

228 
	#ETHERTYPE_HAYES
 0x8130

	)

229 
	#ETHERTYPE_VGLAB
 0x8131

	)

231 
	#ETHERTYPE_IPX
 0x8137

	)

232 
	#ETHERTYPE_NOVELL
 0x8138

	)

234 
	#ETHERTYPE_MUMPS
 0x813F

	)

235 
	#ETHERTYPE_AMOEBA
 0x8145

	)

236 
	#ETHERTYPE_FLIP
 0x8146

	)

237 
	#ETHERTYPE_VURESERVED
 0x8147

	)

238 
	#ETHERTYPE_LOGICRAFT
 0x8148

	)

239 
	#ETHERTYPE_NCD
 0x8149

	)

240 
	#ETHERTYPE_ALPHA
 0x814A

	)

241 
	#ETHERTYPE_SNMP
 0x814C

	)

243 
	#ETHERTYPE_TEC
 0x814F

	)

244 
	#ETHERTYPE_RATIONAL
 0x8150

	)

248 
	#ETHERTYPE_XTP
 0x817D

	)

249 
	#ETHERTYPE_SGITW
 0x817E

	)

250 
	#ETHERTYPE_HIPPI_FP
 0x8180

	)

251 
	#ETHERTYPE_STP
 0x8181

	)

254 
	#ETHERTYPE_MOTOROLA
 0x818D

	)

255 
	#ETHERTYPE_NETBEUI
 0x8191

	)

272 
	#ETHERTYPE_ACCTON
 0x8390

	)

273 
	#ETHERTYPE_TALARISMC
 0x852B

	)

274 
	#ETHERTYPE_KALPANA
 0x8582

	)

278 
	#ETHERTYPE_SECTRA
 0x86DB

	)

279 
	#ETHERTYPE_IPV6
 0x86DD

	)

280 
	#ETHERTYPE_DELTACON
 0x86DE

	)

281 
	#ETHERTYPE_ATOMIC
 0x86DF

	)

284 
	#ETHERTYPE_RDP
 0x8739

	)

285 
	#ETHERTYPE_MICP
 0x873A

	)

287 
	#ETHERTYPE_TCPCOMP
 0x876B

	)

288 
	#ETHERTYPE_IPAS
 0x876C

	)

289 
	#ETHERTYPE_SECUREDATA
 0x876D

	)

290 
	#ETHERTYPE_FLOWCONTROL
 0x8808

	)

291 
	#ETHERTYPE_SLOWPROTOCOLS
 0x8809

	)

292 
	#ETHERTYPE_PPP
 0x880B

	)

293 
	#ETHERTYPE_HITACHI
 0x8820

	)

294 
	#ETHERTYPE_MPLS
 0x8847

	)

295 
	#ETHERTYPE_MPLS_MCAST
 0x8848

	)

296 
	#ETHERTYPE_AXIS
 0x8856

	)

297 
	#ETHERTYPE_PPPOEDISC
 0x8863

	)

298 
	#ETHERTYPE_PPPOE
 0x8864

	)

299 
	#ETHERTYPE_LANPROBE
 0x8888

	)

300 
	#ETHERTYPE_PAE
 0x888ê

	)

301 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

302 
	#ETHERTYPE_LBACK
 
ETHERTYPE_LOOPBACK


	)

303 
	#ETHERTYPE_XNSSM
 0x9001

	)

304 
	#ETHERTYPE_TCPSM
 0x9002

	)

305 
	#ETHERTYPE_BCLOOP
 0x9003

	)

306 
	#ETHERTYPE_DEBNI
 0xAAAA

	)

307 
	#ETHERTYPE_SONIX
 0xFAF5

	)

308 
	#ETHERTYPE_VITAL
 0xFF00

	)

311 
	#ETHERTYPE_MAX
 0xFFFF

	)

	@net/if.h

28 
	~<löux/if.h
>

29 
	~<sys/cdefs.h
>

30 #i‚de‡
IF_NAMESIZE


31 
	#IF_NAMESIZE
 
IFNAMSIZ


	)

34 
__BEGIN_DECLS


39 
if_«mëoödex
(const *);

40 * 
if_ödext⁄ame
(
ifödex
, *
i‚ame
);

42 
	g__END_DECLS


	@net/if_arp.h

1 
	~<löux/if_¨p.h
>

	@net/if_ether.h

34 #i‚de‡
_NET_IF_ETHER_H_


35 
	#_NET_IF_ETHER_H_


	)

37 
	~<sys/ty≥s.h
>

39 #ifde‡
_KERNEL


40 #ifde‡
_KERNEL_OPT


41 
	~"›t_mbu·ø˚.h
"

43 
	~<sys/mbuf.h
>

49 
	#ETHER_ADDR_LEN
 6

	)

50 
	#ETHER_TYPE_LEN
 2

	)

51 
	#ETHER_CRC_LEN
 4

	)

52 
	#ETHER_HDR_LEN
 ((
ETHER_ADDR_LEN
 * 2Ë+ 
ETHER_TYPE_LEN
)

	)

53 
	#ETHER_MIN_LEN
 64

	)

54 
	#ETHER_MAX_LEN
 1518

	)

55 
	#ETHER_MAX_LEN_JUMBO
 9018

	)

60 
	#ETHER_VLAN_ENCAP_LEN
 4

	)

66 
	sëhî_addr
 {

67 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETHER_ADDR_LEN
];

68 } 
__©åibuã__
((
__∑cked__
));

73 
	sëhî_hódî
 {

74 
u_öt8_t
 
	mëhî_dho°
[
ETHER_ADDR_LEN
];

75 
u_öt8_t
 
	mëhî_sho°
[
ETHER_ADDR_LEN
];

76 
u_öt16_t
 
	mëhî_ty≥
;

77 } 
__©åibuã__
((
__∑cked__
));

79 
	~<√t/ëhîty≥s.h
>

81 
	#ETHER_IS_MULTICAST
(
addr
Ë(*◊ddrË& 0x01Ë

	)

83 
	#ETHERMTU_JUMBO
 (
ETHER_MAX_LEN_JUMBO
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

84 
	#ETHERMTU
 (
ETHER_MAX_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

85 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

91 
	#ETHER_MAX_FRAME
(
iÂ
, 
ëy≥
, 
hasfcs
) \

92 ((
iÂ
)->
if_mtu
 + 
ETHER_HDR_LEN
 + \

93 ((
hasfcs
Ë? 
ETHER_CRC_LEN
 : 0) + \

94 (((
ëy≥
Ë=
ETHERTYPE_VLAN
Ë? 
ETHER_VLAN_ENCAP_LEN
 : 0))

	)

99 
	#ETHER_CRC_POLY_LE
 0xedb88320

	)

100 
	#ETHER_CRC_POLY_BE
 0x04c11db6

	)

102 #i‚de‡
_STANDALONE


107 
	#M_HASFCS
 
M_LINK0


	)

108 
	#M_PROMISC
 
M_LINK1


	)

110 #ifde‡
_KERNEL


116 
	#ETHER_MAP_IP_MULTICAST
(
ùaddr
, 
íaddr
) \

120 (
íaddr
)[0] = 0x01; \

121 (
íaddr
)[1] = 0x00; \

122 (
íaddr
)[2] = 0x5e; \

123 (
íaddr
)[3] = ((
u_öt8_t
 *)
ùaddr
)[1] & 0x7f; \

124 (
íaddr
)[4] = ((
u_öt8_t
 *)
ùaddr
)[2]; \

125 (
íaddr
)[5] = ((
u_öt8_t
 *)
ùaddr
)[3]; \

126 }

	)

132 
	#ETHER_MAP_IPV6_MULTICAST
(
ù6addr
, 
íaddr
) \

136 (
íaddr
)[0] = 0x33; \

137 (
íaddr
)[1] = 0x33; \

138 (
íaddr
)[2] = ((
u_öt8_t
 *)
ù6addr
)[12]; \

139 (
íaddr
)[3] = ((
u_öt8_t
 *)
ù6addr
)[13]; \

140 (
íaddr
)[4] = ((
u_öt8_t
 *)
ù6addr
)[14]; \

141 (
íaddr
)[5] = ((
u_öt8_t
 *)
ù6addr
)[15]; \

142 }

	)

145 
	#ETHERCAP_VLAN_MTU
 0x00000001

	)

146 
	#ETHERCAP_VLAN_HWTAGGING
 0x00000002

	)

147 
	#ETHERCAP_JUMBO_MTU
 0x00000004

	)

149 #ifdef 
_KERNEL


150 c⁄° 
uöt8_t
 
ëhîbrﬂdˇ°addr
[
ETHER_ADDR_LEN
];

151 c⁄° 
uöt8_t
 
ëhîmu…iˇ°addr_¶ow¥Ÿocﬁs
[
ETHER_ADDR_LEN
];

152 c⁄° 
uöt8_t
 
ëhî_ùmu…iˇ°_mö
[
ETHER_ADDR_LEN
];

153 c⁄° 
uöt8_t
 
ëhî_ùmu…iˇ°_max
[
ETHER_ADDR_LEN
];

155 
ëhî_io˘l
(
i‚ë
 *, 
u_l⁄g
, 
ˇddr_t
);

156 
ëhî_addmu…i
 (
i‰eq
 *, 
ëhîcom
 *);

157 
ëhî_dñmu…i
 (
i‰eq
 *, 
ëhîcom
 *);

158 
ëhî_ch™góddr
 (
i‰eq
 *, 
ëhîcom
 *);

159 
ëhî_mu…üddr
(
sockaddr
 *, 
u_öt8_t
[], u_int8_t[]);

166 
	#VLAN_INPUT_TAG
(
iÂ
, 
m
, 
vœnid
, 
_îrˇ£
) \

168 
m_èg
 *
mèg
 = \

169 
	`m_èg_gë
(
PACKET_TAG_VLAN
, (
u_öt
), 
M_NOWAIT
);\

170 i‡(
mèg
 =
NULL
) { \

171 
iÂ
->
if_õº‹s
++; \

172 
	`¥ötf
("%s: unableÅoállocate VLANÅag\n", \

173 
iÂ
->
if_x«me
); \

174 
	`m_‰ìm
(
m
); \

175 
_îrˇ£
; \

177 *(
u_öt
 *)(
mèg
 + 1Ë
vœnid
; \

178 
	`m_èg_¥ïíd
(
m
, 
mèg
); \

179 } 0)

	)

182 
	#VLAN_OUTPUT_TAG
(
ec
, 
m0
) \

183 
	`VLAN_ATTACHED
(
ec
Ë? 
	`m_èg_föd
((
m0
), 
PACKET_TAG_VLAN
, 
NULL
Ë: 
	)
NULL

186 
	#VLAN_TAG_VALUE
(
mèg
) \

187 ((*(
u_öt
 *)(
mèg
 + 1)Ë& 4095)

	)

190 
	#VLAN_ATTACHED
(
ec
Ë(”c)->
ec_nvœns
 > 0)

	)

192 
ëhî_iÁâach
(
i‚ë
 *, c⁄° 
u_öt8_t
 *);

193 
ëhî_ifdëach
(
i‚ë
 *);

195 *
ëhî_•rötf
(c⁄° 
u_öt8_t
 *);

196 *
ëhî_¢¥ötf
(*, 
size_t
, c⁄° 
u_öt8_t
 *);

198 
u_öt32_t
 
ëhî_¸c32_À
(c⁄° 
u_öt8_t
 *, 
size_t
);

199 
u_öt32_t
 
ëhî_¸c32_be
(c⁄° 
u_öt8_t
 *, 
size_t
);

201 
ëhî_n⁄°©ic_©⁄
(
u_ch¨
 *, *);

206 
	~<sys/cdefs.h
>

207 
__BEGIN_DECLS


208 * 
ëhî_¡ﬂ
 
__P
((c⁄° 
ëhî_addr
 *));

209 
ëhî_addr
 *

210 
ëhî_©⁄
 
__P
((const *));

211 
ëhî_¡oho°
 
__P
((*, c⁄° 
ëhî_addr
 *));

212 
ëhî_ho°t⁄
 
__P
((c⁄° *, 
ëhî_addr
 *));

213 
ëhî_löe
 
__P
((c⁄° *, 
ëhî_addr
 *, *));

214 
	g__END_DECLS


	@net/if_ieee1394.h

39 #i‚de‡
_NET_IF_IEEE1394_H_


40 
	#_NET_IF_IEEE1394_H_


	)

43 
	sõì1394_hwaddr
 {

44 
u_öt8_t
 
	miha_uid
[8];

45 
u_öt8_t
 
	miha_maxªc
;

46 
u_öt8_t
 
	miha_•ìd
;

47 
u_öt8_t
 
	miha_off£t
[6];

53 
	sõì1394_bpfhdr
 {

54 
uöt8_t
 
	mibh_dho°
[8];

55 
uöt8_t
 
	mibh_sho°
[8];

56 
uöt16_t
 
	mibh_ty≥
;

59 #ifde‡
_KERNEL


62 
	sõì1394_hódî
 {

63 
u_öt8_t
 
	mih_uid
[8];

64 
u_öt8_t
 
	mih_maxªc
;

65 
u_öt8_t
 
	mih_•ìd
;

66 
u_öt8_t
 
	mih_off£t
[6];

70 
	sõì1394_un‰aghdr
 {

71 
u_öt16_t
 
	miuh_·
;

72 
u_öt16_t
 
	miuh_ëy≥
;

76 
	sõì1394_‰aghdr
 {

77 
u_öt16_t
 
	mifh_·_size
;

78 
u_öt16_t
 
	mifh_ëy≥_off
;

80 
u_öt16_t
 
	mifh_dgl
;

81 
u_öt16_t
 
	mifh_ª£rved
;

84 
	#IEEE1394_FT_SUBSEQ
 0x8000

	)

85 
	#IEEE1394_FT_MORE
 0x4000

	)

87 
	#IEEE1394MTU
 1500

	)

89 
	#IEEE1394_GASP_LEN
 8

	)

90 
	#IEEE1394_ADDR_LEN
 8

	)

91 
	#IEEE1394_CRC_LEN
 4

	)

93 
	sõì1394_ªass_pkt
 {

94 
LIST_ENTRY
(
õì1394_ªass_pkt
Ë
	mΩ_√xt
;

95 
mbuf
 *
	mΩ_m
;

96 
u_öt16_t
 
	mΩ_size
;

97 
u_öt16_t
 
	mΩ_ëy≥
;

98 
u_öt16_t
 
	mΩ_off
;

99 
u_öt16_t
 
	mΩ_dgl
;

100 
u_öt16_t
 
	mΩ_Àn
;

101 
u_öt16_t
 
	mΩ_âl
;

104 
	sõì1394_ªassq
 {

105 
LIST_ENTRY
(
õì1394_ªassq
Ë
	mrq_node
;

106 
LIST_HEAD
(, 
õì1394_ªass_pkt
Ë
	mrq_pkt
;

107 
u_öt32_t
 
	m‰_id
;

110 
	sõì1394com
 {

111 
i‚ë
 
	mfc_if
;

112 
õì1394_hwaddr
 
	mic_hwaddr
;

113 
u_öt16_t
 
	mic_dgl
;

114 
LIST_HEAD
(, 
õì1394_ªassq
Ë
	mic_ªassq
;

117 c⁄° *
õì1394_•rötf
(c⁄° 
u_öt8_t
 *);

118 
õì1394_öput
(
i‚ë
 *, 
mbuf
 *, 
u_öt16_t
);

119 
õì1394_iÁâach
(
i‚ë
 *, c⁄° 
õì1394_hwaddr
 *);

120 
õì1394_ifdëach
(
i‚ë
 *);

121 
õì1394_io˘l
(
i‚ë
 *, 
u_l⁄g
, 
ˇddr_t
);

122 
mbuf
 * 
õì1394_‰agmít
(
i‚ë
 *, mbu‡*, , 
u_öt16_t
);

123 
õì1394_døö
(
i‚ë
 *);

124 
õì1394_w©chdog
(
i‚ë
 *);

	@net/if_packet.h

1 
	~<löux/if_∑ckë.h
>

	@net/if_types.h

34 #i‚de‡
_NET_IF_TYPES_H_


35 
	#_NET_IF_TYPES_H_


	)

45 
	#IFT_OTHER
 0x1

	)

46 
	#IFT_1822
 0x2

	)

47 
	#IFT_HDH1822
 0x3

	)

48 
	#IFT_X25DDN
 0x4

	)

49 
	#IFT_X25
 0x5

	)

50 
	#IFT_ETHER
 0x6

	)

51 
	#IFT_ISO88023
 0x7

	)

52 
	#IFT_ISO88024
 0x8

	)

53 
	#IFT_ISO88025
 0x9

	)

54 
	#IFT_ISO88026
 0x®

	)

55 
	#IFT_STARLAN
 0xb

	)

56 
	#IFT_P10
 0x¯

	)

57 
	#IFT_P80
 0xd

	)

58 
	#IFT_HY
 0xê

	)

59 
	#IFT_FDDI
 0xf

	)

60 
	#IFT_LAPB
 0x10

	)

61 
	#IFT_SDLC
 0x11

	)

62 
	#IFT_T1
 0x12

	)

63 
	#IFT_CEPT
 0x13

	)

64 
	#IFT_ISDNBASIC
 0x14

	)

65 
	#IFT_ISDNPRIMARY
 0x15

	)

66 
	#IFT_PTPSERIAL
 0x16

	)

67 
	#IFT_PPP
 0x17

	)

68 
	#IFT_LOOP
 0x18

	)

69 
	#IFT_EON
 0x19

	)

70 
	#IFT_XETHER
 0x1®

	)

71 
	#IFT_NSIP
 0x1b

	)

72 
	#IFT_SLIP
 0x1¯

	)

73 
	#IFT_ULTRA
 0x1d

	)

74 
	#IFT_DS3
 0x1ê

	)

75 
	#IFT_SIP
 0x1‡

	)

76 
	#IFT_FRELAY
 0x20

	)

77 
	#IFT_RS232
 0x21

	)

78 
	#IFT_PARA
 0x22

	)

79 
	#IFT_ARCNET
 0x23

	)

80 
	#IFT_ARCNETPLUS
 0x24

	)

81 
	#IFT_ATM
 0x25

	)

82 
	#IFT_MIOX25
 0x26

	)

83 
	#IFT_SONET
 0x27

	)

84 
	#IFT_X25PLE
 0x28

	)

85 
	#IFT_ISO88022LLC
 0x29

	)

86 
	#IFT_LOCALTALK
 0x2a

	)

87 
	#IFT_SMDSDXI
 0x2b

	)

88 
	#IFT_FRELAYDCE
 0x2¯

	)

89 
	#IFT_V35
 0x2d

	)

90 
	#IFT_HSSI
 0x2e

	)

91 
	#IFT_HIPPI
 0x2f

	)

92 
	#IFT_MODEM
 0x30

	)

93 
	#IFT_AAL5
 0x31

	)

94 
	#IFT_SONETPATH
 0x32

	)

95 
	#IFT_SONETVT
 0x33

	)

96 
	#IFT_SMDSICIP
 0x34

	)

97 
	#IFT_PROPVIRTUAL
 0x35

	)

98 
	#IFT_PROPMUX
 0x36

	)

99 
	#IFT_IEEE80212
 0x37

	)

100 
	#IFT_FIBRECHANNEL
 0x38

	)

101 
	#IFT_HIPPIINTERFACE
 0x39

	)

102 
	#IFT_FRAMERELAYINTERCONNECT
 0x3®

	)

103 
	#IFT_AFLANE8023
 0x3b

	)

104 
	#IFT_AFLANE8025
 0x3¯

	)

105 
	#IFT_CCTEMUL
 0x3d

	)

106 
	#IFT_FASTETHER
 0x3ê

	)

107 
	#IFT_ISDN
 0x3‡

	)

108 
	#IFT_V11
 0x40

	)

109 
	#IFT_V36
 0x41

	)

110 
	#IFT_G703AT64K
 0x42

	)

111 
	#IFT_G703AT2MB
 0x43

	)

112 
	#IFT_QLLC
 0x44

	)

113 
	#IFT_FASTETHERFX
 0x45

	)

114 
	#IFT_CHANNEL
 0x46

	)

115 
	#IFT_IEEE80211
 0x47

	)

116 
	#IFT_IBM370PARCHAN
 0x48

	)

117 
	#IFT_ESCON
 0x49

	)

118 
	#IFT_DLSW
 0x4®

	)

119 
	#IFT_ISDNS
 0x4b

	)

120 
	#IFT_ISDNU
 0x4¯

	)

121 
	#IFT_LAPD
 0x4d

	)

122 
	#IFT_IPSWITCH
 0x4ê

	)

123 
	#IFT_RSRB
 0x4‡

	)

124 
	#IFT_ATMLOGICAL
 0x50

	)

125 
	#IFT_DS0
 0x51

	)

126 
	#IFT_DS0BUNDLE
 0x52

	)

127 
	#IFT_BSC
 0x53

	)

128 
	#IFT_ASYNC
 0x54

	)

129 
	#IFT_CNR
 0x55

	)

130 
	#IFT_ISO88025DTR
 0x56

	)

131 
	#IFT_EPLRS
 0x57

	)

132 
	#IFT_ARAP
 0x58

	)

133 
	#IFT_PROPCNLS
 0x59

	)

134 
	#IFT_HOSTPAD
 0x5®

	)

135 
	#IFT_TERMPAD
 0x5b

	)

136 
	#IFT_FRAMERELAYMPI
 0x5¯

	)

137 
	#IFT_X213
 0x5d

	)

138 
	#IFT_ADSL
 0x5ê

	)

139 
	#IFT_RADSL
 0x5‡

	)

140 
	#IFT_SDSL
 0x60

	)

141 
	#IFT_VDSL
 0x61

	)

142 
	#IFT_ISO88025CRFPINT
 0x62

	)

143 
	#IFT_MYRINET
 0x63

	)

144 
	#IFT_VOICEEM
 0x64

	)

145 
	#IFT_VOICEFXO
 0x65

	)

146 
	#IFT_VOICEFXS
 0x66

	)

147 
	#IFT_VOICEENCAP
 0x67

	)

148 
	#IFT_VOICEOVERIP
 0x68

	)

149 
	#IFT_ATMDXI
 0x69

	)

150 
	#IFT_ATMFUNI
 0x6®

	)

151 
	#IFT_ATMIMA
 0x6b

	)

152 
	#IFT_PPPMULTILINKBUNDLE
 0x6¯

	)

153 
	#IFT_IPOVERCDLC
 0x6d

	)

154 
	#IFT_IPOVERCLAW
 0x6ê

	)

155 
	#IFT_STACKTOSTACK
 0x6‡

	)

156 
	#IFT_VIRTUALIPADDRESS
 0x70

	)

157 
	#IFT_MPC
 0x71

	)

158 
	#IFT_IPOVERATM
 0x72

	)

159 
	#IFT_ISO88025FIBER
 0x73

	)

160 
	#IFT_TDLC
 0x74

	)

161 
	#IFT_GIGABITETHERNET
 0x75

	)

162 
	#IFT_HDLC
 0x76

	)

163 
	#IFT_LAPF
 0x77

	)

164 
	#IFT_V37
 0x78

	)

165 
	#IFT_X25MLP
 0x79

	)

166 
	#IFT_X25HUNTGROUP
 0x7®

	)

167 
	#IFT_TRANSPHDLC
 0x7b

	)

168 
	#IFT_INTERLEAVE
 0x7¯

	)

169 
	#IFT_FAST
 0x7d

	)

170 
	#IFT_IP
 0x7ê

	)

171 
	#IFT_DOCSCABLEMACLAYER
 0x7‡

	)

172 
	#IFT_DOCSCABLEDOWNSTREAM
 0x80

	)

173 
	#IFT_DOCSCABLEUPSTREAM
 0x81

	)

174 
	#IFT_A12MPPSWITCH
 0x82

	)

175 
	#IFT_TUNNEL
 0x83

	)

176 
	#IFT_COFFEE
 0x84

	)

177 
	#IFT_CES
 0x85

	)

178 
	#IFT_ATMSUBINTERFACE
 0x86

	)

179 
	#IFT_L2VLAN
 0x87

	)

180 
	#IFT_L3IPVLAN
 0x88

	)

181 
	#IFT_L3IPXVLAN
 0x89

	)

182 
	#IFT_DIGITALPOWERLINE
 0x8®

	)

183 
	#IFT_MEDIAMAILOVERIP
 0x8b

	)

184 
	#IFT_DTM
 0x8¯

	)

185 
	#IFT_DCN
 0x8d

	)

186 
	#IFT_IPFORWARD
 0x8ê

	)

187 
	#IFT_MSDSL
 0x8‡

	)

188 
	#IFT_IEEE1394
 0x90

	)

189 
	#IFT_IFGSN
 0x91

	)

190 
	#IFT_DVBRCCMACLAYER
 0x92

	)

191 
	#IFT_DVBRCCDOWNSTREAM
 0x93

	)

192 
	#IFT_DVBRCCUPSTREAM
 0x94

	)

193 
	#IFT_ATMVIRTUAL
 0x95

	)

194 
	#IFT_MPLSTUNNEL
 0x96

	)

195 
	#IFT_SRP
 0x97

	)

196 
	#IFT_VOICEOVERATM
 0x98

	)

197 
	#IFT_VOICEOVERFRAMERELAY
 0x99

	)

198 
	#IFT_IDSL
 0x9®

	)

199 
	#IFT_COMPOSITELINK
 0x9b

	)

200 
	#IFT_SS7SIGLINK
 0x9¯

	)

201 
	#IFT_PROPWIRELESSP2P
 0x9d

	)

202 
	#IFT_FRFORWARD
 0x9ê

	)

203 
	#IFT_RFC1483
 0x9‡

	)

204 
	#IFT_USB
 0xa0

	)

205 
	#IFT_IEEE8023ADLAG
 0xa1

	)

206 
	#IFT_BGPPOLICYACCOUNTING
 0xa2

	)

207 
	#IFT_FRF16MFRBUNDLE
 0xa3

	)

208 
	#IFT_H323GATEKEEPER
 0xa4

	)

209 
	#IFT_H323PROXY
 0xa5

	)

210 
	#IFT_MPLS
 0xa6

	)

211 
	#IFT_MFSIGLINK
 0xa7

	)

212 
	#IFT_HDSL2
 0xa8

	)

213 
	#IFT_SHDSL
 0xa9

	)

214 
	#IFT_DS1FDL
 0xØ

	)

215 
	#IFT_POS
 0xab

	)

216 
	#IFT_DVBASILN
 0xa¯

	)

217 
	#IFT_DVBASIOUT
 0xad

	)

218 
	#IFT_PLC
 0x´

	)

219 
	#IFT_NFAS
 0xa‡

	)

220 
	#IFT_TR008
 0xb0

	)

221 
	#IFT_GR303RDT
 0xb1

	)

222 
	#IFT_GR303IDT
 0xb2

	)

223 
	#IFT_ISUP
 0xb3

	)

224 
	#IFT_PROPDOCSWIRELESSMACLAYER
 0xb4

	)

225 
	#IFT_PROPDOCSWIRELESSDOWNSTREAM
 0xb5

	)

226 
	#IFT_PROPDOCSWIRELESSUPSTREAM
 0xb6

	)

227 
	#IFT_HIPERLAN2
 0xb7

	)

228 
	#IFT_PROPBWAP2MP
 0xb8

	)

229 
	#IFT_SONETOVERHEADCHANNEL
 0xb9

	)

230 
	#IFT_DIGITALWRAPPEROVERHEADCHANNEL
 0xb®

	)

231 
	#IFT_AAL2
 0xbb

	)

232 
	#IFT_RADIOMAC
 0xb¯

	)

233 
	#IFT_ATMRADIO
 0xbd

	)

234 
	#IFT_IMT
 0xbê

	)

235 
	#IFT_MVL
 0xb‡

	)

236 
	#IFT_REACHDSL
 0xc0

	)

237 
	#IFT_FRDLCIENDPT
 0xc1

	)

238 
	#IFT_ATMVCIENDPT
 0xc2

	)

239 
	#IFT_OPTICALCHANNEL
 0xc3

	)

240 
	#IFT_OPTICALTRANSPORT
 0xc4

	)

241 
	#IFT_PROPATM
 0xc5

	)

242 
	#IFT_VOICEOVERCABLE
 0xc6

	)

243 
	#IFT_INFINIBAND
 0xc7

	)

244 
	#IFT_TELINK
 0xc8

	)

245 
	#IFT_Q2931
 0xc9

	)

246 
	#IFT_VIRTUALTG
 0xˇ

	)

247 
	#IFT_SIPTG
 0xcb

	)

248 
	#IFT_SIPSIG
 0xc¯

	)

249 
	#IFT_DOCSCABLEUPSTREAMCHANNEL
 0xcd

	)

250 
	#IFT_ECONET
 0x˚

	)

251 
	#IFT_PON155
 0xc‡

	)

252 
	#IFT_PON622
 0xd0 */

	)

253 
	#IFT_BRIDGE
 0xd1

	)

254 
	#IFT_LINEGROUP
 0xd2

	)

255 
	#IFT_VOICEEMFGD
 0xd3

	)

256 
	#IFT_VOICEFGDEANA
 0xd4

	)

257 
	#IFT_VOICEDID
 0xd5

	)

258 
	#IFT_STF
 0xd7

	)

261 
	#IFT_GIF
 0xf0

	)

262 
	#IFT_PVC
 0xf1

	)

263 
	#IFT_FAITH
 0xf2

	)

264 
	#IFT_PFLOG
 0xf5

	)

265 
	#IFT_PFSYNC
 0xf6

	)

	@net/route.h

1 
	~<löux/rouã.h
>

	@netdb.h

61 #i‚de‡
_NETDB_H_


62 
	#_NETDB_H_


	)

64 
	~<sys/cdefs.h
>

65 
	~<sys/ty≥s.h
>

66 
	~<sys/sockë.h
>

68 #i‚de‡
_PATH_HEQUIV


69 
	#_PATH_HEQUIV
 "/sy°em/ëc/ho°s.equiv"

	)

71 
	#_PATH_HOSTS
 "/sy°em/ëc/ho°s"

	)

72 
	#_PATH_NETWORKS
 "/sy°em/ëc/√tw‹ks"

	)

73 
	#_PATH_PROTOCOLS
 "/sy°em/ëc/¥Ÿocﬁs"

	)

74 
	#_PATH_SERVICES
 "/sy°em/ëc/£rvi˚s"

	)

76 
	#MAXHOSTNAMELEN
 256

	)

84 
	sho°ít
 {

85 *
	mh_«me
;

86 **
	mh_Æü£s
;

87 
	mh_addπy≥
;

88 
	mh_Àngth
;

89 **
	mh_addr_li°
;

90 
	#h_addr
 
h_addr_li°
[0]

	)

93 
	s√ã¡
 {

94 *
	mn_«me
;

95 **
	mn_Æü£s
;

96 
	mn_addπy≥
;

97 
uöt32_t
 
	mn_√t
;

100 
	s£rvít
 {

101 *
	ms_«me
;

102 **
	ms_Æü£s
;

103 
	ms_p‹t
;

104 *
	ms_¥Ÿo
;

107 
	s¥Ÿ€¡
 {

108 *
	mp_«me
;

109 **
	mp_Æü£s
;

110 
	mp_¥Ÿo
;

113 
	saddröfo
 {

114 
	mai_Êags
;

115 
	mai_Ámûy
;

116 
	mai_sockty≥
;

117 
	mai_¥Ÿocﬁ
;

118 
sockÀn_t
 
	mai_addæí
;

119 *
	mai_ˇn⁄«me
;

120 
sockaddr
 *
	mai_addr
;

121 
addröfo
 *
	mai_√xt
;

129 
	#NETDB_INTERNAL
 -1

	)

130 
	#NETDB_SUCCESS
 0

	)

131 
	#HOST_NOT_FOUND
 1

	)

132 
	#TRY_AGAIN
 2

	)

133 
	#NO_RECOVERY
 3

	)

134 
	#NO_DATA
 4

	)

135 
	#NO_ADDRESS
 
NO_DATA


	)

140 
	#EAI_ADDRFAMILY
 1

	)

141 
	#EAI_AGAIN
 2

	)

142 
	#EAI_BADFLAGS
 3

	)

143 
	#EAI_FAIL
 4

	)

144 
	#EAI_FAMILY
 5

	)

145 
	#EAI_MEMORY
 6

	)

146 
	#EAI_NODATA
 7

	)

147 
	#EAI_NONAME
 8

	)

148 
	#EAI_SERVICE
 9

	)

149 
	#EAI_SOCKTYPE
 10

	)

150 
	#EAI_SYSTEM
 11

	)

151 
	#EAI_BADHINTS
 12

	)

152 
	#EAI_PROTOCOL
 13

	)

153 
	#EAI_OVERFLOW
 14

	)

154 
	#EAI_MAX
 15

	)

159 
	#AI_PASSIVE
 0x00000001

	)

160 
	#AI_CANONNAME
 0x00000002

	)

161 
	#AI_NUMERICHOST
 0x00000004

	)

162 
	#AI_NUMERICSERV
 0x00000008

	)

164 
	#AI_MASK
 \

165 (
AI_PASSIVE
 | 
AI_CANONNAME
 | 
AI_NUMERICHOST
 | 
AI_NUMERICSERV
 | \

166 
AI_ADDRCONFIG
)

	)

168 
	#AI_ALL
 0x00000100

	)

169 
	#AI_V4MAPPED_CFG
 0x00000200

	)

170 
	#AI_ADDRCONFIG
 0x00000400

	)

171 
	#AI_V4MAPPED
 0x00000800

	)

173 
	#AI_DEFAULT
 (
AI_V4MAPPED_CFG
 | 
AI_ADDRCONFIG
)

	)

178 
	#NI_MAXHOST
 1025

	)

179 
	#NI_MAXSERV
 32

	)

184 
	#NI_NOFQDN
 0x00000001

	)

185 
	#NI_NUMERICHOST
 0x00000002

	)

186 
	#NI_NAMEREQD
 0x00000004

	)

187 
	#NI_NUMERICSERV
 0x00000008

	)

188 
	#NI_DGRAM
 0x00000010

	)

190 
	#NI_WITHSCOPEID
 0x00000020

	)

196 
	#SCOPE_DELIMITER
 '%'

	)

198 
	g__BEGIN_DECLS


200 
	#h_î∫o
 (*
	`__gë_h_î∫o
())

	)

201 * 
__gë_h_î∫o
();

203 
íd£rvít
();

204 
ho°ít
 *
gëho°byaddr
(const *, , );

205 
ho°ít
 *
gëho°by«me
(const *);

206 
gëho°by«me_r
(c⁄° *, 
ho°ít
 *, *, 
size_t
, hostent **, *);

207 
ho°ít
 *
gëho°by«me2
(const *, );

208 
ho°ít
 *
gëho°ít
();

209 
√ã¡
 *
gë√tbyaddr
(
uöt32_t
, );

210 
√ã¡
 *
gë√tby«me
(const *);

211 
¥Ÿ€¡
 *
gë¥Ÿoby«me
(const *);

212 
¥Ÿ€¡
 *
gë¥Ÿobynumbî
();

213 
£rvít
 *
gë£rvby«me
(const *, const *);

214 
£rvít
 *
gë£rvbyp‹t
(, const *);

215 
£rvít
 *
gë£rvít
();

216 
hîr‹
(const *);

217 c⁄° *
h°ªº‹
();

218 
gëaddröfo
(c⁄° *, c⁄° *, c⁄° 
addröfo
 *, addrinfo **);

219 
gë«meöfo
(c⁄° 
sockaddr
 *, 
sockÀn_t
, *, 
size_t
, *, size_t, );

220 
‰ìaddröfo
(
addröfo
 *);

221 c⁄° *
gai_°ªº‹
();

222 
£t£rvít
();

225 
ídho°ít
();

226 
íd√ã¡
();

227 
íd√tgª¡
();

228 
íd¥Ÿ€¡
();

229 
‰ìho°ít
(
ho°ít
 *);

230 
gëho°byaddr_r
(c⁄° *, , , 
ho°ít
 *, *, 
size_t
, hostent **, *);

231 
gëho°by«me2_r
(c⁄° *, , 
ho°ít
 *, *, 
size_t
, hostent **, *);

232 
gëho°ít_r
(
ho°ít
 *, *, 
size_t
, hostent **, *);

233 
ho°ít
 *
gëùnodebyaddr
(c⁄° *, 
size_t
, , *);

234 
ho°ít
 *
gëùnodeby«me
(const *, , , *);

235 
gë√tbyaddr_r
(
uöt32_t
, , 
√ã¡
 *, *, 
size_t
, netent**, *);

236 
gë√tby«me_r
(c⁄° *, 
√ã¡
 *, *, 
size_t
, netent **, *);

237 
gë√ã¡_r
(
√ã¡
 *, *, 
size_t
, netent **, *);

238 
gë√tgª¡
(**, **, **);

239 
gë¥Ÿoby«me_r
(c⁄° *, 
¥Ÿ€¡
 *, *, 
size_t
, protoent **);

240 
gë¥Ÿobynumbî_r
(, 
¥Ÿ€¡
 *, *, 
size_t
, protoent **);

241 
¥Ÿ€¡
 *
gë¥Ÿ€¡
();

242 
gë¥Ÿ€¡_r
(
¥Ÿ€¡
 *, *, 
size_t
, protoent **);

243 
ö√tgr
(const *, const *, const *, const *);

244 
£tho°ít
();

245 
£äëít
();

246 
£çrŸ€¡
();

247 
√ã¡
 *
gë√ã¡
();

248 
£äëgª¡
(const *);

251 
	g__END_DECLS


	@netinet/ether.h

28 
	~<√t/if_ëhî.h
>

	@netinet/icmp6.h

65 #i‚de‡
_NETINET_ICMP6_H_


66 
	#_NETINET_ICMP6_H_


	)

68 
	#ICMPV6_PLD_MAXLEN
 1232

	)

71 
	sicmp6_hdr
 {

72 
u_öt8_t
 
	micmp6_ty≥
;

73 
u_öt8_t
 
	micmp6_code
;

74 
u_öt16_t
 
	micmp6_cksum
;

76 
u_öt32_t
 
	micmp6_un_d©a32
[1];

77 
u_öt16_t
 
	micmp6_un_d©a16
[2];

78 
u_öt8_t
 
	micmp6_un_d©a8
[4];

79 } 
	micmp6_d©aun
;

80 } 
	g__∑cked
;

82 
	#icmp6_d©a32
 
icmp6_d©aun
.
icmp6_un_d©a32


	)

83 
	#icmp6_d©a16
 
icmp6_d©aun
.
icmp6_un_d©a16


	)

84 
	#icmp6_d©a8
 
icmp6_d©aun
.
icmp6_un_d©a8


	)

85 
	#icmp6_µå
 
icmp6_d©a32
[0]

	)

86 
	#icmp6_mtu
 
icmp6_d©a32
[0]

	)

87 
	#icmp6_id
 
icmp6_d©a16
[0]

	)

88 
	#icmp6_£q
 
icmp6_d©a16
[1]

	)

89 
	#icmp6_maxdñay
 
icmp6_d©a16
[0]

	)

91 
	#ICMP6_DST_UNREACH
 1

	)

92 
	#ICMP6_PACKET_TOO_BIG
 2

	)

93 
	#ICMP6_TIME_EXCEEDED
 3

	)

94 
	#ICMP6_PARAM_PROB
 4

	)

96 
	#ICMP6_ECHO_REQUEST
 128

	)

97 
	#ICMP6_ECHO_REPLY
 129

	)

98 
	#MLD_LISTENER_QUERY
 130

	)

99 
	#MLD_LISTENER_REPORT
 131

	)

100 
	#MLD_LISTENER_DONE
 132

	)

103 
	#ICMP6_MEMBERSHIP_QUERY
 130

	)

104 
	#ICMP6_MEMBERSHIP_REPORT
 131

	)

105 
	#ICMP6_MEMBERSHIP_REDUCTION
 132

	)

107 #i‚de‡
_KERNEL


109 
	#MLD6_LISTENER_QUERY
 
MLD_LISTENER_QUERY


	)

110 
	#MLD6_LISTENER_REPORT
 
MLD_LISTENER_REPORT


	)

111 
	#MLD6_LISTENER_DONE
 
MLD_LISTENER_DONE


	)

114 
	#ND_ROUTER_SOLICIT
 133

	)

115 
	#ND_ROUTER_ADVERT
 134

	)

116 
	#ND_NEIGHBOR_SOLICIT
 135

	)

117 
	#ND_NEIGHBOR_ADVERT
 136

	)

118 
	#ND_REDIRECT
 137

	)

120 
	#ICMP6_ROUTER_RENUMBERING
 138

	)

122 
	#ICMP6_WRUREQUEST
 139

	)

123 
	#ICMP6_WRUREPLY
 140

	)

124 
	#ICMP6_FQDN_QUERY
 139

	)

125 
	#ICMP6_FQDN_REPLY
 140

	)

126 
	#ICMP6_NI_QUERY
 139

	)

127 
	#ICMP6_NI_REPLY
 140

	)

130 
	#MLD_MTRACE_RESP
 200

	)

131 
	#MLD_MTRACE
 201

	)

133 #i‚de‡
_KERNEL


135 
	#MLD6_MTRACE_RESP
 
MLD_MTRACE_RESP


	)

136 
	#MLD6_MTRACE
 
MLD_MTRACE


	)

139 
	#ICMP6_MAXTYPE
 201

	)

141 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

142 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

143 
	#ICMP6_DST_UNREACH_NOTNEIGHBOR
 2

	)

144 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

145 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

146 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

148 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

149 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

151 
	#ICMP6_PARAMPROB_HEADER
 0

	)

152 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

153 
	#ICMP6_PARAMPROB_OPTION
 2

	)

155 
	#ICMP6_INFOMSG_MASK
 0x80

	)

157 
	#ICMP6_NI_SUBJ_IPV6
 0

	)

158 
	#ICMP6_NI_SUBJ_FQDN
 1

	)

159 
	#ICMP6_NI_SUBJ_IPV4
 2

	)

161 
	#ICMP6_NI_SUCCESS
 0

	)

162 
	#ICMP6_NI_REFUSED
 1

	)

163 
	#ICMP6_NI_UNKNOWN
 2

	)

165 
	#ICMP6_ROUTER_RENUMBERING_COMMAND
 0

	)

166 
	#ICMP6_ROUTER_RENUMBERING_RESULT
 1

	)

167 
	#ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET
 255

	)

170 
	#ND_REDIRECT_ONLINK
 0

	)

171 
	#ND_REDIRECT_ROUTER
 1

	)

176 
	smld_hdr
 {

177 
icmp6_hdr
 
	mmld_icmp6_hdr
;

178 
ö6_addr
 
	mmld_addr
;

179 } 
	g__∑cked
;

182 #i‚de‡
_KERNEL


183 
	#mld6_hdr
 
mld_hdr


	)

184 
	#mld6_ty≥
 
mld_ty≥


	)

185 
	#mld6_code
 
mld_code


	)

186 
	#mld6_cksum
 
mld_cksum


	)

187 
	#mld6_maxdñay
 
mld_maxdñay


	)

188 
	#mld6_ª£rved
 
mld_ª£rved


	)

189 
	#mld6_addr
 
mld_addr


	)

193 
	#mld_ty≥
 
mld_icmp6_hdr
.
icmp6_ty≥


	)

194 
	#mld_code
 
mld_icmp6_hdr
.
icmp6_code


	)

195 
	#mld_cksum
 
mld_icmp6_hdr
.
icmp6_cksum


	)

196 
	#mld_maxdñay
 
mld_icmp6_hdr
.
icmp6_d©a16
[0]

	)

197 
	#mld_ª£rved
 
mld_icmp6_hdr
.
icmp6_d©a16
[1]

	)

199 
	#MLD_MINLEN
 24

	)

205 
	snd_rouãr_sﬁicô
 {

206 
icmp6_hdr
 
	mnd_rs_hdr
;

208 } 
	g__∑cked
;

210 
	#nd_rs_ty≥
 
nd_rs_hdr
.
icmp6_ty≥


	)

211 
	#nd_rs_code
 
nd_rs_hdr
.
icmp6_code


	)

212 
	#nd_rs_cksum
 
nd_rs_hdr
.
icmp6_cksum


	)

213 
	#nd_rs_ª£rved
 
nd_rs_hdr
.
icmp6_d©a32
[0]

	)

215 
	snd_rouãr_advît
 {

216 
icmp6_hdr
 
	mnd_ø_hdr
;

217 
u_öt32_t
 
	mnd_ø_ªachabÀ
;

218 
u_öt32_t
 
	mnd_ø_ªå™smô
;

220 } 
	g__∑cked
;

222 
	#nd_ø_ty≥
 
nd_ø_hdr
.
icmp6_ty≥


	)

223 
	#nd_ø_code
 
nd_ø_hdr
.
icmp6_code


	)

224 
	#nd_ø_cksum
 
nd_ø_hdr
.
icmp6_cksum


	)

225 
	#nd_ø_curh›limô
 
nd_ø_hdr
.
icmp6_d©a8
[0]

	)

226 
	#nd_ø_Êags_ª£rved
 
nd_ø_hdr
.
icmp6_d©a8
[1]

	)

227 
	#ND_RA_FLAG_MANAGED
 0x80

	)

228 
	#ND_RA_FLAG_OTHER
 0x40

	)

229 
	#ND_RA_FLAG_HOME_AGENT
 0x20

	)

234 
	#ND_RA_FLAG_RTPREF_MASK
 0x18

	)

236 
	#ND_RA_FLAG_RTPREF_HIGH
 0x08

	)

237 
	#ND_RA_FLAG_RTPREF_MEDIUM
 0x00

	)

238 
	#ND_RA_FLAG_RTPREF_LOW
 0x18

	)

239 
	#ND_RA_FLAG_RTPREF_RSV
 0x10

	)

241 
	#nd_ø_rouãr_li„time
 
nd_ø_hdr
.
icmp6_d©a16
[1]

	)

243 
	snd_√ighb‹_sﬁicô
 {

244 
icmp6_hdr
 
	mnd_ns_hdr
;

245 
ö6_addr
 
	mnd_ns_èrgë
;

247 } 
	g__∑cked
;

249 
	#nd_ns_ty≥
 
nd_ns_hdr
.
icmp6_ty≥


	)

250 
	#nd_ns_code
 
nd_ns_hdr
.
icmp6_code


	)

251 
	#nd_ns_cksum
 
nd_ns_hdr
.
icmp6_cksum


	)

252 
	#nd_ns_ª£rved
 
nd_ns_hdr
.
icmp6_d©a32
[0]

	)

254 
	snd_√ighb‹_advît
 {

255 
icmp6_hdr
 
	mnd_«_hdr
;

256 
ö6_addr
 
	mnd_«_èrgë
;

258 } 
	g__∑cked
;

260 
	#nd_«_ty≥
 
nd_«_hdr
.
icmp6_ty≥


	)

261 
	#nd_«_code
 
nd_«_hdr
.
icmp6_code


	)

262 
	#nd_«_cksum
 
nd_«_hdr
.
icmp6_cksum


	)

263 
	#nd_«_Êags_ª£rved
 
nd_«_hdr
.
icmp6_d©a32
[0]

	)

264 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


265 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

266 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

267 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

269 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


270 
	#ND_NA_FLAG_ROUTER
 0x80

	)

271 
	#ND_NA_FLAG_SOLICITED
 0x40

	)

272 
	#ND_NA_FLAG_OVERRIDE
 0x20

	)

276 
	snd_ªdúe˘
 {

277 
icmp6_hdr
 
	mnd_rd_hdr
;

278 
ö6_addr
 
	mnd_rd_èrgë
;

279 
ö6_addr
 
	mnd_rd_d°
;

281 } 
	g__∑cked
;

283 
	#nd_rd_ty≥
 
nd_rd_hdr
.
icmp6_ty≥


	)

284 
	#nd_rd_code
 
nd_rd_hdr
.
icmp6_code


	)

285 
	#nd_rd_cksum
 
nd_rd_hdr
.
icmp6_cksum


	)

286 
	#nd_rd_ª£rved
 
nd_rd_hdr
.
icmp6_d©a32
[0]

	)

288 
	snd_›t_hdr
 {

289 
u_öt8_t
 
	mnd_›t_ty≥
;

290 
u_öt8_t
 
	mnd_›t_Àn
;

292 } 
	g__∑cked
;

294 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

295 
	#ND_OPT_TARGET_LINKADDR
 2

	)

296 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

297 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

298 
	#ND_OPT_MTU
 5

	)

299 
	#ND_OPT_ADVINTERVAL
 7

	)

300 
	#ND_OPT_HOMEAGENT_INFO
 8

	)

301 
	#ND_OPT_SOURCE_ADDRLIST
 9

	)

302 
	#ND_OPT_TARGET_ADDRLIST
 10

	)

303 
	#ND_OPT_RDNSS
 25

	)

305 
	#ND_OPT_ROUTE_INFO
 200

	)

307 
	#ND_OPT_MAP
 201

	)

309 
	snd_›t_rouã_öfo
 {

310 
u_öt8_t
 
	mnd_›t_πi_ty≥
;

311 
u_öt8_t
 
	mnd_›t_πi_Àn
;

312 
u_öt8_t
 
	mnd_›t_πi_¥efixÀn
;

313 
u_öt8_t
 
	mnd_›t_πi_Êags
;

314 
u_öt32_t
 
	mnd_›t_πi_li„time
;

318 
	snd_›t_¥efix_öfo
 {

319 
u_öt8_t
 
	mnd_›t_pi_ty≥
;

320 
u_öt8_t
 
	mnd_›t_pi_Àn
;

321 
u_öt8_t
 
	mnd_›t_pi_¥efix_Àn
;

322 
u_öt8_t
 
	mnd_›t_pi_Êags_ª£rved
;

323 
u_öt32_t
 
	mnd_›t_pi_vÆid_time
;

324 
u_öt32_t
 
	mnd_›t_pi_¥e„ºed_time
;

325 
u_öt32_t
 
	mnd_›t_pi_ª£rved2
;

326 
ö6_addr
 
	mnd_›t_pi_¥efix
;

327 } 
	g__∑cked
;

329 
	#ND_OPT_PI_FLAG_ONLINK
 0x80

	)

330 
	#ND_OPT_PI_FLAG_AUTO
 0x40

	)

332 
	snd_›t_rd_hdr
 {

333 
u_öt8_t
 
	mnd_›t_rh_ty≥
;

334 
u_öt8_t
 
	mnd_›t_rh_Àn
;

335 
u_öt16_t
 
	mnd_›t_rh_ª£rved1
;

336 
u_öt32_t
 
	mnd_›t_rh_ª£rved2
;

338 } 
	g__∑cked
;

340 
	snd_›t_mtu
 {

341 
u_öt8_t
 
	mnd_›t_mtu_ty≥
;

342 
u_öt8_t
 
	mnd_›t_mtu_Àn
;

343 
u_öt16_t
 
	mnd_›t_mtu_ª£rved
;

344 
u_öt32_t
 
	mnd_›t_mtu_mtu
;

345 } 
	g__∑cked
;

347 
	snd_›t_rdnss
 {

348 
u_öt8_t
 
	mnd_›t_rdnss_ty≥
;

349 
u_öt8_t
 
	mnd_›t_rdnss_Àn
;

350 
u_öt16_t
 
	mnd_›t_rdnss_ª£rved
;

351 
u_öt32_t
 
	mnd_›t_rdnss_li„time
;

353 } 
	g__∑cked
;

359 
	sicmp6_«mñookup
 {

360 
icmp6_hdr
 
	micmp6_∆_hdr
;

361 
u_öt8_t
 
	micmp6_∆_n⁄˚
[8];

362 
öt32_t
 
	micmp6_∆_âl
;

364 
u_öt8_t
 
	micmp6_∆_Àn
;

365 
u_öt8_t
 
	micmp6_∆_«me
[3];

368 } 
	g__∑cked
;

373 
	sicmp6_nodeöfo
 {

374 
icmp6_hdr
 
	micmp6_ni_hdr
;

375 
u_öt8_t
 
	micmp6_ni_n⁄˚
[8];

377 } 
	g__∑cked
;

379 
	#ni_ty≥
 
icmp6_ni_hdr
.
icmp6_ty≥


	)

380 
	#ni_code
 
icmp6_ni_hdr
.
icmp6_code


	)

381 
	#ni_cksum
 
icmp6_ni_hdr
.
icmp6_cksum


	)

382 
	#ni_qty≥
 
icmp6_ni_hdr
.
icmp6_d©a16
[0]

	)

383 
	#ni_Êags
 
icmp6_ni_hdr
.
icmp6_d©a16
[1]

	)

385 
	#NI_QTYPE_NOOP
 0

	)

386 
	#NI_QTYPE_SUPTYPES
 1

	)

387 
	#NI_QTYPE_FQDN
 2

	)

388 
	#NI_QTYPE_DNSNAME
 2

	)

389 
	#NI_QTYPE_NODEADDR
 3

	)

390 
	#NI_QTYPE_IPV4ADDR
 4

	)

392 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


393 
	#NI_SUPTYPE_FLAG_COMPRESS
 0x1

	)

394 
	#NI_FQDN_FLAG_VALIDTTL
 0x1

	)

395 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


396 
	#NI_SUPTYPE_FLAG_COMPRESS
 0x0100

	)

397 
	#NI_FQDN_FLAG_VALIDTTL
 0x0100

	)

400 #ifde‡
NAME_LOOKUPS_04


401 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


402 
	#NI_NODEADDR_FLAG_LINKLOCAL
 0x1

	)

403 
	#NI_NODEADDR_FLAG_SITELOCAL
 0x2

	)

404 
	#NI_NODEADDR_FLAG_GLOBAL
 0x4

	)

405 
	#NI_NODEADDR_FLAG_ALL
 0x8

	)

406 
	#NI_NODEADDR_FLAG_TRUNCATE
 0x10

	)

407 
	#NI_NODEADDR_FLAG_ANYCAST
 0x20

	)

408 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


409 
	#NI_NODEADDR_FLAG_LINKLOCAL
 0x0100

	)

410 
	#NI_NODEADDR_FLAG_SITELOCAL
 0x0200

	)

411 
	#NI_NODEADDR_FLAG_GLOBAL
 0x0400

	)

412 
	#NI_NODEADDR_FLAG_ALL
 0x0800

	)

413 
	#NI_NODEADDR_FLAG_TRUNCATE
 0x1000

	)

414 
	#NI_NODEADDR_FLAG_ANYCAST
 0x2000

	)

417 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


418 
	#NI_NODEADDR_FLAG_TRUNCATE
 0x1

	)

419 
	#NI_NODEADDR_FLAG_ALL
 0x2

	)

420 
	#NI_NODEADDR_FLAG_COMPAT
 0x4

	)

421 
	#NI_NODEADDR_FLAG_LINKLOCAL
 0x8

	)

422 
	#NI_NODEADDR_FLAG_SITELOCAL
 0x10

	)

423 
	#NI_NODEADDR_FLAG_GLOBAL
 0x20

	)

424 
	#NI_NODEADDR_FLAG_ANYCAST
 0x40

	)

425 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


426 
	#NI_NODEADDR_FLAG_TRUNCATE
 0x0100

	)

427 
	#NI_NODEADDR_FLAG_ALL
 0x0200

	)

428 
	#NI_NODEADDR_FLAG_COMPAT
 0x0400

	)

429 
	#NI_NODEADDR_FLAG_LINKLOCAL
 0x0800

	)

430 
	#NI_NODEADDR_FLAG_SITELOCAL
 0x1000

	)

431 
	#NI_NODEADDR_FLAG_GLOBAL
 0x2000

	)

432 
	#NI_NODEADDR_FLAG_ANYCAST
 0x4000

	)

436 
	sni_ª∂y_fqdn
 {

437 
u_öt32_t
 
	mni_fqdn_âl
;

438 
u_öt8_t
 
	mni_fqdn_«mñí
;

439 
u_öt8_t
 
	mni_fqdn_«me
[3];

440 } 
	g__∑cked
;

445 
	sicmp6_rouãr_ªnum
 {

446 
icmp6_hdr
 
	mº_hdr
;

447 
u_öt8_t
 
	mº_£gnum
;

448 
u_öt8_t
 
	mº_Êags
;

449 
u_öt16_t
 
	mº_maxdñay
;

450 
u_öt32_t
 
	mº_ª£rved
;

451 } 
	g__∑cked
;

453 
	#ICMP6_RR_FLAGS_TEST
 0x80

	)

454 
	#ICMP6_RR_FLAGS_REQRESULT
 0x40

	)

455 
	#ICMP6_RR_FLAGS_FORCEAPPLY
 0x20

	)

456 
	#ICMP6_RR_FLAGS_SPECSITE
 0x10

	)

457 
	#ICMP6_RR_FLAGS_PREVDONE
 0x08

	)

459 
	#º_ty≥
 
º_hdr
.
icmp6_ty≥


	)

460 
	#º_code
 
º_hdr
.
icmp6_code


	)

461 
	#º_cksum
 
º_hdr
.
icmp6_cksum


	)

462 
	#º_£qnum
 
º_hdr
.
icmp6_d©a32
[0]

	)

464 
	sº_pco_m©ch
 {

465 
u_öt8_t
 
	mΩm_code
;

466 
u_öt8_t
 
	mΩm_Àn
;

467 
u_öt8_t
 
	mΩm_‹döÆ
;

468 
u_öt8_t
 
	mΩm_m©chÀn
;

469 
u_öt8_t
 
	mΩm_möÀn
;

470 
u_öt8_t
 
	mΩm_maxÀn
;

471 
u_öt16_t
 
	mΩm_ª£rved
;

472 
ö6_addr
 
	mΩm_¥efix
;

473 } 
	g__∑cked
;

475 
	#RPM_PCO_ADD
 1

	)

476 
	#RPM_PCO_CHANGE
 2

	)

477 
	#RPM_PCO_SETGLOBAL
 3

	)

478 
	#RPM_PCO_MAX
 4

	)

480 
	sº_pco_u£
 {

481 
u_öt8_t
 
	mΩu_u£Àn
;

482 
u_öt8_t
 
	mΩu_kì∂í
;

483 
u_öt8_t
 
	mΩu_ømask
;

484 
u_öt8_t
 
	mΩu_øÊags
;

485 
u_öt32_t
 
	mΩu_v…ime
;

486 
u_öt32_t
 
	mΩu_∂time
;

487 
u_öt32_t
 
	mΩu_Êags
;

488 
ö6_addr
 
	mΩu_¥efix
;

489 } 
	g__∑cked
;

490 
	#ICMP6_RR_PCOUSE_RAFLAGS_ONLINK
 0x80

	)

491 
	#ICMP6_RR_PCOUSE_RAFLAGS_AUTO
 0x40

	)

493 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


494 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80000000

	)

495 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40000000

	)

496 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


497 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80

	)

498 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40

	)

501 
	sº_ªsu…
 {

502 
u_öt16_t
 
	mºr_Êags
;

503 
u_öt8_t
 
	mºr_‹döÆ
;

504 
u_öt8_t
 
	mºr_m©chedÀn
;

505 
u_öt32_t
 
	mºr_ifid
;

506 
ö6_addr
 
	mºr_¥efix
;

507 } 
	g__∑cked
;

508 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


509 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0002

	)

510 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0001

	)

511 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


512 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0200

	)

513 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0100

	)

520 
	sicmp6_fûãr
 {

521 
u_öt32_t
 
	micmp6_fût
[8];

524 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

525 ()
	`mem£t
(
fûãΩ
, 0xff, (
icmp6_fûãr
))

	)

526 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

527 ()
	`mem£t
(
fûãΩ
, 0x00, (
icmp6_fûãr
))

	)

528 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

529 (((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë|(1 << (—y≥Ë& 31)))

	)

530 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

531 (((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë&~(1 << (—y≥Ë& 31)))

	)

532 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

533 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë!0)

	)

534 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

535 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë=0)

	)

546 
	#ICMP6_STAT_ERROR
 0

	)

547 
	#ICMP6_STAT_CANTERROR
 1

	)

548 
	#ICMP6_STAT_TOOFREQ
 2

	)

549 
	#ICMP6_STAT_OUTHIST
 3

	)

551 
	#ICMP6_STAT_BADCODE
 259

	)

552 
	#ICMP6_STAT_TOOSHORT
 260

	)

553 
	#ICMP6_STAT_CHECKSUM
 261

	)

554 
	#ICMP6_STAT_BADLEN
 262

	)

559 
	#ICMP6_STAT_REFLECT
 263

	)

560 
	#ICMP6_STAT_INHIST
 264

	)

562 
	#ICMP6_STAT_ND_TOOMANYOPT
 520

	)

563 
	#ICMP6_STAT_OUTERRHIST
 521

	)

565 
	#ICMP6_STAT_PMTUCHG
 534

	)

566 
	#ICMP6_STAT_ND_BADOPT
 535

	)

567 
	#ICMP6_STAT_BADNS
 536

	)

568 
	#ICMP6_STAT_BADNA
 537

	)

569 
	#ICMP6_STAT_BADRS
 538

	)

570 
	#ICMP6_STAT_BADRA
 539

	)

571 
	#ICMP6_STAT_BADREDIRECT
 540

	)

573 
	#ICMP6_NSTATS
 541

	)

575 
	#ICMP6_ERRSTAT_DST_UNREACH_NOROUTE
 0

	)

576 
	#ICMP6_ERRSTAT_DST_UNREACH_ADMIN
 1

	)

577 
	#ICMP6_ERRSTAT_DST_UNREACH_BEYONDSCOPE
 2

	)

578 
	#ICMP6_ERRSTAT_DST_UNREACH_ADDR
 3

	)

579 
	#ICMP6_ERRSTAT_DST_UNREACH_NOPORT
 4

	)

580 
	#ICMP6_ERRSTAT_PACKET_TOO_BIG
 5

	)

581 
	#ICMP6_ERRSTAT_TIME_EXCEED_TRANSIT
 6

	)

582 
	#ICMP6_ERRSTAT_TIME_EXCEED_REASSEMBLY
 7

	)

583 
	#ICMP6_ERRSTAT_PARAMPROB_HEADER
 8

	)

584 
	#ICMP6_ERRSTAT_PARAMPROB_NEXTHEADER
 9

	)

585 
	#ICMP6_ERRSTAT_PARAMPROB_OPTION
 10

	)

586 
	#ICMP6_ERRSTAT_REDIRECT
 11

	)

587 
	#ICMP6_ERRSTAT_UNKNOWN
 12

	)

592 
	#ICMPV6CTL_STATS
 1

	)

593 
	#ICMPV6CTL_REDIRACCEPT
 2

	)

594 
	#ICMPV6CTL_REDIRTIMEOUT
 3

	)

596 
	#ICMPV6CTL_ERRRATELIMIT
 5

	)

598 
	#ICMPV6CTL_ND6_PRUNE
 6

	)

599 
	#ICMPV6CTL_ND6_DELAY
 8

	)

600 
	#ICMPV6CTL_ND6_UMAXTRIES
 9

	)

601 
	#ICMPV6CTL_ND6_MMAXTRIES
 10

	)

602 
	#ICMPV6CTL_ND6_USELOOPBACK
 11

	)

604 
	#ICMPV6CTL_NODEINFO
 13

	)

605 
	#ICMPV6CTL_ERRPPSLIMIT
 14

	)

606 
	#ICMPV6CTL_ND6_MAXNUDHINT
 15

	)

607 
	#ICMPV6CTL_MTUDISC_HIWAT
 16

	)

608 
	#ICMPV6CTL_MTUDISC_LOWAT
 17

	)

609 
	#ICMPV6CTL_ND6_DEBUG
 18

	)

610 
	#ICMPV6CTL_ND6_DRLIST
 19

	)

611 
	#ICMPV6CTL_ND6_PRLIST
 20

	)

612 
	#ICMPV6CTL_ND6_MAXQLEN
 24

	)

613 
	#ICMPV6CTL_MAXID
 25

	)

615 
	#ICMPV6CTL_NAMES
 { \

618 { "ªdúac˚±", 
CTLTYPE_INT
 }, \

619 { "ªdútimeout", 
CTLTYPE_INT
 }, \

622 { "nd6_¥u√", 
CTLTYPE_INT
 }, \

624 { "nd6_dñay", 
CTLTYPE_INT
 }, \

625 { "nd6_umaxåõs", 
CTLTYPE_INT
 }, \

626 { "nd6_mmaxåõs", 
CTLTYPE_INT
 }, \

627 { "nd6_u£lo›back", 
CTLTYPE_INT
 }, \

629 { "nodeöfo", 
CTLTYPE_INT
 }, \

630 { "îΩp¶imô", 
CTLTYPE_INT
 }, \

631 { "nd6_maxnudhöt", 
CTLTYPE_INT
 }, \

632 { "mtudisc_hiw©", 
CTLTYPE_INT
 }, \

633 { "mtudisc_low©", 
CTLTYPE_INT
 }, \

634 { "nd6_debug", 
CTLTYPE_INT
 }, \

640 { "nd6_maxqueuñí", 
CTLTYPE_INT
 }, \

641 }

	)

643 
	#RTF_PROBEMTU
 
RTF_PROTO1


	)

645 #ifde‡
_KERNEL


646 
	gπíåy
;

647 
	gπtimî
;

648 
	gö6_mu…i
;

650 
icmp6_öô
();

651 
icmp6_∑ømîr‹
(
mbuf
 *, );

652 
icmp6_îr‹
(
mbuf
 *, , , );

653 
icmp6_îr‹2
(
mbuf
 *, , , , 
i‚ë
 *);

654 
icmp6_öput
(
mbuf
 **, *, );

655 
icmp6_Á°timo
();

656 
icmp6_ªÊe˘
(
mbuf
 *, 
size_t
);

657 
icmp6_¥ï¨e
(
mbuf
 *);

658 
icmp6_ªdúe˘_öput
(
mbuf
 *, );

659 
icmp6_ªdúe˘_ouçut
(
mbuf
 *, 
πíåy
 *);

660 
icmp6_sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

662 
icmp6_°©öc
(
u_öt
);

664 
	gù6˘Õ¨am
;

665 
icmp6_mtudisc_upd©e
(
ù6˘Õ¨am
 *, );

666 
icmp6_mtudisc_ˇŒback_ªgi°î
((*)(
ö6_addr
 *));

669 
	#icmp6_if°©_öc
(
iÂ
, 
èg
) \

671 i‡(
iÂ
) \

672 ((
ö6_i„xåa
 *)((
iÂ
)->
if_afd©a
[
AF_INET6
]))->
icmp6_if°©
->
èg
++; \

673 
	}
}  0)

	)

675 
	#icmp6_ifout°©_öc
(
iÂ
, 
ty≥
, 
code
) \

677 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_msg
); \

678 
ty≥
) { \

679 
ICMP6_DST_UNREACH
: \

680 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_d°uƒóch
); \

681 i‡(
code
 =
ICMP6_DST_UNREACH_ADMIN
) \

682 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_admö¥ohib
); \

684 
ICMP6_PACKET_TOO_BIG
: \

685 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_pkâoobig
); \

687 
ICMP6_TIME_EXCEEDED
: \

688 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_timìx˚ed
); \

690 
ICMP6_PARAM_PROB
: \

691 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_∑øm¥ob
); \

693 
ICMP6_ECHO_REQUEST
: \

694 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_echo
); \

696 
ICMP6_ECHO_REPLY
: \

697 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_ech‹ïly
); \

699 
MLD_LISTENER_QUERY
: \

700 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_mldquîy
); \

702 
MLD_LISTENER_REPORT
: \

703 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_mldªp‹t
); \

705 
MLD_LISTENER_DONE
: \

706 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_mldd⁄e
); \

708 
ND_ROUTER_SOLICIT
: \

709 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_rouãrsﬁicô
); \

711 
ND_ROUTER_ADVERT
: \

712 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_rouãødvît
); \

714 
ND_NEIGHBOR_SOLICIT
: \

715 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_√ighb‹sﬁicô
); \

717 
ND_NEIGHBOR_ADVERT
: \

718 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_√ighb‹advît
); \

720 
ND_REDIRECT
: \

721 
	`icmp6_if°©_öc
(
iÂ
, 
ifs6_out_ªdúe˘
); \

724 }  0)

	)

726 
icmp6_ªdúac˚±
;

727 
icmp6_ªdútimeout
;

	@netinet/if_ether.h

28 
	~<löux/if_ëhî.h
>

29 
	~<löux/if_¨p.h
>

30 #i‚de‡
ETHER_ADDR_LEN


31 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

32 
	~<√t/ëhîty≥s.h
>

	@netinet/in.h

28 #i‚de‡
_NETINET_IN_H_


29 
	#_NETINET_IN_H_


	)

31 
	~<ídün.h
>

32 
	~<löux/sockë.h
>

33 
	~<löux/ö.h
>

34 
	~<löux/ö6.h
>

35 
	~<löux/ùv6.h
>

36 
	~<√töë/ö6.h
>

38 
	g__BEGIN_DECLS


40 
	#IPPORT_RESERVED
 1024

	)

42 
	#INET_ADDRSTRLEN
 16

	)

44 
bödªsvp‹t
 (
sd
, 
sockaddr_ö
 *
sö
);

46 c⁄° 
ö6_addr
 
	gö6addr_™y
 = 
IN6ADDR_ANY_INIT
;

47 c⁄° 
ö6_addr
 
	gö6addr_lo›back
 = 
IN6ADDR_LOOPBACK_INIT
;

49 
	g__END_DECLS


	@netinet/in6.h

28 #i‚de‡
_NETINET_IN6_H


29 
	#_NETINET_IN6_H


	)

31 
	~<löux/ö6.h
>

33 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

34 ((*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

35 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

36 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

37 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=0))

	)

39 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

40 ((*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

41 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

42 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

43 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=
	`¡ohl
(1)))

	)

45 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

46 ((*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

47 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

48 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

49 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]) != 0) && \

50 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë!
	`¡ohl
(1)))

	)

52 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

53 ((*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

54 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

55 (*(c⁄° 
uöt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]Ë=
	`¡ohl
(0x0000ffff)))

	)

57 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

58 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0x80))

	)

60 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

61 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0xc0))

	)

64 
	#IN6_IS_ADDR_ULA
(
a
) \

65 (((
a
)->
s6_addr
[0] & 0x„Ë=0xfc)

	)

67 
	#IN6_IS_ADDR_MULTICAST
(
a
) \

68 (((
__c⁄°
 
uöt8_t
 *Ë(
a
))[0] =0xff)

	)

71 
	#IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

72 
	#IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

73 
	#IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

74 
	#IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

75 
	#IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

76 
	#IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

78 
	#IPV6_ADDR_MC_SCOPE
(
a
) \

79 ((
a
)->
s6_addr
[1] & 0x0f)

	)

81 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

82 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

83 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_NODELOCAL
))

	)

84 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

85 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

86 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

87 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

88 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

89 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_SITELOCAL
))

	)

90 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

91 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

92 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

93 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

94 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

95 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_GLOBAL
))

	)

97 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

98 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

100 
	#INET6_ADDRSTRLEN
 46

	)

102 
	#IPV6_JOIN_GROUP
 
IPV6_ADD_MEMBERSHIP


	)

103 
	#IPV6_LEAVE_GROUP
 
IPV6_DROP_MEMBERSHIP


	)

105 
	#IN6ADDR_ANY_INIT
 {{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}}

	)

107 
	#ùv6mr_öãrÁ˚
 
ùv6mr_ifödex


	)

	@netinet/in_systm.h

34 #i‚de‡
_NETINET_IN_SYSTM_H_


35 
	#_NETINET_IN_SYSTM_H_


	)

50 
u_öt16_t
 
	tn_sh‹t
;

51 
u_öt32_t
 
	tn_l⁄g
;

53 
u_öt32_t
 
	tn_time
;

55 #ifde‡
_KERNEL


56 
n_time
 
ùtime
 ();

	@netinet/ip.h

35 #i‚de‡
_NETINET_IP_H_


36 
	#_NETINET_IP_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<ídün.h
>

41 
	~<√töë/ö.h
>

42 
	~<√töë/ö_sy°m.h
>

44 
	g__BEGIN_DECLS


50 
	#IPVERSION
 4

	)

55 
	sù
 {

56 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


57 
u_öt32_t
 
	mù_hl
:4,

58 
	mù_v
:4;

60 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


61 
u_öt32_t
 
	mù_v
:4,

62 
	mù_hl
:4;

64 
u_öt8_t
 
	mù_tos
;

65 
u_öt16_t
 
	mù_Àn
;

66 
u_öt16_t
 
	mù_id
;

67 
u_öt16_t
 
	mù_off
;

68 
	#IP_RF
 0x8000

	)

69 
	#IP_DF
 0x4000

	)

70 
	#IP_MF
 0x2000

	)

71 
	#IP_OFFMASK
 0x1ff‡

	)

72 
u_öt8_t
 
	mù_âl
;

73 
u_öt8_t
 
	mù_p
;

74 
u_öt16_t
 
	mù_sum
;

75 
ö_addr
 
	mù_§c
, 
	mù_d°
;

78 
	#IP_MAXPACKET
 65535

	)

83 
	#IPTOS_LOWDELAY
 0x10

	)

84 
	#IPTOS_THROUGHPUT
 0x08

	)

85 
	#IPTOS_RELIABILITY
 0x04

	)

86 
	#IPTOS_MINCOST
 0x02

	)

89 
	#IPTOS_CE
 0x01

	)

90 
	#IPTOS_ECT
 0x02

	)

96 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

97 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

98 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

99 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

100 
	#IPTOS_PREC_FLASH
 0x60

	)

101 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

102 
	#IPTOS_PREC_PRIORITY
 0x20

	)

103 
	#IPTOS_PREC_ROUTINE
 0x00

	)

109 
	#IPTOS_ECN_NOTECT
 0x00

	)

110 
	#IPTOS_ECN_ECT1
 0x01

	)

111 
	#IPTOS_ECN_ECT0
 0x02

	)

112 
	#IPTOS_ECN_CE
 0x03

	)

113 
	#IPTOS_ECN_MASK
 0x03

	)

118 
	#IPOPT_COPIED
(
o
Ë((o)&0x80)

	)

119 
	#IPOPT_CLASS
(
o
Ë((o)&0x60)

	)

120 
	#IPOPT_NUMBER
(
o
Ë((o)&0x1f)

	)

122 
	#IPOPT_CONTROL
 0x00

	)

123 
	#IPOPT_RESERVED1
 0x20

	)

124 
	#IPOPT_DEBMEAS
 0x40

	)

125 
	#IPOPT_RESERVED2
 0x60

	)

127 
	#IPOPT_EOL
 0

	)

128 
	#IPOPT_NOP
 1

	)

130 
	#IPOPT_RR
 7

	)

131 
	#IPOPT_TS
 68

	)

132 
	#IPOPT_SECURITY
 130

	)

133 
	#IPOPT_LSRR
 131

	)

134 
	#IPOPT_SATID
 136

	)

135 
	#IPOPT_SSRR
 137

	)

140 
	#IPOPT_OPTVAL
 0

	)

141 
	#IPOPT_OLEN
 1

	)

142 
	#IPOPT_OFFSET
 2

	)

143 
	#IPOPT_MINOFF
 4

	)

148 
	sù_time°amp
 {

149 
u_öt8_t
 
	mùt_code
;

150 
u_öt8_t
 
	mùt_Àn
;

151 
u_öt8_t
 
	mùt_±r
;

152 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


153 
u_öt32_t
 
	mùt_Êg
:4,

154 
	mùt_oÊw
:4;

156 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


157 
u_öt32_t
 
	mùt_oÊw
:4,

158 
	mùt_Êg
:4;

160 
	uùt_time°amp
 {

161 
n_time
 
	mùt_time
[1];

162 
	sùt_è
 {

163 
ö_addr
 
	mùt_addr
;

164 
n_time
 
	mùt_time
;

165 } 
	mùt_è
[1];

166 } 
	mùt_time°amp
;

170 
	#IPOPT_TS_TSONLY
 0

	)

171 
	#IPOPT_TS_TSANDADDR
 1

	)

172 
	#IPOPT_TS_PRESPEC
 3

	)

175 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

176 
	#IPOPT_SECUR_CONFID
 0xf135

	)

177 
	#IPOPT_SECUR_EFTO
 0x789a

	)

178 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

179 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

180 
	#IPOPT_SECUR_SECRET
 0xd788

	)

181 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

186 
	#MAXTTL
 255

	)

187 
	#IPDEFTTL
 64

	)

188 
	#IPFRAGTTL
 60

	)

189 
	#IPTTLDEC
 1

	)

191 
	#IP_MSS
 576

	)

198 
	sùp£udo
 {

199 
ö_addr
 
	mùp£udo_§c
;

200 
ö_addr
 
	mùp£udo_d°
;

201 
u_öt8_t
 
	mùp£udo_∑d
;

202 
u_öt8_t
 
	mùp£udo_p
;

203 
u_öt16_t
 
	mùp£udo_Àn
;

209 
	#IPOPT_OPTVAL
 0

	)

210 
	#IPOPT_OLEN
 1

	)

211 
	#IPOPT_OFFSET
 2

	)

212 
	#IPOPT_MINOFF
 4

	)

213 
	#MAX_IPOPTLEN
 40

	)

215 
	#IPOPT_COPY
 0x80

	)

216 
	#IPOPT_CLASS_MASK
 0x60

	)

217 
	#IPOPT_NUMBER_MASK
 0x1f

	)

219 
	#IPOPT_CONTROL
 0x00

	)

220 
	#IPOPT_RESERVED1
 0x20

	)

221 
	#IPOPT_MEASUREMENT
 0x40

	)

222 
	#IPOPT_RESERVED2
 0x60

	)

224 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

225 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

226 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

227 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

228 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

229 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

231 
	sùhdr
 {

232 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

233 
uöt8_t
 
	mihl
 :4,

234 
	mvîsi⁄
:4;

235 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

236 
uöt8_t
 
	mvîsi⁄
:4,

237 
	mihl
 :4;

241 
uöt8_t
 
	mtos
;

242 
uöt16_t
 
	mtŸ_Àn
;

243 
uöt16_t
 
	mid
;

244 
uöt16_t
 
	m‰ag_off
;

245 
uöt8_t
 
	mâl
;

246 
uöt8_t
 
	m¥Ÿocﬁ
;

247 
uöt16_t
 
	mcheck
;

248 
öt32_t
 
	mßddr
;

249 
öt32_t
 
	mdaddr
;

252 
	sù_auth_hdr
 {

253 
uöt8_t
 
	m√xthdr
;

254 
uöt8_t
 
	mhdæí
;

255 
uöt16_t
 
	mª£rved
;

256 
uöt32_t
 
	m•i
;

257 
uöt32_t
 
	m£q_no
;

258 
uöt8_t
 
	mauth_d©a
[0];

261 
	sù_e•_hdr
 {

262 
uöt32_t
 
	m•i
;

263 
uöt32_t
 
	m£q_no
;

264 
uöt8_t
 
	míc_d©a
[0];

267 
	sù_comp_hdr
 {

268 
uöt8_t
 
	m√xthdr
;

269 
uöt8_t
 
	mÊags
;

270 
uöt16_t
 
	m˝i
;

273 
	g__END_DECLS


	@netinet/ip6.h

64 #i‚de‡
_NETINET_IP6_H_


65 
	#_NETINET_IP6_H_


	)

72 
	sù6_hdr
 {

74 
	sù6_hdr˘l
 {

75 
u_öt32_t
 
	mù6_un1_Êow
;

76 
u_öt16_t
 
	mù6_un1_∂í
;

77 
u_öt8_t
 
	mù6_un1_nxt
;

78 
u_öt8_t
 
	mù6_un1_hlim
;

79 } 
	mù6_un1
;

80 
u_öt8_t
 
	mù6_un2_vfc
;

81 } 
	mù6_˘lun
;

82 
ö6_addr
 
	mù6_§c
;

83 
ö6_addr
 
	mù6_d°
;

84 } 
	g__∑cked
;

86 
	#ù6_vfc
 
ù6_˘lun
.
ù6_un2_vfc


	)

87 
	#ù6_Êow
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_Êow


	)

88 
	#ù6_∂í
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_∂í


	)

89 
	#ù6_nxt
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_nxt


	)

90 
	#ù6_hlim
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

91 
	#ù6_h›s
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

93 
	#IPV6_VERSION
 0x60

	)

94 
	#IPV6_VERSION_MASK
 0xf0

	)

96 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


97 
	#IPV6_FLOWINFO_MASK
 0x0ffffff‡

	)

98 
	#IPV6_FLOWLABEL_MASK
 0x000ffff‡

	)

100 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


101 
	#IPV6_FLOWINFO_MASK
 0xffffff0‡

	)

102 
	#IPV6_FLOWLABEL_MASK
 0xffff0f00

	)

107 
	#IP6TOS_CE
 0x01

	)

108 
	#IP6TOS_ECT
 0x02

	)

111 #ifde‡
_KERNEL


116 
	sù6_hdr_p£udo
 {

117 
ö6_addr
 
	mù6ph_§c
;

118 
ö6_addr
 
	mù6ph_d°
;

119 
u_öt32_t
 
	mù6ph_Àn
;

120 
u_öt8_t
 
	mù6ph_zîo
[3];

121 
u_öt8_t
 
	mù6ph_nxt
;

122 } 
	g__∑cked
;

129 
	sù6_ext
 {

130 
u_öt8_t
 
	mù6e_nxt
;

131 
u_öt8_t
 
	mù6e_Àn
;

132 } 
	g__∑cked
;

136 
	sù6_hbh
 {

137 
u_öt8_t
 
	mù6h_nxt
;

138 
u_öt8_t
 
	mù6h_Àn
;

140 } 
	g__∑cked
;

144 
	sù6_de°
 {

145 
u_öt8_t
 
	mù6d_nxt
;

146 
u_öt8_t
 
	mù6d_Àn
;

148 } 
	g__∑cked
;

151 
	#IP6OPT_PAD1
 0x00

	)

152 
	#IP6OPT_PADN
 0x01

	)

153 
	#IP6OPT_JUMBO
 0xC2

	)

154 
	#IP6OPT_NSAP_ADDR
 0xC3

	)

155 
	#IP6OPT_TUNNEL_LIMIT
 0x04

	)

156 
	#IP6OPT_RTALERT
 0x05

	)

157 
	#IP6OPT_ROUTER_ALERT
 0x05

	)

159 
	#IP6OPT_RTALERT_LEN
 4

	)

160 
	#IP6OPT_RTALERT_MLD
 0

	)

161 
	#IP6OPT_RTALERT_RSVP
 1

	)

162 
	#IP6OPT_RTALERT_ACTNET
 2

	)

163 
	#IP6OPT_MINLEN
 2

	)

165 
	#IP6OPT_TYPE
(
o
Ë((oË& 0xC0)

	)

166 
	#IP6OPT_TYPE_SKIP
 0x00

	)

167 
	#IP6OPT_TYPE_DISCARD
 0x40

	)

168 
	#IP6OPT_TYPE_FORCEICMP
 0x80

	)

169 
	#IP6OPT_TYPE_ICMP
 0xC0

	)

171 
	#IP6OPT_MUTABLE
 0x20

	)

174 
	sù6_›t
 {

175 
u_öt8_t
 
	mù6o_ty≥
;

176 
u_öt8_t
 
	mù6o_Àn
;

177 } 
	g__∑cked
;

180 
	sù6_›t_jumbo
 {

181 
u_öt8_t
 
	mù6oj_ty≥
;

182 
u_öt8_t
 
	mù6oj_Àn
;

183 
u_öt8_t
 
	mù6oj_jumbo_Àn
[4];

184 } 
	g__∑cked
;

185 
	#IP6OPT_JUMBO_LEN
 6

	)

188 
	sù6_›t_nßp
 {

189 
u_öt8_t
 
	mù6⁄_ty≥
;

190 
u_öt8_t
 
	mù6⁄_Àn
;

191 
u_öt8_t
 
	mù6⁄_§c_nßp_Àn
;

192 
u_öt8_t
 
	mù6⁄_d°_nßp_Àn
;

195 } 
	g__∑cked
;

198 
	sù6_›t_tu¬ñ
 {

199 
u_öt8_t
 
	mù6Ÿ_ty≥
;

200 
u_öt8_t
 
	mù6Ÿ_Àn
;

201 
u_öt8_t
 
	mù6Ÿ_íˇp_limô
;

202 } 
	g__∑cked
;

205 
	sù6_›t_rouãr
 {

206 
u_öt8_t
 
	mù6‹_ty≥
;

207 
u_öt8_t
 
	mù6‹_Àn
;

208 
u_öt8_t
 
	mù6‹_vÆue
[2];

209 } 
	g__∑cked
;

211 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


212 
	#IP6_ALERT_MLD
 0x0000

	)

213 
	#IP6_ALERT_RSVP
 0x0001

	)

214 
	#IP6_ALERT_AN
 0x0002

	)

216 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


217 
	#IP6_ALERT_MLD
 0x0000

	)

218 
	#IP6_ALERT_RSVP
 0x0100

	)

219 
	#IP6_ALERT_AN
 0x0200

	)

224 
	sù6_πhdr
 {

225 
u_öt8_t
 
	mù6r_nxt
;

226 
u_öt8_t
 
	mù6r_Àn
;

227 
u_öt8_t
 
	mù6r_ty≥
;

228 
u_öt8_t
 
	mù6r_£gÀ·
;

230 } 
	g__∑cked
;

233 
	sù6_πhdr0
 {

234 
u_öt8_t
 
	mù6r0_nxt
;

235 
u_öt8_t
 
	mù6r0_Àn
;

236 
u_öt8_t
 
	mù6r0_ty≥
;

237 
u_öt8_t
 
	mù6r0_£gÀ·
;

238 
u_öt32_t
 
	mù6r0_ª£rved
;

239 } 
	g__∑cked
;

242 
	sù6_‰ag
 {

243 
u_öt8_t
 
	mù6f_nxt
;

244 
u_öt8_t
 
	mù6f_ª£rved
;

245 
u_öt16_t
 
	mù6f_ofÊg
;

246 
u_öt32_t
 
	mù6f_idít
;

247 } 
	g__∑cked
;

249 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


250 
	#IP6F_OFF_MASK
 0xfff8

	)

251 
	#IP6F_RESERVED_MASK
 0x0006

	)

252 
	#IP6F_MORE_FRAG
 0x0001

	)

254 
	#IP6F_OFF_MASK
 0xf8f‡

	)

255 
	#IP6F_RESERVED_MASK
 0x0600

	)

256 
	#IP6F_MORE_FRAG
 0x0100

	)

262 
	#IPV6_MAXHLIM
 255

	)

263 
	#IPV6_DEFHLIM
 64

	)

264 
	#IPV6_FRAGTTL
 120

	)

265 
	#IPV6_HLIMDEC
 1

	)

267 
	#IPV6_MMTU
 1280

	)

268 
	#IPV6_MAXPACKET
 65535

	)

270 #ifde‡
_KERNEL


281 
	#IP6_EXTHDR_GET
(
vÆ
, 
typ
, 
m
, 
off
, 
Àn
) \

283 
mbuf
 *
_t
; \

284 
_tmp
; \

285 i‡((
m
)->
m_Àn
 >(
off
Ë+ (
Àn
)) \

286 (
vÆ
Ë(
typ
)(
	`mtod
((
m
), *Ë+ (
off
)); \

288 
_t
 = 
	`m_puŒdown
((
m
), (
off
), (
Àn
), &
_tmp
); \

289 i‡(
_t
) { \

290 i‡(
_t
->
m_Àn
 < 
_tmp
 + (
Àn
)) \

291 
	`∑nic
("m_pulldown malfunction"); \

292 (
vÆ
Ë(
typ
)(
	`mtod
(
_t
, *Ë+ 
_tmp
); \

294 (
vÆ
Ë(
typ
)
NULL
; \

295 (
m
Ë
NULL
; \

298 }  0)

	)

300 
	#IP6_EXTHDR_GET0
(
vÆ
, 
typ
, 
m
, 
off
, 
Àn
) \

302 
mbuf
 *
_t
; \

303 i‡((
off
Ë=0 && (
m
)->
m_Àn
 >
Àn
) \

304 (
vÆ
Ë(
typ
)
	`mtod
((
m
), *); \

306 
_t
 = 
	`m_puŒdown
((
m
), (
off
), (
Àn
), 
NULL
); \

307 i‡(
_t
) { \

308 i‡(
_t
->
m_Àn
 < (
Àn
)) \

309 
	`∑nic
("m_pulldown malfunction"); \

310 (
vÆ
Ë(
typ
)
	`mtod
(
_t
, *); \

312 (
vÆ
Ë(
typ
)
NULL
; \

313 (
m
Ë
NULL
; \

316 }  0)

	)

	@netinet/ip_icmp.h

35 #i‚de‡
_NETINET_IP_ICMP_H_


36 
	#_NETINET_IP_ICMP_H_


	)

38 
	~<√töë/ù.h
>

39 
	~<sys/cdefs.h
>

41 
__BEGIN_DECLS


58 
	sicmp_ø_addr
 {

59 
uöt32_t
 
	múa_addr
;

60 
uöt32_t
 
	múa_¥e„ªn˚
;

66 
	sicmp
 {

67 
uöt8_t
 
	micmp_ty≥
;

68 
uöt8_t
 
	micmp_code
;

69 
uöt16_t
 
	micmp_cksum
;

71 
uöt8_t
 
	mih_µå
;

72 
ö_addr
 
	mih_gwaddr
;

73 
	sih_id£q
 {

74 
uöt16_t
 
	micd_id
;

75 
uöt16_t
 
	micd_£q
;

76 } 
	mih_id£q
;

77 
öt32_t
 
	mih_void
;

80 
	sih_pmtu
 {

81 
uöt16_t
 
	mùm_void
;

82 
uöt16_t
 
	mùm_√xtmtu
;

83 } 
	mih_pmtu
;

85 
	sih_πødv
 {

86 
uöt8_t
 
	mút_num_addrs
;

87 
uöt8_t
 
	mút_w∑
;

88 
uöt16_t
 
	mút_li„time
;

89 } 
	mih_πødv
;

90 } 
	micmp_hun
;

91 
	#icmp_µå
 
icmp_hun
.
ih_µå


	)

92 
	#icmp_gwaddr
 
icmp_hun
.
ih_gwaddr


	)

93 
	#icmp_id
 
icmp_hun
.
ih_id£q
.
icd_id


	)

94 
	#icmp_£q
 
icmp_hun
.
ih_id£q
.
icd_£q


	)

95 
	#icmp_void
 
icmp_hun
.
ih_void


	)

96 
	#icmp_pmvoid
 
icmp_hun
.
ih_pmtu
.
ùm_void


	)

97 
	#icmp_√xtmtu
 
icmp_hun
.
ih_pmtu
.
ùm_√xtmtu


	)

98 
	#icmp_num_addrs
 
icmp_hun
.
ih_πødv
.
út_num_addrs


	)

99 
	#icmp_w∑
 
icmp_hun
.
ih_πødv
.
út_w∑


	)

100 
	#icmp_li„time
 
icmp_hun
.
ih_πødv
.
út_li„time


	)

102 
	sid_ts
 {

103 
uöt32_t
 
	môs_Ÿime
;

104 
uöt32_t
 
	môs_πime
;

105 
uöt32_t
 
	môs_âime
;

106 } 
	mid_ts
;

107 
	sid_ù
 {

108 
ù
 
	midi_ù
;

110 } 
	mid_ù
;

111 
uöt32_t
 
	mid_mask
;

112 
öt8_t
 
	mid_d©a
[1];

113 } 
	micmp_dun
;

114 
	#icmp_Ÿime
 
icmp_dun
.
id_ts
.
ôs_Ÿime


	)

115 
	#icmp_πime
 
icmp_dun
.
id_ts
.
ôs_πime


	)

116 
	#icmp_âime
 
icmp_dun
.
id_ts
.
ôs_âime


	)

117 
	#icmp_ù
 
icmp_dun
.
id_ù
.
idi_ù


	)

118 
	#icmp_mask
 
icmp_dun
.
id_mask


	)

119 
	#icmp_d©a
 
icmp_dun
.
id_d©a


	)

125 
	#ICMP_V6ADVLENMIN
 (8 + (
ù
Ë+ 40)

	)

126 
	#ICMP_V6ADVLEN
(
p
Ë(8 + (’)->
icmp_ù
.
ù_hl
 << 2Ë+ 40)

	)

136 
	#ICMP_MINLEN
 8

	)

137 
	#ICMP_TSLEN
 (8 + 3 *  (
n_time
)Ë

	)

138 
	#ICMP_MASKLEN
 12

	)

139 
	#ICMP_ADVLENMIN
 (8 +  (
ù
Ë+ 8Ë

	)

140 
	#ICMP_ADVLEN
(
p
Ë(8 + (’)->
icmp_ù
.
ù_hl
 << 2Ë+ 8)

	)

147 
	#ICMP_ECHOREPLY
 0

	)

148 
	#ICMP_UNREACH
 3

	)

149 
	#ICMP_UNREACH_NET
 0

	)

150 
	#ICMP_UNREACH_HOST
 1

	)

151 
	#ICMP_UNREACH_PROTOCOL
 2

	)

152 
	#ICMP_UNREACH_PORT
 3

	)

153 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

154 
	#ICMP_UNREACH_SRCFAIL
 5

	)

155 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

156 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

157 
	#ICMP_UNREACH_ISOLATED
 8

	)

158 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

159 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

160 
	#ICMP_UNREACH_TOSNET
 11

	)

161 
	#ICMP_UNREACH_TOSHOST
 12

	)

162 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

163 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

164 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

165 
	#ICMP_SOURCEQUENCH
 4

	)

166 
	#ICMP_REDIRECT
 5

	)

167 
	#ICMP_REDIRECT_NET
 0

	)

168 
	#ICMP_REDIRECT_HOST
 1

	)

169 
	#ICMP_REDIRECT_TOSNET
 2

	)

170 
	#ICMP_REDIRECT_TOSHOST
 3

	)

171 
	#ICMP_ALTHOSTADDR
 6

	)

172 
	#ICMP_ECHO
 8

	)

173 
	#ICMP_ROUTERADVERT
 9

	)

174 
	#ICMP_ROUTERADVERT_NORMAL
 0

	)

175 
	#ICMP_ROUTERADVERT_NOROUTE_COMMON
 16

	)

176 
	#ICMP_ROUTERSOLICIT
 10

	)

177 
	#ICMP_TIMXCEED
 11

	)

178 
	#ICMP_TIMXCEED_INTRANS
 0

	)

179 
	#ICMP_TIMXCEED_REASS
 1

	)

180 
	#ICMP_PARAMPROB
 12

	)

181 
	#ICMP_PARAMPROB_ERRATPTR
 0

	)

182 
	#ICMP_PARAMPROB_OPTABSENT
 1

	)

183 
	#ICMP_PARAMPROB_LENGTH
 2

	)

184 
	#ICMP_TSTAMP
 13

	)

185 
	#ICMP_TSTAMPREPLY
 14

	)

186 
	#ICMP_IREQ
 15

	)

187 
	#ICMP_IREQREPLY
 16

	)

188 
	#ICMP_MASKREQ
 17

	)

189 
	#ICMP_MASKREPLY
 18

	)

190 
	#ICMP_TRACEROUTE
 30

	)

191 
	#ICMP_DATACONVERR
 31

	)

192 
	#ICMP_MOBILE_REDIRECT
 32

	)

193 
	#ICMP_IPV6_WHEREAREYOU
 33

	)

194 
	#ICMP_IPV6_IAMHERE
 34

	)

195 
	#ICMP_MOBILE_REGREQUEST
 35

	)

196 
	#ICMP_MOBILE_REGREPLY
 36

	)

197 
	#ICMP_SKIP
 39

	)

198 
	#ICMP_PHOTURIS
 40

	)

199 
	#ICMP_PHOTURIS_UNKNOWN_INDEX
 1

	)

200 
	#ICMP_PHOTURIS_AUTH_FAILED
 2

	)

201 
	#ICMP_PHOTURIS_DECRYPT_FAILED
 3

	)

203 
	#ICMP_MAXTYPE
 40

	)

205 
	#ICMP_INFOTYPE
(
ty≥
) \

206 ((
ty≥
Ë=
ICMP_ECHOREPLY
 || (ty≥Ë=
ICMP_ECHO
 || \

207 (
ty≥
Ë=
ICMP_ROUTERADVERT
 || (ty≥Ë=
ICMP_ROUTERSOLICIT
 || \

208 (
ty≥
Ë=
ICMP_TSTAMP
 || (ty≥Ë=
ICMP_TSTAMPREPLY
 || \

209 (
ty≥
Ë=
ICMP_IREQ
 || (ty≥Ë=
ICMP_IREQREPLY
 || \

210 (
ty≥
Ë=
ICMP_MASKREQ
 || (ty≥Ë=
ICMP_MASKREPLY
)

	)

212 
	g__END_DECLS


	@netinet/tcp.h

28 #i‚de‡
_NETINET_TCP_H


29 
	#_NETINET_TCP_H


	)

31 
	~<ídün.h
>

32 
	~<löux/t˝.h
>

34 
__BEGIN_DECLS


37 
	mTCP_ESTABLISHED
 = 1,

38 
	mTCP_SYN_SENT
,

39 
	mTCP_SYN_RECV
,

40 
	mTCP_FIN_WAIT1
,

41 
	mTCP_FIN_WAIT2
,

42 
	mTCP_TIME_WAIT
,

43 
	mTCP_CLOSE
,

44 
	mTCP_CLOSE_WAIT
,

45 
	mTCP_LAST_ACK
,

46 
	mTCP_LISTEN
,

47 
	mTCP_CLOSING


50 
	g__END_DECLS


	@netinet/udp.h

28 #i‚de‡
_NETINET_UDP_H


29 
	#_NETINET_UDP_H


	)

35 #ifde‡
__FAVOR_BSD


37 
	sudphdr
 {

38 
u_öt16_t
 
	muh_•‹t
;

39 
u_öt16_t
 
	muh_dp‹t
;

40 
u_öt16_t
 
	muh_uÀn
;

41 
u_öt16_t
 
	muh_sum
;

46 
	sudphdr
 {

47 
__u16
 
	msour˚
;

48 
__u16
 
	mde°
;

49 
__u16
 
	mÀn
;

50 
__u16
 
	mcheck
;

	@netpacket/packet.h

1 
	~<löux/if_∑ckë.h
>

	@nsswitch.h

39 #i‚de‡
_NSSWITCH_H


40 
	#_NSSWITCH_H
 1

	)

42 
	~<sys/ty≥s.h
>

43 
	~<°d¨g.h
>

45 
	#NSS_MODULE_INTERFACE_VERSION
 0

	)

47 #i‚de‡
_PATH_NS_CONF


48 
	#_PATH_NS_CONF
 "/ëc/nsswôch.c⁄f"

	)

51 
	#NS_CONTINUE
 0

	)

52 
	#NS_RETURN
 1

	)

59 
	#NS_SUCCESS
 (1<<0Ë

	)

60 
	#NS_UNAVAIL
 (1<<1Ë

	)

61 
	#NS_NOTFOUND
 (1<<2Ë

	)

62 
	#NS_TRYAGAIN
 (1<<3Ë

	)

63 
	#NS_STATUSMASK
 0x000000f‡

	)

66 
	#NS_FORCEALL
 (1<<8Ë

	)

71 
	#NSSRC_FILES
 "fûes"

	)

72 
	#NSSRC_DNS
 "dns"

	)

73 
	#NSSRC_NIS
 "nis"

	)

74 
	#NSSRC_COMPAT
 "com∑t"

	)

79 
	#NSDB_HOSTS
 "ho°s"

	)

80 
	#NSDB_GROUP
 "group"

	)

81 
	#NSDB_GROUP_COMPAT
 "group_com∑t"

	)

82 
	#NSDB_NETGROUP
 "√tgroup"

	)

83 
	#NSDB_NETWORKS
 "√tw‹ks"

	)

84 
	#NSDB_PASSWD
 "∑sswd"

	)

85 
	#NSDB_PASSWD_COMPAT
 "∑sswd_com∑t"

	)

86 
	#NSDB_SHELLS
 "shñls"

	)

91 
	#NSDB_ALIASES
 "Æü£s"

	)

92 
	#NSDB_AUTH
 "auth"

	)

93 
	#NSDB_AUTOMOUNT
 "automou¡"

	)

94 
	#NSDB_BOOTPARAMS
 "boŸ∑øms"

	)

95 
	#NSDB_ETHERS
 "ëhîs"

	)

96 
	#NSDB_EXPORTS
 "exp‹ts"

	)

97 
	#NSDB_NETMASKS
 "√tmasks"

	)

98 
	#NSDB_PHONES
 "ph⁄es"

	)

99 
	#NSDB_PRINTCAP
 "¥ötˇp"

	)

100 
	#NSDB_PROTOCOLS
 "¥Ÿocﬁs"

	)

101 
	#NSDB_REMOTE
 "ªmŸe"

	)

102 
	#NSDB_RPC
 "Ωc"

	)

103 
	#NSDB_SENDMAILVARS
 "£ndmaûv¨s"

	)

104 
	#NSDB_SERVICES
 "£rvi˚s"

	)

105 
	#NSDB_TERMCAP
 "ãrmˇp"

	)

106 
	#NSDB_TTYS
 "âys"

	)

111 (*
	tnss_mëhod
)(*, *, 
	tva_li°
);

118 c⁄° *
§c
;

119 
nss_mëhod
 
ˇŒback
;

120 *
cb_d©a
;

121 } 
	tns_dèb
;

126 
	#NS_FILES_CB
(
F
,
C
Ë{ 
NSSRC_FILES
, F, 
	`__UNCONST
(CË
	}
},

	)

127 
	#NS_COMPAT_CB
(
F
,
C
Ë{ 
NSSRC_COMPAT
, F, 
	`__UNCONST
(CË},

	)

129 #ifde‡
HESIOD


130 
	#NS_DNS_CB
(
F
,
C
Ë{ 
NSSRC_DNS
, F, 
	`__UNCONST
(CË},

	)

132 
	#NS_DNS_CB
(
F
,
C
)

	)

135 #ifde‡
YP


136 
	#NS_NIS_CB
(
F
,
C
Ë{ 
NSSRC_NIS
, F, 
	`__UNCONST
(CË},

	)

138 
	#NS_NIS_CB
(
F
,
C
)

	)

147 c⁄° *
	m«me
;

148 
uöt32_t
 
	mÊags
;

149 } 
	tns_§c
;

157 c⁄° 
ns_§c
 
__nsdeÁu…§c
[];

158 c⁄° 
ns_§c
 
__nsdeÁu…com∑t
[];

159 c⁄° 
ns_§c
 
__nsdeÁu…com∑t_f‹˚Æl
[];

160 c⁄° 
ns_§c
 
__nsdeÁu…fûes
[];

161 c⁄° 
ns_§c
 
__nsdeÁu…fûes_f‹˚Æl
[];

162 c⁄° 
ns_§c
 
__nsdeÁu…nis
[];

163 c⁄° 
ns_§c
 
__nsdeÁu…nis_f‹˚Æl
[];

173 c⁄° *
	md©aba£
;

174 c⁄° *
	m«me
;

175 
nss_mëhod
 
	mmëhod
;

176 *
	mmd©a
;

177 } 
	tns_mèb
;

185 (*
	tnss_moduÀ_uƒegi°î_‚
)(
	tns_mèb
 *, 
	tu_öt
);

186 
ns_mèb
 *(*
	tnss_moduÀ_ªgi°î_‚
)(c⁄° *, 
	tu_öt
 *,

187 
	tnss_moduÀ_uƒegi°î_‚
 *);

189 #ifde‡
_NS_PRIVATE


201 c⁄° *
«me
;

202 
ns_§c
 *
§˛i°
;

203 
u_öt
 
§˛i°size
;

204 } 
	tns_dbt
;

210 c⁄° *
«me
;

211 *
h™dÀ
;

212 
ns_mèb
 *
mèb
;

213 
u_öt
 
mèbsize
;

215 
nss_moduÀ_uƒegi°î_‚
 
uƒegi°î
;

216 } 
	tns_mod
;

221 
	~<sys/cdefs.h
>

223 
__BEGIN_DECLS


224 
	`nsdi•©ch
(*, c⁄° 
ns_dèb
 [], const *,

225 c⁄° *, c⁄° 
ns_§c
 [], ...);

227 #ifde‡
_NS_PRIVATE


228 
	`_nsdbèdd§c
(
ns_dbt
 *, c⁄° 
ns_§c
 *);

229 
	`_nsdbtdump
(c⁄° 
ns_dbt
 *);

230 
	`_nsdbçut
(c⁄° 
ns_dbt
 *);

231 
	`_nsyyîr‹
(const *);

232 
	`_nsyyÀx
();

235 
__END_DECLS


	@pathconf.h

28 #i‚de‡
_PATHCONF_H_


29 
	#_PATHCONF_H_


	)

31 
	~<sys/cdefs.h
>

33 
	g__BEGIN_DECLS


37 
	#_PC_FILESIZEBITS
 0x0000

	)

38 
	#_PC_LINK_MAX
 0x0001

	)

39 
	#_PC_MAX_CANON
 0x0002

	)

40 
	#_PC_MAX_INPUT
 0x0003

	)

41 
	#_PC_NAME_MAX
 0x0004

	)

42 
	#_PC_PATH_MAX
 0x0005

	)

43 
	#_PC_PIPE_BUF
 0x0006

	)

44 
	#_PC_2_SYMLINKS
 0x0007

	)

45 
	#_PC_ALLOC_SIZE_MIN
 0x0008

	)

46 
	#_PC_REC_INCR_XFER_SIZE
 0x0009

	)

47 
	#_PC_REC_MAX_XFER_SIZE
 0x000a

	)

48 
	#_PC_REC_MIN_XFER_SIZE
 0x000b

	)

49 
	#_PC_REC_XFER_ALIGN
 0x000c

	)

50 
	#_PC_SYMLINK_MAX
 0x000d

	)

51 
	#_PC_CHOWN_RESTRICTED
 0x000e

	)

52 
	#_PC_NO_TRUNC
 0x000f

	)

53 
	#_PC_VDISABLE
 0x0010

	)

54 
	#_PC_ASYNC_IO
 0x0011

	)

55 
	#_PC_PRIO_IO
 0x0012

	)

56 
	#_PC_SYNC_IO
 0x0013

	)

58 
Â©hc⁄f
(
fûdes
, 
«me
);

59 
∑thc⁄f
(c⁄° *
∑th
, 
«me
);

61 
	g__END_DECLS


	@paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/sy°em/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

48 
	#_PATH_KMEM
 "/dev/kmem"

	)

49 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

50 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

51 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

52 
	#_PATH_MEM
 "/dev/mem"

	)

53 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

54 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

55 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

56 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

57 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

58 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

59 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

60 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

61 
	#_PATH_TTY
 "/dev/ây"

	)

62 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

63 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

64 
	#_PATH_VI
 "/bö/vi"

	)

65 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

68 
	#_PATH_DEV
 "/dev/"

	)

69 
	#_PATH_TMP
 "/tmp/"

	)

70 
	#_PATH_VARDB
 "/v¨/db/"

	)

71 
	#_PATH_VARRUN
 "/v¨/run/"

	)

72 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@poll.h

28 #i‚de‡
_POLL_H_


29 
	#_POLL_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<löux/pﬁl.h
>

34 
__BEGIN_DECLS


36 
	tnfds_t
;

38 
pﬁl
(
pﬁlfd
 *, 
nfds_t
, );

40 
	g__END_DECLS


	@pthread.h

28 #i‚de‡
_PTHREAD_H_


29 
	#_PTHREAD_H_


	)

31 
	~<time.h
>

32 
	~<sig«l.h
>

33 
	~<sched.h
>

34 
	~<limôs.h
>

35 
	~<sys/ty≥s.h
>

42 vﬁ©ûê
	mvÆue
;

43 } 
	t±hªad_muãx_t
;

45 
	#__PTHREAD_MUTEX_INIT_VALUE
 0

	)

46 
	#__PTHREAD_RECURSIVE_MUTEX_INIT_VALUE
 0x4000

	)

47 
	#__PTHREAD_ERRORCHECK_MUTEX_INIT_VALUE
 0x8000

	)

49 
	#PTHREAD_MUTEX_INITIALIZER
 {
__PTHREAD_MUTEX_INIT_VALUE
}

	)

50 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER
 {
__PTHREAD_RECURSIVE_MUTEX_INIT_VALUE
}

	)

51 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER
 {
__PTHREAD_ERRORCHECK_MUTEX_INIT_VALUE
}

	)

54 
	mPTHREAD_MUTEX_NORMAL
 = 0,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 1,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 2,

58 
	mPTHREAD_MUTEX_ERRORCHECK_NP
 = 
PTHREAD_MUTEX_ERRORCHECK
,

59 
	mPTHREAD_MUTEX_RECURSIVE_NP
 = 
PTHREAD_MUTEX_RECURSIVE
,

61 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


68 vﬁ©ûê
	mvÆue
;

69 } 
	t±hªad_c⁄d_t
;

73 
uöt32_t
 
	mÊags
;

74 * 
	m°ack_ba£
;

75 
size_t
 
	m°ack_size
;

76 
size_t
 
	mgu¨d_size
;

77 
öt32_t
 
	msched_pﬁicy
;

78 
öt32_t
 
	msched_¥i‹ôy
;

79 } 
	t±hªad_©å_t
;

81 
	t±hªad_muãx©å_t
;

82 
	t±hªad_c⁄d©å_t
;

84 
	t±hªad_key_t
;

85 
	t±hªad_t
;

87 vﬁ©ûê
	t±hªad_⁄˚_t
;

92 
	#PTHREAD_COND_INITIALIZER
 {0}

	)

94 
	#PTHREAD_STACK_MIN
 (2 * 
PAGE_SIZE
)

	)

96 
	#PTHREAD_CREATE_DETACHED
 0x00000001

	)

97 
	#PTHREAD_CREATE_JOINABLE
 0x00000000

	)

99 
	#PTHREAD_ONCE_INIT
 0

	)

101 
	#PTHREAD_PROCESS_PRIVATE
 0

	)

102 
	#PTHREAD_PROCESS_SHARED
 1

	)

104 
	#PTHREAD_SCOPE_SYSTEM
 0

	)

105 
	#PTHREAD_SCOPE_PROCESS
 1

	)

110 #ifde‡
__˝lu•lus


114 
±hªad_©å_öô
(
±hªad_©å_t
 * 
©å
);

115 
±hªad_©å_de°roy
(
±hªad_©å_t
 * 
©å
);

117 
±hªad_©å_£tdëach°©e
(
±hªad_©å_t
 * 
©å
, 
°©e
);

118 
±hªad_©å_gëdëach°©e
(
±hªad_©å_t
 c⁄° * 
©å
, * 
°©e
);

120 
±hªad_©å_£tschedpﬁicy
(
±hªad_©å_t
 * 
©å
, 
pﬁicy
);

121 
±hªad_©å_gëschedpﬁicy
(
±hªad_©å_t
 c⁄° * 
©å
, * 
pﬁicy
);

123 
±hªad_©å_£tsched∑øm
(
±hªad_©å_t
 * 
©å
, 
sched_∑øm
 c⁄° * 
∑øm
);

124 
±hªad_©å_gësched∑øm
(
±hªad_©å_t
 c⁄° * 
©å
, 
sched_∑øm
 * 
∑øm
);

126 
±hªad_©å_£t°acksize
(
±hªad_©å_t
 * 
©å
, 
size_t
 
°ack_size
);

127 
±hªad_©å_gë°acksize
(
±hªad_©å_t
 c⁄° * 
©å
, 
size_t
 * 
°ack_size
);

129 
±hªad_©å_£t°ackaddr
(
±hªad_©å_t
 * 
©å
, * 
°ackaddr
);

130 
±hªad_©å_gë°ackaddr
(
±hªad_©å_t
 c⁄° * 
©å
, ** 
°ackaddr
);

132 
±hªad_©å_£t°ack
(
±hªad_©å_t
 * 
©å
, * 
°ackaddr
, 
size_t
 
°ack_size
);

133 
±hªad_©å_gë°ack
(
±hªad_©å_t
 c⁄° * 
©å
, ** 
°ackaddr
, 
size_t
 * 
°ack_size
);

135 
±hªad_©å_£tgu¨dsize
(
±hªad_©å_t
 * 
©å
, 
size_t
 
gu¨d_size
);

136 
±hªad_©å_gëgu¨dsize
(
±hªad_©å_t
 c⁄° * 
©å
, 
size_t
 * 
gu¨d_size
);

138 
±hªad_©å_£tsc›e
(
±hªad_©å_t
 *
©å
, 
sc›e
);

139 
±hªad_©å_gësc›e
(
±hªad_©å_t
 c⁄° *
©å
);

141 
±hªad_gë©å_≈
(
±hªad_t
 
thid
, 
±hªad_©å_t
 * 
©å
);

143 
±hªad_¸óã
(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 c⁄° * 
©å
,

144 *(*
°¨t_routöe
)(*), * 
¨g
);

146 
__n‹ëu∫
 
±hªad_exô
(* 
ªtvÆ
);

148 
±hªad_joö
(
±hªad_t
 
thid
, ** 
ªt_vÆ
);

149 
±hªad_dëach
(
±hªad_t
 
thid
);

151 
±hªad_t
 
±hªad_£lf
();

152 
±hªad_equÆ
(
±hªad_t
 
⁄e
,Öthªad_à
two
);

154 
±hªad_gësched∑øm
(
±hªad_t
 
thid
, * 
pﬁicy
,

155 
sched_∑øm
 * 
∑øm
);

156 
±hªad_£tsched∑øm
(
±hªad_t
 
thid
, 
poûcy
,

157 
sched_∑øm
 c⁄° * 
∑øm
);

159 
±hªad_muãx©å_öô
(
±hªad_muãx©å_t
 *
©å
);

160 
±hªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *
©å
);

161 
±hªad_muãx©å_gëty≥
(c⁄° 
±hªad_muãx©å_t
 *
©å
, *
ty≥
);

162 
±hªad_muãx©å_£ây≥
(
±hªad_muãx©å_t
 *
©å
, 
ty≥
);

163 
±hªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *
©å
, 
psh¨ed
);

164 
±hªad_muãx©å_gëpsh¨ed
(
±hªad_muãx©å_t
 *
©å
, *
psh¨ed
);

166 
±hªad_muãx_öô
(
±hªad_muãx_t
 *
muãx
,

167 c⁄° 
±hªad_muãx©å_t
 *
©å
);

168 
±hªad_muãx_de°roy
(
±hªad_muãx_t
 *
muãx
);

169 
±hªad_muãx_lock
(
±hªad_muãx_t
 *
muãx
);

170 
±hªad_muãx_u∆ock
(
±hªad_muãx_t
 *
muãx
);

171 
±hªad_muãx_åylock
(
±hªad_muãx_t
 *
muãx
);

173 
±hªad_muãx_timedlock
(
±hªad_muãx_t
 *
muãx
, 
time•ec
* 
ts
);

176 
±hªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *
©å
);

177 
±hªad_c⁄d©å_gëpsh¨ed
(
±hªad_c⁄d©å_t
 *
©å
, *
psh¨ed
);

178 
±hªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
* 
©å
, 
psh¨ed
);

179 
±hªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *
©å
);

181 
±hªad_c⁄d_öô
(
±hªad_c⁄d_t
 *
c⁄d
,

182 c⁄° 
±hªad_c⁄d©å_t
 *
©å
);

183 
±hªad_c⁄d_de°roy
(
±hªad_c⁄d_t
 *
c⁄d
);

184 
±hªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *
c⁄d
);

185 
±hªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *
c⁄d
);

186 
±hªad_c⁄d_waô
(
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
);

187 
±hªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *
c⁄d
,

188 
±hªad_muãx_t
 * 
muãx
,

189 c⁄° 
time•ec
 *
ab°ime
);

195 
±hªad_c⁄d_timedwaô_m⁄Ÿ⁄ic_≈
(
±hªad_c⁄d_t
 *
c⁄d
,

196 
±hªad_muãx_t
 *
muãx
,

197 c⁄° 
time•ec
 *
ab°ime
);

202 
±hªad_c⁄d_timedwaô_m⁄Ÿ⁄ic
(
±hªad_c⁄d_t
 *
c⁄d
,

203 
±hªad_muãx_t
 *
muãx
,

204 c⁄° 
time•ec
 *
ab°ime
);

206 
	#HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC
 1

	)

211 
±hªad_c⁄d_timedwaô_ªœtive_≈
(
±hªad_c⁄d_t
 *
c⁄d
,

212 
±hªad_muãx_t
 *
muãx
,

213 c⁄° 
time•ec
 *
ª…ime
);

215 
	#HAVE_PTHREAD_COND_TIMEDWAIT_RELATIVE
 1

	)

219 
±hªad_c⁄d_timeout_≈
(
±hªad_c⁄d_t
 *
c⁄d
,

220 
±hªad_muãx_t
 * 
muãx
,

221 
m£cs
);

228 
±hªad_muãx_lock_timeout_≈
(
±hªad_muãx_t
 *
muãx
, 
m£cs
);

232 
	t±hªad_rwlock©å_t
;

235 
±hªad_muãx_t
 
lock
;

236 
±hªad_c⁄d_t
 
c⁄d
;

237 
numLocks
;

238 
wrôîThªadId
;

239 
≥ndögRódîs
;

240 
≥ndögWrôîs
;

241 * 
ª£rved
[4];

242 } 
	t±hªad_rwlock_t
;

244 
	#PTHREAD_RWLOCK_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
, 
PTHREAD_COND_INITIALIZER
, 0, 0, 0, 0, { 
NULL
, NULL, NULL, NULL } }

	)

246 
±hªad_rwlock©å_öô
(
±hªad_rwlock©å_t
 *
©å
);

247 
±hªad_rwlock©å_de°roy
(
±hªad_rwlock©å_t
 *
©å
);

248 
±hªad_rwlock©å_£çsh¨ed
(
±hªad_rwlock©å_t
 *
©å
, 
psh¨ed
);

249 
±hªad_rwlock©å_gëpsh¨ed
(
±hªad_rwlock©å_t
 *
©å
, *
psh¨ed
);

251 
±hªad_rwlock_öô
(
±hªad_rwlock_t
 *
rwlock
, c⁄° 
±hªad_rwlock©å_t
 *
©å
);

252 
±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *
rwlock
);

254 
±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *
rwlock
);

255 
±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *
rwlock
);

256 
±hªad_rwlock_timedrdlock
(
±hªad_rwlock_t
 *
rwlock
, c⁄° 
time•ec
 *
abs_timeout
);

258 
±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *
rwlock
);

259 
±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *
rwlock
);

260 
±hªad_rwlock_timedwæock
(
±hªad_rwlock_t
 *
rwlock
, c⁄° 
time•ec
 *
abs_timeout
);

262 
±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *
rwlock
);

265 
±hªad_key_¸óã
(
±hªad_key_t
 *
key
, (*
de°ru˘‹_fun˘i⁄
)(*));

266 
±hªad_key_dñëe
 (
±hªad_key_t
);

267 
±hªad_£t•ecific
(
±hªad_key_t
 
key
, c⁄° *
vÆue
);

268 *
±hªad_gë•ecific
(
±hªad_key_t
 
key
);

270 
±hªad_kûl
(
±hªad_t
 
tid
, 
sig
);

271 
±hªad_sigmask
(
how
, c⁄° 
sig£t_t
 *
£t
, sig£t_à*
o£t
);

273 
±hªad_gë˝u˛ockid
(
±hªad_t
 
tid
, 
˛ockid_t
 *
˛ockid
);

275 
±hªad_⁄˚
(
±hªad_⁄˚_t
 *
⁄˚_c⁄åﬁ
, (*
öô_routöe
)());

277 
±hªad_£äame_≈
(
±hªad_t
 
thid
, c⁄° *
th«me
);

279 (*
__±hªad_˛ónup_func_t
)(*);

281 
	s__±hªad_˛ónup_t
 {

282 
__±hªad_˛ónup_t
* 
__˛ónup_¥ev
;

283 
__±hªad_˛ónup_func_t
 
__˛ónup_routöe
;

284 * 
__˛ónup_¨g
;

285 } 
	t__±hªad_˛ónup_t
;

287 
__±hªad_˛ónup_push
(
__±hªad_˛ónup_t
* 
c
,

288 
__±hªad_˛ónup_func_t
 
routöe
,

289 * 
¨g
);

291 
__±hªad_˛ónup_p›
(
__±hªad_˛ónup_t
* 
c
,

292 
execuã
);

302 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

304 
__±hªad_˛ónup_t
 
__˛ónup
; \

305 
	`__±hªad_˛ónup_push
–&
__˛ónup
, (
routöe
), (
¨g
) ); \

306 

	)

307 
	#±hªad_˛ónup_p›
(
execuã
) \

308 
	`__±hªad_˛ónup_p›
–&
__˛ónup
, (
execuã
)); \

309 } 0);

	)

311 #ifde‡
__˝lu•lus


	@pwd.h

62 #i‚de‡
_PWD_H_


63 
	#_PWD_H_


	)

65 
	~<sys/cdefs.h
>

66 
	~<sys/ty≥s.h
>

68 
	#_PATH_PASSWD
 "/ëc/∑sswd"

	)

69 
	#_PATH_MASTERPASSWD
 "/ëc/ma°î.∑sswd"

	)

70 
	#_PATH_MASTERPASSWD_LOCK
 "/ëc/±mp"

	)

72 
	#_PATH_PASSWD_CONF
 "/ëc/∑sswd.c⁄f"

	)

73 
	#_PATH_PASSWDCONF
 
_PATH_PASSWD_CONF


	)

74 
	#_PATH_USERMGMT_CONF
 "/ëc/u£rmgmt.c⁄f"

	)

76 
	#_PATH_MP_DB
 "/ëc/pwd.db"

	)

77 
	#_PATH_SMP_DB
 "/ëc/•wd.db"

	)

79 
	#_PATH_PWD_MKDB
 "/u§/sbö/pwd_mkdb"

	)

81 
	#_PW_KEYBYNAME
 '1'

	)

82 
	#_PW_KEYBYNUM
 '2'

	)

83 
	#_PW_KEYBYUID
 '3'

	)

85 
	#_PASSWORD_EFMT1
 '_'

	)

86 
	#_PASSWORD_NONDES
 '$'

	)

88 
	#_PASSWORD_LEN
 128

	)

90 
	#_PASSWORD_NOUID
 0x01

	)

91 
	#_PASSWORD_NOGID
 0x02

	)

92 
	#_PASSWORD_NOCHG
 0x04

	)

93 
	#_PASSWORD_NOEXP
 0x08

	)

95 
	#_PASSWORD_OLDFMT
 0x10

	)

96 
	#_PASSWORD_NOWARN
 0x20

	)

98 
	#_PASSWORD_WARNDAYS
 14

	)

99 
	#_PASSWORD_CHGNOW
 -1

	)

101 
	s∑sswd


103 * 
	mpw_«me
;

104 * 
	mpw_∑sswd
;

105 
uid_t
 
	mpw_uid
;

106 
gid_t
 
	mpw_gid
;

107 * 
	mpw_dú
;

108 * 
	mpw_shñl
;

111 
__BEGIN_DECLS


113 
∑sswd
* 
gëpw«m
(const *);

114 
∑sswd
* 
gëpwuid
(
uid_t
);

116 
ídpwít
();

119 
gëpw«m_r
(c⁄° *, 
∑sswd
*, *, 
size_t
, passwd**);

120 
gëpwuid_r
(
uid_t
, 
∑sswd
*, *, 
size_t
, passwd**);

121 
∑sswd
* 
gëpwít
();

122 
£çwít
();

125 
	g__END_DECLS


	@regex.h

39 #i‚de‡
_REGEX_H_


40 
	#_REGEX_H_


	)

42 
	~<sys/cdefs.h
>

43 
	~<sys/ty≥s.h
>

46 
off_t
 
	tªgoff_t
;

49 
	mª_magic
;

50 
size_t
 
	mª_nsub
;

51 c⁄° *
	mª_ídp
;

52 
ª_guts
 *
	mª_g
;

53 } 
	tªgex_t
;

56 
ªgoff_t
 
	mrm_so
;

57 
ªgoff_t
 
	mrm_eo
;

58 } 
	tªgm©ch_t
;

61 
	#REG_BASIC
 0000

	)

62 
	#REG_EXTENDED
 0001

	)

63 
	#REG_ICASE
 0002

	)

64 
	#REG_NOSUB
 0004

	)

65 
	#REG_NEWLINE
 0010

	)

66 
	#REG_NOSPEC
 0020

	)

67 
	#REG_PEND
 0040

	)

68 
	#REG_DUMP
 0200

	)

71 
	#REG_NOMATCH
 1

	)

72 
	#REG_BADPAT
 2

	)

73 
	#REG_ECOLLATE
 3

	)

74 
	#REG_ECTYPE
 4

	)

75 
	#REG_EESCAPE
 5

	)

76 
	#REG_ESUBREG
 6

	)

77 
	#REG_EBRACK
 7

	)

78 
	#REG_EPAREN
 8

	)

79 
	#REG_EBRACE
 9

	)

80 
	#REG_BADBR
 10

	)

81 
	#REG_ERANGE
 11

	)

82 
	#REG_ESPACE
 12

	)

83 
	#REG_BADRPT
 13

	)

84 
	#REG_EMPTY
 14

	)

85 
	#REG_ASSERT
 15

	)

86 
	#REG_INVARG
 16

	)

87 
	#REG_ATOI
 255

	)

88 
	#REG_ITOA
 0400

	)

91 
	#REG_NOTBOL
 00001

	)

92 
	#REG_NOTEOL
 00002

	)

93 
	#REG_STARTEND
 00004

	)

94 
	#REG_TRACE
 00400

	)

95 
	#REG_LARGE
 01000

	)

96 
	#REG_BACKR
 02000

	)

98 
__BEGIN_DECLS


99 
ªgcomp
(
ªgex_t
 *, const *, );

100 
size_t
 
ªgîr‹
(, c⁄° 
ªgex_t
 *, *, size_t);

101 
ªgexec
(c⁄° 
ªgex_t
 *, c⁄° *, 
size_t
, 
ªgm©ch_t
 [], );

102 
ªg‰ì
(
ªgex_t
 *);

103 
	g__END_DECLS


	@resolv.h

28 #i‚de‡
_RESOLV_H_


29 
	#_RESOLV_H_


	)

31 
	~<sys/∑øm.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/cdefs.h
>

34 
	~<sys/sockë.h
>

35 
	~<°dio.h
>

36 
	~<¨∑/«me£r.h
>

37 
	~<√töë/ö.h
>

39 
__BEGIN_DECLS


41 
	gªs_°©e
;

43 
__ªs_°©e
 *__res_state();

44 
	#_ªs
 (*
	`__ªs_°©e
())

	)

48 
	#b64_¡›
 
__b64_¡›


	)

49 
	#b64_±⁄
 
__b64_±⁄


	)

50 
b64_¡›
(
u_ch¨
 c⁄° *, 
size_t
, *, size_t);

51 
b64_±⁄
(c⁄° *, 
u_ch¨
 *, 
size_t
);

53 
	g__END_DECLS


	@sched.h

28 #i‚de‡
_SCHED_H_


29 
	#_SCHED_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/time.h
>

34 
	g__BEGIN_DECLS


36 
	#SCHED_NORMAL
 0

	)

37 
	#SCHED_OTHER
 0

	)

38 
	#SCHED_FIFO
 1

	)

39 
	#SCHED_RR
 2

	)

41 
	ssched_∑øm
 {

42 
	msched_¥i‹ôy
;

45 
sched_£tscheduÀr
(
pid_t
, , c⁄° 
sched_∑øm
 *);

46 
sched_gëscheduÀr
(
pid_t
);

47 
sched_yõld
();

48 
sched_gë_¥i‹ôy_max
(
pﬁicy
);

49 
sched_gë_¥i‹ôy_mö
(
pﬁicy
);

50 
sched_£ç¨am
(
pid_t
, c⁄° 
sched_∑øm
 *);

51 
sched_gë∑øm
(
pid_t
, 
sched_∑øm
 *);

52 
sched_º_gë_öãrvÆ
(
pid_t
 
pid
, 
time•ec
 *
ç
);

54 
	#CLONE_VM
 0x00000100

	)

55 
	#CLONE_FS
 0x00000200

	)

56 
	#CLONE_FILES
 0x00000400

	)

57 
	#CLONE_SIGHAND
 0x00000800

	)

58 
	#CLONE_PTRACE
 0x00002000

	)

59 
	#CLONE_VFORK
 0x00004000

	)

60 
	#CLONE_PARENT
 0x00008000

	)

61 
	#CLONE_THREAD
 0x00010000

	)

62 
	#CLONE_NEWNS
 0x00020000

	)

63 
	#CLONE_SYSVSEM
 0x00040000

	)

64 
	#CLONE_SETTLS
 0x00080000

	)

65 
	#CLONE_PARENT_SETTID
 0x00100000

	)

66 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

67 
	#CLONE_DETACHED
 0x00400000

	)

68 
	#CLONE_UNTRACED
 0x00800000

	)

69 
	#CLONE_CHILD_SETTID
 0x01000000

	)

70 
	#CLONE_STOPPED
 0x02000000

	)

72 #ifde‡
_GNU_SOURCE


73 
˛⁄e
((*
‚
)(*), *
chûd_°ack
, 
Êags
, * 
¨g
, ...);

76 
__END_DECLS


	@semaphore.h

28 #i‚de‡
_SEMAPHORE_H


29 
	#_SEMAPHORE_H


	)

31 
	~<sys/cdefs.h
>

33 
__BEGIN_DECLS


36 vﬁ©ûê
	mcou¡
;

37 } 
	t£m_t
;

39 
	#SEM_FAILED
 
NULL


	)

41 
£m_öô
(
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
);

43 
£m_˛o£
(
£m_t
 *);

44 
£m_de°roy
(
£m_t
 *);

45 
£m_gëvÆue
(
£m_t
 *, *);

46 
£m_öô
(
£m_t
 *, , );

47 
£m_t
 *
£m_›í
(const *, , ...);

48 
£m_po°
(
£m_t
 *);

49 
£m_åywaô
(
£m_t
 *);

50 
£m_u∆ök
(const *);

51 
£m_waô
(
£m_t
 *);

53 
	gtime•ec
;

54 
£m_timedwaô
(
£m_t
 *
£m
, c⁄° 
time•ec
 *
abs_timeout
);

56 
	g__END_DECLS


	@setjmp.h

40 #i‚de‡
_SETJMP_H_


41 
	#_SETJMP_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<machöe/£tjmp.h
>

46 
	tsigjmp_buf
[
_JBLEN
 + 1];

47 
	tjmp_buf
[
_JBLEN
];

49 
__BEGIN_DECLS


51 
_£tjmp
(
jmp_buf
);

52 
_l⁄gjmp
(
jmp_buf
, );

53 
l⁄gjm≥º‹
();

55 
£tjmp
(
jmp_buf
);

56 
l⁄gjmp
(
jmp_buf
, );

58 
sig£tjmp
(
sigjmp_buf
, );

59 
sigl⁄gjmp
(
sigjmp_buf
, );

61 
	g__END_DECLS


	@sgtty.h

34 #i‚de‡
_SGTTY_H_


35 
	#_SGTTY_H_


	)

37 #i‚de‡
USE_OLD_TTY


38 
	#USE_OLD_TTY


	)

40 
	~<sys/io˘l.h
>

41 
	~<sys/cdefs.h
>

43 
	g__BEGIN_DECLS


45 
gây
(, 
sgâyb
 *);

46 
°ty
(, 
sgâyb
 *);

48 
	g__END_DECLS


	@sha1.h

9 #i‚de‡
_SYS_SHA1_H_


10 
	#_SYS_SHA1_H_


	)

12 
	~<sys/cdefs.h
>

13 
	~<sys/ty≥s.h
>

15 
	#SHA1_DIGEST_LENGTH
 20

	)

16 
	#SHA1_DIGEST_STRING_LENGTH
 41

	)

19 
uöt32_t
 
	m°©e
[5];

20 
uöt32_t
 
	mcou¡
[2];

21 
u_ch¨
 
	mbuf„r
[64];

22 } 
	tSHA1_CTX
;

24 
	tsha1_uöt32
;

25 
	ssha1_˘x


27 
sha1_uöt32
 
	mA
;

28 
sha1_uöt32
 
	mB
;

29 
sha1_uöt32
 
	mC
;

30 
sha1_uöt32
 
	mD
;

31 
sha1_uöt32
 
	mE
;

33 
sha1_uöt32
 
	mtŸÆ
[2];

34 
sha1_uöt32
 
	mbuÊí
;

35 
sha1_uöt32
 
	mbuf„r
[32];

39 
__BEGIN_DECLS


40 
SHA1Tønsf‹m
(
uöt32_t
[5], c⁄° 
u_ch¨
[64]);

41 
SHA1Inô
(
SHA1_CTX
 *);

42 
SHA1Upd©e
(
SHA1_CTX
 *, c⁄° 
u_ch¨
 *, 
u_öt
);

43 
SHA1FöÆ
(
u_ch¨
[
SHA1_DIGEST_LENGTH
], 
SHA1_CTX
 *);

44 
	g__END_DECLS


	@signal.h

28 #i‚de‡
_SIGNAL_H_


29 
	#_SIGNAL_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<limôs.h
>

33 
	~<°rög.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<asm/sig«l.h
>

36 
	~<asm/sigc⁄ãxt.h
>

38 
	#__ARCH_SI_UID_T
 
__kî√l_uid32_t


	)

39 
	~<asm/sigöfo.h
>

40 #unde‡
__ARCH_SI_UID_T


42 
__BEGIN_DECLS


44 
	tsig_©omic_t
;

53 #i‚de‡
_NSIG


54 
	#_NSIG
 64

	)

57 c⁄° * c⁄° 
sys_sigli°
[];

58 c⁄° * c⁄° 
sys_sig«me
[];

60 
__ölöe__
 
	$sigismembî
(
sig£t_t
 *
£t
, 
signum
)

62 *
loˇl_£t
 = (*)
£t
;

63 
signum
--;

64  ()((
loˇl_£t
[
signum
/
LONG_BIT
] >> (signum%LONG_BIT)) & 1);

65 
	}
}

68 
__ölöe__
 
	$sigadd£t
(
sig£t_t
 *
£t
, 
signum
)

70 *
loˇl_£t
 = (*)
£t
;

71 
signum
--;

72 
loˇl_£t
[
signum
/
LONG_BIT
] |= 1UL << (signum%LONG_BIT);

74 
	}
}

77 
__ölöe__
 
	$sigdñ£t
(
sig£t_t
 *
£t
, 
signum
)

79 *
loˇl_£t
 = (*)
£t
;

80 
signum
--;

81 
loˇl_£t
[
signum
/
LONG_BIT
] &= ~(1UL << (signum%LONG_BIT));

83 
	}
}

86 
__ölöe__
 
	$sigem±y£t
(
sig£t_t
 *
£t
)

88 
	`mem£t
(
£t
, 0,  *set);

90 
	}
}

92 
__ölöe__
 
	$sigfûl£t
(
sig£t_t
 *
£t
)

94 
	`mem£t
(
£t
, ~0,  *set);

96 
	}
}

100 (*
	tsig_t
)();

101 
sig_t
 
	tsigh™dÀr_t
;

104 
__sigh™dÀr_t
 
	`sysv_sig«l
(, __sighandler_t);

105 
__sigh™dÀr_t
 
	`bsd_sig«l
(, __sighandler_t);

108 
__ölöe__
 
__sigh™dÀr_t
 
	$sig«l
(
s
, 
__sigh™dÀr_t
 
f
)

110  
	`bsd_sig«l
(
s
,
f
);

111 
	}
}

114 
__sigh™dÀr_t
 
__sig«l
(, __sighandler_t, );

116 
sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

117 
siga˘i⁄
(, const sigaction *, sigaction *);

119 
sig≥ndög
(
sig£t_t
 *);

120 
sigsu•íd
(c⁄° 
sig£t_t
 *);

121 
sigwaô
(c⁄° 
sig£t_t
 *
£t
, *
sig
);

122 
sigöãºu±
(
sig
, 
Êag
);

124 
øi£
();

125 
kûl
(
pid_t
, );

126 
kûÕg
(
pgΩ
, 
sig
);

127 
sigÆt°ack
(c⁄° 
°ack_t
 *
ss
, sèck_à*
oss
);

130 
	g__END_DECLS


	@stdint.h

28 #i‚de‡
_STDINT_H


29 
	#_STDINT_H


	)

31 
	~<°ddef.h
>

32 
	~<sys/_ty≥s.h
>

34 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

35 
	#__STDINT_LIMITS


	)

38 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

39 
	#__STDINT_MACROS


	)

42 
__öt8_t
 
	töt8_t
;

43 
__uöt8_t
 
	tuöt8_t
;

44 
__öt16_t
 
	töt16_t
;

45 
__uöt16_t
 
	tuöt16_t
;

46 
__öt32_t
 
	töt32_t
;

47 
__uöt32_t
 
	tuöt32_t
;

48 
__öt64_t
 
	töt64_t
;

49 
__uöt64_t
 
	tuöt64_t
;

55 
öt8_t
 
	töt_Àa°8_t
;

56 
öt8_t
 
	töt_Á°8_t
;

58 
uöt8_t
 
	tuöt_Àa°8_t
;

59 
uöt8_t
 
	tuöt_Á°8_t
;

61 #ifde‡
__STDINT_LIMITS


62 
	#INT8_MIN
 (-128)

	)

63 
	#INT8_MAX
 (127)

	)

64 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

65 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

66 
	#INT_FAST8_MIN
 
INT8_MIN


	)

67 
	#INT_FAST8_MAX
 
INT8_MAX


	)

69 
	#UINT8_MAX
 (255)

	)

70 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

71 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

74 #ifde‡
__STDINT_MACROS


75 
	#INT8_C
(
c
Ë
	)
c

76 
	#INT_LEAST8_C
(
c
Ë
	`INT8_C
(c)

	)

77 
	#INT_FAST8_C
(
c
Ë
	`INT8_C
(c)

	)

79 
	#UINT8_C
(
c
Ë
	)
c

80 
	#UINT_LEAST8_C
(
c
Ë
	`UINT8_C
(c)

	)

81 
	#UINT_FAST8_C
(
c
Ë
	`UINT8_C
(c)

	)

88 
öt16_t
 
	töt_Àa°16_t
;

89 
öt32_t
 
	töt_Á°16_t
;

91 
uöt16_t
 
	tuöt_Àa°16_t
;

92 
uöt32_t
 
	tuöt_Á°16_t
;

94 #ifde‡
__STDINT_LIMITS


95 
	#INT16_MIN
 (-32768)

	)

96 
	#INT16_MAX
 (32767)

	)

97 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

98 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

99 
	#INT_FAST16_MIN
 
INT32_MIN


	)

100 
	#INT_FAST16_MAX
 
INT32_MAX


	)

102 
	#UINT16_MAX
 (65535)

	)

103 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

104 
	#UINT_FAST16_MAX
 
UINT32_MAX


	)

107 #ifde‡
__STDINT_MACROS


108 
	#INT16_C
(
c
Ë
	)
c

109 
	#INT_LEAST16_C
(
c
Ë
	`INT16_C
(c)

	)

110 
	#INT_FAST16_C
(
c
Ë
	`INT32_C
(c)

	)

112 
	#UINT16_C
(
c
Ë
	)
c

113 
	#UINT_LEAST16_C
(
c
Ë
	`UINT16_C
(c)

	)

114 
	#UINT_FAST16_C
(
c
Ë
	`UINT32_C
(c)

	)

121 
öt32_t
 
	töt_Àa°32_t
;

122 
öt32_t
 
	töt_Á°32_t
;

124 
uöt32_t
 
	tuöt_Àa°32_t
;

125 
uöt32_t
 
	tuöt_Á°32_t
;

127 #ifde‡
__STDINT_LIMITS


128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT32_MAX
 (2147483647)

	)

130 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

131 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

132 
	#INT_FAST32_MIN
 
INT32_MIN


	)

133 
	#INT_FAST32_MAX
 
INT32_MAX


	)

135 
	#UINT32_MAX
 (4294967295U)

	)

136 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

137 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

140 #ifde‡
__STDINT_MACROS


141 
	#INT32_C
(
c
Ë
	)
c

142 
	#INT_LEAST32_C
(
c
Ë
	`INT32_C
(c)

	)

143 
	#INT_FAST32_C
(
c
Ë
	`INT32_C
(c)

	)

145 
	#UINT32_C
(
c
Ë¯## 
U


	)

146 
	#UINT_LEAST32_C
(
c
Ë
	`UINT32_C
(c)

	)

147 
	#UINT_FAST32_C
(
c
Ë
	`UINT32_C
(c)

	)

154 
öt64_t
 
	töt_Àa°64_t
;

155 
öt64_t
 
	töt_Á°64_t
;

157 
uöt64_t
 
	tuöt_Àa°64_t
;

158 
uöt64_t
 
	tuöt_Á°64_t
;

160 #ifde‡
__STDINT_LIMITS


161 
	#INT64_MIN
 (
	`__INT64_C
(-9223372036854775807)-1)

	)

162 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

163 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

164 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

165 
	#INT_FAST64_MIN
 
INT64_MIN


	)

166 
	#INT_FAST64_MAX
 
INT64_MAX


	)

167 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

169 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

170 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

173 
	#__INT64_C
(
c
Ë¯## 
LL


	)

174 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

176 #ifde‡
__STDINT_MACROS


177 
	#INT64_C
(
c
Ë
	`__INT64_C
(c)

	)

178 
	#INT_LEAST64_C
(
c
Ë
	`INT64_C
(c)

	)

179 
	#INT_FAST64_C
(
c
Ë
	`INT64_C
(c)

	)

181 
	#UINT64_C
(
c
Ë
	`__UINT64_C
(c)

	)

182 
	#UINT_LEAST64_C
(
c
Ë
	`UINT64_C
(c)

	)

183 
	#UINT_FAST64_C
(
c
Ë
	`UINT64_C
(c)

	)

186 
	#__PRI64_RANK
 "Œ"

	)

187 
	#__PRIFAST_RANK
 ""

	)

188 
	#__PRIPTR_RANK
 ""

	)

194 #ifde‡
__LP64__


195 
	töçå_t
;

196 
	tuöçå_t
;

198 
	töçå_t
;

199 
	tuöçå_t
;

202 #ifde‡
__STDINT_LIMITS


203 
	#INTPTR_MIN
 
INT32_MIN


	)

204 
	#INTPTR_MAX
 
INT32_MAX


	)

205 
	#UINTPTR_MAX
 
UINT32_MAX


	)

206 
	#PTRDIFF_MIN
 
INT32_MIN


	)

207 
	#PTRDIFF_MAX
 
INT32_MAX


	)

210 #ifde‡
__STDINT_MACROS


211 
	#INTPTR_C
(
c
Ë
	`INT32_C
(c)

	)

212 
	#UINTPTR_C
(
c
Ë
	`UINT32_C
(c)

	)

213 
	#PTRDIFF_C
(
c
Ë
	`INT32_C
(c)

	)

220 
uöt64_t
 
	tuötmax_t
;

221 
öt64_t
 
	tötmax_t
;

223 #ifde‡
__STDINT_LIMITS


224 
	#INTMAX_MIN
 
INT64_MIN


	)

225 
	#INTMAX_MAX
 
INT64_MAX


	)

226 
	#UINTMAX_MAX
 
UINT64_MAX


	)

229 #ifde‡
__STDINT_MACROS


230 
	#INTMAX_C
(
c
Ë
	`INT64_C
(c)

	)

231 
	#UINTMAX_C
(
c
Ë
	`UINT64_C
(c)

	)

235 #ifde‡
__STDINT_LIMITS


236 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

237 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

241 #ifde‡
__STDINT_LIMITS


242 
	~<sys/_wch¨_limôs.h
>

246 #ifde‡
__STDINT_LIMITS


247 
	#WINT_MIN
 
INT32_MIN


	)

248 
	#WINT_MAX
 
INT32_MAX


	)

252 #i‚de‡
_SSIZE_T_DEFINED_


253 
	#_SSIZE_T_DEFINED_


	)

254 
	tssize_t
;

257 
	#_BITSIZE
 32

	)

260 
	#__BIT_TYPES_DEFINED__


	)

	@stdio.h

38 #i‚def 
_STDIO_H_


39 
	#_STDIO_H_


	)

49 
	~<sys/cdefs.h
>

50 
	~<sys/ty≥s.h
>

53 
	#__√ed___va_li°


	)

54 
	~<°d¨g.h
>

57 
	#__√ed_size_t


	)

58 
	~<°ddef.h
>

60 
	#__√ed_NULL


	)

61 
	~<°ddef.h
>

63 
	#_FSTDIO


	)

65 
off_t
 
	tÂos_t
;

74 
	s__sbuf
 {

75 *
	m_ba£
;

76 
	m_size
;

106 
	s__sFILE
 {

107 *
	m_p
;

108 
	m_r
;

109 
	m_w
;

110 
	m_Êags
;

111 
	m_fûe
;

112 
__sbuf
 
	m_bf
;

113 
	m_lbfsize
;

116 *
	m_cookõ
;

117 (*
	m_˛o£
)(*);

118 (*
	m_ªad
)(*, *, );

119 
Âos_t
 (*
_£ek
)(*, 
	mÂos_t
, );

120 (*
	m_wrôe
)(*, const *, );

123 
__sbuf
 
	m_ext
;

125 *
	m_up
;

126 
	m_ur
;

129 
	m_ubuf
[3];

130 
	m_nbuf
[1];

133 
__sbuf
 
	m_lb
;

136 
	m_blksize
;

137 
Âos_t
 
	m_off£t
;

138 } 
	tFILE
;

140 
__BEGIN_DECLS


141 
FILE
 
__sF
[];

142 
	g__END_DECLS


144 
	#__SLBF
 0x0001

	)

145 
	#__SNBF
 0x0002

	)

146 
	#__SRD
 0x0004

	)

147 
	#__SWR
 0x0008

	)

149 
	#__SRW
 0x0010

	)

150 
	#__SEOF
 0x0020

	)

151 
	#__SERR
 0x0040

	)

152 
	#__SMBF
 0x0080

	)

153 
	#__SAPP
 0x0100

	)

154 
	#__SSTR
 0x0200

	)

155 
	#__SOPT
 0x0400

	)

156 
	#__SNPT
 0x0800

	)

157 
	#__SOFF
 0x1000

	)

158 
	#__SMOD
 0x2000

	)

159 
	#__SALC
 0x4000

	)

170 
	#_IOFBF
 0

	)

171 
	#_IOLBF
 1

	)

172 
	#_IONBF
 2

	)

174 
	#BUFSIZ
 1024

	)

176 
	#EOF
 (-1)

	)

183 
	#FOPEN_MAX
 20

	)

184 
	#FILENAME_MAX
 1024

	)

187 #i‡
__BSD_VISIBLE
 || 
__XPG_VISIBLE


188 
	#P_tmpdú
 "/tmp/"

	)

190 
	#L_tm≤am
 1024

	)

191 
	#TMP_MAX
 308915776

	)

193 #i‚de‡
SEEK_SET


194 
	#SEEK_SET
 0

	)

196 #i‚de‡
SEEK_CUR


197 
	#SEEK_CUR
 1

	)

199 #i‚de‡
SEEK_END


200 
	#SEEK_END
 2

	)

203 
	#°dö
 (&
__sF
[0])

	)

204 
	#°dout
 (&
__sF
[1])

	)

205 
	#°dîr
 (&
__sF
[2])

	)

210 
__BEGIN_DECLS


211 
˛óªº
(
FILE
 *);

212 
f˛o£
(
FILE
 *);

213 
„of
(
FILE
 *);

214 
„º‹
(
FILE
 *);

215 
fÊush
(
FILE
 *);

216 
fgëc
(
FILE
 *);

217 
fgëpos
(
FILE
 *, 
Âos_t
 *);

218 *
fgës
(*, , 
FILE
 *);

219 
FILE
 *
f›í
(const *, const *);

220 
Ârötf
(
FILE
 *, const *, ...);

221 
Âutc
(, 
FILE
 *);

222 
Âuts
(c⁄° *, 
FILE
 *);

223 
size_t
 
‰ód
(*, size_t, size_t, 
FILE
 *);

224 
FILE
 *
‰e›í
(const *, const *, FILE *);

225 
fsˇnf
(
FILE
 *, const *, ...);

226 
f£ek
(
FILE
 *, , );

227 
f£eko
(
FILE
 *, 
off_t
, );

228 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

229 
·ñl
(
FILE
 *);

230 
off_t
 
·ñlo
(
FILE
 *);

231 
size_t
 
fwrôe
(c⁄° *, size_t, size_t, 
FILE
 *);

232 
gëc
(
FILE
 *);

233 
gëch¨
();

234 *
gës
(*);

235 #i‡
__BSD_VISIBLE
 && !
deföed
(
__SYS_ERRLIST
)

236 
	#__SYS_ERRLIST


	)

238 
sys_√º
;

239 *
sys_îæi°
[];

241 
≥º‹
(const *);

242 
¥ötf
(const *, ...);

243 
putc
(, 
FILE
 *);

244 
putch¨
();

245 
puts
(const *);

246 
ªmove
(const *);

247 
ª«me
(const *, const *);

248 
ªwöd
(
FILE
 *);

249 
sˇnf
(const *, ...);

250 
£tbuf
(
FILE
 *, *);

251 
£tvbuf
(
FILE
 *, *, , 
size_t
);

252 
•rötf
(*, const *, ...);

253 
ssˇnf
(const *, const *, ...);

254 
FILE
 *
tmpfûe
();

255 *
tm≤am
(*);

256 
ungëc
(, 
FILE
 *);

257 
vÂrötf
(
FILE
 *, c⁄° *, 
__va_li°
);

258 
v¥ötf
(c⁄° *, 
__va_li°
);

259 
v•rötf
(*, c⁄° *, 
__va_li°
);

261 #i‡
__ISO_C_VISIBLE
 >1999 || 
__BSD_VISIBLE


262 
	$¢¥ötf
(*, 
size_t
, const *, ...)

263 
	`__©åibuã__
((
	$__f‹m©__
 (
¥ötf
, 3, 4)))

264 
	`__©åibuã__
((
	`__n⁄nuŒ__
 (3)));

265 
	$vfsˇnf
(
FILE
 *, c⁄° *, 
__va_li°
)

266 
	`__©åibuã__
((
	$__f‹m©__
 (
sˇnf
, 2, 0)))

267 
	`__©åibuã__
((
	`__n⁄nuŒ__
 (2)));

268 
	$vsˇnf
(c⁄° *, 
__va_li°
)

269 
	`__©åibuã__
((
	$__f‹m©__
 (
sˇnf
, 1, 0)))

270 
	`__©åibuã__
((
	`__n⁄nuŒ__
 (1)));

271 
	$v¢¥ötf
(*, 
size_t
, c⁄° *, 
__va_li°
)

272 
	`__©åibuã__
((
	$__f‹m©__
 (
¥ötf
, 3, 0)))

273 
	`__©åibuã__
((
	`__n⁄nuŒ__
 (3)));

274 
	$vssˇnf
(c⁄° *, c⁄° *, 
__va_li°
)

275 
	`__©åibuã__
((
	$__f‹m©__
 (
sˇnf
, 2, 0)))

276 
	`__©åibuã__
((
	`__n⁄nuŒ__
 (2)));

279 
__END_DECLS


285 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 || 
__XPG_VISIBLE


286 
	#L_˘îmid
 1024

	)

287 
	#L_cu£rid
 9

	)

289 
__BEGIN_DECLS


291 *
	`˘îmid
(*);

292 *
	`cu£rid
(*);

294 
FILE
 *
	`fd›í
(, const *);

295 
	`fûío
(
FILE
 *);

297 #i‡(
__POSIX_VISIBLE
 >= 199209)

298 
	`p˛o£
(
FILE
 *);

299 
FILE
 *
	`p›í
(const *, const *);

302 #i‡
__POSIX_VISIBLE
 >= 199506

303 
	`Êockfûe
(
FILE
 *);

304 
	`·rylockfûe
(
FILE
 *);

305 
	`fu∆ockfûe
(
FILE
 *);

311 
	`gëc_u∆ocked
(
FILE
 *);

312 
	`gëch¨_u∆ocked
();

313 
	`putc_u∆ocked
(, 
FILE
 *);

314 
	`putch¨_u∆ocked
();

317 #i‡
__XPG_VISIBLE


318 *
	`ãm≤am
(const *, const *);

320 
__END_DECLS


327 #i‡
__BSD_VISIBLE


328 
__BEGIN_DECLS


329 
	$a•rötf
(**, const *, ...)

330 
	`__©åibuã__
((
	$__f‹m©__
 (
¥ötf
, 2, 3)))

331 
	`__©åibuã__
((
	`__n⁄nuŒ__
 (2)));

332 *
	`fgë 
(
FILE
 *, 
size_t
 *);

333 
	`Âurge
(
FILE
 *);

334 
	`gëw
(
FILE
 *);

335 
	`putw
(, 
FILE
 *);

336 
	`£tbuf„r
(
FILE
 *, *, );

337 
	`£éöebuf
(
FILE
 *);

338 
	$va•rötf
(**, c⁄° *, 
__va_li°
)

339 
	`__©åibuã__
((
	$__f‹m©__
 (
¥ötf
, 2, 0)))

340 
	`__©åibuã__
((
	`__n⁄nuŒ__
 (2)));

341 
__END_DECLS


346 
__BEGIN_DECLS


347 
FILE
 *
	`fun›í
(const *,

350 
	$Âos_t
 (*)(*, 
Âos_t
, ),

352 
__END_DECLS


353 
	#‰›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, fn, 0, 0, 0)

	)

354 
	#fw›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, 0, fn, 0, 0)

	)

360 
__BEGIN_DECLS


361 
	`__§gë
(
FILE
 *);

362 
	`__swbuf
(, 
FILE
 *);

363 
__END_DECLS


369 
	#__sgëc
(
p
Ë(--’)->
_r
 < 0 ? 
	`__§gë
’Ë: ()(*’)->
_p
++))

	)

370 #i‡
	`deföed
(
__GNUC__
)

371 
__ölöe
 
	$__•utc
(
_c
, 
FILE
 *
_p
) {

372 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

373  (*
_p
->_p++ = 
_c
);

375  (
	`__swbuf
(
_c
, 
_p
));

376 
	}
}

381 
	#__•utc
(
c
, 
p
) \

382 (--(
p
)->
_w
 < 0 ? \

383 (
p
)->
_w
 >’)->
_lbfsize
 ? \

384 (*(
p
)->
_p
 = (
c
)), *(p)->_p != '\n' ? \

385 ()*(
p
)->
_p
++ : \

386 
	`__swbuf
('\n', 
p
) : \

387 
	`__swbuf
(()(
c
), 
p
) : \

388 (*(
p
)->
_p
 = (
c
), ()*’)->_p++))

	)

391 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

392 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

393 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

394 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

396 
	#„of
(
p
Ë
	`__s„of
’)

	)

397 
	#„º‹
(
p
Ë
	`__s„º‹
’)

	)

399 #i‚de‡
_POSIX_THREADS


400 
	#˛óªº
(
p
Ë
	`__s˛óªº
’)

	)

403 #i‡
__POSIX_VISIBLE


404 
	#fûío
(
p
Ë
	`__sfûío
’)

	)

407 #i‚de‡
löt


408 #i‚de‡
_POSIX_THREADS


409 
	#gëc
(
Â
Ë
	`__sgëc
(Â)

	)

411 
	#gëc_u∆ocked
(
Â
Ë
	`__sgëc
(Â)

	)

416 #i‡
__BSD_VISIBLE


417 #i‚de‡
_POSIX_THREADS


418 
	#putc
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

420 
	#putc_u∆ocked
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

424 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

425 
	#putch¨
(
x
Ë
	`putc
(x, 
°dout
)

	)

426 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

427 
	#putch¨_u∆ocked
(
c
Ë
	`putc_u∆ocked
(c, 
°dout
)

	)

429 #ifde‡
_GNU_SOURCE


436 
fd¥ötf
(, const *, ...);

437 
vfd¥ötf
(, c⁄° *, 
__va_li°
);

	@stdlib.h

28 #i‚de‡
_STDLIB_H_


29 
	#_STDLIB_H_


	)

31 
	~<sys/cdefs.h
>

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

39 
	~<°ddef.h
>

40 
	~<°rög.h
>

41 
	~<Æloˇ.h
>

42 
	~<°rögs.h
>

43 
	~<mem‹y.h
>

45 
	g__BEGIN_DECLS


47 
	#EXIT_FAILURE
 1

	)

48 
	#EXIT_SUCCESS
 0

	)

50 
__n‹ëu∫
 
exô
();

51 
__n‹ëu∫
 
ab‹t
();

52 
©exô
((*)());

54 *
	`gëív
(const *);

55 
	`puãnv
(const *);

56 
	`£ãnv
(const *, const *, );

57 
	`un£ãnv
(const *);

58 
	`˛óªnv
();

60 *
	`mkdãmp
(*);

61 *
	`mkãmp
 (*);

62 
	`mk°emp
 (*);

64 
	`°πﬁ
(const *, **, );

65 
	`°πﬁl
(const *, **, );

66 
	`°πoul
(const *, **, );

67 
	`°πouŒ
(const *, **, );

68 
	$°πod
(c⁄° *
≈å
, **
íd±r
Ë
__NDK_FPABI__
;

70 
__NDK_FPABI__


71 
__ölöe__
 
	$°πof
(c⁄° *
≈å
, **
íd±r
)

73  ()
	`°πod
(
≈å
, 
íd±r
);

74 
	}
}

76 
©oi
(const *);

77 
©ﬁ
(const *);

78 
©ﬁl
(const *);

80 
__NDK_FPABI__


81 
__ölöe__
 
	$©of
(c⁄° *
≈å
)

83  (
	`°πod
(
≈å
, 
NULL
));

84 
	}
}

86 
__ölöe__
 
	$abs
(
__n
) {

87  (
__n
 < 0) ? -__n : __n;

88 
	}
}

90 
__ölöe__
 
	$œbs
(
__n
) {

91  (
__n
 < 0L) ? -__n : __n;

92 
	}
}

94 
__ölöe__
 
	$Œabs
(
__n
) {

95  (
__n
 < 0LL) ? -__n : __n;

96 
	}
}

98 * 
ªÆ∑th
(c⁄° *
∑th
, *
ªsﬁved
);

99 
sy°em
(c⁄° * 
°rög
);

101 * 
b£¨ch
(c⁄° *
key
, c⁄° *
ba£0
,

102 
size_t
 
nmemb
, size_à
size
,

103 (*
com∑r
)(const *, const *));

105 
	`qs‹t
(*, 
size_t
, size_t, (*)(const *, const *));

107 
	`jønd48
(*);

108 
	`mønd48
();

109 
	`ƒ™d48
(*);

110 
	`Ã™d48
();

111 *
	`£ed48
(*);

112 
	$î™d48
(
xsubi
[3]Ë
__NDK_FPABI__
;

113 
	$dønd48
(Ë
__NDK_FPABI__
;

114 
	`§™d48
();

115 
	`¨c4øndom
();

116 
	`¨c4øndom_°ú
();

117 
	`¨c4øndom_addøndom
(*, );

119 
	#RAND_MAX
 0x7fffffff

	)

120 
__ölöe__
 
	$ønd
() {

121  ()
	`Ã™d48
();

122 
	}
}

123 
__ölöe__
 
	$§™d
(
__s
) {

124 
	`§™d48
(
__s
);

125 
	}
}

126 
__ölöe__
 
	$øndom
()

128  
	`Ã™d48
();

129 
	}
}

130 
__ölöe__
 
	$§™dom
(
__s
)

132 
	`§™d48
(
__s
);

133 
	}
}

137 
u∆ock±
();

138 * 
±¢ame
();

139 
±¢ame_r
(, *, 
size_t
);

140 
gë±
();

142 
__ölöe__
 
gø¡±
(
__fd
 
__©åibuã
((
unu£d
)))

144 ()
	g__fd
;

149 
	mquŸ
;

150 
	mªm
;

151 } 
	tdiv_t
;

153 
div_t
 
div
(, );

156 
	mquŸ
;

157 
	mªm
;

158 } 
	tldiv_t
;

160 
ldiv_t
 
ldiv
(, );

163 
	mquŸ
;

164 
	mªm
;

165 } 
	tŒdiv_t
;

167 
Œdiv_t
 
Œdiv
(, );

171 
mbÀn
(c⁄° *, 
size_t
);

172 
size_t
 
mb°owcs
(
wch¨_t
 *, const *, size_t);

173 
mbtowc
(
wch¨_t
 *, c⁄° *, 
size_t
);

176 
w˘omb
(*, 
wch¨_t
);

177 
size_t
 
wc°ombs
(*, c⁄° 
wch¨_t
 *, size_t);

180 
	#MB_CUR_MAX
 1

	)

183 
⁄_exô
((*)(, *), *);

186 
__END_DECLS


	@string.h

28 #i‚de‡
_STRING_H_


29 
	#_STRING_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<°ddef.h
>

33 
	~<mÆloc.h
>

35 
__BEGIN_DECLS


37 * 
memc˝y
(*, c⁄° *, , 
size_t
);

38 * 
memchr
(c⁄° *, , 
size_t
);

39 * 
memrchr
(c⁄° *, , 
size_t
);

40 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

41 * 
mem˝y
(*, c⁄° *, 
size_t
);

42 * 
memmove
(*, c⁄° *, 
size_t
);

43 * 
mem£t
(*, , 
size_t
);

44 * 
memmem
(c⁄° *, 
size_t
, const *, size_t);

45 
memsw≠
(*, *, 
size_t
);

47 * 
ödex
(const *, );

48 * 
rödex
(const *, );

49 * 
°rchr
(const *, );

50 * 
°ºchr
(const *, );

52 
size_t
 
°æí
(const *);

53 
°rcmp
(const *, const *);

54 * 
°r˝y
(*, const *);

55 * 
°rˇt
(*, const *);

57 
°rˇ£cmp
(const *, const *);

58 
°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

59 * 
°rdup
(const *);

61 * 
°r°r
(const *, const *);

62 * 
°rˇ£°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

63 * 
°πok
(*, const *);

64 * 
°πok_r
(*, const *, **);

66 * 
°ªº‹
();

67 
°ªº‹_r
(
î∫um
, *
buf
, 
size_t
 
n
);

69 
size_t
 
°∫Àn
(const *, size_t);

70 * 
°∫ˇt
(*, c⁄° *, 
size_t
);

71 * 
°∫dup
(c⁄° *, 
size_t
);

72 
°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

73 * 
°∫˝y
(*, c⁄° *, 
size_t
);

75 
size_t
 
°æˇt
(*, const *, size_t);

76 
size_t
 
°æ˝y
(*, const *, size_t);

78 
size_t
 
°rc•n
(const *, const *);

79 * 
°Ωbrk
(const *, const *);

80 * 
°r£p
(**, const *);

81 
size_t
 
°r•n
(const *, const *);

83 * 
°rsig«l
(
sig
);

85 
°rcﬁl
(const *, const *);

86 
size_t
 
°rx‰m
(*, const *, size_t);

88 
	g__END_DECLS


	@strings.h

39 #i‚de‡
_STRINGS_H_


40 
	#_STRINGS_H_


	)

42 
	~<sys/ty≥s.h
>

43 
	~<sys/cdefs.h
>

45 
__BEGIN_DECLS


46 
bcmp
(c⁄° *, c⁄° *, 
size_t
);

47 
bc›y
(c⁄° *, *, 
size_t
);

48 
bzîo
(*, 
size_t
);

49 
ffs
();

50 *
ödex
(const *, );

51 *
rödex
(const *, );

52 
°rˇ£cmp
(const *, const *);

53 
°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

54 
	g__END_DECLS


	@sys/_errdefs.h

36 #i‚de‡
__BIONIC_ERRDEF


39 
__BIONIC_ERRDEF
–
EPERM
 , 1, "OperationÇotÖermitted" )

40 
__BIONIC_ERRDEF
–
ENOENT
 , 2, "No such file or directory" )

41 
__BIONIC_ERRDEF
–
ESRCH
 , 3, "No suchÖrocess" )

42 
__BIONIC_ERRDEF
–
EINTR
 , 4, "Interrupted system call" )

43 
__BIONIC_ERRDEF
–
EIO
 , 5, "I/OÉrror" )

44 
__BIONIC_ERRDEF
–
ENXIO
 , 6, "No such device oráddress" )

45 
__BIONIC_ERRDEF
–
E2BIG
 , 7, "ArgumentÜistÅooÜong" )

46 
__BIONIC_ERRDEF
–
ENOEXEC
 , 8, "Exec formatÉrror" )

47 
__BIONIC_ERRDEF
–
EBADF
 , 9, "Bad fileÇumber" )

48 
__BIONIC_ERRDEF
–
ECHILD
 , 10, "No childÖrocesses" )

49 
__BIONIC_ERRDEF
–
EAGAIN
 , 11, "Tryágain" )

50 
__BIONIC_ERRDEF
–
ENOMEM
 , 12, "Out of memory" )

51 
__BIONIC_ERRDEF
–
EACCES
 , 13, "Permission denied" )

52 
__BIONIC_ERRDEF
–
EFAULT
 , 14, "Badáddress" )

53 
__BIONIC_ERRDEF
–
ENOTBLK
 , 15, "Block deviceÑequired" )

54 
__BIONIC_ERRDEF
–
EBUSY
 , 16, "Device orÑesource busy" )

55 
__BIONIC_ERRDEF
–
EEXIST
 , 17, "FileÉxists" )

56 
__BIONIC_ERRDEF
–
EXDEV
 , 18, "Cross-deviceÜink" )

57 
__BIONIC_ERRDEF
–
ENODEV
 , 19, "No such device" )

58 
__BIONIC_ERRDEF
–
ENOTDIR
 , 20, "Notá directory" )

59 
__BIONIC_ERRDEF
–
EISDIR
 , 21, "Isá directory" )

60 
__BIONIC_ERRDEF
–
EINVAL
 , 22, "Invalidárgument" )

61 
__BIONIC_ERRDEF
–
ENFILE
 , 23, "FileÅable overflow" )

62 
__BIONIC_ERRDEF
–
EMFILE
 , 24, "Too many open files" )

63 
__BIONIC_ERRDEF
–
ENOTTY
 , 25, "NotáÅypewriter" )

64 
__BIONIC_ERRDEF
–
ETXTBSY
 , 26, "Text file busy" )

65 
__BIONIC_ERRDEF
–
EFBIG
 , 27, "FileÅooÜarge" )

66 
__BIONIC_ERRDEF
–
ENOSPC
 , 28, "No spaceÜeft on device" )

67 
__BIONIC_ERRDEF
–
ESPIPE
 , 29, "Illegal seek" )

68 
__BIONIC_ERRDEF
–
EROFS
 , 30, "Read-only file system" )

69 
__BIONIC_ERRDEF
–
EMLINK
 , 31, "Too manyÜinks" )

70 
__BIONIC_ERRDEF
–
EPIPE
 , 32, "BrokenÖipe" )

71 
__BIONIC_ERRDEF
–
EDOM
 , 33, "Mathárgument out of domain of func" )

72 
__BIONIC_ERRDEF
–
ERANGE
 , 34, "MathÑesultÇotÑepresentable" )

73 
__BIONIC_ERRDEF
–
EDEADLK
 , 35, "Resource deadlock would occur" )

74 
__BIONIC_ERRDEF
–
ENAMETOOLONG
 , 36, "FileÇameÅooÜong" )

75 
__BIONIC_ERRDEF
–
ENOLCK
 , 37, "NoÑecordÜocksávailable" )

76 
__BIONIC_ERRDEF
–
ENOSYS
 , 38, "FunctionÇot implemented" )

77 
__BIONIC_ERRDEF
–
ENOTEMPTY
 , 39, "DirectoryÇotÉmpty" )

78 
__BIONIC_ERRDEF
–
ELOOP
 , 40, "Too many symbolicÜinksÉncountered" )

79 
__BIONIC_ERRDEF
–
ENOMSG
 , 42, "No message of desiredÅype" )

80 
__BIONIC_ERRDEF
–
EIDRM
 , 43, "IdentifierÑemoved" )

81 
__BIONIC_ERRDEF
–
ECHRNG
 , 44, "ChannelÇumber out ofÑange" )

82 
__BIONIC_ERRDEF
–
EL2NSYNC
 , 45, "Level 2Çot synchronized" )

83 
__BIONIC_ERRDEF
–
EL3HLT
 , 46, "Level 3 halted" )

84 
__BIONIC_ERRDEF
–
EL3RST
 , 47, "Level 3Ñeset" )

85 
__BIONIC_ERRDEF
–
ELNRNG
 , 48, "LinkÇumber out ofÑange" )

86 
__BIONIC_ERRDEF
–
EUNATCH
 , 49, "Protocol driverÇotáttached" )

87 
__BIONIC_ERRDEF
–
ENOCSI
 , 50, "No CSI structureávailable" )

88 
__BIONIC_ERRDEF
–
EL2HLT
 , 51, "Level 2 halted" )

89 
__BIONIC_ERRDEF
–
EBADE
 , 52, "InvalidÉxchange" )

90 
__BIONIC_ERRDEF
–
EBADR
 , 53, "InvalidÑequest descriptor" )

91 
__BIONIC_ERRDEF
–
EXFULL
 , 54, "Exchange full" )

92 
__BIONIC_ERRDEF
–
ENOANO
 , 55, "Noánode" )

93 
__BIONIC_ERRDEF
–
EBADRQC
 , 56, "InvalidÑequest code" )

94 
__BIONIC_ERRDEF
–
EBADSLT
 , 57, "Invalid slot" )

95 
__BIONIC_ERRDEF
–
EBFONT
 , 59, "Bad font file format" )

96 
__BIONIC_ERRDEF
–
ENOSTR
 , 60, "DeviceÇotá stream" )

97 
__BIONIC_ERRDEF
–
ENODATA
 , 61, "No dataávailable" )

98 
__BIONIC_ERRDEF
–
ETIME
 , 62, "TimerÉxpired" )

99 
__BIONIC_ERRDEF
–
ENOSR
 , 63, "Out of streamsÑesources" )

100 
__BIONIC_ERRDEF
–
ENONET
 , 64, "Machine isÇot onÅheÇetwork" )

101 
__BIONIC_ERRDEF
–
ENOPKG
 , 65, "PackageÇot installed" )

102 
__BIONIC_ERRDEF
–
EREMOTE
 , 66, "Object isÑemote" )

103 
__BIONIC_ERRDEF
–
ENOLINK
 , 67, "Link has been severed" )

104 
__BIONIC_ERRDEF
–
EADV
 , 68, "AdvertiseÉrror" )

105 
__BIONIC_ERRDEF
–
ESRMNT
 , 69, "SrmountÉrror" )

106 
__BIONIC_ERRDEF
–
ECOMM
 , 70, "CommunicationÉrror on send" )

107 
__BIONIC_ERRDEF
–
EPROTO
 , 71, "ProtocolÉrror" )

108 
__BIONIC_ERRDEF
–
EMULTIHOP
 , 72, "Multihopáttempted" )

109 
__BIONIC_ERRDEF
–
EDOTDOT
 , 73, "RFS specificÉrror" )

110 
__BIONIC_ERRDEF
–
EBADMSG
 , 74, "Notá data message" )

111 
__BIONIC_ERRDEF
–
EOVERFLOW
 , 75, "ValueÅooÜarge for defined dataÅype" )

112 
__BIONIC_ERRDEF
–
ENOTUNIQ
 , 76, "NameÇot unique onÇetwork" )

113 
__BIONIC_ERRDEF
–
EBADFD
 , 77, "File descriptor in bad state" )

114 
__BIONIC_ERRDEF
–
EREMCHG
 , 78, "Remoteáddress changed" )

115 
__BIONIC_ERRDEF
–
ELIBACC
 , 79, "CanÇotáccessáÇeeded sharedÜibrary" )

116 
__BIONIC_ERRDEF
–
ELIBBAD
 , 80, "Accessingá corrupted sharedÜibrary" )

117 
__BIONIC_ERRDEF
–
ELIBSCN
 , 81, ".lib section iná.out corrupted" )

118 
__BIONIC_ERRDEF
–
ELIBMAX
 , 82, "AttemptingÅoÜink inÅoo many sharedÜibraries" )

119 
__BIONIC_ERRDEF
–
ELIBEXEC
 , 83, "CannotÉxecá sharedÜibrary directly" )

120 
__BIONIC_ERRDEF
–
EILSEQ
 , 84, "Illegal byte sequence" )

121 
__BIONIC_ERRDEF
–
ERESTART
 , 85, "Interrupted system call should beÑestarted" )

122 
__BIONIC_ERRDEF
–
ESTRPIPE
 , 86, "StreamsÖipeÉrror" )

123 
__BIONIC_ERRDEF
–
EUSERS
 , 87, "Too many users" )

124 
__BIONIC_ERRDEF
–
ENOTSOCK
 , 88, "Socket operation onÇon-socket" )

125 
__BIONIC_ERRDEF
–
EDESTADDRREQ
 , 89, "DestinationáddressÑequired" )

126 
__BIONIC_ERRDEF
–
EMSGSIZE
 , 90, "MessageÅooÜong" )

127 
__BIONIC_ERRDEF
–
EPROTOTYPE
 , 91, "Protocol wrongÅype for socket" )

128 
__BIONIC_ERRDEF
–
ENOPROTOOPT
 , 92, "ProtocolÇotávailable" )

129 
__BIONIC_ERRDEF
–
EPROTONOSUPPORT
, 93, "ProtocolÇot supported" )

130 
__BIONIC_ERRDEF
–
ESOCKTNOSUPPORT
, 94, "SocketÅypeÇot supported" )

131 
__BIONIC_ERRDEF
–
EOPNOTSUPP
 , 95, "OperationÇot supported onÅransportÉndpoint" )

132 
__BIONIC_ERRDEF
–
EPFNOSUPPORT
 , 96, "Protocol familyÇot supported" )

133 
__BIONIC_ERRDEF
–
EAFNOSUPPORT
 , 97, "Address familyÇot supported byÖrotocol" )

134 
__BIONIC_ERRDEF
–
EADDRINUSE
 , 98, "Addressálready in use" )

135 
__BIONIC_ERRDEF
–
EADDRNOTAVAIL
 , 99, "CannotássignÑequestedáddress" )

136 
__BIONIC_ERRDEF
–
ENETDOWN
 , 100, "Network is down" )

137 
__BIONIC_ERRDEF
–
ENETUNREACH
 , 101, "Network is unreachable" )

138 
__BIONIC_ERRDEF
–
ENETRESET
 , 102, "Network dropped connection because ofÑeset" )

139 
__BIONIC_ERRDEF
–
ECONNABORTED
 , 103, "Software caused connectionábort" )

140 
__BIONIC_ERRDEF
–
ECONNRESET
 , 104, "ConnectionÑeset byÖeer" )

141 
__BIONIC_ERRDEF
–
ENOBUFS
 , 105, "No buffer spaceávailable" )

142 
__BIONIC_ERRDEF
–
EISCONN
 , 106, "TransportÉndpoint isálready connected" )

143 
__BIONIC_ERRDEF
–
ENOTCONN
 , 107, "TransportÉndpoint isÇot connected" )

144 
__BIONIC_ERRDEF
–
ESHUTDOWN
 , 108, "Cannot sendáfterÅransportÉndpoint shutdown" )

145 
__BIONIC_ERRDEF
–
ETOOMANYREFS
 , 109, "Too manyÑeferences: cannot splice" )

146 
__BIONIC_ERRDEF
–
ETIMEDOUT
 , 110, "ConnectionÅimed out" )

147 
__BIONIC_ERRDEF
–
ECONNREFUSED
 , 111, "ConnectionÑefused" )

148 
__BIONIC_ERRDEF
–
EHOSTDOWN
 , 112, "Host is down" )

149 
__BIONIC_ERRDEF
–
EHOSTUNREACH
 , 113, "NoÑouteÅo host" )

150 
__BIONIC_ERRDEF
–
EALREADY
 , 114, "Operationálready inÖrogress" )

151 
__BIONIC_ERRDEF
–
EINPROGRESS
 , 115, "OperationÇow inÖrogress" )

152 
__BIONIC_ERRDEF
–
ESTALE
 , 116, "Stale NFS file handle" )

153 
__BIONIC_ERRDEF
–
EUCLEAN
 , 117, "StructureÇeeds cleaning" )

154 
__BIONIC_ERRDEF
–
ENOTNAM
 , 118, "Notá XENIXÇamedÅype file" )

155 
__BIONIC_ERRDEF
–
ENAVAIL
 , 119, "No XENIX semaphoresávailable" )

156 
__BIONIC_ERRDEF
–
EISNAM
 , 120, "IsáÇamedÅype file" )

157 
__BIONIC_ERRDEF
–
EREMOTEIO
 , 121, "Remote I/OÉrror" )

158 
__BIONIC_ERRDEF
–
EDQUOT
 , 122, "QuotaÉxceeded" )

159 
__BIONIC_ERRDEF
–
ENOMEDIUM
 , 123, "No medium found" )

160 
__BIONIC_ERRDEF
–
EMEDIUMTYPE
 , 124, "Wrong mediumÅype" )

161 
__BIONIC_ERRDEF
–
ECANCELED
 , 125, "Operation Canceled" )

162 
__BIONIC_ERRDEF
–
ENOKEY
 , 126, "Required keyÇotávailable" )

163 
__BIONIC_ERRDEF
–
EKEYEXPIRED
 , 127, "Key hasÉxpired" )

164 
__BIONIC_ERRDEF
–
EKEYREVOKED
 , 128, "Key has beenÑevoked" )

165 
__BIONIC_ERRDEF
–
EKEYREJECTED
 , 129, "Key wasÑejected by service" )

166 
__BIONIC_ERRDEF
–
EOWNERDEAD
 , 130, "Owner died" )

167 
__BIONIC_ERRDEF
–
ENOTRECOVERABLE
, 131, "StateÇotÑecoverable" )

170 
__BIONIC_ERRDEF
–
EFTYPE
, 1000, "Stupid CÜibrary hack !!" )

172 #unde‡
__BIONIC_ERRDEF


	@sys/_sigdefs.h

34 #i‚de‡
__BIONIC_SIGDEF


35 #îr‹ 
__BIONIC_SIGDEF
 
nŸ
 
deföed


38 
__BIONIC_SIGDEF
(
HUP
,1,"Hangup")

39 
__BIONIC_SIGDEF
(
INT
,2,"Interrupt")

40 
__BIONIC_SIGDEF
(
QUIT
,3,"Quit")

41 
__BIONIC_SIGDEF
(
ILL
,4,"Illegal instruction")

42 
__BIONIC_SIGDEF
(
TRAP
,5,"Trap")

43 
__BIONIC_SIGDEF
(
ABRT
,6,"Aborted")

44 
__BIONIC_SIGDEF
(
BUS
,7,"BusÉrror")

45 
__BIONIC_SIGDEF
(
FPE
,8,"FloatingÖointÉxception")

46 
__BIONIC_SIGDEF
(
KILL
,9,"Killed")

47 
__BIONIC_SIGDEF
(
USR1
,10,"User signal 1")

48 
__BIONIC_SIGDEF
(
SEGV
,11,"Segmentation fault")

49 
__BIONIC_SIGDEF
(
USR2
,12,"User signal 2")

50 
__BIONIC_SIGDEF
(
PIPE
,13,"BrokenÖipe")

51 
__BIONIC_SIGDEF
(
ALRM
,14,"Alarm clock")

52 
__BIONIC_SIGDEF
(
TERM
,15,"Terminated")

53 
__BIONIC_SIGDEF
(
STKFLT
,16,"Stack fault")

54 
__BIONIC_SIGDEF
(
CHLD
,17,"ChildÉxited")

55 
__BIONIC_SIGDEF
(
CONT
,18,"Continue")

56 
__BIONIC_SIGDEF
(
STOP
,19,"Stopped (signal)")

57 
__BIONIC_SIGDEF
(
TSTP
,20,"Stopped")

58 
__BIONIC_SIGDEF
(
TTIN
,21,"Stopped (tty input)")

59 
__BIONIC_SIGDEF
(
TTOU
,22,"Stopper (tty output)")

60 
__BIONIC_SIGDEF
(
URG
,23,"Urgent I/O condition")

61 
__BIONIC_SIGDEF
(
XCPU
,24,"CPUÅimeÜimitÉxceeded")

62 
__BIONIC_SIGDEF
(
XFSZ
,25,"File sizeÜimitÉxceeded")

63 
__BIONIC_SIGDEF
(
VTALRM
,26,"VirtualÅimerÉxpired")

64 
__BIONIC_SIGDEF
(
PROF
,27,"ProfilingÅimerÉxpired")

65 
__BIONIC_SIGDEF
(
WINCH
,28,"Window size changed")

66 
__BIONIC_SIGDEF
(
IO
,29,"I/OÖossible")

67 
__BIONIC_SIGDEF
(
PWR
,30,"Power failure")

68 
__BIONIC_SIGDEF
(
SYS
,31,"Bad system call")

70 #unde‡
__BIONIC_SIGDEF


	@sys/_system_properties.h

29 #i‚de‡
_INCLUDE_SYS__SYSTEM_PROPERTIES_H


30 
	#_INCLUDE_SYS__SYSTEM_PROPERTIES_H


	)

32 #i‚de‡
_REALLY_INCLUDE_SYS__SYSTEM_PROPERTIES_H_


33 
you
 
should
 #ö˛udê
	~<sys/sy°em_¥›îtõs.h
> 
	gö°ód


35 
	~<sys/sy°em_¥›îtõs.h
>

37 
¥›_¨ó
 
	t¥›_¨ó
;

38 
¥›_msg
 
	t¥›_msg
;

40 
	#PROP_AREA_MAGIC
 0x504f5250

	)

41 
	#PROP_AREA_VERSION
 0x45434f76

	)

43 
	#PROP_SERVICE_NAME
 "¥›îty_£rvi˚"

	)

48 
	#TOC_NAME_LEN
(
toc
Ë(—ocË>> 24)

	)

49 
	#TOC_TO_INFO
(
¨ó
, 
toc
Ë((
¥›_öfo
*Ë(((*Ë¨óË+ (—ocË& 0xFFFFFF)))

	)

51 
	s¥›_¨ó
 {

52 vﬁ©ûê
	mcou¡
;

53 vﬁ©ûê
	m£rül
;

54 
	mmagic
;

55 
	mvîsi⁄
;

56 
	mª£rved
[4];

57 
	mtoc
[1];

60 
	#SERIAL_VALUE_LEN
(
£rül
Ë((£rülË>> 24)

	)

61 
	#SERIAL_DIRTY
(
£rül
Ë((£rülË& 1)

	)

63 
	s¥›_öfo
 {

64 
	m«me
[
PROP_NAME_MAX
];

65 vﬁ©ûê
	m£rül
;

66 
	mvÆue
[
PROP_VALUE_MAX
];

69 
	s¥›_msg


71 
	mcmd
;

72 
	m«me
[
PROP_NAME_MAX
];

73 
	mvÆue
[
PROP_VALUE_MAX
];

76 
	#PROP_MSG_SETPROP
 1

	)

102 
	#PROP_PATH_RAMDISK_DEFAULT
 "/deÁu….¥›"

	)

103 
	#PROP_PATH_SYSTEM_BUILD
 "/sy°em/buûd.¥›"

	)

104 
	#PROP_PATH_SYSTEM_DEFAULT
 "/sy°em/deÁu….¥›"

	)

105 
	#PROP_PATH_LOCAL_OVERRIDE
 "/d©a/loˇl.¥›"

	)

	@sys/_types.h

34 #i‚de‡
_SYS__TYPES_H_


35 
	#_SYS__TYPES_H_


	)

37 #unde‡
__KERNEL_STRICT_NAMES


38 
	#__KERNEL_STRICT_NAMES
 1

	)

40 
	~<machöe/_ty≥s.h
>

42 
	t__˝uid_t
;

43 
__öt32_t
 
	t__dev_t
;

44 
__uöt32_t
 
	t__fix±_t
;

45 
__uöt32_t
 
	t__gid_t
;

46 
__uöt32_t
 
	t__id_t
;

47 
__uöt32_t
 
	t__ö_addr_t
;

48 
__uöt16_t
 
	t__ö_p‹t_t
;

49 
__uöt32_t
 
	t__öo_t
;

50 
	t__key_t
;

51 
__uöt32_t
 
	t__mode_t
;

52 
__uöt32_t
 
	t__∆ök_t
;

53 
__öt32_t
 
	t__pid_t
;

54 
__uöt64_t
 
	t__æim_t
;

55 
__uöt16_t
 
	t__ß_Ámûy_t
;

56 
__öt32_t
 
	t__£gsz_t
;

57 
__uöt32_t
 
	t__sockÀn_t
;

58 
__öt32_t
 
	t__swblk_t
;

59 
__uöt32_t
 
	t__uid_t
;

60 
__uöt32_t
 
	t__u£c⁄ds_t
;

61 
__öt32_t
 
	t__su£c⁄ds_t
;

68 
	m__mb°©e8
[128];

69 
__öt64_t
 
	m__mb°©eL
;

70 } 
	t__mb°©e_t
;

75 
	#__KERNEL_STRICT_NAMES
 1

	)

	@sys/_wchar_limits.h

28 #i‚de‡
_SYS__WCHAR_LIMITS_H


29 
	#_SYS__WCHAR_LIMITS_H


	)

31 
	~<™droid/≠i-Àvñ.h
>

73 #i‡!
deföed
(
WCHAR_MIN
)

75 #i‡
deföed
(
_WCHAR_IS_8BIT
Ë&& deföed(
__¨m__
Ë&& 
__ANDROID_API__
 < 9

76 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
__STDC_LIMIT_MACROS
)

77 
	#WCHAR_MIN
 0

	)

78 
	#WCHAR_MAX
 255

	)

80 
	#WCHAR_MIN
 (-2147483647 - 1)

	)

81 
	#WCHAR_MAX
 (2147483647)

	)

83 #ñi‡
deföed
(
_WCHAR_IS_ALWAYS_SIGNED
)

84 
	#WCHAR_MIN
 (-2147483647 - 1)

	)

85 
	#WCHAR_MAX
 (2147483647)

	)

89 
	#WCHAR_MAX
 
__WCHAR_MAX__


	)

92 #i‡
deföed
(
__WCHAR_UNSIGNED__
)

93 
	#WCHAR_MIN
 
L
'\0'

	)

95 
	#WCHAR_MIN
 (-(
WCHAR_MAX
Ë- 1)

	)

	@sys/atomics.h

28 #i‚de‡
_SYS_ATOMICS_H


29 
	#_SYS_ATOMICS_H


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/time.h
>

34 
	g__BEGIN_DECLS


47 
	#__ATOMIC_INLINE__
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

49 
__ATOMIC_INLINE__
 

50 
	$__©omic_cmpxchg
(
ﬁd
, 
_√w
, vﬁ©ûê*
±r
)

53  
	`__sync_vÆ_com∑ª_™d_sw≠
(
±r
, 
ﬁd
, 
_√w
) != old;

54 
	}
}

56 
__ATOMIC_INLINE__
 

57 
	$__©omic_sw≠
(
_√w
, vﬁ©ûê*
±r
)

59 
¥ev
;

61 
¥ev
 = *
±r
;

62 } 
	`__sync_vÆ_com∑ª_™d_sw≠
(
±r
, 
¥ev
, 
_√w
) !=Örev);

63  
¥ev
;

64 
	}
}

66 
__ATOMIC_INLINE__
 

67 
	$__©omic_dec
(vﬁ©ûê*
±r
)

69  
	`__sync_„tch_™d_sub
 (
±r
, 1);

70 
	}
}

72 
__ATOMIC_INLINE__
 

73 
	$__©omic_öc
(vﬁ©ûê*
±r
)

75  
	`__sync_„tch_™d_add
 (
±r
, 1);

76 
	}
}

79 
__fuãx_waô
(vﬁ©ûê*
·x
, 
vÆ
, c⁄° 
time•ec
 *
timeout
);

80 
__fuãx_wake
(vﬁ©ûê*
·x
, 
cou¡
);

82 
	g__END_DECLS


	@sys/cachectl.h

28 #i‚de‡
_SYS_CACHECTL_H


29 
	#_SYS_CACHECTL_H
 1

	)

31 #ifde‡
__mùs__


32 
	~<asm/ˇche˘l.h
>

33 
__ˇche˘l
 (*
addr
, 
__c⁄°
 
nbyãs
, __c⁄° 
›
);

34 
_Êush_ˇche
 (*
addr
, 
__c⁄°
 
nbyãs
, __c⁄° 
›
);

	@sys/cdefs.h

37 #i‚def 
_SYS_CDEFS_H_


38 
	#_SYS_CDEFS_H_


	)

51 #ifde‡
__GNUC__


52 
	#__GNUC_PREREQ__
(
x
, 
y
) \

53 ((
__GNUC__
 =(
x
Ë&& 
__GNUC_MINOR__
 >(
y
)) || \

54 (
__GNUC__
 > (
x
)))

	)

56 
	#__GNUC_PREREQ__
(
x
, 
y
Ë0

	)

59 
	~<sys/cdefs_ñf.h
>

61 #i‡
deföed
(
__˝lu•lus
)

62 
	#__BEGIN_DECLS
 "C" {

	)

63 
	#__END_DECLS
 }

	)

64 
	#__°©ic_ˇ°
(
x
,
y
Ë
°©ic_ˇ°
<x>(y)

	)

66 
	#__BEGIN_DECLS


	)

67 
	#__END_DECLS


	)

68 
	#__°©ic_ˇ°
(
x
,
y
Ë(x)
	)
y

79 
	#___STRING
(
x
Ë
	`__STRING
(x)

	)

80 
	#___CONCAT
(
x
,
y
Ë
	`__CONCAT
(x,y)

	)

82 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

83 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

84 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

85 
	#__STRING
(
x
Ë#x

	)

87 
	#__c⁄°
 c⁄°

	)

88 
	#__sig√d
 sig√d

	)

89 
	#__vﬁ©ûe
 vﬁ©ûe

	)

90 #i‡
deföed
(
__˝lu•lus
)

91 
	#__ölöe
 
ölöe


	)

93 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__löt__
)

94 
	#__ölöe


	)

99 
	#__P
(
¥Ÿos
Ë(Ë

	)

100 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

101 
	#__STRING
(
x
Ë"x"

	)

103 #i‚de‡
__GNUC__


104 
	#__c⁄°


	)

105 
	#__ölöe


	)

106 
	#__sig√d


	)

107 
	#__vﬁ©ûe


	)

116 #i‚def 
NO_ANSI_KEYWORDS


117 c⁄° 
__c⁄°


	)

118 
	#ölöe
 
__ölöe


	)

119 sig√d 
__sig√d


	)

120 vﬁ©ûê
__vﬁ©ûe


	)

127 #ifde‡
__AUDIT__


128 
	#__ac⁄°
 
__c⁄°


	)

130 
	#__ac⁄°


	)

142 
	#__UNCONST
(
a
Ë((*)()(c⁄° *)◊))

	)

148 #i‡!
__GNUC_PREREQ__
(2, 0)

149 
	#__exãnsi⁄__


	)

160 #i‡!
__GNUC_PREREQ__
(2, 5)

161 
	#__©åibuã__
(
x
Ë

	)

162 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

163 
	#__dód
 
__vﬁ©ûe


	)

164 
	#__puª
 
__c⁄°


	)

169 #i‚de‡
__dód


170 
	#__dód


	)

171 
	#__puª


	)

174 #i‡
__GNUC_PREREQ__
(2, 7)

175 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

177 
	#__unu£d


	)

180 #i‡
__GNUC_PREREQ__
(3, 1)

181 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

183 
	#__u£d


	)

186 #i‡
__GNUC_PREREQ__
(2, 7)

187 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

188 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

189 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

190 #ñi‡
deföed
(
__löt__
)

191 
	#__∑cked


	)

192 
	#__Æig√d
(
x
Ë

	)

193 
	#__£˘i⁄
(
x
Ë

	)

195 
	#__∑cked
 
îr‹
: 
no
 
__∑cked
 
this
 
compûî


	)

196 
	#__Æig√d
(
x
Ë
îr‹
: 
no
 
__Æig√d
 
this
 
compûî


	)

197 
	#__£˘i⁄
(
x
Ë
îr‹
: 
no
 
__£˘i⁄
 
this
 
compûî


	)

200 #i‡!
__GNUC_PREREQ__
(2, 8)

201 
	#__exãnsi⁄__


	)

204 #i‡
__GNUC_PREREQ__
(2, 8)

205 
	#__°©emít
(
x
Ë
	`__exãnsi⁄__
(x)

	)

206 #ñi‡
deföed
(
löt
)

207 
	#__°©emít
(
x
Ë(0)

	)

209 
	#__°©emít
(
x
Ë(x)

	)

216 #i‡
deföed
(
__STDC__VERSION__
Ë&& 
__STDC_VERSION__
 >= 199901L

217 
	#__ª°ri˘
 
ª°ri˘


	)

219 #i‡!
__GNUC_PREREQ__
(2, 92)

220 
	#__ª°ri˘


	)

228 #i‡!
deföed
(
__STDC_VERSION__
) || !(__STDC_VERSION__ >= 199901L)

229 #i‡
__GNUC_PREREQ__
(2, 6)

230 
	#__func__
 
__PRETTY_FUNCTION__


	)

231 #ñi‡
__GNUC_PREREQ__
(2, 4)

232 
	#__func__
 
__FUNCTION__


	)

234 
	#__func__
 ""

	)

238 #i‡
deföed
(
_KERNEL
)

239 #i‡
deföed
(
NO_KERNEL_RCSIDS
)

240 #unde‡
__KERNEL_RCSID


241 
	#__KERNEL_RCSID
(
_n
, 
_s
Ë

	)

245 #i‡!
deföed
(
_STANDALONE
Ë&& !deföed(
_KERNEL
)

246 #ifde‡
__GNUC__


247 
	#__RENAME
(
x
Ë
	`___RENAME
(x)

	)

249 #ifde‡
__löt__


250 
	#__RENAME
(
x
Ë
	`__symbﬁª«me
(x)

	)

256 
	#__RENAME
(
x
Ë
no
 
ª«mög
 
ö
 
kî√l
 
‹
 
°™dÆ⁄e
 
ívú⁄mít


	)

264 #i‡
__GNUC_PREREQ__
(2, 95)

265 
	#__ö¢_b¨rõr
(Ë
__asm
 
	`__vﬁ©ûe
("":::"mem‹y")

	)

267 
	#__ö¢_b¨rõr
(Ë

	)

298 #i‡
__GNUC_PREREQ__
(2, 96)

299 
	#__¥edi˘_åue
(
exp
Ë
	`__buûtö_ex≥˘
(”xpË!0, 1)

	)

300 
	#__¥edi˘_Ál£
(
exp
Ë
	`__buûtö_ex≥˘
(”xpË!0, 0)

	)

302 
	#__¥edi˘_åue
(
exp
Ë”xp)

	)

303 
	#__¥edi˘_Ál£
(
exp
Ë”xp)

	)

306 #i‡
__GNUC_PREREQ__
(2, 96)

307 
	#__n‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

308 
	#__mÆlocfunc
 
	`__©åibuã__
((
mÆloc
))

	)

310 
	#__n‹ëu∫


	)

311 
	#__mÆlocfunc


	)

358 
	#__lök_£t_f‹óch
(
pv¨
, 
£t
) \

359 
pv¨
 = 
	`__lök_£t_°¨t
(
£t
);Öv¨ < 
	`__lök_£t_íd
(£t);Öv¨++)

	)

361 
	#__lök_£t_íåy
(
£t
, 
idx
Ë(
	`__lök_£t_begö
(£t)[idx])

	)

368 
	#__FBSDID
(
s
Ë
__hack


	)

394 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

395 #unde‡
_POSIX_C_SOURCE


396 
	#_POSIX_C_SOURCE
 199009

	)

400 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

401 #unde‡
_POSIX_C_SOURCE


402 
	#_POSIX_C_SOURCE
 199209

	)

406 #ifde‡
_XOPEN_SOURCE


407 #i‡
_XOPEN_SOURCE
 - 0 >= 700

408 
	#__XSI_VISIBLE
 700

	)

409 #unde‡
_POSIX_C_SOURCE


410 
	#_POSIX_C_SOURCE
 200809

	)

411 #ñi‡
_XOPEN_SOURCE
 - 0 >= 600

412 
	#__XSI_VISIBLE
 600

	)

413 #unde‡
_POSIX_C_SOURCE


414 
	#_POSIX_C_SOURCE
 200112

	)

415 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

416 
	#__XSI_VISIBLE
 500

	)

417 #unde‡
_POSIX_C_SOURCE


418 
	#_POSIX_C_SOURCE
 199506

	)

426 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

427 
	#_POSIX_C_SOURCE
 198808

	)

429 #ifde‡
_POSIX_C_SOURCE


430 #i‡
_POSIX_C_SOURCE
 >= 200809

431 
	#__POSIX_VISIBLE
 200809

	)

432 
	#__ISO_C_VISIBLE
 1999

	)

433 #ñi‡
_POSIX_C_SOURCE
 >= 200112

434 
	#__POSIX_VISIBLE
 200112

	)

435 
	#__ISO_C_VISIBLE
 1999

	)

436 #ñi‡
_POSIX_C_SOURCE
 >= 199506

437 
	#__POSIX_VISIBLE
 199506

	)

438 
	#__ISO_C_VISIBLE
 1990

	)

439 #ñi‡
_POSIX_C_SOURCE
 >= 199309

440 
	#__POSIX_VISIBLE
 199309

	)

441 
	#__ISO_C_VISIBLE
 1990

	)

442 #ñi‡
_POSIX_C_SOURCE
 >= 199209

443 
	#__POSIX_VISIBLE
 199209

	)

444 
	#__ISO_C_VISIBLE
 1990

	)

445 #ñi‡
_POSIX_C_SOURCE
 >= 199009

446 
	#__POSIX_VISIBLE
 199009

	)

447 
	#__ISO_C_VISIBLE
 1990

	)

449 
	#__POSIX_VISIBLE
 198808

	)

450 
	#__ISO_C_VISIBLE
 0

	)

465 #i‡
deföed
(
_ANSI_SOURCE
)

466 
	#__POSIX_VISIBLE
 0

	)

467 
	#__XSI_VISIBLE
 0

	)

468 
	#__BSD_VISIBLE
 0

	)

469 
	#__ISO_C_VISIBLE
 1990

	)

470 #ñi‡
deföed
(
_C99_SOURCE
)

471 
	#__POSIX_VISIBLE
 0

	)

472 
	#__XSI_VISIBLE
 0

	)

473 
	#__BSD_VISIBLE
 0

	)

474 
	#__ISO_C_VISIBLE
 1999

	)

476 
	#__POSIX_VISIBLE
 200809

	)

477 
	#__XSI_VISIBLE
 700

	)

478 
	#__BSD_VISIBLE
 1

	)

479 
	#__ISO_C_VISIBLE
 1999

	)

486 #i‚de‡
__XPG_VISIBLE


487 
	#__XPG_VISIBLE
 700

	)

489 #i‚de‡
__POSIX_VISIBLE


490 
	#__POSIX_VISIBLE
 200809

	)

492 #i‚de‡
__ISO_C_VISIBLE


493 
	#__ISO_C_VISIBLE
 1999

	)

495 #i‚de‡
__BSD_VISIBLE


496 
	#__BSD_VISIBLE
 1

	)

499 
	#__BIONIC__
 1

	)

500 
	~<™droid/≠i-Àvñ.h
>

517 #i‡
deföed
(
__ANDROID__
Ë&& !deföed(
__LP64__
Ë&& deföed–
__¨m__
)

518 
	#__NDK_FPABI__
 
	`__©åibuã__
((
	`pcs
("Øpcs")))

	)

520 
	#__NDK_FPABI__


	)

523 #i‡(!
deföed
(
_NDK_MATH_NO_SOFTFP
Ë|| _NDK_MATH_NO_SOFTFP !1Ë&& !deföed(
__˛™g__
)

524 
	#__NDK_FPABI_MATH__
 
__NDK_FPABI__


	)

526 
	#__NDK_FPABI_MATH__


	)

	@sys/cdefs_elf.h

30 #i‚de‡
_SYS_CDEFS_ELF_H_


31 
	#_SYS_CDEFS_ELF_H_


	)

33 #ifde‡
__LEADING_UNDERSCORE


34 
	#_C_LABEL
(
x
Ë
	`__CONCAT
(
_
,x)

	)

35 
	#_C_LABEL_STRING
(
x
Ë"_" 
	)
x

37 
	#_C_LABEL
(
x
Ë
	)
x

38 
	#_C_LABEL_STRING
(
x
Ë
	)
x

41 #i‡
__STDC__


42 
	#___RENAME
(
x
Ë
	`__asm__
(
	`___STRING
(
	`_C_LABEL
(x)))

	)

44 #ifde‡
__LEADING_UNDERSCORE


45 
	#___RENAME
(
x
Ë
	`____RENAME
(
_
 x)

	)

46 
	#____RENAME
(
x
Ë
	`__asm__
(
	`___STRING
(x))

	)

48 
	#___RENAME
(
x
Ë
	`__asm__
(
	`___STRING
(x))

	)

52 
	#__ödr_ª„ªn˚
(
sym
,
Æüs
Ë

	)

54 #i‡
__STDC__


55 
	#__°r⁄g_Æüs
(
Æüs
,
sym
) \

56 
	`__asm__
(".globÆ " 
	`_C_LABEL_STRING
(#alias) "\n" \

57 
	`_C_LABEL_STRING
(#ÆüsË" = " _C_LABEL_STRING(#sym));

	)

59 
	#__wók_Æüs
(
Æüs
,
sym
) \

60 
	`__asm__
(".wók " 
	`_C_LABEL_STRING
(#alias) "\n" \

61 
	`_C_LABEL_STRING
(#ÆüsË" = " _C_LABEL_STRING(#sym));

	)

62 
	#__wók_exã∫
(
sym
) \

63 
	`__asm__
(".wók " 
	`_C_LABEL_STRING
(#sym));

	)

64 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

65 
	`__asm__
(".£˘i⁄ .gnu.w¨nög." #sym "\n\t.asciò\"" 
msg
 "\"\n\t.ãxt");

	)

69 #ifde‡
__LEADING_UNDERSCORE


70 
	#__wók_Æüs
(
Æüs
,
sym
Ë
	`___wók_Æüs
(
_
álüs,_ sym)

	)

71 
	#___wók_Æüs
(
Æüs
,
sym
) \

72 
	`__asm__
(".wókálüs\«lü†sym");

	)

74 
	#__wók_Æüs
(
Æüs
,
sym
) \

75 
	`__asm__
(".wókálüs\«lü†sym");

	)

77 #ifde‡
__LEADING_UNDERSCORE


78 
	#__wók_exã∫
(
sym
Ë
	`___wók_exã∫
(
_
 sym)

	)

79 
	#___wók_exã∫
(
sym
) \

80 
	`__asm__
(".wók sym");

	)

82 
	#__wók_exã∫
(
sym
) \

83 
	`__asm__
(".wók sym");

	)

85 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

86 
	`__asm__
(".£˘i⁄ .gnu.w¨nög.sym\n\t.asciòmsg ; .ãxt");

	)

90 #i‡
__STDC__


91 
	#__SECTIONSTRING
(
_£c
, 
_°r
) \

92 
	`__asm__
(".£˘i⁄ " #_£¯"\n\t.asciz \"" 
_°r
 "\"\n\t.¥evious")

	)

94 
	#__SECTIONSTRING
(
_£c
, 
_°r
) \

95 
	`__asm__
(".£˘i⁄ _£c\n\t.asciz _°r\n\t.¥evious")

	)

99 
	#__LIBC_HIDDEN__
 \

100 
	`__©åibuã__
 ((
	`visibûôy
 ("hiddí")))

	)

102 
	#__IDSTRING
(
_n
,
_s
Ë
	`__SECTIONSTRING
(.
idít
,_s)

	)

104 
	#__RCSID
(
_s
Ë
	`__IDSTRING
(
rcsid
,_s)

	)

105 
	#__SCCSID
(
_s
)

	)

106 
	#__SCCSID2
(
_s
)

	)

108 
	#__COPYRIGHT
(
_s
Ë
	`__SECTIONSTRING
(.
c›yright
,_s)

	)

110 
	#__COPYRIGHT
(
_s
) \

111 c⁄° 
c›yright
[] \

112 
	`__©åibuã__
((
__unu£d__
,
	`__£˘i⁄__
(".c›yright"))Ë
_s


	)

115 
	#__KERNEL_RCSID
(
_n
, 
_s
Ë
	`__RCSID
(_s)

	)

116 
	#__KERNEL_SCCSID
(
_n
, 
_s
)

	)

118 
	#__KERNEL_COPYRIGHT
(
_n
, 
_s
Ë
	`__COPYRIGHT
(_s)

	)

120 
	#__KERNEL_COPYRIGHT
(
_n
, 
_s
Ë
	`__SECTIONSTRING
(.
c›yright
, _s)

	)

123 #i‚de‡
__löt__


124 
	#__lök_£t_make_íåy
(
£t
, 
sym
) \

125 c⁄° * c⁄° 
__lök_£t_
##
£t
##
_sym_
##
sym
 \

126 
	`__£˘i⁄
("lök_£t_" #£tË
__u£d
 = &
sym


	)

127 
	#__lök_£t_make_íåy2
(
£t
, 
sym
, 
n
) \

128 c⁄° * c⁄° 
__lök_£t_
##
£t
##
_sym_
##
sym
##
_
##
n
 \

129 
	`__£˘i⁄
("lök_£t_" #£tË
__u£d
 = &
sym
[
n
]

	)

131 
	#__lök_£t_make_íåy
(
£t
, 
sym
) \

132 c⁄° * c⁄° 
__lök_£t_
##
£t
##
_sym_
##
sym


	)

133 
	#__lök_£t_make_íåy2
(
£t
, 
sym
, 
n
) \

134 c⁄° * c⁄° 
__lök_£t_
##
£t
##
_sym_
##
sym
##
_
##
n


	)

137 
	#__lök_£t_add_ãxt
(
£t
, 
sym
Ë
	`__lök_£t_make_íåy
(£t, sym)

	)

138 
	#__lök_£t_add_rod©a
(
£t
, 
sym
Ë
	`__lök_£t_make_íåy
(£t, sym)

	)

139 
	#__lök_£t_add_d©a
(
£t
, 
sym
Ë
	`__lök_£t_make_íåy
(£t, sym)

	)

140 
	#__lök_£t_add_bss
(
£t
, 
sym
Ë
	`__lök_£t_make_íåy
(£t, sym)

	)

141 
	#__lök_£t_add_ãxt2
(
£t
, 
sym
, 
n
Ë
	`__lök_£t_make_íåy2
(£t, sym,Ç)

	)

142 
	#__lök_£t_add_rod©a2
(
£t
, 
sym
, 
n
Ë
	`__lök_£t_make_íåy2
(£t, sym,Ç)

	)

143 
	#__lök_£t_add_d©a2
(
£t
, 
sym
, 
n
Ë
	`__lök_£t_make_íåy2
(£t, sym,Ç)

	)

144 
	#__lök_£t_add_bss2
(
£t
, 
sym
, 
n
Ë
	`__lök_£t_make_íåy2
(£t, sym,Ç)

	)

146 
	#__lök_£t_de˛
(
£t
, 
±y≥
) \

147 
±y≥
 * c⁄° 
__°¨t_lök_£t_
##
£t
[]; \

148 
±y≥
 * c⁄° 
__°›_lök_£t_
##
£t
[] \

149 

	)

150 
	#__lök_£t_°¨t
(
£t
Ë(
__°¨t_lök_£t_
##£t)

	)

151 
	#__lök_£t_íd
(
£t
Ë(
__°›_lök_£t_
##£t)

	)

153 
	#__lök_£t_cou¡
(
£t
) \

154 (
	`__lök_£t_íd
(
£t
Ë- 
	`__lök_£t_°¨t
(£t))

	)

	@sys/dirent.h

28 #i‚de‡
_SYS_DIRENT_H_


29 
	#_SYS_DIRENT_H_


	)

31 
	~<°döt.h
>

32 
	~<sys/cdefs.h
>

34 
__BEGIN_DECLS


37 
	sdúít
 {

38 
uöt64_t
 
	md_öo
;

39 
öt64_t
 
	md_off
;

40 
	md_ª˛í
;

41 
	md_ty≥
;

42 
	md_«me
[256];

45 
gëdíts
(, 
dúít
 *, );

47 
	g__END_DECLS


	@sys/endian.h

36 #i‚de‡
_SYS_ENDIAN_H_


37 
	#_SYS_ENDIAN_H_


	)

39 
	~<sys/cdefs.h
>

40 
	~<machöe/ídün.h
>

41 
	~<machöe/_ty≥s.h
>

43 
	#_LITTLE_ENDIAN
 1234

	)

44 
	#_BIG_ENDIAN
 4321

	)

45 
	#_PDP_ENDIAN
 3412

	)

47 #i‡
__BSD_VISIBLE


48 
	#LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

49 
	#BIG_ENDIAN
 
_BIG_ENDIAN


	)

50 
	#PDP_ENDIAN
 
_PDP_ENDIAN


	)

51 
	#BYTE_ORDER
 
_BYTE_ORDER


	)

54 #ifde‡
__GNUC__


56 
	#__sw≠16gí
(
x
Ë
	`__°©emít
({ \

57 
__uöt16_t
 
__sw≠16gí_x
 = (
x
); \

59 (
__uöt16_t
)((
__sw≠16gí_x
 & 0xff) << 8 | \

60 (
__sw≠16gí_x
 & 0xff00) >> 8); \

61 })

	)

63 
	#__sw≠32gí
(
x
Ë
	`__°©emít
({ \

64 
__uöt32_t
 
__sw≠32gí_x
 = (
x
); \

66 (
__uöt32_t
)((
__sw≠32gí_x
 & 0xff) << 24 | \

67 (
__sw≠32gí_x
 & 0xff00) << 8 | \

68 (
__sw≠32gí_x
 & 0xff0000) >> 8 | \

69 (
__sw≠32gí_x
 & 0xff000000) >> 24); \

70 })

	)

72 
	#__sw≠64gí
(
x
Ë
	`__°©emít
({ \

73 
__uöt64_t
 
__sw≠64gí_x
 = (
x
); \

75 (
__uöt64_t
)((
__sw≠64gí_x
 & 0xff) << 56 | \

76 (
__sw≠64gí_x
 & 0xff00ULL) << 40 | \

77 (
__sw≠64gí_x
 & 0xff0000ULL) << 24 | \

78 (
__sw≠64gí_x
 & 0xff000000ULL) << 8 | \

79 (
__sw≠64gí_x
 & 0xff00000000ULL) >> 8 | \

80 (
__sw≠64gí_x
 & 0xff0000000000ULL) >> 24 | \

81 (
__sw≠64gí_x
 & 0xff000000000000ULL) >> 40 | \

82 (
__sw≠64gí_x
 & 0xff00000000000000ULL) >> 56); \

83 })

	)

88 
	#__sw≠16gí
(
x
) \

89 (
__uöt16_t
)(((__uöt16_t)(
x
Ë& 0xffË<< 8 | ((__uöt16_t)(xË& 0xff00Ë>> 8)

	)

91 
	#__sw≠32gí
(
x
) \

92 (
__uöt32_t
)(((__uöt32_t)(
x
) & 0xff) << 24 | \

93 ((
__uöt32_t
)(
x
) & 0xff00) << 8 | ((__uint32_t)(x) & 0xff0000) >> 8 |\

94 ((
__uöt32_t
)(
x
Ë& 0xff000000Ë>> 24)

	)

96 
	#__sw≠64gí
(
x
) \

97 (
__uöt64_t
)((((__uöt64_t)(
x
) & 0xff) << 56) | \

98 ((
__uöt64_t
)(
x
) & 0xff00ULL) << 40 | \

99 ((
__uöt64_t
)(
x
) & 0xff0000ULL) << 24 | \

100 ((
__uöt64_t
)(
x
) & 0xff000000ULL) << 8 | \

101 ((
__uöt64_t
)(
x
) & 0xff00000000ULL) >> 8 | \

102 ((
__uöt64_t
)(
x
) & 0xff0000000000ULL) >> 24 | \

103 ((
__uöt64_t
)(
x
) & 0xff000000000000ULL) >> 40 | \

104 ((
__uöt64_t
)(
x
Ë& 0xff00000000000000ULLË>> 56)

	)

114 #ifde‡
MD_SWAP


115 #i‡
__GNUC__


117 
	#__sw≠16
(
x
Ë
	`__°©emít
({ \

118 
__uöt16_t
 
__sw≠16_x
 = (
x
); \

120 
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__sw≠16gí
(
__sw≠16_x
) : \

121 
	`__sw≠16md
(
__sw≠16_x
); \

122 })

	)

124 
	#__sw≠32
(
x
Ë
	`__°©emít
({ \

125 
__uöt32_t
 
__sw≠32_x
 = (
x
); \

127 
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__sw≠32gí
(
__sw≠32_x
) : \

128 
	`__sw≠32md
(
__sw≠32_x
); \

129 })

	)

131 
	#__sw≠64
(
x
Ë
	`__°©emít
({ \

132 
__uöt64_t
 
__sw≠64_x
 = (
x
); \

134 
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__sw≠64gí
(
__sw≠64_x
) : \

135 
	`__sw≠64md
(
__sw≠64_x
); \

136 })

	)

141 
	#__sw≠16
 
__sw≠16gí


	)

142 
	#__sw≠32
 
__sw≠32gí


	)

143 
	#__sw≠64
 
__sw≠64gí


	)

146 
	#__sw≠16_mu…i
(
v
, 
n
) do { \

147 
__size_t
 
__sw≠16_mu…i_n
 = (
n
); \

148 
__uöt16_t
 *
__sw≠16_mu…i_v
 = (
v
); \

150 
__sw≠16_mu…i_n
) { \

151 *
__sw≠16_mu…i_v
 = 
	`sw≠16
(*__swap16_multi_v); \

152 
__sw≠16_mu…i_v
++; \

153 
__sw≠16_mu…i_n
--; \

155 } 0)

	)

157 #i‡
__BSD_VISIBLE


158 
	#sw≠16
 
__sw≠16


	)

159 
	#sw≠32
 
__sw≠32


	)

160 
	#sw≠64
 
__sw≠64


	)

161 
	#sw≠16_mu…i
 
__sw≠16_mu…i


	)

163 
__BEGIN_DECLS


164 
__uöt64_t
 
htobe64
(__uint64_t);

165 
__uöt32_t
 
htobe32
(__uint32_t);

166 
__uöt16_t
 
htobe16
(__uint16_t);

167 
__uöt64_t
 
bëoh64
(__uint64_t);

168 
__uöt32_t
 
bëoh32
(__uint32_t);

169 
__uöt16_t
 
bëoh16
(__uint16_t);

171 
__uöt64_t
 
htﬁe64
(__uint64_t);

172 
__uöt32_t
 
htﬁe32
(__uint32_t);

173 
__uöt16_t
 
htﬁe16
(__uint16_t);

174 
__uöt64_t
 
Àtoh64
(__uint64_t);

175 
__uöt32_t
 
Àtoh32
(__uint32_t);

176 
__uöt16_t
 
Àtoh16
(__uint16_t);

177 
	g__END_DECLS


180 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


183 #i‚de‡
_QUAD_HIGHWORD


184 
	#_QUAD_HIGHWORD
 1

	)

186 #i‚de‡
_QUAD_LOWWORD


187 
	#_QUAD_LOWWORD
 0

	)

190 #i‡
__BSD_VISIBLE


191 
	#htobe16
 
__sw≠16


	)

192 
	#htobe32
 
__sw≠32


	)

193 
	#htobe64
 
__sw≠64


	)

194 
	#bëoh16
 
__sw≠16


	)

195 
	#bëoh32
 
__sw≠32


	)

196 
	#bëoh64
 
__sw≠64


	)

198 
	#htﬁe16
(
x
Ë(x)

	)

199 
	#htﬁe32
(
x
Ë(x)

	)

200 
	#htﬁe64
(
x
Ë(x)

	)

201 
	#Àtoh16
(
x
Ë(x)

	)

202 
	#Àtoh32
(
x
Ë(x)

	)

203 
	#Àtoh64
(
x
Ë(x)

	)

206 
	#ht⁄s
(
x
Ë
	`__sw≠16
(x)

	)

207 
	#ht⁄l
(
x
Ë
	`__sw≠32
(x)

	)

208 
	#¡ohs
(
x
Ë
	`__sw≠16
(x)

	)

209 
	#¡ohl
(
x
Ë
	`__sw≠32
(x)

	)

212 
	#¡ohq
(
x
Ë
	`__sw≠64
(x)

	)

213 
	#ht⁄q
(
x
Ë
	`__sw≠64
(x)

	)

215 
	#__LITTLE_ENDIAN_BITFIELD


	)

219 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


222 #i‚de‡
_QUAD_HIGHWORD


223 
	#_QUAD_HIGHWORD
 0

	)

225 #i‚de‡
_QUAD_LOWWORD


226 
	#_QUAD_LOWWORD
 1

	)

229 #i‡
__BSD_VISIBLE


230 
	#htﬁe16
 
__sw≠16


	)

231 
	#htﬁe32
 
__sw≠32


	)

232 
	#htﬁe64
 
__sw≠64


	)

233 
	#Àtoh16
 
__sw≠16


	)

234 
	#Àtoh32
 
__sw≠32


	)

235 
	#Àtoh64
 
__sw≠64


	)

237 
	#htobe16
(
x
Ë(x)

	)

238 
	#htobe32
(
x
Ë(x)

	)

239 
	#htobe64
(
x
Ë(x)

	)

240 
	#bëoh16
(
x
Ë(x)

	)

241 
	#bëoh32
(
x
Ë(x)

	)

242 
	#bëoh64
(
x
Ë(x)

	)

245 
	#ht⁄s
(
x
Ë(x)

	)

246 
	#ht⁄l
(
x
Ë(x)

	)

247 
	#¡ohs
(
x
Ë(x)

	)

248 
	#¡ohl
(
x
Ë(x)

	)

251 
	#¡ohq
(
x
Ë(x)

	)

252 
	#ht⁄q
(
x
Ë(x)

	)

254 
	#__BIG_ENDIAN_BITFIELD


	)

258 #i‡
__BSD_VISIBLE


259 
	#NTOHL
(
x
Ë(xË
	`¡ohl
((
u_öt32_t
)(x))

	)

260 
	#NTOHS
(
x
Ë(xË
	`¡ohs
((
u_öt16_t
)(x))

	)

261 
	#HTONL
(
x
Ë(xË
	`ht⁄l
((
u_öt32_t
)(x))

	)

262 
	#HTONS
(
x
Ë(xË
	`ht⁄s
((
u_öt16_t
)(x))

	)

266 
	#__BYTE_ORDER
 
_BYTE_ORDER


	)

267 #i‚de‡ 
__LITTLE_ENDIAN


268 
	#__LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

270 #i‚de‡ 
__BIG_ENDIAN


271 
	#__BIG_ENDIAN
 
_BIG_ENDIAN


	)

	@sys/epoll.h

28 #i‚de‡
_SYS_EPOLL_H_


29 
	#_SYS_EPOLL_H_


	)

31 
	~<sys/cdefs.h
>

33 
	g__BEGIN_DECLS


35 
	#EPOLLIN
 0x00000001

	)

36 
	#EPOLLPRI
 0x00000002

	)

37 
	#EPOLLOUT
 0x00000004

	)

38 
	#EPOLLERR
 0x00000008

	)

39 
	#EPOLLHUP
 0x00000010

	)

40 
	#EPOLLRDNORM
 0x00000040

	)

41 
	#EPOLLRDBAND
 0x00000080

	)

42 
	#EPOLLWRNORM
 0x00000100

	)

43 
	#EPOLLWRBAND
 0x00000200

	)

44 
	#EPOLLMSG
 0x00000400

	)

45 
	#EPOLLET
 0x80000000

	)

47 
	#EPOLL_CTL_ADD
 1

	)

48 
	#EPOLL_CTL_DEL
 2

	)

49 
	#EPOLL_CTL_MOD
 3

	)

51 
	uïﬁl_d©a


53 *
	m±r
;

54 
	mfd
;

55 
	mu32
;

56 
	mu64
;

57 } 
	tïﬁl_d©a_t
;

59 
	sïﬁl_evít


61 
	mevíts
;

62 
ïﬁl_d©a_t
 
	md©a
;

65 
ïﬁl_¸óã
(
size
);

66 
ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
);

67 
ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
max
, 
timeout
);

69 
	g__END_DECLS


	@sys/errno.h

1 
	~<î∫o.h
>

	@sys/eventfd.h

28 #i‚de‡
_SYS_EVENTFD_H


29 
	#_SYS_EVENTFD_H


	)

31 
	~<sys/cdefs.h
>

32 
	~<f˙é.h
>

34 
	g__BEGIN_DECLS


36 
	#EFD_CLOEXEC
 
O_CLOEXEC


	)

37 
	#EFD_NONBLOCK
 
O_NONBLOCK


	)

40 
uöt64_t
 
	tevítfd_t
;

42 
evítfd
(
öôvÆ
, 
Êags
);

45 
evítfd_ªad
(
fd
, 
evítfd_t
 *
cou¡î
);

46 
evítfd_wrôe
(
fd
, c⁄° 
evítfd_t
 
cou¡î
);

48 
	g__END_DECLS


	@sys/exec_elf.h

33 #i‚de‡
_SYS_EXEC_ELF_H_


34 
	#_SYS_EXEC_ELF_H_


	)

36 
	~<machöe/_ty≥s.h
>

37 
	~<machöe/exec.h
>

39 
__uöt8_t
 
	tElf_Byã
;

41 
__uöt32_t
 
	tElf32_Addr
;

42 
__uöt32_t
 
	tElf32_Off
;

43 
__öt32_t
 
	tElf32_Sw‹d
;

44 
__uöt32_t
 
	tElf32_W‹d
;

45 
__uöt16_t
 
	tElf32_HÆf
;

47 
__uöt64_t
 
	tElf64_Addr
;

48 
__uöt64_t
 
	tElf64_Off
;

49 
__öt32_t
 
	tElf64_ShÆf
;

51 #ifde‡
__Æpha__


52 
__öt64_t
 
	tElf64_Sw‹d
;

53 
__uöt64_t
 
	tElf64_W‹d
;

55 
__öt32_t
 
	tElf64_Sw‹d
;

56 
__uöt32_t
 
	tElf64_W‹d
;

59 
__öt64_t
 
	tElf64_Sxw‹d
;

60 
__uöt64_t
 
	tElf64_Xw‹d
;

62 
__uöt32_t
 
	tElf64_HÆf
;

63 
__uöt16_t
 
	tElf64_Qu¨ãr
;

69 
	#EI_MAG0
 0

	)

70 
	#EI_MAG1
 1

	)

71 
	#EI_MAG2
 2

	)

72 
	#EI_MAG3
 3

	)

73 
	#EI_CLASS
 4

	)

74 
	#EI_DATA
 5

	)

75 
	#EI_VERSION
 6

	)

76 
	#EI_OSABI
 7

	)

77 
	#EI_ABIVERSION
 8

	)

78 
	#EI_PAD
 9

	)

79 
	#EI_NIDENT
 16

	)

82 
	#ELFMAG0
 0x7‡

	)

83 
	#ELFMAG1
 'E'

	)

84 
	#ELFMAG2
 'L'

	)

85 
	#ELFMAG3
 'F'

	)

86 
	#ELFMAG
 "\177ELF"

	)

87 
	#SELFMAG
 4

	)

90 
	#ELFCLASSNONE
 0

	)

91 
	#ELFCLASS32
 1

	)

92 
	#ELFCLASS64
 2

	)

93 
	#ELFCLASSNUM
 3

	)

96 
	#ELFDATANONE
 0

	)

97 
	#ELFDATA2LSB
 1

	)

98 
	#ELFDATA2MSB
 2

	)

99 
	#ELFDATANUM
 3

	)

102 
	#ELFOSABI_SYSV
 0

	)

103 
	#ELFOSABI_HPUX
 1

	)

104 
	#ELFOSABI_NETBSD
 2

	)

105 
	#ELFOSABI_LINUX
 3

	)

106 
	#ELFOSABI_HURD
 4

	)

107 
	#ELFOSABI_86OPEN
 5

	)

108 
	#ELFOSABI_SOLARIS
 6

	)

109 
	#ELFOSABI_MONTEREY
 7

	)

110 
	#ELFOSABI_IRIX
 8

	)

111 
	#ELFOSABI_FREEBSD
 9

	)

112 
	#ELFOSABI_TRU64
 10

	)

113 
	#ELFOSABI_MODESTO
 11

	)

114 
	#ELFOSABI_OPENBSD
 12

	)

115 
	#ELFOSABI_ARM
 97

	)

116 
	#ELFOSABI_STANDALONE
 255

	)

119 
	#IS_ELF
(
ehdr
Ë(”hdr).
e_idít
[
EI_MAG0
] =
ELFMAG0
 && \

120 (
ehdr
).
e_idít
[
EI_MAG1
] =
ELFMAG1
 && \

121 (
ehdr
).
e_idít
[
EI_MAG2
] =
ELFMAG2
 && \

122 (
ehdr
).
e_idít
[
EI_MAG3
] =
ELFMAG3
)

	)

125 
	sñfhdr
 {

126 
	me_idít
[
EI_NIDENT
];

127 
Elf32_HÆf
 
	me_ty≥
;

128 
Elf32_HÆf
 
	me_machöe
;

129 
Elf32_W‹d
 
	me_vîsi⁄
;

130 
Elf32_Addr
 
	me_íåy
;

131 
Elf32_Off
 
	me_phoff
;

132 
Elf32_Off
 
	me_shoff
;

133 
Elf32_W‹d
 
	me_Êags
;

134 
Elf32_HÆf
 
	me_ehsize
;

135 
Elf32_HÆf
 
	me_phítsize
;

136 
Elf32_HÆf
 
	me_phnum
;

137 
Elf32_HÆf
 
	me_shítsize
;

138 
Elf32_HÆf
 
	me_shnum
;

139 
Elf32_HÆf
 
	me_sh°∫dx
;

141 } 
	tElf32_Ehdr
;

144 
	me_idít
[
EI_NIDENT
];

145 
Elf64_Qu¨ãr
 
	me_ty≥
;

146 
Elf64_Qu¨ãr
 
	me_machöe
;

147 
Elf64_HÆf
 
	me_vîsi⁄
;

148 
Elf64_Addr
 
	me_íåy
;

149 
Elf64_Off
 
	me_phoff
;

150 
Elf64_Off
 
	me_shoff
;

151 
Elf64_HÆf
 
	me_Êags
;

152 
Elf64_Qu¨ãr
 
	me_ehsize
;

153 
Elf64_Qu¨ãr
 
	me_phítsize
;

154 
Elf64_Qu¨ãr
 
	me_phnum
;

155 
Elf64_Qu¨ãr
 
	me_shítsize
;

156 
Elf64_Qu¨ãr
 
	me_shnum
;

157 
Elf64_Qu¨ãr
 
	me_sh°∫dx
;

158 } 
	tElf64_Ehdr
;

161 
	#ET_NONE
 0

	)

162 
	#ET_REL
 1

	)

163 
	#ET_EXEC
 2

	)

164 
	#ET_DYN
 3

	)

165 
	#ET_CORE
 4

	)

166 
	#ET_NUM
 5

	)

167 
	#ET_LOPROC
 0xff00

	)

168 
	#ET_HIPROC
 0xfff‡

	)

171 
	#EM_NONE
 0

	)

172 
	#EM_M32
 1

	)

173 
	#EM_SPARC
 2

	)

174 
	#EM_386
 3

	)

175 
	#EM_68K
 4

	)

176 
	#EM_88K
 5

	)

177 
	#EM_486
 6

	)

178 
	#EM_860
 7

	)

179 
	#EM_MIPS
 8

	)

185 
	#EM_MIPS_RS4_BE
 10

	)

186 
	#EM_SPARC64
 11

	)

187 
	#EM_PARISC
 15

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_PPC
 20

	)

190 
	#EM_ARM
 40

	)

191 
	#EM_ALPHA
 41

	)

192 
	#EM_SPARCV9
 43

	)

193 
	#EM_ALPHA_EXP
 0x9026

	)

194 
	#EM_AMD64
 62

	)

195 
	#EM_VAX
 75

	)

196 
	#EM_NUM
 15

	)

199 
	#EV_NONE
 0

	)

200 
	#EV_CURRENT
 1

	)

201 
	#EV_NUM
 2

	)

205 
Elf32_W‹d
 
	msh_«me
;

207 
Elf32_W‹d
 
	msh_ty≥
;

208 
Elf32_W‹d
 
	msh_Êags
;

209 
Elf32_Addr
 
	msh_addr
;

210 
Elf32_Off
 
	msh_off£t
;

211 
Elf32_W‹d
 
	msh_size
;

212 
Elf32_W‹d
 
	msh_lök
;

213 
Elf32_W‹d
 
	msh_öfo
;

214 
Elf32_W‹d
 
	msh_addølign
;

215 
Elf32_W‹d
 
	msh_ítsize
;

216 } 
	tElf32_Shdr
;

219 
Elf64_HÆf
 
	msh_«me
;

220 
Elf64_HÆf
 
	msh_ty≥
;

221 
Elf64_Xw‹d
 
	msh_Êags
;

222 
Elf64_Addr
 
	msh_addr
;

223 
Elf64_Off
 
	msh_off£t
;

224 
Elf64_Xw‹d
 
	msh_size
;

225 
Elf64_HÆf
 
	msh_lök
;

226 
Elf64_HÆf
 
	msh_öfo
;

227 
Elf64_Xw‹d
 
	msh_addølign
;

228 
Elf64_Xw‹d
 
	msh_ítsize
;

229 } 
	tElf64_Shdr
;

232 
	#SHN_UNDEF
 0

	)

233 
	#SHN_LORESERVE
 0xff00

	)

234 
	#SHN_LOPROC
 0xff00

	)

235 
	#SHN_HIPROC
 0xff1‡

	)

236 
	#SHN_ABS
 0xfff1

	)

237 
	#SHN_COMMON
 0xfff2

	)

238 
	#SHN_HIRESERVE
 0xfff‡

	)

241 
	#SHT_NULL
 0

	)

242 
	#SHT_PROGBITS
 1

	)

243 
	#SHT_SYMTAB
 2

	)

244 
	#SHT_STRTAB
 3

	)

245 
	#SHT_RELA
 4

	)

246 
	#SHT_HASH
 5

	)

247 
	#SHT_DYNAMIC
 6

	)

248 
	#SHT_NOTE
 7

	)

249 
	#SHT_NOBITS
 8

	)

250 
	#SHT_REL
 9

	)

251 
	#SHT_SHLIB
 10

	)

252 
	#SHT_DYNSYM
 11

	)

253 
	#SHT_NUM
 12

	)

254 
	#SHT_LOPROC
 0x70000000

	)

255 
	#SHT_HIPROC
 0x7ffffff‡

	)

256 
	#SHT_LOUSER
 0x80000000

	)

257 
	#SHT_HIUSER
 0xfffffff‡

	)

260 
	#ELF_BSS
 ".bss"

	)

261 
	#ELF_DATA
 ".d©a"

	)

262 
	#ELF_DEBUG
 ".debug"

	)

263 
	#ELF_DYNAMIC
 ".dy«mic"

	)

264 
	#ELF_DYNSTR
 ".dyn°r"

	)

265 
	#ELF_DYNSYM
 ".dynsym"

	)

266 
	#ELF_FINI
 ".föi"

	)

267 
	#ELF_GOT
 ".gŸ"

	)

268 
	#ELF_HASH
 ".hash"

	)

269 
	#ELF_INIT
 ".öô"

	)

270 
	#ELF_REL_DATA
 ".ªl.d©a"

	)

271 
	#ELF_REL_FINI
 ".ªl.föi"

	)

272 
	#ELF_REL_INIT
 ".ªl.öô"

	)

273 
	#ELF_REL_DYN
 ".ªl.dyn"

	)

274 
	#ELF_REL_RODATA
 ".ªl.rod©a"

	)

275 
	#ELF_REL_TEXT
 ".ªl.ãxt"

	)

276 
	#ELF_RODATA
 ".rod©a"

	)

277 
	#ELF_SHSTRTAB
 ".sh°πab"

	)

278 
	#ELF_STRTAB
 ".°πab"

	)

279 
	#ELF_SYMTAB
 ".symèb"

	)

280 
	#ELF_TEXT
 ".ãxt"

	)

284 
	#SHF_WRITE
 0x1

	)

285 
	#SHF_ALLOC
 0x2

	)

286 
	#SHF_EXECINSTR
 0x4

	)

287 
	#SHF_MASKPROC
 0xf0000000

	)

291 
	sñf32_sym
 {

292 
Elf32_W‹d
 
	m°_«me
;

293 
Elf32_Addr
 
	m°_vÆue
;

294 
Elf32_W‹d
 
	m°_size
;

295 
	m°_öfo
;

296 
	m°_Ÿhî
;

297 
Elf32_HÆf
 
	m°_shndx
;

298 } 
	tElf32_Sym
;

301 
Elf64_HÆf
 
	m°_«me
;

302 
Elf_Byã
 
	m°_öfo
;

303 
Elf_Byã
 
	m°_Ÿhî
;

304 
Elf64_Qu¨ãr
 
	m°_shndx
;

305 
Elf64_Xw‹d
 
	m°_vÆue
;

306 
Elf64_Xw‹d
 
	m°_size
;

307 } 
	tElf64_Sym
;

310 
	#STN_UNDEF
 0

	)

313 
	#ELF32_ST_BIND
(
x
Ë((xË>> 4)

	)

314 
	#ELF32_ST_TYPE
(
x
Ë(((ËxË& 0xf)

	)

315 
	#ELF32_ST_INFO
(
b
,
t
Ë(((bË<< 4Ë+ (—Ë& 0xf))

	)

317 
	#ELF64_ST_BIND
(
x
Ë((xË>> 4)

	)

318 
	#ELF64_ST_TYPE
(
x
Ë(((ËxË& 0xf)

	)

319 
	#ELF64_ST_INFO
(
b
,
t
Ë(((bË<< 4Ë+ (—Ë& 0xf))

	)

322 
	#STB_LOCAL
 0

	)

323 
	#STB_GLOBAL
 1

	)

324 
	#STB_WEAK
 2

	)

325 
	#STB_NUM
 3

	)

326 
	#STB_LOPROC
 13

	)

327 
	#STB_HIPROC
 15

	)

330 
	#STT_NOTYPE
 0

	)

331 
	#STT_OBJECT
 1

	)

332 
	#STT_FUNC
 2

	)

333 
	#STT_SECTION
 3

	)

334 
	#STT_FILE
 4

	)

335 
	#STT_NUM
 5

	)

336 
	#STT_LOPROC
 13

	)

337 
	#STT_HIPROC
 15

	)

341 
Elf32_Addr
 
	mr_off£t
;

342 
Elf32_W‹d
 
	mr_öfo
;

343 } 
	tElf32_Rñ
;

347 
Elf32_Addr
 
	mr_off£t
;

348 
Elf32_W‹d
 
	mr_öfo
;

349 
Elf32_Sw‹d
 
	mr_addíd
;

350 } 
	tElf32_Rña
;

353 
	#ELF32_R_SYM
(
i
Ë((iË>> 8)

	)

354 
	#ELF32_R_TYPE
(
i
Ë((Ë(i))

	)

355 
	#ELF32_R_INFO
(
s
,
t
Ë(((sË<< 8Ë+ ()—))

	)

358 
Elf64_Xw‹d
 
	mr_off£t
;

359 
Elf64_Xw‹d
 
	mr_öfo
;

360 } 
	tElf64_Rñ
;

363 
Elf64_Xw‹d
 
	mr_off£t
;

364 
Elf64_Xw‹d
 
	mr_öfo
;

365 
Elf64_Sxw‹d
 
	mr_addíd
;

366 } 
	tElf64_Rña
;

368 
	#ELF64_R_SYM
(
öfo
Ë((öfoË>> 32)

	)

369 
	#ELF64_R_TYPE
(
öfo
Ë((öfoË& 0xFFFFFFFF)

	)

370 
	#ELF64_R_INFO
(
s
,
t
Ë(((sË<< 32Ë+ (
__uöt32_t
)—))

	)

374 
Elf32_W‹d
 
	mp_ty≥
;

375 
Elf32_Off
 
	mp_off£t
;

376 
Elf32_Addr
 
	mp_vaddr
;

377 
Elf32_Addr
 
	mp_∑ddr
;

378 
Elf32_W‹d
 
	mp_fûesz
;

379 
Elf32_W‹d
 
	mp_memsz
;

380 
Elf32_W‹d
 
	mp_Êags
;

381 
Elf32_W‹d
 
	mp_Æign
;

382 } 
	tElf32_Phdr
;

385 
Elf64_HÆf
 
	mp_ty≥
;

386 
Elf64_HÆf
 
	mp_Êags
;

387 
Elf64_Off
 
	mp_off£t
;

388 
Elf64_Addr
 
	mp_vaddr
;

389 
Elf64_Addr
 
	mp_∑ddr
;

390 
Elf64_Xw‹d
 
	mp_fûesz
;

391 
Elf64_Xw‹d
 
	mp_memsz
;

392 
Elf64_Xw‹d
 
	mp_Æign
;

393 } 
	tElf64_Phdr
;

396 
	#PT_NULL
 0

	)

397 
	#PT_LOAD
 1

	)

398 
	#PT_DYNAMIC
 2

	)

399 
	#PT_INTERP
 3

	)

400 
	#PT_NOTE
 4

	)

401 
	#PT_SHLIB
 5

	)

402 
	#PT_PHDR
 6

	)

403 
	#PT_NUM
 7

	)

404 
	#PT_LOOS
 0x60000000

	)

405 
	#PT_HIOS
 0x6ffffff‡

	)

406 
	#PT_LOPROC
 0x70000000

	)

407 
	#PT_HIPROC
 0x7ffffff‡

	)

410 
	#PF_X
 0x1

	)

411 
	#PF_W
 0x2

	)

412 
	#PF_R
 0x4

	)

413 
	#PF_MASKPROC
 0xf0000000

	)

418 
Elf32_Sw‹d
 
	md_èg
;

420 
Elf32_W‹d
 
	md_vÆ
;

421 
Elf32_Addr
 
	md_±r
;

422 } 
	md_un
;

423 } 
	tElf32_Dyn
;

426 
Elf64_Xw‹d
 
	md_èg
;

428 
Elf64_Addr
 
	md_±r
;

429 
Elf64_Xw‹d
 
	md_vÆ
;

430 } 
	md_un
;

431 } 
	tElf64_Dyn
;

434 
	#DT_NULL
 0

	)

435 
	#DT_NEEDED
 1

	)

436 
	#DT_PLTRELSZ
 2

	)

437 
	#DT_PLTGOT
 3

	)

438 
	#DT_HASH
 4

	)

439 
	#DT_STRTAB
 5

	)

440 
	#DT_SYMTAB
 6

	)

441 
	#DT_RELA
 7

	)

442 
	#DT_RELASZ
 8

	)

443 
	#DT_RELAENT
 9

	)

444 
	#DT_STRSZ
 10

	)

445 
	#DT_SYMENT
 11

	)

446 
	#DT_INIT
 12

	)

447 
	#DT_FINI
 13

	)

448 
	#DT_SONAME
 14

	)

449 
	#DT_RPATH
 15

	)

451 
	#DT_SYMBOLIC
 16

	)

452 
	#DT_REL
 17

	)

453 
	#DT_RELSZ
 18

	)

454 
	#DT_RELENT
 19

	)

455 
	#DT_PLTREL
 20

	)

456 
	#DT_DEBUG
 21

	)

457 
	#DT_TEXTREL
 22

	)

458 
	#DT_JMPREL
 23

	)

459 
	#DT_BIND_NOW
 24

	)

460 
	#DT_NUM
 25

	)

461 
	#DT_LOPROC
 0x70000000

	)

462 
	#DT_HIPROC
 0x7ffffff‡

	)

465 
ñf_hash
(c⁄° *
«me
);

471 
Elf32_W‹d
 
	m«mesz
;

472 
Elf32_W‹d
 
	mdescsz
;

473 
Elf32_W‹d
 
	mty≥
;

474 } 
	tElf32_NŸe
;

477 
Elf64_HÆf
 
	m«mesz
;

478 
Elf64_HÆf
 
	mdescsz
;

479 
Elf64_HÆf
 
	mty≥
;

480 } 
	tElf64_NŸe
;

485 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_DYN_LOADER
)

487 
	#ELF32_NO_ADDR
 ((
u_l⁄g
Ë~0Ë

	)

488 
	#ELF_AUX_ENTRIES
 8

	)

491 
Elf32_Sw‹d
 
	mau_id
;

492 
Elf32_W‹d
 
	mau_v
;

493 } 
	tAux32Info
;

495 
	#ELF64_NO_ADDR
 ((
__uöt64_t
Ë~0)

	)

496 
	#ELF64_AUX_ENTRIES
 8

	)

499 
Elf64_ShÆf
 
	mau_id
;

500 
Elf64_Xw‹d
 
	mau_v
;

501 } 
	tAux64Info
;

503 
	eAuxID
 {

504 
	mAUX_nuŒ
 = 0,

505 
	mAUX_ign‹e
 = 1,

506 
	mAUX_execfd
 = 2,

507 
	mAUX_phdr
 = 3,

508 
	mAUX_phít
 = 4,

509 
	mAUX_phnum
 = 5,

510 
	mAUX_∑gesz
 = 6,

511 
	mAUX_ba£
 = 7,

512 
	mAUX_Êags
 = 8,

513 
	mAUX_íåy
 = 9,

514 
	mAUX_sun_uid
 = 2000,

515 
	mAUX_sun_ruid
 = 2001,

516 
	mAUX_sun_gid
 = 2002,

517 
	mAUX_sun_rgid
 = 2003

520 
	sñf_¨gs
 {

521 
u_l⁄g
 
	m¨g_íåy
;

522 
u_l⁄g
 
	m¨g_öãΩ
;

523 
u_l⁄g
 
	m¨g_phaddr
;

524 
u_l⁄g
 
	m¨g_phítsize
;

525 
u_l⁄g
 
	m¨g_phnum
;

526 
u_l⁄g
 
	m¨g_os
;

531 #i‡!
deföed
(
ELFSIZE
Ë&& deföed(
ARCH_ELFSIZE
)

532 
	#ELFSIZE
 
ARCH_ELFSIZE


	)

535 #i‡
deföed
(
ELFSIZE
)

536 
	#CONCAT
(
x
,
y
Ë
	`__CONCAT
(x,y)

	)

537 
	#ELFNAME
(
x
Ë
	`CONCAT
(
ñf
,CONCAT(
ELFSIZE
,CONCAT(
_
,x)))

	)

538 
	#ELFNAME2
(
x
,
y
Ë
	`CONCAT
(x,CONCAT(
_ñf
,CONCAT(
ELFSIZE
,CONCAT(
_
,y))))

	)

539 
	#ELFNAMEEND
(
x
Ë
	`CONCAT
(x,CONCAT(
_ñf
,
ELFSIZE
))

	)

540 
	#ELFDEFNNAME
(
x
Ë
	`CONCAT
(
ELF
,CONCAT(
ELFSIZE
,CONCAT(
_
,x)))

	)

543 #i‡
deföed
(
ELFSIZE
) && (ELFSIZE == 32)

544 
	#Elf_Ehdr
 
Elf32_Ehdr


	)

545 
	#Elf_Phdr
 
Elf32_Phdr


	)

546 
	#Elf_Shdr
 
Elf32_Shdr


	)

547 
	#Elf_Sym
 
Elf32_Sym


	)

548 
	#Elf_Rñ
 
Elf32_Rñ


	)

549 
	#Elf_RñA
 
Elf32_Rña


	)

550 
	#Elf_Dyn
 
Elf32_Dyn


	)

551 
	#Elf_HÆf
 
Elf32_HÆf


	)

552 
	#Elf_W‹d
 
Elf32_W‹d


	)

553 
	#Elf_Sw‹d
 
Elf32_Sw‹d


	)

554 
	#Elf_Addr
 
Elf32_Addr


	)

555 
	#Elf_Off
 
Elf32_Off


	)

556 
	#Elf_Nhdr
 
Elf32_Nhdr


	)

557 
	#Elf_NŸe
 
Elf32_NŸe


	)

559 
	#ELF_R_SYM
 
ELF32_R_SYM


	)

560 
	#ELF_R_TYPE
 
ELF32_R_TYPE


	)

561 
	#ELF_R_INFO
 
ELF32_R_INFO


	)

562 
	#ELFCLASS
 
ELFCLASS32


	)

564 
	#ELF_ST_BIND
 
ELF32_ST_BIND


	)

565 
	#ELF_ST_TYPE
 
ELF32_ST_TYPE


	)

566 
	#ELF_ST_INFO
 
ELF32_ST_INFO


	)

568 
	#AuxInfo
 
Aux32Info


	)

569 #ñi‡
deföed
(
ELFSIZE
) && (ELFSIZE == 64)

570 
	#Elf_Ehdr
 
Elf64_Ehdr


	)

571 
	#Elf_Phdr
 
Elf64_Phdr


	)

572 
	#Elf_Shdr
 
Elf64_Shdr


	)

573 
	#Elf_Sym
 
Elf64_Sym


	)

574 
	#Elf_Rñ
 
Elf64_Rñ


	)

575 
	#Elf_RñA
 
Elf64_Rña


	)

576 
	#Elf_Dyn
 
Elf64_Dyn


	)

577 
	#Elf_HÆf
 
Elf64_HÆf


	)

578 
	#Elf_W‹d
 
Elf64_W‹d


	)

579 
	#Elf_Sw‹d
 
Elf64_Sw‹d


	)

580 
	#Elf_Addr
 
Elf64_Addr


	)

581 
	#Elf_Off
 
Elf64_Off


	)

582 
	#Elf_Nhdr
 
Elf64_Nhdr


	)

583 
	#Elf_NŸe
 
Elf64_NŸe


	)

585 
	#ELF_R_SYM
 
ELF64_R_SYM


	)

586 
	#ELF_R_TYPE
 
ELF64_R_TYPE


	)

587 
	#ELF_R_INFO
 
ELF64_R_INFO


	)

588 
	#ELFCLASS
 
ELFCLASS64


	)

590 
	#ELF_ST_BIND
 
ELF64_ST_BIND


	)

591 
	#ELF_ST_TYPE
 
ELF64_ST_TYPE


	)

592 
	#ELF_ST_INFO
 
ELF64_ST_INFO


	)

594 
	#AuxInfo
 
Aux64Info


	)

597 #i‚de‡
_KERNEL


598 
Elf_Dyn
 
_DYNAMIC
[];

601 #ifdef 
_KERNEL


602 #ifde‡
_KERN_DO_ELF64


603 
exec_ñf64_makecmds
(
¥oc
 *, 
exec_∑ckage
 *);

604 *
ñf64_c›y¨gs
(
exec_∑ckage
 *, 
ps_°rögs
 *,

606 
exec_ñf64_fixup
(
¥oc
 *, 
exec_∑ckage
 *);

607 *
ñf64_check_bønd
(
Elf64_Ehdr
 *);

608 
ñf64_os_±_nŸe
(
¥oc
 *, 
exec_∑ckage
 *, 
Elf64_Ehdr
 *,

609 *, 
size_t
, size_t);

611 #ifde‡
_KERN_DO_ELF


612 
exec_ñf32_makecmds
(
¥oc
 *, 
exec_∑ckage
 *);

613 *
ñf32_c›y¨gs
(
exec_∑ckage
 *, 
ps_°rögs
 *,

615 
exec_ñf32_fixup
(
¥oc
 *, 
exec_∑ckage
 *);

616 *
ñf32_check_bønd
(
Elf32_Ehdr
 *);

617 
ñf32_os_±_nŸe
(
¥oc
 *, 
exec_∑ckage
 *, 
Elf32_Ehdr
 *,

618 *, 
size_t
, size_t);

623 
	#ELF_TARG_VER
 1

	)

	@sys/file.h

28 #i‚de‡
_SYS_FILE_H_


29 
	#_SYS_FILE_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

35 
	~<uni°d.h
>

36 
	~<f˙é.h
>

	@sys/fsuid.h

28 #i‚de‡
_SYS_FSUID_H_


29 
	#_SYS_FSUID_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

34 
	g__BEGIN_DECLS


37 
£tfsuid
(
uid_t
);

38 
£tfsgid
(
gid_t
);

41 
	g__END_DECLS


	@sys/inotify.h

28 #i‚de‡
_SYS_INOTIFY_H_


29 
	#_SYS_INOTIFY_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<löux/öŸify.h
>

35 
__BEGIN_DECLS


37 
öŸify_öô
();

38 
öŸify_add_w©ch
(, c⁄° *, 
__u32
);

39 
öŸify_rm_w©ch
(, 
__u32
);

41 
	g__END_DECLS


	@sys/ioctl.h

28 #i‚de‡
_SYS_IOCTL_H_


29 
	#_SYS_IOCTL_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<löux/io˘l.h
>

33 
	~<asm/io˘ls.h
>

34 
	~<asm/ãrmbôs.h
>

35 
	~<sys/io˘l_com∑t.h
>

37 
__BEGIN_DECLS


39 
io˘l
(, , ...);

41 
	g__END_DECLS


	@sys/ioctl_compat.h

39 #i‚de‡
_SYS_IOCTL_COMPAT_H_


40 
	#_SYS_IOCTL_COMPAT_H_


	)

45 
	stch¨s
 {

46 
	mt_öåc
;

47 
	mt_quôc
;

48 
	mt_°¨tc
;

49 
	mt_°›c
;

50 
	mt_eofc
;

51 
	mt_brkc
;

54 
	s…ch¨s
 {

55 
	mt_su•c
;

56 
	mt_dsu•c
;

57 
	mt_Ω∫tc
;

58 
	mt_Êushc
;

59 
	mt_wîasc
;

60 
	mt_ extc
;

66 #i‚de‡
_SGTTYB_


67 
	#_SGTTYB_


	)

68 
	ssgâyb
 {

69 
	msg_i•ìd
;

70 
	msg_o•ìd
;

71 
	msg_îa£
;

72 
	msg_kûl
;

73 
	msg_Êags
;

77 #ifde‡
USE_OLD_TTY


78 #unde‡
TIOCGETD


79 
	#TIOCGETD
 
	`_IOR
('t', 0, Ë

	)

80 #unde‡
TIOCSETD


81 
	#TIOCSETD
 
	`_IOW
('t', 1, Ë

	)

83 
	#OTIOCGETD
 
	`_IOR
('t', 0, Ë

	)

84 
	#OTIOCSETD
 
	`_IOW
('t', 1, Ë

	)

86 
	#TIOCHPCL
 
	`_IO
('t', 2Ë

	)

87 
	#TIOCGETP
 
	`_IOR
('t', 8,
sgâyb
)

	)

88 
	#TIOCSETP
 
	`_IOW
('t', 9,
sgâyb
)

	)

89 
	#TIOCSETN
 
	`_IOW
('t',10,
sgâyb
)

	)

90 
	#TIOCSETC
 
	`_IOW
('t',17,
tch¨s
)

	)

91 
	#TIOCGETC
 
	`_IOR
('t',18,
tch¨s
)

	)

94 
	#TANDEM
 0x00000001

	)

95 
	#CBREAK
 0x00000002

	)

96 
	#LCASE
 0x00000004

	)

97 
	#ECHO
 0x00000008

	)

98 
	#CRMOD
 0x00000010

	)

99 
	#RAW
 0x00000020

	)

100 
	#ODDP
 0x00000040

	)

101 
	#EVENP
 0x00000080

	)

102 
	#ANYP
 0x000000c0

	)

103 
	#NLDELAY
 0x00000300

	)

104 
	#NL0
 0x00000000

	)

105 
	#NL1
 0x00000100

	)

106 
	#NL2
 0x00000200

	)

107 
	#NL3
 0x00000300

	)

108 
	#TBDELAY
 0x00000c00

	)

109 
	#TAB0
 0x00000000

	)

110 
	#TAB1
 0x00000400

	)

111 
	#TAB2
 0x00000800

	)

112 
	#XTABS
 0x00000c00

	)

113 
	#CRDELAY
 0x00003000

	)

114 
	#CR0
 0x00000000

	)

115 
	#CR1
 0x00001000

	)

116 
	#CR2
 0x00002000

	)

117 
	#CR3
 0x00003000

	)

118 
	#VTDELAY
 0x00004000

	)

119 
	#FF0
 0x00000000

	)

120 
	#FF1
 0x00004000

	)

121 
	#BSDELAY
 0x00008000

	)

122 
	#BS0
 0x00000000

	)

123 
	#BS1
 0x00008000

	)

124 
	#ALLDELAY
 (
NLDELAY
|
TBDELAY
|
CRDELAY
|
VTDELAY
|
BSDELAY
)

	)

125 
	#CRTBS
 0x00010000

	)

126 
	#PRTERA
 0x00020000

	)

127 
	#CRTERA
 0x00040000

	)

128 
	#TILDE
 0x00080000

	)

129 
	#MDMBUF
 0x00100000

	)

130 
	#LITOUT
 0x00200000

	)

131 
	#TOSTOP
 0x00400000

	)

132 
	#FLUSHO
 0x00800000

	)

133 
	#NOHANG
 0x01000000

	)

134 
	#L001000
 0x02000000

	)

135 
	#CRTKIL
 0x04000000

	)

136 
	#PASS8
 0x08000000

	)

137 
	#CTLECH
 0x10000000

	)

138 
	#PENDIN
 0x20000000

	)

139 
	#DECCTQ
 0x40000000

	)

140 
	#NOFLSH
 0x80000000

	)

142 
	#TIOCLBIS
 
	`_IOW
('t', 127, Ë

	)

143 
	#TIOCLBIC
 
	`_IOW
('t', 126, Ë

	)

144 
	#TIOCLSET
 
	`_IOW
('t', 125, Ë

	)

145 
	#TIOCLGET
 
	`_IOR
('t', 124, Ë

	)

146 
	#LCRTBS
 (
CRTBS
>>16)

	)

147 
	#LPRTERA
 (
PRTERA
>>16)

	)

148 
	#LCRTERA
 (
CRTERA
>>16)

	)

149 
	#LTILDE
 (
TILDE
>>16)

	)

150 
	#LMDMBUF
 (
MDMBUF
>>16)

	)

151 
	#LLITOUT
 (
LITOUT
>>16)

	)

152 
	#LTOSTOP
 (
TOSTOP
>>16)

	)

153 
	#LFLUSHO
 (
FLUSHO
>>16)

	)

154 
	#LNOHANG
 (
NOHANG
>>16)

	)

155 
	#LCRTKIL
 (
CRTKIL
>>16)

	)

156 
	#LPASS8
 (
PASS8
>>16)

	)

157 
	#LCTLECH
 (
CTLECH
>>16)

	)

158 
	#LPENDIN
 (
PENDIN
>>16)

	)

159 
	#LDECCTQ
 (
DECCTQ
>>16)

	)

160 
	#LNOFLSH
 (
NOFLSH
>>16)

	)

161 
	#TIOCSLTC
 
	`_IOW
('t',117,
…ch¨s
)

	)

162 
	#TIOCGLTC
 
	`_IOR
('t',116,
…ch¨s
)

	)

163 
	#OTIOCCONS
 
	`_IO
('t', 98Ë

	)

164 
	#OTTYDISC
 0

	)

165 
	#NETLDISC
 1

	)

166 
	#NTTYDISC
 2

	)

	@sys/ipc.h

28 #i‚de‡
_SYS_IPC_H


29 
	#_SYS_IPC_H


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<löux/ùc.h
>

35 
__BEGIN_DECLS


37 
key_t
 
·ok
(c⁄° * 
∑th
, 
id
);

39 
	g__END_DECLS


	@sys/klog.h

28 #i‚de‡
_SYS_KLOG_H_


29 
	#_SYS_KLOG_H_


	)

31 
	~<sys/cdefs.h
>

33 
	g__BEGIN_DECLS


35 
	#KLOG_CLOSE
 0

	)

36 
	#KLOG_OPEN
 1

	)

37 
	#KLOG_READ
 2

	)

38 
	#KLOG_READ_ALL
 3

	)

39 
	#KLOG_READ_CLEAR
 4

	)

40 
	#KLOG_CLEAR
 5

	)

41 
	#KLOG_DISABLE
 6

	)

42 
	#KLOG_ENABLE
 7

	)

43 
	#KLOG_SETLEVEL
 8

	)

44 
	#KLOG_UNREADSIZE
 9

	)

45 
	#KLOG_WRITE
 10

	)

47 
klog˘l
(, *, );

49 
	g__END_DECLS


	@sys/limits.h

26 #i‚de‡
_SYS_LIMITS_H_


27 
	#_SYS_LIMITS_H_


	)

29 
	~<sys/cdefs.h
>

30 
	~<löux/limôs.h
>

44 
	~<machöe/öã∫Æ_ty≥s.h
>

47 
	~<machöe/limôs.h
>

49 
	#CHAR_BIT
 8

	)

51 
	#SCHAR_MAX
 0x7‡

	)

52 
	#SCHAR_MIN
 (-0x7f-1Ë

	)

54 
	#UCHAR_MAX
 0xffU

	)

55 #ifde‡
__machöe_has_unsig√d_ch¨s


56 
	#CHAR_MIN
 0

	)

57 
	#CHAR_MAX
 0xf‡

	)

59 
	#CHAR_MAX
 0x7f

	)

60 
	#CHAR_MIN
 (-0x7f-1)

	)

63 
	#USHRT_MAX
 0xffffU

	)

64 
	#SHRT_MAX
 0x7ff‡

	)

65 
	#SHRT_MIN
 (-0x7fff-1Ë

	)

67 
	#UINT_MAX
 0xffffffffU

	)

68 
	#INT_MAX
 0x7ffffff‡

	)

69 
	#INT_MIN
 (-0x7fffffff-1Ë

	)

71 #ifde‡
__LP64__


72 
	#ULONG_MAX
 0xffffffffffffffffUL

	)

74 
	#LONG_MAX
 0x7fffffffffffffffL

	)

76 
	#LONG_MIN
 (-0x7fffffffffffffffL-1)

	)

79 
	#ULONG_MAX
 0xffffffffUL

	)

80 
	#LONG_MAX
 0x7fffffffL

	)

81 
	#LONG_MIN
 (-0x7fffffffL-1)

	)

84 #i‡
__BSD_VISIBLE
 || 
__ISO_C_VISIBLE
 >= 1999

85 
	#ULLONG_MAX
 0xffffffffffffffffULL

	)

87 
	#LLONG_MAX
 0x7fffffffffffffffLL

	)

89 
	#LLONG_MIN
 (-0x7fffffffffffffffLL-1)

	)

93 #i‡
__BSD_VISIBLE


94 
	#UID_MAX
 
UINT_MAX


	)

95 
	#GID_MAX
 
UINT_MAX


	)

99 #ifde‡
__LP64__


100 
	#LONG_BIT
 64

	)

102 
	#LONG_BIT
 32

	)

106 #i‡!
deföed
(
DBL_DIG
)

107 #i‡
deföed
(
__DBL_DIG
)

108 
	#DBL_DIG
 
__DBL_DIG


	)

109 
	#DBL_MAX
 
__DBL_MAX


	)

110 
	#DBL_MIN
 
__DBL_MIN


	)

112 
	#FLT_DIG
 
__FLT_DIG


	)

113 
	#FLT_MAX
 
__FLT_MAX


	)

114 
	#FLT_MIN
 
__FLT_MIN


	)

116 
	#DBL_DIG
 15

	)

117 
	#DBL_MAX
 1.7976931348623157E+308

	)

118 
	#DBL_MIN
 2.2250738585072014E-308

	)

120 
	#FLT_DIG
 6

	)

121 
	#FLT_MAX
 3.40282347E+38F

	)

122 
	#FLT_MIN
 1.17549435E-38F

	)

128 
	#CHILD_MAX
 999

	)

129 
	#OPEN_MAX
 256

	)

133 
	#_POSIX_VERSION
 200112L

	)

134 
	#_POSIX2_VERSION
 -1

	)

135 
	#_POSIX2_C_VERSION
 
_POSIX_VERSION


	)

136 
	#_XOPEN_VERSION
 500

	)

137 
	#_XOPEN_XCU_VERSION
 -1

	)

140 #i‡
_POSIX_VERSION
 > 0

141 
	#_XOPEN_XPG2
 1

	)

142 
	#_XOPEN_XPG3
 1

	)

143 
	#_XOPEN_XPG4
 1

	)

144 
	#_XOPEN_UNIX
 1

	)

147 
	#_XOPEN_ENH_I18N
 -1

	)

148 
	#_XOPEN_CRYPT
 -1

	)

149 
	#_XOPEN_LEGACY
 -1

	)

150 
	#_XOPEN_REALTIME
 -1

	)

151 
	#_XOPEN_REALTIME_THREADS
 -1

	)

153 
	#_POSIX_REALTIME_SIGNALS
 -1

	)

154 
	#_POSIX_PRIORITY_SCHEDULING
 1

	)

155 
	#_POSIX_TIMERS
 1

	)

156 #unde‡
_POSIX_ASYNCHRONOUS_IO


157 
	#_POSIX_SYNCHRONIZED_IO
 1

	)

158 
	#_POSIX_FSYNC
 1

	)

159 
	#_POSIX_MAPPED_FILES
 1

	)

164 
	#_POSIX_THREADS
 1

	)

165 
	#_POSIX_THREAD_STACKADDR
 1

	)

166 
	#_POSIX_THREAD_STACKSIZE
 1

	)

167 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

168 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

170 #unde‡
_POSIX_PROCESS_SHARED


171 #unde‡
_POSIX_THREAD_SAFE_FUNCTIONS


172 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

173 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

174 
	#_POSIX_NO_TRUNC
 1

	)

175 
	#_POSIX_SAVED_IDS
 1

	)

176 
	#_POSIX_JOB_CONTROL
 1

	)

	@sys/linux-syscalls.h

2 #i‚de‡
_BIONIC_LINUX_SYSCALLS_H_


4 #i‡!
deföed
 
__ASM_ARM_UNISTD_H
 && !deföed 
__ASM_I386_UNISTD_H


5 #i‡
deföed
 
__¨m__
 && !deföed 
__ARM_EABI__
 && !deföed 
__thumb__


6 
	#__NR_SYSCALL_BASE
 0x900000

	)

8 
	#__NR_SYSCALL_BASE
 0

	)

11 
	#__NR_exô
 (
__NR_SYSCALL_BASE
 + 1)

	)

12 
	#__NR_f‹k
 (
__NR_SYSCALL_BASE
 + 2)

	)

13 
	#__NR_˛⁄e
 (
__NR_SYSCALL_BASE
 + 120)

	)

14 
	#__NR_execve
 (
__NR_SYSCALL_BASE
 + 11)

	)

15 
	#__NR_£tuid32
 (
__NR_SYSCALL_BASE
 + 213)

	)

16 
	#__NR_gëuid32
 (
__NR_SYSCALL_BASE
 + 199)

	)

17 
	#__NR_gëgid32
 (
__NR_SYSCALL_BASE
 + 200)

	)

18 
	#__NR_gëeuid32
 (
__NR_SYSCALL_BASE
 + 201)

	)

19 
	#__NR_gëegid32
 (
__NR_SYSCALL_BASE
 + 202)

	)

20 
	#__NR_gëªsuid32
 (
__NR_SYSCALL_BASE
 + 209)

	)

21 
	#__NR_gëªsgid32
 (
__NR_SYSCALL_BASE
 + 211)

	)

22 
	#__NR_gëtid
 (
__NR_SYSCALL_BASE
 + 224)

	)

23 
	#__NR_gëgroups32
 (
__NR_SYSCALL_BASE
 + 205)

	)

24 
	#__NR_gëpgid
 (
__NR_SYSCALL_BASE
 + 132)

	)

25 
	#__NR_gëµid
 (
__NR_SYSCALL_BASE
 + 64)

	)

26 
	#__NR_£tsid
 (
__NR_SYSCALL_BASE
 + 66)

	)

27 
	#__NR_£tgid32
 (
__NR_SYSCALL_BASE
 + 214)

	)

28 
	#__NR_£åeuid32
 (
__NR_SYSCALL_BASE
 + 203)

	)

29 
	#__NR_£åesuid32
 (
__NR_SYSCALL_BASE
 + 208)

	)

30 
	#__NR_£åesgid32
 (
__NR_SYSCALL_BASE
 + 210)

	)

31 
	#__NR_brk
 (
__NR_SYSCALL_BASE
 + 45)

	)

32 
	#__NR_±ø˚
 (
__NR_SYSCALL_BASE
 + 26)

	)

33 
	#__NR_gë¥i‹ôy
 (
__NR_SYSCALL_BASE
 + 96)

	)

34 
	#__NR_£çri‹ôy
 (
__NR_SYSCALL_BASE
 + 97)

	)

35 
	#__NR_£ålimô
 (
__NR_SYSCALL_BASE
 + 75)

	)

36 
	#__NR_ugëæimô
 (
__NR_SYSCALL_BASE
 + 191)

	)

37 
	#__NR_gërußge
 (
__NR_SYSCALL_BASE
 + 77)

	)

38 
	#__NR_£tgroups32
 (
__NR_SYSCALL_BASE
 + 206)

	)

39 
	#__NR_£çgid
 (
__NR_SYSCALL_BASE
 + 57)

	)

40 
	#__NR_£åegid32
 (
__NR_SYSCALL_BASE
 + 204)

	)

41 
	#__NR_chroŸ
 (
__NR_SYSCALL_BASE
 + 61)

	)

42 
	#__NR_¥˘l
 (
__NR_SYSCALL_BASE
 + 172)

	)

43 
	#__NR_ˇpgë
 (
__NR_SYSCALL_BASE
 + 184)

	)

44 
	#__NR_ˇp£t
 (
__NR_SYSCALL_BASE
 + 185)

	)

45 
	#__NR_sigÆt°ack
 (
__NR_SYSCALL_BASE
 + 186)

	)

46 
	#__NR_ac˘
 (
__NR_SYSCALL_BASE
 + 51)

	)

47 
	#__NR_ªad
 (
__NR_SYSCALL_BASE
 + 3)

	)

48 
	#__NR_wrôe
 (
__NR_SYSCALL_BASE
 + 4)

	)

49 
	#__NR_¥ód64
 (
__NR_SYSCALL_BASE
 + 180)

	)

50 
	#__NR_pwrôe64
 (
__NR_SYSCALL_BASE
 + 181)

	)

51 
	#__NR_›í
 (
__NR_SYSCALL_BASE
 + 5)

	)

52 
	#__NR_˛o£
 (
__NR_SYSCALL_BASE
 + 6)

	)

53 
	#__NR_l£ek
 (
__NR_SYSCALL_BASE
 + 19)

	)

54 
	#__NR__Œ£ek
 (
__NR_SYSCALL_BASE
 + 140)

	)

55 
	#__NR_gëpid
 (
__NR_SYSCALL_BASE
 + 20)

	)

56 
	#__NR_mm≠2
 (
__NR_SYSCALL_BASE
 + 192)

	)

57 
	#__NR_munm≠
 (
__NR_SYSCALL_BASE
 + 91)

	)

58 
	#__NR_mªm≠
 (
__NR_SYSCALL_BASE
 + 163)

	)

59 
	#__NR_msync
 (
__NR_SYSCALL_BASE
 + 144)

	)

60 
	#__NR_m¥Ÿe˘
 (
__NR_SYSCALL_BASE
 + 125)

	)

61 
	#__NR_mlock
 (
__NR_SYSCALL_BASE
 + 150)

	)

62 
	#__NR_mu∆ock
 (
__NR_SYSCALL_BASE
 + 151)

	)

63 
	#__NR_io˘l
 (
__NR_SYSCALL_BASE
 + 54)

	)

64 
	#__NR_ªadv
 (
__NR_SYSCALL_BASE
 + 145)

	)

65 
	#__NR_wrôev
 (
__NR_SYSCALL_BASE
 + 146)

	)

66 
	#__NR_f˙é
 (
__NR_SYSCALL_BASE
 + 55)

	)

67 
	#__NR_Êock
 (
__NR_SYSCALL_BASE
 + 143)

	)

68 
	#__NR_fchmod
 (
__NR_SYSCALL_BASE
 + 94)

	)

69 
	#__NR_dup
 (
__NR_SYSCALL_BASE
 + 41)

	)

70 
	#__NR_pùe
 (
__NR_SYSCALL_BASE
 + 42)

	)

71 
	#__NR_dup2
 (
__NR_SYSCALL_BASE
 + 63)

	)

72 
	#__NR__√w£À˘
 (
__NR_SYSCALL_BASE
 + 142)

	)

73 
	#__NR_·runˇã
 (
__NR_SYSCALL_BASE
 + 93)

	)

74 
	#__NR_fsync
 (
__NR_SYSCALL_BASE
 + 118)

	)

75 
	#__NR_fd©async
 (
__NR_SYSCALL_BASE
 + 148)

	)

76 
	#__NR_fchown32
 (
__NR_SYSCALL_BASE
 + 207)

	)

77 
	#__NR_sync
 (
__NR_SYSCALL_BASE
 + 36)

	)

78 
	#__NR_f˙é64
 (
__NR_SYSCALL_BASE
 + 221)

	)

79 
	#__NR_£ndfûe
 (
__NR_SYSCALL_BASE
 + 187)

	)

80 
	#__NR_lök
 (
__NR_SYSCALL_BASE
 + 9)

	)

81 
	#__NR_u∆ök
 (
__NR_SYSCALL_BASE
 + 10)

	)

82 
	#__NR_chdú
 (
__NR_SYSCALL_BASE
 + 12)

	)

83 
	#__NR_mknod
 (
__NR_SYSCALL_BASE
 + 14)

	)

84 
	#__NR_chmod
 (
__NR_SYSCALL_BASE
 + 15)

	)

85 
	#__NR_chown32
 (
__NR_SYSCALL_BASE
 + 212)

	)

86 
	#__NR_lchown32
 (
__NR_SYSCALL_BASE
 + 198)

	)

87 
	#__NR_mou¡
 (
__NR_SYSCALL_BASE
 + 21)

	)

88 
	#__NR_umou¡2
 (
__NR_SYSCALL_BASE
 + 52)

	)

89 
	#__NR_f°©64
 (
__NR_SYSCALL_BASE
 + 197)

	)

90 
	#__NR_°©64
 (
__NR_SYSCALL_BASE
 + 195)

	)

91 
	#__NR_l°©64
 (
__NR_SYSCALL_BASE
 + 196)

	)

92 
	#__NR_mkdú
 (
__NR_SYSCALL_BASE
 + 39)

	)

93 
	#__NR_ªadlök
 (
__NR_SYSCALL_BASE
 + 85)

	)

94 
	#__NR_rmdú
 (
__NR_SYSCALL_BASE
 + 40)

	)

95 
	#__NR_ª«me
 (
__NR_SYSCALL_BASE
 + 38)

	)

96 
	#__NR_gëcwd
 (
__NR_SYSCALL_BASE
 + 183)

	)

97 
	#__NR_ac˚ss
 (
__NR_SYSCALL_BASE
 + 33)

	)

98 
	#__NR_symlök
 (
__NR_SYSCALL_BASE
 + 83)

	)

99 
	#__NR_fchdú
 (
__NR_SYSCALL_BASE
 + 133)

	)

100 
	#__NR_åunˇã
 (
__NR_SYSCALL_BASE
 + 92)

	)

101 
	#__NR_∑u£
 (
__NR_SYSCALL_BASE
 + 29)

	)

102 
	#__NR_gëtimeofday
 (
__NR_SYSCALL_BASE
 + 78)

	)

103 
	#__NR_£âimeofday
 (
__NR_SYSCALL_BASE
 + 79)

	)

104 
	#__NR_times
 (
__NR_SYSCALL_BASE
 + 43)

	)

105 
	#__NR_«no¶ìp
 (
__NR_SYSCALL_BASE
 + 162)

	)

106 
	#__NR_gëôimî
 (
__NR_SYSCALL_BASE
 + 105)

	)

107 
	#__NR_£tôimî
 (
__NR_SYSCALL_BASE
 + 104)

	)

108 
	#__NR_siga˘i⁄
 (
__NR_SYSCALL_BASE
 + 67)

	)

109 
	#__NR_sig¥ocmask
 (
__NR_SYSCALL_BASE
 + 126)

	)

110 
	#__NR_sigsu•íd
 (
__NR_SYSCALL_BASE
 + 72)

	)

111 
	#__NR_π_siga˘i⁄
 (
__NR_SYSCALL_BASE
 + 174)

	)

112 
	#__NR_π_sig¥ocmask
 (
__NR_SYSCALL_BASE
 + 175)

	)

113 
	#__NR_π_sigtimedwaô
 (
__NR_SYSCALL_BASE
 + 177)

	)

114 
	#__NR_sig≥ndög
 (
__NR_SYSCALL_BASE
 + 73)

	)

115 
	#__NR_sched_£tscheduÀr
 (
__NR_SYSCALL_BASE
 + 156)

	)

116 
	#__NR_sched_gëscheduÀr
 (
__NR_SYSCALL_BASE
 + 157)

	)

117 
	#__NR_sched_yõld
 (
__NR_SYSCALL_BASE
 + 158)

	)

118 
	#__NR_sched_£ç¨am
 (
__NR_SYSCALL_BASE
 + 154)

	)

119 
	#__NR_sched_gë∑øm
 (
__NR_SYSCALL_BASE
 + 155)

	)

120 
	#__NR_sched_gë_¥i‹ôy_max
 (
__NR_SYSCALL_BASE
 + 159)

	)

121 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__NR_SYSCALL_BASE
 + 160)

	)

122 
	#__NR_sched_º_gë_öãrvÆ
 (
__NR_SYSCALL_BASE
 + 161)

	)

123 
	#__NR_u«me
 (
__NR_SYSCALL_BASE
 + 122)

	)

124 
	#__NR_waô4
 (
__NR_SYSCALL_BASE
 + 114)

	)

125 
	#__NR_umask
 (
__NR_SYSCALL_BASE
 + 60)

	)

126 
	#__NR_ªboŸ
 (
__NR_SYSCALL_BASE
 + 88)

	)

127 
	#__NR_sy¶og
 (
__NR_SYSCALL_BASE
 + 103)

	)

128 
	#__NR_öô_moduÀ
 (
__NR_SYSCALL_BASE
 + 128)

	)

129 
	#__NR_dñëe_moduÀ
 (
__NR_SYSCALL_BASE
 + 129)

	)

130 
	#__NR_sy¶og
 (
__NR_SYSCALL_BASE
 + 103)

	)

131 
	#__NR_sysöfo
 (
__NR_SYSCALL_BASE
 + 116)

	)

132 
	#__NR_fuãx
 (
__NR_SYSCALL_BASE
 + 240)

	)

133 
	#__NR_pﬁl
 (
__NR_SYSCALL_BASE
 + 168)

	)

135 #ifde‡
__¨m__


136 
	#__NR_exô_group
 (
__NR_SYSCALL_BASE
 + 248)

	)

137 
	#__NR_waôid
 (
__NR_SYSCALL_BASE
 + 280)

	)

138 
	#__NR_vf‹k
 (
__NR_SYSCALL_BASE
 + 190)

	)

139 
	#__NR_›í©
 (
__NR_SYSCALL_BASE
 + 322)

	)

140 
	#__NR_madvi£
 (
__NR_SYSCALL_BASE
 + 220)

	)

141 
	#__NR_möc‹e
 (
__NR_SYSCALL_BASE
 + 219)

	)

142 
	#__NR_pùe2
 (
__NR_SYSCALL_BASE
 + 359)

	)

143 
	#__NR_gëdíts64
 (
__NR_SYSCALL_BASE
 + 217)

	)

144 
	#__NR_f°©fs64
 (
__NR_SYSCALL_BASE
 + 267)

	)

145 
	#__NR_f°©©64
 (
__NR_SYSCALL_BASE
 + 327)

	)

146 
	#__NR_mkdú©
 (
__NR_SYSCALL_BASE
 + 323)

	)

147 
	#__NR_fchow«t
 (
__NR_SYSCALL_BASE
 + 325)

	)

148 
	#__NR_fchmod©
 (
__NR_SYSCALL_BASE
 + 333)

	)

149 
	#__NR_ª«mót
 (
__NR_SYSCALL_BASE
 + 329)

	)

150 
	#__NR_u∆ök©
 (
__NR_SYSCALL_BASE
 + 328)

	)

151 
	#__NR_°©fs64
 (
__NR_SYSCALL_BASE
 + 266)

	)

152 
	#__NR_˛ock_gëtime
 (
__NR_SYSCALL_BASE
 + 263)

	)

153 
	#__NR_˛ock_£âime
 (
__NR_SYSCALL_BASE
 + 262)

	)

154 
	#__NR_˛ock_gëªs
 (
__NR_SYSCALL_BASE
 + 264)

	)

155 
	#__NR_˛ock_«no¶ìp
 (
__NR_SYSCALL_BASE
 + 265)

	)

156 
	#__NR_timî_¸óã
 (
__NR_SYSCALL_BASE
 + 257)

	)

157 
	#__NR_timî_£âime
 (
__NR_SYSCALL_BASE
 + 258)

	)

158 
	#__NR_timî_gëtime
 (
__NR_SYSCALL_BASE
 + 259)

	)

159 
	#__NR_timî_gëovîrun
 (
__NR_SYSCALL_BASE
 + 260)

	)

160 
	#__NR_timî_dñëe
 (
__NR_SYSCALL_BASE
 + 261)

	)

161 
	#__NR_utimes
 (
__NR_SYSCALL_BASE
 + 269)

	)

162 
	#__NR_sockë
 (
__NR_SYSCALL_BASE
 + 281)

	)

163 
	#__NR_sockë∑ú
 (
__NR_SYSCALL_BASE
 + 288)

	)

164 
	#__NR_böd
 (
__NR_SYSCALL_BASE
 + 282)

	)

165 
	#__NR_c⁄√˘
 (
__NR_SYSCALL_BASE
 + 283)

	)

166 
	#__NR_li°í
 (
__NR_SYSCALL_BASE
 + 284)

	)

167 
	#__NR_ac˚±
 (
__NR_SYSCALL_BASE
 + 285)

	)

168 
	#__NR_gësock«me
 (
__NR_SYSCALL_BASE
 + 286)

	)

169 
	#__NR_gë≥î«me
 (
__NR_SYSCALL_BASE
 + 287)

	)

170 
	#__NR_£ndto
 (
__NR_SYSCALL_BASE
 + 290)

	)

171 
	#__NR_ªcv‰om
 (
__NR_SYSCALL_BASE
 + 292)

	)

172 
	#__NR_shutdown
 (
__NR_SYSCALL_BASE
 + 293)

	)

173 
	#__NR_£tsock›t
 (
__NR_SYSCALL_BASE
 + 294)

	)

174 
	#__NR_gësock›t
 (
__NR_SYSCALL_BASE
 + 295)

	)

175 
	#__NR_£ndmsg
 (
__NR_SYSCALL_BASE
 + 296)

	)

176 
	#__NR_ªcvmsg
 (
__NR_SYSCALL_BASE
 + 297)

	)

177 
	#__NR_i›rio_£t
 (
__NR_SYSCALL_BASE
 + 314)

	)

178 
	#__NR_i›rio_gë
 (
__NR_SYSCALL_BASE
 + 315)

	)

179 
	#__NR_ïﬁl_¸óã
 (
__NR_SYSCALL_BASE
 + 250)

	)

180 
	#__NR_ïﬁl_˘l
 (
__NR_SYSCALL_BASE
 + 251)

	)

181 
	#__NR_ïﬁl_waô
 (
__NR_SYSCALL_BASE
 + 252)

	)

182 
	#__NR_öŸify_öô
 (
__NR_SYSCALL_BASE
 + 316)

	)

183 
	#__NR_öŸify_add_w©ch
 (
__NR_SYSCALL_BASE
 + 317)

	)

184 
	#__NR_öŸify_rm_w©ch
 (
__NR_SYSCALL_BASE
 + 318)

	)

185 
	#__NR_evítfd2
 (
__NR_SYSCALL_BASE
 + 356)

	)

186 
	#__NR_ARM_£t_és
 (
__NR_SYSCALL_BASE
 + 983045)

	)

187 
	#__NR_ARM_ˇcheÊush
 (
__NR_SYSCALL_BASE
 + 983042)

	)

190 #ifde‡
__i386__


191 
	#__NR_exô_group
 (
__NR_SYSCALL_BASE
 + 252)

	)

192 
	#__NR_waôpid
 (
__NR_SYSCALL_BASE
 + 7)

	)

193 
	#__NR_waôid
 (
__NR_SYSCALL_BASE
 + 284)

	)

194 
	#__NR_kûl
 (
__NR_SYSCALL_BASE
 + 37)

	)

195 
	#__NR_tkûl
 (
__NR_SYSCALL_BASE
 + 238)

	)

196 
	#__NR_£t_thªad_¨ó
 (
__NR_SYSCALL_BASE
 + 243)

	)

197 
	#__NR_›í©
 (
__NR_SYSCALL_BASE
 + 295)

	)

198 
	#__NR_madvi£
 (
__NR_SYSCALL_BASE
 + 219)

	)

199 
	#__NR_möc‹e
 (
__NR_SYSCALL_BASE
 + 218)

	)

200 
	#__NR_pùe2
 (
__NR_SYSCALL_BASE
 + 331)

	)

201 
	#__NR_gëdíts64
 (
__NR_SYSCALL_BASE
 + 220)

	)

202 
	#__NR_f°©fs64
 (
__NR_SYSCALL_BASE
 + 269)

	)

203 
	#__NR_f°©©64
 (
__NR_SYSCALL_BASE
 + 300)

	)

204 
	#__NR_mkdú©
 (
__NR_SYSCALL_BASE
 + 296)

	)

205 
	#__NR_fchow«t
 (
__NR_SYSCALL_BASE
 + 298)

	)

206 
	#__NR_fchmod©
 (
__NR_SYSCALL_BASE
 + 306)

	)

207 
	#__NR_ª«mót
 (
__NR_SYSCALL_BASE
 + 302)

	)

208 
	#__NR_u∆ök©
 (
__NR_SYSCALL_BASE
 + 301)

	)

209 
	#__NR_°©fs64
 (
__NR_SYSCALL_BASE
 + 268)

	)

210 
	#__NR_˛ock_gëtime
 (
__NR_SYSCALL_BASE
 + 265)

	)

211 
	#__NR_˛ock_£âime
 (
__NR_SYSCALL_BASE
 + 264)

	)

212 
	#__NR_˛ock_gëªs
 (
__NR_SYSCALL_BASE
 + 266)

	)

213 
	#__NR_˛ock_«no¶ìp
 (
__NR_SYSCALL_BASE
 + 267)

	)

214 
	#__NR_timî_¸óã
 (
__NR_SYSCALL_BASE
 + 259)

	)

215 
	#__NR_timî_£âime
 (
__NR_SYSCALL_BASE
 + 260)

	)

216 
	#__NR_timî_gëtime
 (
__NR_SYSCALL_BASE
 + 261)

	)

217 
	#__NR_timî_gëovîrun
 (
__NR_SYSCALL_BASE
 + 262)

	)

218 
	#__NR_timî_dñëe
 (
__NR_SYSCALL_BASE
 + 263)

	)

219 
	#__NR_utimes
 (
__NR_SYSCALL_BASE
 + 271)

	)

220 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

221 
	#__NR_i›rio_£t
 (
__NR_SYSCALL_BASE
 + 289)

	)

222 
	#__NR_i›rio_gë
 (
__NR_SYSCALL_BASE
 + 290)

	)

223 
	#__NR_ïﬁl_¸óã
 (
__NR_SYSCALL_BASE
 + 254)

	)

224 
	#__NR_ïﬁl_˘l
 (
__NR_SYSCALL_BASE
 + 255)

	)

225 
	#__NR_ïﬁl_waô
 (
__NR_SYSCALL_BASE
 + 256)

	)

226 
	#__NR_öŸify_öô
 (
__NR_SYSCALL_BASE
 + 291)

	)

227 
	#__NR_öŸify_add_w©ch
 (
__NR_SYSCALL_BASE
 + 292)

	)

228 
	#__NR_öŸify_rm_w©ch
 (
__NR_SYSCALL_BASE
 + 293)

	)

229 
	#__NR_evítfd2
 (
__NR_SYSCALL_BASE
 + 328)

	)

232 #i‡
deföed
(
__SH3__
Ë|| deföed(
__SH4__
)

233 
	#__NR_exô_group
 (
__NR_SYSCALL_BASE
 + 252)

	)

234 
	#__NR_waôpid
 (
__NR_SYSCALL_BASE
 + 7)

	)

235 
	#__NR_waôid
 (
__NR_SYSCALL_BASE
 + 284)

	)

236 
	#__NR_kûl
 (
__NR_SYSCALL_BASE
 + 37)

	)

237 
	#__NR_tkûl
 (
__NR_SYSCALL_BASE
 + 238)

	)

238 
	#__NR_£t_thªad_¨ó
 (
__NR_SYSCALL_BASE
 + 243)

	)

239 
	#__NR_vf‹k
 (
__NR_SYSCALL_BASE
 + 190)

	)

240 
	#__NR_›í©
 (
__NR_SYSCALL_BASE
 + 295)

	)

241 
	#__NR_madvi£
 (
__NR_SYSCALL_BASE
 + 219)

	)

242 
	#__NR_möc‹e
 (
__NR_SYSCALL_BASE
 + 218)

	)

243 
	#__NR_pùe2
 (
__NR_SYSCALL_BASE
 + 331)

	)

244 
	#__NR_gëdíts64
 (
__NR_SYSCALL_BASE
 + 220)

	)

245 
	#__NR_f°©fs64
 (
__NR_SYSCALL_BASE
 + 269)

	)

246 
	#__NR_f°©©64
 (
__NR_SYSCALL_BASE
 + 300)

	)

247 
	#__NR_mkdú©
 (
__NR_SYSCALL_BASE
 + 296)

	)

248 
	#__NR_fchow«t
 (
__NR_SYSCALL_BASE
 + 298)

	)

249 
	#__NR_fchmod©
 (
__NR_SYSCALL_BASE
 + 306)

	)

250 
	#__NR_ª«mót
 (
__NR_SYSCALL_BASE
 + 302)

	)

251 
	#__NR_u∆ök©
 (
__NR_SYSCALL_BASE
 + 301)

	)

252 
	#__NR_°©fs64
 (
__NR_SYSCALL_BASE
 + 268)

	)

253 
	#__NR_˛ock_gëtime
 (
__NR_SYSCALL_BASE
 + 265)

	)

254 
	#__NR_˛ock_£âime
 (
__NR_SYSCALL_BASE
 + 264)

	)

255 
	#__NR_˛ock_gëªs
 (
__NR_SYSCALL_BASE
 + 266)

	)

256 
	#__NR_˛ock_«no¶ìp
 (
__NR_SYSCALL_BASE
 + 267)

	)

257 
	#__NR_timî_¸óã
 (
__NR_SYSCALL_BASE
 + 259)

	)

258 
	#__NR_timî_£âime
 (
__NR_SYSCALL_BASE
 + 260)

	)

259 
	#__NR_timî_gëtime
 (
__NR_SYSCALL_BASE
 + 261)

	)

260 
	#__NR_timî_gëovîrun
 (
__NR_SYSCALL_BASE
 + 262)

	)

261 
	#__NR_timî_dñëe
 (
__NR_SYSCALL_BASE
 + 263)

	)

262 
	#__NR_utimes
 (
__NR_SYSCALL_BASE
 + 271)

	)

263 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

264 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

265 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

266 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

267 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

268 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

269 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

270 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

271 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

272 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

273 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

274 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

275 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

276 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

277 
	#__NR_sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

278 
	#__NR___sockëˇŒ
 (
__NR_SYSCALL_BASE
 + 102)

	)

279 
	#__NR_i›rio_£t
 (
__NR_SYSCALL_BASE
 + 288)

	)

280 
	#__NR_i›rio_gë
 (
__NR_SYSCALL_BASE
 + 289)

	)

281 
	#__NR_ïﬁl_¸óã
 (
__NR_SYSCALL_BASE
 + 254)

	)

282 
	#__NR_ïﬁl_˘l
 (
__NR_SYSCALL_BASE
 + 255)

	)

283 
	#__NR_ïﬁl_waô
 (
__NR_SYSCALL_BASE
 + 256)

	)

284 
	#__NR_öŸify_öô
 (
__NR_SYSCALL_BASE
 + 290)

	)

285 
	#__NR_öŸify_add_w©ch
 (
__NR_SYSCALL_BASE
 + 291)

	)

286 
	#__NR_öŸify_rm_w©ch
 (
__NR_SYSCALL_BASE
 + 292)

	)

287 
	#__NR_evítfd2
 (
__NR_SYSCALL_BASE
 + 328)

	)

	@sys/mman.h

28 #i‚de‡
_SYS_MMAN_H_


29 
	#_SYS_MMAN_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<asm/mm™.h
>

34 
	~<asm/∑ge.h
>

36 
	g__BEGIN_DECLS


38 #i‚de‡
MAP_ANON


39 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

42 
	#MAP_FAILED
 ((*)-1)

	)

44 
	#MREMAP_MAYMOVE
 1

	)

45 
	#MREMAP_FIXED
 2

	)

47 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

48 
munm≠
(*, 
size_t
);

49 
msync
(c⁄° *, 
size_t
, );

50 
m¥Ÿe˘
(c⁄° *, 
size_t
, );

51 * 
mªm≠
(*, 
size_t
, size_t, );

53 
mlockÆl
();

54 
mu∆ockÆl
();

55 
mlock
(c⁄° *, 
size_t
);

56 
mu∆ock
(c⁄° *, 
size_t
);

57 
madvi£
(c⁄° *, 
size_t
, );

59 
mlock
(c⁄° *
addr
, 
size_t
 
Àn
);

60 
mu∆ock
(c⁄° *
addr
, 
size_t
 
Àn
);

62 
möc‹e
(* 
°¨t
, 
size_t
 
Àngth
, * 
vec
);

64 
	g__END_DECLS


	@sys/mount.h

28 #i‚de‡
_SYS_MOUNT_H


29 
	#_SYS_MOUNT_H


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/io˘l.h
>

34 
	g__BEGIN_DECLS


39 
	#MS_RDONLY
 1

	)

40 
	#MS_NOSUID
 2

	)

41 
	#MS_NODEV
 4

	)

42 
	#MS_NOEXEC
 8

	)

43 
	#MS_SYNCHRONOUS
 16

	)

44 
	#MS_REMOUNT
 32

	)

45 
	#MS_MANDLOCK
 64

	)

46 
	#MS_DIRSYNC
 128

	)

47 
	#MS_NOATIME
 1024

	)

48 
	#MS_NODIRATIME
 2048

	)

49 
	#MS_BIND
 4096

	)

50 
	#MS_MOVE
 8192

	)

51 
	#MS_REC
 16384

	)

52 
	#MS_VERBOSE
 32768

	)

53 
	#MS_POSIXACL
 (1<<16Ë

	)

54 
	#MS_ONE_SECOND
 (1<<17Ë

	)

55 
	#MS_ACTIVE
 (1<<30)

	)

56 
	#MS_NOUSER
 (1<<31)

	)

61 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_NOATIME
|
MS_NODIRATIME
)

	)

66 
	#MS_MGC_VAL
 0xC0ED0000

	)

67 
	#MS_MGC_MSK
 0xffff0000

	)

72 
	#MNT_FORCE
 1

	)

73 
	#MNT_DETACH
 2

	)

74 
	#MNT_EXPIRE
 4

	)

79 
	#BLKROSET
 
	`_IO
(0x12, 93Ë

	)

80 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

81 
	#BLKRRPART
 
	`_IO
(0x12, 95Ë

	)

82 
	#BLKGETSIZE
 
	`_IO
(0x12, 96Ë

	)

83 
	#BLKFLSBUF
 
	`_IO
(0x12, 97Ë

	)

84 
	#BLKRASET
 
	`_IO
(0x12, 98Ë

	)

85 
	#BLKRAGET
 
	`_IO
(0x12, 99Ë

	)

90 
mou¡
(const *, const *,

93 
umou¡
(const *);

94 
umou¡2
(const *, );

97 
pivŸ_roŸ
(const *, const *);

100 
	g__END_DECLS


	@sys/param.h

28 #i‚de‡
_SYS_PARAM_H_


29 
	#_SYS_PARAM_H_


	)

31 
	~<limôs.h
>

32 
	~<löux/∑øm.h
>

34 
	#MAXPATHLEN
 
PATH_MAX


	)

35 
	#MAXSYMLINKS
 8

	)

37 
	#ALIGNBYTES
 3

	)

38 
	#ALIGN
(
p
Ë((()’Ë+ 
ALIGNBYTES
Ë&~ ALIGNBYTES)

	)

	@sys/poll.h

1 
	~<pﬁl.h
>

	@sys/prctl.h

28 #i‚de‡
_SYS_PRCTL_H


29 
	#_SYS_PRCTL_H


	)

31 
	~<löux/¥˘l.h
>

32 
	~<sys/cdefs.h
>

34 
__BEGIN_DECLS


42 
¥˘l
(
›ti⁄
, ...);

44 
	g__END_DECLS


	@sys/ptrace.h

28 #i‚de‡
_SYS_PTRACE_H_


29 
	#_SYS_PTRACE_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

34 
	~<löux/±ø˚.h
>

36 
	g__BEGIN_DECLS


38 
	#PTRACE_POKEUSER
 
PTRACE_POKEUSR


	)

39 
	#PTRACE_PEEKUSER
 
PTRACE_PEEKUSR


	)

41 
±ø˚
(
ªque°
, ...);

43 
	g__END_DECLS


	@sys/queue.h

32 #i‚def 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
«me
, 
ty≥
) \

85 
	s«me
 { \

86 
ty≥
 *
lh_fú°
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hód
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty≥
) \

94 
ty≥
 *
À_√xt
; \

95 
ty≥
 **
À_¥ev
; \

96 }

	)

101 
	#LIST_INIT
(
hód
) do { \

102 (
hód
)->
lh_fú°
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

106 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

107 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

108 &(
ñm
)->
fõld
.
À_√xt
; \

109 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

110 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

114 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

115 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

116 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

117 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

121 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

122 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

123 (
hód
)->
lh_fú°
 = (
ñm
); \

124 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

128 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

129 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

130 (
ñm
)->
fõld
.
À_¥ev
; \

131 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

135 (
v¨
Ë((
hód
)->
lh_fú°
); \

136 (
v¨
); \

137 (
v¨
Ë((v¨)->
fõld
.
À_√xt
))

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

143 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

144 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

150 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

151 
	s«me
 { \

152 
ty≥
 *
¶h_fú°
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty≥
) \

160 
ty≥
 *
¶e_√xt
; \

161 }

	)

166 
	#SLIST_INIT
(
hód
) do { \

167 (
hód
)->
¶h_fú°
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

171 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

172 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

176 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

177 (
hód
)->
¶h_fú°
 = (
ñm
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

181 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

185 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

189 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

190 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

191 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

192 
cuªlm
->
fõld
.
¶e_√xt
 = \

193 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

198 (
v¨
Ë(
hód
)->
¶h_fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
¶e_√xt
)

	)

203 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

204 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

205 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

211 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

212 
	s«me
 { \

213 
ty≥
 *
°qh_fú°
; \

214 
ty≥
 **
°qh_œ°
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

218 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

220 
	#STAILQ_ENTRY
(
ty≥
) \

222 
ty≥
 *
°qe_√xt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hód
) do { \

229 (
hód
)->
°qh_fú°
 = 
NULL
; \

230 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

234 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
hód
)->
°qh_fú°
Ë=
NULL
) \

235 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

236 (
hód
)->
°qh_fú°
 = (
ñm
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

240 (
ñm
)->
fõld
.
°qe_√xt
 = 
NULL
; \

241 *(
hód
)->
°qh_œ°
 = (
ñm
); \

242 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

246 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
li°ñm
)->fõld.°qe_√xtË=
NULL
)\

247 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

248 (
li°ñm
)->
fõld
.
°qe_√xt
 = (
ñm
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

252 i‡(((
hód
)->
°qh_fú°
 = (hód)->°qh_fú°->
fõld
.
°qe_√xt
Ë=
NULL
) \

253 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

257 i‡((
hód
)->
°qh_fú°
 =(
ñm
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

260 
ty≥
 *
cuªlm
 = (
hód
)->
°qh_fú°
; \

261 
cuªlm
->
fõld
.
°qe_√xt
 !(
ñm
)) \

262 
cuªlm
 = cuªlm->
fõld
.
°qe_√xt
; \

263 i‡((
cuªlm
->
fõld
.
°qe_√xt
 = \

264 
cuªlm
->
fõld
.
°qe_√xt
->fõld.°qe_√xtË=
NULL
) \

265 (
hód
)->
°qh_œ°
 = &(
cuªlm
)->
fõld
.
°qe_√xt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

270 (
v¨
Ë((
hód
)->
°qh_fú°
); \

271 (
v¨
); \

272 (
v¨
Ë((v¨)->
fõld
.
°qe_√xt
))

	)

277 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

278 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

279 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

285 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

286 
	s«me
 { \

287 
ty≥
 *
sqh_fú°
; \

288 
ty≥
 **
sqh_œ°
; \

289 }

	)

291 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

292 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

294 
	#SIMPLEQ_ENTRY
(
ty≥
) \

296 
ty≥
 *
sqe_√xt
; \

297 }

	)

302 
	#SIMPLEQ_INIT
(
hód
) do { \

303 (
hód
)->
sqh_fú°
 = 
NULL
; \

304 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

305 }  0)

	)

307 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

308 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

309 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

310 (
hód
)->
sqh_fú°
 = (
ñm
); \

311 }  0)

	)

313 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

314 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

315 *(
hód
)->
sqh_œ°
 = (
ñm
); \

316 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

317 }  0)

	)

319 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

320 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

321 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

322 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

323 }  0)

	)

325 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

326 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

327 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

328 }  0)

	)

330 
	#SIMPLEQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

331 i‡((
hód
)->
sqh_fú°
 =(
ñm
)) { \

332 
	`SIMPLEQ_REMOVE_HEAD
((
hód
), 
fõld
); \

334 
ty≥
 *
cuªlm
 = (
hód
)->
sqh_fú°
; \

335 
cuªlm
->
fõld
.
sqe_√xt
 !(
ñm
)) \

336 
cuªlm
 = cuªlm->
fõld
.
sqe_√xt
; \

337 i‡((
cuªlm
->
fõld
.
sqe_√xt
 = \

338 
cuªlm
->
fõld
.
sqe_√xt
->fõld.sqe_√xtË=
NULL
) \

339 (
hód
)->
sqh_œ°
 = &(
cuªlm
)->
fõld
.
sqe_√xt
; \

341 }  0)

	)

343 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

344 (
v¨
Ë((
hód
)->
sqh_fú°
); \

345 (
v¨
); \

346 (
v¨
Ë((v¨)->
fõld
.
sqe_√xt
))

	)

351 
	#SIMPLEQ_EMPTY
(
hód
Ë((hód)->
sqh_fú°
 =
NULL
)

	)

352 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

353 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

359 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quÆ
) \

360 
	s«me
 { \

361 
quÆ
 
ty≥
 *
tqh_fú°
; \

362 
quÆ
 
ty≥
 *quÆ *
tqh_œ°
; \

363 }

	)

364 
	#TAILQ_HEAD
(
«me
, 
ty≥
Ë
	`_TAILQ_HEAD
“ame, ty≥,)

	)

366 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

367 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

369 
	#_TAILQ_ENTRY
(
ty≥
, 
quÆ
) \

371 
quÆ
 
ty≥
 *
tqe_√xt
; \

372 
quÆ
 
ty≥
 *quÆ *
tqe_¥ev
; \

373 }

	)

374 
	#TAILQ_ENTRY
(
ty≥
Ë
	`_TAILQ_ENTRY
(ty≥,)

	)

379 
	#TAILQ_INIT
(
hód
) do { \

380 (
hód
)->
tqh_fú°
 = 
NULL
; \

381 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

382 }  0)

	)

384 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

385 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

386 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

387 &(
ñm
)->
fõld
.
tqe_√xt
; \

389 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

390 (
hód
)->
tqh_fú°
 = (
ñm
); \

391 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

392 }  0)

	)

394 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

395 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

396 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

397 *(
hód
)->
tqh_œ°
 = (
ñm
); \

398 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

399 }  0)

	)

401 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

402 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

403 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

404 &(
ñm
)->
fõld
.
tqe_√xt
; \

406 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

407 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

408 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

409 }  0)

	)

411 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

412 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

413 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

414 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

415 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

416 }  0)

	)

418 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

419 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

420 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

421 (
ñm
)->
fõld
.
tqe_¥ev
; \

423 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

424 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

425 }  0)

	)

427 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

428 (
v¨
Ë((
hód
)->
tqh_fú°
); \

429 (
v¨
); \

430 (
v¨
Ë((v¨)->
fõld
.
tqe_√xt
))

	)

432 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

433 (
v¨
Ë(*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_last)); \

434 (
v¨
); \

435 (
v¨
Ë(*(((
hód«me
 *)((v¨)->
fõld
.
tqe_¥ev
))->
tqh_œ°
)))

	)

440 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

441 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

442 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

444 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

445 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

446 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

447 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

453 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

454 
	s«me
 { \

455 
ty≥
 *
cqh_fú°
; \

456 
ty≥
 *
cqh_œ°
; \

457 }

	)

459 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

460 { (*)&
hód
, (*)&hód }

	)

462 
	#CIRCLEQ_ENTRY
(
ty≥
) \

464 
ty≥
 *
cqe_√xt
; \

465 
ty≥
 *
cqe_¥ev
; \

466 }

	)

471 
	#CIRCLEQ_INIT
(
hód
) do { \

472 (
hód
)->
cqh_fú°
 = (*)(head); \

473 (
hód
)->
cqh_œ°
 = (*)(head); \

474 }  0)

	)

476 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

477 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

478 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

479 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

480 (
hód
)->
cqh_œ°
 = (
ñm
); \

482 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

483 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

484 }  0)

	)

486 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

487 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

488 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

489 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

490 (
hód
)->
cqh_fú°
 = (
ñm
); \

492 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

493 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

494 }  0)

	)

496 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

497 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

498 (
ñm
)->
fõld
.
cqe_¥ev
 = (*)(
hód
); \

499 i‡((
hód
)->
cqh_œ°
 == (*)(head)) \

500 (
hód
)->
cqh_œ°
 = (
ñm
); \

502 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

503 (
hód
)->
cqh_fú°
 = (
ñm
); \

504 }  0)

	)

506 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

507 (
ñm
)->
fõld
.
cqe_√xt
 = (*)(
hód
); \

508 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

509 i‡((
hód
)->
cqh_fú°
 == (*)(head)) \

510 (
hód
)->
cqh_fú°
 = (
ñm
); \

512 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

513 (
hód
)->
cqh_œ°
 = (
ñm
); \

514 }  0)

	)

516 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

517 i‡((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

518 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

520 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

521 (
ñm
)->
fõld
.
cqe_¥ev
; \

522 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

523 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

525 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

526 (
ñm
)->
fõld
.
cqe_√xt
; \

527 }  0)

	)

529 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

530 (
v¨
Ë((
hód
)->
cqh_fú°
); \

531 (
v¨
Ë!(c⁄° *)(
hód
); \

532 (
v¨
Ë((v¨)->
fõld
.
cqe_√xt
))

	)

534 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

535 (
v¨
Ë((
hód
)->
cqh_œ°
); \

536 (
v¨
Ë!(c⁄° *)(
hód
); \

537 (
v¨
Ë((v¨)->
fõld
.
cqe_¥ev
))

	)

542 
	#CIRCLEQ_EMPTY
(
hód
Ë((hód)->
cqh_fú°
 =(*)(hód))

	)

543 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

544 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

545 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

546 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

548 
	#CIRCLEQ_LOOP_NEXT
(
hód
, 
ñm
, 
fõld
) \

549 (((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

550 ? ((
hód
)->
cqh_fú°
) \

551 : (
ñm
->
fõld
.
cqe_√xt
))

	)

552 
	#CIRCLEQ_LOOP_PREV
(
hód
, 
ñm
, 
fõld
) \

553 (((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

554 ? ((
hód
)->
cqh_œ°
) \

555 : (
ñm
->
fõld
.
cqe_¥ev
))

	)

	@sys/reboot.h

28 #i‚de‡
_SYS_REBOOT_H_


29 
	#_SYS_REBOOT_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<löux/ªboŸ.h
>

34 
	g__BEGIN_DECLS


38 
	#RB_AUTOBOOT
 
LINUX_REBOOT_CMD_RESTART


	)

39 
	#RB_HALT_SYSTEM
 
LINUX_REBOOT_CMD_HALT


	)

40 
	#RB_ENABLE_CAD
 
LINUX_REBOOT_CMD_CAD_ON


	)

41 
	#RB_DISABLE_CAD
 
LINUX_REBOOT_CMD_CAD_OFF


	)

42 
	#RB_POWER_OFF
 
LINUX_REBOOT_CMD_POWER_OFF


	)

44 
ªboŸ
(
ªboŸ_ty≥
);

45 
__ªboŸ
(, , , *);

47 
	g__END_DECLS


	@sys/resource.h

28 #i‚de‡
_SYS_RESOURCE_H_


29 
	#_SYS_RESOURCE_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

39 
	#gërußge
 
__kî√l_gërußge


	)

40 
	~<löux/ªsour˚.h
>

41 #unde‡
gërußge


43 
	tæim_t
;

45 
__BEGIN_DECLS


47 
gë¥i‹ôy
(, );

48 
£çri‹ôy
(, , );

49 
gëæimô
(
ªsour˚
, 
æimô
 *
æp
);

50 
£ålimô
(
ªsour˚
, c⁄° 
æimô
 *
æp
);

51 
gërußge
(
who
, 
rußge
* 
r_ußge
);

53 
	g__END_DECLS


	@sys/select.h

28 #i‚de‡
_SYS_SELECT_H_


29 
	#_SYS_SELECT_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/time.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sig«l.h
>

36 
__BEGIN_DECLS


38 
__kî√l_fd_£t
 
	tfd_£t
;

40 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

41 
p£À˘
(
n
, 
fd_£t
 *
ªadfds
, fd_£à*
wrôefds
, fd_£à*
îrfds
,

42 c⁄° 
time•ec
 *
timeout
, c⁄° 
sig£t_t
 *
sigmask
);

44 
	g__END_DECLS


	@sys/sendfile.h

28 #i‚de‡
_SYS_SENDFILE_H_


29 
	#_SYS_SENDFILE_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

34 
__BEGIN_DECLS


36 
ssize_t
 
£ndfûe
(
out_fd
, 
ö_fd
, 
off_t
 *
off£t
, 
size_t
 
cou¡
);

38 
	g__END_DECLS


	@sys/socket.h

28 #i‚de‡
_SYS_SOCKET_H_


29 
	#_SYS_SOCKET_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<löux/sockë.h
>

35 
	g__BEGIN_DECLS


37 
	#SOCK_STREAM
 1

	)

38 
	#SOCK_DGRAM
 2

	)

39 
	#SOCK_RAW
 3

	)

40 
	#SOCK_RDM
 4

	)

41 
	#SOCK_SEQPACKET
 5

	)

42 
	#SOCK_PACKET
 10

	)

44 #ifde‡
__i386__


45 
	#__sockëˇŒ
 
	`__©åibuã__
((
__cde˛__
))

	)

47 
	#__sockëˇŒ
 

	)

52 
SHUT_RD
 = 0,

53 
	#SHUT_RD
 
SHUT_RD


	)

54 
SHUT_WR
,

55 
	#SHUT_WR
 
SHUT_WR


	)

56 
SHUT_RDWR


57 
	#SHUT_RDWR
 
SHUT_RDWR


	)

61 
	tsockÀn_t
;

63 
__sockëˇŒ
 
sockë
(, , );

64 
__sockëˇŒ
 
böd
(, c⁄° 
sockaddr
 *, );

65 
__sockëˇŒ
 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

66 
__sockëˇŒ
 
li°í
(, );

67 
__sockëˇŒ
 
ac˚±
(, 
sockaddr
 *, 
sockÀn_t
 *);

68 
__sockëˇŒ
 
gësock«me
(, 
sockaddr
 *, 
sockÀn_t
 *);

69 
__sockëˇŒ
 
gë≥î«me
(, 
sockaddr
 *, 
sockÀn_t
 *);

70 
__sockëˇŒ
 
sockë∑ú
(, , , *);

71 
__sockëˇŒ
 
shutdown
(, );

72 
__sockëˇŒ
 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

73 
__sockëˇŒ
 
gësock›t
(, , , *, 
sockÀn_t
 *);

74 
__sockëˇŒ
 
£ndmsg
(, c⁄° 
msghdr
 *, );

75 
__sockëˇŒ
 
ªcvmsg
(, 
msghdr
 *, );

77 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

78 
ssize_t
 
ªcv
(, *, 
size_t
, );

80 
__sockëˇŒ
 
ssize_t
 
£ndto
(, c⁄° *, 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

81 
__sockëˇŒ
 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
 *);

83 #unde‡
__sockëˇŒ


85 
	g__END_DECLS


	@sys/socketcalls.h

28 #i‚de‡
_SYS_SOCKETCALLS_H_


29 
	#_SYS_SOCKETCALLS_H_


	)

33 
	#SYS_SOCKET
 1

	)

34 
	#SYS_BIND
 2

	)

35 
	#SYS_CONNECT
 3

	)

36 
	#SYS_LISTEN
 4

	)

37 
	#SYS_ACCEPT
 5

	)

38 
	#SYS_GETSOCKNAME
 6

	)

39 
	#SYS_GETPEERNAME
 7

	)

40 
	#SYS_SOCKETPAIR
 8

	)

41 
	#SYS_SEND
 9

	)

42 
	#SYS_RECV
 10

	)

43 
	#SYS_SENDTO
 11

	)

44 
	#SYS_RECVFROM
 12

	)

45 
	#SYS_SHUTDOWN
 13

	)

46 
	#SYS_SETSOCKOPT
 14

	)

47 
	#SYS_GETSOCKOPT
 15

	)

48 
	#SYS_SENDMSG
 16

	)

49 
	#SYS_RECVMSG
 17

	)

	@sys/stat.h

28 #i‚de‡
_SYS_STAT_H_


29 
	#_SYS_STAT_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/time.h
>

34 
	~<löux/°©.h
>

36 
	~<ídün.h
>

38 
	g__BEGIN_DECLS


44 #ifde‡
__mùs__


45 
	s°©
 {

46 
	m°_dev
;

47 
	m__∑d0
[3];

49 
	m°_öo
;

51 
	m°_mode
;

52 
	m°_∆ök
;

54 
	m°_uid
;

55 
	m°_gid
;

57 
	m°_rdev
;

58 
	m__∑d1
[3];

60 
	m°_size
;

62 
	m°_©ime
;

63 
	m°_©ime_n£c
;

65 
	m°_mtime
;

66 
	m°_mtime_n£c
;

68 
	m°_˘ime
;

69 
	m°_˘ime_n£c
;

71 
	m°_blksize
;

72 
	m__∑d2
;

74 
	m°_blocks
;

77 
	s°©
 {

78 
	m°_dev
;

79 
	m__∑d0
[4];

81 
	m__°_öo
;

82 
	m°_mode
;

83 
	m°_∆ök
;

85 
	m°_uid
;

86 
	m°_gid
;

88 
	m°_rdev
;

89 
	m__∑d3
[4];

91 
	m°_size
;

92 
	m°_blksize
;

93 
	m°_blocks
;

95 
	m°_©ime
;

96 
	m°_©ime_n£c
;

98 
	m°_mtime
;

99 
	m°_mtime_n£c
;

101 
	m°_˘ime
;

102 
	m°_˘ime_n£c
;

104 
	m°_öo
;

111 
	#°_©imí£c
 
°_©ime_n£c


	)

112 
	#°_mtimí£c
 
°_mtime_n£c


	)

113 
	#°_˘imí£c
 
°_˘ime_n£c


	)

115 
chmod
(c⁄° *, 
mode_t
);

116 
fchmod
(, 
mode_t
);

117 
mkdú
(c⁄° *, 
mode_t
);

119 
°©
(const *, stat *);

120 
f°©
(, 
°©
 *);

121 
l°©
(c⁄° *, 
°©
 *);

122 
mknod
(c⁄° *, 
mode_t
, 
dev_t
);

123 
mode_t
 
umask
(mode_t);

125 
	#°©64
 
°©


	)

126 
	#f°©64
 
f°©


	)

127 
	#l°©64
 
l°©


	)

129 
__ölöe__
 
	$mkfifo
(c⁄° *
__p
, 
mode_t
 
__m
)

131  
	`mknod
(
__p
, (
__m
 & ~
S_IFMT
Ë| 
S_IFIFO
, (
dev_t
)0);

132 
	}
}

134 
f°©©
(
dúfd
, c⁄° *
∑th
, 
°©
 *
buf
, 
Êags
);

135 
mkdú©
(
dúfd
, c⁄° *
∑th«me
, 
mode_t
 
mode
);

136 
fchow«t
(
dúfd
, c⁄° *
∑th
, 
uid_t
 
ow√r
, 
gid_t
 
group
, 
Êags
);

137 
fchmod©
(
dúfd
, c⁄° *
∑th
, 
mode_t
 
mode
, 
Êags
);

138 
ª«mót
(
ﬁddúfd
, c⁄° *
ﬁd∑th
, 
√wdúfd
, c⁄° *
√w∑th
);

140 
	g__END_DECLS


	@sys/statfs.h

1 
	~<sys/vfs.h
>

	@sys/syscall.h

28 #i‚de‡
_SYS_SYSCALL_H_


29 
	#_SYS_SYSCALL_H_


	)

31 
	~<î∫o.h
>

32 
	~<sys/cdefs.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<asm/uni°d.h
>

36 
__BEGIN_DECLS


38 
sysˇŒ
(
numbî
, ...);

40 
	g__END_DECLS


	@sys/sysconf.h

28 #i‚de‡
_SYS_SYSCONF_H_


29 
	#_SYS_SYSCONF_H_


	)

31 
	~<sys/cdefs.h
>

33 
	g__BEGIN_DECLS


38 
	#_SC_ARG_MAX
 0x0000

	)

39 
	#_SC_BC_BASE_MAX
 0x0001

	)

40 
	#_SC_BC_DIM_MAX
 0x0002

	)

41 
	#_SC_BC_SCALE_MAX
 0x0003

	)

42 
	#_SC_BC_STRING_MAX
 0x0004

	)

43 
	#_SC_CHILD_MAX
 0x0005

	)

44 
	#_SC_CLK_TCK
 0x0006

	)

45 
	#_SC_COLL_WEIGHTS_MAX
 0x0007

	)

46 
	#_SC_EXPR_NEST_MAX
 0x0008

	)

47 
	#_SC_LINE_MAX
 0x0009

	)

48 
	#_SC_NGROUPS_MAX
 0x000a

	)

49 
	#_SC_OPEN_MAX
 0x000b

	)

50 
	#_SC_PASS_MAX
 0x000c

	)

51 
	#_SC_2_C_BIND
 0x000d

	)

52 
	#_SC_2_C_DEV
 0x000e

	)

53 
	#_SC_2_C_VERSION
 0x000f

	)

54 
	#_SC_2_CHAR_TERM
 0x0010

	)

55 
	#_SC_2_FORT_DEV
 0x0011

	)

56 
	#_SC_2_FORT_RUN
 0x0012

	)

57 
	#_SC_2_LOCALEDEF
 0x0013

	)

58 
	#_SC_2_SW_DEV
 0x0014

	)

59 
	#_SC_2_UPE
 0x0015

	)

60 
	#_SC_2_VERSION
 0x0016

	)

61 
	#_SC_JOB_CONTROL
 0x0017

	)

62 
	#_SC_SAVED_IDS
 0x0018

	)

63 
	#_SC_VERSION
 0x0019

	)

64 
	#_SC_RE_DUP_MAX
 0x001a

	)

65 
	#_SC_STREAM_MAX
 0x001b

	)

66 
	#_SC_TZNAME_MAX
 0x001c

	)

67 
	#_SC_XOPEN_CRYPT
 0x001d

	)

68 
	#_SC_XOPEN_ENH_I18N
 0x001e

	)

69 
	#_SC_XOPEN_SHM
 0x001f

	)

70 
	#_SC_XOPEN_VERSION
 0x0020

	)

71 
	#_SC_XOPEN_XCU_VERSION
 0x0021

	)

72 
	#_SC_XOPEN_REALTIME
 0x0022

	)

73 
	#_SC_XOPEN_REALTIME_THREADS
 0x0023

	)

74 
	#_SC_XOPEN_LEGACY
 0x0024

	)

75 
	#_SC_ATEXIT_MAX
 0x0025

	)

76 
	#_SC_IOV_MAX
 0x0026

	)

77 
	#_SC_PAGESIZE
 0x0027

	)

78 
	#_SC_PAGE_SIZE
 0x0028

	)

79 
	#_SC_XOPEN_UNIX
 0x0029

	)

80 
	#_SC_XBS5_ILP32_OFF32
 0x002a

	)

81 
	#_SC_XBS5_ILP32_OFFBIG
 0x002b

	)

82 
	#_SC_XBS5_LP64_OFF64
 0x002c

	)

83 
	#_SC_XBS5_LPBIG_OFFBIG
 0x002d

	)

84 
	#_SC_AIO_LISTIO_MAX
 0x002e

	)

85 
	#_SC_AIO_MAX
 0x002f

	)

86 
	#_SC_AIO_PRIO_DELTA_MAX
 0x0030

	)

87 
	#_SC_DELAYTIMER_MAX
 0x0031

	)

88 
	#_SC_MQ_OPEN_MAX
 0x0032

	)

89 
	#_SC_MQ_PRIO_MAX
 0x0033

	)

90 
	#_SC_RTSIG_MAX
 0x0034

	)

91 
	#_SC_SEM_NSEMS_MAX
 0x0035

	)

92 
	#_SC_SEM_VALUE_MAX
 0x0036

	)

93 
	#_SC_SIGQUEUE_MAX
 0x0037

	)

94 
	#_SC_TIMER_MAX
 0x0038

	)

95 
	#_SC_ASYNCHRONOUS_IO
 0x0039

	)

96 
	#_SC_FSYNC
 0x003a

	)

97 
	#_SC_MAPPED_FILES
 0x003b

	)

98 
	#_SC_MEMLOCK
 0x003c

	)

99 
	#_SC_MEMLOCK_RANGE
 0x003d

	)

100 
	#_SC_MEMORY_PROTECTION
 0x003e

	)

101 
	#_SC_MESSAGE_PASSING
 0x003f

	)

102 
	#_SC_PRIORITIZED_IO
 0x0040

	)

103 
	#_SC_PRIORITY_SCHEDULING
 0x0041

	)

104 
	#_SC_REALTIME_SIGNALS
 0x0042

	)

105 
	#_SC_SEMAPHORES
 0x0043

	)

106 
	#_SC_SHARED_MEMORY_OBJECTS
 0x0044

	)

107 
	#_SC_SYNCHRONIZED_IO
 0x0045

	)

108 
	#_SC_TIMERS
 0x0046

	)

109 
	#_SC_GETGR_R_SIZE_MAX
 0x0047

	)

110 
	#_SC_GETPW_R_SIZE_MAX
 0x0048

	)

111 
	#_SC_LOGIN_NAME_MAX
 0x0049

	)

112 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 0x004a

	)

113 
	#_SC_THREAD_KEYS_MAX
 0x004b

	)

114 
	#_SC_THREAD_STACK_MIN
 0x004c

	)

115 
	#_SC_THREAD_THREADS_MAX
 0x004d

	)

116 
	#_SC_TTY_NAME_MAX
 0x004e

	)

118 
	#_SC_THREADS
 0x004f

	)

119 
	#_SC_THREAD_ATTR_STACKADDR
 0x0050

	)

120 
	#_SC_THREAD_ATTR_STACKSIZE
 0x0051

	)

121 
	#_SC_THREAD_PRIORITY_SCHEDULING
 0x0052

	)

122 
	#_SC_THREAD_PRIO_INHERIT
 0x0053

	)

123 
	#_SC_THREAD_PRIO_PROTECT
 0x0054

	)

124 
	#_SC_THREAD_SAFE_FUNCTIONS
 0x0055

	)

126 
	#_SC_NPROCESSORS_CONF
 0x0060

	)

127 
	#_SC_NPROCESSORS_ONLN
 0x0061

	)

128 
	#_SC_PHYS_PAGES
 0x0062

	)

129 
	#_SC_AVPHYS_PAGES
 0x0063

	)

130 
	#_SC_MONOTONIC_CLOCK
 0x0064

	)

132 
sysc⁄f
(
«me
);

134 
	g__END_DECLS


	@sys/sysinfo.h

28 #i‚de‡
_SYS_SYSINFO_H_


29 
	#_SYS_SYSINFO_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<löux/kî√l.h
>

34 
__BEGIN_DECLS


36 
sysöfo
 (sysöfÿ*
öfo
);

38 
	g__END_DECLS


	@sys/syslimits.h

	@sys/sysmacros.h

28 #i‚de‡
_SYS_SYSMACROS_H_


29 
	#_SYS_SYSMACROS_H_


	)

32 #i‚de‡
_SYS_TYPES_H_


33 
	~<sys/ty≥s.h
>

36 
__ölöe__
 
	$maj‹
(
dev_t
 
_dev
)

38  (
_dev
 >> 8) & 0xfff;

39 
	}
}

41 
__ölöe__
 
	$mö‹
(
dev_t
 
_dev
)

43  (
_dev
 & 0xff) | ((_dev >> 12) & 0xfff00);

44 
	}
}

46 
__ölöe__
 
dev_t
 
	$makedev
(
__ma
, 
__mi
)

48  ((
__ma
 & 0xfffË<< 8Ë| (
__mi
 & 0xff) | ((__mi & 0xfff00) << 12);

49 
	}
}

	@sys/system_properties.h

29 #i‚de‡
_INCLUDE_SYS_SYSTEM_PROPERTIES_H


30 
	#_INCLUDE_SYS_SYSTEM_PROPERTIES_H


	)

32 
	~<sys/cdefs.h
>

34 
__BEGIN_DECLS


36 
¥›_öfo
 
	t¥›_öfo
;

38 
	#PROP_NAME_MAX
 32

	)

39 
	#PROP_VALUE_MAX
 92

	)

47 
__sy°em_¥›îty_gë
(c⁄° *
«me
, *
vÆue
);

58 c⁄° 
¥›_öfo
 *
__sy°em_¥›îty_föd
(c⁄° *
«me
);

69 
__sy°em_¥›îty_ªad
(c⁄° 
¥›_öfo
 *
pi
, *
«me
, *
vÆue
);

81 c⁄° 
¥›_öfo
 *
__sy°em_¥›îty_föd_¡h
(
n
);

83 
	g__END_DECLS


	@sys/time.h

28 #i‚de‡
_SYS_TIME_H_


29 
	#_SYS_TIME_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<löux/time.h
>

35 
__BEGIN_DECLS


37 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

38 
£âimeofday
(c⁄° 
timevÆ
 *, c⁄° 
timez⁄e
 *);

40 
gëôimî
(, 
ôimîvÆ
 *);

41 
£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

43 
utimes
(c⁄° *, c⁄° 
timevÆ
 *);

45 
	#timî˛ór
(
a
) \

46 ((
a
)->
tv_£c
 = (a)->
tv_u£c
 = 0)

	)

48 
	#timîis£t
(
a
) \

49 ((
a
)->
tv_£c
 !0 || (a)->
tv_u£c
 !0)

	)

51 
	#timîcmp
(
a
, 
b
, 
›
) \

52 ((
a
)->
tv_£c
 =(
b
)->tv_sec \

53 ? (
a
)->
tv_u£c
 
	`›
 (
b
)->tv_usec \

54 : (
a
)->
tv_£c
 
	`›
 (
b
)->tv_£c)

	)

56 
	#timîadd
(
a
, 
b
, 
ªs
) \

58 (
ªs
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

59 (
ªs
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

60 i‡((
ªs
)->
tv_u£c
 >= 1000000) { \

61 (
ªs
)->
tv_u£c
 -= 1000000; \

62 (
ªs
)->
tv_£c
 += 1; \

64 } 0)

	)

66 
	#timîsub
(
a
, 
b
, 
ªs
) \

68 (
ªs
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

69 (
ªs
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

70 i‡((
ªs
)->
tv_u£c
 < 0) { \

71 (
ªs
)->
tv_u£c
 += 1000000; \

72 (
ªs
)->
tv_£c
 -= 1; \

74 } 0)

	)

76 
	g__END_DECLS


	@sys/timeb.h

28 #i‚de‡
_SYS_TIMEB_H


29 
	#_SYS_TIMEB_H


	)

31 
	~<sys/time.h
>

33 
__BEGIN_DECLS


35 
	stimeb
 {

36 
time_t
 
	mtime
;

37 
	mmûlôm
;

38 
	mtimez⁄e
;

39 
	md°Êag
;

42 
·ime
(
timeb
* 
timebuf
);

44 
	g__END_DECLS


	@sys/times.h

28 #i‚de‡
_SYS_TIMES_H_


29 
	#_SYS_TIMES_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<löux/times.h
>

35 
__BEGIN_DECLS


37 
˛ock_t
 
times
(
tms
 *);

39 
	g__END_DECLS


	@sys/ttychars.h

	@sys/ttydev.h

	@sys/types.h

28 #i‚de‡
_SYS_TYPES_H_


29 
	#_SYS_TYPES_H_


	)

31 
	#__√ed_size_t


	)

32 
	#__√ed_±rdiff_t


	)

33 
	~<°ddef.h
>

34 
	~<°döt.h
>

35 
	~<sys/cdefs.h
>

37 
	~<löux/posix_ty≥s.h
>

38 
	~<asm/ty≥s.h
>

39 
	~<löux/ty≥s.h
>

40 
	~<machöe/kî√l.h
>

42 
__u32
 
	t__kî√l_dev_t
;

52 
__kî√l_blk˙t_t
 
	tblk˙t_t
;

53 
__kî√l_blksize_t
 
	tblksize_t
;

54 
__kî√l_˛ock_t
 
	t˛ock_t
;

55 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

56 
__kî√l_dev_t
 
	tdev_t
;

57 
__kî√l_fsblk˙t_t
 
	tfsblk˙t_t
;

58 
__kî√l_fsfû˙t_t
 
	tfsfû˙t_t
;

59 
__kî√l_gid32_t
 
	tgid_t
;

60 
__kî√l_id_t
 
	tid_t
;

61 
__kî√l_öo_t
 
	töo_t
;

62 
__kî√l_key_t
 
	tkey_t
;

63 
__kî√l_mode_t
 
	tmode_t
;

64 
__kî√l_∆ök_t
 
	t∆ök_t
;

65 #i‚de‡
_OFF_T_DEFINED_


66 
	#_OFF_T_DEFINED_


	)

67 
__kî√l_off_t
 
	toff_t
;

69 
__kî√l_loff_t
 
	tloff_t
;

70 
loff_t
 
	toff64_t
;

72 
__kî√l_pid_t
 
	tpid_t
;

77 .... 
	g±hªad_©å_t
;

78 .... 
	g±hªad_c⁄d_t
;

79 .... 
	g±hªad_c⁄d©å_t
;

80 .... 
	g±hªad_key_t
;

81 .... 
	g±hªad_muãx_t
;

82 .... 
	g±hªad_⁄˚_t
;

83 .... 
	g±hªad_rwlock_t
;

84 .... 
	g±hªad_rwlock_©å_t
;

85 .... 
	g±hªad_t
;

88 #i‚de‡
_SSIZE_T_DEFINED_


89 
	#_SSIZE_T_DEFINED_


	)

90 
	tssize_t
;

93 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

94 
__kî√l_time_t
 
	ttime_t
;

95 
__kî√l_uid32_t
 
	tuid_t
;

96 sig√d 
	tu£c⁄ds_t
;

98 
__kî√l_daddr_t
 
	tdaddr_t
;

99 
__kî√l_timî_t
 
	ttimî_t
;

100 
__kî√l_mqd_t
 
	tmqd_t
;

102 
__kî√l_ˇddr_t
 
	tˇddr_t
;

103 
	tuöt_t
;

104 
	tuöt
;

107 
	~<sys/sysma¸os.h
>

109 #ifde‡
__BSD_VISIBLE


110 
	tu_ch¨
;

111 
	tu_sh‹t
;

112 
	tu_öt
;

113 
	tu_l⁄g
;

115 
uöt32_t
 
	tu_öt32_t
;

116 
uöt16_t
 
	tu_öt16_t
;

117 
uöt8_t
 
	tu_öt8_t
;

118 
uöt64_t
 
	tu_öt64_t
;

	@sys/uio.h

28 #i‚de‡
_SYS_UIO_H_


29 
	#_SYS_UIO_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<löux/uio.h
>

35 
__BEGIN_DECLS


37 
ªadv
(, c⁄° 
iovec
 *, );

38 
wrôev
(, c⁄° 
iovec
 *, );

40 
	g__END_DECLS


	@sys/un.h

28 #i‚de‡
_SYS_UN_H_


29 
	#_SYS_UN_H_


	)

31 
	~<sys/_ty≥s.h
>

32 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

34 
	~<löux/un.h
>

	@sys/utime.h

28 #i‚de‡
_SYS_UTIME_H_


29 
	#_SYS_UTIME_H_


	)

31 
	~<sys/ty≥s.h
>

32 
	~<löux/utime.h
>

	@sys/utsname.h

28 #i‚de‡
_SYS_UTSNAME_H_


29 
	#_SYS_UTSNAME_H_


	)

31 
	~<sys/cdefs.h
>

33 
	g__BEGIN_DECLS


35 
	#SYS_NMLN
 65

	)

37 
	sut¢ame
 {

38 
	msy¢ame
 [
SYS_NMLN
];

39 
	mnodíame
 [
SYS_NMLN
];

40 
	mªÀa£
 [
SYS_NMLN
];

41 
	mvîsi⁄
 [
SYS_NMLN
];

42 
	mmachöe
 [
SYS_NMLN
];

43 
	mdomaö«me
[
SYS_NMLN
];

46 
u«me
(
ut¢ame
 *);

48 
	g__END_DECLS


	@sys/vfs.h

28 #i‚de‡
_SYS_VFS_H_


29 
	#_SYS_VFS_H_


	)

31 
	~<°döt.h
>

32 
	~<sys/cdefs.h
>

33 
	~<sys/ty≥s.h
>

35 
__BEGIN_DECLS


38 °ru˘ { 
	m__vÆ
[2]; } 
	t__fsid_t
;

41 #ifde‡
__mùs__


42 
	s°©fs
 {

43 
uöt32_t
 
	mf_ty≥
;

44 
uöt32_t
 
	mf_bsize
;

45 
uöt32_t
 
	mf_‰size
;

46 
uöt32_t
 
	m__∑d
;

47 
uöt64_t
 
	mf_blocks
;

48 
uöt64_t
 
	mf_b‰ì
;

49 
uöt64_t
 
	mf_fûes
;

50 
uöt64_t
 
	mf_f‰ì
;

51 
uöt64_t
 
	mf_bavaû
;

52 
__fsid_t
 
	mf_fsid
;

53 
uöt32_t
 
	mf_«mñí
;

54 
uöt32_t
 
	mf_Êags
;

55 
uöt32_t
 
	mf_•¨e
[5];

58 
	s°©fs
 {

59 
uöt32_t
 
	mf_ty≥
;

60 
uöt32_t
 
	mf_bsize
;

61 
uöt64_t
 
	mf_blocks
;

62 
uöt64_t
 
	mf_b‰ì
;

63 
uöt64_t
 
	mf_bavaû
;

64 
uöt64_t
 
	mf_fûes
;

65 
uöt64_t
 
	mf_f‰ì
;

66 
__fsid_t
 
	mf_fsid
;

67 
uöt32_t
 
	mf_«mñí
;

68 
uöt32_t
 
	mf_‰size
;

69 
uöt32_t
 
	mf_Êags
;

70 
uöt32_t
 
	mf_•¨e
[4];

74 
	#ADFS_SUPER_MAGIC
 0xadf5

	)

75 
	#AFFS_SUPER_MAGIC
 0xADFF

	)

76 
	#BEFS_SUPER_MAGIC
 0x42465331

	)

77 
	#BFS_MAGIC
 0x1BADFACE

	)

78 
	#CIFS_MAGIC_NUMBER
 0xFF534D42

	)

79 
	#CODA_SUPER_MAGIC
 0x73757245

	)

80 
	#COH_SUPER_MAGIC
 0x012FF7B7

	)

81 
	#CRAMFS_MAGIC
 0x28cd3d45

	)

82 
	#DEVFS_SUPER_MAGIC
 0x1373

	)

83 
	#EFS_SUPER_MAGIC
 0x00414A53

	)

84 
	#EXT_SUPER_MAGIC
 0x137D

	)

85 
	#EXT2_OLD_SUPER_MAGIC
 0xEF51

	)

86 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

87 
	#EXT3_SUPER_MAGIC
 0xEF53

	)

88 
	#HFS_SUPER_MAGIC
 0x4244

	)

89 
	#HPFS_SUPER_MAGIC
 0xF995E849

	)

90 
	#HUGETLBFS_MAGIC
 0x958458f6

	)

91 
	#ISOFS_SUPER_MAGIC
 0x9660

	)

92 
	#JFFS2_SUPER_MAGIC
 0x72b6

	)

93 
	#JFS_SUPER_MAGIC
 0x3153464a

	)

94 
	#MINIX_SUPER_MAGIC
 0x137F

	)

95 
	#MINIX_SUPER_MAGIC2
 0x138F

	)

96 
	#MINIX2_SUPER_MAGIC
 0x2468

	)

97 
	#MINIX2_SUPER_MAGIC2
 0x2478

	)

98 
	#MSDOS_SUPER_MAGIC
 0x4d44

	)

99 
	#NCP_SUPER_MAGIC
 0x564c

	)

100 
	#NFS_SUPER_MAGIC
 0x6969

	)

101 
	#NTFS_SB_MAGIC
 0x5346544e

	)

102 
	#OPENPROM_SUPER_MAGIC
 0x9Á1

	)

103 
	#PROC_SUPER_MAGIC
 0x9Á0

	)

104 
	#QNX4_SUPER_MAGIC
 0x002f

	)

105 
	#REISERFS_SUPER_MAGIC
 0x52654973

	)

106 
	#ROMFS_MAGIC
 0x7275

	)

107 
	#SMB_SUPER_MAGIC
 0x517B

	)

108 
	#SYSV2_SUPER_MAGIC
 0x012FF7B6

	)

109 
	#SYSV4_SUPER_MAGIC
 0x012FF7B5

	)

110 
	#TMPFS_MAGIC
 0x01021994

	)

111 
	#UDF_SUPER_MAGIC
 0x15013346

	)

112 
	#UFS_MAGIC
 0x00011954

	)

113 
	#USBDEVICE_SUPER_MAGIC
 0x9Á2

	)

114 
	#VXFS_SUPER_MAGIC
 0xa501FCF5

	)

115 
	#XENIX_SUPER_MAGIC
 0x012FF7B4

	)

116 
	#XFS_SUPER_MAGIC
 0x58465342

	)

117 
	#_XIAFS_SUPER_MAGIC
 0x012FD16D

	)

119 
°©fs
(const *, statfs *);

120 
f°©fs
(, 
°©fs
 *);

122 
	g__END_DECLS


	@sys/vt.h

28 
	~<löux/vt.h
>

	@sys/wait.h

28 #i‚de‡
_SYS_WAIT_H_


29 
	#_SYS_WAIT_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/ªsour˚.h
>

34 
	~<löux/waô.h
>

35 
	~<sig«l.h
>

36 
	~<asm/uni°d.h
>

37 
	~<sys/sysˇŒ.h
>

40 
	g__BEGIN_DECLS


42 
	#WEXITSTATUS
(
s
Ë(((sË& 0xff00Ë>> 8)

	)

43 
	#WCOREDUMP
(
s
Ë((sË& 0x80)

	)

44 
	#WTERMSIG
(
s
Ë((sË& 0x7f)

	)

45 
	#WSTOPSIG
(
s
Ë
	`WEXITSTATUS
(s)

	)

47 
	#WIFEXITED
(
s
Ë(
	`WTERMSIG
(sË=0)

	)

48 
	#WIFSTOPPED
(
s
Ë(
	`WTERMSIG
(sË=0x7f)

	)

49 
	#WIFSIGNALED
(
s
Ë(
	`WTERMSIG
((s)+1Ë>2)

	)

51 
pid_t
 
waô
(*);

52 
pid_t
 
waôpid
(pid_t, *, );

53 
pid_t
 
waô3
(*, , 
rußge
 *);

54 
__ölöe__
 
pid_t
 
	$waô4
(
pid_t
 
pid
, *
°©us
, 
›ti⁄s
, 
rußge
 *rusage)

56  (
pid_t
)
	`sysˇŒ
(
__NR_waô4
, 
pid
, 
°©us
, 
›ti⁄s
, 
rußge
);

57 
	}
}

63 
	tidty≥_t
;

65 
waôid
(
idty≥_t
 
which
, 
id_t
 
id
, 
sigöfo_t
 *
öfo
, 
›ti⁄s
);

67 
	g__END_DECLS


	@syslog.h

28 #i‚de‡
_SYSLOG_H


29 
	#_SYSLOG_H


	)

31 
	~<°dio.h
>

32 
	~<sys/cdefs.h
>

33 
	~<°d¨g.h
>

35 
	g__BEGIN_DECLS


38 
	#LOG_EMERG
 0

	)

39 
	#LOG_ALERT
 1

	)

40 
	#LOG_CRIT
 2

	)

41 
	#LOG_ERR
 3

	)

42 
	#LOG_WARNING
 4

	)

43 
	#LOG_NOTICE
 5

	)

44 
	#LOG_INFO
 6

	)

45 
	#LOG_DEBUG
 7

	)

47 
	#LOG_PRIMASK
 7

	)

48 
	#LOG_PRI
(
x
Ë((xË& 
LOG_PRIMASK
)

	)

52 
	#LOG_KERN
 0000

	)

53 
	#LOG_USER
 0010

	)

54 
	#LOG_MAIL
 0020

	)

55 
	#LOG_DAEMON
 0030

	)

56 
	#LOG_AUTH
 0040

	)

57 
	#LOG_SYSLOG
 0050

	)

58 
	#LOG_LPR
 0060

	)

59 
	#LOG_NEWS
 0070

	)

60 
	#LOG_UUCP
 0100

	)

61 
	#LOG_CRON
 0110

	)

62 
	#LOG_AUTHPRIV
 0120

	)

63 
	#LOG_FTP
 0130

	)

64 
	#LOG_LOCAL0
 0200

	)

65 
	#LOG_LOCAL1
 0210

	)

66 
	#LOG_LOCAL2
 0220

	)

67 
	#LOG_LOCAL3
 0230

	)

68 
	#LOG_LOCAL4
 0240

	)

69 
	#LOG_LOCAL5
 0250

	)

70 
	#LOG_LOCAL6
 0260

	)

71 
	#LOG_LOCAL7
 0270

	)

73 
	#LOG_FACMASK
 01770

	)

74 
	#LOG_FAC
(
x
Ë(((xË>> 3Ë& (
LOG_FACMASK
 >> 3))

	)

76 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

77 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

80 
	#LOG_PID
 0x01

	)

81 
	#LOG_CONS
 0x02

	)

82 
	#LOG_ODELAY
 0x04

	)

83 
	#LOG_NDELAY
 0x08

	)

84 
	#LOG_NOWAIT
 0x10

	)

85 
	#LOG_PERROR
 0x20

	)

89 
	ssy¶og_d©a
 {

90 
	mlog_fûe
;

91 
	mc⁄√˘ed
;

92 
	m›íed
;

93 
	mlog_°©
;

94 c⁄° *
	mlog_èg
;

95 
	mlog_Ác
;

96 
	mlog_mask
;

99 
	#SYSLOG_DATA_INIT
 {-1, 0, 0, 0, (c⁄° *)0, 
LOG_USER
, 0xff}

	)

101 
	#_PATH_LOG
 "/dev/kmsg"

	)

103 
˛o£log
();

104 
›ílog
(const *, , );

105 
£éogmask
();

106 
sy¶og
(, const *, ...);

107 
vsy¶og
(, c⁄° *, 
va_li°
);

108 
˛o£log_r
(
sy¶og_d©a
 *);

109 
›ílog_r
(c⁄° *, , , 
sy¶og_d©a
 *);

110 
£éogmask_r
(, 
sy¶og_d©a
 *);

111 
sy¶og_r
(, 
sy¶og_d©a
 *, const *, ...);

112 
vsy¶og_r
(, 
sy¶og_d©a
 *, c⁄° *, 
va_li°
);

114 
	g__END_DECLS


	@termio.h

32 
	~<ãrmios.h
>

	@termios.h

28 #i‚de‡
_TERMIOS_H_


29 
	#_TERMIOS_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/io˘l.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<°döt.h
>

35 
	~<löux/ãrmios.h
>

37 
	g__BEGIN_DECLS


40 #unde‡
TCSANOW


41 
	#TCSANOW
 
TCSETS


	)

43 #unde‡
TCSADRAIN


44 
	#TCSADRAIN
 
TCSETSW


	)

46 #unde‡
TCSAFLUSH


47 
	#TCSAFLUSH
 
TCSETSF


	)

49 
__ölöe__
 
	$tcgë©å
(
fd
, 
ãrmios
 *
s
)

51  
	`io˘l
(
fd
, 
TCGETS
, 
s
);

52 
	}
}

54 
__ölöe__
 
	$tc£èâr
(
fd
, 
__›t
, c⁄° 
ãrmios
 *
s
)

56  
	`io˘l
(
fd
, 
__›t
, (*)
s
);

57 
	}
}

59 
__ölöe__
 
	$tcÊow
(
fd
, 
a˘i⁄
)

61  
	`io˘l
(
fd
, 
TCXONC
, (*)(
öçå_t
)
a˘i⁄
);

62 
	}
}

64 
__ölöe__
 
	$tcÊush
(
fd
, 
__queue
)

66  
	`io˘l
(
fd
, 
TCFLSH
, (*)(
öçå_t
)
__queue
);

67 
	}
}

69 
__ölöe__
 
pid_t
 
	$tcgësid
(
fd
)

71 
pid_t
 
_pid
;

72  
	`io˘l
(
fd
, 
TIOCGSID
, &
_pid
Ë? (
pid_t
)-1 : _pid;

73 
	}
}

75 
__ölöe__
 
	$tc£ndbªak
(
fd
, 
__duøti⁄
)

77  
	`io˘l
(
fd
, 
TCSBRKP
, (*)(
uöçå_t
)
__duøti⁄
);

78 
	}
}

80 
__ölöe__
 
•ìd_t
 
	$cfgëo•ìd
(c⁄° 
ãrmios
 *
s
)

82  (
•ìd_t
)(
s
->
c_cÊag
 & 
CBAUD
);

83 
	}
}

85 
__ölöe__
 
	$cf£to•ìd
(
ãrmios
 *
s
, 
•ìd_t
 
•ìd
)

87 
s
->
c_cÊag
 = (s->c_cÊag & ~
CBAUD
Ë| (
•ìd
 & CBAUD);

89 
	}
}

91 
__ölöe__
 
•ìd_t
 
	$cfgëi•ìd
(c⁄° 
ãrmios
 *
s
)

93  (
•ìd_t
)(
s
->
c_cÊag
 & 
CBAUD
);

94 
	}
}

96 
__ölöe__
 
	$cf£ti•ìd
(
ãrmios
 *
s
, 
•ìd_t
 
•ìd
)

98 
s
->
c_cÊag
 = (s->c_cÊag & ~
CBAUD
Ë| (
•ìd
 & CBAUD);

100 
	}
}

102 
__ölöe__
 
	$cfmakîaw
(
ãrmios
 *
s
)

104 
s
->
c_iÊag
 &~(
IGNBRK
|
BRKINT
|
PARMRK
|
ISTRIP
|
INLCR
|
IGNCR
|
ICRNL
|
IXON
);

105 
s
->
c_oÊag
 &~
OPOST
;

106 
s
->
c_lÊag
 &~(
ECHO
|
ECHONL
|
ICANON
|
ISIG
|
IEXTEN
);

107 
s
->
c_cÊag
 &~(
CSIZE
|
PARENB
);

108 
s
->
c_cÊag
 |
CS8
;

109 
	}
}

111 
	g__END_DECLS


	@thread_db.h

5 #i‚de‡
_LIBTHREAD_DB__THREAD_DB_H


6 
	#_LIBTHREAD_DB__THREAD_DB_H


	)

8 
	~<±hªad.h
>

9 
	~<sig«l.h
>

10 
	~<°döt.h
>

11 
	~<sys/ty≥s.h
>

13 *
	tpßddr_t
;

14 
pid_t
 
	tlwpid_t
;

16 
	#TD_THR_ANY_USER_FLAGS
 0xffffffff

	)

17 
	#TD_THR_LOWEST_PRIORITY
 -20

	)

18 
	#TD_SIGNO_MASK
 
NULL


	)

22 
	mTD_OK
,

23 
	mTD_ERR
,

24 
	mTD_NOTHR
,

25 
	mTD_NOSV
,

26 
	mTD_NOLWP
,

27 
	mTD_BADPH
,

28 
	mTD_BADTH
,

29 
	mTD_BADSH
,

30 
	mTD_BADTA
,

31 
	mTD_BADKEY
,

32 
	mTD_NOMSG
,

33 
	mTD_NOFPREGS
,

34 
	mTD_NOLIBTHREAD
,

35 
	mTD_NOEVENT
,

36 
	mTD_NOCAPAB
,

37 
	mTD_DBERR
,

38 
	mTD_NOAPLIC
,

39 
	mTD_NOTSD
,

40 
	mTD_MALLOC
,

41 
	mTD_PARTIALREG
,

42 
	mTD_NOXREGS
,

43 
	mTD_VERSION


51 
	mTD_CREATE
,

52 
	mTD_DEATH


57 
	mTD_THR_ANY_STATE
,

58 
	mTD_THR_UNKNOWN
,

59 
	mTD_THR_SLEEP
,

60 
	mTD_THR_ZOMBIE


63 
öt32_t
 
	ttd_îr_e
;

64 
uöt32_t
 
	ttd_evít_e
;

65 
uöt32_t
 
	ttd_nŸify_e
;

66 
uöt32_t
 
	ttd_thr_°©e_e
;

67 
±hªad_t
 
	tthªad_t
;

71 
pid_t
 
	mpid
;

72 
ps_¥och™dÀ
 *
	mph
;

73 } 
	ttd_thøgít_t
;

77 
pid_t
 
	mpid
;

78 
pid_t
 
	mtid
;

79 } 
	ttd_thrh™dÀ_t
;

83 
td_evít_e
 
	mevít
;

84 
td_thrh™dÀ_t
 c⁄° * 
	mth_p
;

86 * 
	md©a
;

87 } 
	mmsg
;

88 } 
	ttd_evít_msg_t
;

92 
uöt32_t
 
	mevíts
;

93 } 
	ttd_thr_evíts_t
;

98 * 
	mb±addr
;

99 } 
	mu
;

100 } 
	ttd_nŸify_t
;

104 
td_thr_°©e_e
 
	mti_°©e
;

105 
thªad_t
 
	mti_tid
;

106 
öt32_t
 
	mti_lid
;

107 } 
	ttd_thröfo_t
;

110 
	#td_evít_em±y£t
(
£t
) \

111 (
£t
)->
evíts
 = 0

	)

113 
	#td_evít_fûl£t
(
£t
) \

114 (
£t
)->
evíts
 = 0xffffffff

	)

116 
	#td_evít_add£t
(
£t
, 
n
) \

117 (
£t
)->
evíts
 |(1 << 
n
)

	)

120 
	ttd_thr_ôî_f
(
	ttd_thrh™dÀ_t
 const *, *);

123 
	gps_¥och™dÀ
;

125 #ifde‡
__˝lu•lus


129 
td_îr_e
 
td_è_√w
(
ps_¥och™dÀ
 * 
¥oc_h™dÀ
, 
td_thøgít_t
 ** 
thªad_agít
);

131 
td_îr_e
 
td_è_dñëe
(
td_thøgít_t
 * 
è
);

133 
td_îr_e
 
td_è_£t_evít
(
td_thøgít_t
 c⁄° * 
agít
, 
td_thr_evíts_t
 * 
evít
);

135 
td_îr_e
 
td_è_evít_addr
(
td_thøgít_t
 c⁄° * 
agít
, 
td_evít_e
 
evít
, 
td_nŸify_t
 * 
nŸify
);

137 
td_îr_e
 
td_è_˛ór_evít
(c⁄° 
td_thøgít_t
 * 
è_¨g
,

138 
td_thr_evíts_t
 * 
evít
);

140 
td_îr_e
 
td_è_evít_gëmsg
(
td_thøgít_t
 c⁄° * 
agít
, 
td_evít_msg_t
 * 
evít
);

142 
td_îr_e
 
td_è_m≠_lwp2thr
(
td_thøgít_t
 c⁄° * 
agít
, 
lwpid_t
 
lwpid
,

143 
td_thrh™dÀ_t
 *
th
);

145 
td_îr_e
 
td_thr_gë_öfo
(
td_thrh™dÀ_t
 c⁄° * 
h™dÀ
,

146 
td_thröfo_t
 * 
öfo
);

148 
td_îr_e
 
td_thr_evít_íabÀ
(
td_thrh™dÀ_t
 c⁄° * 
h™dÀ
,

149 
td_evít_e
 
evít
);

151 
td_îr_e
 
td_è_thr_ôî
(
td_thøgít_t
 c⁄° * 
agít
, 
td_thr_ôî_f
 * 
func
, * 
cookõ
,

152 
td_thr_°©e_e
 
°©e
, 
öt32_t
 
¥io
, 
sig£t_t
 * 
sigmask
, 
uöt32_t
 
u£r_Êags
);

154 c⁄° ** 
td_symbﬁ_li°
();

156 
td_îr_e
 
td_thr_és_gë_addr
(c⁄° 
td_thrh™dÀ_t
 * 
th
,

157 
pßddr_t
 
m≠_addªss
, 
size_t
 
off£t
,

158 
pßddr_t
 * 
addªss
);

160 #ifde‡
__˝lu•lus


	@time.h

28 #i‚de‡
_TIME_H_


29 
	#_TIME_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/time.h
>

34 
	#__ARCH_SI_UID_T
 
__kî√l_uid32_t


	)

35 
	~<asm/sigöfo.h
>

36 #unde‡
__ARCH_SI_UID_T


38 
__BEGIN_DECLS


40 
time_t
 
time
(time_t *);

41 
«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

43 *
°πŸimevÆ
(c⁄° *
°r
, 
timevÆ
 *
tv
);

45 
	stm
 {

46 
	mtm_£c
;

47 
	mtm_mö
;

48 
	mtm_hour
;

49 
	mtm_mday
;

50 
	mtm_m⁄
;

51 
	mtm_yór
;

52 
	mtm_wday
;

53 
	mtm_yday
;

54 
	mtm_isd°
;

56 
	mtm_gmtoff
;

57 c⁄° *
	mtm_z⁄e
;

64 
	#TM_ZONE
 
tm_z⁄e


	)

66 * 
as˘ime
(c⁄° 
tm
* 
a
);

67 * 
as˘ime_r
(c⁄° 
tm
* 
a
, * 
buf
);

70 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
Ë
__NDK_FPABI__
;

71 
time_t
 
	`mktime
 (
tm
 *
a
);

73 
tm
* 
	`loˇ…ime
(c⁄° 
time_t
 *
t
);

74 
tm
* 
	`loˇ…ime_r
(c⁄° 
time_t
 *
timï
, tm *
ªsu…
);

76 
tm
* 
	`gmtime
(c⁄° 
time_t
 *
timï
);

77 
tm
* 
	`gmtime_r
(c⁄° 
time_t
 *
timï
, tm *
ªsu…
);

79 * 
	`°Ωtime
(c⁄° *
buf
, c⁄° *
fmt
, 
tm
 *tm);

80 
size_t
 
	`°r·ime
(*
s
, size_à
max
, c⁄° *
f‹m©
, c⁄° 
tm
 *tm);

82 *
	`˘ime
(c⁄° 
time_t
 *
timï
);

83 *
	`˘ime_r
(c⁄° 
time_t
 *
timï
, *
buf
);

85 
	`tz£t
();

88 * 
tz«me
[];

89 
daylight
;

90 
timez⁄e
;

92 
	#CLOCKS_PER_SEC
 1000000

	)

94 
˛ock_t
 
	`˛ock
();

97 
	`˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

98 
	`˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

99 
	`˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

100 
	`˛ock_«no¶ìp
(
˛ockid_t
, , c⁄° 
time•ec
 *, timespec *);

102 
	#CLOCK_REALTIME
 0

	)

103 
	#CLOCK_MONOTONIC
 1

	)

104 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

105 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

106 
	#CLOCK_MONOTONIC_RAW
 4

	)

107 
	#CLOCK_REALTIME_COARSE
 5

	)

108 
	#CLOCK_MONOTONIC_COARSE
 6

	)

109 
	#CLOCK_BOOTTIME
 7

	)

110 
	#CLOCK_REALTIME_ALARM
 8

	)

111 
	#CLOCK_BOOTTIME_ALARM
 9

	)

113 
	`timî_¸óã
(, 
sigevít
*, 
timî_t
*);

114 
	`timî_dñëe
(
timî_t
);

115 
	`timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
, ôimî•e¯*
ovÆue
);

116 
	`timî_gëtime
(
timî_t
 
timîid
, 
ôimî•ec
 *
vÆue
);

117 
	`timî_gëovîrun
(
timî_t
 
timîid
);

119 
__END_DECLS


	@time64.h

31 #i‚de‡
TIME64_H


32 
	#TIME64_H


	)

34 
	~<sys/cdefs.h
>

35 
	~<time.h
>

36 
	~<°döt.h
>

38 
__BEGIN_DECLS


40 
öt64_t
 
	ttime64_t
;

42 
tm
 *
gmtime64_r
 (c⁄° 
time64_t
 *, tm *);

43 
tm
 *
loˇ…ime64_r
 (c⁄° 
time64_t
 *, tm *);

44 
tm
 *
gmtime64
 (c⁄° 
time64_t
 *);

45 
tm
 *
loˇ…ime64
 (c⁄° 
time64_t
 *);

47 *
as˘ime64
 (c⁄° 
tm
 *);

48 *
as˘ime64_r
 (c⁄° 
tm
 *, *);

50 *
˘ime64
 (c⁄° 
time64_t
*);

51 *
˘ime64_r
 (c⁄° 
time64_t
*, *);

53 
time64_t
 
timegm64
 (c⁄° 
tm
 *);

54 
time64_t
 
mktime64
 (c⁄° 
tm
 *);

55 
time64_t
 
timñoˇl64
 (c⁄° 
tm
 *);

57 
	g__END_DECLS


	@unistd.h

28 #i‚de‡
_UNISTD_H_


29 
	#_UNISTD_H_


	)

31 
	~<°ddef.h
>

32 
	~<sys/cdefs.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/£À˘.h
>

35 
	~<sys/sysc⁄f.h
>

36 
	~<löux/ˇ∑bûôy.h
>

37 
	~<∑thc⁄f.h
>

39 
	g__BEGIN_DECLS


42 
	#STDIN_FILENO
 0

	)

43 
	#STDOUT_FILENO
 1

	)

44 
	#STDERR_FILENO
 2

	)

47 
	#SEEK_SET
 0

	)

48 
	#SEEK_CUR
 1

	)

49 
	#SEEK_END
 2

	)

51 **
ívú⁄
;

52 
__n‹ëu∫
 
_exô
();

54 
pid_t
 
f‹k
();

55 
pid_t
 
vf‹k
();

56 
pid_t
 
gëpid
();

57 
pid_t
 
gëtid
();

58 
pid_t
 
gëpgid
(pid_t);

59 
£çgid
(
pid_t
,Öid_t);

60 
pid_t
 
gëµid
();

61 
pid_t
 
gëpgΩ
();

62 
£çgΩ
();

63 
pid_t
 
£tsid
();

65 
execv
(const *, * const *);

66 
execvp
(const *, * const *);

67 
execve
(const *, * const *, * const *);

68 
exe˛
(const *, const *, ...);

69 
exe˛p
(const *, const *, ...);

70 
exe˛e
(const *, const *, ...);

71 
ˇpgë
(
ˇp_u£r_hódî_t
 
hdΩ
, 
ˇp_u£r_d©a_t
 
d©≠
);

72 
ˇp£t
(
ˇp_u£r_hódî_t
 
hdΩ
, c⁄° 
ˇp_u£r_d©a_t
 
d©≠
);

75 
¥˘l
(
›ti⁄
, ...);

77 
ni˚
();

79 
£tuid
(
uid_t
);

80 
uid_t
 
gëuid
();

81 
£ãuid
(
uid_t
);

82 
uid_t
 
gëeuid
();

83 
£tgid
(
gid_t
);

84 
gid_t
 
gëgid
();

85 
£ãgid
(
gid_t
);

86 
gid_t
 
gëegid
();

87 
gëgroups
(, 
gid_t
 *);

88 
£tgroups
(
size_t
, c⁄° 
gid_t
 *);

89 
£åeuid
(
uid_t
, uid_t);

90 
£åegid
(
gid_t
, gid_t);

91 
£åesuid
(
uid_t
, uid_t, uid_t);

92 
£åesgid
(
gid_t
, gid_t, gid_t);

93 
gëªsuid
(
uid_t
 *
ruid
, uid_à*
euid
, uid_à*
suid
);

94 
gëªsgid
(
gid_t
 *
rgid
, gid_à*
egid
, gid_à*
sgid
);

95 
is£tugid
();

96 * 
gëlogö
();

97 * 
gëu£rshñl
();

98 
£tu£rshñl
();

99 
ídu£rshñl
();

104 
	#R_OK
 4

	)

105 
	#W_OK
 2

	)

106 
	#X_OK
 1

	)

107 
	#F_OK
 0

	)

109 
ac˚ss
(const *, );

110 
lök
(const *, const *);

111 
u∆ök
(const *);

112 
chdú
(const *);

113 
fchdú
();

114 
rmdú
(const *);

115 
pùe
(*);

116 #ifde‡
_GNU_SOURCE


117 
pùe2
(*, );

119 
chroŸ
(const *);

120 
symlök
(const *, const *);

121 
ªadlök
(c⁄° *, *, 
size_t
);

122 
chown
(c⁄° *, 
uid_t
, 
gid_t
);

123 
fchown
(, 
uid_t
, 
gid_t
);

124 
lchown
(c⁄° *, 
uid_t
, 
gid_t
);

125 
åunˇã
(c⁄° *, 
off_t
);

126 *
gëcwd
(*, 
size_t
);

128 
sync
();

130 
˛o£
();

131 
off_t
 
l£ek
(, off_t, );

132 
off64_t
 
l£ek64
(, off64_t, );

134 
ssize_t
 
ªad
(, *, 
size_t
);

135 
ssize_t
 
wrôe
(, c⁄° *, 
size_t
);

136 
ssize_t
 
¥ód
(, *, 
size_t
, 
off_t
);

137 
ssize_t
 
pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

139 
dup
();

140 
dup2
(, );

141 
f˙é
(, , ...);

142 
io˘l
(, , ...);

143 
Êock
(, );

144 
fsync
();

145 
fd©async
();

146 
·runˇã
(, 
off_t
);

148 
∑u£
();

149 
Æ¨m
();

150 
¶ìp
();

151 
u¶ìp
();

153 
gëho°«me
(*, 
size_t
);

155 
gëdèbÀsize
();

157 *
__brk
(*);

158 
brk
(*);

159 *
sbrk
(
±rdiff_t
);

161 
gë›t
(, * const *, const *);

162 *
›èrg
;

163 
›töd
, 
›ãº
, 
›t›t
;

165 
ißây
();

166 * 
ây«me
();

167 
ây«me_r
(, *, 
size_t
);

169 
ac˘
(c⁄° * 
fûï©h
);

175 
__ölöe__
 
	$__gë∑geshi·
() {

176 
__∑ge_shi·
;

177  
__∑ge_shi·
;

178 
	}
}

180 
sysc⁄f
(
«me
);

182 
d´m⁄
(, );

185 
ˇcheÊush
(
°¨t
, 
íd
, 
Êags
);

187 
pid_t
 
tcgëpgΩ
(
fd
);

188 
tc£çgΩ
(
fd
, 
pid_t
 
_pid
);

191 
pid_t
 
gësid
(pid_t);

192 
execv≥
(const *, * const *, * const *);

193 
exe˛≥
(const *, const *, ...);

194 
gëfsuid
(
uid_t
);

195 
£tfsuid
(
uid_t
);

196 
gëlogö_r
(* 
«me
, 
size_t
 
«mesize
);

197 
£tho°«me
(c⁄° *, 
size_t
);

198 
gëdomaö«me
(*, 
size_t
);

199 
£tdomaö«me
(c⁄° *, 
size_t
);

203 
	#TEMP_FAILURE_RETRY
(
exp
) ({ \

204 
	`ty≥of
 (
exp
Ë
_rc
; \

206 
_rc
 = (
exp
); \

207 } 
_rc
 =-1 && 
î∫o
 =
EINTR
); \

208 
_rc
; })

	)

210 
	g__END_DECLS


	@util.h

	@utime.h

28 #i‚de‡
_UTIME_H_


29 
	#_UTIME_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<löux/utime.h
>

35 
__BEGIN_DECLS


37 
utime
(c⁄° *, c⁄° 
utimbuf
 *);

39 
	g__END_DECLS


	@utmp.h

28 #i‚de‡
_UTMP_H_


29 
	#_UTMP_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<time.h
>

35 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

36 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

37 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

39 
	#UT_NAMESIZE
 8

	)

40 
	#UT_LINESIZE
 8

	)

41 
	#UT_HOSTSIZE
 16

	)

43 
	#USER_PROCESS
 7

	)

45 
	sœ°log


47 
time_t
 
	mŒ_time
;

48 
	mŒ_löe
[
UT_LINESIZE
];

49 
	mŒ_ho°
[
UT_HOSTSIZE
];

52 
	sexô_°©us


54 
	me_ãrmö©i⁄
;

55 
	me_exô
;

59 
	sutmp


61 
	mut_ty≥
;

62 
pid_t
 
	mut_pid
;

63 
	mut_löe
[
UT_LINESIZE
];

64 
	mut_id
[4];

65 
	mut_u£r
[
UT_NAMESIZE
];

66 
	mut_ho°
[
UT_HOSTSIZE
];

68 
exô_°©us
 
	mut_exô
;

70 
	mut_£ssi⁄
;

71 
timevÆ
 
	mut_tv
;

73 
öt32_t
 
	mut_addr_v6
[4];

74 
	mun£d
[20];

78 
	#ut_«me
 
ut_u£r


	)

79 
	#ut_time
 
ut_tv
.
tv_£c


	)

80 
	#ut_addr
 
ut_addr_v6
[0]

	)

82 
__BEGIN_DECLS


84 
utm≤ame
(const *);

85 
£tuã¡
();

86 
utmp
* 
gëuã¡
();

88 
	g__END_DECLS


	@wchar.h

28 #i‚de‡
_WCHAR_H_


29 
	#_WCHAR_H_


	)

31 
	~<limôs.h
>

32 
	~<sys/cdefs.h
>

33 
	~<°dio.h
>

36 
	#__√ed___wch¨_t


	)

37 
	~<°ddef.h
>

39 
	~<°d¨g.h
>

40 
	~<time.h
>

41 
	~<mÆloc.h
>

43 
	~<°ddef.h
>

44 
	~<sys/_wch¨_limôs.h
>

46 
__BEGIN_DECLS


48 
__WINT_TYPE__
 
	twöt_t
;

49 °ru˘ { 
	mdummy
; } 
	tmb°©e_t
;

52 
	mWC_TYPE_INVALID
 = 0,

53 
	mWC_TYPE_ALNUM
,

54 
	mWC_TYPE_ALPHA
,

55 
	mWC_TYPE_BLANK
,

56 
	mWC_TYPE_CNTRL
,

57 
	mWC_TYPE_DIGIT
,

58 
	mWC_TYPE_GRAPH
,

59 
	mWC_TYPE_LOWER
,

60 
	mWC_TYPE_PRINT
,

61 
	mWC_TYPE_PUNCT
,

62 
	mWC_TYPE_SPACE
,

63 
	mWC_TYPE_UPPER
,

64 
	mWC_TYPE_XDIGIT
,

65 
	mWC_TYPE_MAX


66 } 
	tw˘y≥_t
;

68 
	#WEOF
 ((
wöt_t
)(-1))

	)

70 
wöt_t
 
btowc
();

71 
fw¥ötf
(
FILE
 *, c⁄° 
wch¨_t
 *, ...);

72 
fwsˇnf
(
FILE
 *, c⁄° 
wch¨_t
 *, ...);

73 
iswÆnum
(
wöt_t
);

74 
iswÆpha
(
wöt_t
);

75 
isw˙ål
(
wöt_t
);

76 
iswdigô
(
wöt_t
);

77 
iswgøph
(
wöt_t
);

78 
iswlowî
(
wöt_t
);

79 
isw¥öt
(
wöt_t
);

80 
iswpun˘
(
wöt_t
);

81 
isw•a˚
(
wöt_t
);

82 
iswuµî
(
wöt_t
);

83 
iswxdigô
(
wöt_t
);

84 
isw˘y≥
(
wöt_t
, 
w˘y≥_t
);

85 
wöt_t
 
fgëwc
(
FILE
 *);

86 
wch¨_t
 *
fgëws
(wch¨_à*, , 
FILE
 *);

87 
wöt_t
 
Âutwc
(
wch¨_t
, 
FILE
 *);

88 
Âutws
(c⁄° 
wch¨_t
 *, 
FILE
 *);

89 
fwide
(
FILE
 *, );

90 
wöt_t
 
gëwc
(
FILE
 *);

91 
wöt_t
 
gëwch¨
();

92 
mbsöô
(c⁄° 
mb°©e_t
 *);

93 
size_t
 
mbæí
(c⁄° *, size_t, 
mb°©e_t
 *);

94 
size_t
 
mbπowc
(
wch¨_t
 *, c⁄° *, size_t, 
mb°©e_t
 *);

95 
size_t
 
mb§towcs
(
wch¨_t
 *, c⁄° **, size_t, 
mb°©e_t
 *);

96 
size_t
 
mb°owcs
(
wch¨_t
 *, const *, size_t);

97 
wöt_t
 
putwc
(
wch¨_t
, 
FILE
 *);

98 
wöt_t
 
putwch¨
(
wch¨_t
);

99 
sw¥ötf
(
wch¨_t
 *, 
size_t
, const wchar_t *, ...);

100 
swsˇnf
(c⁄° 
wch¨_t
 *, const wchar_t *, ...);

101 
wöt_t
 
towlowî
(wint_t);

102 
wöt_t
 
towuµî
(wint_t);

103 
wöt_t
 
ungëwc
(wöt_t, 
FILE
 *);

104 
vfw¥ötf
(
FILE
 *, c⁄° 
wch¨_t
 *, 
va_li°
);

105 
vw¥ötf
(c⁄° 
wch¨_t
 *, 
va_li°
);

106 
vsw¥ötf
(
wch¨_t
 *, 
size_t
, c⁄° wch¨_à*, 
va_li°
);

107 
size_t
 
w¸tomb
(*, 
wch¨_t
, 
mb°©e_t
 *);

108 
wch¨_t
 *
wcsˇt
(wchar_t *, const wchar_t *);

109 
wch¨_t
 *
wcschr
(const wchar_t *, wchar_t);

110 
wcscmp
(c⁄° 
wch¨_t
 *, const wchar_t *);

111 
wcscﬁl
(c⁄° 
wch¨_t
 *, const wchar_t *);

112 
wch¨_t
 *
wcs˝y
(wchar_t *, const wchar_t *);

113 
size_t
 
wcsc•n
(c⁄° 
wch¨_t
 *, const wchar_t *);

114 
size_t
 
wcs·ime
(
wch¨_t
 *, size_t, c⁄° wch¨_à*, c⁄° 
tm
 *);

115 
size_t
 
wc¶í
(c⁄° 
wch¨_t
 *);

116 
wch¨_t
 *
wc¢ˇt
(wch¨_à*, c⁄° wch¨_à*, 
size_t
);

117 
wc¢cmp
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*, 
size_t
);

118 
wch¨_t
 *
wc¢˝y
(wch¨_à*, c⁄° wch¨_à*, 
size_t
);

119 
wch¨_t
 *
wc•brk
(const wchar_t *, const wchar_t *);

120 
wch¨_t
 *
wc§chr
(const wchar_t *, wchar_t);

121 
size_t
 
wc§tombs
(*, c⁄° 
wch¨_t
 **, size_t, 
mb°©e_t
 *);

122 
size_t
 
wcs•n
(c⁄° 
wch¨_t
 *, const wchar_t *);

123 
wch¨_t
 *
wcs°r
(const wchar_t *, const wchar_t *);

124 
	$wc°od
(c⁄° 
wch¨_t
 *, wch¨_à**Ë
__NDK_FPABI__
;

125 
wch¨_t
 *
	`wc°ok
(wchar_t *, const wchar_t *, wchar_t **);

126 
	`wc°ﬁ
(c⁄° 
wch¨_t
 *, wchar_t **, );

127 
size_t
 
	`wc°ombs
(*, c⁄° 
wch¨_t
 *, size_t);

128 
	`wc°oul
(c⁄° 
wch¨_t
 *, wchar_t **, );

129 
wch¨_t
 *
	`wcswcs
(const wchar_t *, const wchar_t *);

130 
	`wcswidth
(c⁄° 
wch¨_t
 *, 
size_t
);

131 
size_t
 
	`wcsx‰m
(
wch¨_t
 *, const wchar_t *, size_t);

132 
	`w˘ob
(
wöt_t
);

133 
w˘y≥_t
 
	`w˘y≥
(const *);

134 
	`wcwidth
(
wch¨_t
);

135 
wch¨_t
 *
	`wmemchr
(c⁄° wch¨_à*, wch¨_t, 
size_t
);

136 
	`wmemcmp
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*, 
size_t
);

137 
wch¨_t
 *
	`wmem˝y
(wch¨_à*, c⁄° wch¨_à*, 
size_t
);

138 
wch¨_t
 *
	`wmemmove
(wch¨_à*, c⁄° wch¨_à*, 
size_t
);

139 
wch¨_t
 *
	`wmem£t
(wch¨_à*, wch¨_t, 
size_t
);

140 
	`w¥ötf
(c⁄° 
wch¨_t
 *, ...);

141 
	`wsˇnf
(c⁄° 
wch¨_t
 *, ...);

144 *
	tw˘øns_t
;

145 
wöt_t
 
	`tow˘øns
(wöt_t, 
w˘øns_t
);

146 
w˘øns_t
 
	`w˘øns
 (const *);

148 
__END_DECLS


	@wctype.h

1 
	~<wch¨.h
>

	@zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

15 #ifde‡
Z_PREFIX


16 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

17 
	#deÊ©e
 
z_deÊ©e


	)

18 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

19 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

20 
	#öÊ©e
 
z_öÊ©e


	)

21 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

22 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

23 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

24 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

25 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

26 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

27 
	#deÊ©eBound
 
z_deÊ©eBound


	)

28 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

29 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

30 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

31 
	#öÊ©eSync
 
z_öÊ©eSync


	)

32 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

33 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

34 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

35 
	#öÊ©eBack
 
z_öÊ©eBack


	)

36 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

37 
	#com¥ess
 
z_com¥ess


	)

38 
	#com¥ess2
 
z_com¥ess2


	)

39 
	#com¥essBound
 
z_com¥essBound


	)

40 
	#uncom¥ess
 
z_uncom¥ess


	)

41 
	#adÀr32
 
z_adÀr32


	)

42 
	#¸c32
 
z_¸c32


	)

43 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

44 
	#zEº‹
 
z_zEº‹


	)

46 
	#Æloc_func
 
z_Æloc_func


	)

47 
	#‰ì_func
 
z_‰ì_func


	)

48 
	#ö_func
 
z_ö_func


	)

49 
	#out_func
 
z_out_func


	)

50 
	#Byã
 
z_Byã


	)

51 
	#uI¡
 
z_uI¡


	)

52 
	#uL⁄g
 
z_uL⁄g


	)

53 
	#Byãf
 
z_Byãf


	)

54 
	#ch¨f
 
z_ch¨f


	)

55 
	#ötf
 
z_ötf


	)

56 
	#uI¡f
 
z_uI¡f


	)

57 
	#uL⁄gf
 
z_uL⁄gf


	)

58 
	#voidpf
 
z_voidpf


	)

59 
	#voidp
 
z_voidp


	)

62 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

63 
	#MSDOS


	)

65 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

66 
	#OS2


	)

68 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

69 
	#WINDOWS


	)

71 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

72 #i‚de‡
WIN32


73 
	#WIN32


	)

76 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

77 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

78 #i‚de‡
SYS16BIT


79 
	#SYS16BIT


	)

88 #ifde‡
SYS16BIT


89 
	#MAXSEG_64K


	)

91 #ifde‡
MSDOS


92 
	#UNALIGNED_OK


	)

95 #ifde‡
__STDC_VERSION__


96 #i‚de‡
STDC


97 
	#STDC


	)

99 #i‡
__STDC_VERSION__
 >= 199901L

100 #i‚de‡
STDC99


101 
	#STDC99


	)

105 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

106 
	#STDC


	)

108 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

109 
	#STDC


	)

111 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

112 
	#STDC


	)

114 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

115 
	#STDC


	)

118 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

119 
	#STDC


	)

122 #i‚de‡
STDC


124 c⁄°

	)

129 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

130 
	#NO_DUMMY_DECL


	)

134 #i‚de‡
MAX_MEM_LEVEL


135 #ifde‡
MAXSEG_64K


136 
	#MAX_MEM_LEVEL
 8

	)

138 
	#MAX_MEM_LEVEL
 9

	)

147 #i‚de‡
MAX_WBITS


148 
	#MAX_WBITS
 15

	)

166 #i‚de‡
OF


167 #ifde‡
STDC


168 
	#OF
(
¨gs
Ë
	)
args

170 
	#OF
(
¨gs
Ë()

	)

180 #ifde‡
SYS16BIT


181 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

183 
	#SMALL_MEDIUM


	)

184 #ifde‡
_MSC_VER


185 
	#FAR
 
_Ár


	)

187 
	#FAR
 
Ár


	)

190 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

192 
	#SMALL_MEDIUM


	)

193 #ifde‡
__BORLANDC__


194 
	#FAR
 
_Ár


	)

196 
	#FAR
 
Ár


	)

201 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

205 #ifde‡
ZLIB_DLL


206 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

207 #ifde‡
ZLIB_INTERNAL


208 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

210 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

218 #ifde‡
ZLIB_WINAPI


219 #ifde‡
FAR


220 #unde‡
FAR


222 
	~<wödows.h
>

225 
	#ZEXPORT
 
WINAPI


	)

226 #ifde‡
WIN32


227 
	#ZEXPORTVA
 
WINAPIV


	)

229 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

234 #i‡
deföed
 (
__BEOS__
)

235 #ifde‡
ZLIB_DLL


236 #ifde‡
ZLIB_INTERNAL


237 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

238 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

240 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

241 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

246 #i‚de‡
ZEXTERN


247 
	#ZEXTERN
 

	)

249 #i‚de‡
ZEXPORT


250 
	#ZEXPORT


	)

252 #i‚de‡
ZEXPORTVA


253 
	#ZEXPORTVA


	)

256 #i‚de‡
FAR


257 
	#FAR


	)

260 #i‡!
deföed
(
__MACTYPES__
)

261 
	tByã
;

263 
	tuI¡
;

264 
	tuL⁄g
;

266 #ifde‡
SMALL_MEDIUM


268 
	#Byãf
 
Byã
 
FAR


	)

270 
Byã
 
	tFAR
 
	tByãf
;

272 
	tFAR
 
	tch¨f
;

273 
	tFAR
 
	tötf
;

274 
uI¡
 
	tFAR
 
	tuI¡f
;

275 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

277 #ifde‡
STDC


278 c⁄° *
	tvoidpc
;

279 
	tFAR
 *
	tvoidpf
;

280 *
	tvoidp
;

282 
Byã
 c⁄° *
	tvoidpc
;

283 
Byã
 
	tFAR
 *
	tvoidpf
;

284 
Byã
 *
	tvoidp
;

288 
	~<sys/ty≥s.h
>

289 
	~<uni°d.h
>

290 #ifde‡
VMS


291 
	~<unixio.h
>

293 
	#z_off_t
 
off_t


	)

295 #i‚de‡
SEEK_SET


296 
	#SEEK_SET
 0

	)

297 
	#SEEK_CUR
 1

	)

298 
	#SEEK_END
 2

	)

300 #i‚de‡
z_off_t


301 
	#z_off_t
 

	)

304 #i‡
deföed
(
__OS400__
)

305 
	#NO_v¢¥ötf


	)

308 #i‡
deföed
(
__MVS__
)

309 
	#NO_v¢¥ötf


	)

310 #ifde‡
FAR


311 #unde‡
FAR


316 #i‡
deföed
(
__MVS__
)

317 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

318 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

319 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

320 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

321 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

322 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

323 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

324 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

325 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

326 #¥agm®
m≠
(
com¥essBound
,"CMBND")

327 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

328 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

329 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.3"

	)

41 
	#ZLIB_VERNUM
 0x1230

	)

77 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

78 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

80 
öã∫Æ_°©e
;

82 
	sz_°ªam_s
 {

83 
Byãf
 *
√xt_ö
;

84 
uI¡
 
avaû_ö
;

85 
uL⁄g
 
tŸÆ_ö
;

87 
Byãf
 *
√xt_out
;

88 
uI¡
 
avaû_out
;

89 
uL⁄g
 
tŸÆ_out
;

91 *
msg
;

92 
öã∫Æ_°©e
 
FAR
 *
°©e
;

94 
Æloc_func
 
zÆloc
;

95 
‰ì_func
 
z‰ì
;

96 
voidpf
 
›aque
;

98 
d©a_ty≥
;

99 
uL⁄g
 
adÀr
;

100 
uL⁄g
 
ª£rved
;

101 } 
	tz_°ªam
;

103 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

109 
	sgz_hódî_s
 {

110 
ãxt
;

111 
uL⁄g
 
time
;

112 
xÊags
;

113 
os
;

114 
Byãf
 *
exåa
;

115 
uI¡
 
exåa_Àn
;

116 
uI¡
 
exåa_max
;

117 
Byãf
 *
«me
;

118 
uI¡
 
«me_max
;

119 
Byãf
 *
commít
;

120 
uI¡
 
comm_max
;

121 
h¸c
;

122 
d⁄e
;

124 } 
	tgz_hódî
;

126 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

162 
	#Z_NO_FLUSH
 0

	)

163 
	#Z_PARTIAL_FLUSH
 1

	)

164 
	#Z_SYNC_FLUSH
 2

	)

165 
	#Z_FULL_FLUSH
 3

	)

166 
	#Z_FINISH
 4

	)

167 
	#Z_BLOCK
 5

	)

170 
	#Z_OK
 0

	)

171 
	#Z_STREAM_END
 1

	)

172 
	#Z_NEED_DICT
 2

	)

173 
	#Z_ERRNO
 (-1)

	)

174 
	#Z_STREAM_ERROR
 (-2)

	)

175 
	#Z_DATA_ERROR
 (-3)

	)

176 
	#Z_MEM_ERROR
 (-4)

	)

177 
	#Z_BUF_ERROR
 (-5)

	)

178 
	#Z_VERSION_ERROR
 (-6)

	)

183 
	#Z_NO_COMPRESSION
 0

	)

184 
	#Z_BEST_SPEED
 1

	)

185 
	#Z_BEST_COMPRESSION
 9

	)

186 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

189 
	#Z_FILTERED
 1

	)

190 
	#Z_HUFFMAN_ONLY
 2

	)

191 
	#Z_RLE
 3

	)

192 
	#Z_FIXED
 4

	)

193 
	#Z_DEFAULT_STRATEGY
 0

	)

196 
	#Z_BINARY
 0

	)

197 
	#Z_TEXT
 1

	)

198 
	#Z_ASCII
 
Z_TEXT


	)

199 
	#Z_UNKNOWN
 2

	)

202 
	#Z_DEFLATED
 8

	)

205 
	#Z_NULL
 0

	)

207 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

212 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

242 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

328 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

363 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

462 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

538 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

539 c⁄° 
Byãf
 *
di˘i⁄¨y
,

540 
uI¡
 
di˘Lígth
));

577 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

578 
z_°ªamp
 
sour˚
));

595 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

606 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

607 
Àvñ
,

608 
°øãgy
));

627 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

628 
good_Àngth
,

629 
max_œzy
,

630 
ni˚_Àngth
,

631 
max_chaö
));

644 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

645 
uL⁄g
 
sour˚Lí
));

653 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

654 
bôs
,

655 
vÆue
));

669 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

670 
gz_hódîp
 
hód
));

736 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

737 c⁄° 
Byãf
 *
di˘i⁄¨y
,

738 
uI¡
 
di˘Lígth
));

758 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

773 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

774 
z_°ªamp
 
sour˚
));

789 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

799 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

800 
bôs
,

801 
vÆue
));

815 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

816 
gz_hódîp
 
hód
));

877 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

878 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

880 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

881 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

882 
out_func
 
out
, 
FAR
 *
out_desc
));

949 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

957 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1009 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1010 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1024 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1025 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1026 
Àvñ
));

1040 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1047 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1048 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1066 
voidp
 
	tgzFûe
;

1068 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((c⁄° *
∑th
, c⁄° *
mode
));

1085 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1098 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1106 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1114 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1115 
voidpc
 
buf
, 
Àn
));

1122 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1135 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1142 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1151 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1157 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1163 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1173 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1183 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
 
fûe
,

1184 
z_off_t
 
off£t
, 
whí˚
));

1201 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1208 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
 
fûe
));

1217 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1223 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1229 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1236 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1245 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1260 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1276 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g 
adÀr1
, uL⁄g 
adÀr2
,

1277 
z_off_t
 
Àn2
));

1285 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1301 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g 
¸c1
, uL⁄g 
¸c2
, 
z_off_t
 
Àn2
));

1317 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1318 c⁄° *
vîsi⁄
, 
°ªam_size
));

1319 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1320 c⁄° *
vîsi⁄
, 
°ªam_size
));

1321 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1322 
wödowBôs
, 
memLevñ
,

1323 
°øãgy
, c⁄° *
vîsi⁄
,

1324 
°ªam_size
));

1325 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1326 c⁄° *
vîsi⁄
, 
°ªam_size
));

1327 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1328 
FAR
 *
wödow
,

1329 c⁄° *
vîsi⁄
,

1330 
°ªam_size
));

1331 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1332 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1333 
	#öÊ©eInô
(
°rm
) \

1334 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1335 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1336 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1337 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1338 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1339 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1340 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1341 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1342 
ZLIB_VERSION
, (
z_°ªam
))

	)

1345 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1346 
	söã∫Æ_°©e
 {
dummy
;};

1349 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1350 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
 
z
));

1351 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1353 #ifde‡
__˝lu•lus


	@/usr/include/stddef.h

61 #i‚de‡
__STDDEF_H__


62 
	#__STDDEF_H__


	)

64 
	~<_ty≥s.h
>

66 
	~<sys/_ty≥s.h
>

67 
	~<sys/_ty≥s/_nuŒ.h
>

68 
	~<sys/_ty≥s/_off£tof.h
>

69 
	~<sys/_ty≥s/_±rdiff_t.h
>

71 #i‡
deföed
(
__STDC_WANT_LIB_EXT1__
) && __STDC_WANT_LIB_EXT1__ >= 1

72 
	~<sys/_ty≥s/_rsize_t.h
>

77 
	~<sys/_ty≥s/_size_t.h
>

79 
	~<sys/_ty≥s/_wch¨_t.h
>

81 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

82 
	~<sys/_ty≥s/_wöt_t.h
>

	@/usr/include/sys/mbuf.h

79 #i‚def 
_SYS_MBUF_H_


80 
	#_SYS_MBUF_H_


	)

82 
	~<sys/cdefs.h
>

83 
	~<sys/≠∂ópi›ts.h
>

87 
	#MT_FREE
 0

	)

88 
	#MT_DATA
 1

	)

89 
	#MT_HEADER
 2

	)

90 
	#MT_SOCKET
 3

	)

91 
	#MT_PCB
 4

	)

92 
	#MT_RTABLE
 5

	)

93 
	#MT_HTABLE
 6

	)

94 
	#MT_ATABLE
 7

	)

95 
	#MT_SONAME
 8

	)

96 
	#MT_SOOPTS
 10

	)

97 
	#MT_FTABLE
 11

	)

98 
	#MT_RIGHTS
 12

	)

99 
	#MT_IFADDR
 13

	)

100 
	#MT_CONTROL
 14

	)

101 
	#MT_OOBDATA
 15

	)

102 
	#MT_TAG
 16

	)

103 
	#MT_MAX
 32

	)

109 
	smb°©
 {

110 
u_öt32_t
 
	mm_mbufs
;

111 
u_öt32_t
 
	mm_˛u°îs
;

112 
u_öt32_t
 
	mm_•¨e
;

113 
u_öt32_t
 
	mm_˛‰ì
;

114 
u_öt32_t
 
	mm_dr›s
;

115 
u_öt32_t
 
	mm_waô
;

116 
u_öt32_t
 
	mm_døö
;

117 
u_sh‹t
 
	mm_mty≥s
[256];

118 
u_öt32_t
 
	mm_mcÁû
;

119 
u_öt32_t
 
	mm_mpÁû
;

120 
u_öt32_t
 
	mm_msize
;

121 
u_öt32_t
 
	mm_m˛byãs
;

122 
u_öt32_t
 
	mm_mö˛size
;

123 
u_öt32_t
 
	mm_mÀn
;

124 
u_öt32_t
 
	mm_mhÀn
;

125 
u_öt32_t
 
	mm_big˛u°îs
;

126 
u_öt32_t
 
	mm_big˛‰ì
;

127 
u_öt32_t
 
	mm_bigm˛byãs
;

131 
	somb°©
 {

132 
u_öt32_t
 
	mm_mbufs
;

133 
u_öt32_t
 
	mm_˛u°îs
;

134 
u_öt32_t
 
	mm_•¨e
;

135 
u_öt32_t
 
	mm_˛‰ì
;

136 
u_öt32_t
 
	mm_dr›s
;

137 
u_öt32_t
 
	mm_waô
;

138 
u_öt32_t
 
	mm_døö
;

139 
u_sh‹t
 
	mm_mty≥s
[256];

140 
u_öt32_t
 
	mm_mcÁû
;

141 
u_öt32_t
 
	mm_mpÁû
;

142 
u_öt32_t
 
	mm_msize
;

143 
u_öt32_t
 
	mm_m˛byãs
;

144 
u_öt32_t
 
	mm_mö˛size
;

145 
u_öt32_t
 
	mm_mÀn
;

146 
u_öt32_t
 
	mm_mhÀn
;

152 
	#MAX_MBUF_CNAME
 15

	)

155 
	smb_˛ass_°©
 {

156 
	mmb˛_˙ame
[
MAX_MBUF_CNAME
 + 1];

157 
u_öt32_t
 
	mmb˛_size
;

158 
u_öt32_t
 
	mmb˛_tŸÆ
;

159 
u_öt32_t
 
	mmb˛_a˘ive
;

160 
u_öt32_t
 
	mmb˛_ö‰ì
;

161 
u_öt32_t
 
	mmb˛_¶ab_˙t
;

162 #i‡
deföed
(
KERNEL
Ë|| deföed(
__LP64__
)

163 
u_öt32_t
 
	mmb˛_∑d
;

165 
u_öt64_t
 
	mmb˛_Æloc_˙t
;

166 
u_öt64_t
 
	mmb˛_‰ì_˙t
;

167 
u_öt64_t
 
	mmb˛_nŸifõd
;

168 
u_öt64_t
 
	mmb˛_purge_˙t
;

169 
u_öt64_t
 
	mmb˛_Áû_˙t
;

170 
u_öt32_t
 
	mmb˛_˘ŸÆ
;

171 
u_öt32_t
 
	mmb˛_ªÀa£_˙t
;

175 
u_öt32_t
 
	mmb˛_mc_°©e
;

176 
u_öt32_t
 
	mmb˛_mc_ˇched
;

177 
u_öt32_t
 
	mmb˛_mc_waôî_˙t
;

178 
u_öt32_t
 
	mmb˛_mc_wªåy_˙t
;

179 
u_öt32_t
 
	mmb˛_mc_nwªåy_˙t
;

180 
u_öt32_t
 
	mmb˛_≥ak_ªp‹ãd
;

181 
u_öt32_t
 
	mmb˛_ª£rved
[7];

182 } 
	tmb_˛ass_°©_t
;

184 
	#MCS_DISABLED
 0

	)

185 
	#MCS_ONLINE
 1

	)

186 
	#MCS_PURGING
 2

	)

187 
	#MCS_OFFLINE
 3

	)

190 
	smb_°©
 {

191 
u_öt32_t
 
	mmbs_˙t
;

192 #i‡
deföed
(
KERNEL
Ë|| deföed(
__LP64__
)

193 
u_öt32_t
 
	mmbs_∑d
;

195 
mb_˛ass_°©_t
 
	mmbs_˛ass
[1];

196 } 
	tmb_°©_t
;

	@/usr/include/_types.h

24 #i‚de‡
__TYPES_H_


25 
	#__TYPES_H_


	)

27 
	~<sys/_ty≥s.h
>

29 #i‡
__GNUC__
 > 2 || __GNUC__ =2 && 
__GNUC_MINOR__
 >= 7

30 
	#__°rfm⁄like
(
fmèrg
, 
fú°v¨¨g
) \

31 
	`__©åibuã__
((
	`__f‹m©__
 (
__°rfm⁄__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

32 
	#__°r·imñike
(
fmèrg
) \

33 
	`__©åibuã__
((
	`__f‹m©__
 (
__°r·ime__
, 
fmèrg
, 0)))

	)

35 
	#__°rfm⁄like
(
fmèrg
, 
fú°v¨¨g
)

	)

36 
	#__°r·imñike
(
fmèrg
)

	)

39 
	t__d¨wö_∆_ôem
;

40 
	t__d¨wö_w˘øns_t
;

41 #ifde‡
__LP64__


42 
__uöt32_t
 
	t__d¨wö_w˘y≥_t
;

44 
	t__d¨wö_w˘y≥_t
;

47 #ifde‡
__WCHAR_MAX__


48 
	#__DARWIN_WCHAR_MAX
 
__WCHAR_MAX__


	)

50 
	#__DARWIN_WCHAR_MAX
 0x7fffffff

	)

53 #i‡
__DARWIN_WCHAR_MAX
 > 0xffffU

54 
	#__DARWIN_WCHAR_MIN
 (-0x7ffffff‡- 1)

	)

56 
	#__DARWIN_WCHAR_MIN
 0

	)

58 
	#__DARWIN_WEOF
 ((
__d¨wö_wöt_t
)-1)

	)

60 #i‚de‡
_FORTIFY_SOURCE


61 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1050)

62 
	#_FORTIFY_SOURCE
 0

	)

64 
	#_FORTIFY_SOURCE
 2

	)

	@/usr/include/sys/_types/_null.h

28 #i‚de‡
NULL


29 
	#NULL
 
__DARWIN_NULL


	)

	@/usr/include/sys/_types/_offsetof.h

28 #i‚de‡
off£tof


29 
	#off£tof
(
ty≥
, 
fõld
Ë
	`__off£tof
—y≥, fõld)

	)

	@/usr/include/sys/_types/_ptrdiff_t.h

29 #i‚de‡
_PTRDIFF_T


30 
	#_PTRDIFF_T


	)

31 
__d¨wö_±rdiff_t
 
	t±rdiff_t
;

	@/usr/include/sys/_types/_rsize_t.h

28 #i‚de‡
_RSIZE_T


29 
	#_RSIZE_T


	)

30 
__d¨wö_size_t
 
	trsize_t
;

	@/usr/include/sys/_types/_size_t.h

28 #i‚de‡
_SIZE_T


29 
	#_SIZE_T


	)

30 
__d¨wö_size_t
 
	tsize_t
;

	@/usr/include/sys/_types/_wchar_t.h

30 #i‚de‡
__˝lu•lus


31 #i‚de‡
_WCHAR_T


32 
	#_WCHAR_T


	)

33 
__d¨wö_wch¨_t
 
	twch¨_t
;

	@/usr/include/sys/_types/_wint_t.h

29 #i‚de‡
_WINT_T


30 
	#_WINT_T


	)

31 
__d¨wö_wöt_t
 
	twöt_t
;

	@/usr/include/sys/appleapiopts.h

29 #i‚de‡
__SYS_APPLEAPIOPTS_H__


30 
	#__SYS_APPLEAPIOPTS_H__


	)

33 #i‚de‡
__APPLE_API_STANDARD


34 
	#__APPLE_API_STANDARD


	)

37 #i‚de‡
__APPLE_API_STABLE


38 
	#__APPLE_API_STABLE


	)

41 #i‚de‡
__APPLE_API_STRICT_CONFORMANCE


43 #i‚de‡
__APPLE_API_EVOLVING


44 
	#__APPLE_API_EVOLVING


	)

47 #i‚de‡
__APPLE_API_UNSTABLE


48 
	#__APPLE_API_UNSTABLE


	)

51 #i‚de‡
__APPLE_API_PRIVATE


52 
	#__APPLE_API_PRIVATE


	)

55 #i‚de‡
__APPLE_API_OBSOLETE


56 
	#__APPLE_API_OBSOLETE


	)

	@
1
.
1
/usr/include
768
13559
EGL/egl.h
EGL/eglext.h
EGL/eglplatform.h
GLES/gl.h
GLES/glext.h
GLES/glplatform.h
GLES2/gl2.h
GLES2/gl2ext.h
GLES2/gl2platform.h
KHR/khrplatform.h
SLES/OpenSLES.h
SLES/OpenSLES_Android.h
SLES/OpenSLES_AndroidConfiguration.h
SLES/OpenSLES_Platform.h
alloca.h
android/api-level.h
android/asset_manager.h
android/asset_manager_jni.h
android/bitmap.h
android/configuration.h
android/input.h
android/keycodes.h
android/log.h
android/looper.h
android/native_activity.h
android/native_window.h
android/native_window_jni.h
android/obb.h
android/rect.h
android/sensor.h
android/storage_manager.h
android/window.h
arpa/inet.h
arpa/nameser.h
arpa/telnet.h
asm-generic/4level-fixup.h
asm-generic/audit_dir_write.h
asm-generic/bitops/__ffs.h
asm-generic/bitops/atomic.h
asm-generic/bitops/ffz.h
asm-generic/bitops/find.h
asm-generic/bitops/fls.h
asm-generic/bitops/fls64.h
asm-generic/bitops/le.h
asm-generic/bitops/non-atomic.h
asm-generic/bug.h
asm-generic/cputime.h
asm-generic/emergency-restart.h
asm-generic/errno-base.h
asm-generic/errno.h
asm-generic/fcntl.h
asm-generic/futex.h
asm-generic/ioctl.h
asm-generic/ipc.h
asm-generic/local.h
asm-generic/memory_model.h
asm-generic/mman-common.h
asm-generic/mman.h
asm-generic/mutex-xchg.h
asm-generic/percpu.h
asm-generic/pgtable-nopmd.h
asm-generic/pgtable-nopud.h
asm-generic/pgtable.h
asm-generic/poll.h
asm-generic/resource.h
asm-generic/sections.h
asm-generic/siginfo.h
asm-generic/signal.h
asm-generic/socket.h
asm-generic/swab.h
asm-generic/tlb.h
asm-generic/topology.h
asm-generic/xor.h
asm/a.out.h
asm/arch/board-perseus2.h
asm/arch/board.h
asm/arch/cpu.h
asm/arch/dma.h
asm/arch/fpga.h
asm/arch/gpio-switch.h
asm/arch/gpio.h
asm/arch/hardware.h
asm/arch/io.h
asm/arch/irqs.h
asm/arch/mcbsp.h
asm/arch/memory.h
asm/arch/mtd-xip.h
asm/arch/mux.h
asm/arch/omap24xx.h
asm/arch/serial.h
asm/arch/timex.h
asm/arch/vmalloc.h
asm/atomic.h
asm/auxvec.h
asm/bitops.h
asm/byteorder.h
asm/cache.h
asm/cacheflush.h
asm/cputime.h
asm/delay.h
asm/div64.h
asm/dma-mapping.h
asm/dma.h
asm/domain.h
asm/dyntick.h
asm/elf.h
asm/errno.h
asm/fcntl.h
asm/fpstate.h
asm/glue.h
asm/hardirq.h
asm/hardware.h
asm/hw_irq.h
asm/ide.h
asm/io.h
asm/ioctl.h
asm/ioctls.h
asm/ipcbuf.h
asm/irq.h
asm/linkage.h
asm/local.h
asm/locks.h
asm/mc146818rtc.h
asm/memory.h
asm/mman.h
asm/module.h
asm/msgbuf.h
asm/mtd-xip.h
asm/page.h
asm/param.h
asm/percpu.h
asm/pgalloc.h
asm/pgtable-hwdef.h
asm/pgtable.h
asm/poll.h
asm/posix_types.h
asm/proc-fns.h
asm/processor.h
asm/procinfo.h
asm/ptrace.h
asm/resource.h
asm/scatterlist.h
asm/semaphore.h
asm/sembuf.h
asm/shmbuf.h
asm/shmparam.h
asm/sigcontext.h
asm/siginfo.h
asm/signal.h
asm/sizes.h
asm/smp.h
asm/socket.h
asm/sockios.h
asm/spinlock.h
asm/spinlock_types.h
asm/stat.h
asm/statfs.h
asm/suspend.h
asm/system.h
asm/termbits.h
asm/termios.h
asm/thread_info.h
asm/timex.h
asm/tlbflush.h
asm/topology.h
asm/types.h
asm/uaccess.h
asm/unaligned.h
asm/unistd.h
asm/user.h
asm/vga.h
assert.h
byteswap.h
ctype.h
dirent.h
dlfcn.h
elf.h
endian.h
err.h
errno.h
fcntl.h
features.h
fenv.h
fnmatch.h
fts.h
getopt.h
grp.h
inttypes.h
jni.h
lastlog.h
libgen.h
limits.h
link.h
linux/a.out.h
linux/aio_abi.h
linux/akm8976.h
linux/android_alarm.h
linux/android_pmem.h
linux/android_power.h
linux/apm_bios.h
linux/ashmem.h
linux/ata.h
linux/atm.h
linux/atmapi.h
linux/atmdev.h
linux/atmioc.h
linux/atmppp.h
linux/atmsap.h
linux/attribute_container.h
linux/auto_fs.h
linux/autoconf.h
linux/auxvec.h
linux/backing-dev.h
linux/binder.h
linux/binfmts.h
linux/bio.h
linux/bitmap.h
linux/bitops.h
linux/blkdev.h
linux/blkpg.h
linux/blockgroup_lock.h
linux/byteorder/big_endian.h
linux/byteorder/generic.h
linux/byteorder/little_endian.h
linux/byteorder/swab.h
linux/byteorder/swabb.h
linux/cache.h
linux/calc64.h
linux/capability.h
linux/capi.h
linux/cdev.h
linux/cdrom.h
linux/circ_buf.h
linux/clk.h
linux/coda.h
linux/coda_fs_i.h
linux/compat.h
linux/compiler-gcc.h
linux/compiler.h
linux/completion.h
linux/config.h
linux/console_struct.h
linux/cpu.h
linux/cpumask.h
linux/ctype.h
linux/dccp.h
linux/debug_locks.h
linux/delay.h
linux/device.h
linux/dirent.h
linux/dm-ioctl.h
linux/dma-mapping.h
linux/dmaengine.h
linux/efs_dir.h
linux/efs_fs_i.h
linux/efs_fs_sb.h
linux/elevator.h
linux/elf-em.h
linux/elf.h
linux/err.h
linux/errno.h
linux/errqueue.h
linux/etherdevice.h
linux/ext2_fs.h
linux/ext3_fs.h
linux/fadvise.h
linux/fb.h
linux/fcntl.h
linux/fd.h
linux/file.h
linux/filter.h
linux/fs.h
linux/ftape.h
linux/futex.h
linux/genhd.h
linux/gfp.h
linux/hardirq.h
linux/hdlc/ioctl.h
linux/hdreg.h
linux/hdsmart.h
linux/highmem.h
linux/hil.h
linux/i2c.h
linux/icmp.h
linux/if.h
linux/if_arcnet.h
linux/if_arp.h
linux/if_bridge.h
linux/if_ether.h
linux/if_fc.h
linux/if_fddi.h
linux/if_hippi.h
linux/if_packet.h
linux/if_ppp.h
linux/if_tr.h
linux/if_tun.h
linux/if_vlan.h
linux/in.h
linux/in6.h
linux/init.h
linux/inotify.h
linux/input.h
linux/interrupt.h
linux/ioctl.h
linux/ioport.h
linux/ioprio.h
linux/ip.h
linux/ipc.h
linux/ipmi_msgdefs.h
linux/ipmi_smi.h
linux/ipv6.h
linux/ipx.h
linux/irq.h
linux/irq_cpustat.h
linux/irqflags.h
linux/irqreturn.h
linux/jbd.h
linux/jiffies.h
linux/kd.h
linux/kdev_t.h
linux/kernel.h
linux/kernel_stat.h
linux/kernelcapi.h
linux/kexec.h
linux/key.h
linux/keyboard.h
linux/keychord.h
linux/klist.h
linux/kmod.h
linux/kobject.h
linux/kref.h
linux/ktime.h
linux/limits.h
linux/linkage.h
linux/list.h
linux/lockd/nlm.h
linux/lockd/xdr.h
linux/lockdep.h
linux/loop.h
linux/magic.h
linux/major.h
linux/mc146818rtc.h
linux/mca.h
linux/mempolicy.h
linux/mempool.h
linux/miscdevice.h
linux/mm.h
linux/mmc/card.h
linux/mmc/host.h
linux/mmc/mmc.h
linux/mmzone.h
linux/mod_devicetable.h
linux/module.h
linux/moduleparam.h
linux/mount.h
linux/msdos_fs.h
linux/msg.h
linux/msm_adsp.h
linux/msm_audio.h
linux/msm_mdp.h
linux/mt9t013.h
linux/mtd/bbm.h
linux/mtd/blktrans.h
linux/mtd/cfi.h
linux/mtd/cfi_endian.h
linux/mtd/compatmac.h
linux/mtd/flashchip.h
linux/mtd/map.h
linux/mtd/mtd.h
linux/mtd/nand.h
linux/mtd/nand_ecc.h
linux/mtd/nftl.h
linux/mtd/onenand_regs.h
linux/mtd/partitions.h
linux/mtio.h
linux/mutex-debug.h
linux/mutex.h
linux/ncp.h
linux/ncp_mount.h
linux/ncp_no.h
linux/net.h
linux/netdevice.h
linux/netfilter.h
linux/netfilter/nf_conntrack_common.h
linux/netfilter/nf_conntrack_ftp.h
linux/netfilter/nf_conntrack_sctp.h
linux/netfilter/nf_conntrack_tcp.h
linux/netfilter/nf_conntrack_tuple_common.h
linux/netfilter/nfnetlink.h
linux/netfilter/nfnetlink_conntrack.h
linux/netfilter/x_tables.h
linux/netfilter/xt_CLASSIFY.h
linux/netfilter/xt_CONNSECMARK.h
linux/netfilter/xt_NFQUEUE.h
linux/netfilter/xt_SECMARK.h
linux/netfilter/xt_comment.h
linux/netfilter/xt_connbytes.h
linux/netfilter/xt_conntrack.h
linux/netfilter/xt_dccp.h
linux/netfilter/xt_esp.h
linux/netfilter/xt_helper.h
linux/netfilter/xt_length.h
linux/netfilter/xt_limit.h
linux/netfilter/xt_mac.h
linux/netfilter/xt_multiport.h
linux/netfilter/xt_physdev.h
linux/netfilter/xt_pkttype.h
linux/netfilter/xt_quota.h
linux/netfilter/xt_realm.h
linux/netfilter/xt_sctp.h
linux/netfilter/xt_state.h
linux/netfilter/xt_statistic.h
linux/netfilter/xt_string.h
linux/netfilter/xt_tcpmss.h
linux/netfilter/xt_tcpudp.h
linux/netfilter_arp.h
linux/netfilter_arp/arp_tables.h
linux/netfilter_bridge.h
linux/netfilter_ipv4.h
linux/netfilter_ipv4/ip_conntrack.h
linux/netfilter_ipv4/ip_conntrack_tuple.h
linux/netfilter_ipv4/ip_nat.h
linux/netfilter_ipv4/ip_nat_rule.h
linux/netfilter_ipv4/ip_queue.h
linux/netfilter_ipv4/ip_tables.h
linux/netfilter_ipv4/ipt_CLASSIFY.h
linux/netfilter_ipv4/ipt_DSCP.h
linux/netfilter_ipv4/ipt_ECN.h
linux/netfilter_ipv4/ipt_LOG.h
linux/netfilter_ipv4/ipt_NFQUEUE.h
linux/netfilter_ipv4/ipt_REJECT.h
linux/netfilter_ipv4/ipt_TCPMSS.h
linux/netfilter_ipv4/ipt_TOS.h
linux/netfilter_ipv4/ipt_TTL.h
linux/netfilter_ipv4/ipt_ULOG.h
linux/netfilter_ipv4/ipt_addrtype.h
linux/netfilter_ipv4/ipt_ah.h
linux/netfilter_ipv4/ipt_comment.h
linux/netfilter_ipv4/ipt_connbytes.h
linux/netfilter_ipv4/ipt_dccp.h
linux/netfilter_ipv4/ipt_dscp_.h
linux/netfilter_ipv4/ipt_esp.h
linux/netfilter_ipv4/ipt_hashlimit.h
linux/netfilter_ipv4/ipt_helper.h
linux/netfilter_ipv4/ipt_iprange.h
linux/netfilter_ipv4/ipt_length.h
linux/netfilter_ipv4/ipt_mac.h
linux/netfilter_ipv4/ipt_owner.h
linux/netfilter_ipv4/ipt_physdev.h
linux/netfilter_ipv4/ipt_pkttype.h
linux/netfilter_ipv4/ipt_realm.h
linux/netfilter_ipv4/ipt_recent.h
linux/netfilter_ipv4/ipt_sctp.h
linux/netfilter_ipv4/ipt_state.h
linux/netfilter_ipv4/ipt_string.h
linux/netfilter_ipv4/ipt_tos_.h
linux/netfilter_ipv6.h
linux/netfilter_ipv6/ip6_tables.h
linux/netfilter_ipv6/ip6t_LOG.h
linux/netfilter_ipv6/ip6t_REJECT.h
linux/netfilter_ipv6/ip6t_ah.h
linux/netfilter_ipv6/ip6t_esp.h
linux/netfilter_ipv6/ip6t_frag.h
linux/netfilter_ipv6/ip6t_ipv6header.h
linux/netfilter_ipv6/ip6t_length.h
linux/netfilter_ipv6/ip6t_mac.h
linux/netfilter_ipv6/ip6t_opts.h
linux/netfilter_ipv6/ip6t_owner.h
linux/netfilter_ipv6/ip6t_physdev.h
linux/netfilter_ipv6/ip6t_rt.h
linux/netlink.h
linux/nfs.h
linux/nfs2.h
linux/nfs3.h
linux/nfs4.h
linux/nfs_xdr.h
linux/nfsacl.h
linux/nfsd/auth.h
linux/nfsd/const.h
linux/nfsd/debug.h
linux/nfsd/export.h
linux/nfsd/interface.h
linux/nfsd/nfsfh.h
linux/nfsd/stats.h
linux/nfsd/xdr.h
linux/node.h
linux/nodemask.h
linux/notifier.h
linux/numa.h
linux/nvram.h
linux/omap_csmi.h
linux/pagemap.h
linux/param.h
linux/patchkey.h
linux/pci.h
linux/pci_ids.h
linux/pci_regs.h
linux/percpu.h
linux/percpu_counter.h
linux/personality.h
linux/pfkeyv2.h
linux/pkt_cls.h
linux/pkt_sched.h
linux/platform_device.h
linux/plist.h
linux/pm.h
linux/pnp.h
linux/poll.h
linux/posix_acl.h
linux/posix_types.h
linux/ppdev.h
linux/ppp_defs.h
linux/prctl.h
linux/preempt.h
linux/proc_fs.h
linux/ptrace.h
linux/qic117.h
linux/qnxtypes.h
linux/quota.h
linux/raid/md.h
linux/raid/md_k.h
linux/raid/md_p.h
linux/raid/md_u.h
linux/raid/xor.h
linux/random.h
linux/rbtree.h
linux/rcupdate.h
linux/reboot.h
linux/relay.h
linux/resource.h
linux/route.h
linux/rtc.h
linux/rtnetlink.h
linux/rwsem.h
linux/sched.h
linux/sem.h
linux/seq_file.h
linux/seqlock.h
linux/serial_core.h
linux/serial_reg.h
linux/serio.h
linux/shm.h
linux/signal.h
linux/skbuff.h
linux/slab.h
linux/smb.h
linux/smp.h
linux/smp_lock.h
linux/socket.h
linux/sockios.h
linux/soundcard.h
linux/spinlock.h
linux/spinlock_api_smp.h
linux/spinlock_api_up.h
linux/spinlock_types.h
linux/spinlock_types_up.h
linux/spinlock_up.h
linux/stacktrace.h
linux/stat.h
linux/statfs.h
linux/stddef.h
linux/string.h
linux/stringify.h
linux/sunrpc/auth.h
linux/sunrpc/auth_gss.h
linux/sunrpc/clnt.h
linux/sunrpc/debug.h
linux/sunrpc/gss_api.h
linux/sunrpc/gss_asn1.h
linux/sunrpc/gss_err.h
linux/sunrpc/msg_prot.h
linux/sunrpc/sched.h
linux/sunrpc/stats.h
linux/sunrpc/svc.h
linux/sunrpc/svcauth.h
linux/sunrpc/timer.h
linux/sunrpc/types.h
linux/sunrpc/xdr.h
linux/sunrpc/xprt.h
linux/swap.h
linux/sysctl.h
linux/sysdev.h
linux/sysfs.h
linux/taskstats.h
linux/taskstats_kern.h
linux/tcp.h
linux/telephony.h
linux/termios.h
linux/textsearch.h
linux/thread_info.h
linux/threads.h
linux/time.h
linux/timer.h
linux/times.h
linux/timex.h
linux/tiocl.h
linux/transport_class.h
linux/tty.h
linux/types.h
linux/udp.h
linux/ufs_fs_i.h
linux/ufs_fs_sb.h
linux/uio.h
linux/un.h
linux/unistd.h
linux/usb.h
linux/usb_ch9.h
linux/usbdevice_fs.h
linux/user.h
linux/utime.h
linux/utsname.h
linux/version.h
linux/vfs.h
linux/videodev.h
linux/videodev2.h
linux/vmalloc.h
linux/vt.h
linux/vt_buffer.h
linux/wait.h
linux/wanrouter.h
linux/wireless.h
linux/workqueue.h
linux/xattr.h
linux/zconf.h
linux/zlib.h
linux/zorro_ids.h
locale.h
machine/_types.h
machine/asm.h
machine/cdefs.h
machine/cpu-features.h
machine/endian.h
machine/exec.h
machine/ieee.h
machine/internal_types.h
machine/kernel.h
machine/limits.h
machine/setjmp.h
malloc.h
math.h
memory.h
mntent.h
mtd/mtd-abi.h
mtd/mtd-user.h
net/ethernet.h
net/ethertypes.h
net/if.h
net/if_arp.h
net/if_ether.h
net/if_ieee1394.h
net/if_packet.h
net/if_types.h
net/route.h
netdb.h
netinet/ether.h
netinet/icmp6.h
netinet/if_ether.h
netinet/in.h
netinet/in6.h
netinet/in_systm.h
netinet/ip.h
netinet/ip6.h
netinet/ip_icmp.h
netinet/tcp.h
netinet/udp.h
netpacket/packet.h
nsswitch.h
pathconf.h
paths.h
poll.h
pthread.h
pwd.h
regex.h
resolv.h
sched.h
semaphore.h
setjmp.h
sgtty.h
sha1.h
signal.h
stdint.h
stdio.h
stdlib.h
string.h
strings.h
sys/_errdefs.h
sys/_sigdefs.h
sys/_system_properties.h
sys/_types.h
sys/_wchar_limits.h
sys/atomics.h
sys/cachectl.h
sys/cdefs.h
sys/cdefs_elf.h
sys/dirent.h
sys/endian.h
sys/epoll.h
sys/errno.h
sys/eventfd.h
sys/exec_elf.h
sys/file.h
sys/fsuid.h
sys/inotify.h
sys/ioctl.h
sys/ioctl_compat.h
sys/ipc.h
sys/klog.h
sys/limits.h
sys/linux-syscalls.h
sys/mman.h
sys/mount.h
sys/param.h
sys/poll.h
sys/prctl.h
sys/ptrace.h
sys/queue.h
sys/reboot.h
sys/resource.h
sys/select.h
sys/sendfile.h
sys/socket.h
sys/socketcalls.h
sys/stat.h
sys/statfs.h
sys/syscall.h
sys/sysconf.h
sys/sysinfo.h
sys/syslimits.h
sys/sysmacros.h
sys/system_properties.h
sys/time.h
sys/timeb.h
sys/times.h
sys/ttychars.h
sys/ttydev.h
sys/types.h
sys/uio.h
sys/un.h
sys/utime.h
sys/utsname.h
sys/vfs.h
sys/vt.h
sys/wait.h
syslog.h
termio.h
termios.h
thread_db.h
time.h
time64.h
unistd.h
util.h
utime.h
utmp.h
wchar.h
wctype.h
zconf.h
zlib.h
/usr/include/stddef.h
/usr/include/sys/mbuf.h
/usr/include/_types.h
/usr/include/sys/_types/_null.h
/usr/include/sys/_types/_offsetof.h
/usr/include/sys/_types/_ptrdiff_t.h
/usr/include/sys/_types/_rsize_t.h
/usr/include/sys/_types/_size_t.h
/usr/include/sys/_types/_wchar_t.h
/usr/include/sys/_types/_wint_t.h
/usr/include/sys/appleapiopts.h
